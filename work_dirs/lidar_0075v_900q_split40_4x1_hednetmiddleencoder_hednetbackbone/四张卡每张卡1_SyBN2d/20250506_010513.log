2025-05-06 01:05:13,766 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.20 (default, Oct  3 2024, 15:24:27) [GCC 11.2.0]
CUDA available: True
GPU 0,1,2,3: NVIDIA GeForce RTX 2080 Ti
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.6, V11.6.55
GCC: gcc (Ubuntu 9.4.0-1ubuntu1~18.04) 9.4.0
PyTorch: 1.13.0+cu116
PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.6
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.14.0+cu116
OpenCV: 4.11.0
MMCV: 1.7.0
MMCV Compiler: GCC 9.4
MMCV CUDA Compiler: 11.6
MMDetection: 2.27.0
MMSegmentation: 0.30.0
MMDetection3D: 1.0.0rc6+
spconv2.0: True
------------------------------------------------------------

2025-05-06 01:05:16,038 - mmdet - INFO - 分布式训练: True
2025-05-06 01:05:18,229 - mmdet - INFO - 配置:
point_cloud_range = [-54, -54, -5.0, 54, 54, 3.0]
class_names = [
    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',
    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
]
dataset_type = 'NuScenesDataset'
data_root = 'data/nuscenes/'
input_modality = dict(
    use_lidar=True,
    use_camera=False,
    use_radar=False,
    use_map=False,
    use_external=False)
file_client_args = dict(backend='disk')
train_pipeline = [
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        file_client_args=dict(backend='disk')),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=9,
        use_dim=[0, 1, 2, 3, 4],
        file_client_args=dict(backend='disk'),
        pad_empty_sweeps=True,
        remove_close=True),
    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),
    dict(
        type='ObjectSample',
        db_sampler=dict(
            data_root='data/nuscenes/',
            info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',
            rate=1.0,
            prepare=dict(
                filter_by_difficulty=[-1],
                filter_by_min_points=dict(
                    car=5,
                    truck=5,
                    bus=5,
                    trailer=5,
                    construction_vehicle=5,
                    traffic_cone=5,
                    barrier=5,
                    motorcycle=5,
                    bicycle=5,
                    pedestrian=5)),
            classes=[
                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                'traffic_cone'
            ],
            sample_groups=dict(
                car=2,
                truck=3,
                construction_vehicle=7,
                bus=4,
                trailer=6,
                barrier=2,
                motorcycle=6,
                bicycle=6,
                pedestrian=2,
                traffic_cone=2),
            points_loader=dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=[0, 1, 2, 3, 4],
                file_client_args=dict(backend='disk')))),
    dict(
        type='GlobalRotScaleTrans',
        rot_range=[-0.785, 0.785],
        scale_ratio_range=[0.9, 1.1],
        translation_std=[0.5, 0.5, 0.5]),
    dict(
        type='RandomFlip3D',
        sync_2d=False,
        flip_ratio_bev_horizontal=0.5,
        flip_ratio_bev_vertical=0.5),
    dict(
        type='PointsRangeFilter',
        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
    dict(
        type='ObjectRangeFilter',
        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
    dict(
        type='ObjectNameFilter',
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ]),
    dict(type='PointShuffle'),
    dict(
        type='DefaultFormatBundle3D',
        class_names=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ]),
    dict(type='Collect3D', keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])
]
test_pipeline = [
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        file_client_args=dict(backend='disk')),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=9,
        use_dim=[0, 1, 2, 3, 4],
        file_client_args=dict(backend='disk'),
        pad_empty_sweeps=True,
        remove_close=True),
    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),
    dict(
        type='MultiScaleFlipAug3D',
        img_scale=(1333, 800),
        pts_scale_ratio=1,
        flip=False,
        transforms=[
            dict(
                type='GlobalRotScaleTrans',
                rot_range=[0, 0],
                scale_ratio_range=[1.0, 1.0],
                translation_std=[0, 0, 0]),
            dict(type='RandomFlip3D'),
            dict(
                type='PointsRangeFilter',
                point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
            dict(
                type='DefaultFormatBundle3D',
                class_names=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ],
                with_label=False),
            dict(
                type='Collect3D',
                keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])
        ])
]
eval_pipeline = [
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        file_client_args=dict(backend='disk')),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=9,
        use_dim=[0, 1, 2, 3, 4],
        file_client_args=dict(backend='disk'),
        pad_empty_sweeps=True,
        remove_close=True),
    dict(
        type='DefaultFormatBundle3D',
        class_names=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        with_label=False),
    dict(type='Collect3D', keys=['points'])
]
data = dict(
    samples_per_gpu=1,
    workers_per_gpu=4,
    train=dict(
        type='CBGSDataset',
        data_root='data/nuscenes/',
        ann_file='data/nuscenes/nuscenes_infos_train.pkl',
        pipeline=[
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                file_client_args=dict(backend='disk')),
            dict(
                type='LoadPointsFromMultiSweeps',
                sweeps_num=10,
                file_client_args=dict(backend='disk')),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True),
            dict(
                type='GlobalRotScaleTrans',
                rot_range=[-0.3925, 0.3925],
                scale_ratio_range=[0.95, 1.05],
                translation_std=[0, 0, 0]),
            dict(type='RandomFlip3D', flip_ratio_bev_horizontal=0.5),
            dict(
                type='PointsRangeFilter',
                point_cloud_range=[-50, -50, -5, 50, 50, 3]),
            dict(
                type='ObjectRangeFilter',
                point_cloud_range=[-50, -50, -5, 50, 50, 3]),
            dict(
                type='ObjectNameFilter',
                classes=[
                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',
                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',
                    'barrier'
                ]),
            dict(type='PointShuffle'),
            dict(
                type='DefaultFormatBundle3D',
                class_names=[
                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',
                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',
                    'barrier'
                ]),
            dict(
                type='Collect3D',
                keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])
        ],
        classes=[
            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',
            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=False,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=False,
        box_type_3d='LiDAR',
        split=40,
        dataset=dict(
            type='NuScenesDataset',
            data_root='data/nuscenes/',
            ann_file='data/nuscenes/nuscenes_infos_train.pkl',
            pipeline=[
                dict(
                    type='LoadPointsFromFile',
                    coord_type='LIDAR',
                    load_dim=5,
                    use_dim=5,
                    file_client_args=dict(backend='disk')),
                dict(
                    type='LoadPointsFromMultiSweeps',
                    sweeps_num=9,
                    use_dim=[0, 1, 2, 3, 4],
                    file_client_args=dict(backend='disk'),
                    pad_empty_sweeps=True,
                    remove_close=True),
                dict(
                    type='LoadAnnotations3D',
                    with_bbox_3d=True,
                    with_label_3d=True),
                dict(
                    type='ObjectSample',
                    db_sampler=dict(
                        data_root='data/nuscenes/',
                        info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',
                        rate=1.0,
                        prepare=dict(
                            filter_by_difficulty=[-1],
                            filter_by_min_points=dict(
                                car=5,
                                truck=5,
                                bus=5,
                                trailer=5,
                                construction_vehicle=5,
                                traffic_cone=5,
                                barrier=5,
                                motorcycle=5,
                                bicycle=5,
                                pedestrian=5)),
                        classes=[
                            'car', 'truck', 'construction_vehicle', 'bus',
                            'trailer', 'barrier', 'motorcycle', 'bicycle',
                            'pedestrian', 'traffic_cone'
                        ],
                        sample_groups=dict(
                            car=2,
                            truck=3,
                            construction_vehicle=7,
                            bus=4,
                            trailer=6,
                            barrier=2,
                            motorcycle=6,
                            bicycle=6,
                            pedestrian=2,
                            traffic_cone=2),
                        points_loader=dict(
                            type='LoadPointsFromFile',
                            coord_type='LIDAR',
                            load_dim=5,
                            use_dim=[0, 1, 2, 3, 4],
                            file_client_args=dict(backend='disk')))),
                dict(
                    type='GlobalRotScaleTrans',
                    rot_range=[-0.785, 0.785],
                    scale_ratio_range=[0.9, 1.1],
                    translation_std=[0.5, 0.5, 0.5]),
                dict(
                    type='RandomFlip3D',
                    sync_2d=False,
                    flip_ratio_bev_horizontal=0.5,
                    flip_ratio_bev_vertical=0.5),
                dict(
                    type='PointsRangeFilter',
                    point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
                dict(
                    type='ObjectRangeFilter',
                    point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
                dict(
                    type='ObjectNameFilter',
                    classes=[
                        'car', 'truck', 'construction_vehicle', 'bus',
                        'trailer', 'barrier', 'motorcycle', 'bicycle',
                        'pedestrian', 'traffic_cone'
                    ]),
                dict(type='PointShuffle'),
                dict(
                    type='DefaultFormatBundle3D',
                    class_names=[
                        'car', 'truck', 'construction_vehicle', 'bus',
                        'trailer', 'barrier', 'motorcycle', 'bicycle',
                        'pedestrian', 'traffic_cone'
                    ]),
                dict(
                    type='Collect3D',
                    keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])
            ],
            classes=[
                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                'traffic_cone'
            ],
            test_mode=False,
            use_valid_flag=True,
            box_type_3d='LiDAR')),
    val=dict(
        type='NuScenesDataset',
        data_root='data/nuscenes/',
        ann_file='data/nuscenes/nuscenes_infos_val.pkl',
        pipeline=[
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                file_client_args=dict(backend='disk')),
            dict(
                type='LoadPointsFromMultiSweeps',
                sweeps_num=9,
                use_dim=[0, 1, 2, 3, 4],
                file_client_args=dict(backend='disk'),
                pad_empty_sweeps=True,
                remove_close=True),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True),
            dict(
                type='MultiScaleFlipAug3D',
                img_scale=(1333, 800),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type='GlobalRotScaleTrans',
                        rot_range=[0, 0],
                        scale_ratio_range=[1.0, 1.0],
                        translation_std=[0, 0, 0]),
                    dict(type='RandomFlip3D'),
                    dict(
                        type='PointsRangeFilter',
                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
                    dict(
                        type='DefaultFormatBundle3D',
                        class_names=[
                            'car', 'truck', 'construction_vehicle', 'bus',
                            'trailer', 'barrier', 'motorcycle', 'bicycle',
                            'pedestrian', 'traffic_cone'
                        ],
                        with_label=False),
                    dict(
                        type='Collect3D',
                        keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])
                ])
        ],
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=False,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=True,
        box_type_3d='LiDAR'),
    test=dict(
        type='NuScenesDataset',
        data_root='data/nuscenes/',
        ann_file='data/nuscenes/nuscenes_infos_val.pkl',
        pipeline=[
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                file_client_args=dict(backend='disk')),
            dict(
                type='LoadPointsFromMultiSweeps',
                sweeps_num=9,
                use_dim=[0, 1, 2, 3, 4],
                file_client_args=dict(backend='disk'),
                pad_empty_sweeps=True,
                remove_close=True),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True),
            dict(
                type='MultiScaleFlipAug3D',
                img_scale=(1333, 800),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type='GlobalRotScaleTrans',
                        rot_range=[0, 0],
                        scale_ratio_range=[1.0, 1.0],
                        translation_std=[0, 0, 0]),
                    dict(type='RandomFlip3D'),
                    dict(
                        type='PointsRangeFilter',
                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
                    dict(
                        type='DefaultFormatBundle3D',
                        class_names=[
                            'car', 'truck', 'construction_vehicle', 'bus',
                            'trailer', 'barrier', 'motorcycle', 'bicycle',
                            'pedestrian', 'traffic_cone'
                        ],
                        with_label=False),
                    dict(
                        type='Collect3D',
                        keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])
                ])
        ],
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=False,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=True,
        box_type_3d='LiDAR'))
evaluation = dict(
    interval=5,
    pipeline=[
        dict(
            type='LoadPointsFromFile',
            coord_type='LIDAR',
            load_dim=5,
            use_dim=5,
            file_client_args=dict(backend='disk')),
        dict(
            type='LoadPointsFromMultiSweeps',
            sweeps_num=10,
            file_client_args=dict(backend='disk')),
        dict(
            type='DefaultFormatBundle3D',
            class_names=[
                'car', 'truck', 'trailer', 'bus', 'construction_vehicle',
                'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',
                'barrier'
            ],
            with_label=False),
        dict(type='Collect3D', keys=['points'])
    ])
optimizer = dict(type='AdamW', lr=1.25e-05, weight_decay=0.01)
optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))
lr_config = dict(
    policy='cyclic',
    target_ratio=(10, 0.0001),
    cyclic_times=1,
    step_ratio_up=0.4)
momentum_config = dict(
    policy='cyclic',
    target_ratio=(0.8947368421052632, 1),
    cyclic_times=1,
    step_ratio_up=0.4)
runner = dict(type='EpochBasedRunner', max_epochs=20)
checkpoint_config = dict(interval=1, max_keep_ckpts=1)
log_config = dict(
    interval=50,
    hooks=[dict(type='TextLoggerHook'),
           dict(type='TensorboardLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
work_dir = './work_dirs/lidar_0075v_900q_hednet_hednet_split40_256/2dbackbone和middle都更改了'
load_from = None
resume_from = None
workflow = [('train', 1)]
opencv_num_threads = 0
mp_start_method = 'fork'
plugin = 'plugin/futr3d'
voxel_size = [0.075, 0.075, 0.2]
center_head = dict(
    type='CenterHead',
    in_channels=512,
    tasks=[
        dict(num_class=1, class_names=['car']),
        dict(num_class=2, class_names=['truck', 'construction_vehicle']),
        dict(num_class=2, class_names=['bus', 'trailer']),
        dict(num_class=1, class_names=['barrier']),
        dict(num_class=2, class_names=['motorcycle', 'bicycle']),
        dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])
    ],
    common_heads=dict(
        reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),
    share_conv_channel=64,
    bbox_coder=dict(
        type='CenterPointBBoxCoder',
        pc_range=[-54, -54],
        post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],
        max_num=500,
        score_threshold=0.1,
        out_size_factor=8,
        voxel_size=[0.075, 0.075],
        code_size=9),
    separate_head=dict(type='SeparateHead', init_bias=-2.19, final_kernel=3),
    loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),
    loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),
    norm_bbox=True)
model = dict(
    type='FUTR3D',
    aux_weight=0.5,
    pts_voxel_layer=dict(
        max_num_points=-1,
        voxel_size=[0.075, 0.075, 0.2],
        max_voxels=(-1, -1),
        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
    pts_voxel_encoder=dict(
        type='DynamicVFE',
        in_channels=5,
        feat_channels=[64, 128],
        with_distance=False,
        with_cluster_center=True,
        with_voxel_center=True,
        voxel_size=[0.075, 0.075, 0.2],
        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
    pts_middle_encoder=dict(
        type='HEDNet',
        in_channels=128,
        sparse_shape=[41, 1440, 1440],
        model_cfg=dict(
            FEATURE_DIM=128,
            NUM_LAYERS=2,
            NUM_SBB=[2, 1, 1],
            DOWN_STRIDE=[1, 2, 2],
            DOWN_KERNEL_SIZE=[3, 3, 3])),
    pts_backbone=dict(
        type='CascadeDEDBackbone',
        in_channels=256,
        model_cfg=dict(
            FEATURE_DIM=256,
            NUM_LAYERS=4,
            NUM_SBB=[2, 1, 1],
            DOWN_STRIDES=[1, 2, 2])),
    pts_neck=dict(
        type='FPN',
        norm_cfg=dict(type='BN2d', eps=0.001, momentum=0.01),
        act_cfg=dict(type='ReLU', inplace=False),
        in_channels=[256],
        out_channels=256,
        start_level=0,
        add_extra_convs=True,
        num_outs=4,
        relu_before_extra_convs=True),
    pts_bbox_head=dict(
        type='FUTR3DHead',
        use_dab=True,
        anchor_size=3,
        use_aux=True,
        aux_head=dict(
            type='CenterHead',
            in_channels=512,
            tasks=[
                dict(num_class=1, class_names=['car']),
                dict(
                    num_class=2, class_names=['truck',
                                              'construction_vehicle']),
                dict(num_class=2, class_names=['bus', 'trailer']),
                dict(num_class=1, class_names=['barrier']),
                dict(num_class=2, class_names=['motorcycle', 'bicycle']),
                dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])
            ],
            common_heads=dict(
                reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),
            share_conv_channel=64,
            bbox_coder=dict(
                type='CenterPointBBoxCoder',
                pc_range=[-54, -54],
                post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],
                max_num=500,
                score_threshold=0.1,
                out_size_factor=8,
                voxel_size=[0.075, 0.075],
                code_size=9),
            separate_head=dict(
                type='SeparateHead', init_bias=-2.19, final_kernel=3),
            loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),
            loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),
            norm_bbox=True),
        mix_selection=False,
        num_query=900,
        num_classes=10,
        in_channels=256,
        pc_range=[-54, -54, -5.0, 54, 54, 3.0],
        sync_cls_avg_factor=True,
        with_box_refine=True,
        as_two_stage=False,
        code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],
        transformer=dict(
            type='FUTR3DTransformer',
            use_dab=True,
            decoder=dict(
                type='FUTR3DTransformerDecoder',
                num_layers=6,
                use_dab=True,
                anchor_size=3,
                return_intermediate=True,
                transformerlayers=dict(
                    type='DetrTransformerDecoderLayer',
                    attn_cfgs=[
                        dict(
                            type='MultiheadAttention',
                            embed_dims=256,
                            num_heads=8,
                            dropout=0.1),
                        dict(type='FUTR3DAttention', embed_dims=256)
                    ],
                    feedforward_channels=1024,
                    ffn_dropout=0.1,
                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',
                                     'ffn', 'norm')))),
        positional_encoding=dict(
            type='SinePositionalEncoding',
            num_feats=128,
            normalize=True,
            offset=-0.5),
        loss_cls=dict(
            type='FocalLoss',
            use_sigmoid=True,
            gamma=2.0,
            alpha=0.25,
            loss_weight=2.0),
        loss_bbox=dict(type='L1Loss', loss_weight=0.25),
        loss_iou=dict(type='GIoULoss', loss_weight=0)),
    train_cfg=dict(
        pts=dict(
            point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0],
            pc_range=[-54, -54, -5.0, 54, 54, 3.0],
            grid_size=[1440, 1440, 40],
            voxel_size=[0.075, 0.075, 0.2],
            out_size_factor=8,
            dense_reg=1,
            gaussian_overlap=0.1,
            max_objs=500,
            min_radius=2,
            code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],
            assigner=dict(
                type='HungarianAssigner3D',
                cls_cost=dict(type='FocalLossCost', weight=2.0),
                reg_cost=dict(type='BBox3DL1Cost', weight=0.25),
                iou_cost=dict(type='IoUCost', weight=0)))),
    test_cfg=dict(
        pts=dict(
            pc_range=[-54, -54],
            post_center_limit_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],
            max_per_img=500,
            max_pool_nms=False,
            min_radius=[4, 12, 10, 1, 0.85, 0.175],
            out_size_factor=8,
            voxel_size=[0.075, 0.075],
            nms_type='circle',
            pre_max_size=1000,
            post_max_size=83,
            nms_thr=0.2,
            max_num=300,
            score_threshold=0,
            post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0])))
db_sampler = dict(
    data_root='data/nuscenes/',
    info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',
    rate=1.0,
    prepare=dict(
        filter_by_difficulty=[-1],
        filter_by_min_points=dict(
            car=5,
            truck=5,
            bus=5,
            trailer=5,
            construction_vehicle=5,
            traffic_cone=5,
            barrier=5,
            motorcycle=5,
            bicycle=5,
            pedestrian=5)),
    classes=[
        'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',
        'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
    ],
    sample_groups=dict(
        car=2,
        truck=3,
        construction_vehicle=7,
        bus=4,
        trailer=6,
        barrier=2,
        motorcycle=6,
        bicycle=6,
        pedestrian=2,
        traffic_cone=2),
    points_loader=dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=[0, 1, 2, 3, 4],
        file_client_args=dict(backend='disk')))
find_unused_parameters = True
custom_hooks = [dict(type='FadeOjectSampleHook', num_last_epochs=5)]
gpu_ids = range(0, 4)

2025-05-06 01:05:18,231 - mmdet - INFO - 设置随机种子为 0, deterministic: False
2025-05-06 01:05:19,347 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
Name of parameter - Initialization information

pts_voxel_encoder.vfe_layers.0.0.weight - torch.Size([64, 11]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_voxel_encoder.vfe_layers.0.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_voxel_encoder.vfe_layers.0.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_voxel_encoder.vfe_layers.1.0.weight - torch.Size([128, 128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_voxel_encoder.vfe_layers.1.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_voxel_encoder.vfe_layers.1.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.0.0.weight - torch.Size([16, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv1.0.1.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.0.1.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.1.conv1.weight - torch.Size([16, 3, 3, 3, 16]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv1.1.conv1.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.1.bn1.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.1.bn1.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.1.conv2.weight - torch.Size([16, 3, 3, 3, 16]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv1.1.conv2.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.1.bn2.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.1.bn2.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.2.conv1.weight - torch.Size([16, 3, 3, 3, 16]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv1.2.conv1.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.2.bn1.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.2.bn1.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.2.conv2.weight - torch.Size([16, 3, 3, 3, 16]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv1.2.conv2.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.2.bn2.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.2.bn2.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.3.0.weight - torch.Size([32, 3, 3, 3, 16]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv1.3.1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.3.1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.0.blocks.1.conv1.weight - torch.Size([32, 3, 3, 3, 32]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv2.0.encoder.0.blocks.1.conv1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.0.blocks.1.bn1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.0.blocks.1.bn1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.0.blocks.1.conv2.weight - torch.Size([32, 3, 3, 3, 32]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv2.0.encoder.0.blocks.1.conv2.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.0.blocks.1.bn2.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.0.blocks.1.bn2.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.0.blocks.2.conv1.weight - torch.Size([32, 3, 3, 3, 32]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv2.0.encoder.0.blocks.2.conv1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.0.blocks.2.bn1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.0.blocks.2.bn1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.0.blocks.2.conv2.weight - torch.Size([32, 3, 3, 3, 32]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv2.0.encoder.0.blocks.2.conv2.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.0.blocks.2.bn2.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.0.blocks.2.bn2.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.1.blocks.0.0.weight - torch.Size([32, 3, 3, 3, 32]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv2.0.encoder.1.blocks.0.1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.1.blocks.0.1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.1.blocks.1.conv1.weight - torch.Size([32, 3, 3, 3, 32]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv2.0.encoder.1.blocks.1.conv1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.1.blocks.1.bn1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.1.blocks.1.bn1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.1.blocks.1.conv2.weight - torch.Size([32, 3, 3, 3, 32]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv2.0.encoder.1.blocks.1.conv2.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.1.blocks.1.bn2.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.1.blocks.1.bn2.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.2.blocks.0.0.weight - torch.Size([32, 3, 3, 3, 32]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv2.0.encoder.2.blocks.0.1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.2.blocks.0.1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.2.blocks.1.conv1.weight - torch.Size([32, 3, 3, 3, 32]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv2.0.encoder.2.blocks.1.conv1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.2.blocks.1.bn1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.2.blocks.1.bn1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.2.blocks.1.conv2.weight - torch.Size([32, 3, 3, 3, 32]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv2.0.encoder.2.blocks.1.conv2.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.2.blocks.1.bn2.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.2.blocks.1.bn2.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.decoder.0.0.weight - torch.Size([32, 3, 3, 3, 32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.decoder.0.1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.decoder.0.1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.decoder.1.0.weight - torch.Size([32, 3, 3, 3, 32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.decoder.1.1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.decoder.1.1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.decoder_norm.0.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.decoder_norm.0.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.decoder_norm.1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.decoder_norm.1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.1.0.weight - torch.Size([64, 3, 3, 3, 32]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv2.1.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.1.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.0.blocks.1.conv1.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv3.0.encoder.0.blocks.1.conv1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.0.blocks.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.0.blocks.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.0.blocks.1.conv2.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv3.0.encoder.0.blocks.1.conv2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.0.blocks.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.0.blocks.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.0.blocks.2.conv1.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv3.0.encoder.0.blocks.2.conv1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.0.blocks.2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.0.blocks.2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.0.blocks.2.conv2.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv3.0.encoder.0.blocks.2.conv2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.0.blocks.2.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.0.blocks.2.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.1.blocks.0.0.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv3.0.encoder.1.blocks.0.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.1.blocks.0.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.1.blocks.1.conv1.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv3.0.encoder.1.blocks.1.conv1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.1.blocks.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.1.blocks.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.1.blocks.1.conv2.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv3.0.encoder.1.blocks.1.conv2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.1.blocks.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.1.blocks.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.2.blocks.0.0.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv3.0.encoder.2.blocks.0.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.2.blocks.0.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.2.blocks.1.conv1.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv3.0.encoder.2.blocks.1.conv1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.2.blocks.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.2.blocks.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.2.blocks.1.conv2.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv3.0.encoder.2.blocks.1.conv2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.2.blocks.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.2.blocks.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.decoder.0.0.weight - torch.Size([64, 3, 3, 3, 64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.decoder.0.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.decoder.0.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.decoder.1.0.weight - torch.Size([64, 3, 3, 3, 64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.decoder.1.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.decoder.1.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.decoder_norm.0.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.decoder_norm.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.decoder_norm.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.decoder_norm.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.1.0.weight - torch.Size([128, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv3.1.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.1.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.0.blocks.1.conv1.weight - torch.Size([128, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.0.encoder.0.blocks.1.conv1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.0.blocks.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.0.blocks.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.0.blocks.1.conv2.weight - torch.Size([128, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.0.encoder.0.blocks.1.conv2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.0.blocks.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.0.blocks.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.0.blocks.2.conv1.weight - torch.Size([128, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.0.encoder.0.blocks.2.conv1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.0.blocks.2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.0.blocks.2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.0.blocks.2.conv2.weight - torch.Size([128, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.0.encoder.0.blocks.2.conv2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.0.blocks.2.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.0.blocks.2.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.1.blocks.0.0.weight - torch.Size([128, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.0.encoder.1.blocks.0.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.1.blocks.0.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.1.blocks.1.conv1.weight - torch.Size([128, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.0.encoder.1.blocks.1.conv1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.1.blocks.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.1.blocks.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.1.blocks.1.conv2.weight - torch.Size([128, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.0.encoder.1.blocks.1.conv2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.1.blocks.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.1.blocks.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.2.blocks.0.0.weight - torch.Size([128, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.0.encoder.2.blocks.0.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.2.blocks.0.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.2.blocks.1.conv1.weight - torch.Size([128, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.0.encoder.2.blocks.1.conv1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.2.blocks.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.2.blocks.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.2.blocks.1.conv2.weight - torch.Size([128, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.0.encoder.2.blocks.1.conv2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.2.blocks.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.2.blocks.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.decoder.0.0.weight - torch.Size([128, 3, 3, 3, 128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.decoder.0.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.decoder.0.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.decoder.1.0.weight - torch.Size([128, 3, 3, 3, 128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.decoder.1.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.decoder.1.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.decoder_norm.0.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.decoder_norm.0.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.decoder_norm.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.decoder_norm.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.0.blocks.1.conv1.weight - torch.Size([128, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.1.encoder.0.blocks.1.conv1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.0.blocks.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.0.blocks.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.0.blocks.1.conv2.weight - torch.Size([128, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.1.encoder.0.blocks.1.conv2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.0.blocks.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.0.blocks.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.0.blocks.2.conv1.weight - torch.Size([128, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.1.encoder.0.blocks.2.conv1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.0.blocks.2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.0.blocks.2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.0.blocks.2.conv2.weight - torch.Size([128, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.1.encoder.0.blocks.2.conv2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.0.blocks.2.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.0.blocks.2.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.1.blocks.0.0.weight - torch.Size([128, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.1.encoder.1.blocks.0.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.1.blocks.0.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.1.blocks.1.conv1.weight - torch.Size([128, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.1.encoder.1.blocks.1.conv1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.1.blocks.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.1.blocks.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.1.blocks.1.conv2.weight - torch.Size([128, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.1.encoder.1.blocks.1.conv2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.1.blocks.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.1.blocks.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.2.blocks.0.0.weight - torch.Size([128, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.1.encoder.2.blocks.0.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.2.blocks.0.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.2.blocks.1.conv1.weight - torch.Size([128, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.1.encoder.2.blocks.1.conv1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.2.blocks.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.2.blocks.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.2.blocks.1.conv2.weight - torch.Size([128, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.1.encoder.2.blocks.1.conv2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.2.blocks.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.2.blocks.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.decoder.0.0.weight - torch.Size([128, 3, 3, 3, 128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.decoder.0.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.decoder.0.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.decoder.1.0.weight - torch.Size([128, 3, 3, 3, 128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.decoder.1.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.decoder.1.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.decoder_norm.0.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.decoder_norm.0.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.decoder_norm.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.decoder_norm.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv_out.0.weight - torch.Size([128, 3, 1, 1, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv_out.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv_out.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv_out.3.weight - torch.Size([128, 3, 1, 1, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv_out.4.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv_out.4.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.0.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.downsample_layer.0.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.downsample_layer.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.downsample_layer.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.downsample_layer.0.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.downsample_layer.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.downsample_layer.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder.0.0.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder.0.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder.0.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder.1.0.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder.1.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder.1.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder_norm.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder_norm.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder_norm.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder_norm.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.0.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.downsample_layer.0.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.downsample_layer.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.downsample_layer.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.downsample_layer.0.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.downsample_layer.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.downsample_layer.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder.0.0.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder.0.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder.0.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder.1.0.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder.1.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder.1.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder_norm.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder_norm.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder_norm.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder_norm.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.0.0.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.0.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.0.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.0.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.0.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.0.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.0.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.0.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.0.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.0.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.0.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.0.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.0.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.0.downsample_layer.0.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.0.downsample_layer.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.0.downsample_layer.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.0.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.0.downsample_layer.0.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.0.downsample_layer.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.0.downsample_layer.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.decoder.0.0.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.decoder.0.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.decoder.0.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.decoder.1.0.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.decoder.1.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.decoder.1.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.decoder_norm.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.decoder_norm.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.decoder_norm.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.decoder_norm.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.0.0.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.0.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.0.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.0.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.0.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.0.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.0.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.0.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.0.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.0.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.0.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.0.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.0.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.0.downsample_layer.0.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.0.downsample_layer.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.0.downsample_layer.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.0.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.0.downsample_layer.0.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.0.downsample_layer.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.0.downsample_layer.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.decoder.0.0.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.decoder.0.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.decoder.0.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.decoder.1.0.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.decoder.1.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.decoder.1.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.decoder_norm.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.decoder_norm.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.decoder_norm.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.decoder_norm.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.lateral_convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.lateral_convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.fpn_convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.fpn_convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.fpn_convs.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.fpn_convs.3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.level_embeds - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.query_scale.layers.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.query_scale.layers.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.query_scale.layers.1.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.query_scale.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.ref_point_head.layers.0.weight - torch.Size([256, 384]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.ref_point_head.layers.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.ref_point_head.layers.1.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.ref_point_head.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.0.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.0.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.cls_branches.1.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.1.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.cls_branches.2.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.2.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.cls_branches.3.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.3.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.cls_branches.4.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.cls_branches.5.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.5.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.0.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.0.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.0.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.0.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.0.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.0.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.1.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.1.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.1.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.1.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.1.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.1.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.2.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.2.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.2.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.2.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.2.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.2.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.3.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.3.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.3.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.3.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.3.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.3.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.4.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.4.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.4.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.4.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.4.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.4.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.5.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.5.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.5.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.5.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.5.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.5.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.tgt_embed.weight - torch.Size([900, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.refpoint_embed.weight - torch.Size([900, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.shared_conv.conv.weight - torch.Size([64, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.shared_conv.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.shared_conv.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.heatmap.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.heatmap.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.heatmap.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.heatmap.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.heatmap.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.heatmap.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.heatmap.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.heatmap.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.heatmap.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.heatmap.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.heatmap.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.heatmap.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  
2025-05-06 01:05:19,446 - mmdet - INFO - Model:
FUTR3D(
  (pts_voxel_layer): Voxelization(voxel_size=[0.075, 0.075, 0.2], point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0], max_num_points=-1, max_voxels=(-1, -1), deterministic=True)
  (pts_voxel_encoder): DynamicVFE(
    (scatter): DynamicScatter(voxel_size=[0.075, 0.075, 0.2], point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0], average_points=True)
    (vfe_layers): ModuleList(
      (0): Sequential(
        (0): Linear(in_features=11, out_features=64, bias=False)
        (1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Sequential(
        (0): Linear(in_features=128, out_features=128, bias=False)
        (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (vfe_scatter): DynamicScatter(voxel_size=[0.075, 0.075, 0.2], point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0], average_points=False)
    (cluster_scatter): DynamicScatter(voxel_size=[0.075, 0.075, 0.2], point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0], average_points=True)
  )
  (pts_middle_encoder): HEDNet(
    (conv1): SparseSequential(
      (0): SparseSequential(
        (0): SubMConv3d(128, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): SyncBatchNorm(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (1): SparseBasicBlock(
        (conv1): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn1): SyncBatchNorm(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (relu): ReLU()
        (conv2): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn2): SyncBatchNorm(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      )
      (2): SparseBasicBlock(
        (conv1): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn1): SyncBatchNorm(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (relu): ReLU()
        (conv2): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn2): SyncBatchNorm(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      )
      (3): SparseSequential(
        (0): SparseConv3d(16, 32, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
    (conv2): SparseSequential(
      (0): SEDLayer(
        (encoder): ModuleList(
          (0): SEDBlock(
            (blocks): SparseSequential(
              (0): Identity()
              (1): SparseBasicBlock(
                (conv1): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
              (2): SparseBasicBlock(
                (conv1): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
          (1): SEDBlock(
            (blocks): SparseSequential(
              (0): SparseSequential(
                (0): SparseConv3d(32, 32, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (1): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (1): SparseBasicBlock(
                (conv1): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
          (2): SEDBlock(
            (blocks): SparseSequential(
              (0): SparseSequential(
                (0): SparseConv3d(32, 32, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (1): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (1): SparseBasicBlock(
                (conv1): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
        (decoder): ModuleList(
          (0): SparseSequential(
            (0): SparseInverseConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (1): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (1): SparseSequential(
            (0): SparseInverseConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (1): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
        )
        (decoder_norm): ModuleList(
          (0): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (1): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (1): SparseSequential(
        (0): SparseConv3d(32, 64, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
    (conv3): SparseSequential(
      (0): SEDLayer(
        (encoder): ModuleList(
          (0): SEDBlock(
            (blocks): SparseSequential(
              (0): Identity()
              (1): SparseBasicBlock(
                (conv1): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
              (2): SparseBasicBlock(
                (conv1): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
          (1): SEDBlock(
            (blocks): SparseSequential(
              (0): SparseSequential(
                (0): SparseConv3d(64, 64, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (1): SparseBasicBlock(
                (conv1): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
          (2): SEDBlock(
            (blocks): SparseSequential(
              (0): SparseSequential(
                (0): SparseConv3d(64, 64, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (1): SparseBasicBlock(
                (conv1): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
        (decoder): ModuleList(
          (0): SparseSequential(
            (0): SparseInverseConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (1): SparseSequential(
            (0): SparseInverseConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
        )
        (decoder_norm): ModuleList(
          (0): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (1): SparseSequential(
        (0): SparseConv3d(64, 128, kernel_size=[3, 3, 3], stride=[1, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
    (layers): ModuleList(
      (0): SEDLayer(
        (encoder): ModuleList(
          (0): SEDBlock(
            (blocks): SparseSequential(
              (0): Identity()
              (1): SparseBasicBlock(
                (conv1): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
              (2): SparseBasicBlock(
                (conv1): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
          (1): SEDBlock(
            (blocks): SparseSequential(
              (0): SparseSequential(
                (0): SparseConv3d(128, 128, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (1): SparseBasicBlock(
                (conv1): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
          (2): SEDBlock(
            (blocks): SparseSequential(
              (0): SparseSequential(
                (0): SparseConv3d(128, 128, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (1): SparseBasicBlock(
                (conv1): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
        (decoder): ModuleList(
          (0): SparseSequential(
            (0): SparseInverseConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (1): SparseSequential(
            (0): SparseInverseConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
        )
        (decoder_norm): ModuleList(
          (0): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (1): SEDLayer(
        (encoder): ModuleList(
          (0): SEDBlock(
            (blocks): SparseSequential(
              (0): Identity()
              (1): SparseBasicBlock(
                (conv1): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
              (2): SparseBasicBlock(
                (conv1): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
          (1): SEDBlock(
            (blocks): SparseSequential(
              (0): SparseSequential(
                (0): SparseConv3d(128, 128, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (1): SparseBasicBlock(
                (conv1): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
          (2): SEDBlock(
            (blocks): SparseSequential(
              (0): SparseSequential(
                (0): SparseConv3d(128, 128, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (1): SparseBasicBlock(
                (conv1): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
        (decoder): ModuleList(
          (0): SparseSequential(
            (0): SparseInverseConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (1): SparseSequential(
            (0): SparseInverseConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
        )
        (decoder_norm): ModuleList(
          (0): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
    )
    (conv_out): SparseSequential(
      (0): SparseConv3d(128, 128, kernel_size=[3, 1, 1], stride=[2, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
      (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
      (3): SparseConv3d(128, 128, kernel_size=[3, 1, 1], stride=[2, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
      (4): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (5): ReLU()
    )
  )
  (pts_backbone): CascadeDEDBackbone(
    (layers): ModuleList(
      (0): DEDBackbone(
        (encoder): ModuleList(
          (0): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
            (1): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
          (1): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
              (downsample_layer): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
            (1): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
          (2): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
              (downsample_layer): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
            (1): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
        )
        (decoder): ModuleList(
          (0): Sequential(
            (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (1): Sequential(
            (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
        )
        (decoder_norm): ModuleList(
          (0): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (1): DEDBackbone(
        (encoder): ModuleList(
          (0): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
            (1): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
          (1): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
              (downsample_layer): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
            (1): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
          (2): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
              (downsample_layer): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
            (1): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
        )
        (decoder): ModuleList(
          (0): Sequential(
            (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (1): Sequential(
            (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
        )
        (decoder_norm): ModuleList(
          (0): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (2): DEDBackbone(
        (encoder): ModuleList(
          (0): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
            (1): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
          (1): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
              (downsample_layer): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
            (1): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
          (2): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
              (downsample_layer): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
            (1): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
        )
        (decoder): ModuleList(
          (0): Sequential(
            (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (1): Sequential(
            (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
        )
        (decoder_norm): ModuleList(
          (0): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (3): DEDBackbone(
        (encoder): ModuleList(
          (0): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
            (1): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
          (1): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
              (downsample_layer): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
            (1): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
          (2): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
              (downsample_layer): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
            (1): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
        )
        (decoder): ModuleList(
          (0): Sequential(
            (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (1): Sequential(
            (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
        )
        (decoder_norm): ModuleList(
          (0): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (pts_neck): FPN(
    (lateral_convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
    )
    (fpn_convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
      (1): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
      (2): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
      (3): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
    )
  )
  init_cfg={'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
  (pts_bbox_head): FUTR3DHead(
    (loss_cls): FocalLoss()
    (loss_bbox): L1Loss()
    (loss_iou): GIoULoss()
    (activate): ReLU(inplace=True)
    (positional_encoding): SinePositionalEncoding(num_feats=128, temperature=10000, normalize=True, scale=6.283185307179586, eps=1e-06)
    (transformer): FUTR3DTransformer(
      (decoder): FUTR3DTransformerDecoder(
        (layers): ModuleList(
          (0): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (1): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (2): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (3): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (4): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (5): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
        (query_scale): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=256, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
          )
        )
        (ref_point_head): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=384, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
          )
        )
      )
    )
    (cls_branches): ModuleList(
      (0): Linear(in_features=256, out_features=10, bias=True)
      (1): Linear(in_features=256, out_features=10, bias=True)
      (2): Linear(in_features=256, out_features=10, bias=True)
      (3): Linear(in_features=256, out_features=10, bias=True)
      (4): Linear(in_features=256, out_features=10, bias=True)
      (5): Linear(in_features=256, out_features=10, bias=True)
    )
    (reg_branches): ModuleList(
      (0): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (1): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (2): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (3): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (4): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (5): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
    )
    (tgt_embed): Embedding(900, 256)
    (refpoint_embed): Embedding(900, 3)
    (aux_head): CenterHead(
      (loss_cls): GaussianFocalLoss()
      (loss_bbox): L1Loss()
      (shared_conv): ConvModule(
        (conv): Conv2d(512, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (task_heads): ModuleList(
        (0): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
        (1): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
        (2): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
        (3): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
        (4): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
        (5): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
      )
    )
  )
)
2025-05-06 01:05:53,881 - mmdet - INFO - Start running, host: root@mlkd-server2, work_dir: /root/disk/projects/FUTR3D/work_dirs/lidar_0075v_900q_hednet_hednet_split40_256/2dbackbone和middle都更改了
2025-05-06 01:05:53,881 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CyclicLrUpdaterHook                
(HIGH        ) CyclicMomentumUpdaterHook          
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CyclicLrUpdaterHook                
(HIGH        ) CyclicMomentumUpdaterHook          
(NORMAL      ) FadeOjectSampleHook                
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CyclicLrUpdaterHook                
(HIGH        ) CyclicMomentumUpdaterHook          
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_epoch:
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
2025-05-06 01:05:53,882 - mmdet - INFO - workflow: [('train', 1)], max: 20 epochs
2025-05-06 01:05:53,882 - mmdet - INFO - Checkpoints will be saved to /root/disk/projects/FUTR3D/work_dirs/lidar_0075v_900q_hednet_hednet_split40_256/2dbackbone和middle都更改了 by HardDiskBackend.
2025-05-06 01:07:26,107 - mmdet - INFO - Epoch [1][50/773]	lr: 1.252e-05, eta: 7:52:50, time: 1.841, data_time: 0.211, memory: 8071, loss_cls: 1.5730, loss_bbox: 2.2747, d0.loss_cls: 1.8452, d0.loss_bbox: 4.4631, d1.loss_cls: 1.7204, d1.loss_bbox: 2.3209, d2.loss_cls: 1.6503, d2.loss_bbox: 2.3072, d3.loss_cls: 1.5654, d3.loss_bbox: 2.2887, d4.loss_cls: 1.6023, d4.loss_bbox: 2.2820, aux_task0.loss_heatmap: 464.6457, aux_task0.loss_bbox: 0.9082, aux_task1.loss_heatmap: 759.4604, aux_task1.loss_bbox: 1.0746, aux_task2.loss_heatmap: 1120.5829, aux_task2.loss_bbox: 1.2151, aux_task3.loss_heatmap: 932.2441, aux_task3.loss_bbox: 0.7819, aux_task4.loss_heatmap: 541.1153, aux_task4.loss_bbox: 0.8203, aux_task5.loss_heatmap: 791.4276, aux_task5.loss_bbox: 0.7981, loss: 4640.9674, grad_norm: 83066.6172
2025-05-06 01:08:35,913 - mmdet - INFO - Epoch [1][100/773]	lr: 1.257e-05, eta: 6:54:29, time: 1.397, data_time: 0.005, memory: 8071, loss_cls: 1.1997, loss_bbox: 2.1830, d0.loss_cls: 1.5100, d0.loss_bbox: 4.4188, d1.loss_cls: 1.2762, d1.loss_bbox: 2.2666, d2.loss_cls: 1.2194, d2.loss_bbox: 2.2367, d3.loss_cls: 1.1958, d3.loss_bbox: 2.2111, d4.loss_cls: 1.2054, d4.loss_bbox: 2.1975, aux_task0.loss_heatmap: 177.2253, aux_task0.loss_bbox: 0.7390, aux_task1.loss_heatmap: 486.0477, aux_task1.loss_bbox: 0.9160, aux_task2.loss_heatmap: 740.6864, aux_task2.loss_bbox: 1.0927, aux_task3.loss_heatmap: 419.3921, aux_task3.loss_bbox: 0.6718, aux_task4.loss_heatmap: 329.3174, aux_task4.loss_bbox: 0.5805, aux_task5.loss_heatmap: 407.9290, aux_task5.loss_bbox: 0.6308, loss: 2588.3487, grad_norm: 19887.3360
2025-05-06 01:09:44,125 - mmdet - INFO - Epoch [1][150/773]	lr: 1.266e-05, eta: 6:31:28, time: 1.364, data_time: 0.004, memory: 8318, loss_cls: 1.1775, loss_bbox: 1.9513, d0.loss_cls: 1.2465, d0.loss_bbox: 4.1786, d1.loss_cls: 1.1761, d1.loss_bbox: 2.1294, d2.loss_cls: 1.1785, d2.loss_bbox: 2.0679, d3.loss_cls: 1.1740, d3.loss_bbox: 2.0197, d4.loss_cls: 1.1816, d4.loss_bbox: 1.9798, aux_task0.loss_heatmap: 84.5169, aux_task0.loss_bbox: 0.5984, aux_task1.loss_heatmap: 268.4122, aux_task1.loss_bbox: 0.7771, aux_task2.loss_heatmap: 386.2883, aux_task2.loss_bbox: 0.8975, aux_task3.loss_heatmap: 174.0197, aux_task3.loss_bbox: 0.5323, aux_task4.loss_heatmap: 170.9688, aux_task4.loss_bbox: 0.4868, aux_task5.loss_heatmap: 199.4553, aux_task5.loss_bbox: 0.5261, loss: 1308.9403, grad_norm: 8091.9754
2025-05-06 01:10:56,875 - mmdet - INFO - Epoch [1][200/773]	lr: 1.279e-05, eta: 6:25:09, time: 1.455, data_time: 0.004, memory: 8318, loss_cls: 1.1630, loss_bbox: 1.8496, d0.loss_cls: 1.1586, d0.loss_bbox: 3.4640, d1.loss_cls: 1.1580, d1.loss_bbox: 1.8795, d2.loss_cls: 1.1607, d2.loss_bbox: 1.8099, d3.loss_cls: 1.1591, d3.loss_bbox: 1.7949, d4.loss_cls: 1.1658, d4.loss_bbox: 1.8096, aux_task0.loss_heatmap: 50.5642, aux_task0.loss_bbox: 0.5202, aux_task1.loss_heatmap: 141.5541, aux_task1.loss_bbox: 0.6591, aux_task2.loss_heatmap: 224.0687, aux_task2.loss_bbox: 0.7837, aux_task3.loss_heatmap: 90.7012, aux_task3.loss_bbox: 0.4708, aux_task4.loss_heatmap: 89.0211, aux_task4.loss_bbox: 0.4445, aux_task5.loss_heatmap: 102.4440, aux_task5.loss_bbox: 0.4861, loss: 721.2904, grad_norm: 5038.6702
2025-05-06 01:12:06,482 - mmdet - INFO - Epoch [1][250/773]	lr: 1.295e-05, eta: 6:17:41, time: 1.392, data_time: 0.004, memory: 8318, loss_cls: 1.1681, loss_bbox: 1.9832, d0.loss_cls: 1.1512, d0.loss_bbox: 2.2402, d1.loss_cls: 1.1641, d1.loss_bbox: 1.7772, d2.loss_cls: 1.1666, d2.loss_bbox: 1.8229, d3.loss_cls: 1.1632, d3.loss_bbox: 1.8848, d4.loss_cls: 1.1678, d4.loss_bbox: 1.9434, aux_task0.loss_heatmap: 28.7131, aux_task0.loss_bbox: 0.4985, aux_task1.loss_heatmap: 80.9963, aux_task1.loss_bbox: 0.5921, aux_task2.loss_heatmap: 149.4962, aux_task2.loss_bbox: 0.6859, aux_task3.loss_heatmap: 55.9882, aux_task3.loss_bbox: 0.4515, aux_task4.loss_heatmap: 56.4339, aux_task4.loss_bbox: 0.4458, aux_task5.loss_heatmap: 64.7404, aux_task5.loss_bbox: 0.4940, loss: 458.1683, grad_norm: 3419.2314
2025-05-06 01:13:15,391 - mmdet - INFO - Epoch [1][300/773]	lr: 1.315e-05, eta: 6:11:44, time: 1.378, data_time: 0.004, memory: 8463, loss_cls: 1.1710, loss_bbox: 1.8726, d0.loss_cls: 1.1675, d0.loss_bbox: 1.8237, d1.loss_cls: 1.1729, d1.loss_bbox: 1.7948, d2.loss_cls: 1.1732, d2.loss_bbox: 1.8283, d3.loss_cls: 1.1718, d3.loss_bbox: 1.8546, d4.loss_cls: 1.1715, d4.loss_bbox: 1.8730, aux_task0.loss_heatmap: 21.3526, aux_task0.loss_bbox: 0.4683, aux_task1.loss_heatmap: 57.3972, aux_task1.loss_bbox: 0.5382, aux_task2.loss_heatmap: 94.9152, aux_task2.loss_bbox: 0.6370, aux_task3.loss_heatmap: 41.7948, aux_task3.loss_bbox: 0.4269, aux_task4.loss_heatmap: 38.1831, aux_task4.loss_bbox: 0.4489, aux_task5.loss_heatmap: 38.6715, aux_task5.loss_bbox: 0.4718, loss: 313.3805, grad_norm: 2437.2821
2025-05-06 01:14:27,586 - mmdet - INFO - Epoch [1][350/773]	lr: 1.338e-05, eta: 6:09:32, time: 1.444, data_time: 0.004, memory: 8463, loss_cls: 1.1613, loss_bbox: 1.7883, d0.loss_cls: 1.1576, d0.loss_bbox: 1.8006, d1.loss_cls: 1.1603, d1.loss_bbox: 1.7826, d2.loss_cls: 1.1594, d2.loss_bbox: 1.7918, d3.loss_cls: 1.1599, d3.loss_bbox: 1.7959, d4.loss_cls: 1.1599, d4.loss_bbox: 1.7914, aux_task0.loss_heatmap: 12.7645, aux_task0.loss_bbox: 0.4661, aux_task1.loss_heatmap: 36.6136, aux_task1.loss_bbox: 0.5302, aux_task2.loss_heatmap: 64.6840, aux_task2.loss_bbox: 0.5956, aux_task3.loss_heatmap: 29.0260, aux_task3.loss_bbox: 0.4219, aux_task4.loss_heatmap: 24.0816, aux_task4.loss_bbox: 0.4379, aux_task5.loss_heatmap: 22.8023, aux_task5.loss_bbox: 0.4667, loss: 210.5994, grad_norm: 1639.7752
2025-05-06 01:15:41,090 - mmdet - INFO - Epoch [1][400/773]	lr: 1.365e-05, eta: 6:08:23, time: 1.470, data_time: 0.004, memory: 8463, loss_cls: 1.1676, loss_bbox: 1.7739, d0.loss_cls: 1.1614, d0.loss_bbox: 1.7847, d1.loss_cls: 1.1661, d1.loss_bbox: 1.7727, d2.loss_cls: 1.1648, d2.loss_bbox: 1.7752, d3.loss_cls: 1.1655, d3.loss_bbox: 1.7719, d4.loss_cls: 1.1661, d4.loss_bbox: 1.7707, aux_task0.loss_heatmap: 10.7430, aux_task0.loss_bbox: 0.4631, aux_task1.loss_heatmap: 25.9938, aux_task1.loss_bbox: 0.5081, aux_task2.loss_heatmap: 44.4517, aux_task2.loss_bbox: 0.5671, aux_task3.loss_heatmap: 18.4436, aux_task3.loss_bbox: 0.4448, aux_task4.loss_heatmap: 16.3337, aux_task4.loss_bbox: 0.4404, aux_task5.loss_heatmap: 15.7423, aux_task5.loss_bbox: 0.4557, loss: 152.2283, grad_norm: 1166.6797
2025-05-06 01:16:53,286 - mmdet - INFO - Epoch [1][450/773]	lr: 1.396e-05, eta: 6:06:30, time: 1.444, data_time: 0.004, memory: 8463, loss_cls: 1.1570, loss_bbox: 1.7515, d0.loss_cls: 1.1555, d0.loss_bbox: 1.7643, d1.loss_cls: 1.1580, d1.loss_bbox: 1.7480, d2.loss_cls: 1.1560, d2.loss_bbox: 1.7443, d3.loss_cls: 1.1551, d3.loss_bbox: 1.7454, d4.loss_cls: 1.1555, d4.loss_bbox: 1.7476, aux_task0.loss_heatmap: 7.3605, aux_task0.loss_bbox: 0.4362, aux_task1.loss_heatmap: 14.9792, aux_task1.loss_bbox: 0.4888, aux_task2.loss_heatmap: 29.1044, aux_task2.loss_bbox: 0.5315, aux_task3.loss_heatmap: 12.8659, aux_task3.loss_bbox: 0.4233, aux_task4.loss_heatmap: 10.9356, aux_task4.loss_bbox: 0.4349, aux_task5.loss_heatmap: 10.0612, aux_task5.loss_bbox: 0.4515, loss: 105.5112, grad_norm: 770.8745
2025-05-06 01:18:02,172 - mmdet - INFO - Epoch [1][500/773]	lr: 1.430e-05, eta: 6:03:06, time: 1.378, data_time: 0.004, memory: 8463, loss_cls: 1.1426, loss_bbox: 1.7440, d0.loss_cls: 1.1397, d0.loss_bbox: 1.7596, d1.loss_cls: 1.1402, d1.loss_bbox: 1.7412, d2.loss_cls: 1.1416, d2.loss_bbox: 1.7409, d3.loss_cls: 1.1389, d3.loss_bbox: 1.7377, d4.loss_cls: 1.1397, d4.loss_bbox: 1.7433, aux_task0.loss_heatmap: 4.9417, aux_task0.loss_bbox: 0.4433, aux_task1.loss_heatmap: 10.6283, aux_task1.loss_bbox: 0.4831, aux_task2.loss_heatmap: 21.6841, aux_task2.loss_bbox: 0.5169, aux_task3.loss_heatmap: 8.4383, aux_task3.loss_bbox: 0.4098, aux_task4.loss_heatmap: 7.6171, aux_task4.loss_bbox: 0.4297, aux_task5.loss_heatmap: 6.4462, aux_task5.loss_bbox: 0.4567, loss: 79.8045, grad_norm: 531.3985
2025-05-06 01:19:11,829 - mmdet - INFO - Epoch [1][550/773]	lr: 1.467e-05, eta: 6:00:28, time: 1.393, data_time: 0.004, memory: 8463, loss_cls: 1.1436, loss_bbox: 1.7103, d0.loss_cls: 1.1366, d0.loss_bbox: 1.7381, d1.loss_cls: 1.1385, d1.loss_bbox: 1.7142, d2.loss_cls: 1.1403, d2.loss_bbox: 1.7154, d3.loss_cls: 1.1405, d3.loss_bbox: 1.7042, d4.loss_cls: 1.1397, d4.loss_bbox: 1.7075, aux_task0.loss_heatmap: 3.7096, aux_task0.loss_bbox: 0.4476, aux_task1.loss_heatmap: 6.7238, aux_task1.loss_bbox: 0.4902, aux_task2.loss_heatmap: 13.4354, aux_task2.loss_bbox: 0.5130, aux_task3.loss_heatmap: 6.1695, aux_task3.loss_bbox: 0.4115, aux_task4.loss_heatmap: 4.9859, aux_task4.loss_bbox: 0.4203, aux_task5.loss_heatmap: 4.4763, aux_task5.loss_bbox: 0.4578, loss: 59.3700, grad_norm: 339.5717
2025-05-06 01:20:21,568 - mmdet - INFO - Epoch [1][600/773]	lr: 1.508e-05, eta: 5:58:06, time: 1.395, data_time: 0.005, memory: 8463, loss_cls: 1.1454, loss_bbox: 1.7311, d0.loss_cls: 1.1448, d0.loss_bbox: 1.7525, d1.loss_cls: 1.1482, d1.loss_bbox: 1.7268, d2.loss_cls: 1.1447, d2.loss_bbox: 1.7269, d3.loss_cls: 1.1445, d3.loss_bbox: 1.7313, d4.loss_cls: 1.1435, d4.loss_bbox: 1.7297, aux_task0.loss_heatmap: 2.8981, aux_task0.loss_bbox: 0.4493, aux_task1.loss_heatmap: 4.5521, aux_task1.loss_bbox: 0.4946, aux_task2.loss_heatmap: 9.7317, aux_task2.loss_bbox: 0.5030, aux_task3.loss_heatmap: 4.3578, aux_task3.loss_bbox: 0.4133, aux_task4.loss_heatmap: 3.4873, aux_task4.loss_bbox: 0.4275, aux_task5.loss_heatmap: 3.4059, aux_task5.loss_bbox: 0.4679, loss: 48.4577, grad_norm: 230.1765
2025-05-06 01:21:30,259 - mmdet - INFO - Epoch [1][650/773]	lr: 1.553e-05, eta: 5:55:32, time: 1.374, data_time: 0.004, memory: 8463, loss_cls: 1.1414, loss_bbox: 1.7055, d0.loss_cls: 1.1402, d0.loss_bbox: 1.7307, d1.loss_cls: 1.1434, d1.loss_bbox: 1.7137, d2.loss_cls: 1.1411, d2.loss_bbox: 1.7082, d3.loss_cls: 1.1413, d3.loss_bbox: 1.7064, d4.loss_cls: 1.1421, d4.loss_bbox: 1.7044, aux_task0.loss_heatmap: 2.1511, aux_task0.loss_bbox: 0.4503, aux_task1.loss_heatmap: 3.2834, aux_task1.loss_bbox: 0.4808, aux_task2.loss_heatmap: 5.7328, aux_task2.loss_bbox: 0.4921, aux_task3.loss_heatmap: 3.3097, aux_task3.loss_bbox: 0.4125, aux_task4.loss_heatmap: 2.6093, aux_task4.loss_bbox: 0.4233, aux_task5.loss_heatmap: 2.5520, aux_task5.loss_bbox: 0.4699, loss: 39.4855, grad_norm: 145.3144
2025-05-06 01:22:43,155 - mmdet - INFO - Epoch [1][700/773]	lr: 1.601e-05, eta: 5:54:38, time: 1.458, data_time: 0.004, memory: 8463, loss_cls: 1.1383, loss_bbox: 1.7037, d0.loss_cls: 1.1327, d0.loss_bbox: 1.7348, d1.loss_cls: 1.1357, d1.loss_bbox: 1.7124, d2.loss_cls: 1.1322, d2.loss_bbox: 1.7083, d3.loss_cls: 1.1340, d3.loss_bbox: 1.7072, d4.loss_cls: 1.1343, d4.loss_bbox: 1.7052, aux_task0.loss_heatmap: 1.8838, aux_task0.loss_bbox: 0.4458, aux_task1.loss_heatmap: 2.4928, aux_task1.loss_bbox: 0.4775, aux_task2.loss_heatmap: 3.7937, aux_task2.loss_bbox: 0.4729, aux_task3.loss_heatmap: 2.6279, aux_task3.loss_bbox: 0.4050, aux_task4.loss_heatmap: 2.1175, aux_task4.loss_bbox: 0.4211, aux_task5.loss_heatmap: 2.0510, aux_task5.loss_bbox: 0.4596, loss: 34.7275, grad_norm: 88.5807
2025-05-06 01:23:51,782 - mmdet - INFO - Epoch [1][750/773]	lr: 1.652e-05, eta: 5:52:18, time: 1.373, data_time: 0.004, memory: 8463, loss_cls: 1.1311, loss_bbox: 1.7146, d0.loss_cls: 1.1341, d0.loss_bbox: 1.7343, d1.loss_cls: 1.1369, d1.loss_bbox: 1.7171, d2.loss_cls: 1.1323, d2.loss_bbox: 1.7163, d3.loss_cls: 1.1324, d3.loss_bbox: 1.7145, d4.loss_cls: 1.1286, d4.loss_bbox: 1.7187, aux_task0.loss_heatmap: 1.6459, aux_task0.loss_bbox: 0.4421, aux_task1.loss_heatmap: 2.0789, aux_task1.loss_bbox: 0.4891, aux_task2.loss_heatmap: 2.7872, aux_task2.loss_bbox: 0.4916, aux_task3.loss_heatmap: 2.0995, aux_task3.loss_bbox: 0.3864, aux_task4.loss_heatmap: 1.7806, aux_task4.loss_bbox: 0.4322, aux_task5.loss_heatmap: 1.8932, aux_task5.loss_bbox: 0.4605, loss: 32.0983, grad_norm: 61.6112
2025-05-06 01:24:23,258 - mmdet - INFO - Saving checkpoint at 1 epochs
2025-05-06 01:25:50,989 - mmdet - INFO - Epoch [2][50/773]	lr: 1.733e-05, eta: 5:45:00, time: 1.723, data_time: 0.270, memory: 8463, loss_cls: 1.1196, loss_bbox: 1.7143, d0.loss_cls: 1.1374, d0.loss_bbox: 1.7398, d1.loss_cls: 1.1335, d1.loss_bbox: 1.7173, d2.loss_cls: 1.1273, d2.loss_bbox: 1.7151, d3.loss_cls: 1.1200, d3.loss_bbox: 1.7136, d4.loss_cls: 1.1144, d4.loss_bbox: 1.7145, aux_task0.loss_heatmap: 1.5330, aux_task0.loss_bbox: 0.4378, aux_task1.loss_heatmap: 1.7376, aux_task1.loss_bbox: 0.4704, aux_task2.loss_heatmap: 2.0410, aux_task2.loss_bbox: 0.4787, aux_task3.loss_heatmap: 1.7886, aux_task3.loss_bbox: 0.3924, aux_task4.loss_heatmap: 1.4852, aux_task4.loss_bbox: 0.4225, aux_task5.loss_heatmap: 1.6145, aux_task5.loss_bbox: 0.4529, loss: 29.9211, grad_norm: 41.2398
2025-05-06 01:27:01,055 - mmdet - INFO - Epoch [2][100/773]	lr: 1.793e-05, eta: 5:43:39, time: 1.401, data_time: 0.004, memory: 8463, loss_cls: 1.0741, loss_bbox: 1.6934, d0.loss_cls: 1.1107, d0.loss_bbox: 1.7256, d1.loss_cls: 1.1033, d1.loss_bbox: 1.7044, d2.loss_cls: 1.0842, d2.loss_bbox: 1.7010, d3.loss_cls: 1.0700, d3.loss_bbox: 1.6967, d4.loss_cls: 1.0679, d4.loss_bbox: 1.6980, aux_task0.loss_heatmap: 1.4707, aux_task0.loss_bbox: 0.4221, aux_task1.loss_heatmap: 1.6692, aux_task1.loss_bbox: 0.4531, aux_task2.loss_heatmap: 1.9111, aux_task2.loss_bbox: 0.4838, aux_task3.loss_heatmap: 1.5886, aux_task3.loss_bbox: 0.3785, aux_task4.loss_heatmap: 1.3174, aux_task4.loss_bbox: 0.4151, aux_task5.loss_heatmap: 1.4837, aux_task5.loss_bbox: 0.4390, loss: 28.7615, grad_norm: 38.2257
2025-05-06 01:28:11,535 - mmdet - INFO - Epoch [2][150/773]	lr: 1.856e-05, eta: 5:42:25, time: 1.409, data_time: 0.004, memory: 8463, loss_cls: 1.0547, loss_bbox: 1.6618, d0.loss_cls: 1.1089, d0.loss_bbox: 1.7206, d1.loss_cls: 1.0959, d1.loss_bbox: 1.6963, d2.loss_cls: 1.0721, d2.loss_bbox: 1.6898, d3.loss_cls: 1.0566, d3.loss_bbox: 1.6812, d4.loss_cls: 1.0548, d4.loss_bbox: 1.6763, aux_task0.loss_heatmap: 1.4518, aux_task0.loss_bbox: 0.4133, aux_task1.loss_heatmap: 1.6216, aux_task1.loss_bbox: 0.4451, aux_task2.loss_heatmap: 1.8649, aux_task2.loss_bbox: 0.4691, aux_task3.loss_heatmap: 1.4966, aux_task3.loss_bbox: 0.3637, aux_task4.loss_heatmap: 1.2015, aux_task4.loss_bbox: 0.3916, aux_task5.loss_heatmap: 1.4400, aux_task5.loss_bbox: 0.4207, loss: 28.1488, grad_norm: 39.8514
2025-05-06 01:29:22,682 - mmdet - INFO - Epoch [2][200/773]	lr: 1.922e-05, eta: 5:41:21, time: 1.423, data_time: 0.004, memory: 8463, loss_cls: 1.0283, loss_bbox: 1.6215, d0.loss_cls: 1.0862, d0.loss_bbox: 1.7265, d1.loss_cls: 1.0749, d1.loss_bbox: 1.7052, d2.loss_cls: 1.0527, d2.loss_bbox: 1.6773, d3.loss_cls: 1.0338, d3.loss_bbox: 1.6480, d4.loss_cls: 1.0304, d4.loss_bbox: 1.6392, aux_task0.loss_heatmap: 1.4225, aux_task0.loss_bbox: 0.4009, aux_task1.loss_heatmap: 1.5700, aux_task1.loss_bbox: 0.4255, aux_task2.loss_heatmap: 1.8312, aux_task2.loss_bbox: 0.4676, aux_task3.loss_heatmap: 1.4541, aux_task3.loss_bbox: 0.3612, aux_task4.loss_heatmap: 1.1080, aux_task4.loss_bbox: 0.3812, aux_task5.loss_heatmap: 1.3672, aux_task5.loss_bbox: 0.4046, loss: 27.5177, grad_norm: 36.5919
2025-05-06 01:30:33,021 - mmdet - INFO - Epoch [2][250/773]	lr: 1.991e-05, eta: 5:40:05, time: 1.406, data_time: 0.004, memory: 8463, loss_cls: 0.9861, loss_bbox: 1.5763, d0.loss_cls: 1.0579, d0.loss_bbox: 1.6990, d1.loss_cls: 1.0492, d1.loss_bbox: 1.6734, d2.loss_cls: 1.0331, d2.loss_bbox: 1.6426, d3.loss_cls: 0.9965, d3.loss_bbox: 1.5947, d4.loss_cls: 0.9892, d4.loss_bbox: 1.5824, aux_task0.loss_heatmap: 1.3651, aux_task0.loss_bbox: 0.3989, aux_task1.loss_heatmap: 1.5370, aux_task1.loss_bbox: 0.4294, aux_task2.loss_heatmap: 1.8114, aux_task2.loss_bbox: 0.4405, aux_task3.loss_heatmap: 1.4152, aux_task3.loss_bbox: 0.3635, aux_task4.loss_heatmap: 1.0806, aux_task4.loss_bbox: 0.3783, aux_task5.loss_heatmap: 1.3239, aux_task5.loss_bbox: 0.3995, loss: 26.8237, grad_norm: 41.6225
2025-05-06 01:31:49,947 - mmdet - INFO - Epoch [2][300/773]	lr: 2.064e-05, eta: 5:40:19, time: 1.540, data_time: 0.006, memory: 8463, loss_cls: 0.9702, loss_bbox: 1.5857, d0.loss_cls: 1.0527, d0.loss_bbox: 1.7212, d1.loss_cls: 1.0453, d1.loss_bbox: 1.6972, d2.loss_cls: 1.0259, d2.loss_bbox: 1.6589, d3.loss_cls: 0.9814, d3.loss_bbox: 1.6006, d4.loss_cls: 0.9691, d4.loss_bbox: 1.5925, aux_task0.loss_heatmap: 1.3681, aux_task0.loss_bbox: 0.3957, aux_task1.loss_heatmap: 1.5166, aux_task1.loss_bbox: 0.4133, aux_task2.loss_heatmap: 1.7254, aux_task2.loss_bbox: 0.4433, aux_task3.loss_heatmap: 1.4143, aux_task3.loss_bbox: 0.3473, aux_task4.loss_heatmap: 1.0007, aux_task4.loss_bbox: 0.3816, aux_task5.loss_heatmap: 1.2791, aux_task5.loss_bbox: 0.4003, loss: 26.5865, grad_norm: 38.8113
2025-05-06 01:33:03,421 - mmdet - INFO - Epoch [2][350/773]	lr: 2.139e-05, eta: 5:39:39, time: 1.468, data_time: 0.004, memory: 8463, loss_cls: 0.9698, loss_bbox: 1.5616, d0.loss_cls: 1.0355, d0.loss_bbox: 1.7144, d1.loss_cls: 1.0322, d1.loss_bbox: 1.6875, d2.loss_cls: 1.0149, d2.loss_bbox: 1.6490, d3.loss_cls: 0.9721, d3.loss_bbox: 1.5839, d4.loss_cls: 0.9669, d4.loss_bbox: 1.5702, aux_task0.loss_heatmap: 1.3314, aux_task0.loss_bbox: 0.3954, aux_task1.loss_heatmap: 1.4974, aux_task1.loss_bbox: 0.4154, aux_task2.loss_heatmap: 1.7490, aux_task2.loss_bbox: 0.4556, aux_task3.loss_heatmap: 1.3790, aux_task3.loss_bbox: 0.3525, aux_task4.loss_heatmap: 0.9845, aux_task4.loss_bbox: 0.3778, aux_task5.loss_heatmap: 1.2670, aux_task5.loss_bbox: 0.3910, loss: 26.3538, grad_norm: 38.8063
2025-05-06 01:34:23,943 - mmdet - INFO - Epoch [2][400/773]	lr: 2.218e-05, eta: 5:40:23, time: 1.610, data_time: 0.005, memory: 8463, loss_cls: 0.9627, loss_bbox: 1.5453, d0.loss_cls: 1.0217, d0.loss_bbox: 1.7311, d1.loss_cls: 1.0165, d1.loss_bbox: 1.6977, d2.loss_cls: 0.9979, d2.loss_bbox: 1.6318, d3.loss_cls: 0.9626, d3.loss_bbox: 1.5642, d4.loss_cls: 0.9574, d4.loss_bbox: 1.5512, aux_task0.loss_heatmap: 1.3008, aux_task0.loss_bbox: 0.3927, aux_task1.loss_heatmap: 1.5008, aux_task1.loss_bbox: 0.4133, aux_task2.loss_heatmap: 1.7360, aux_task2.loss_bbox: 0.4473, aux_task3.loss_heatmap: 1.3615, aux_task3.loss_bbox: 0.3682, aux_task4.loss_heatmap: 0.9624, aux_task4.loss_bbox: 0.3826, aux_task5.loss_heatmap: 1.2373, aux_task5.loss_bbox: 0.3926, loss: 26.1358, grad_norm: 38.1830
2025-05-06 01:35:33,530 - mmdet - INFO - Epoch [2][450/773]	lr: 2.300e-05, eta: 5:38:50, time: 1.393, data_time: 0.005, memory: 8463, loss_cls: 0.9442, loss_bbox: 1.4881, d0.loss_cls: 1.0066, d0.loss_bbox: 1.6979, d1.loss_cls: 1.0007, d1.loss_bbox: 1.6625, d2.loss_cls: 0.9686, d2.loss_bbox: 1.5707, d3.loss_cls: 0.9435, d3.loss_bbox: 1.5074, d4.loss_cls: 0.9387, d4.loss_bbox: 1.4915, aux_task0.loss_heatmap: 1.2525, aux_task0.loss_bbox: 0.3916, aux_task1.loss_heatmap: 1.4218, aux_task1.loss_bbox: 0.4076, aux_task2.loss_heatmap: 1.6943, aux_task2.loss_bbox: 0.4285, aux_task3.loss_heatmap: 1.3338, aux_task3.loss_bbox: 0.3537, aux_task4.loss_heatmap: 0.9533, aux_task4.loss_bbox: 0.3726, aux_task5.loss_heatmap: 1.1974, aux_task5.loss_bbox: 0.3855, loss: 25.4131, grad_norm: 37.6059
2025-05-06 01:36:44,991 - mmdet - INFO - Epoch [2][500/773]	lr: 2.384e-05, eta: 5:37:39, time: 1.429, data_time: 0.004, memory: 8463, loss_cls: 0.9386, loss_bbox: 1.4673, d0.loss_cls: 0.9868, d0.loss_bbox: 1.6815, d1.loss_cls: 0.9850, d1.loss_bbox: 1.6246, d2.loss_cls: 0.9501, d2.loss_bbox: 1.5476, d3.loss_cls: 0.9371, d3.loss_bbox: 1.4891, d4.loss_cls: 0.9362, d4.loss_bbox: 1.4691, aux_task0.loss_heatmap: 1.2520, aux_task0.loss_bbox: 0.3811, aux_task1.loss_heatmap: 1.4275, aux_task1.loss_bbox: 0.4132, aux_task2.loss_heatmap: 1.6871, aux_task2.loss_bbox: 0.4387, aux_task3.loss_heatmap: 1.2918, aux_task3.loss_bbox: 0.3581, aux_task4.loss_heatmap: 0.9224, aux_task4.loss_bbox: 0.3723, aux_task5.loss_heatmap: 1.1717, aux_task5.loss_bbox: 0.3838, loss: 25.1126, grad_norm: 38.7915
2025-05-06 01:37:55,603 - mmdet - INFO - Epoch [2][550/773]	lr: 2.472e-05, eta: 5:36:19, time: 1.411, data_time: 0.004, memory: 8463, loss_cls: 0.9325, loss_bbox: 1.4466, d0.loss_cls: 0.9713, d0.loss_bbox: 1.6817, d1.loss_cls: 0.9643, d1.loss_bbox: 1.6044, d2.loss_cls: 0.9385, d2.loss_bbox: 1.5300, d3.loss_cls: 0.9329, d3.loss_bbox: 1.4696, d4.loss_cls: 0.9305, d4.loss_bbox: 1.4478, aux_task0.loss_heatmap: 1.2450, aux_task0.loss_bbox: 0.3880, aux_task1.loss_heatmap: 1.3920, aux_task1.loss_bbox: 0.4036, aux_task2.loss_heatmap: 1.6593, aux_task2.loss_bbox: 0.4560, aux_task3.loss_heatmap: 1.2898, aux_task3.loss_bbox: 0.3383, aux_task4.loss_heatmap: 0.8890, aux_task4.loss_bbox: 0.3536, aux_task5.loss_heatmap: 1.1376, aux_task5.loss_bbox: 0.3782, loss: 24.7806, grad_norm: 39.3015
2025-05-06 01:39:08,251 - mmdet - INFO - Epoch [2][600/773]	lr: 2.562e-05, eta: 5:35:21, time: 1.453, data_time: 0.005, memory: 8463, loss_cls: 0.9232, loss_bbox: 1.4210, d0.loss_cls: 0.9589, d0.loss_bbox: 1.6784, d1.loss_cls: 0.9486, d1.loss_bbox: 1.5803, d2.loss_cls: 0.9295, d2.loss_bbox: 1.5062, d3.loss_cls: 0.9249, d3.loss_bbox: 1.4435, d4.loss_cls: 0.9216, d4.loss_bbox: 1.4237, aux_task0.loss_heatmap: 1.2348, aux_task0.loss_bbox: 0.3890, aux_task1.loss_heatmap: 1.3900, aux_task1.loss_bbox: 0.4103, aux_task2.loss_heatmap: 1.6780, aux_task2.loss_bbox: 0.4388, aux_task3.loss_heatmap: 1.2717, aux_task3.loss_bbox: 0.3580, aux_task4.loss_heatmap: 0.8672, aux_task4.loss_bbox: 0.3597, aux_task5.loss_heatmap: 1.1363, aux_task5.loss_bbox: 0.3849, loss: 24.5785, grad_norm: 42.4331
2025-05-06 01:40:20,815 - mmdet - INFO - Epoch [2][650/773]	lr: 2.655e-05, eta: 5:34:21, time: 1.451, data_time: 0.005, memory: 8463, loss_cls: 0.9213, loss_bbox: 1.3935, d0.loss_cls: 0.9386, d0.loss_bbox: 1.6324, d1.loss_cls: 0.9388, d1.loss_bbox: 1.5444, d2.loss_cls: 0.9246, d2.loss_bbox: 1.4760, d3.loss_cls: 0.9216, d3.loss_bbox: 1.4149, d4.loss_cls: 0.9177, d4.loss_bbox: 1.3960, aux_task0.loss_heatmap: 1.1857, aux_task0.loss_bbox: 0.3732, aux_task1.loss_heatmap: 1.3638, aux_task1.loss_bbox: 0.3998, aux_task2.loss_heatmap: 1.6351, aux_task2.loss_bbox: 0.4339, aux_task3.loss_heatmap: 1.2304, aux_task3.loss_bbox: 0.3383, aux_task4.loss_heatmap: 0.8811, aux_task4.loss_bbox: 0.3549, aux_task5.loss_heatmap: 1.1186, aux_task5.loss_bbox: 0.3765, loss: 24.1111, grad_norm: 40.4122
2025-05-06 01:41:34,274 - mmdet - INFO - Epoch [2][700/773]	lr: 2.751e-05, eta: 5:33:28, time: 1.469, data_time: 0.005, memory: 8463, loss_cls: 0.9091, loss_bbox: 1.3499, d0.loss_cls: 0.9288, d0.loss_bbox: 1.6158, d1.loss_cls: 0.9278, d1.loss_bbox: 1.4995, d2.loss_cls: 0.9107, d2.loss_bbox: 1.4347, d3.loss_cls: 0.9078, d3.loss_bbox: 1.3714, d4.loss_cls: 0.9033, d4.loss_bbox: 1.3512, aux_task0.loss_heatmap: 1.1727, aux_task0.loss_bbox: 0.3707, aux_task1.loss_heatmap: 1.3210, aux_task1.loss_bbox: 0.3976, aux_task2.loss_heatmap: 1.6649, aux_task2.loss_bbox: 0.4296, aux_task3.loss_heatmap: 1.2292, aux_task3.loss_bbox: 0.3489, aux_task4.loss_heatmap: 0.8788, aux_task4.loss_bbox: 0.3496, aux_task5.loss_heatmap: 1.1345, aux_task5.loss_bbox: 0.3771, loss: 23.7846, grad_norm: 42.7224
2025-05-06 01:42:47,861 - mmdet - INFO - Epoch [2][750/773]	lr: 2.849e-05, eta: 5:32:35, time: 1.472, data_time: 0.005, memory: 8463, loss_cls: 0.9038, loss_bbox: 1.3556, d0.loss_cls: 0.9157, d0.loss_bbox: 1.6258, d1.loss_cls: 0.9144, d1.loss_bbox: 1.5116, d2.loss_cls: 0.9039, d2.loss_bbox: 1.4484, d3.loss_cls: 0.9031, d3.loss_bbox: 1.3800, d4.loss_cls: 0.8994, d4.loss_bbox: 1.3578, aux_task0.loss_heatmap: 1.1962, aux_task0.loss_bbox: 0.3991, aux_task1.loss_heatmap: 1.3307, aux_task1.loss_bbox: 0.4061, aux_task2.loss_heatmap: 1.6199, aux_task2.loss_bbox: 0.4356, aux_task3.loss_heatmap: 1.2443, aux_task3.loss_bbox: 0.3326, aux_task4.loss_heatmap: 0.8557, aux_task4.loss_bbox: 0.3626, aux_task5.loss_heatmap: 1.0871, aux_task5.loss_bbox: 0.3784, loss: 23.7677, grad_norm: 42.7328
2025-05-06 01:43:22,155 - mmdet - INFO - Saving checkpoint at 2 epochs
2025-05-06 01:44:41,694 - mmdet - INFO - Epoch [3][50/773]	lr: 2.998e-05, eta: 5:27:00, time: 1.559, data_time: 0.182, memory: 8463, loss_cls: 0.8951, loss_bbox: 1.3135, d0.loss_cls: 0.9018, d0.loss_bbox: 1.5893, d1.loss_cls: 0.9000, d1.loss_bbox: 1.4630, d2.loss_cls: 0.8893, d2.loss_bbox: 1.4045, d3.loss_cls: 0.8878, d3.loss_bbox: 1.3386, d4.loss_cls: 0.8899, d4.loss_bbox: 1.3149, aux_task0.loss_heatmap: 1.1462, aux_task0.loss_bbox: 0.3745, aux_task1.loss_heatmap: 1.3229, aux_task1.loss_bbox: 0.3965, aux_task2.loss_heatmap: 1.6463, aux_task2.loss_bbox: 0.4446, aux_task3.loss_heatmap: 1.2637, aux_task3.loss_bbox: 0.3336, aux_task4.loss_heatmap: 0.8597, aux_task4.loss_bbox: 0.3587, aux_task5.loss_heatmap: 1.0215, aux_task5.loss_bbox: 0.3668, loss: 23.3226, grad_norm: 42.1762
2025-05-06 01:45:54,565 - mmdet - INFO - Epoch [3][100/773]	lr: 3.103e-05, eta: 5:26:06, time: 1.456, data_time: 0.004, memory: 8463, loss_cls: 0.8824, loss_bbox: 1.2989, d0.loss_cls: 0.8913, d0.loss_bbox: 1.5858, d1.loss_cls: 0.8912, d1.loss_bbox: 1.4413, d2.loss_cls: 0.8771, d2.loss_bbox: 1.3808, d3.loss_cls: 0.8740, d3.loss_bbox: 1.3182, d4.loss_cls: 0.8758, d4.loss_bbox: 1.3025, aux_task0.loss_heatmap: 1.1021, aux_task0.loss_bbox: 0.3764, aux_task1.loss_heatmap: 1.3467, aux_task1.loss_bbox: 0.4043, aux_task2.loss_heatmap: 1.6178, aux_task2.loss_bbox: 0.4363, aux_task3.loss_heatmap: 1.1886, aux_task3.loss_bbox: 0.3435, aux_task4.loss_heatmap: 0.8267, aux_task4.loss_bbox: 0.3620, aux_task5.loss_heatmap: 1.0083, aux_task5.loss_bbox: 0.3680, loss: 23.0000, grad_norm: 41.1423
2025-05-06 01:47:05,866 - mmdet - INFO - Epoch [3][150/773]	lr: 3.210e-05, eta: 5:25:00, time: 1.427, data_time: 0.006, memory: 8463, loss_cls: 0.8928, loss_bbox: 1.3110, d0.loss_cls: 0.8927, d0.loss_bbox: 1.5811, d1.loss_cls: 0.9057, d1.loss_bbox: 1.4446, d2.loss_cls: 0.8901, d2.loss_bbox: 1.3844, d3.loss_cls: 0.8866, d3.loss_bbox: 1.3285, d4.loss_cls: 0.8855, d4.loss_bbox: 1.3117, aux_task0.loss_heatmap: 1.1157, aux_task0.loss_bbox: 0.3666, aux_task1.loss_heatmap: 1.3083, aux_task1.loss_bbox: 0.4000, aux_task2.loss_heatmap: 1.5709, aux_task2.loss_bbox: 0.4518, aux_task3.loss_heatmap: 1.2044, aux_task3.loss_bbox: 0.3433, aux_task4.loss_heatmap: 0.8338, aux_task4.loss_bbox: 0.3562, aux_task5.loss_heatmap: 1.0084, aux_task5.loss_bbox: 0.3671, loss: 23.0412, grad_norm: 44.6387
2025-05-06 01:48:19,278 - mmdet - INFO - Epoch [3][200/773]	lr: 3.319e-05, eta: 5:24:09, time: 1.468, data_time: 0.005, memory: 8463, loss_cls: 0.8786, loss_bbox: 1.2498, d0.loss_cls: 0.8751, d0.loss_bbox: 1.5343, d1.loss_cls: 0.8808, d1.loss_bbox: 1.3797, d2.loss_cls: 0.8742, d2.loss_bbox: 1.3225, d3.loss_cls: 0.8713, d3.loss_bbox: 1.2703, d4.loss_cls: 0.8715, d4.loss_bbox: 1.2538, aux_task0.loss_heatmap: 1.0822, aux_task0.loss_bbox: 0.3606, aux_task1.loss_heatmap: 1.2955, aux_task1.loss_bbox: 0.3891, aux_task2.loss_heatmap: 1.5855, aux_task2.loss_bbox: 0.4268, aux_task3.loss_heatmap: 1.1767, aux_task3.loss_bbox: 0.3305, aux_task4.loss_heatmap: 0.8135, aux_task4.loss_bbox: 0.3582, aux_task5.loss_heatmap: 0.9969, aux_task5.loss_bbox: 0.3619, loss: 22.4394, grad_norm: 42.4404
2025-05-06 01:49:31,251 - mmdet - INFO - Epoch [3][250/773]	lr: 3.431e-05, eta: 5:23:06, time: 1.439, data_time: 0.005, memory: 8463, loss_cls: 0.8666, loss_bbox: 1.2441, d0.loss_cls: 0.8678, d0.loss_bbox: 1.5143, d1.loss_cls: 0.8708, d1.loss_bbox: 1.3639, d2.loss_cls: 0.8634, d2.loss_bbox: 1.3064, d3.loss_cls: 0.8630, d3.loss_bbox: 1.2582, d4.loss_cls: 0.8621, d4.loss_bbox: 1.2463, aux_task0.loss_heatmap: 1.0924, aux_task0.loss_bbox: 0.3751, aux_task1.loss_heatmap: 1.2558, aux_task1.loss_bbox: 0.3937, aux_task2.loss_heatmap: 1.5629, aux_task2.loss_bbox: 0.4245, aux_task3.loss_heatmap: 1.1095, aux_task3.loss_bbox: 0.3330, aux_task4.loss_heatmap: 0.8335, aux_task4.loss_bbox: 0.3542, aux_task5.loss_heatmap: 0.9151, aux_task5.loss_bbox: 0.3583, loss: 22.1351, grad_norm: 48.3070
2025-05-06 01:50:43,464 - mmdet - INFO - Epoch [3][300/773]	lr: 3.545e-05, eta: 5:22:04, time: 1.443, data_time: 0.005, memory: 8463, loss_cls: 0.8479, loss_bbox: 1.2376, d0.loss_cls: 0.8535, d0.loss_bbox: 1.5088, d1.loss_cls: 0.8524, d1.loss_bbox: 1.3527, d2.loss_cls: 0.8443, d2.loss_bbox: 1.3009, d3.loss_cls: 0.8426, d3.loss_bbox: 1.2538, d4.loss_cls: 0.8440, d4.loss_bbox: 1.2404, aux_task0.loss_heatmap: 1.0610, aux_task0.loss_bbox: 0.3560, aux_task1.loss_heatmap: 1.3004, aux_task1.loss_bbox: 0.3826, aux_task2.loss_heatmap: 1.5355, aux_task2.loss_bbox: 0.4243, aux_task3.loss_heatmap: 1.2098, aux_task3.loss_bbox: 0.3302, aux_task4.loss_heatmap: 0.7879, aux_task4.loss_bbox: 0.3531, aux_task5.loss_heatmap: 0.9416, aux_task5.loss_bbox: 0.3551, loss: 22.0164, grad_norm: 45.4780
2025-05-06 01:51:56,745 - mmdet - INFO - Epoch [3][350/773]	lr: 3.661e-05, eta: 5:21:10, time: 1.466, data_time: 0.007, memory: 8463, loss_cls: 0.8511, loss_bbox: 1.2542, d0.loss_cls: 0.8550, d0.loss_bbox: 1.5032, d1.loss_cls: 0.8542, d1.loss_bbox: 1.3568, d2.loss_cls: 0.8441, d2.loss_bbox: 1.3042, d3.loss_cls: 0.8448, d3.loss_bbox: 1.2682, d4.loss_cls: 0.8463, d4.loss_bbox: 1.2572, aux_task0.loss_heatmap: 1.1095, aux_task0.loss_bbox: 0.3681, aux_task1.loss_heatmap: 1.2862, aux_task1.loss_bbox: 0.3973, aux_task2.loss_heatmap: 1.5793, aux_task2.loss_bbox: 0.4369, aux_task3.loss_heatmap: 1.1574, aux_task3.loss_bbox: 0.3363, aux_task4.loss_heatmap: 0.7987, aux_task4.loss_bbox: 0.3545, aux_task5.loss_heatmap: 0.9182, aux_task5.loss_bbox: 0.3573, loss: 22.1390, grad_norm: 44.8971
2025-05-06 01:53:09,751 - mmdet - INFO - Epoch [3][400/773]	lr: 3.780e-05, eta: 5:20:13, time: 1.460, data_time: 0.006, memory: 8463, loss_cls: 0.8382, loss_bbox: 1.2328, d0.loss_cls: 0.8405, d0.loss_bbox: 1.4812, d1.loss_cls: 0.8411, d1.loss_bbox: 1.3321, d2.loss_cls: 0.8330, d2.loss_bbox: 1.2847, d3.loss_cls: 0.8345, d3.loss_bbox: 1.2443, d4.loss_cls: 0.8338, d4.loss_bbox: 1.2342, aux_task0.loss_heatmap: 1.0642, aux_task0.loss_bbox: 0.3664, aux_task1.loss_heatmap: 1.3085, aux_task1.loss_bbox: 0.3860, aux_task2.loss_heatmap: 1.5449, aux_task2.loss_bbox: 0.4329, aux_task3.loss_heatmap: 1.1334, aux_task3.loss_bbox: 0.3494, aux_task4.loss_heatmap: 0.7704, aux_task4.loss_bbox: 0.3614, aux_task5.loss_heatmap: 0.9108, aux_task5.loss_bbox: 0.3570, loss: 21.8157, grad_norm: 48.6980
2025-05-06 01:54:18,904 - mmdet - INFO - Epoch [3][450/773]	lr: 3.900e-05, eta: 5:18:49, time: 1.384, data_time: 0.006, memory: 8463, loss_cls: 0.8456, loss_bbox: 1.2005, d0.loss_cls: 0.8489, d0.loss_bbox: 1.4521, d1.loss_cls: 0.8444, d1.loss_bbox: 1.3100, d2.loss_cls: 0.8345, d2.loss_bbox: 1.2552, d3.loss_cls: 0.8367, d3.loss_bbox: 1.2175, d4.loss_cls: 0.8394, d4.loss_bbox: 1.2044, aux_task0.loss_heatmap: 1.0646, aux_task0.loss_bbox: 0.3708, aux_task1.loss_heatmap: 1.2027, aux_task1.loss_bbox: 0.3888, aux_task2.loss_heatmap: 1.5504, aux_task2.loss_bbox: 0.4068, aux_task3.loss_heatmap: 1.1315, aux_task3.loss_bbox: 0.3406, aux_task4.loss_heatmap: 0.7818, aux_task4.loss_bbox: 0.3511, aux_task5.loss_heatmap: 0.8706, aux_task5.loss_bbox: 0.3600, loss: 21.5088, grad_norm: 48.7639
2025-05-06 01:55:27,856 - mmdet - INFO - Epoch [3][500/773]	lr: 4.022e-05, eta: 5:17:24, time: 1.379, data_time: 0.006, memory: 8463, loss_cls: 0.8374, loss_bbox: 1.2081, d0.loss_cls: 0.8392, d0.loss_bbox: 1.4522, d1.loss_cls: 0.8365, d1.loss_bbox: 1.3081, d2.loss_cls: 0.8326, d2.loss_bbox: 1.2556, d3.loss_cls: 0.8333, d3.loss_bbox: 1.2212, d4.loss_cls: 0.8326, d4.loss_bbox: 1.2096, aux_task0.loss_heatmap: 1.0557, aux_task0.loss_bbox: 0.3717, aux_task1.loss_heatmap: 1.2349, aux_task1.loss_bbox: 0.3981, aux_task2.loss_heatmap: 1.5185, aux_task2.loss_bbox: 0.4303, aux_task3.loss_heatmap: 1.0989, aux_task3.loss_bbox: 0.3355, aux_task4.loss_heatmap: 0.7939, aux_task4.loss_bbox: 0.3580, aux_task5.loss_heatmap: 0.8459, aux_task5.loss_bbox: 0.3505, loss: 21.4584, grad_norm: 49.5199
2025-05-06 01:56:40,515 - mmdet - INFO - Epoch [3][550/773]	lr: 4.146e-05, eta: 5:16:24, time: 1.454, data_time: 0.006, memory: 8463, loss_cls: 0.8200, loss_bbox: 1.1909, d0.loss_cls: 0.8196, d0.loss_bbox: 1.4144, d1.loss_cls: 0.8105, d1.loss_bbox: 1.2806, d2.loss_cls: 0.8067, d2.loss_bbox: 1.2301, d3.loss_cls: 0.8088, d3.loss_bbox: 1.1981, d4.loss_cls: 0.8125, d4.loss_bbox: 1.1921, aux_task0.loss_heatmap: 1.0861, aux_task0.loss_bbox: 0.3626, aux_task1.loss_heatmap: 1.2239, aux_task1.loss_bbox: 0.3811, aux_task2.loss_heatmap: 1.4892, aux_task2.loss_bbox: 0.4426, aux_task3.loss_heatmap: 1.0753, aux_task3.loss_bbox: 0.3418, aux_task4.loss_heatmap: 0.7630, aux_task4.loss_bbox: 0.3394, aux_task5.loss_heatmap: 0.8223, aux_task5.loss_bbox: 0.3586, loss: 21.0700, grad_norm: 49.9637
2025-05-06 01:57:53,421 - mmdet - INFO - Epoch [3][600/773]	lr: 4.272e-05, eta: 5:15:24, time: 1.457, data_time: 0.005, memory: 8463, loss_cls: 0.8067, loss_bbox: 1.1815, d0.loss_cls: 0.8239, d0.loss_bbox: 1.4117, d1.loss_cls: 0.8101, d1.loss_bbox: 1.2792, d2.loss_cls: 0.8023, d2.loss_bbox: 1.2278, d3.loss_cls: 0.7995, d3.loss_bbox: 1.1946, d4.loss_cls: 0.8036, d4.loss_bbox: 1.1830, aux_task0.loss_heatmap: 1.0082, aux_task0.loss_bbox: 0.3509, aux_task1.loss_heatmap: 1.2123, aux_task1.loss_bbox: 0.3930, aux_task2.loss_heatmap: 1.4990, aux_task2.loss_bbox: 0.4310, aux_task3.loss_heatmap: 1.1254, aux_task3.loss_bbox: 0.3440, aux_task4.loss_heatmap: 0.7274, aux_task4.loss_bbox: 0.3504, aux_task5.loss_heatmap: 0.8321, aux_task5.loss_bbox: 0.3591, loss: 20.9567, grad_norm: 51.0589
2025-05-06 01:59:04,654 - mmdet - INFO - Epoch [3][650/773]	lr: 4.400e-05, eta: 5:14:14, time: 1.426, data_time: 0.006, memory: 8463, loss_cls: 0.8201, loss_bbox: 1.1638, d0.loss_cls: 0.8199, d0.loss_bbox: 1.3784, d1.loss_cls: 0.8138, d1.loss_bbox: 1.2502, d2.loss_cls: 0.8155, d2.loss_bbox: 1.1980, d3.loss_cls: 0.8154, d3.loss_bbox: 1.1693, d4.loss_cls: 0.8168, d4.loss_bbox: 1.1611, aux_task0.loss_heatmap: 0.9930, aux_task0.loss_bbox: 0.3538, aux_task1.loss_heatmap: 1.1870, aux_task1.loss_bbox: 0.3825, aux_task2.loss_heatmap: 1.4807, aux_task2.loss_bbox: 0.4178, aux_task3.loss_heatmap: 1.0096, aux_task3.loss_bbox: 0.3300, aux_task4.loss_heatmap: 0.7421, aux_task4.loss_bbox: 0.3371, aux_task5.loss_heatmap: 0.8225, aux_task5.loss_bbox: 0.3561, loss: 20.6344, grad_norm: 52.4860
2025-05-06 02:00:13,657 - mmdet - INFO - Epoch [3][700/773]	lr: 4.529e-05, eta: 5:12:51, time: 1.380, data_time: 0.005, memory: 8463, loss_cls: 0.8024, loss_bbox: 1.1489, d0.loss_cls: 0.8153, d0.loss_bbox: 1.3628, d1.loss_cls: 0.8034, d1.loss_bbox: 1.2358, d2.loss_cls: 0.7970, d2.loss_bbox: 1.1886, d3.loss_cls: 0.7971, d3.loss_bbox: 1.1593, d4.loss_cls: 0.7994, d4.loss_bbox: 1.1488, aux_task0.loss_heatmap: 1.0513, aux_task0.loss_bbox: 0.3506, aux_task1.loss_heatmap: 1.1433, aux_task1.loss_bbox: 0.3729, aux_task2.loss_heatmap: 1.4521, aux_task2.loss_bbox: 0.4018, aux_task3.loss_heatmap: 1.0594, aux_task3.loss_bbox: 0.3358, aux_task4.loss_heatmap: 0.7420, aux_task4.loss_bbox: 0.3377, aux_task5.loss_heatmap: 0.8107, aux_task5.loss_bbox: 0.3481, loss: 20.4647, grad_norm: 50.8707
2025-05-06 02:01:23,075 - mmdet - INFO - Epoch [3][750/773]	lr: 4.659e-05, eta: 5:11:31, time: 1.388, data_time: 0.005, memory: 8463, loss_cls: 0.8024, loss_bbox: 1.1797, d0.loss_cls: 0.8111, d0.loss_bbox: 1.3780, d1.loss_cls: 0.8018, d1.loss_bbox: 1.2547, d2.loss_cls: 0.7975, d2.loss_bbox: 1.2085, d3.loss_cls: 0.7973, d3.loss_bbox: 1.1819, d4.loss_cls: 0.7994, d4.loss_bbox: 1.1777, aux_task0.loss_heatmap: 0.9925, aux_task0.loss_bbox: 0.3704, aux_task1.loss_heatmap: 1.1797, aux_task1.loss_bbox: 0.3916, aux_task2.loss_heatmap: 1.4657, aux_task2.loss_bbox: 0.4208, aux_task3.loss_heatmap: 1.0210, aux_task3.loss_bbox: 0.3335, aux_task4.loss_heatmap: 0.7379, aux_task4.loss_bbox: 0.3565, aux_task5.loss_heatmap: 0.8156, aux_task5.loss_bbox: 0.3557, loss: 20.6310, grad_norm: 48.8762
2025-05-06 02:01:55,925 - mmdet - INFO - Saving checkpoint at 3 epochs
2025-05-06 02:03:18,763 - mmdet - INFO - Epoch [4][50/773]	lr: 4.852e-05, eta: 5:07:42, time: 1.622, data_time: 0.154, memory: 8463, loss_cls: 0.8051, loss_bbox: 1.1539, d0.loss_cls: 0.8157, d0.loss_bbox: 1.3452, d1.loss_cls: 0.8035, d1.loss_bbox: 1.2273, d2.loss_cls: 0.8022, d2.loss_bbox: 1.1808, d3.loss_cls: 0.8015, d3.loss_bbox: 1.1585, d4.loss_cls: 0.8033, d4.loss_bbox: 1.1545, aux_task0.loss_heatmap: 0.9762, aux_task0.loss_bbox: 0.3514, aux_task1.loss_heatmap: 1.1703, aux_task1.loss_bbox: 0.3814, aux_task2.loss_heatmap: 1.4933, aux_task2.loss_bbox: 0.4277, aux_task3.loss_heatmap: 0.9741, aux_task3.loss_bbox: 0.3187, aux_task4.loss_heatmap: 0.7665, aux_task4.loss_bbox: 0.3482, aux_task5.loss_heatmap: 0.7599, aux_task5.loss_bbox: 0.3456, loss: 20.3648, grad_norm: 50.7766
2025-05-06 02:04:31,846 - mmdet - INFO - Epoch [4][100/773]	lr: 4.986e-05, eta: 5:06:46, time: 1.462, data_time: 0.005, memory: 8463, loss_cls: 0.7943, loss_bbox: 1.1437, d0.loss_cls: 0.7993, d0.loss_bbox: 1.3364, d1.loss_cls: 0.7867, d1.loss_bbox: 1.2116, d2.loss_cls: 0.7832, d2.loss_bbox: 1.1684, d3.loss_cls: 0.7856, d3.loss_bbox: 1.1437, d4.loss_cls: 0.7901, d4.loss_bbox: 1.1395, aux_task0.loss_heatmap: 0.9828, aux_task0.loss_bbox: 0.3533, aux_task1.loss_heatmap: 1.2101, aux_task1.loss_bbox: 0.3928, aux_task2.loss_heatmap: 1.4827, aux_task2.loss_bbox: 0.4224, aux_task3.loss_heatmap: 1.0616, aux_task3.loss_bbox: 0.3373, aux_task4.loss_heatmap: 0.7484, aux_task4.loss_bbox: 0.3486, aux_task5.loss_heatmap: 0.7567, aux_task5.loss_bbox: 0.3437, loss: 20.3229, grad_norm: 51.8311
2025-05-06 02:05:45,183 - mmdet - INFO - Epoch [4][150/773]	lr: 5.122e-05, eta: 5:05:50, time: 1.467, data_time: 0.005, memory: 8464, loss_cls: 0.7934, loss_bbox: 1.1335, d0.loss_cls: 0.8042, d0.loss_bbox: 1.3331, d1.loss_cls: 0.7893, d1.loss_bbox: 1.2031, d2.loss_cls: 0.7851, d2.loss_bbox: 1.1626, d3.loss_cls: 0.7867, d3.loss_bbox: 1.1396, d4.loss_cls: 0.7890, d4.loss_bbox: 1.1351, aux_task0.loss_heatmap: 0.9964, aux_task0.loss_bbox: 0.3538, aux_task1.loss_heatmap: 1.1761, aux_task1.loss_bbox: 0.3848, aux_task2.loss_heatmap: 1.4033, aux_task2.loss_bbox: 0.4361, aux_task3.loss_heatmap: 1.0049, aux_task3.loss_bbox: 0.3297, aux_task4.loss_heatmap: 0.7450, aux_task4.loss_bbox: 0.3472, aux_task5.loss_heatmap: 0.7753, aux_task5.loss_bbox: 0.3402, loss: 20.1474, grad_norm: 47.4121
2025-05-06 02:06:56,476 - mmdet - INFO - Epoch [4][200/773]	lr: 5.258e-05, eta: 5:04:43, time: 1.427, data_time: 0.005, memory: 8464, loss_cls: 0.7848, loss_bbox: 1.1151, d0.loss_cls: 0.7952, d0.loss_bbox: 1.3175, d1.loss_cls: 0.7778, d1.loss_bbox: 1.1929, d2.loss_cls: 0.7759, d2.loss_bbox: 1.1499, d3.loss_cls: 0.7790, d3.loss_bbox: 1.1288, d4.loss_cls: 0.7808, d4.loss_bbox: 1.1210, aux_task0.loss_heatmap: 0.9243, aux_task0.loss_bbox: 0.3435, aux_task1.loss_heatmap: 1.1791, aux_task1.loss_bbox: 0.3757, aux_task2.loss_heatmap: 1.4009, aux_task2.loss_bbox: 0.4125, aux_task3.loss_heatmap: 0.9932, aux_task3.loss_bbox: 0.3241, aux_task4.loss_heatmap: 0.7350, aux_task4.loss_bbox: 0.3497, aux_task5.loss_heatmap: 0.7782, aux_task5.loss_bbox: 0.3464, loss: 19.8813, grad_norm: 47.8364
2025-05-06 02:08:08,352 - mmdet - INFO - Epoch [4][250/773]	lr: 5.395e-05, eta: 5:03:38, time: 1.438, data_time: 0.004, memory: 8464, loss_cls: 0.7679, loss_bbox: 1.0997, d0.loss_cls: 0.7739, d0.loss_bbox: 1.3028, d1.loss_cls: 0.7607, d1.loss_bbox: 1.1733, d2.loss_cls: 0.7596, d2.loss_bbox: 1.1332, d3.loss_cls: 0.7594, d3.loss_bbox: 1.1115, d4.loss_cls: 0.7638, d4.loss_bbox: 1.1054, aux_task0.loss_heatmap: 0.9760, aux_task0.loss_bbox: 0.3678, aux_task1.loss_heatmap: 1.1604, aux_task1.loss_bbox: 0.3840, aux_task2.loss_heatmap: 1.3916, aux_task2.loss_bbox: 0.4086, aux_task3.loss_heatmap: 0.9403, aux_task3.loss_bbox: 0.3210, aux_task4.loss_heatmap: 0.7420, aux_task4.loss_bbox: 0.3467, aux_task5.loss_heatmap: 0.7573, aux_task5.loss_bbox: 0.3405, loss: 19.6473, grad_norm: 54.8864
2025-05-06 02:09:19,334 - mmdet - INFO - Epoch [4][300/773]	lr: 5.534e-05, eta: 5:02:29, time: 1.419, data_time: 0.004, memory: 8464, loss_cls: 0.7592, loss_bbox: 1.0795, d0.loss_cls: 0.7687, d0.loss_bbox: 1.2932, d1.loss_cls: 0.7525, d1.loss_bbox: 1.1588, d2.loss_cls: 0.7496, d2.loss_bbox: 1.1217, d3.loss_cls: 0.7517, d3.loss_bbox: 1.0953, d4.loss_cls: 0.7565, d4.loss_bbox: 1.0895, aux_task0.loss_heatmap: 0.9240, aux_task0.loss_bbox: 0.3574, aux_task1.loss_heatmap: 1.1720, aux_task1.loss_bbox: 0.3722, aux_task2.loss_heatmap: 1.3309, aux_task2.loss_bbox: 0.4068, aux_task3.loss_heatmap: 0.9740, aux_task3.loss_bbox: 0.3118, aux_task4.loss_heatmap: 0.6947, aux_task4.loss_bbox: 0.3459, aux_task5.loss_heatmap: 0.7538, aux_task5.loss_bbox: 0.3434, loss: 19.3632, grad_norm: 48.6894
2025-05-06 02:10:28,963 - mmdet - INFO - Epoch [4][350/773]	lr: 5.673e-05, eta: 5:01:14, time: 1.393, data_time: 0.004, memory: 8464, loss_cls: 0.7603, loss_bbox: 1.1073, d0.loss_cls: 0.7738, d0.loss_bbox: 1.3172, d1.loss_cls: 0.7570, d1.loss_bbox: 1.1826, d2.loss_cls: 0.7538, d2.loss_bbox: 1.1439, d3.loss_cls: 0.7561, d3.loss_bbox: 1.1211, d4.loss_cls: 0.7597, d4.loss_bbox: 1.1163, aux_task0.loss_heatmap: 0.9585, aux_task0.loss_bbox: 0.3582, aux_task1.loss_heatmap: 1.1627, aux_task1.loss_bbox: 0.3842, aux_task2.loss_heatmap: 1.3833, aux_task2.loss_bbox: 0.4116, aux_task3.loss_heatmap: 1.0163, aux_task3.loss_bbox: 0.3199, aux_task4.loss_heatmap: 0.6935, aux_task4.loss_bbox: 0.3491, aux_task5.loss_heatmap: 0.7505, aux_task5.loss_bbox: 0.3455, loss: 19.6824, grad_norm: 52.0884
2025-05-06 02:11:39,892 - mmdet - INFO - Epoch [4][400/773]	lr: 5.813e-05, eta: 5:00:04, time: 1.419, data_time: 0.004, memory: 8464, loss_cls: 0.7582, loss_bbox: 1.1138, d0.loss_cls: 0.7644, d0.loss_bbox: 1.3062, d1.loss_cls: 0.7506, d1.loss_bbox: 1.1770, d2.loss_cls: 0.7532, d2.loss_bbox: 1.1412, d3.loss_cls: 0.7524, d3.loss_bbox: 1.1203, d4.loss_cls: 0.7563, d4.loss_bbox: 1.1166, aux_task0.loss_heatmap: 0.9497, aux_task0.loss_bbox: 0.3520, aux_task1.loss_heatmap: 1.1733, aux_task1.loss_bbox: 0.3804, aux_task2.loss_heatmap: 1.3770, aux_task2.loss_bbox: 0.4164, aux_task3.loss_heatmap: 0.9514, aux_task3.loss_bbox: 0.3317, aux_task4.loss_heatmap: 0.7221, aux_task4.loss_bbox: 0.3534, aux_task5.loss_heatmap: 0.7261, aux_task5.loss_bbox: 0.3372, loss: 19.5810, grad_norm: 47.7840
2025-05-06 02:12:50,636 - mmdet - INFO - Epoch [4][450/773]	lr: 5.953e-05, eta: 4:58:54, time: 1.414, data_time: 0.004, memory: 8464, loss_cls: 0.7697, loss_bbox: 1.0942, d0.loss_cls: 0.7783, d0.loss_bbox: 1.2982, d1.loss_cls: 0.7620, d1.loss_bbox: 1.1661, d2.loss_cls: 0.7567, d2.loss_bbox: 1.1346, d3.loss_cls: 0.7613, d3.loss_bbox: 1.1077, d4.loss_cls: 0.7656, d4.loss_bbox: 1.1020, aux_task0.loss_heatmap: 0.9161, aux_task0.loss_bbox: 0.3590, aux_task1.loss_heatmap: 1.1087, aux_task1.loss_bbox: 0.3791, aux_task2.loss_heatmap: 1.3800, aux_task2.loss_bbox: 0.4028, aux_task3.loss_heatmap: 0.9425, aux_task3.loss_bbox: 0.3231, aux_task4.loss_heatmap: 0.7073, aux_task4.loss_bbox: 0.3445, aux_task5.loss_heatmap: 0.7138, aux_task5.loss_bbox: 0.3321, loss: 19.4055, grad_norm: 46.5100
2025-05-06 02:14:02,864 - mmdet - INFO - Epoch [4][500/773]	lr: 6.095e-05, eta: 4:57:50, time: 1.446, data_time: 0.005, memory: 8464, loss_cls: 0.7538, loss_bbox: 1.0842, d0.loss_cls: 0.7646, d0.loss_bbox: 1.2784, d1.loss_cls: 0.7475, d1.loss_bbox: 1.1478, d2.loss_cls: 0.7462, d2.loss_bbox: 1.1128, d3.loss_cls: 0.7476, d3.loss_bbox: 1.0884, d4.loss_cls: 0.7519, d4.loss_bbox: 1.0859, aux_task0.loss_heatmap: 0.9478, aux_task0.loss_bbox: 0.3556, aux_task1.loss_heatmap: 1.1294, aux_task1.loss_bbox: 0.3833, aux_task2.loss_heatmap: 1.3380, aux_task2.loss_bbox: 0.4171, aux_task3.loss_heatmap: 0.9529, aux_task3.loss_bbox: 0.3362, aux_task4.loss_heatmap: 0.6645, aux_task4.loss_bbox: 0.3484, aux_task5.loss_heatmap: 0.6929, aux_task5.loss_bbox: 0.3396, loss: 19.2147, grad_norm: 49.8573
2025-05-06 02:15:15,628 - mmdet - INFO - Epoch [4][550/773]	lr: 6.236e-05, eta: 4:56:49, time: 1.454, data_time: 0.004, memory: 8464, loss_cls: 0.7406, loss_bbox: 1.0613, d0.loss_cls: 0.7527, d0.loss_bbox: 1.2569, d1.loss_cls: 0.7347, d1.loss_bbox: 1.1259, d2.loss_cls: 0.7345, d2.loss_bbox: 1.0919, d3.loss_cls: 0.7350, d3.loss_bbox: 1.0684, d4.loss_cls: 0.7375, d4.loss_bbox: 1.0632, aux_task0.loss_heatmap: 0.9132, aux_task0.loss_bbox: 0.3508, aux_task1.loss_heatmap: 1.0955, aux_task1.loss_bbox: 0.3724, aux_task2.loss_heatmap: 1.3261, aux_task2.loss_bbox: 0.4105, aux_task3.loss_heatmap: 0.9185, aux_task3.loss_bbox: 0.3258, aux_task4.loss_heatmap: 0.6872, aux_task4.loss_bbox: 0.3322, aux_task5.loss_heatmap: 0.6952, aux_task5.loss_bbox: 0.3416, loss: 18.8715, grad_norm: 47.4956
2025-05-06 02:16:33,759 - mmdet - INFO - Epoch [4][600/773]	lr: 6.378e-05, eta: 4:56:10, time: 1.563, data_time: 0.005, memory: 8464, loss_cls: 0.7227, loss_bbox: 1.0839, d0.loss_cls: 0.7389, d0.loss_bbox: 1.2819, d1.loss_cls: 0.7187, d1.loss_bbox: 1.1529, d2.loss_cls: 0.7156, d2.loss_bbox: 1.1119, d3.loss_cls: 0.7154, d3.loss_bbox: 1.0894, d4.loss_cls: 0.7209, d4.loss_bbox: 1.0842, aux_task0.loss_heatmap: 0.9463, aux_task0.loss_bbox: 0.3583, aux_task1.loss_heatmap: 1.1274, aux_task1.loss_bbox: 0.3818, aux_task2.loss_heatmap: 1.3072, aux_task2.loss_bbox: 0.4128, aux_task3.loss_heatmap: 0.9219, aux_task3.loss_bbox: 0.3214, aux_task4.loss_heatmap: 0.6543, aux_task4.loss_bbox: 0.3404, aux_task5.loss_heatmap: 0.6808, aux_task5.loss_bbox: 0.3451, loss: 18.9342, grad_norm: 50.0212
2025-05-06 02:17:47,176 - mmdet - INFO - Epoch [4][650/773]	lr: 6.521e-05, eta: 4:55:10, time: 1.468, data_time: 0.005, memory: 8464, loss_cls: 0.7230, loss_bbox: 1.0591, d0.loss_cls: 0.7376, d0.loss_bbox: 1.2495, d1.loss_cls: 0.7191, d1.loss_bbox: 1.1194, d2.loss_cls: 0.7152, d2.loss_bbox: 1.0864, d3.loss_cls: 0.7159, d3.loss_bbox: 1.0697, d4.loss_cls: 0.7187, d4.loss_bbox: 1.0635, aux_task0.loss_heatmap: 0.9070, aux_task0.loss_bbox: 0.3476, aux_task1.loss_heatmap: 1.1020, aux_task1.loss_bbox: 0.3734, aux_task2.loss_heatmap: 1.2377, aux_task2.loss_bbox: 0.4108, aux_task3.loss_heatmap: 0.9318, aux_task3.loss_bbox: 0.3187, aux_task4.loss_heatmap: 0.6788, aux_task4.loss_bbox: 0.3346, aux_task5.loss_heatmap: 0.6902, aux_task5.loss_bbox: 0.3335, loss: 18.6433, grad_norm: 47.7419
2025-05-06 02:18:59,095 - mmdet - INFO - Epoch [4][700/773]	lr: 6.664e-05, eta: 4:54:03, time: 1.440, data_time: 0.005, memory: 8464, loss_cls: 0.7199, loss_bbox: 1.0481, d0.loss_cls: 0.7380, d0.loss_bbox: 1.2568, d1.loss_cls: 0.7165, d1.loss_bbox: 1.1175, d2.loss_cls: 0.7155, d2.loss_bbox: 1.0778, d3.loss_cls: 0.7124, d3.loss_bbox: 1.0574, d4.loss_cls: 0.7158, d4.loss_bbox: 1.0513, aux_task0.loss_heatmap: 0.8927, aux_task0.loss_bbox: 0.3505, aux_task1.loss_heatmap: 1.0791, aux_task1.loss_bbox: 0.3650, aux_task2.loss_heatmap: 1.2801, aux_task2.loss_bbox: 0.3960, aux_task3.loss_heatmap: 0.8997, aux_task3.loss_bbox: 0.3119, aux_task4.loss_heatmap: 0.6578, aux_task4.loss_bbox: 0.3302, aux_task5.loss_heatmap: 0.7133, aux_task5.loss_bbox: 0.3403, loss: 18.5436, grad_norm: 49.8734
2025-05-06 02:20:08,903 - mmdet - INFO - Epoch [4][750/773]	lr: 6.806e-05, eta: 4:52:48, time: 1.396, data_time: 0.004, memory: 8464, loss_cls: 0.7268, loss_bbox: 1.0619, d0.loss_cls: 0.7388, d0.loss_bbox: 1.2541, d1.loss_cls: 0.7209, d1.loss_bbox: 1.1217, d2.loss_cls: 0.7174, d2.loss_bbox: 1.0894, d3.loss_cls: 0.7205, d3.loss_bbox: 1.0698, d4.loss_cls: 0.7233, d4.loss_bbox: 1.0622, aux_task0.loss_heatmap: 0.9055, aux_task0.loss_bbox: 0.3443, aux_task1.loss_heatmap: 1.0865, aux_task1.loss_bbox: 0.3782, aux_task2.loss_heatmap: 1.2674, aux_task2.loss_bbox: 0.4021, aux_task3.loss_heatmap: 0.8436, aux_task3.loss_bbox: 0.3131, aux_task4.loss_heatmap: 0.6635, aux_task4.loss_bbox: 0.3431, aux_task5.loss_heatmap: 0.7134, aux_task5.loss_bbox: 0.3411, loss: 18.6086, grad_norm: 46.3294
2025-05-06 02:20:41,990 - mmdet - INFO - Saving checkpoint at 4 epochs
2025-05-06 02:22:04,773 - mmdet - INFO - Epoch [5][50/773]	lr: 7.015e-05, eta: 4:49:36, time: 1.620, data_time: 0.173, memory: 8464, loss_cls: 0.7213, loss_bbox: 1.0556, d0.loss_cls: 0.7341, d0.loss_bbox: 1.2475, d1.loss_cls: 0.7180, d1.loss_bbox: 1.1074, d2.loss_cls: 0.7135, d2.loss_bbox: 1.0799, d3.loss_cls: 0.7142, d3.loss_bbox: 1.0631, d4.loss_cls: 0.7200, d4.loss_bbox: 1.0550, aux_task0.loss_heatmap: 0.8918, aux_task0.loss_bbox: 0.3522, aux_task1.loss_heatmap: 1.0952, aux_task1.loss_bbox: 0.3798, aux_task2.loss_heatmap: 1.2897, aux_task2.loss_bbox: 0.4130, aux_task3.loss_heatmap: 0.8400, aux_task3.loss_bbox: 0.3080, aux_task4.loss_heatmap: 0.6937, aux_task4.loss_bbox: 0.3365, aux_task5.loss_heatmap: 0.6625, aux_task5.loss_bbox: 0.3316, loss: 18.5237, grad_norm: 48.8433
2025-05-06 02:23:14,121 - mmdet - INFO - Epoch [5][100/773]	lr: 7.158e-05, eta: 4:48:21, time: 1.388, data_time: 0.005, memory: 8464, loss_cls: 0.7230, loss_bbox: 1.0357, d0.loss_cls: 0.7365, d0.loss_bbox: 1.2364, d1.loss_cls: 0.7155, d1.loss_bbox: 1.0985, d2.loss_cls: 0.7127, d2.loss_bbox: 1.0645, d3.loss_cls: 0.7131, d3.loss_bbox: 1.0458, d4.loss_cls: 0.7185, d4.loss_bbox: 1.0394, aux_task0.loss_heatmap: 0.8623, aux_task0.loss_bbox: 0.3491, aux_task1.loss_heatmap: 1.1325, aux_task1.loss_bbox: 0.3807, aux_task2.loss_heatmap: 1.3010, aux_task2.loss_bbox: 0.3985, aux_task3.loss_heatmap: 0.9326, aux_task3.loss_bbox: 0.3199, aux_task4.loss_heatmap: 0.6828, aux_task4.loss_bbox: 0.3435, aux_task5.loss_heatmap: 0.6731, aux_task5.loss_bbox: 0.3301, loss: 18.5457, grad_norm: 46.8416
2025-05-06 02:24:25,464 - mmdet - INFO - Epoch [5][150/773]	lr: 7.300e-05, eta: 4:47:14, time: 1.426, data_time: 0.004, memory: 8464, loss_cls: 0.7133, loss_bbox: 1.0347, d0.loss_cls: 0.7300, d0.loss_bbox: 1.2291, d1.loss_cls: 0.7111, d1.loss_bbox: 1.0916, d2.loss_cls: 0.7091, d2.loss_bbox: 1.0601, d3.loss_cls: 0.7094, d3.loss_bbox: 1.0408, d4.loss_cls: 0.7111, d4.loss_bbox: 1.0342, aux_task0.loss_heatmap: 0.8749, aux_task0.loss_bbox: 0.3442, aux_task1.loss_heatmap: 1.0618, aux_task1.loss_bbox: 0.3682, aux_task2.loss_heatmap: 1.2008, aux_task2.loss_bbox: 0.4216, aux_task3.loss_heatmap: 0.9325, aux_task3.loss_bbox: 0.3253, aux_task4.loss_heatmap: 0.6718, aux_task4.loss_bbox: 0.3336, aux_task5.loss_heatmap: 0.7166, aux_task5.loss_bbox: 0.3432, loss: 18.3691, grad_norm: 48.3969
2025-05-06 02:25:38,959 - mmdet - INFO - Epoch [5][200/773]	lr: 7.443e-05, eta: 4:46:14, time: 1.470, data_time: 0.005, memory: 8464, loss_cls: 0.7021, loss_bbox: 1.0417, d0.loss_cls: 0.7204, d0.loss_bbox: 1.2389, d1.loss_cls: 0.6997, d1.loss_bbox: 1.0972, d2.loss_cls: 0.6959, d2.loss_bbox: 1.0662, d3.loss_cls: 0.6943, d3.loss_bbox: 1.0517, d4.loss_cls: 0.6984, d4.loss_bbox: 1.0438, aux_task0.loss_heatmap: 0.8653, aux_task0.loss_bbox: 0.3462, aux_task1.loss_heatmap: 1.0911, aux_task1.loss_bbox: 0.3694, aux_task2.loss_heatmap: 1.2045, aux_task2.loss_bbox: 0.3914, aux_task3.loss_heatmap: 0.8858, aux_task3.loss_bbox: 0.3205, aux_task4.loss_heatmap: 0.6706, aux_task4.loss_bbox: 0.3442, aux_task5.loss_heatmap: 0.6526, aux_task5.loss_bbox: 0.3292, loss: 18.2212, grad_norm: 48.1597
2025-05-06 02:26:52,568 - mmdet - INFO - Epoch [5][250/773]	lr: 7.585e-05, eta: 4:45:15, time: 1.472, data_time: 0.005, memory: 8464, loss_cls: 0.7067, loss_bbox: 1.0265, d0.loss_cls: 0.7185, d0.loss_bbox: 1.2130, d1.loss_cls: 0.7003, d1.loss_bbox: 1.0789, d2.loss_cls: 0.6995, d2.loss_bbox: 1.0483, d3.loss_cls: 0.6974, d3.loss_bbox: 1.0334, d4.loss_cls: 0.7020, d4.loss_bbox: 1.0263, aux_task0.loss_heatmap: 0.8736, aux_task0.loss_bbox: 0.3512, aux_task1.loss_heatmap: 1.0589, aux_task1.loss_bbox: 0.3731, aux_task2.loss_heatmap: 1.1971, aux_task2.loss_bbox: 0.3930, aux_task3.loss_heatmap: 0.8549, aux_task3.loss_bbox: 0.3126, aux_task4.loss_heatmap: 0.6788, aux_task4.loss_bbox: 0.3347, aux_task5.loss_heatmap: 0.7066, aux_task5.loss_bbox: 0.3315, loss: 18.1166, grad_norm: 46.0868
2025-05-06 02:28:05,264 - mmdet - INFO - Epoch [5][300/773]	lr: 7.726e-05, eta: 4:44:11, time: 1.454, data_time: 0.005, memory: 8464, loss_cls: 0.6955, loss_bbox: 1.0437, d0.loss_cls: 0.7133, d0.loss_bbox: 1.2206, d1.loss_cls: 0.6916, d1.loss_bbox: 1.0879, d2.loss_cls: 0.6897, d2.loss_bbox: 1.0623, d3.loss_cls: 0.6917, d3.loss_bbox: 1.0458, d4.loss_cls: 0.6936, d4.loss_bbox: 1.0421, aux_task0.loss_heatmap: 0.8379, aux_task0.loss_bbox: 0.3418, aux_task1.loss_heatmap: 1.1007, aux_task1.loss_bbox: 0.3669, aux_task2.loss_heatmap: 1.1561, aux_task2.loss_bbox: 0.4025, aux_task3.loss_heatmap: 0.8537, aux_task3.loss_bbox: 0.3136, aux_task4.loss_heatmap: 0.6101, aux_task4.loss_bbox: 0.3362, aux_task5.loss_heatmap: 0.6608, aux_task5.loss_bbox: 0.3341, loss: 17.9921, grad_norm: 48.8436
2025-05-06 02:29:18,112 - mmdet - INFO - Epoch [5][350/773]	lr: 7.867e-05, eta: 4:43:08, time: 1.457, data_time: 0.005, memory: 8464, loss_cls: 0.6810, loss_bbox: 1.0395, d0.loss_cls: 0.7015, d0.loss_bbox: 1.2291, d1.loss_cls: 0.6810, d1.loss_bbox: 1.0908, d2.loss_cls: 0.6785, d2.loss_bbox: 1.0603, d3.loss_cls: 0.6769, d3.loss_bbox: 1.0446, d4.loss_cls: 0.6774, d4.loss_bbox: 1.0387, aux_task0.loss_heatmap: 0.8395, aux_task0.loss_bbox: 0.3391, aux_task1.loss_heatmap: 1.0883, aux_task1.loss_bbox: 0.3758, aux_task2.loss_heatmap: 1.1815, aux_task2.loss_bbox: 0.4008, aux_task3.loss_heatmap: 0.8800, aux_task3.loss_bbox: 0.3184, aux_task4.loss_heatmap: 0.6374, aux_task4.loss_bbox: 0.3376, aux_task5.loss_heatmap: 0.6610, aux_task5.loss_bbox: 0.3236, loss: 17.9825, grad_norm: 49.6695
2025-05-06 02:30:30,922 - mmdet - INFO - Epoch [5][400/773]	lr: 8.007e-05, eta: 4:42:05, time: 1.456, data_time: 0.005, memory: 8464, loss_cls: 0.6861, loss_bbox: 1.0499, d0.loss_cls: 0.6946, d0.loss_bbox: 1.2379, d1.loss_cls: 0.6787, d1.loss_bbox: 1.0978, d2.loss_cls: 0.6792, d2.loss_bbox: 1.0696, d3.loss_cls: 0.6788, d3.loss_bbox: 1.0553, d4.loss_cls: 0.6811, d4.loss_bbox: 1.0513, aux_task0.loss_heatmap: 0.8512, aux_task0.loss_bbox: 0.3475, aux_task1.loss_heatmap: 1.0809, aux_task1.loss_bbox: 0.3778, aux_task2.loss_heatmap: 1.1939, aux_task2.loss_bbox: 0.3952, aux_task3.loss_heatmap: 0.9099, aux_task3.loss_bbox: 0.3315, aux_task4.loss_heatmap: 0.6375, aux_task4.loss_bbox: 0.3499, aux_task5.loss_heatmap: 0.6291, aux_task5.loss_bbox: 0.3250, loss: 18.0897, grad_norm: 48.1548
2025-05-06 02:31:40,733 - mmdet - INFO - Epoch [5][450/773]	lr: 8.147e-05, eta: 4:40:51, time: 1.398, data_time: 0.005, memory: 8464, loss_cls: 0.6748, loss_bbox: 1.0168, d0.loss_cls: 0.6893, d0.loss_bbox: 1.2065, d1.loss_cls: 0.6698, d1.loss_bbox: 1.0673, d2.loss_cls: 0.6671, d2.loss_bbox: 1.0382, d3.loss_cls: 0.6676, d3.loss_bbox: 1.0202, d4.loss_cls: 0.6700, d4.loss_bbox: 1.0166, aux_task0.loss_heatmap: 0.8384, aux_task0.loss_bbox: 0.3358, aux_task1.loss_heatmap: 1.0202, aux_task1.loss_bbox: 0.3667, aux_task2.loss_heatmap: 1.2258, aux_task2.loss_bbox: 0.3860, aux_task3.loss_heatmap: 0.8774, aux_task3.loss_bbox: 0.3223, aux_task4.loss_heatmap: 0.6367, aux_task4.loss_bbox: 0.3347, aux_task5.loss_heatmap: 0.6225, aux_task5.loss_bbox: 0.3265, loss: 17.6970, grad_norm: 45.9015
2025-05-06 02:32:49,691 - mmdet - INFO - Epoch [5][500/773]	lr: 8.286e-05, eta: 4:39:35, time: 1.378, data_time: 0.004, memory: 8464, loss_cls: 0.6820, loss_bbox: 1.0044, d0.loss_cls: 0.6940, d0.loss_bbox: 1.1974, d1.loss_cls: 0.6756, d1.loss_bbox: 1.0594, d2.loss_cls: 0.6762, d2.loss_bbox: 1.0313, d3.loss_cls: 0.6741, d3.loss_bbox: 1.0129, d4.loss_cls: 0.6767, d4.loss_bbox: 1.0070, aux_task0.loss_heatmap: 0.8511, aux_task0.loss_bbox: 0.3362, aux_task1.loss_heatmap: 1.0357, aux_task1.loss_bbox: 0.3783, aux_task2.loss_heatmap: 1.2147, aux_task2.loss_bbox: 0.4022, aux_task3.loss_heatmap: 0.8291, aux_task3.loss_bbox: 0.3188, aux_task4.loss_heatmap: 0.6411, aux_task4.loss_bbox: 0.3349, aux_task5.loss_heatmap: 0.6315, aux_task5.loss_bbox: 0.3221, loss: 17.6866, grad_norm: 46.7862
2025-05-06 02:34:10,455 - mmdet - INFO - Epoch [5][550/773]	lr: 8.424e-05, eta: 4:38:57, time: 1.616, data_time: 0.005, memory: 8464, loss_cls: 0.6700, loss_bbox: 1.0064, d0.loss_cls: 0.6823, d0.loss_bbox: 1.1897, d1.loss_cls: 0.6657, d1.loss_bbox: 1.0511, d2.loss_cls: 0.6636, d2.loss_bbox: 1.0228, d3.loss_cls: 0.6647, d3.loss_bbox: 1.0053, d4.loss_cls: 0.6646, d4.loss_bbox: 1.0057, aux_task0.loss_heatmap: 0.8225, aux_task0.loss_bbox: 0.3330, aux_task1.loss_heatmap: 1.0444, aux_task1.loss_bbox: 0.3623, aux_task2.loss_heatmap: 1.1674, aux_task2.loss_bbox: 0.4013, aux_task3.loss_heatmap: 0.8351, aux_task3.loss_bbox: 0.3237, aux_task4.loss_heatmap: 0.6073, aux_task4.loss_bbox: 0.3248, aux_task5.loss_heatmap: 0.5923, aux_task5.loss_bbox: 0.3265, loss: 17.4325, grad_norm: 47.4271
2025-05-06 02:35:21,416 - mmdet - INFO - Epoch [5][600/773]	lr: 8.560e-05, eta: 4:37:47, time: 1.419, data_time: 0.004, memory: 8464, loss_cls: 0.6605, loss_bbox: 1.0148, d0.loss_cls: 0.6842, d0.loss_bbox: 1.1981, d1.loss_cls: 0.6643, d1.loss_bbox: 1.0601, d2.loss_cls: 0.6573, d2.loss_bbox: 1.0312, d3.loss_cls: 0.6561, d3.loss_bbox: 1.0183, d4.loss_cls: 0.6581, d4.loss_bbox: 1.0154, aux_task0.loss_heatmap: 0.8333, aux_task0.loss_bbox: 0.3363, aux_task1.loss_heatmap: 1.0604, aux_task1.loss_bbox: 0.3721, aux_task2.loss_heatmap: 1.1564, aux_task2.loss_bbox: 0.4048, aux_task3.loss_heatmap: 0.8458, aux_task3.loss_bbox: 0.3206, aux_task4.loss_heatmap: 0.5886, aux_task4.loss_bbox: 0.3332, aux_task5.loss_heatmap: 0.6372, aux_task5.loss_bbox: 0.3316, loss: 17.5385, grad_norm: 46.8844
2025-05-06 02:36:30,291 - mmdet - INFO - Epoch [5][650/773]	lr: 8.696e-05, eta: 4:36:30, time: 1.378, data_time: 0.004, memory: 8464, loss_cls: 0.6601, loss_bbox: 0.9836, d0.loss_cls: 0.6778, d0.loss_bbox: 1.1674, d1.loss_cls: 0.6593, d1.loss_bbox: 1.0331, d2.loss_cls: 0.6540, d2.loss_bbox: 1.0051, d3.loss_cls: 0.6531, d3.loss_bbox: 0.9906, d4.loss_cls: 0.6548, d4.loss_bbox: 0.9846, aux_task0.loss_heatmap: 0.8708, aux_task0.loss_bbox: 0.3327, aux_task1.loss_heatmap: 1.0229, aux_task1.loss_bbox: 0.3670, aux_task2.loss_heatmap: 1.1149, aux_task2.loss_bbox: 0.3911, aux_task3.loss_heatmap: 0.8585, aux_task3.loss_bbox: 0.3228, aux_task4.loss_heatmap: 0.6110, aux_task4.loss_bbox: 0.3225, aux_task5.loss_heatmap: 0.6383, aux_task5.loss_bbox: 0.3276, loss: 17.3037, grad_norm: 48.8171
2025-05-06 02:37:40,526 - mmdet - INFO - Epoch [5][700/773]	lr: 8.831e-05, eta: 4:35:17, time: 1.404, data_time: 0.004, memory: 8464, loss_cls: 0.6496, loss_bbox: 0.9884, d0.loss_cls: 0.6727, d0.loss_bbox: 1.1746, d1.loss_cls: 0.6500, d1.loss_bbox: 1.0411, d2.loss_cls: 0.6451, d2.loss_bbox: 1.0134, d3.loss_cls: 0.6438, d3.loss_bbox: 0.9967, d4.loss_cls: 0.6471, d4.loss_bbox: 0.9892, aux_task0.loss_heatmap: 0.8434, aux_task0.loss_bbox: 0.3274, aux_task1.loss_heatmap: 0.9944, aux_task1.loss_bbox: 0.3630, aux_task2.loss_heatmap: 1.1269, aux_task2.loss_bbox: 0.3872, aux_task3.loss_heatmap: 0.8106, aux_task3.loss_bbox: 0.3225, aux_task4.loss_heatmap: 0.6151, aux_task4.loss_bbox: 0.3219, aux_task5.loss_heatmap: 0.6394, aux_task5.loss_bbox: 0.3249, loss: 17.1886, grad_norm: 45.4676
2025-05-06 02:38:50,190 - mmdet - INFO - Epoch [5][750/773]	lr: 8.964e-05, eta: 4:34:03, time: 1.394, data_time: 0.005, memory: 8464, loss_cls: 0.6596, loss_bbox: 1.0062, d0.loss_cls: 0.6786, d0.loss_bbox: 1.1955, d1.loss_cls: 0.6617, d1.loss_bbox: 1.0557, d2.loss_cls: 0.6553, d2.loss_bbox: 1.0273, d3.loss_cls: 0.6560, d3.loss_bbox: 1.0120, d4.loss_cls: 0.6578, d4.loss_bbox: 1.0055, aux_task0.loss_heatmap: 0.9062, aux_task0.loss_bbox: 0.3554, aux_task1.loss_heatmap: 1.0241, aux_task1.loss_bbox: 0.3761, aux_task2.loss_heatmap: 1.0955, aux_task2.loss_bbox: 0.3970, aux_task3.loss_heatmap: 0.8333, aux_task3.loss_bbox: 0.3099, aux_task4.loss_heatmap: 0.5989, aux_task4.loss_bbox: 0.3347, aux_task5.loss_heatmap: 0.6699, aux_task5.loss_bbox: 0.3279, loss: 17.5001, grad_norm: 46.4799
2025-05-06 02:39:22,711 - mmdet - INFO - Saving checkpoint at 5 epochs
2025-05-06 03:11:51,860 - mmdet - INFO - Exp name: lidar_0075v_900q_hednet_hednet_split40_256.py
2025-05-06 03:11:54,020 - mmdet - INFO - Epoch(val) [5][1505]	pts_bbox_NuScenes/car_AP_dist_0.5: 0.1576, pts_bbox_NuScenes/car_AP_dist_1.0: 0.2861, pts_bbox_NuScenes/car_AP_dist_2.0: 0.3656, pts_bbox_NuScenes/car_AP_dist_4.0: 0.4367, pts_bbox_NuScenes/car_trans_err: 0.4687, pts_bbox_NuScenes/car_scale_err: 0.1880, pts_bbox_NuScenes/car_orient_err: 1.3597, pts_bbox_NuScenes/car_vel_err: 1.2727, pts_bbox_NuScenes/car_attr_err: 0.4245, pts_bbox_NuScenes/mATE: 0.7005, pts_bbox_NuScenes/mASE: 0.3567, pts_bbox_NuScenes/mAOE: 1.5057, pts_bbox_NuScenes/mAVE: 1.1057, pts_bbox_NuScenes/mAAE: 0.4563, pts_bbox_NuScenes/truck_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/truck_AP_dist_1.0: 0.0144, pts_bbox_NuScenes/truck_AP_dist_2.0: 0.0539, pts_bbox_NuScenes/truck_AP_dist_4.0: 0.0826, pts_bbox_NuScenes/truck_trans_err: 0.8158, pts_bbox_NuScenes/truck_scale_err: 0.3806, pts_bbox_NuScenes/truck_orient_err: 1.5272, pts_bbox_NuScenes/truck_vel_err: 0.8492, pts_bbox_NuScenes/truck_attr_err: 0.3678, pts_bbox_NuScenes/construction_vehicle_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/construction_vehicle_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/construction_vehicle_AP_dist_2.0: 0.0015, pts_bbox_NuScenes/construction_vehicle_AP_dist_4.0: 0.0052, pts_bbox_NuScenes/construction_vehicle_trans_err: 0.9649, pts_bbox_NuScenes/construction_vehicle_scale_err: 0.5320, pts_bbox_NuScenes/construction_vehicle_orient_err: 1.4108, pts_bbox_NuScenes/construction_vehicle_vel_err: 0.1259, pts_bbox_NuScenes/construction_vehicle_attr_err: 0.4364, pts_bbox_NuScenes/bus_AP_dist_0.5: 0.0014, pts_bbox_NuScenes/bus_AP_dist_1.0: 0.0321, pts_bbox_NuScenes/bus_AP_dist_2.0: 0.0952, pts_bbox_NuScenes/bus_AP_dist_4.0: 0.1342, pts_bbox_NuScenes/bus_trans_err: 0.8501, pts_bbox_NuScenes/bus_scale_err: 0.3063, pts_bbox_NuScenes/bus_orient_err: 1.5381, pts_bbox_NuScenes/bus_vel_err: 2.6370, pts_bbox_NuScenes/bus_attr_err: 0.6602, pts_bbox_NuScenes/trailer_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/trailer_AP_dist_1.0: 0.0005, pts_bbox_NuScenes/trailer_AP_dist_2.0: 0.0073, pts_bbox_NuScenes/trailer_AP_dist_4.0: 0.0331, pts_bbox_NuScenes/trailer_trans_err: 0.9531, pts_bbox_NuScenes/trailer_scale_err: 0.3301, pts_bbox_NuScenes/trailer_orient_err: 1.5921, pts_bbox_NuScenes/trailer_vel_err: 0.4200, pts_bbox_NuScenes/trailer_attr_err: 0.2433, pts_bbox_NuScenes/barrier_AP_dist_0.5: 0.0130, pts_bbox_NuScenes/barrier_AP_dist_1.0: 0.0895, pts_bbox_NuScenes/barrier_AP_dist_2.0: 0.1680, pts_bbox_NuScenes/barrier_AP_dist_4.0: 0.2372, pts_bbox_NuScenes/barrier_trans_err: 0.9329, pts_bbox_NuScenes/barrier_scale_err: 0.3922, pts_bbox_NuScenes/barrier_orient_err: 1.2610, pts_bbox_NuScenes/barrier_vel_err: nan, pts_bbox_NuScenes/barrier_attr_err: nan, pts_bbox_NuScenes/motorcycle_AP_dist_0.5: 0.0073, pts_bbox_NuScenes/motorcycle_AP_dist_1.0: 0.0223, pts_bbox_NuScenes/motorcycle_AP_dist_2.0: 0.0294, pts_bbox_NuScenes/motorcycle_AP_dist_4.0: 0.0326, pts_bbox_NuScenes/motorcycle_trans_err: 0.4781, pts_bbox_NuScenes/motorcycle_scale_err: 0.3149, pts_bbox_NuScenes/motorcycle_orient_err: 1.5577, pts_bbox_NuScenes/motorcycle_vel_err: 1.8627, pts_bbox_NuScenes/motorcycle_attr_err: 0.5353, pts_bbox_NuScenes/bicycle_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/bicycle_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/bicycle_AP_dist_2.0: 0.0000, pts_bbox_NuScenes/bicycle_AP_dist_4.0: 0.0000, pts_bbox_NuScenes/bicycle_trans_err: 0.5187, pts_bbox_NuScenes/bicycle_scale_err: 0.3506, pts_bbox_NuScenes/bicycle_orient_err: 1.5461, pts_bbox_NuScenes/bicycle_vel_err: 0.7778, pts_bbox_NuScenes/bicycle_attr_err: 0.2126, pts_bbox_NuScenes/pedestrian_AP_dist_0.5: 0.1192, pts_bbox_NuScenes/pedestrian_AP_dist_1.0: 0.3138, pts_bbox_NuScenes/pedestrian_AP_dist_2.0: 0.3932, pts_bbox_NuScenes/pedestrian_AP_dist_4.0: 0.4419, pts_bbox_NuScenes/pedestrian_trans_err: 0.5515, pts_bbox_NuScenes/pedestrian_scale_err: 0.3146, pts_bbox_NuScenes/pedestrian_orient_err: 1.7591, pts_bbox_NuScenes/pedestrian_vel_err: 0.9004, pts_bbox_NuScenes/pedestrian_attr_err: 0.7700, pts_bbox_NuScenes/traffic_cone_AP_dist_0.5: 0.0811, pts_bbox_NuScenes/traffic_cone_AP_dist_1.0: 0.1351, pts_bbox_NuScenes/traffic_cone_AP_dist_2.0: 0.1681, pts_bbox_NuScenes/traffic_cone_AP_dist_4.0: 0.2511, pts_bbox_NuScenes/traffic_cone_trans_err: 0.4708, pts_bbox_NuScenes/traffic_cone_scale_err: 0.4573, pts_bbox_NuScenes/traffic_cone_orient_err: nan, pts_bbox_NuScenes/traffic_cone_vel_err: nan, pts_bbox_NuScenes/traffic_cone_attr_err: nan, pts_bbox_NuScenes/NDS: 0.2013, pts_bbox_NuScenes/mAP: 0.1053
2025-05-06 03:13:41,495 - mmdet - INFO - Epoch [6][50/773]	lr: 9.156e-05, eta: 4:32:32, time: 2.149, data_time: 0.765, memory: 8464, loss_cls: 0.6615, loss_bbox: 0.9811, d0.loss_cls: 0.6759, d0.loss_bbox: 1.1650, d1.loss_cls: 0.6576, d1.loss_bbox: 1.0321, d2.loss_cls: 0.6550, d2.loss_bbox: 1.0039, d3.loss_cls: 0.6555, d3.loss_bbox: 0.9896, d4.loss_cls: 0.6578, d4.loss_bbox: 0.9827, aux_task0.loss_heatmap: 0.7885, aux_task0.loss_bbox: 0.3275, aux_task1.loss_heatmap: 1.0221, aux_task1.loss_bbox: 0.3652, aux_task2.loss_heatmap: 1.1726, aux_task2.loss_bbox: 0.3978, aux_task3.loss_heatmap: 0.8089, aux_task3.loss_bbox: 0.2997, aux_task4.loss_heatmap: 0.6544, aux_task4.loss_bbox: 0.3322, aux_task5.loss_heatmap: 0.5921, aux_task5.loss_bbox: 0.3209, loss: 17.1998, grad_norm: 44.6672
2025-05-06 03:14:52,653 - mmdet - INFO - Epoch [6][100/773]	lr: 9.286e-05, eta: 4:31:22, time: 1.423, data_time: 0.005, memory: 8464, loss_cls: 0.6484, loss_bbox: 0.9968, d0.loss_cls: 0.6663, d0.loss_bbox: 1.1832, d1.loss_cls: 0.6472, d1.loss_bbox: 1.0514, d2.loss_cls: 0.6426, d2.loss_bbox: 1.0212, d3.loss_cls: 0.6433, d3.loss_bbox: 1.0055, d4.loss_cls: 0.6436, d4.loss_bbox: 1.0008, aux_task0.loss_heatmap: 0.8241, aux_task0.loss_bbox: 0.3439, aux_task1.loss_heatmap: 1.0540, aux_task1.loss_bbox: 0.3724, aux_task2.loss_heatmap: 1.1660, aux_task2.loss_bbox: 0.3950, aux_task3.loss_heatmap: 0.8524, aux_task3.loss_bbox: 0.3094, aux_task4.loss_heatmap: 0.6248, aux_task4.loss_bbox: 0.3365, aux_task5.loss_heatmap: 0.6213, aux_task5.loss_bbox: 0.3313, loss: 17.3814, grad_norm: 44.3882
2025-05-06 03:16:03,626 - mmdet - INFO - Epoch [6][150/773]	lr: 9.414e-05, eta: 4:30:11, time: 1.418, data_time: 0.004, memory: 8464, loss_cls: 0.6429, loss_bbox: 0.9637, d0.loss_cls: 0.6654, d0.loss_bbox: 1.1582, d1.loss_cls: 0.6482, d1.loss_bbox: 1.0176, d2.loss_cls: 0.6393, d2.loss_bbox: 0.9886, d3.loss_cls: 0.6374, d3.loss_bbox: 0.9735, d4.loss_cls: 0.6386, d4.loss_bbox: 0.9668, aux_task0.loss_heatmap: 0.8091, aux_task0.loss_bbox: 0.3299, aux_task1.loss_heatmap: 0.9911, aux_task1.loss_bbox: 0.3588, aux_task2.loss_heatmap: 1.0743, aux_task2.loss_bbox: 0.4091, aux_task3.loss_heatmap: 0.7955, aux_task3.loss_bbox: 0.3112, aux_task4.loss_heatmap: 0.6092, aux_task4.loss_bbox: 0.3210, aux_task5.loss_heatmap: 0.6297, aux_task5.loss_bbox: 0.3352, loss: 16.9142, grad_norm: 48.3418
2025-05-06 03:17:15,205 - mmdet - INFO - Epoch [6][200/773]	lr: 9.541e-05, eta: 4:29:03, time: 1.432, data_time: 0.006, memory: 8464, loss_cls: 0.6470, loss_bbox: 0.9729, d0.loss_cls: 0.6641, d0.loss_bbox: 1.1550, d1.loss_cls: 0.6473, d1.loss_bbox: 1.0213, d2.loss_cls: 0.6419, d2.loss_bbox: 0.9949, d3.loss_cls: 0.6421, d3.loss_bbox: 0.9778, d4.loss_cls: 0.6412, d4.loss_bbox: 0.9737, aux_task0.loss_heatmap: 0.8134, aux_task0.loss_bbox: 0.3336, aux_task1.loss_heatmap: 1.0158, aux_task1.loss_bbox: 0.3538, aux_task2.loss_heatmap: 1.1031, aux_task2.loss_bbox: 0.3826, aux_task3.loss_heatmap: 0.7625, aux_task3.loss_bbox: 0.3029, aux_task4.loss_heatmap: 0.6043, aux_task4.loss_bbox: 0.3332, aux_task5.loss_heatmap: 0.6147, aux_task5.loss_bbox: 0.3202, loss: 16.9192, grad_norm: 44.2681
2025-05-06 03:18:47,759 - mmdet - INFO - Epoch [6][250/773]	lr: 9.666e-05, eta: 4:28:52, time: 1.852, data_time: 0.005, memory: 8464, loss_cls: 0.6429, loss_bbox: 0.9552, d0.loss_cls: 0.6574, d0.loss_bbox: 1.1358, d1.loss_cls: 0.6386, d1.loss_bbox: 1.0044, d2.loss_cls: 0.6373, d2.loss_bbox: 0.9760, d3.loss_cls: 0.6386, d3.loss_bbox: 0.9611, d4.loss_cls: 0.6396, d4.loss_bbox: 0.9563, aux_task0.loss_heatmap: 0.7748, aux_task0.loss_bbox: 0.3351, aux_task1.loss_heatmap: 0.9527, aux_task1.loss_bbox: 0.3703, aux_task2.loss_heatmap: 1.0623, aux_task2.loss_bbox: 0.3750, aux_task3.loss_heatmap: 0.8324, aux_task3.loss_bbox: 0.3155, aux_task4.loss_heatmap: 0.6436, aux_task4.loss_bbox: 0.3325, aux_task5.loss_heatmap: 0.6059, aux_task5.loss_bbox: 0.3144, loss: 16.7579, grad_norm: 46.5546
2025-05-06 03:19:58,930 - mmdet - INFO - Epoch [6][300/773]	lr: 9.789e-05, eta: 4:27:41, time: 1.423, data_time: 0.004, memory: 8464, loss_cls: 0.6313, loss_bbox: 0.9607, d0.loss_cls: 0.6485, d0.loss_bbox: 1.1518, d1.loss_cls: 0.6289, d1.loss_bbox: 1.0153, d2.loss_cls: 0.6223, d2.loss_bbox: 0.9883, d3.loss_cls: 0.6217, d3.loss_bbox: 0.9696, d4.loss_cls: 0.6256, d4.loss_bbox: 0.9638, aux_task0.loss_heatmap: 0.8011, aux_task0.loss_bbox: 0.3258, aux_task1.loss_heatmap: 1.0497, aux_task1.loss_bbox: 0.3632, aux_task2.loss_heatmap: 1.0309, aux_task2.loss_bbox: 0.3862, aux_task3.loss_heatmap: 0.8162, aux_task3.loss_bbox: 0.3145, aux_task4.loss_heatmap: 0.5785, aux_task4.loss_bbox: 0.3253, aux_task5.loss_heatmap: 0.6326, aux_task5.loss_bbox: 0.3222, loss: 16.7744, grad_norm: 48.5516
2025-05-06 03:21:08,195 - mmdet - INFO - Epoch [6][350/773]	lr: 9.910e-05, eta: 4:26:25, time: 1.385, data_time: 0.004, memory: 8464, loss_cls: 0.6366, loss_bbox: 0.9841, d0.loss_cls: 0.6584, d0.loss_bbox: 1.1642, d1.loss_cls: 0.6369, d1.loss_bbox: 1.0372, d2.loss_cls: 0.6346, d2.loss_bbox: 1.0075, d3.loss_cls: 0.6329, d3.loss_bbox: 0.9935, d4.loss_cls: 0.6349, d4.loss_bbox: 0.9867, aux_task0.loss_heatmap: 0.8225, aux_task0.loss_bbox: 0.3347, aux_task1.loss_heatmap: 1.0356, aux_task1.loss_bbox: 0.3704, aux_task2.loss_heatmap: 1.1084, aux_task2.loss_bbox: 0.3939, aux_task3.loss_heatmap: 0.8478, aux_task3.loss_bbox: 0.3153, aux_task4.loss_heatmap: 0.6204, aux_task4.loss_bbox: 0.3258, aux_task5.loss_heatmap: 0.6242, aux_task5.loss_bbox: 0.3173, loss: 17.1237, grad_norm: 42.0034
2025-05-06 03:22:19,176 - mmdet - INFO - Epoch [6][400/773]	lr: 1.003e-04, eta: 4:25:14, time: 1.418, data_time: 0.004, memory: 8464, loss_cls: 0.6278, loss_bbox: 0.9815, d0.loss_cls: 0.6435, d0.loss_bbox: 1.1610, d1.loss_cls: 0.6268, d1.loss_bbox: 1.0326, d2.loss_cls: 0.6201, d2.loss_bbox: 1.0044, d3.loss_cls: 0.6186, d3.loss_bbox: 0.9883, d4.loss_cls: 0.6222, d4.loss_bbox: 0.9832, aux_task0.loss_heatmap: 0.7599, aux_task0.loss_bbox: 0.3307, aux_task1.loss_heatmap: 1.0005, aux_task1.loss_bbox: 0.3740, aux_task2.loss_heatmap: 1.1092, aux_task2.loss_bbox: 0.3927, aux_task3.loss_heatmap: 0.7984, aux_task3.loss_bbox: 0.3116, aux_task4.loss_heatmap: 0.5893, aux_task4.loss_bbox: 0.3346, aux_task5.loss_heatmap: 0.5976, aux_task5.loss_bbox: 0.3199, loss: 16.8283, grad_norm: 44.4538
2025-05-06 03:23:28,330 - mmdet - INFO - Epoch [6][450/773]	lr: 1.015e-04, eta: 4:23:58, time: 1.384, data_time: 0.005, memory: 8464, loss_cls: 0.6415, loss_bbox: 0.9653, d0.loss_cls: 0.6570, d0.loss_bbox: 1.1428, d1.loss_cls: 0.6438, d1.loss_bbox: 1.0116, d2.loss_cls: 0.6373, d2.loss_bbox: 0.9865, d3.loss_cls: 0.6343, d3.loss_bbox: 0.9737, d4.loss_cls: 0.6369, d4.loss_bbox: 0.9683, aux_task0.loss_heatmap: 0.7816, aux_task0.loss_bbox: 0.3335, aux_task1.loss_heatmap: 0.9851, aux_task1.loss_bbox: 0.3576, aux_task2.loss_heatmap: 1.0965, aux_task2.loss_bbox: 0.3789, aux_task3.loss_heatmap: 0.7753, aux_task3.loss_bbox: 0.3076, aux_task4.loss_heatmap: 0.5965, aux_task4.loss_bbox: 0.3263, aux_task5.loss_heatmap: 0.6036, aux_task5.loss_bbox: 0.3238, loss: 16.7652, grad_norm: 42.4161
2025-05-06 03:24:38,800 - mmdet - INFO - Epoch [6][500/773]	lr: 1.026e-04, eta: 4:22:45, time: 1.409, data_time: 0.004, memory: 8464, loss_cls: 0.6300, loss_bbox: 0.9644, d0.loss_cls: 0.6489, d0.loss_bbox: 1.1371, d1.loss_cls: 0.6289, d1.loss_bbox: 1.0119, d2.loss_cls: 0.6245, d2.loss_bbox: 0.9871, d3.loss_cls: 0.6240, d3.loss_bbox: 0.9727, d4.loss_cls: 0.6248, d4.loss_bbox: 0.9681, aux_task0.loss_heatmap: 0.8114, aux_task0.loss_bbox: 0.3285, aux_task1.loss_heatmap: 0.9832, aux_task1.loss_bbox: 0.3603, aux_task2.loss_heatmap: 1.0542, aux_task2.loss_bbox: 0.3889, aux_task3.loss_heatmap: 0.7367, aux_task3.loss_bbox: 0.3162, aux_task4.loss_heatmap: 0.5810, aux_task4.loss_bbox: 0.3324, aux_task5.loss_heatmap: 0.6044, aux_task5.loss_bbox: 0.3209, loss: 16.6405, grad_norm: 42.2257
2025-05-06 03:25:48,383 - mmdet - INFO - Epoch [6][550/773]	lr: 1.038e-04, eta: 4:21:30, time: 1.391, data_time: 0.005, memory: 8464, loss_cls: 0.6180, loss_bbox: 0.9496, d0.loss_cls: 0.6335, d0.loss_bbox: 1.1356, d1.loss_cls: 0.6189, d1.loss_bbox: 1.0012, d2.loss_cls: 0.6133, d2.loss_bbox: 0.9753, d3.loss_cls: 0.6115, d3.loss_bbox: 0.9614, d4.loss_cls: 0.6139, d4.loss_bbox: 0.9532, aux_task0.loss_heatmap: 0.7566, aux_task0.loss_bbox: 0.3285, aux_task1.loss_heatmap: 0.9827, aux_task1.loss_bbox: 0.3608, aux_task2.loss_heatmap: 1.0063, aux_task2.loss_bbox: 0.3953, aux_task3.loss_heatmap: 0.7972, aux_task3.loss_bbox: 0.3203, aux_task4.loss_heatmap: 0.5633, aux_task4.loss_bbox: 0.3172, aux_task5.loss_heatmap: 0.5664, aux_task5.loss_bbox: 0.3182, loss: 16.3980, grad_norm: 41.3143
2025-05-06 03:26:59,824 - mmdet - INFO - Epoch [6][600/773]	lr: 1.049e-04, eta: 4:20:20, time: 1.430, data_time: 0.005, memory: 8464, loss_cls: 0.6006, loss_bbox: 0.9543, d0.loss_cls: 0.6266, d0.loss_bbox: 1.1257, d1.loss_cls: 0.6011, d1.loss_bbox: 1.0043, d2.loss_cls: 0.5964, d2.loss_bbox: 0.9749, d3.loss_cls: 0.5947, d3.loss_bbox: 0.9573, d4.loss_cls: 0.5944, d4.loss_bbox: 0.9564, aux_task0.loss_heatmap: 0.7959, aux_task0.loss_bbox: 0.3284, aux_task1.loss_heatmap: 1.0157, aux_task1.loss_bbox: 0.3639, aux_task2.loss_heatmap: 0.9856, aux_task2.loss_bbox: 0.3808, aux_task3.loss_heatmap: 0.8698, aux_task3.loss_bbox: 0.3215, aux_task4.loss_heatmap: 0.5590, aux_task4.loss_bbox: 0.3250, aux_task5.loss_heatmap: 0.5866, aux_task5.loss_bbox: 0.3234, loss: 16.4422, grad_norm: 42.3300
2025-05-06 03:28:12,193 - mmdet - INFO - Epoch [6][650/773]	lr: 1.059e-04, eta: 4:19:12, time: 1.446, data_time: 0.004, memory: 8464, loss_cls: 0.6017, loss_bbox: 0.9337, d0.loss_cls: 0.6223, d0.loss_bbox: 1.1051, d1.loss_cls: 0.6038, d1.loss_bbox: 0.9809, d2.loss_cls: 0.5970, d2.loss_bbox: 0.9528, d3.loss_cls: 0.5964, d3.loss_bbox: 0.9413, d4.loss_cls: 0.5988, d4.loss_bbox: 0.9379, aux_task0.loss_heatmap: 0.7603, aux_task0.loss_bbox: 0.3154, aux_task1.loss_heatmap: 0.9582, aux_task1.loss_bbox: 0.3579, aux_task2.loss_heatmap: 0.9996, aux_task2.loss_bbox: 0.3770, aux_task3.loss_heatmap: 0.8109, aux_task3.loss_bbox: 0.3082, aux_task4.loss_heatmap: 0.5579, aux_task4.loss_bbox: 0.3120, aux_task5.loss_heatmap: 0.6040, aux_task5.loss_bbox: 0.3215, loss: 16.1543, grad_norm: 41.7164
2025-05-06 03:29:23,012 - mmdet - INFO - Epoch [6][700/773]	lr: 1.070e-04, eta: 4:18:01, time: 1.416, data_time: 0.005, memory: 8464, loss_cls: 0.6050, loss_bbox: 0.9374, d0.loss_cls: 0.6304, d0.loss_bbox: 1.1154, d1.loss_cls: 0.6098, d1.loss_bbox: 0.9875, d2.loss_cls: 0.6041, d2.loss_bbox: 0.9604, d3.loss_cls: 0.6010, d3.loss_bbox: 0.9465, d4.loss_cls: 0.6024, d4.loss_bbox: 0.9410, aux_task0.loss_heatmap: 0.7879, aux_task0.loss_bbox: 0.3250, aux_task1.loss_heatmap: 0.8962, aux_task1.loss_bbox: 0.3534, aux_task2.loss_heatmap: 1.0670, aux_task2.loss_bbox: 0.3765, aux_task3.loss_heatmap: 0.8068, aux_task3.loss_bbox: 0.3091, aux_task4.loss_heatmap: 0.5643, aux_task4.loss_bbox: 0.3135, aux_task5.loss_heatmap: 0.6275, aux_task5.loss_bbox: 0.3202, loss: 16.2882, grad_norm: 44.4540
2025-05-06 03:30:32,221 - mmdet - INFO - Epoch [6][750/773]	lr: 1.080e-04, eta: 4:16:46, time: 1.385, data_time: 0.005, memory: 8464, loss_cls: 0.6046, loss_bbox: 0.9344, d0.loss_cls: 0.6274, d0.loss_bbox: 1.1088, d1.loss_cls: 0.6043, d1.loss_bbox: 0.9847, d2.loss_cls: 0.6030, d2.loss_bbox: 0.9567, d3.loss_cls: 0.6016, d3.loss_bbox: 0.9399, d4.loss_cls: 0.6019, d4.loss_bbox: 0.9346, aux_task0.loss_heatmap: 0.7778, aux_task0.loss_bbox: 0.3220, aux_task1.loss_heatmap: 0.9765, aux_task1.loss_bbox: 0.3670, aux_task2.loss_heatmap: 1.0273, aux_task2.loss_bbox: 0.3903, aux_task3.loss_heatmap: 0.7897, aux_task3.loss_bbox: 0.3135, aux_task4.loss_heatmap: 0.5415, aux_task4.loss_bbox: 0.3265, aux_task5.loss_heatmap: 0.6054, aux_task5.loss_bbox: 0.3202, loss: 16.2596, grad_norm: 42.9740
2025-05-06 03:34:36,334 - mmdet - INFO - Saving checkpoint at 6 epochs
2025-05-06 03:35:59,474 - mmdet - INFO - Epoch [7][50/773]	lr: 1.095e-04, eta: 4:14:11, time: 1.634, data_time: 0.186, memory: 8464, loss_cls: 0.6201, loss_bbox: 0.9460, d0.loss_cls: 0.6263, d0.loss_bbox: 1.1221, d1.loss_cls: 0.6156, d1.loss_bbox: 0.9941, d2.loss_cls: 0.6140, d2.loss_bbox: 0.9652, d3.loss_cls: 0.6154, d3.loss_bbox: 0.9521, d4.loss_cls: 0.6160, d4.loss_bbox: 0.9476, aux_task0.loss_heatmap: 0.7643, aux_task0.loss_bbox: 0.3235, aux_task1.loss_heatmap: 0.9668, aux_task1.loss_bbox: 0.3616, aux_task2.loss_heatmap: 1.0765, aux_task2.loss_bbox: 0.3887, aux_task3.loss_heatmap: 0.7218, aux_task3.loss_bbox: 0.2941, aux_task4.loss_heatmap: 0.5977, aux_task4.loss_bbox: 0.3269, aux_task5.loss_heatmap: 0.5605, aux_task5.loss_bbox: 0.3148, loss: 16.3318, grad_norm: 39.2597
2025-05-06 03:37:07,692 - mmdet - INFO - Epoch [7][100/773]	lr: 1.105e-04, eta: 4:12:55, time: 1.364, data_time: 0.004, memory: 8464, loss_cls: 0.6185, loss_bbox: 0.9525, d0.loss_cls: 0.6315, d0.loss_bbox: 1.1179, d1.loss_cls: 0.6147, d1.loss_bbox: 0.9955, d2.loss_cls: 0.6104, d2.loss_bbox: 0.9723, d3.loss_cls: 0.6111, d3.loss_bbox: 0.9598, d4.loss_cls: 0.6156, d4.loss_bbox: 0.9550, aux_task0.loss_heatmap: 0.7823, aux_task0.loss_bbox: 0.3248, aux_task1.loss_heatmap: 1.0050, aux_task1.loss_bbox: 0.3668, aux_task2.loss_heatmap: 1.0610, aux_task2.loss_bbox: 0.3763, aux_task3.loss_heatmap: 0.7962, aux_task3.loss_bbox: 0.3026, aux_task4.loss_heatmap: 0.5923, aux_task4.loss_bbox: 0.3261, aux_task5.loss_heatmap: 0.5846, aux_task5.loss_bbox: 0.3088, loss: 16.4815, grad_norm: 40.2391
2025-05-06 03:38:16,137 - mmdet - INFO - Epoch [7][150/773]	lr: 1.114e-04, eta: 4:11:39, time: 1.369, data_time: 0.004, memory: 8464, loss_cls: 0.6007, loss_bbox: 0.9186, d0.loss_cls: 0.6197, d0.loss_bbox: 1.0864, d1.loss_cls: 0.6003, d1.loss_bbox: 0.9633, d2.loss_cls: 0.5941, d2.loss_bbox: 0.9400, d3.loss_cls: 0.5957, d3.loss_bbox: 0.9248, d4.loss_cls: 0.5987, d4.loss_bbox: 0.9199, aux_task0.loss_heatmap: 0.7501, aux_task0.loss_bbox: 0.3284, aux_task1.loss_heatmap: 0.9218, aux_task1.loss_bbox: 0.3545, aux_task2.loss_heatmap: 1.0080, aux_task2.loss_bbox: 0.4004, aux_task3.loss_heatmap: 0.7002, aux_task3.loss_bbox: 0.3058, aux_task4.loss_heatmap: 0.5742, aux_task4.loss_bbox: 0.3191, aux_task5.loss_heatmap: 0.6061, aux_task5.loss_bbox: 0.3095, loss: 15.9404, grad_norm: 41.4146
2025-05-06 03:39:27,289 - mmdet - INFO - Epoch [7][200/773]	lr: 1.123e-04, eta: 4:10:29, time: 1.422, data_time: 0.004, memory: 8464, loss_cls: 0.6091, loss_bbox: 0.9332, d0.loss_cls: 0.6348, d0.loss_bbox: 1.1025, d1.loss_cls: 0.6107, d1.loss_bbox: 0.9787, d2.loss_cls: 0.6064, d2.loss_bbox: 0.9529, d3.loss_cls: 0.6049, d3.loss_bbox: 0.9384, d4.loss_cls: 0.6048, d4.loss_bbox: 0.9344, aux_task0.loss_heatmap: 0.7682, aux_task0.loss_bbox: 0.3231, aux_task1.loss_heatmap: 0.9366, aux_task1.loss_bbox: 0.3453, aux_task2.loss_heatmap: 0.9988, aux_task2.loss_bbox: 0.3798, aux_task3.loss_heatmap: 0.7963, aux_task3.loss_bbox: 0.3025, aux_task4.loss_heatmap: 0.5865, aux_task4.loss_bbox: 0.3266, aux_task5.loss_heatmap: 0.5903, aux_task5.loss_bbox: 0.3156, loss: 16.1803, grad_norm: 38.1361
2025-05-06 03:40:40,712 - mmdet - INFO - Epoch [7][250/773]	lr: 1.132e-04, eta: 4:09:24, time: 1.469, data_time: 0.006, memory: 8464, loss_cls: 0.5771, loss_bbox: 0.9020, d0.loss_cls: 0.5966, d0.loss_bbox: 1.0719, d1.loss_cls: 0.5811, d1.loss_bbox: 0.9471, d2.loss_cls: 0.5743, d2.loss_bbox: 0.9209, d3.loss_cls: 0.5751, d3.loss_bbox: 0.9072, d4.loss_cls: 0.5739, d4.loss_bbox: 0.9038, aux_task0.loss_heatmap: 0.7311, aux_task0.loss_bbox: 0.3180, aux_task1.loss_heatmap: 0.9128, aux_task1.loss_bbox: 0.3564, aux_task2.loss_heatmap: 0.9341, aux_task2.loss_bbox: 0.3680, aux_task3.loss_heatmap: 0.7281, aux_task3.loss_bbox: 0.3101, aux_task4.loss_heatmap: 0.5794, aux_task4.loss_bbox: 0.3253, aux_task5.loss_heatmap: 0.5924, aux_task5.loss_bbox: 0.3129, loss: 15.5993, grad_norm: 36.7321
2025-05-06 03:41:53,441 - mmdet - INFO - Epoch [7][300/773]	lr: 1.141e-04, eta: 4:08:17, time: 1.454, data_time: 0.005, memory: 8464, loss_cls: 0.5862, loss_bbox: 0.9117, d0.loss_cls: 0.6078, d0.loss_bbox: 1.0798, d1.loss_cls: 0.5879, d1.loss_bbox: 0.9577, d2.loss_cls: 0.5823, d2.loss_bbox: 0.9321, d3.loss_cls: 0.5804, d3.loss_bbox: 0.9208, d4.loss_cls: 0.5826, d4.loss_bbox: 0.9156, aux_task0.loss_heatmap: 0.7316, aux_task0.loss_bbox: 0.3200, aux_task1.loss_heatmap: 0.9858, aux_task1.loss_bbox: 0.3525, aux_task2.loss_heatmap: 0.9435, aux_task2.loss_bbox: 0.3700, aux_task3.loss_heatmap: 0.8132, aux_task3.loss_bbox: 0.3036, aux_task4.loss_heatmap: 0.5196, aux_task4.loss_bbox: 0.3148, aux_task5.loss_heatmap: 0.5897, aux_task5.loss_bbox: 0.3106, loss: 15.7999, grad_norm: 41.5181
2025-05-06 03:43:13,411 - mmdet - INFO - Epoch [7][350/773]	lr: 1.149e-04, eta: 4:07:26, time: 1.599, data_time: 0.005, memory: 8464, loss_cls: 0.5840, loss_bbox: 0.9083, d0.loss_cls: 0.6067, d0.loss_bbox: 1.0730, d1.loss_cls: 0.5861, d1.loss_bbox: 0.9558, d2.loss_cls: 0.5803, d2.loss_bbox: 0.9324, d3.loss_cls: 0.5782, d3.loss_bbox: 0.9175, d4.loss_cls: 0.5801, d4.loss_bbox: 0.9123, aux_task0.loss_heatmap: 0.7177, aux_task0.loss_bbox: 0.3111, aux_task1.loss_heatmap: 0.9727, aux_task1.loss_bbox: 0.3570, aux_task2.loss_heatmap: 0.9683, aux_task2.loss_bbox: 0.3747, aux_task3.loss_heatmap: 0.7817, aux_task3.loss_bbox: 0.3003, aux_task4.loss_heatmap: 0.5553, aux_task4.loss_bbox: 0.3200, aux_task5.loss_heatmap: 0.5658, aux_task5.loss_bbox: 0.3062, loss: 15.7452, grad_norm: 46.4575
2025-05-06 03:44:22,688 - mmdet - INFO - Epoch [7][400/773]	lr: 1.157e-04, eta: 4:06:12, time: 1.387, data_time: 0.005, memory: 8464, loss_cls: 0.5946, loss_bbox: 0.9478, d0.loss_cls: 0.6133, d0.loss_bbox: 1.1121, d1.loss_cls: 0.5918, d1.loss_bbox: 0.9931, d2.loss_cls: 0.5896, d2.loss_bbox: 0.9684, d3.loss_cls: 0.5899, d3.loss_bbox: 0.9538, d4.loss_cls: 0.5892, d4.loss_bbox: 0.9506, aux_task0.loss_heatmap: 0.7682, aux_task0.loss_bbox: 0.3310, aux_task1.loss_heatmap: 0.9837, aux_task1.loss_bbox: 0.3634, aux_task2.loss_heatmap: 1.0179, aux_task2.loss_bbox: 0.3844, aux_task3.loss_heatmap: 0.7408, aux_task3.loss_bbox: 0.3124, aux_task4.loss_heatmap: 0.5322, aux_task4.loss_bbox: 0.3303, aux_task5.loss_heatmap: 0.5932, aux_task5.loss_bbox: 0.3067, loss: 16.1585, grad_norm: 36.1512
2025-05-06 03:45:31,371 - mmdet - INFO - Epoch [7][450/773]	lr: 1.165e-04, eta: 4:04:56, time: 1.374, data_time: 0.004, memory: 8464, loss_cls: 0.5899, loss_bbox: 0.9084, d0.loss_cls: 0.6086, d0.loss_bbox: 1.0683, d1.loss_cls: 0.5965, d1.loss_bbox: 0.9478, d2.loss_cls: 0.5892, d2.loss_bbox: 0.9240, d3.loss_cls: 0.5875, d3.loss_bbox: 0.9136, d4.loss_cls: 0.5875, d4.loss_bbox: 0.9103, aux_task0.loss_heatmap: 0.7264, aux_task0.loss_bbox: 0.3124, aux_task1.loss_heatmap: 0.9167, aux_task1.loss_bbox: 0.3513, aux_task2.loss_heatmap: 1.0241, aux_task2.loss_bbox: 0.3699, aux_task3.loss_heatmap: 0.8105, aux_task3.loss_bbox: 0.3097, aux_task4.loss_heatmap: 0.5809, aux_task4.loss_bbox: 0.3178, aux_task5.loss_heatmap: 0.5441, aux_task5.loss_bbox: 0.3020, loss: 15.7973, grad_norm: 39.5883
2025-05-06 03:46:39,651 - mmdet - INFO - Epoch [7][500/773]	lr: 1.172e-04, eta: 4:03:40, time: 1.365, data_time: 0.004, memory: 8464, loss_cls: 0.5774, loss_bbox: 0.9044, d0.loss_cls: 0.5989, d0.loss_bbox: 1.0587, d1.loss_cls: 0.5840, d1.loss_bbox: 0.9455, d2.loss_cls: 0.5747, d2.loss_bbox: 0.9239, d3.loss_cls: 0.5736, d3.loss_bbox: 0.9103, d4.loss_cls: 0.5735, d4.loss_bbox: 0.9074, aux_task0.loss_heatmap: 0.7260, aux_task0.loss_bbox: 0.3132, aux_task1.loss_heatmap: 0.9266, aux_task1.loss_bbox: 0.3502, aux_task2.loss_heatmap: 1.0045, aux_task2.loss_bbox: 0.3769, aux_task3.loss_heatmap: 0.7221, aux_task3.loss_bbox: 0.3117, aux_task4.loss_heatmap: 0.5325, aux_task4.loss_bbox: 0.3154, aux_task5.loss_heatmap: 0.5501, aux_task5.loss_bbox: 0.3133, loss: 15.5748, grad_norm: 38.8871
2025-05-06 03:47:48,464 - mmdet - INFO - Epoch [7][550/773]	lr: 1.179e-04, eta: 4:02:25, time: 1.376, data_time: 0.004, memory: 8464, loss_cls: 0.5743, loss_bbox: 0.8870, d0.loss_cls: 0.5868, d0.loss_bbox: 1.0447, d1.loss_cls: 0.5686, d1.loss_bbox: 0.9295, d2.loss_cls: 0.5658, d2.loss_bbox: 0.9057, d3.loss_cls: 0.5678, d3.loss_bbox: 0.8937, d4.loss_cls: 0.5690, d4.loss_bbox: 0.8907, aux_task0.loss_heatmap: 0.7028, aux_task0.loss_bbox: 0.3058, aux_task1.loss_heatmap: 0.9145, aux_task1.loss_bbox: 0.3408, aux_task2.loss_heatmap: 0.9358, aux_task2.loss_bbox: 0.3799, aux_task3.loss_heatmap: 0.7459, aux_task3.loss_bbox: 0.3104, aux_task4.loss_heatmap: 0.5260, aux_task4.loss_bbox: 0.3101, aux_task5.loss_heatmap: 0.5422, aux_task5.loss_bbox: 0.3124, loss: 15.3100, grad_norm: 35.3790
2025-05-06 03:48:59,827 - mmdet - INFO - Epoch [7][600/773]	lr: 1.186e-04, eta: 4:01:16, time: 1.427, data_time: 0.004, memory: 8464, loss_cls: 0.5519, loss_bbox: 0.9228, d0.loss_cls: 0.5749, d0.loss_bbox: 1.0739, d1.loss_cls: 0.5599, d1.loss_bbox: 0.9595, d2.loss_cls: 0.5511, d2.loss_bbox: 0.9378, d3.loss_cls: 0.5493, d3.loss_bbox: 0.9268, d4.loss_cls: 0.5486, d4.loss_bbox: 0.9244, aux_task0.loss_heatmap: 0.7215, aux_task0.loss_bbox: 0.3194, aux_task1.loss_heatmap: 0.9381, aux_task1.loss_bbox: 0.3593, aux_task2.loss_heatmap: 0.9368, aux_task2.loss_bbox: 0.3795, aux_task3.loss_heatmap: 0.7650, aux_task3.loss_bbox: 0.3086, aux_task4.loss_heatmap: 0.5074, aux_task4.loss_bbox: 0.3223, aux_task5.loss_heatmap: 0.5552, aux_task5.loss_bbox: 0.3171, loss: 15.5109, grad_norm: 37.4173
2025-05-06 03:50:09,946 - mmdet - INFO - Epoch [7][650/773]	lr: 1.193e-04, eta: 4:00:04, time: 1.401, data_time: 0.004, memory: 8464, loss_cls: 0.5638, loss_bbox: 0.8918, d0.loss_cls: 0.5866, d0.loss_bbox: 1.0496, d1.loss_cls: 0.5670, d1.loss_bbox: 0.9328, d2.loss_cls: 0.5606, d2.loss_bbox: 0.9087, d3.loss_cls: 0.5593, d3.loss_bbox: 0.8973, d4.loss_cls: 0.5606, d4.loss_bbox: 0.8943, aux_task0.loss_heatmap: 0.7258, aux_task0.loss_bbox: 0.3092, aux_task1.loss_heatmap: 0.8909, aux_task1.loss_bbox: 0.3522, aux_task2.loss_heatmap: 0.8926, aux_task2.loss_bbox: 0.3700, aux_task3.loss_heatmap: 0.8387, aux_task3.loss_bbox: 0.3115, aux_task4.loss_heatmap: 0.5243, aux_task4.loss_bbox: 0.3083, aux_task5.loss_heatmap: 0.5652, aux_task5.loss_bbox: 0.3182, loss: 15.3793, grad_norm: 37.2870
2025-05-06 03:51:21,098 - mmdet - INFO - Epoch [7][700/773]	lr: 1.199e-04, eta: 3:58:53, time: 1.423, data_time: 0.005, memory: 8464, loss_cls: 0.5665, loss_bbox: 0.8978, d0.loss_cls: 0.5861, d0.loss_bbox: 1.0525, d1.loss_cls: 0.5685, d1.loss_bbox: 0.9363, d2.loss_cls: 0.5653, d2.loss_bbox: 0.9126, d3.loss_cls: 0.5641, d3.loss_bbox: 0.9015, d4.loss_cls: 0.5631, d4.loss_bbox: 0.9007, aux_task0.loss_heatmap: 0.7187, aux_task0.loss_bbox: 0.3131, aux_task1.loss_heatmap: 0.8713, aux_task1.loss_bbox: 0.3433, aux_task2.loss_heatmap: 0.9871, aux_task2.loss_bbox: 0.3706, aux_task3.loss_heatmap: 0.7097, aux_task3.loss_bbox: 0.2947, aux_task4.loss_heatmap: 0.5259, aux_task4.loss_bbox: 0.3090, aux_task5.loss_heatmap: 0.6013, aux_task5.loss_bbox: 0.3114, loss: 15.3713, grad_norm: 36.3248
2025-05-06 03:52:31,146 - mmdet - INFO - Epoch [7][750/773]	lr: 1.205e-04, eta: 3:57:41, time: 1.401, data_time: 0.005, memory: 8464, loss_cls: 0.5510, loss_bbox: 0.9019, d0.loss_cls: 0.5716, d0.loss_bbox: 1.0646, d1.loss_cls: 0.5570, d1.loss_bbox: 0.9410, d2.loss_cls: 0.5505, d2.loss_bbox: 0.9160, d3.loss_cls: 0.5498, d3.loss_bbox: 0.9061, d4.loss_cls: 0.5486, d4.loss_bbox: 0.9044, aux_task0.loss_heatmap: 0.7294, aux_task0.loss_bbox: 0.3048, aux_task1.loss_heatmap: 0.8922, aux_task1.loss_bbox: 0.3547, aux_task2.loss_heatmap: 0.9462, aux_task2.loss_bbox: 0.3821, aux_task3.loss_heatmap: 0.7283, aux_task3.loss_bbox: 0.2990, aux_task4.loss_heatmap: 0.5056, aux_task4.loss_bbox: 0.3155, aux_task5.loss_heatmap: 0.5562, aux_task5.loss_bbox: 0.3153, loss: 15.2918, grad_norm: 40.5082
2025-05-06 03:53:04,269 - mmdet - INFO - Saving checkpoint at 7 epochs
2025-05-06 03:54:32,238 - mmdet - INFO - Epoch [8][50/773]	lr: 1.212e-04, eta: 3:55:26, time: 1.724, data_time: 0.356, memory: 8464, loss_cls: 0.5612, loss_bbox: 0.8828, d0.loss_cls: 0.5788, d0.loss_bbox: 1.0441, d1.loss_cls: 0.5641, d1.loss_bbox: 0.9283, d2.loss_cls: 0.5608, d2.loss_bbox: 0.9023, d3.loss_cls: 0.5616, d3.loss_bbox: 0.8910, d4.loss_cls: 0.5600, d4.loss_bbox: 0.8872, aux_task0.loss_heatmap: 0.6733, aux_task0.loss_bbox: 0.3066, aux_task1.loss_heatmap: 0.8966, aux_task1.loss_bbox: 0.3458, aux_task2.loss_heatmap: 0.9757, aux_task2.loss_bbox: 0.3765, aux_task3.loss_heatmap: 0.7422, aux_task3.loss_bbox: 0.2949, aux_task4.loss_heatmap: 0.5490, aux_task4.loss_bbox: 0.3143, aux_task5.loss_heatmap: 0.5172, aux_task5.loss_bbox: 0.3063, loss: 15.2207, grad_norm: 45.3067
2025-05-06 03:55:40,520 - mmdet - INFO - Epoch [8][100/773]	lr: 1.217e-04, eta: 3:54:12, time: 1.366, data_time: 0.005, memory: 8684, loss_cls: 0.5611, loss_bbox: 0.8924, d0.loss_cls: 0.5784, d0.loss_bbox: 1.0385, d1.loss_cls: 0.5638, d1.loss_bbox: 0.9265, d2.loss_cls: 0.5593, d2.loss_bbox: 0.9041, d3.loss_cls: 0.5578, d3.loss_bbox: 0.8951, d4.loss_cls: 0.5567, d4.loss_bbox: 0.8946, aux_task0.loss_heatmap: 0.6964, aux_task0.loss_bbox: 0.3023, aux_task1.loss_heatmap: 0.9308, aux_task1.loss_bbox: 0.3622, aux_task2.loss_heatmap: 0.9932, aux_task2.loss_bbox: 0.3703, aux_task3.loss_heatmap: 0.7425, aux_task3.loss_bbox: 0.2922, aux_task4.loss_heatmap: 0.5407, aux_task4.loss_bbox: 0.3192, aux_task5.loss_heatmap: 0.5507, aux_task5.loss_bbox: 0.3079, loss: 15.3367, grad_norm: 38.8937
2025-05-06 03:56:56,786 - mmdet - INFO - Epoch [8][150/773]	lr: 1.222e-04, eta: 3:53:11, time: 1.525, data_time: 0.004, memory: 8684, loss_cls: 0.5648, loss_bbox: 0.8929, d0.loss_cls: 0.5934, d0.loss_bbox: 1.0400, d1.loss_cls: 0.5699, d1.loss_bbox: 0.9319, d2.loss_cls: 0.5646, d2.loss_bbox: 0.9103, d3.loss_cls: 0.5651, d3.loss_bbox: 0.8992, d4.loss_cls: 0.5634, d4.loss_bbox: 0.8961, aux_task0.loss_heatmap: 0.7169, aux_task0.loss_bbox: 0.3119, aux_task1.loss_heatmap: 0.8665, aux_task1.loss_bbox: 0.3383, aux_task2.loss_heatmap: 0.9042, aux_task2.loss_bbox: 0.3869, aux_task3.loss_heatmap: 0.8206, aux_task3.loss_bbox: 0.3095, aux_task4.loss_heatmap: 0.5491, aux_task4.loss_bbox: 0.3101, aux_task5.loss_heatmap: 0.6080, aux_task5.loss_bbox: 0.3111, loss: 15.4248, grad_norm: 38.4019
2025-05-06 03:58:09,321 - mmdet - INFO - Epoch [8][200/773]	lr: 1.226e-04, eta: 3:52:04, time: 1.451, data_time: 0.004, memory: 8684, loss_cls: 0.5565, loss_bbox: 0.8919, d0.loss_cls: 0.5820, d0.loss_bbox: 1.0395, d1.loss_cls: 0.5628, d1.loss_bbox: 0.9285, d2.loss_cls: 0.5582, d2.loss_bbox: 0.9069, d3.loss_cls: 0.5562, d3.loss_bbox: 0.8951, d4.loss_cls: 0.5541, d4.loss_bbox: 0.8939, aux_task0.loss_heatmap: 0.7218, aux_task0.loss_bbox: 0.3168, aux_task1.loss_heatmap: 0.8978, aux_task1.loss_bbox: 0.3344, aux_task2.loss_heatmap: 0.9210, aux_task2.loss_bbox: 0.3680, aux_task3.loss_heatmap: 0.7390, aux_task3.loss_bbox: 0.2955, aux_task4.loss_heatmap: 0.5494, aux_task4.loss_bbox: 0.3161, aux_task5.loss_heatmap: 0.5949, aux_task5.loss_bbox: 0.3124, loss: 15.2928, grad_norm: 35.4608
2025-05-06 03:59:20,082 - mmdet - INFO - Epoch [8][250/773]	lr: 1.230e-04, eta: 3:50:53, time: 1.415, data_time: 0.005, memory: 8684, loss_cls: 0.5559, loss_bbox: 0.8787, d0.loss_cls: 0.5747, d0.loss_bbox: 1.0280, d1.loss_cls: 0.5577, d1.loss_bbox: 0.9202, d2.loss_cls: 0.5530, d2.loss_bbox: 0.8963, d3.loss_cls: 0.5530, d3.loss_bbox: 0.8850, d4.loss_cls: 0.5523, d4.loss_bbox: 0.8817, aux_task0.loss_heatmap: 0.7099, aux_task0.loss_bbox: 0.3075, aux_task1.loss_heatmap: 0.8948, aux_task1.loss_bbox: 0.3553, aux_task2.loss_heatmap: 0.8993, aux_task2.loss_bbox: 0.3542, aux_task3.loss_heatmap: 0.7012, aux_task3.loss_bbox: 0.3046, aux_task4.loss_heatmap: 0.5690, aux_task4.loss_bbox: 0.3200, aux_task5.loss_heatmap: 0.5706, aux_task5.loss_bbox: 0.3104, loss: 15.1335, grad_norm: 36.9616
2025-05-06 04:00:31,116 - mmdet - INFO - Epoch [8][300/773]	lr: 1.234e-04, eta: 3:49:43, time: 1.420, data_time: 0.005, memory: 8684, loss_cls: 0.5421, loss_bbox: 0.8746, d0.loss_cls: 0.5622, d0.loss_bbox: 1.0212, d1.loss_cls: 0.5450, d1.loss_bbox: 0.9110, d2.loss_cls: 0.5388, d2.loss_bbox: 0.8887, d3.loss_cls: 0.5372, d3.loss_bbox: 0.8808, d4.loss_cls: 0.5385, d4.loss_bbox: 0.8766, aux_task0.loss_heatmap: 0.6868, aux_task0.loss_bbox: 0.3071, aux_task1.loss_heatmap: 0.9425, aux_task1.loss_bbox: 0.3397, aux_task2.loss_heatmap: 0.8563, aux_task2.loss_bbox: 0.3548, aux_task3.loss_heatmap: 0.7161, aux_task3.loss_bbox: 0.2952, aux_task4.loss_heatmap: 0.5029, aux_task4.loss_bbox: 0.3095, aux_task5.loss_heatmap: 0.5193, aux_task5.loss_bbox: 0.3025, loss: 14.8495, grad_norm: 37.6786
2025-05-06 04:01:42,562 - mmdet - INFO - Epoch [8][350/773]	lr: 1.237e-04, eta: 3:48:33, time: 1.429, data_time: 0.005, memory: 8684, loss_cls: 0.5460, loss_bbox: 0.8906, d0.loss_cls: 0.5749, d0.loss_bbox: 1.0396, d1.loss_cls: 0.5524, d1.loss_bbox: 0.9303, d2.loss_cls: 0.5458, d2.loss_bbox: 0.9085, d3.loss_cls: 0.5440, d3.loss_bbox: 0.8977, d4.loss_cls: 0.5422, d4.loss_bbox: 0.8944, aux_task0.loss_heatmap: 0.7003, aux_task0.loss_bbox: 0.3117, aux_task1.loss_heatmap: 0.9527, aux_task1.loss_bbox: 0.3517, aux_task2.loss_heatmap: 0.9590, aux_task2.loss_bbox: 0.3629, aux_task3.loss_heatmap: 0.7676, aux_task3.loss_bbox: 0.3031, aux_task4.loss_heatmap: 0.5396, aux_task4.loss_bbox: 0.3089, aux_task5.loss_heatmap: 0.5445, aux_task5.loss_bbox: 0.3075, loss: 15.2762, grad_norm: 38.5585
2025-05-06 04:02:51,891 - mmdet - INFO - Epoch [8][400/773]	lr: 1.240e-04, eta: 3:47:20, time: 1.387, data_time: 0.005, memory: 8684, loss_cls: 0.5472, loss_bbox: 0.8935, d0.loss_cls: 0.5713, d0.loss_bbox: 1.0308, d1.loss_cls: 0.5520, d1.loss_bbox: 0.9300, d2.loss_cls: 0.5463, d2.loss_bbox: 0.9087, d3.loss_cls: 0.5445, d3.loss_bbox: 0.8983, d4.loss_cls: 0.5459, d4.loss_bbox: 0.8933, aux_task0.loss_heatmap: 0.7550, aux_task0.loss_bbox: 0.3133, aux_task1.loss_heatmap: 0.9084, aux_task1.loss_bbox: 0.3508, aux_task2.loss_heatmap: 0.9208, aux_task2.loss_bbox: 0.3705, aux_task3.loss_heatmap: 0.7476, aux_task3.loss_bbox: 0.3094, aux_task4.loss_heatmap: 0.5200, aux_task4.loss_bbox: 0.3196, aux_task5.loss_heatmap: 0.5387, aux_task5.loss_bbox: 0.2976, loss: 15.2136, grad_norm: 35.8955
2025-05-06 04:04:02,199 - mmdet - INFO - Epoch [8][450/773]	lr: 1.242e-04, eta: 3:46:09, time: 1.406, data_time: 0.005, memory: 8684, loss_cls: 0.5470, loss_bbox: 0.8932, d0.loss_cls: 0.5703, d0.loss_bbox: 1.0364, d1.loss_cls: 0.5542, d1.loss_bbox: 0.9255, d2.loss_cls: 0.5464, d2.loss_bbox: 0.9068, d3.loss_cls: 0.5425, d3.loss_bbox: 0.9002, d4.loss_cls: 0.5447, d4.loss_bbox: 0.8969, aux_task0.loss_heatmap: 0.6883, aux_task0.loss_bbox: 0.3051, aux_task1.loss_heatmap: 0.8742, aux_task1.loss_bbox: 0.3503, aux_task2.loss_heatmap: 0.9304, aux_task2.loss_bbox: 0.3576, aux_task3.loss_heatmap: 0.7206, aux_task3.loss_bbox: 0.3126, aux_task4.loss_heatmap: 0.5719, aux_task4.loss_bbox: 0.3156, aux_task5.loss_heatmap: 0.5169, aux_task5.loss_bbox: 0.2991, loss: 15.1067, grad_norm: 36.5263
2025-05-06 04:05:13,076 - mmdet - INFO - Epoch [8][500/773]	lr: 1.245e-04, eta: 3:44:59, time: 1.418, data_time: 0.005, memory: 8684, loss_cls: 0.5397, loss_bbox: 0.8809, d0.loss_cls: 0.5622, d0.loss_bbox: 1.0236, d1.loss_cls: 0.5503, d1.loss_bbox: 0.9158, d2.loss_cls: 0.5417, d2.loss_bbox: 0.8921, d3.loss_cls: 0.5403, d3.loss_bbox: 0.8815, d4.loss_cls: 0.5387, d4.loss_bbox: 0.8812, aux_task0.loss_heatmap: 0.7198, aux_task0.loss_bbox: 0.3062, aux_task1.loss_heatmap: 0.8639, aux_task1.loss_bbox: 0.3442, aux_task2.loss_heatmap: 0.9227, aux_task2.loss_bbox: 0.3739, aux_task3.loss_heatmap: 0.7347, aux_task3.loss_bbox: 0.3098, aux_task4.loss_heatmap: 0.5147, aux_task4.loss_bbox: 0.3101, aux_task5.loss_heatmap: 0.5642, aux_task5.loss_bbox: 0.3076, loss: 15.0195, grad_norm: 35.1264
2025-05-06 04:06:28,660 - mmdet - INFO - Epoch [8][550/773]	lr: 1.246e-04, eta: 3:43:56, time: 1.512, data_time: 0.004, memory: 8684, loss_cls: 0.5573, loss_bbox: 0.8793, d0.loss_cls: 0.5806, d0.loss_bbox: 1.0223, d1.loss_cls: 0.5627, d1.loss_bbox: 0.9160, d2.loss_cls: 0.5554, d2.loss_bbox: 0.8970, d3.loss_cls: 0.5539, d3.loss_bbox: 0.8853, d4.loss_cls: 0.5551, d4.loss_bbox: 0.8814, aux_task0.loss_heatmap: 0.7068, aux_task0.loss_bbox: 0.3119, aux_task1.loss_heatmap: 0.8829, aux_task1.loss_bbox: 0.3404, aux_task2.loss_heatmap: 0.8847, aux_task2.loss_bbox: 0.3682, aux_task3.loss_heatmap: 0.7557, aux_task3.loss_bbox: 0.3077, aux_task4.loss_heatmap: 0.5213, aux_task4.loss_bbox: 0.3016, aux_task5.loss_heatmap: 0.5397, aux_task5.loss_bbox: 0.3082, loss: 15.0755, grad_norm: 39.9515
2025-05-06 04:07:40,218 - mmdet - INFO - Epoch [8][600/773]	lr: 1.248e-04, eta: 3:42:47, time: 1.431, data_time: 0.005, memory: 8684, loss_cls: 0.5295, loss_bbox: 0.8763, d0.loss_cls: 0.5527, d0.loss_bbox: 1.0108, d1.loss_cls: 0.5342, d1.loss_bbox: 0.9078, d2.loss_cls: 0.5286, d2.loss_bbox: 0.8881, d3.loss_cls: 0.5276, d3.loss_bbox: 0.8794, d4.loss_cls: 0.5255, d4.loss_bbox: 0.8783, aux_task0.loss_heatmap: 0.6742, aux_task0.loss_bbox: 0.3119, aux_task1.loss_heatmap: 0.8981, aux_task1.loss_bbox: 0.3503, aux_task2.loss_heatmap: 0.8872, aux_task2.loss_bbox: 0.3649, aux_task3.loss_heatmap: 0.7725, aux_task3.loss_bbox: 0.3025, aux_task4.loss_heatmap: 0.4814, aux_task4.loss_bbox: 0.3116, aux_task5.loss_heatmap: 0.5365, aux_task5.loss_bbox: 0.3136, loss: 14.8436, grad_norm: 34.1899
2025-05-06 04:08:51,623 - mmdet - INFO - Epoch [8][650/773]	lr: 1.249e-04, eta: 3:41:37, time: 1.428, data_time: 0.004, memory: 8684, loss_cls: 0.5346, loss_bbox: 0.8755, d0.loss_cls: 0.5563, d0.loss_bbox: 1.0135, d1.loss_cls: 0.5390, d1.loss_bbox: 0.9121, d2.loss_cls: 0.5333, d2.loss_bbox: 0.8900, d3.loss_cls: 0.5324, d3.loss_bbox: 0.8810, d4.loss_cls: 0.5328, d4.loss_bbox: 0.8775, aux_task0.loss_heatmap: 0.7007, aux_task0.loss_bbox: 0.3103, aux_task1.loss_heatmap: 0.8421, aux_task1.loss_bbox: 0.3451, aux_task2.loss_heatmap: 0.8650, aux_task2.loss_bbox: 0.3631, aux_task3.loss_heatmap: 0.7487, aux_task3.loss_bbox: 0.3037, aux_task4.loss_heatmap: 0.5155, aux_task4.loss_bbox: 0.3005, aux_task5.loss_heatmap: 0.5379, aux_task5.loss_bbox: 0.3125, loss: 14.8233, grad_norm: 33.9918
2025-05-06 04:10:01,524 - mmdet - INFO - Epoch [8][700/773]	lr: 1.250e-04, eta: 3:40:25, time: 1.398, data_time: 0.005, memory: 8684, loss_cls: 0.5291, loss_bbox: 0.8796, d0.loss_cls: 0.5515, d0.loss_bbox: 1.0211, d1.loss_cls: 0.5319, d1.loss_bbox: 0.9169, d2.loss_cls: 0.5281, d2.loss_bbox: 0.8949, d3.loss_cls: 0.5262, d3.loss_bbox: 0.8829, d4.loss_cls: 0.5245, d4.loss_bbox: 0.8809, aux_task0.loss_heatmap: 0.6964, aux_task0.loss_bbox: 0.2968, aux_task1.loss_heatmap: 0.8530, aux_task1.loss_bbox: 0.3431, aux_task2.loss_heatmap: 0.9302, aux_task2.loss_bbox: 0.3649, aux_task3.loss_heatmap: 0.7203, aux_task3.loss_bbox: 0.2953, aux_task4.loss_heatmap: 0.4971, aux_task4.loss_bbox: 0.3003, aux_task5.loss_heatmap: 0.5419, aux_task5.loss_bbox: 0.3060, loss: 14.8129, grad_norm: 39.1993
2025-05-06 04:12:32,141 - mmdet - INFO - Epoch [8][750/773]	lr: 1.250e-04, eta: 3:41:15, time: 3.012, data_time: 1.625, memory: 8684, loss_cls: 0.5319, loss_bbox: 0.8869, d0.loss_cls: 0.5581, d0.loss_bbox: 1.0240, d1.loss_cls: 0.5394, d1.loss_bbox: 0.9218, d2.loss_cls: 0.5312, d2.loss_bbox: 0.9000, d3.loss_cls: 0.5300, d3.loss_bbox: 0.8903, d4.loss_cls: 0.5292, d4.loss_bbox: 0.8886, aux_task0.loss_heatmap: 0.6658, aux_task0.loss_bbox: 0.2993, aux_task1.loss_heatmap: 0.8629, aux_task1.loss_bbox: 0.3507, aux_task2.loss_heatmap: 0.8671, aux_task2.loss_bbox: 0.3669, aux_task3.loss_heatmap: 0.7116, aux_task3.loss_bbox: 0.2910, aux_task4.loss_heatmap: 0.4605, aux_task4.loss_bbox: 0.3080, aux_task5.loss_heatmap: 0.5683, aux_task5.loss_bbox: 0.3107, loss: 14.7940, grad_norm: 36.0943
2025-05-06 04:14:27,104 - mmdet - INFO - Saving checkpoint at 8 epochs
2025-05-06 04:15:54,230 - mmdet - INFO - Epoch [9][50/773]	lr: 1.250e-04, eta: 3:39:02, time: 1.705, data_time: 0.169, memory: 8684, loss_cls: 0.5388, loss_bbox: 0.8804, d0.loss_cls: 0.5583, d0.loss_bbox: 1.0170, d1.loss_cls: 0.5395, d1.loss_bbox: 0.9180, d2.loss_cls: 0.5356, d2.loss_bbox: 0.8952, d3.loss_cls: 0.5357, d3.loss_bbox: 0.8859, d4.loss_cls: 0.5366, d4.loss_bbox: 0.8819, aux_task0.loss_heatmap: 0.6754, aux_task0.loss_bbox: 0.2992, aux_task1.loss_heatmap: 0.8459, aux_task1.loss_bbox: 0.3380, aux_task2.loss_heatmap: 0.9505, aux_task2.loss_bbox: 0.3768, aux_task3.loss_heatmap: 0.7259, aux_task3.loss_bbox: 0.2947, aux_task4.loss_heatmap: 0.5527, aux_task4.loss_bbox: 0.3074, aux_task5.loss_heatmap: 0.4940, aux_task5.loss_bbox: 0.3030, loss: 14.8864, grad_norm: 33.9203
2025-05-06 04:17:03,827 - mmdet - INFO - Epoch [9][100/773]	lr: 1.250e-04, eta: 3:37:49, time: 1.391, data_time: 0.004, memory: 8684, loss_cls: 0.5274, loss_bbox: 0.8642, d0.loss_cls: 0.5535, d0.loss_bbox: 1.0030, d1.loss_cls: 0.5359, d1.loss_bbox: 0.9006, d2.loss_cls: 0.5297, d2.loss_bbox: 0.8806, d3.loss_cls: 0.5282, d3.loss_bbox: 0.8693, d4.loss_cls: 0.5251, d4.loss_bbox: 0.8679, aux_task0.loss_heatmap: 0.6411, aux_task0.loss_bbox: 0.2802, aux_task1.loss_heatmap: 0.9027, aux_task1.loss_bbox: 0.3458, aux_task2.loss_heatmap: 0.9451, aux_task2.loss_bbox: 0.3637, aux_task3.loss_heatmap: 0.7241, aux_task3.loss_bbox: 0.2868, aux_task4.loss_heatmap: 0.5122, aux_task4.loss_bbox: 0.3101, aux_task5.loss_heatmap: 0.5468, aux_task5.loss_bbox: 0.3031, loss: 14.7468, grad_norm: 35.1505
2025-05-06 04:18:18,520 - mmdet - INFO - Epoch [9][150/773]	lr: 1.249e-04, eta: 3:36:42, time: 1.494, data_time: 0.005, memory: 8684, loss_cls: 0.5298, loss_bbox: 0.8504, d0.loss_cls: 0.5527, d0.loss_bbox: 0.9797, d1.loss_cls: 0.5336, d1.loss_bbox: 0.8834, d2.loss_cls: 0.5299, d2.loss_bbox: 0.8634, d3.loss_cls: 0.5291, d3.loss_bbox: 0.8542, d4.loss_cls: 0.5283, d4.loss_bbox: 0.8515, aux_task0.loss_heatmap: 0.6682, aux_task0.loss_bbox: 0.2928, aux_task1.loss_heatmap: 0.8258, aux_task1.loss_bbox: 0.3325, aux_task2.loss_heatmap: 0.8382, aux_task2.loss_bbox: 0.3783, aux_task3.loss_heatmap: 0.6558, aux_task3.loss_bbox: 0.3042, aux_task4.loss_heatmap: 0.5410, aux_task4.loss_bbox: 0.3033, aux_task5.loss_heatmap: 0.5373, aux_task5.loss_bbox: 0.3009, loss: 14.4643, grad_norm: 37.7923
2025-05-06 04:19:33,865 - mmdet - INFO - Epoch [9][200/773]	lr: 1.249e-04, eta: 3:35:37, time: 1.508, data_time: 0.005, memory: 8684, loss_cls: 0.5114, loss_bbox: 0.8491, d0.loss_cls: 0.5387, d0.loss_bbox: 0.9909, d1.loss_cls: 0.5192, d1.loss_bbox: 0.8898, d2.loss_cls: 0.5110, d2.loss_bbox: 0.8672, d3.loss_cls: 0.5104, d3.loss_bbox: 0.8561, d4.loss_cls: 0.5088, d4.loss_bbox: 0.8525, aux_task0.loss_heatmap: 0.6211, aux_task0.loss_bbox: 0.2836, aux_task1.loss_heatmap: 0.8606, aux_task1.loss_bbox: 0.3224, aux_task2.loss_heatmap: 0.8888, aux_task2.loss_bbox: 0.3646, aux_task3.loss_heatmap: 0.6894, aux_task3.loss_bbox: 0.2902, aux_task4.loss_heatmap: 0.4868, aux_task4.loss_bbox: 0.3050, aux_task5.loss_heatmap: 0.5132, aux_task5.loss_bbox: 0.2949, loss: 14.3259, grad_norm: 38.1931
2025-05-06 04:20:45,309 - mmdet - INFO - Epoch [9][250/773]	lr: 1.248e-04, eta: 3:34:26, time: 1.429, data_time: 0.004, memory: 8684, loss_cls: 0.5249, loss_bbox: 0.8628, d0.loss_cls: 0.5467, d0.loss_bbox: 1.0009, d1.loss_cls: 0.5311, d1.loss_bbox: 0.8974, d2.loss_cls: 0.5280, d2.loss_bbox: 0.8762, d3.loss_cls: 0.5239, d3.loss_bbox: 0.8670, d4.loss_cls: 0.5237, d4.loss_bbox: 0.8647, aux_task0.loss_heatmap: 0.6950, aux_task0.loss_bbox: 0.3038, aux_task1.loss_heatmap: 0.8077, aux_task1.loss_bbox: 0.3376, aux_task2.loss_heatmap: 0.8159, aux_task2.loss_bbox: 0.3535, aux_task3.loss_heatmap: 0.6953, aux_task3.loss_bbox: 0.3030, aux_task4.loss_heatmap: 0.5343, aux_task4.loss_bbox: 0.3118, aux_task5.loss_heatmap: 0.5425, aux_task5.loss_bbox: 0.3022, loss: 14.5501, grad_norm: 37.1330
2025-05-06 04:21:55,790 - mmdet - INFO - Epoch [9][300/773]	lr: 1.247e-04, eta: 3:33:14, time: 1.410, data_time: 0.004, memory: 8684, loss_cls: 0.5033, loss_bbox: 0.8381, d0.loss_cls: 0.5265, d0.loss_bbox: 0.9684, d1.loss_cls: 0.5081, d1.loss_bbox: 0.8740, d2.loss_cls: 0.5023, d2.loss_bbox: 0.8516, d3.loss_cls: 0.5026, d3.loss_bbox: 0.8421, d4.loss_cls: 0.5018, d4.loss_bbox: 0.8391, aux_task0.loss_heatmap: 0.6384, aux_task0.loss_bbox: 0.2874, aux_task1.loss_heatmap: 0.8970, aux_task1.loss_bbox: 0.3378, aux_task2.loss_heatmap: 0.7962, aux_task2.loss_bbox: 0.3477, aux_task3.loss_heatmap: 0.6889, aux_task3.loss_bbox: 0.3012, aux_task4.loss_heatmap: 0.4789, aux_task4.loss_bbox: 0.3010, aux_task5.loss_heatmap: 0.5613, aux_task5.loss_bbox: 0.3031, loss: 14.1968, grad_norm: 35.4043
2025-05-06 04:23:06,407 - mmdet - INFO - Epoch [9][350/773]	lr: 1.246e-04, eta: 3:32:02, time: 1.412, data_time: 0.004, memory: 8684, loss_cls: 0.5143, loss_bbox: 0.8581, d0.loss_cls: 0.5362, d0.loss_bbox: 0.9954, d1.loss_cls: 0.5236, d1.loss_bbox: 0.8914, d2.loss_cls: 0.5174, d2.loss_bbox: 0.8730, d3.loss_cls: 0.5172, d3.loss_bbox: 0.8631, d4.loss_cls: 0.5160, d4.loss_bbox: 0.8597, aux_task0.loss_heatmap: 0.6400, aux_task0.loss_bbox: 0.2945, aux_task1.loss_heatmap: 0.9030, aux_task1.loss_bbox: 0.3474, aux_task2.loss_heatmap: 0.8684, aux_task2.loss_bbox: 0.3543, aux_task3.loss_heatmap: 0.7165, aux_task3.loss_bbox: 0.2940, aux_task4.loss_heatmap: 0.4907, aux_task4.loss_bbox: 0.3050, aux_task5.loss_heatmap: 0.5132, aux_task5.loss_bbox: 0.3001, loss: 14.4926, grad_norm: 35.6035
2025-05-06 04:24:15,837 - mmdet - INFO - Epoch [9][400/773]	lr: 1.244e-04, eta: 3:30:48, time: 1.388, data_time: 0.004, memory: 8684, loss_cls: 0.5228, loss_bbox: 0.8727, d0.loss_cls: 0.5473, d0.loss_bbox: 1.0093, d1.loss_cls: 0.5291, d1.loss_bbox: 0.9091, d2.loss_cls: 0.5264, d2.loss_bbox: 0.8864, d3.loss_cls: 0.5209, d3.loss_bbox: 0.8775, d4.loss_cls: 0.5215, d4.loss_bbox: 0.8736, aux_task0.loss_heatmap: 0.6650, aux_task0.loss_bbox: 0.2979, aux_task1.loss_heatmap: 0.8563, aux_task1.loss_bbox: 0.3459, aux_task2.loss_heatmap: 0.9021, aux_task2.loss_bbox: 0.3616, aux_task3.loss_heatmap: 0.7126, aux_task3.loss_bbox: 0.2973, aux_task4.loss_heatmap: 0.5048, aux_task4.loss_bbox: 0.3135, aux_task5.loss_heatmap: 0.5150, aux_task5.loss_bbox: 0.2993, loss: 14.6680, grad_norm: 35.5334
2025-05-06 04:25:26,829 - mmdet - INFO - Epoch [9][450/773]	lr: 1.243e-04, eta: 3:29:36, time: 1.419, data_time: 0.004, memory: 8684, loss_cls: 0.5171, loss_bbox: 0.8586, d0.loss_cls: 0.5389, d0.loss_bbox: 0.9922, d1.loss_cls: 0.5224, d1.loss_bbox: 0.8937, d2.loss_cls: 0.5202, d2.loss_bbox: 0.8691, d3.loss_cls: 0.5172, d3.loss_bbox: 0.8606, d4.loss_cls: 0.5158, d4.loss_bbox: 0.8583, aux_task0.loss_heatmap: 0.6649, aux_task0.loss_bbox: 0.2943, aux_task1.loss_heatmap: 0.8156, aux_task1.loss_bbox: 0.3393, aux_task2.loss_heatmap: 0.8782, aux_task2.loss_bbox: 0.3452, aux_task3.loss_heatmap: 0.6923, aux_task3.loss_bbox: 0.3036, aux_task4.loss_heatmap: 0.5075, aux_task4.loss_bbox: 0.3063, aux_task5.loss_heatmap: 0.5055, aux_task5.loss_bbox: 0.3022, loss: 14.4188, grad_norm: 36.6173
2025-05-06 04:26:36,999 - mmdet - INFO - Epoch [9][500/773]	lr: 1.241e-04, eta: 3:28:24, time: 1.404, data_time: 0.006, memory: 8684, loss_cls: 0.5234, loss_bbox: 0.8641, d0.loss_cls: 0.5481, d0.loss_bbox: 0.9996, d1.loss_cls: 0.5291, d1.loss_bbox: 0.8980, d2.loss_cls: 0.5243, d2.loss_bbox: 0.8775, d3.loss_cls: 0.5232, d3.loss_bbox: 0.8682, d4.loss_cls: 0.5222, d4.loss_bbox: 0.8662, aux_task0.loss_heatmap: 0.6666, aux_task0.loss_bbox: 0.2851, aux_task1.loss_heatmap: 0.8479, aux_task1.loss_bbox: 0.3426, aux_task2.loss_heatmap: 0.8734, aux_task2.loss_bbox: 0.3680, aux_task3.loss_heatmap: 0.6146, aux_task3.loss_bbox: 0.2981, aux_task4.loss_heatmap: 0.4815, aux_task4.loss_bbox: 0.3006, aux_task5.loss_heatmap: 0.5455, aux_task5.loss_bbox: 0.3077, loss: 14.4755, grad_norm: 34.4866
2025-05-06 04:27:47,559 - mmdet - INFO - Epoch [9][550/773]	lr: 1.239e-04, eta: 3:27:11, time: 1.411, data_time: 0.005, memory: 8684, loss_cls: 0.4990, loss_bbox: 0.8373, d0.loss_cls: 0.5251, d0.loss_bbox: 0.9650, d1.loss_cls: 0.5072, d1.loss_bbox: 0.8695, d2.loss_cls: 0.4996, d2.loss_bbox: 0.8503, d3.loss_cls: 0.4987, d3.loss_bbox: 0.8427, d4.loss_cls: 0.4979, d4.loss_bbox: 0.8400, aux_task0.loss_heatmap: 0.6773, aux_task0.loss_bbox: 0.2918, aux_task1.loss_heatmap: 0.8209, aux_task1.loss_bbox: 0.3279, aux_task2.loss_heatmap: 0.8011, aux_task2.loss_bbox: 0.3693, aux_task3.loss_heatmap: 0.7403, aux_task3.loss_bbox: 0.3027, aux_task4.loss_heatmap: 0.4669, aux_task4.loss_bbox: 0.2932, aux_task5.loss_heatmap: 0.4768, aux_task5.loss_bbox: 0.3019, loss: 14.1025, grad_norm: 36.1748
2025-05-06 04:28:59,256 - mmdet - INFO - Epoch [9][600/773]	lr: 1.237e-04, eta: 3:26:01, time: 1.433, data_time: 0.005, memory: 8684, loss_cls: 0.5002, loss_bbox: 0.8597, d0.loss_cls: 0.5299, d0.loss_bbox: 0.9922, d1.loss_cls: 0.5075, d1.loss_bbox: 0.8946, d2.loss_cls: 0.5023, d2.loss_bbox: 0.8717, d3.loss_cls: 0.4993, d3.loss_bbox: 0.8641, d4.loss_cls: 0.4988, d4.loss_bbox: 0.8624, aux_task0.loss_heatmap: 0.6707, aux_task0.loss_bbox: 0.2884, aux_task1.loss_heatmap: 0.8441, aux_task1.loss_bbox: 0.3388, aux_task2.loss_heatmap: 0.8045, aux_task2.loss_bbox: 0.3655, aux_task3.loss_heatmap: 0.6922, aux_task3.loss_bbox: 0.2984, aux_task4.loss_heatmap: 0.4626, aux_task4.loss_bbox: 0.3017, aux_task5.loss_heatmap: 0.5177, aux_task5.loss_bbox: 0.3075, loss: 14.2749, grad_norm: 34.3356
2025-05-06 04:30:13,039 - mmdet - INFO - Epoch [9][650/773]	lr: 1.235e-04, eta: 3:24:53, time: 1.476, data_time: 0.006, memory: 8684, loss_cls: 0.4943, loss_bbox: 0.8404, d0.loss_cls: 0.5257, d0.loss_bbox: 0.9733, d1.loss_cls: 0.5032, d1.loss_bbox: 0.8753, d2.loss_cls: 0.4950, d2.loss_bbox: 0.8551, d3.loss_cls: 0.4932, d3.loss_bbox: 0.8459, d4.loss_cls: 0.4928, d4.loss_bbox: 0.8426, aux_task0.loss_heatmap: 0.6839, aux_task0.loss_bbox: 0.2939, aux_task1.loss_heatmap: 0.8090, aux_task1.loss_bbox: 0.3302, aux_task2.loss_heatmap: 0.8164, aux_task2.loss_bbox: 0.3513, aux_task3.loss_heatmap: 0.7020, aux_task3.loss_bbox: 0.2911, aux_task4.loss_heatmap: 0.4809, aux_task4.loss_bbox: 0.2936, aux_task5.loss_heatmap: 0.5104, aux_task5.loss_bbox: 0.3030, loss: 14.1024, grad_norm: 32.5846
2025-05-06 04:31:26,807 - mmdet - INFO - Epoch [9][700/773]	lr: 1.233e-04, eta: 3:23:45, time: 1.477, data_time: 0.006, memory: 8684, loss_cls: 0.4934, loss_bbox: 0.8454, d0.loss_cls: 0.5196, d0.loss_bbox: 0.9656, d1.loss_cls: 0.5006, d1.loss_bbox: 0.8774, d2.loss_cls: 0.4932, d2.loss_bbox: 0.8602, d3.loss_cls: 0.4908, d3.loss_bbox: 0.8510, d4.loss_cls: 0.4909, d4.loss_bbox: 0.8481, aux_task0.loss_heatmap: 0.6563, aux_task0.loss_bbox: 0.2919, aux_task1.loss_heatmap: 0.8125, aux_task1.loss_bbox: 0.3289, aux_task2.loss_heatmap: 0.8575, aux_task2.loss_bbox: 0.3546, aux_task3.loss_heatmap: 0.7056, aux_task3.loss_bbox: 0.2974, aux_task4.loss_heatmap: 0.4539, aux_task4.loss_bbox: 0.2868, aux_task5.loss_heatmap: 0.5191, aux_task5.loss_bbox: 0.3008, loss: 14.1012, grad_norm: 32.8900
2025-05-06 04:32:39,757 - mmdet - INFO - Epoch [9][750/773]	lr: 1.230e-04, eta: 3:22:35, time: 1.459, data_time: 0.005, memory: 8684, loss_cls: 0.4917, loss_bbox: 0.8456, d0.loss_cls: 0.5216, d0.loss_bbox: 0.9731, d1.loss_cls: 0.5008, d1.loss_bbox: 0.8795, d2.loss_cls: 0.4963, d2.loss_bbox: 0.8584, d3.loss_cls: 0.4936, d3.loss_bbox: 0.8510, d4.loss_cls: 0.4907, d4.loss_bbox: 0.8481, aux_task0.loss_heatmap: 0.6371, aux_task0.loss_bbox: 0.2849, aux_task1.loss_heatmap: 0.8234, aux_task1.loss_bbox: 0.3456, aux_task2.loss_heatmap: 0.8403, aux_task2.loss_bbox: 0.3644, aux_task3.loss_heatmap: 0.7375, aux_task3.loss_bbox: 0.2899, aux_task4.loss_heatmap: 0.4633, aux_task4.loss_bbox: 0.2990, aux_task5.loss_heatmap: 0.5007, aux_task5.loss_bbox: 0.3050, loss: 14.1413, grad_norm: 32.6543
2025-05-06 04:35:15,317 - mmdet - INFO - Saving checkpoint at 9 epochs
2025-05-06 04:36:34,194 - mmdet - INFO - Epoch [10][50/773]	lr: 1.226e-04, eta: 3:20:19, time: 1.543, data_time: 0.182, memory: 8684, loss_cls: 0.5101, loss_bbox: 0.8570, d0.loss_cls: 0.5319, d0.loss_bbox: 0.9810, d1.loss_cls: 0.5144, d1.loss_bbox: 0.8866, d2.loss_cls: 0.5091, d2.loss_bbox: 0.8709, d3.loss_cls: 0.5093, d3.loss_bbox: 0.8625, d4.loss_cls: 0.5086, d4.loss_bbox: 0.8611, aux_task0.loss_heatmap: 0.6306, aux_task0.loss_bbox: 0.2817, aux_task1.loss_heatmap: 0.8449, aux_task1.loss_bbox: 0.3353, aux_task2.loss_heatmap: 0.8907, aux_task2.loss_bbox: 0.3686, aux_task3.loss_heatmap: 0.6883, aux_task3.loss_bbox: 0.2762, aux_task4.loss_heatmap: 0.5058, aux_task4.loss_bbox: 0.2966, aux_task5.loss_heatmap: 0.4751, aux_task5.loss_bbox: 0.2974, loss: 14.2938, grad_norm: 31.9661
2025-05-06 04:37:43,406 - mmdet - INFO - Epoch [10][100/773]	lr: 1.223e-04, eta: 3:19:06, time: 1.384, data_time: 0.005, memory: 8684, loss_cls: 0.5077, loss_bbox: 0.8598, d0.loss_cls: 0.5306, d0.loss_bbox: 0.9855, d1.loss_cls: 0.5114, d1.loss_bbox: 0.8927, d2.loss_cls: 0.5074, d2.loss_bbox: 0.8750, d3.loss_cls: 0.5069, d3.loss_bbox: 0.8666, d4.loss_cls: 0.5050, d4.loss_bbox: 0.8654, aux_task0.loss_heatmap: 0.6492, aux_task0.loss_bbox: 0.2842, aux_task1.loss_heatmap: 0.8749, aux_task1.loss_bbox: 0.3442, aux_task2.loss_heatmap: 0.9238, aux_task2.loss_bbox: 0.3611, aux_task3.loss_heatmap: 0.6721, aux_task3.loss_bbox: 0.2805, aux_task4.loss_heatmap: 0.5056, aux_task4.loss_bbox: 0.2986, aux_task5.loss_heatmap: 0.5071, aux_task5.loss_bbox: 0.3036, loss: 14.4192, grad_norm: 32.4041
2025-05-06 04:38:53,118 - mmdet - INFO - Epoch [10][150/773]	lr: 1.220e-04, eta: 3:17:53, time: 1.394, data_time: 0.004, memory: 8684, loss_cls: 0.5016, loss_bbox: 0.8283, d0.loss_cls: 0.5253, d0.loss_bbox: 0.9651, d1.loss_cls: 0.5077, d1.loss_bbox: 0.8682, d2.loss_cls: 0.5016, d2.loss_bbox: 0.8480, d3.loss_cls: 0.4995, d3.loss_bbox: 0.8402, d4.loss_cls: 0.4996, d4.loss_bbox: 0.8354, aux_task0.loss_heatmap: 0.6226, aux_task0.loss_bbox: 0.2717, aux_task1.loss_heatmap: 0.8157, aux_task1.loss_bbox: 0.3318, aux_task2.loss_heatmap: 0.8274, aux_task2.loss_bbox: 0.3688, aux_task3.loss_heatmap: 0.6650, aux_task3.loss_bbox: 0.2911, aux_task4.loss_heatmap: 0.5008, aux_task4.loss_bbox: 0.2923, aux_task5.loss_heatmap: 0.5079, aux_task5.loss_bbox: 0.2932, loss: 14.0087, grad_norm: 33.4814
2025-05-06 04:40:02,513 - mmdet - INFO - Epoch [10][200/773]	lr: 1.216e-04, eta: 3:16:40, time: 1.388, data_time: 0.005, memory: 8684, loss_cls: 0.5092, loss_bbox: 0.8342, d0.loss_cls: 0.5343, d0.loss_bbox: 0.9610, d1.loss_cls: 0.5174, d1.loss_bbox: 0.8694, d2.loss_cls: 0.5094, d2.loss_bbox: 0.8536, d3.loss_cls: 0.5093, d3.loss_bbox: 0.8434, d4.loss_cls: 0.5078, d4.loss_bbox: 0.8408, aux_task0.loss_heatmap: 0.6659, aux_task0.loss_bbox: 0.2793, aux_task1.loss_heatmap: 0.8259, aux_task1.loss_bbox: 0.3170, aux_task2.loss_heatmap: 0.8181, aux_task2.loss_bbox: 0.3605, aux_task3.loss_heatmap: 0.6425, aux_task3.loss_bbox: 0.2832, aux_task4.loss_heatmap: 0.5176, aux_task4.loss_bbox: 0.3004, aux_task5.loss_heatmap: 0.5367, aux_task5.loss_bbox: 0.3026, loss: 14.1395, grad_norm: 31.7221
2025-05-06 04:41:10,986 - mmdet - INFO - Epoch [10][250/773]	lr: 1.213e-04, eta: 3:15:26, time: 1.369, data_time: 0.004, memory: 8684, loss_cls: 0.4896, loss_bbox: 0.8241, d0.loss_cls: 0.5167, d0.loss_bbox: 0.9514, d1.loss_cls: 0.4957, d1.loss_bbox: 0.8636, d2.loss_cls: 0.4898, d2.loss_bbox: 0.8438, d3.loss_cls: 0.4878, d3.loss_bbox: 0.8341, d4.loss_cls: 0.4878, d4.loss_bbox: 0.8306, aux_task0.loss_heatmap: 0.6264, aux_task0.loss_bbox: 0.2752, aux_task1.loss_heatmap: 0.7846, aux_task1.loss_bbox: 0.3360, aux_task2.loss_heatmap: 0.7999, aux_task2.loss_bbox: 0.3426, aux_task3.loss_heatmap: 0.6570, aux_task3.loss_bbox: 0.2911, aux_task4.loss_heatmap: 0.5106, aux_task4.loss_bbox: 0.3003, aux_task5.loss_heatmap: 0.5064, aux_task5.loss_bbox: 0.2969, loss: 13.8420, grad_norm: 31.9667
2025-05-06 04:42:18,994 - mmdet - INFO - Epoch [10][300/773]	lr: 1.209e-04, eta: 3:14:11, time: 1.360, data_time: 0.006, memory: 8684, loss_cls: 0.4883, loss_bbox: 0.8411, d0.loss_cls: 0.5140, d0.loss_bbox: 0.9680, d1.loss_cls: 0.4982, d1.loss_bbox: 0.8774, d2.loss_cls: 0.4899, d2.loss_bbox: 0.8600, d3.loss_cls: 0.4870, d3.loss_bbox: 0.8516, d4.loss_cls: 0.4873, d4.loss_bbox: 0.8495, aux_task0.loss_heatmap: 0.6381, aux_task0.loss_bbox: 0.2763, aux_task1.loss_heatmap: 0.8685, aux_task1.loss_bbox: 0.3291, aux_task2.loss_heatmap: 0.8034, aux_task2.loss_bbox: 0.3409, aux_task3.loss_heatmap: 0.7096, aux_task3.loss_bbox: 0.2894, aux_task4.loss_heatmap: 0.4621, aux_task4.loss_bbox: 0.2956, aux_task5.loss_heatmap: 0.5608, aux_task5.loss_bbox: 0.2974, loss: 14.0838, grad_norm: 35.7236
2025-05-06 04:43:26,668 - mmdet - INFO - Epoch [10][350/773]	lr: 1.205e-04, eta: 3:12:57, time: 1.353, data_time: 0.004, memory: 8684, loss_cls: 0.4840, loss_bbox: 0.8307, d0.loss_cls: 0.5088, d0.loss_bbox: 0.9590, d1.loss_cls: 0.4904, d1.loss_bbox: 0.8654, d2.loss_cls: 0.4855, d2.loss_bbox: 0.8496, d3.loss_cls: 0.4831, d3.loss_bbox: 0.8420, d4.loss_cls: 0.4823, d4.loss_bbox: 0.8395, aux_task0.loss_heatmap: 0.6059, aux_task0.loss_bbox: 0.2684, aux_task1.loss_heatmap: 0.8666, aux_task1.loss_bbox: 0.3433, aux_task2.loss_heatmap: 0.8192, aux_task2.loss_bbox: 0.3469, aux_task3.loss_heatmap: 0.5946, aux_task3.loss_bbox: 0.2928, aux_task4.loss_heatmap: 0.4605, aux_task4.loss_bbox: 0.2924, aux_task5.loss_heatmap: 0.4830, aux_task5.loss_bbox: 0.2929, loss: 13.7869, grad_norm: 35.3166
2025-05-06 04:44:36,051 - mmdet - INFO - Epoch [10][400/773]	lr: 1.201e-04, eta: 3:11:44, time: 1.388, data_time: 0.004, memory: 8684, loss_cls: 0.4880, loss_bbox: 0.8422, d0.loss_cls: 0.5153, d0.loss_bbox: 0.9802, d1.loss_cls: 0.4937, d1.loss_bbox: 0.8879, d2.loss_cls: 0.4864, d2.loss_bbox: 0.8673, d3.loss_cls: 0.4846, d3.loss_bbox: 0.8582, d4.loss_cls: 0.4849, d4.loss_bbox: 0.8534, aux_task0.loss_heatmap: 0.6371, aux_task0.loss_bbox: 0.2876, aux_task1.loss_heatmap: 0.8370, aux_task1.loss_bbox: 0.3365, aux_task2.loss_heatmap: 0.8382, aux_task2.loss_bbox: 0.3523, aux_task3.loss_heatmap: 0.6397, aux_task3.loss_bbox: 0.2952, aux_task4.loss_heatmap: 0.4652, aux_task4.loss_bbox: 0.3044, aux_task5.loss_heatmap: 0.5071, aux_task5.loss_bbox: 0.2974, loss: 14.0403, grad_norm: 33.9169
2025-05-06 04:45:46,960 - mmdet - INFO - Epoch [10][450/773]	lr: 1.197e-04, eta: 3:10:33, time: 1.417, data_time: 0.004, memory: 8684, loss_cls: 0.4840, loss_bbox: 0.8223, d0.loss_cls: 0.5124, d0.loss_bbox: 0.9439, d1.loss_cls: 0.4906, d1.loss_bbox: 0.8563, d2.loss_cls: 0.4833, d2.loss_bbox: 0.8407, d3.loss_cls: 0.4832, d3.loss_bbox: 0.8317, d4.loss_cls: 0.4817, d4.loss_bbox: 0.8293, aux_task0.loss_heatmap: 0.6300, aux_task0.loss_bbox: 0.2730, aux_task1.loss_heatmap: 0.8004, aux_task1.loss_bbox: 0.3289, aux_task2.loss_heatmap: 0.8266, aux_task2.loss_bbox: 0.3404, aux_task3.loss_heatmap: 0.6659, aux_task3.loss_bbox: 0.2950, aux_task4.loss_heatmap: 0.4959, aux_task4.loss_bbox: 0.2962, aux_task5.loss_heatmap: 0.4762, aux_task5.loss_bbox: 0.2966, loss: 13.7846, grad_norm: 33.2255
2025-05-06 04:46:56,119 - mmdet - INFO - Epoch [10][500/773]	lr: 1.193e-04, eta: 3:09:20, time: 1.384, data_time: 0.005, memory: 8684, loss_cls: 0.4794, loss_bbox: 0.8260, d0.loss_cls: 0.5041, d0.loss_bbox: 0.9541, d1.loss_cls: 0.4873, d1.loss_bbox: 0.8649, d2.loss_cls: 0.4840, d2.loss_bbox: 0.8465, d3.loss_cls: 0.4818, d3.loss_bbox: 0.8376, d4.loss_cls: 0.4785, d4.loss_bbox: 0.8359, aux_task0.loss_heatmap: 0.6166, aux_task0.loss_bbox: 0.2761, aux_task1.loss_heatmap: 0.8119, aux_task1.loss_bbox: 0.3387, aux_task2.loss_heatmap: 0.8196, aux_task2.loss_bbox: 0.3615, aux_task3.loss_heatmap: 0.6356, aux_task3.loss_bbox: 0.3024, aux_task4.loss_heatmap: 0.4513, aux_task4.loss_bbox: 0.2907, aux_task5.loss_heatmap: 0.4774, aux_task5.loss_bbox: 0.2965, loss: 13.7584, grad_norm: 34.1683
2025-05-06 04:48:09,924 - mmdet - INFO - Epoch [10][550/773]	lr: 1.188e-04, eta: 3:08:12, time: 1.476, data_time: 0.004, memory: 8684, loss_cls: 0.4742, loss_bbox: 0.8157, d0.loss_cls: 0.5010, d0.loss_bbox: 0.9425, d1.loss_cls: 0.4822, d1.loss_bbox: 0.8533, d2.loss_cls: 0.4760, d2.loss_bbox: 0.8384, d3.loss_cls: 0.4725, d3.loss_bbox: 0.8301, d4.loss_cls: 0.4725, d4.loss_bbox: 0.8271, aux_task0.loss_heatmap: 0.6163, aux_task0.loss_bbox: 0.2719, aux_task1.loss_heatmap: 0.8224, aux_task1.loss_bbox: 0.3275, aux_task2.loss_heatmap: 0.7982, aux_task2.loss_bbox: 0.3595, aux_task3.loss_heatmap: 0.6534, aux_task3.loss_bbox: 0.2937, aux_task4.loss_heatmap: 0.4487, aux_task4.loss_bbox: 0.2843, aux_task5.loss_heatmap: 0.4706, aux_task5.loss_bbox: 0.3057, loss: 13.6378, grad_norm: 36.1205
2025-05-06 04:49:18,321 - mmdet - INFO - Epoch [10][600/773]	lr: 1.184e-04, eta: 3:06:58, time: 1.368, data_time: 0.005, memory: 8684, loss_cls: 0.4693, loss_bbox: 0.8128, d0.loss_cls: 0.4957, d0.loss_bbox: 0.9465, d1.loss_cls: 0.4770, d1.loss_bbox: 0.8572, d2.loss_cls: 0.4681, d2.loss_bbox: 0.8364, d3.loss_cls: 0.4670, d3.loss_bbox: 0.8254, d4.loss_cls: 0.4666, d4.loss_bbox: 0.8245, aux_task0.loss_heatmap: 0.6185, aux_task0.loss_bbox: 0.2607, aux_task1.loss_heatmap: 0.8205, aux_task1.loss_bbox: 0.3227, aux_task2.loss_heatmap: 0.7661, aux_task2.loss_bbox: 0.3478, aux_task3.loss_heatmap: 0.6720, aux_task3.loss_bbox: 0.2877, aux_task4.loss_heatmap: 0.4367, aux_task4.loss_bbox: 0.2924, aux_task5.loss_heatmap: 0.4668, aux_task5.loss_bbox: 0.2976, loss: 13.5358, grad_norm: 33.3039
2025-05-06 04:50:30,456 - mmdet - INFO - Epoch [10][650/773]	lr: 1.179e-04, eta: 3:05:48, time: 1.442, data_time: 0.005, memory: 8684, loss_cls: 0.4824, loss_bbox: 0.8115, d0.loss_cls: 0.5048, d0.loss_bbox: 0.9437, d1.loss_cls: 0.4866, d1.loss_bbox: 0.8525, d2.loss_cls: 0.4804, d2.loss_bbox: 0.8371, d3.loss_cls: 0.4809, d3.loss_bbox: 0.8268, d4.loss_cls: 0.4803, d4.loss_bbox: 0.8227, aux_task0.loss_heatmap: 0.6393, aux_task0.loss_bbox: 0.2623, aux_task1.loss_heatmap: 0.7897, aux_task1.loss_bbox: 0.3231, aux_task2.loss_heatmap: 0.7729, aux_task2.loss_bbox: 0.3401, aux_task3.loss_heatmap: 0.6884, aux_task3.loss_bbox: 0.2999, aux_task4.loss_heatmap: 0.4569, aux_task4.loss_bbox: 0.2846, aux_task5.loss_heatmap: 0.5054, aux_task5.loss_bbox: 0.3045, loss: 13.6769, grad_norm: 31.7655
2025-05-06 04:52:42,310 - mmdet - INFO - Epoch [10][700/773]	lr: 1.174e-04, eta: 3:05:39, time: 2.638, data_time: 0.005, memory: 8684, loss_cls: 0.4670, loss_bbox: 0.8133, d0.loss_cls: 0.4955, d0.loss_bbox: 0.9480, d1.loss_cls: 0.4767, d1.loss_bbox: 0.8568, d2.loss_cls: 0.4679, d2.loss_bbox: 0.8394, d3.loss_cls: 0.4675, d3.loss_bbox: 0.8265, d4.loss_cls: 0.4642, d4.loss_bbox: 0.8243, aux_task0.loss_heatmap: 0.6170, aux_task0.loss_bbox: 0.2710, aux_task1.loss_heatmap: 0.7661, aux_task1.loss_bbox: 0.3210, aux_task2.loss_heatmap: 0.8382, aux_task2.loss_bbox: 0.3505, aux_task3.loss_heatmap: 0.6755, aux_task3.loss_bbox: 0.2948, aux_task4.loss_heatmap: 0.4304, aux_task4.loss_bbox: 0.2811, aux_task5.loss_heatmap: 0.5002, aux_task5.loss_bbox: 0.3045, loss: 13.5973, grad_norm: 31.1043
2025-05-06 04:54:01,253 - mmdet - INFO - Epoch [10][750/773]	lr: 1.169e-04, eta: 3:04:36, time: 1.579, data_time: 0.004, memory: 8684, loss_cls: 0.4765, loss_bbox: 0.8204, d0.loss_cls: 0.5032, d0.loss_bbox: 0.9548, d1.loss_cls: 0.4841, d1.loss_bbox: 0.8652, d2.loss_cls: 0.4786, d2.loss_bbox: 0.8466, d3.loss_cls: 0.4748, d3.loss_bbox: 0.8323, d4.loss_cls: 0.4733, d4.loss_bbox: 0.8290, aux_task0.loss_heatmap: 0.6279, aux_task0.loss_bbox: 0.2612, aux_task1.loss_heatmap: 0.7908, aux_task1.loss_bbox: 0.3336, aux_task2.loss_heatmap: 0.8144, aux_task2.loss_bbox: 0.3626, aux_task3.loss_heatmap: 0.6617, aux_task3.loss_bbox: 0.2787, aux_task4.loss_heatmap: 0.4489, aux_task4.loss_bbox: 0.2897, aux_task5.loss_heatmap: 0.4909, aux_task5.loss_bbox: 0.3056, loss: 13.7046, grad_norm: 32.6028
2025-05-06 04:54:34,043 - mmdet - INFO - Saving checkpoint at 10 epochs
2025-05-06 05:22:00,045 - mmdet - INFO - Exp name: lidar_0075v_900q_hednet_hednet_split40_256.py
2025-05-06 05:22:02,204 - mmdet - INFO - Epoch(val) [10][1505]	pts_bbox_NuScenes/car_AP_dist_0.5: 0.3935, pts_bbox_NuScenes/car_AP_dist_1.0: 0.5506, pts_bbox_NuScenes/car_AP_dist_2.0: 0.6459, pts_bbox_NuScenes/car_AP_dist_4.0: 0.7036, pts_bbox_NuScenes/car_trans_err: 0.3330, pts_bbox_NuScenes/car_scale_err: 0.1890, pts_bbox_NuScenes/car_orient_err: 0.9375, pts_bbox_NuScenes/car_vel_err: 1.1505, pts_bbox_NuScenes/car_attr_err: 0.3821, pts_bbox_NuScenes/mATE: 0.5155, pts_bbox_NuScenes/mASE: 0.3186, pts_bbox_NuScenes/mAOE: 1.3184, pts_bbox_NuScenes/mAVE: 1.0936, pts_bbox_NuScenes/mAAE: 0.4391, pts_bbox_NuScenes/truck_AP_dist_0.5: 0.0660, pts_bbox_NuScenes/truck_AP_dist_1.0: 0.1671, pts_bbox_NuScenes/truck_AP_dist_2.0: 0.2569, pts_bbox_NuScenes/truck_AP_dist_4.0: 0.3134, pts_bbox_NuScenes/truck_trans_err: 0.5632, pts_bbox_NuScenes/truck_scale_err: 0.2635, pts_bbox_NuScenes/truck_orient_err: 1.2960, pts_bbox_NuScenes/truck_vel_err: 1.0736, pts_bbox_NuScenes/truck_attr_err: 0.3956, pts_bbox_NuScenes/construction_vehicle_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/construction_vehicle_AP_dist_1.0: 0.0021, pts_bbox_NuScenes/construction_vehicle_AP_dist_2.0: 0.0374, pts_bbox_NuScenes/construction_vehicle_AP_dist_4.0: 0.0751, pts_bbox_NuScenes/construction_vehicle_trans_err: 0.9082, pts_bbox_NuScenes/construction_vehicle_scale_err: 0.4752, pts_bbox_NuScenes/construction_vehicle_orient_err: 1.4731, pts_bbox_NuScenes/construction_vehicle_vel_err: 0.1313, pts_bbox_NuScenes/construction_vehicle_attr_err: 0.3154, pts_bbox_NuScenes/bus_AP_dist_0.5: 0.0647, pts_bbox_NuScenes/bus_AP_dist_1.0: 0.2175, pts_bbox_NuScenes/bus_AP_dist_2.0: 0.4131, pts_bbox_NuScenes/bus_AP_dist_4.0: 0.4901, pts_bbox_NuScenes/bus_trans_err: 0.6659, pts_bbox_NuScenes/bus_scale_err: 0.2616, pts_bbox_NuScenes/bus_orient_err: 1.7003, pts_bbox_NuScenes/bus_vel_err: 2.3651, pts_bbox_NuScenes/bus_attr_err: 0.6544, pts_bbox_NuScenes/trailer_AP_dist_0.5: 0.0175, pts_bbox_NuScenes/trailer_AP_dist_1.0: 0.0786, pts_bbox_NuScenes/trailer_AP_dist_2.0: 0.1152, pts_bbox_NuScenes/trailer_AP_dist_4.0: 0.1500, pts_bbox_NuScenes/trailer_trans_err: 0.6460, pts_bbox_NuScenes/trailer_scale_err: 0.2996, pts_bbox_NuScenes/trailer_orient_err: 1.5792, pts_bbox_NuScenes/trailer_vel_err: 0.4730, pts_bbox_NuScenes/trailer_attr_err: 0.2716, pts_bbox_NuScenes/barrier_AP_dist_0.5: 0.0756, pts_bbox_NuScenes/barrier_AP_dist_1.0: 0.2555, pts_bbox_NuScenes/barrier_AP_dist_2.0: 0.4344, pts_bbox_NuScenes/barrier_AP_dist_4.0: 0.4990, pts_bbox_NuScenes/barrier_trans_err: 0.6389, pts_bbox_NuScenes/barrier_scale_err: 0.3375, pts_bbox_NuScenes/barrier_orient_err: 0.6854, pts_bbox_NuScenes/barrier_vel_err: nan, pts_bbox_NuScenes/barrier_attr_err: nan, pts_bbox_NuScenes/motorcycle_AP_dist_0.5: 0.0826, pts_bbox_NuScenes/motorcycle_AP_dist_1.0: 0.1224, pts_bbox_NuScenes/motorcycle_AP_dist_2.0: 0.1427, pts_bbox_NuScenes/motorcycle_AP_dist_4.0: 0.1525, pts_bbox_NuScenes/motorcycle_trans_err: 0.3580, pts_bbox_NuScenes/motorcycle_scale_err: 0.2709, pts_bbox_NuScenes/motorcycle_orient_err: 1.3801, pts_bbox_NuScenes/motorcycle_vel_err: 1.7343, pts_bbox_NuScenes/motorcycle_attr_err: 0.5016, pts_bbox_NuScenes/bicycle_AP_dist_0.5: 0.0014, pts_bbox_NuScenes/bicycle_AP_dist_1.0: 0.0030, pts_bbox_NuScenes/bicycle_AP_dist_2.0: 0.0037, pts_bbox_NuScenes/bicycle_AP_dist_4.0: 0.0051, pts_bbox_NuScenes/bicycle_trans_err: 0.3513, pts_bbox_NuScenes/bicycle_scale_err: 0.3515, pts_bbox_NuScenes/bicycle_orient_err: 1.3953, pts_bbox_NuScenes/bicycle_vel_err: 0.8548, pts_bbox_NuScenes/bicycle_attr_err: 0.1843, pts_bbox_NuScenes/pedestrian_AP_dist_0.5: 0.3738, pts_bbox_NuScenes/pedestrian_AP_dist_1.0: 0.5695, pts_bbox_NuScenes/pedestrian_AP_dist_2.0: 0.6187, pts_bbox_NuScenes/pedestrian_AP_dist_4.0: 0.6529, pts_bbox_NuScenes/pedestrian_trans_err: 0.4032, pts_bbox_NuScenes/pedestrian_scale_err: 0.2942, pts_bbox_NuScenes/pedestrian_orient_err: 1.4184, pts_bbox_NuScenes/pedestrian_vel_err: 0.9665, pts_bbox_NuScenes/pedestrian_attr_err: 0.8082, pts_bbox_NuScenes/traffic_cone_AP_dist_0.5: 0.3077, pts_bbox_NuScenes/traffic_cone_AP_dist_1.0: 0.3529, pts_bbox_NuScenes/traffic_cone_AP_dist_2.0: 0.3877, pts_bbox_NuScenes/traffic_cone_AP_dist_4.0: 0.4387, pts_bbox_NuScenes/traffic_cone_trans_err: 0.2877, pts_bbox_NuScenes/traffic_cone_scale_err: 0.4428, pts_bbox_NuScenes/traffic_cone_orient_err: nan, pts_bbox_NuScenes/traffic_cone_vel_err: nan, pts_bbox_NuScenes/traffic_cone_attr_err: nan, pts_bbox_NuScenes/NDS: 0.3007, pts_bbox_NuScenes/mAP: 0.2560
2025-05-06 05:23:22,310 - mmdet - INFO - Epoch [11][50/773]	lr: 1.161e-04, eta: 3:02:27, time: 1.600, data_time: 0.172, memory: 8684, loss_cls: 0.4863, loss_bbox: 0.8171, d0.loss_cls: 0.5058, d0.loss_bbox: 0.9405, d1.loss_cls: 0.4894, d1.loss_bbox: 0.8553, d2.loss_cls: 0.4862, d2.loss_bbox: 0.8400, d3.loss_cls: 0.4863, d3.loss_bbox: 0.8274, d4.loss_cls: 0.4846, d4.loss_bbox: 0.8221, aux_task0.loss_heatmap: 0.6242, aux_task0.loss_bbox: 0.2670, aux_task1.loss_heatmap: 0.7881, aux_task1.loss_bbox: 0.3179, aux_task2.loss_heatmap: 0.8597, aux_task2.loss_bbox: 0.3614, aux_task3.loss_heatmap: 0.6527, aux_task3.loss_bbox: 0.2728, aux_task4.loss_heatmap: 0.5028, aux_task4.loss_bbox: 0.2856, aux_task5.loss_heatmap: 0.4929, aux_task5.loss_bbox: 0.2937, loss: 13.7598, grad_norm: 30.4298
2025-05-06 05:24:36,261 - mmdet - INFO - Epoch [11][100/773]	lr: 1.155e-04, eta: 3:01:19, time: 1.479, data_time: 0.006, memory: 8684, loss_cls: 0.4823, loss_bbox: 0.8336, d0.loss_cls: 0.5059, d0.loss_bbox: 0.9510, d1.loss_cls: 0.4886, d1.loss_bbox: 0.8700, d2.loss_cls: 0.4828, d2.loss_bbox: 0.8559, d3.loss_cls: 0.4827, d3.loss_bbox: 0.8421, d4.loss_cls: 0.4804, d4.loss_bbox: 0.8373, aux_task0.loss_heatmap: 0.6213, aux_task0.loss_bbox: 0.2667, aux_task1.loss_heatmap: 0.8324, aux_task1.loss_bbox: 0.3295, aux_task2.loss_heatmap: 0.8833, aux_task2.loss_bbox: 0.3578, aux_task3.loss_heatmap: 0.6099, aux_task3.loss_bbox: 0.2864, aux_task4.loss_heatmap: 0.4874, aux_task4.loss_bbox: 0.2937, aux_task5.loss_heatmap: 0.4961, aux_task5.loss_bbox: 0.2889, loss: 13.8660, grad_norm: 30.5940
2025-05-06 05:25:49,245 - mmdet - INFO - Epoch [11][150/773]	lr: 1.150e-04, eta: 3:00:09, time: 1.461, data_time: 0.006, memory: 8684, loss_cls: 0.4709, loss_bbox: 0.8074, d0.loss_cls: 0.4947, d0.loss_bbox: 0.9397, d1.loss_cls: 0.4771, d1.loss_bbox: 0.8521, d2.loss_cls: 0.4723, d2.loss_bbox: 0.8326, d3.loss_cls: 0.4720, d3.loss_bbox: 0.8153, d4.loss_cls: 0.4696, d4.loss_bbox: 0.8136, aux_task0.loss_heatmap: 0.6339, aux_task0.loss_bbox: 0.2625, aux_task1.loss_heatmap: 0.7842, aux_task1.loss_bbox: 0.3267, aux_task2.loss_heatmap: 0.7788, aux_task2.loss_bbox: 0.3668, aux_task3.loss_heatmap: 0.6184, aux_task3.loss_bbox: 0.2861, aux_task4.loss_heatmap: 0.4805, aux_task4.loss_bbox: 0.2817, aux_task5.loss_heatmap: 0.4618, aux_task5.loss_bbox: 0.2908, loss: 13.4894, grad_norm: 30.1900
2025-05-06 05:27:04,353 - mmdet - INFO - Epoch [11][200/773]	lr: 1.144e-04, eta: 2:59:01, time: 1.501, data_time: 0.005, memory: 8822, loss_cls: 0.4776, loss_bbox: 0.8091, d0.loss_cls: 0.5048, d0.loss_bbox: 0.9455, d1.loss_cls: 0.4838, d1.loss_bbox: 0.8551, d2.loss_cls: 0.4776, d2.loss_bbox: 0.8347, d3.loss_cls: 0.4771, d3.loss_bbox: 0.8169, d4.loss_cls: 0.4757, d4.loss_bbox: 0.8126, aux_task0.loss_heatmap: 0.5902, aux_task0.loss_bbox: 0.2643, aux_task1.loss_heatmap: 0.8030, aux_task1.loss_bbox: 0.3090, aux_task2.loss_heatmap: 0.7743, aux_task2.loss_bbox: 0.3525, aux_task3.loss_heatmap: 0.5956, aux_task3.loss_bbox: 0.2769, aux_task4.loss_heatmap: 0.4545, aux_task4.loss_bbox: 0.2875, aux_task5.loss_heatmap: 0.5111, aux_task5.loss_bbox: 0.2948, loss: 13.4841, grad_norm: 35.7727
2025-05-06 05:28:16,539 - mmdet - INFO - Epoch [11][250/773]	lr: 1.138e-04, eta: 2:57:51, time: 1.444, data_time: 0.005, memory: 8822, loss_cls: 0.4788, loss_bbox: 0.7990, d0.loss_cls: 0.5046, d0.loss_bbox: 0.9280, d1.loss_cls: 0.4852, d1.loss_bbox: 0.8465, d2.loss_cls: 0.4815, d2.loss_bbox: 0.8251, d3.loss_cls: 0.4805, d3.loss_bbox: 0.8070, d4.loss_cls: 0.4781, d4.loss_bbox: 0.8034, aux_task0.loss_heatmap: 0.5844, aux_task0.loss_bbox: 0.2582, aux_task1.loss_heatmap: 0.7584, aux_task1.loss_bbox: 0.3290, aux_task2.loss_heatmap: 0.7460, aux_task2.loss_bbox: 0.3342, aux_task3.loss_heatmap: 0.6293, aux_task3.loss_bbox: 0.2909, aux_task4.loss_heatmap: 0.5147, aux_task4.loss_bbox: 0.2971, aux_task5.loss_heatmap: 0.4985, aux_task5.loss_bbox: 0.2922, loss: 13.4507, grad_norm: 32.5165
2025-05-06 05:29:26,802 - mmdet - INFO - Epoch [11][300/773]	lr: 1.132e-04, eta: 2:56:38, time: 1.405, data_time: 0.006, memory: 8822, loss_cls: 0.4701, loss_bbox: 0.8059, d0.loss_cls: 0.4929, d0.loss_bbox: 0.9376, d1.loss_cls: 0.4748, d1.loss_bbox: 0.8535, d2.loss_cls: 0.4703, d2.loss_bbox: 0.8326, d3.loss_cls: 0.4704, d3.loss_bbox: 0.8132, d4.loss_cls: 0.4685, d4.loss_bbox: 0.8103, aux_task0.loss_heatmap: 0.5784, aux_task0.loss_bbox: 0.2519, aux_task1.loss_heatmap: 0.8382, aux_task1.loss_bbox: 0.3231, aux_task2.loss_heatmap: 0.7198, aux_task2.loss_bbox: 0.3426, aux_task3.loss_heatmap: 0.6438, aux_task3.loss_bbox: 0.2881, aux_task4.loss_heatmap: 0.4443, aux_task4.loss_bbox: 0.2848, aux_task5.loss_heatmap: 0.5190, aux_task5.loss_bbox: 0.2964, loss: 13.4306, grad_norm: 29.2934
2025-05-06 05:30:46,216 - mmdet - INFO - Epoch [11][350/773]	lr: 1.126e-04, eta: 2:55:35, time: 1.588, data_time: 0.005, memory: 8822, loss_cls: 0.4612, loss_bbox: 0.8220, d0.loss_cls: 0.4914, d0.loss_bbox: 0.9506, d1.loss_cls: 0.4713, d1.loss_bbox: 0.8642, d2.loss_cls: 0.4622, d2.loss_bbox: 0.8476, d3.loss_cls: 0.4602, d3.loss_bbox: 0.8306, d4.loss_cls: 0.4582, d4.loss_bbox: 0.8269, aux_task0.loss_heatmap: 0.6129, aux_task0.loss_bbox: 0.2679, aux_task1.loss_heatmap: 0.8310, aux_task1.loss_bbox: 0.3329, aux_task2.loss_heatmap: 0.8082, aux_task2.loss_bbox: 0.3403, aux_task3.loss_heatmap: 0.6460, aux_task3.loss_bbox: 0.2856, aux_task4.loss_heatmap: 0.4530, aux_task4.loss_bbox: 0.2851, aux_task5.loss_heatmap: 0.4688, aux_task5.loss_bbox: 0.2897, loss: 13.5677, grad_norm: 32.0134
2025-05-06 05:31:55,957 - mmdet - INFO - Epoch [11][400/773]	lr: 1.119e-04, eta: 2:54:22, time: 1.395, data_time: 0.005, memory: 8822, loss_cls: 0.4647, loss_bbox: 0.8104, d0.loss_cls: 0.4876, d0.loss_bbox: 0.9447, d1.loss_cls: 0.4732, d1.loss_bbox: 0.8557, d2.loss_cls: 0.4655, d2.loss_bbox: 0.8381, d3.loss_cls: 0.4652, d3.loss_bbox: 0.8186, d4.loss_cls: 0.4624, d4.loss_bbox: 0.8155, aux_task0.loss_heatmap: 0.5966, aux_task0.loss_bbox: 0.2581, aux_task1.loss_heatmap: 0.8096, aux_task1.loss_bbox: 0.3295, aux_task2.loss_heatmap: 0.8387, aux_task2.loss_bbox: 0.3513, aux_task3.loss_heatmap: 0.6055, aux_task3.loss_bbox: 0.2861, aux_task4.loss_heatmap: 0.4467, aux_task4.loss_bbox: 0.2974, aux_task5.loss_heatmap: 0.4786, aux_task5.loss_bbox: 0.2976, loss: 13.4973, grad_norm: 35.8783
2025-05-06 05:33:10,090 - mmdet - INFO - Epoch [11][450/773]	lr: 1.113e-04, eta: 2:53:13, time: 1.483, data_time: 0.005, memory: 8822, loss_cls: 0.4618, loss_bbox: 0.7954, d0.loss_cls: 0.4895, d0.loss_bbox: 0.9279, d1.loss_cls: 0.4692, d1.loss_bbox: 0.8424, d2.loss_cls: 0.4635, d2.loss_bbox: 0.8221, d3.loss_cls: 0.4623, d3.loss_bbox: 0.8036, d4.loss_cls: 0.4612, d4.loss_bbox: 0.7991, aux_task0.loss_heatmap: 0.5745, aux_task0.loss_bbox: 0.2447, aux_task1.loss_heatmap: 0.7724, aux_task1.loss_bbox: 0.3266, aux_task2.loss_heatmap: 0.7813, aux_task2.loss_bbox: 0.3380, aux_task3.loss_heatmap: 0.6236, aux_task3.loss_bbox: 0.2910, aux_task4.loss_heatmap: 0.4812, aux_task4.loss_bbox: 0.2902, aux_task5.loss_heatmap: 0.4589, aux_task5.loss_bbox: 0.2948, loss: 13.2753, grad_norm: 30.6757
2025-05-06 05:34:24,842 - mmdet - INFO - Epoch [11][500/773]	lr: 1.106e-04, eta: 2:52:04, time: 1.495, data_time: 0.005, memory: 8822, loss_cls: 0.4571, loss_bbox: 0.8046, d0.loss_cls: 0.4846, d0.loss_bbox: 0.9358, d1.loss_cls: 0.4663, d1.loss_bbox: 0.8511, d2.loss_cls: 0.4600, d2.loss_bbox: 0.8324, d3.loss_cls: 0.4594, d3.loss_bbox: 0.8146, d4.loss_cls: 0.4569, d4.loss_bbox: 0.8090, aux_task0.loss_heatmap: 0.6094, aux_task0.loss_bbox: 0.2647, aux_task1.loss_heatmap: 0.7836, aux_task1.loss_bbox: 0.3218, aux_task2.loss_heatmap: 0.7691, aux_task2.loss_bbox: 0.3523, aux_task3.loss_heatmap: 0.6209, aux_task3.loss_bbox: 0.2972, aux_task4.loss_heatmap: 0.4313, aux_task4.loss_bbox: 0.2827, aux_task5.loss_heatmap: 0.4624, aux_task5.loss_bbox: 0.2960, loss: 13.3233, grad_norm: 29.0286
2025-05-06 05:35:37,263 - mmdet - INFO - Epoch [11][550/773]	lr: 1.099e-04, eta: 2:50:54, time: 1.448, data_time: 0.005, memory: 8822, loss_cls: 0.4614, loss_bbox: 0.7994, d0.loss_cls: 0.4899, d0.loss_bbox: 0.9297, d1.loss_cls: 0.4706, d1.loss_bbox: 0.8465, d2.loss_cls: 0.4664, d2.loss_bbox: 0.8253, d3.loss_cls: 0.4652, d3.loss_bbox: 0.8066, d4.loss_cls: 0.4602, d4.loss_bbox: 0.8035, aux_task0.loss_heatmap: 0.5775, aux_task0.loss_bbox: 0.2550, aux_task1.loss_heatmap: 0.7732, aux_task1.loss_bbox: 0.3172, aux_task2.loss_heatmap: 0.8123, aux_task2.loss_bbox: 0.3540, aux_task3.loss_heatmap: 0.6655, aux_task3.loss_bbox: 0.2943, aux_task4.loss_heatmap: 0.4192, aux_task4.loss_bbox: 0.2820, aux_task5.loss_heatmap: 0.5021, aux_task5.loss_bbox: 0.3025, loss: 13.3795, grad_norm: 29.1632
2025-05-06 05:36:49,542 - mmdet - INFO - Epoch [11][600/773]	lr: 1.092e-04, eta: 2:49:43, time: 1.446, data_time: 0.006, memory: 8822, loss_cls: 0.4657, loss_bbox: 0.8071, d0.loss_cls: 0.4955, d0.loss_bbox: 0.9434, d1.loss_cls: 0.4742, d1.loss_bbox: 0.8589, d2.loss_cls: 0.4681, d2.loss_bbox: 0.8379, d3.loss_cls: 0.4670, d3.loss_bbox: 0.8178, d4.loss_cls: 0.4633, d4.loss_bbox: 0.8132, aux_task0.loss_heatmap: 0.6055, aux_task0.loss_bbox: 0.2649, aux_task1.loss_heatmap: 0.7964, aux_task1.loss_bbox: 0.3217, aux_task2.loss_heatmap: 0.7363, aux_task2.loss_bbox: 0.3481, aux_task3.loss_heatmap: 0.6828, aux_task3.loss_bbox: 0.2943, aux_task4.loss_heatmap: 0.4237, aux_task4.loss_bbox: 0.2866, aux_task5.loss_heatmap: 0.4649, aux_task5.loss_bbox: 0.2981, loss: 13.4350, grad_norm: 32.7763
2025-05-06 05:37:59,886 - mmdet - INFO - Epoch [11][650/773]	lr: 1.085e-04, eta: 2:48:31, time: 1.407, data_time: 0.005, memory: 8822, loss_cls: 0.4537, loss_bbox: 0.7818, d0.loss_cls: 0.4826, d0.loss_bbox: 0.9155, d1.loss_cls: 0.4671, d1.loss_bbox: 0.8289, d2.loss_cls: 0.4582, d2.loss_bbox: 0.8081, d3.loss_cls: 0.4567, d3.loss_bbox: 0.7936, d4.loss_cls: 0.4538, d4.loss_bbox: 0.7878, aux_task0.loss_heatmap: 0.5810, aux_task0.loss_bbox: 0.2499, aux_task1.loss_heatmap: 0.7483, aux_task1.loss_bbox: 0.3194, aux_task2.loss_heatmap: 0.7119, aux_task2.loss_bbox: 0.3331, aux_task3.loss_heatmap: 0.6779, aux_task3.loss_bbox: 0.2942, aux_task4.loss_heatmap: 0.4524, aux_task4.loss_bbox: 0.2791, aux_task5.loss_heatmap: 0.4896, aux_task5.loss_bbox: 0.3001, loss: 13.1247, grad_norm: 30.0521
2025-05-06 05:39:13,535 - mmdet - INFO - Epoch [11][700/773]	lr: 1.078e-04, eta: 2:47:21, time: 1.472, data_time: 0.005, memory: 8822, loss_cls: 0.4509, loss_bbox: 0.7836, d0.loss_cls: 0.4838, d0.loss_bbox: 0.9143, d1.loss_cls: 0.4629, d1.loss_bbox: 0.8331, d2.loss_cls: 0.4567, d2.loss_bbox: 0.8094, d3.loss_cls: 0.4535, d3.loss_bbox: 0.7959, d4.loss_cls: 0.4488, d4.loss_bbox: 0.7902, aux_task0.loss_heatmap: 0.6027, aux_task0.loss_bbox: 0.2536, aux_task1.loss_heatmap: 0.7545, aux_task1.loss_bbox: 0.3110, aux_task2.loss_heatmap: 0.7802, aux_task2.loss_bbox: 0.3384, aux_task3.loss_heatmap: 0.6543, aux_task3.loss_bbox: 0.2817, aux_task4.loss_heatmap: 0.4299, aux_task4.loss_bbox: 0.2754, aux_task5.loss_heatmap: 0.5002, aux_task5.loss_bbox: 0.2933, loss: 13.1583, grad_norm: 31.1599
2025-05-06 05:40:26,763 - mmdet - INFO - Epoch [11][750/773]	lr: 1.071e-04, eta: 2:46:11, time: 1.464, data_time: 0.006, memory: 8822, loss_cls: 0.4592, loss_bbox: 0.8108, d0.loss_cls: 0.4895, d0.loss_bbox: 0.9414, d1.loss_cls: 0.4711, d1.loss_bbox: 0.8594, d2.loss_cls: 0.4646, d2.loss_bbox: 0.8319, d3.loss_cls: 0.4621, d3.loss_bbox: 0.8197, d4.loss_cls: 0.4573, d4.loss_bbox: 0.8168, aux_task0.loss_heatmap: 0.6094, aux_task0.loss_bbox: 0.2600, aux_task1.loss_heatmap: 0.7666, aux_task1.loss_bbox: 0.3247, aux_task2.loss_heatmap: 0.7688, aux_task2.loss_bbox: 0.3582, aux_task3.loss_heatmap: 0.6219, aux_task3.loss_bbox: 0.2808, aux_task4.loss_heatmap: 0.4380, aux_task4.loss_bbox: 0.2821, aux_task5.loss_heatmap: 0.4942, aux_task5.loss_bbox: 0.3044, loss: 13.3928, grad_norm: 28.9654
2025-05-06 05:41:34,333 - mmdet - INFO - Saving checkpoint at 11 epochs
2025-05-06 05:42:58,552 - mmdet - INFO - Epoch [12][50/773]	lr: 1.060e-04, eta: 2:44:09, time: 1.650, data_time: 0.186, memory: 8822, loss_cls: 0.4576, loss_bbox: 0.7920, d0.loss_cls: 0.4855, d0.loss_bbox: 0.9279, d1.loss_cls: 0.4671, d1.loss_bbox: 0.8446, d2.loss_cls: 0.4603, d2.loss_bbox: 0.8170, d3.loss_cls: 0.4596, d3.loss_bbox: 0.8057, d4.loss_cls: 0.4550, d4.loss_bbox: 0.7992, aux_task0.loss_heatmap: 0.6018, aux_task0.loss_bbox: 0.2500, aux_task1.loss_heatmap: 0.7677, aux_task1.loss_bbox: 0.3153, aux_task2.loss_heatmap: 0.8226, aux_task2.loss_bbox: 0.3537, aux_task3.loss_heatmap: 0.5795, aux_task3.loss_bbox: 0.2788, aux_task4.loss_heatmap: 0.4780, aux_task4.loss_bbox: 0.2839, aux_task5.loss_heatmap: 0.4555, aux_task5.loss_bbox: 0.2946, loss: 13.2527, grad_norm: 28.5943
2025-05-06 05:44:12,496 - mmdet - INFO - Epoch [12][100/773]	lr: 1.052e-04, eta: 2:43:00, time: 1.479, data_time: 0.005, memory: 8822, loss_cls: 0.4500, loss_bbox: 0.7934, d0.loss_cls: 0.4786, d0.loss_bbox: 0.9271, d1.loss_cls: 0.4598, d1.loss_bbox: 0.8448, d2.loss_cls: 0.4520, d2.loss_bbox: 0.8188, d3.loss_cls: 0.4497, d3.loss_bbox: 0.8083, d4.loss_cls: 0.4475, d4.loss_bbox: 0.8002, aux_task0.loss_heatmap: 0.5623, aux_task0.loss_bbox: 0.2504, aux_task1.loss_heatmap: 0.7904, aux_task1.loss_bbox: 0.3230, aux_task2.loss_heatmap: 0.8079, aux_task2.loss_bbox: 0.3423, aux_task3.loss_heatmap: 0.5939, aux_task3.loss_bbox: 0.2819, aux_task4.loss_heatmap: 0.4527, aux_task4.loss_bbox: 0.2874, aux_task5.loss_heatmap: 0.4700, aux_task5.loss_bbox: 0.2958, loss: 13.1881, grad_norm: 30.1448
2025-05-06 05:45:27,029 - mmdet - INFO - Epoch [12][150/773]	lr: 1.044e-04, eta: 2:41:52, time: 1.492, data_time: 0.006, memory: 8822, loss_cls: 0.4667, loss_bbox: 0.7785, d0.loss_cls: 0.4923, d0.loss_bbox: 0.9233, d1.loss_cls: 0.4753, d1.loss_bbox: 0.8327, d2.loss_cls: 0.4707, d2.loss_bbox: 0.8054, d3.loss_cls: 0.4662, d3.loss_bbox: 0.7955, d4.loss_cls: 0.4647, d4.loss_bbox: 0.7848, aux_task0.loss_heatmap: 0.5693, aux_task0.loss_bbox: 0.2496, aux_task1.loss_heatmap: 0.7351, aux_task1.loss_bbox: 0.3170, aux_task2.loss_heatmap: 0.7369, aux_task2.loss_bbox: 0.3674, aux_task3.loss_heatmap: 0.6493, aux_task3.loss_bbox: 0.2865, aux_task4.loss_heatmap: 0.4409, aux_task4.loss_bbox: 0.2737, aux_task5.loss_heatmap: 0.5224, aux_task5.loss_bbox: 0.2943, loss: 13.1984, grad_norm: 31.7083
2025-05-06 05:46:39,411 - mmdet - INFO - Epoch [12][200/773]	lr: 1.036e-04, eta: 2:40:41, time: 1.447, data_time: 0.005, memory: 8822, loss_cls: 0.4509, loss_bbox: 0.7744, d0.loss_cls: 0.4755, d0.loss_bbox: 0.9148, d1.loss_cls: 0.4585, d1.loss_bbox: 0.8253, d2.loss_cls: 0.4519, d2.loss_bbox: 0.8000, d3.loss_cls: 0.4502, d3.loss_bbox: 0.7901, d4.loss_cls: 0.4488, d4.loss_bbox: 0.7805, aux_task0.loss_heatmap: 0.5595, aux_task0.loss_bbox: 0.2460, aux_task1.loss_heatmap: 0.7772, aux_task1.loss_bbox: 0.3018, aux_task2.loss_heatmap: 0.7559, aux_task2.loss_bbox: 0.3498, aux_task3.loss_heatmap: 0.5868, aux_task3.loss_bbox: 0.2858, aux_task4.loss_heatmap: 0.4582, aux_task4.loss_bbox: 0.2856, aux_task5.loss_heatmap: 0.4814, aux_task5.loss_bbox: 0.2917, loss: 13.0005, grad_norm: 31.0502
2025-05-06 05:47:50,685 - mmdet - INFO - Epoch [12][250/773]	lr: 1.028e-04, eta: 2:39:30, time: 1.426, data_time: 0.005, memory: 8822, loss_cls: 0.4446, loss_bbox: 0.7622, d0.loss_cls: 0.4729, d0.loss_bbox: 0.9074, d1.loss_cls: 0.4560, d1.loss_bbox: 0.8149, d2.loss_cls: 0.4476, d2.loss_bbox: 0.7898, d3.loss_cls: 0.4466, d3.loss_bbox: 0.7794, d4.loss_cls: 0.4435, d4.loss_bbox: 0.7672, aux_task0.loss_heatmap: 0.5477, aux_task0.loss_bbox: 0.2348, aux_task1.loss_heatmap: 0.7311, aux_task1.loss_bbox: 0.3175, aux_task2.loss_heatmap: 0.7301, aux_task2.loss_bbox: 0.3268, aux_task3.loss_heatmap: 0.5943, aux_task3.loss_bbox: 0.2845, aux_task4.loss_heatmap: 0.4683, aux_task4.loss_bbox: 0.2900, aux_task5.loss_heatmap: 0.4884, aux_task5.loss_bbox: 0.2924, loss: 12.8380, grad_norm: 30.4820
2025-05-06 05:49:04,725 - mmdet - INFO - Epoch [12][300/773]	lr: 1.020e-04, eta: 2:38:20, time: 1.481, data_time: 0.005, memory: 8822, loss_cls: 0.4431, loss_bbox: 0.7707, d0.loss_cls: 0.4733, d0.loss_bbox: 0.9080, d1.loss_cls: 0.4548, d1.loss_bbox: 0.8184, d2.loss_cls: 0.4464, d2.loss_bbox: 0.7967, d3.loss_cls: 0.4456, d3.loss_bbox: 0.7851, d4.loss_cls: 0.4410, d4.loss_bbox: 0.7753, aux_task0.loss_heatmap: 0.5671, aux_task0.loss_bbox: 0.2356, aux_task1.loss_heatmap: 0.7974, aux_task1.loss_bbox: 0.3174, aux_task2.loss_heatmap: 0.6923, aux_task2.loss_bbox: 0.3301, aux_task3.loss_heatmap: 0.6258, aux_task3.loss_bbox: 0.2829, aux_task4.loss_heatmap: 0.4103, aux_task4.loss_bbox: 0.2732, aux_task5.loss_heatmap: 0.4920, aux_task5.loss_bbox: 0.2972, loss: 12.8795, grad_norm: 30.0229
2025-05-06 05:50:16,667 - mmdet - INFO - Epoch [12][350/773]	lr: 1.012e-04, eta: 2:37:09, time: 1.438, data_time: 0.004, memory: 8822, loss_cls: 0.4480, loss_bbox: 0.7738, d0.loss_cls: 0.4788, d0.loss_bbox: 0.9121, d1.loss_cls: 0.4583, d1.loss_bbox: 0.8223, d2.loss_cls: 0.4522, d2.loss_bbox: 0.8014, d3.loss_cls: 0.4504, d3.loss_bbox: 0.7896, d4.loss_cls: 0.4468, d4.loss_bbox: 0.7796, aux_task0.loss_heatmap: 0.5536, aux_task0.loss_bbox: 0.2434, aux_task1.loss_heatmap: 0.8113, aux_task1.loss_bbox: 0.3275, aux_task2.loss_heatmap: 0.7560, aux_task2.loss_bbox: 0.3438, aux_task3.loss_heatmap: 0.6261, aux_task3.loss_bbox: 0.2898, aux_task4.loss_heatmap: 0.4440, aux_task4.loss_bbox: 0.2788, aux_task5.loss_heatmap: 0.4749, aux_task5.loss_bbox: 0.2897, loss: 13.0522, grad_norm: 29.7023
2025-05-06 05:51:25,609 - mmdet - INFO - Epoch [12][400/773]	lr: 1.003e-04, eta: 2:35:56, time: 1.380, data_time: 0.006, memory: 8822, loss_cls: 0.4427, loss_bbox: 0.7849, d0.loss_cls: 0.4730, d0.loss_bbox: 0.9276, d1.loss_cls: 0.4570, d1.loss_bbox: 0.8313, d2.loss_cls: 0.4502, d2.loss_bbox: 0.8102, d3.loss_cls: 0.4462, d3.loss_bbox: 0.7998, d4.loss_cls: 0.4429, d4.loss_bbox: 0.7899, aux_task0.loss_heatmap: 0.5849, aux_task0.loss_bbox: 0.2388, aux_task1.loss_heatmap: 0.7807, aux_task1.loss_bbox: 0.3235, aux_task2.loss_heatmap: 0.7788, aux_task2.loss_bbox: 0.3400, aux_task3.loss_heatmap: 0.6346, aux_task3.loss_bbox: 0.2883, aux_task4.loss_heatmap: 0.4403, aux_task4.loss_bbox: 0.2898, aux_task5.loss_heatmap: 0.4479, aux_task5.loss_bbox: 0.2889, loss: 13.0922, grad_norm: 31.4651
2025-05-06 05:52:35,184 - mmdet - INFO - Epoch [12][450/773]	lr: 9.949e-05, eta: 2:34:44, time: 1.392, data_time: 0.004, memory: 8822, loss_cls: 0.4536, loss_bbox: 0.7796, d0.loss_cls: 0.4821, d0.loss_bbox: 0.9212, d1.loss_cls: 0.4660, d1.loss_bbox: 0.8268, d2.loss_cls: 0.4606, d2.loss_bbox: 0.8062, d3.loss_cls: 0.4583, d3.loss_bbox: 0.7960, d4.loss_cls: 0.4540, d4.loss_bbox: 0.7844, aux_task0.loss_heatmap: 0.5724, aux_task0.loss_bbox: 0.2418, aux_task1.loss_heatmap: 0.7475, aux_task1.loss_bbox: 0.3130, aux_task2.loss_heatmap: 0.7808, aux_task2.loss_bbox: 0.3361, aux_task3.loss_heatmap: 0.6765, aux_task3.loss_bbox: 0.2947, aux_task4.loss_heatmap: 0.4643, aux_task4.loss_bbox: 0.2815, aux_task5.loss_heatmap: 0.4546, aux_task5.loss_bbox: 0.2939, loss: 13.1459, grad_norm: 29.4650
2025-05-06 05:53:49,917 - mmdet - INFO - Epoch [12][500/773]	lr: 9.863e-05, eta: 2:33:35, time: 1.494, data_time: 0.005, memory: 8822, loss_cls: 0.4452, loss_bbox: 0.7816, d0.loss_cls: 0.4741, d0.loss_bbox: 0.9222, d1.loss_cls: 0.4580, d1.loss_bbox: 0.8281, d2.loss_cls: 0.4499, d2.loss_bbox: 0.8085, d3.loss_cls: 0.4479, d3.loss_bbox: 0.7992, d4.loss_cls: 0.4435, d4.loss_bbox: 0.7879, aux_task0.loss_heatmap: 0.5995, aux_task0.loss_bbox: 0.2508, aux_task1.loss_heatmap: 0.7549, aux_task1.loss_bbox: 0.3199, aux_task2.loss_heatmap: 0.7367, aux_task2.loss_bbox: 0.3485, aux_task3.loss_heatmap: 0.5277, aux_task3.loss_bbox: 0.2914, aux_task4.loss_heatmap: 0.4159, aux_task4.loss_bbox: 0.2791, aux_task5.loss_heatmap: 0.4255, aux_task5.loss_bbox: 0.2902, loss: 12.8862, grad_norm: 31.3873
2025-05-06 05:55:01,014 - mmdet - INFO - Epoch [12][550/773]	lr: 9.776e-05, eta: 2:32:23, time: 1.423, data_time: 0.006, memory: 8822, loss_cls: 0.4371, loss_bbox: 0.7637, d0.loss_cls: 0.4661, d0.loss_bbox: 0.9026, d1.loss_cls: 0.4515, d1.loss_bbox: 0.8081, d2.loss_cls: 0.4434, d2.loss_bbox: 0.7904, d3.loss_cls: 0.4419, d3.loss_bbox: 0.7793, d4.loss_cls: 0.4363, d4.loss_bbox: 0.7679, aux_task0.loss_heatmap: 0.5748, aux_task0.loss_bbox: 0.2421, aux_task1.loss_heatmap: 0.7564, aux_task1.loss_bbox: 0.3097, aux_task2.loss_heatmap: 0.7547, aux_task2.loss_bbox: 0.3453, aux_task3.loss_heatmap: 0.5954, aux_task3.loss_bbox: 0.3000, aux_task4.loss_heatmap: 0.4207, aux_task4.loss_bbox: 0.2736, aux_task5.loss_heatmap: 0.4419, aux_task5.loss_bbox: 0.2907, loss: 12.7937, grad_norm: 30.8590
2025-05-06 05:56:12,581 - mmdet - INFO - Epoch [12][600/773]	lr: 9.688e-05, eta: 2:31:12, time: 1.431, data_time: 0.005, memory: 8822, loss_cls: 0.4294, loss_bbox: 0.7723, d0.loss_cls: 0.4651, d0.loss_bbox: 0.9146, d1.loss_cls: 0.4451, d1.loss_bbox: 0.8179, d2.loss_cls: 0.4359, d2.loss_bbox: 0.8020, d3.loss_cls: 0.4322, d3.loss_bbox: 0.7926, d4.loss_cls: 0.4272, d4.loss_bbox: 0.7809, aux_task0.loss_heatmap: 0.6048, aux_task0.loss_bbox: 0.2460, aux_task1.loss_heatmap: 0.7774, aux_task1.loss_bbox: 0.3189, aux_task2.loss_heatmap: 0.6742, aux_task2.loss_bbox: 0.3410, aux_task3.loss_heatmap: 0.6497, aux_task3.loss_bbox: 0.2857, aux_task4.loss_heatmap: 0.3973, aux_task4.loss_bbox: 0.2769, aux_task5.loss_heatmap: 0.4572, aux_task5.loss_bbox: 0.2992, loss: 12.8436, grad_norm: 27.8246
2025-05-06 05:57:21,546 - mmdet - INFO - Epoch [12][650/773]	lr: 9.600e-05, eta: 2:29:59, time: 1.379, data_time: 0.005, memory: 8822, loss_cls: 0.4351, loss_bbox: 0.7623, d0.loss_cls: 0.4706, d0.loss_bbox: 0.8981, d1.loss_cls: 0.4496, d1.loss_bbox: 0.8052, d2.loss_cls: 0.4414, d2.loss_bbox: 0.7880, d3.loss_cls: 0.4375, d3.loss_bbox: 0.7779, d4.loss_cls: 0.4336, d4.loss_bbox: 0.7664, aux_task0.loss_heatmap: 0.5889, aux_task0.loss_bbox: 0.2517, aux_task1.loss_heatmap: 0.7380, aux_task1.loss_bbox: 0.3153, aux_task2.loss_heatmap: 0.7035, aux_task2.loss_bbox: 0.3274, aux_task3.loss_heatmap: 0.6279, aux_task3.loss_bbox: 0.2824, aux_task4.loss_heatmap: 0.4336, aux_task4.loss_bbox: 0.2731, aux_task5.loss_heatmap: 0.4532, aux_task5.loss_bbox: 0.2970, loss: 12.7577, grad_norm: 32.6124
2025-05-06 05:58:33,164 - mmdet - INFO - Epoch [12][700/773]	lr: 9.510e-05, eta: 2:28:48, time: 1.432, data_time: 0.005, memory: 8822, loss_cls: 0.4268, loss_bbox: 0.7661, d0.loss_cls: 0.4625, d0.loss_bbox: 0.9055, d1.loss_cls: 0.4408, d1.loss_bbox: 0.8146, d2.loss_cls: 0.4326, d2.loss_bbox: 0.7947, d3.loss_cls: 0.4301, d3.loss_bbox: 0.7846, d4.loss_cls: 0.4268, d4.loss_bbox: 0.7721, aux_task0.loss_heatmap: 0.5753, aux_task0.loss_bbox: 0.2423, aux_task1.loss_heatmap: 0.7438, aux_task1.loss_bbox: 0.3016, aux_task2.loss_heatmap: 0.7156, aux_task2.loss_bbox: 0.3338, aux_task3.loss_heatmap: 0.6225, aux_task3.loss_bbox: 0.2812, aux_task4.loss_heatmap: 0.3989, aux_task4.loss_bbox: 0.2730, aux_task5.loss_heatmap: 0.4764, aux_task5.loss_bbox: 0.2988, loss: 12.7204, grad_norm: 29.1457
2025-05-06 06:00:09,339 - mmdet - INFO - Epoch [12][750/773]	lr: 9.419e-05, eta: 2:27:53, time: 1.923, data_time: 0.005, memory: 8822, loss_cls: 0.4443, loss_bbox: 0.7747, d0.loss_cls: 0.4784, d0.loss_bbox: 0.9190, d1.loss_cls: 0.4576, d1.loss_bbox: 0.8237, d2.loss_cls: 0.4489, d2.loss_bbox: 0.8030, d3.loss_cls: 0.4461, d3.loss_bbox: 0.7899, d4.loss_cls: 0.4443, d4.loss_bbox: 0.7775, aux_task0.loss_heatmap: 0.5998, aux_task0.loss_bbox: 0.2451, aux_task1.loss_heatmap: 0.7357, aux_task1.loss_bbox: 0.3121, aux_task2.loss_heatmap: 0.7263, aux_task2.loss_bbox: 0.3514, aux_task3.loss_heatmap: 0.5729, aux_task3.loss_bbox: 0.2687, aux_task4.loss_heatmap: 0.4116, aux_task4.loss_bbox: 0.2716, aux_task5.loss_heatmap: 0.5104, aux_task5.loss_bbox: 0.2983, loss: 12.9111, grad_norm: 29.0834
2025-05-06 06:02:28,053 - mmdet - INFO - Saving checkpoint at 12 epochs
2025-05-06 06:03:57,692 - mmdet - INFO - Epoch [13][50/773]	lr: 9.285e-05, eta: 2:25:58, time: 1.760, data_time: 0.200, memory: 8822, loss_cls: 0.4448, loss_bbox: 0.7749, d0.loss_cls: 0.4757, d0.loss_bbox: 0.9160, d1.loss_cls: 0.4567, d1.loss_bbox: 0.8200, d2.loss_cls: 0.4500, d2.loss_bbox: 0.8014, d3.loss_cls: 0.4483, d3.loss_bbox: 0.7889, d4.loss_cls: 0.4441, d4.loss_bbox: 0.7804, aux_task0.loss_heatmap: 0.5772, aux_task0.loss_bbox: 0.2428, aux_task1.loss_heatmap: 0.7555, aux_task1.loss_bbox: 0.3084, aux_task2.loss_heatmap: 0.7889, aux_task2.loss_bbox: 0.3435, aux_task3.loss_heatmap: 0.5626, aux_task3.loss_bbox: 0.2739, aux_task4.loss_heatmap: 0.4508, aux_task4.loss_bbox: 0.2747, aux_task5.loss_heatmap: 0.4722, aux_task5.loss_bbox: 0.2949, loss: 12.9467, grad_norm: 28.7500
2025-05-06 06:05:17,392 - mmdet - INFO - Epoch [13][100/773]	lr: 9.192e-05, eta: 2:24:52, time: 1.593, data_time: 0.005, memory: 8822, loss_cls: 0.4387, loss_bbox: 0.7717, d0.loss_cls: 0.4659, d0.loss_bbox: 0.9119, d1.loss_cls: 0.4489, d1.loss_bbox: 0.8216, d2.loss_cls: 0.4438, d2.loss_bbox: 0.8005, d3.loss_cls: 0.4410, d3.loss_bbox: 0.7862, d4.loss_cls: 0.4369, d4.loss_bbox: 0.7774, aux_task0.loss_heatmap: 0.5650, aux_task0.loss_bbox: 0.2353, aux_task1.loss_heatmap: 0.7499, aux_task1.loss_bbox: 0.3112, aux_task2.loss_heatmap: 0.8108, aux_task2.loss_bbox: 0.3412, aux_task3.loss_heatmap: 0.6297, aux_task3.loss_bbox: 0.2730, aux_task4.loss_heatmap: 0.4394, aux_task4.loss_bbox: 0.2810, aux_task5.loss_heatmap: 0.4230, aux_task5.loss_bbox: 0.2897, loss: 12.8934, grad_norm: 29.0933
2025-05-06 06:06:33,222 - mmdet - INFO - Epoch [13][150/773]	lr: 9.098e-05, eta: 2:23:43, time: 1.518, data_time: 0.006, memory: 8822, loss_cls: 0.4307, loss_bbox: 0.7542, d0.loss_cls: 0.4647, d0.loss_bbox: 0.8952, d1.loss_cls: 0.4469, d1.loss_bbox: 0.7986, d2.loss_cls: 0.4372, d2.loss_bbox: 0.7806, d3.loss_cls: 0.4358, d3.loss_bbox: 0.7650, d4.loss_cls: 0.4297, d4.loss_bbox: 0.7599, aux_task0.loss_heatmap: 0.5423, aux_task0.loss_bbox: 0.2371, aux_task1.loss_heatmap: 0.7295, aux_task1.loss_bbox: 0.3042, aux_task2.loss_heatmap: 0.7323, aux_task2.loss_bbox: 0.3578, aux_task3.loss_heatmap: 0.5706, aux_task3.loss_bbox: 0.2906, aux_task4.loss_heatmap: 0.4496, aux_task4.loss_bbox: 0.2671, aux_task5.loss_heatmap: 0.4434, aux_task5.loss_bbox: 0.2889, loss: 12.6120, grad_norm: 27.9237
2025-05-06 06:07:42,229 - mmdet - INFO - Epoch [13][200/773]	lr: 9.003e-05, eta: 2:22:30, time: 1.380, data_time: 0.005, memory: 8822, loss_cls: 0.4314, loss_bbox: 0.7574, d0.loss_cls: 0.4658, d0.loss_bbox: 0.8928, d1.loss_cls: 0.4459, d1.loss_bbox: 0.8021, d2.loss_cls: 0.4385, d2.loss_bbox: 0.7860, d3.loss_cls: 0.4361, d3.loss_bbox: 0.7709, d4.loss_cls: 0.4315, d4.loss_bbox: 0.7623, aux_task0.loss_heatmap: 0.5534, aux_task0.loss_bbox: 0.2301, aux_task1.loss_heatmap: 0.7508, aux_task1.loss_bbox: 0.2937, aux_task2.loss_heatmap: 0.7151, aux_task2.loss_bbox: 0.3368, aux_task3.loss_heatmap: 0.5733, aux_task3.loss_bbox: 0.2810, aux_task4.loss_heatmap: 0.4367, aux_task4.loss_bbox: 0.2757, aux_task5.loss_heatmap: 0.4815, aux_task5.loss_bbox: 0.2873, loss: 12.6360, grad_norm: 28.6031
2025-05-06 06:08:51,251 - mmdet - INFO - Epoch [13][250/773]	lr: 8.908e-05, eta: 2:21:17, time: 1.380, data_time: 0.005, memory: 8822, loss_cls: 0.4249, loss_bbox: 0.7482, d0.loss_cls: 0.4595, d0.loss_bbox: 0.8857, d1.loss_cls: 0.4387, d1.loss_bbox: 0.7938, d2.loss_cls: 0.4306, d2.loss_bbox: 0.7752, d3.loss_cls: 0.4289, d3.loss_bbox: 0.7607, d4.loss_cls: 0.4230, d4.loss_bbox: 0.7539, aux_task0.loss_heatmap: 0.5418, aux_task0.loss_bbox: 0.2259, aux_task1.loss_heatmap: 0.7297, aux_task1.loss_bbox: 0.3142, aux_task2.loss_heatmap: 0.6509, aux_task2.loss_bbox: 0.3079, aux_task3.loss_heatmap: 0.5686, aux_task3.loss_bbox: 0.2835, aux_task4.loss_heatmap: 0.4600, aux_task4.loss_bbox: 0.2845, aux_task5.loss_heatmap: 0.4613, aux_task5.loss_bbox: 0.2853, loss: 12.4368, grad_norm: 28.6092
2025-05-06 06:10:03,562 - mmdet - INFO - Epoch [13][300/773]	lr: 8.812e-05, eta: 2:20:06, time: 1.447, data_time: 0.005, memory: 8822, loss_cls: 0.4280, loss_bbox: 0.7473, d0.loss_cls: 0.4604, d0.loss_bbox: 0.8863, d1.loss_cls: 0.4405, d1.loss_bbox: 0.7964, d2.loss_cls: 0.4332, d2.loss_bbox: 0.7774, d3.loss_cls: 0.4318, d3.loss_bbox: 0.7584, d4.loss_cls: 0.4259, d4.loss_bbox: 0.7525, aux_task0.loss_heatmap: 0.5806, aux_task0.loss_bbox: 0.2301, aux_task1.loss_heatmap: 0.7889, aux_task1.loss_bbox: 0.3069, aux_task2.loss_heatmap: 0.6674, aux_task2.loss_bbox: 0.3226, aux_task3.loss_heatmap: 0.5754, aux_task3.loss_bbox: 0.2851, aux_task4.loss_heatmap: 0.4053, aux_task4.loss_bbox: 0.2717, aux_task5.loss_heatmap: 0.4857, aux_task5.loss_bbox: 0.2895, loss: 12.5473, grad_norm: 29.1149
2025-05-06 06:11:12,447 - mmdet - INFO - Epoch [13][350/773]	lr: 8.715e-05, eta: 2:18:53, time: 1.378, data_time: 0.005, memory: 8822, loss_cls: 0.4326, loss_bbox: 0.7525, d0.loss_cls: 0.4651, d0.loss_bbox: 0.8849, d1.loss_cls: 0.4462, d1.loss_bbox: 0.7976, d2.loss_cls: 0.4384, d2.loss_bbox: 0.7803, d3.loss_cls: 0.4371, d3.loss_bbox: 0.7640, d4.loss_cls: 0.4331, d4.loss_bbox: 0.7574, aux_task0.loss_heatmap: 0.5309, aux_task0.loss_bbox: 0.2268, aux_task1.loss_heatmap: 0.7663, aux_task1.loss_bbox: 0.3132, aux_task2.loss_heatmap: 0.7110, aux_task2.loss_bbox: 0.3252, aux_task3.loss_heatmap: 0.6073, aux_task3.loss_bbox: 0.2761, aux_task4.loss_heatmap: 0.4278, aux_task4.loss_bbox: 0.2743, aux_task5.loss_heatmap: 0.4768, aux_task5.loss_bbox: 0.2901, loss: 12.6151, grad_norm: 28.6081
2025-05-06 06:12:21,163 - mmdet - INFO - Epoch [13][400/773]	lr: 8.617e-05, eta: 2:17:40, time: 1.374, data_time: 0.005, memory: 8822, loss_cls: 0.4195, loss_bbox: 0.7572, d0.loss_cls: 0.4514, d0.loss_bbox: 0.8956, d1.loss_cls: 0.4343, d1.loss_bbox: 0.8023, d2.loss_cls: 0.4266, d2.loss_bbox: 0.7860, d3.loss_cls: 0.4235, d3.loss_bbox: 0.7704, d4.loss_cls: 0.4175, d4.loss_bbox: 0.7641, aux_task0.loss_heatmap: 0.5556, aux_task0.loss_bbox: 0.2399, aux_task1.loss_heatmap: 0.7614, aux_task1.loss_bbox: 0.3094, aux_task2.loss_heatmap: 0.7198, aux_task2.loss_bbox: 0.3307, aux_task3.loss_heatmap: 0.5990, aux_task3.loss_bbox: 0.2863, aux_task4.loss_heatmap: 0.4166, aux_task4.loss_bbox: 0.2874, aux_task5.loss_heatmap: 0.4435, aux_task5.loss_bbox: 0.2871, loss: 12.5852, grad_norm: 33.9373
2025-05-06 06:13:29,445 - mmdet - INFO - Epoch [13][450/773]	lr: 8.519e-05, eta: 2:16:27, time: 1.366, data_time: 0.005, memory: 8822, loss_cls: 0.4291, loss_bbox: 0.7398, d0.loss_cls: 0.4643, d0.loss_bbox: 0.8807, d1.loss_cls: 0.4456, d1.loss_bbox: 0.7897, d2.loss_cls: 0.4360, d2.loss_bbox: 0.7711, d3.loss_cls: 0.4326, d3.loss_bbox: 0.7518, d4.loss_cls: 0.4280, d4.loss_bbox: 0.7461, aux_task0.loss_heatmap: 0.5189, aux_task0.loss_bbox: 0.2261, aux_task1.loss_heatmap: 0.7080, aux_task1.loss_bbox: 0.3038, aux_task2.loss_heatmap: 0.7337, aux_task2.loss_bbox: 0.3266, aux_task3.loss_heatmap: 0.6109, aux_task3.loss_bbox: 0.2768, aux_task4.loss_heatmap: 0.4297, aux_task4.loss_bbox: 0.2732, aux_task5.loss_heatmap: 0.4566, aux_task5.loss_bbox: 0.2846, loss: 12.4635, grad_norm: 30.6706
2025-05-06 06:14:38,406 - mmdet - INFO - Epoch [13][500/773]	lr: 8.420e-05, eta: 2:15:14, time: 1.379, data_time: 0.005, memory: 8822, loss_cls: 0.4182, loss_bbox: 0.7466, d0.loss_cls: 0.4535, d0.loss_bbox: 0.8874, d1.loss_cls: 0.4342, d1.loss_bbox: 0.7969, d2.loss_cls: 0.4256, d2.loss_bbox: 0.7777, d3.loss_cls: 0.4236, d3.loss_bbox: 0.7593, d4.loss_cls: 0.4167, d4.loss_bbox: 0.7535, aux_task0.loss_heatmap: 0.5333, aux_task0.loss_bbox: 0.2256, aux_task1.loss_heatmap: 0.7221, aux_task1.loss_bbox: 0.3042, aux_task2.loss_heatmap: 0.7054, aux_task2.loss_bbox: 0.3356, aux_task3.loss_heatmap: 0.5302, aux_task3.loss_bbox: 0.2827, aux_task4.loss_heatmap: 0.4107, aux_task4.loss_bbox: 0.2668, aux_task5.loss_heatmap: 0.4256, aux_task5.loss_bbox: 0.2884, loss: 12.3239, grad_norm: 28.9599
2025-05-06 06:15:46,360 - mmdet - INFO - Epoch [13][550/773]	lr: 8.321e-05, eta: 2:14:01, time: 1.359, data_time: 0.005, memory: 8822, loss_cls: 0.4064, loss_bbox: 0.7286, d0.loss_cls: 0.4457, d0.loss_bbox: 0.8635, d1.loss_cls: 0.4235, d1.loss_bbox: 0.7757, d2.loss_cls: 0.4130, d2.loss_bbox: 0.7581, d3.loss_cls: 0.4102, d3.loss_bbox: 0.7404, d4.loss_cls: 0.4056, d4.loss_bbox: 0.7336, aux_task0.loss_heatmap: 0.5394, aux_task0.loss_bbox: 0.2330, aux_task1.loss_heatmap: 0.7413, aux_task1.loss_bbox: 0.3022, aux_task2.loss_heatmap: 0.6879, aux_task2.loss_bbox: 0.3436, aux_task3.loss_heatmap: 0.6013, aux_task3.loss_bbox: 0.2848, aux_task4.loss_heatmap: 0.3868, aux_task4.loss_bbox: 0.2656, aux_task5.loss_heatmap: 0.4048, aux_task5.loss_bbox: 0.2898, loss: 12.1847, grad_norm: 31.1683
2025-05-06 06:16:59,112 - mmdet - INFO - Epoch [13][600/773]	lr: 8.220e-05, eta: 2:12:50, time: 1.454, data_time: 0.005, memory: 8822, loss_cls: 0.4128, loss_bbox: 0.7474, d0.loss_cls: 0.4498, d0.loss_bbox: 0.8832, d1.loss_cls: 0.4293, d1.loss_bbox: 0.7909, d2.loss_cls: 0.4182, d2.loss_bbox: 0.7762, d3.loss_cls: 0.4158, d3.loss_bbox: 0.7583, d4.loss_cls: 0.4120, d4.loss_bbox: 0.7510, aux_task0.loss_heatmap: 0.6079, aux_task0.loss_bbox: 0.2349, aux_task1.loss_heatmap: 0.7481, aux_task1.loss_bbox: 0.3010, aux_task2.loss_heatmap: 0.6724, aux_task2.loss_bbox: 0.3343, aux_task3.loss_heatmap: 0.5671, aux_task3.loss_bbox: 0.2794, aux_task4.loss_heatmap: 0.4003, aux_task4.loss_bbox: 0.2730, aux_task5.loss_heatmap: 0.4128, aux_task5.loss_bbox: 0.2919, loss: 12.3678, grad_norm: 29.6668
2025-05-06 06:18:12,780 - mmdet - INFO - Epoch [13][650/773]	lr: 8.120e-05, eta: 2:11:40, time: 1.473, data_time: 0.006, memory: 8822, loss_cls: 0.4216, loss_bbox: 0.7483, d0.loss_cls: 0.4590, d0.loss_bbox: 0.8839, d1.loss_cls: 0.4372, d1.loss_bbox: 0.7975, d2.loss_cls: 0.4286, d2.loss_bbox: 0.7781, d3.loss_cls: 0.4264, d3.loss_bbox: 0.7585, d4.loss_cls: 0.4208, d4.loss_bbox: 0.7529, aux_task0.loss_heatmap: 0.5491, aux_task0.loss_bbox: 0.2380, aux_task1.loss_heatmap: 0.7002, aux_task1.loss_bbox: 0.3044, aux_task2.loss_heatmap: 0.6719, aux_task2.loss_bbox: 0.3232, aux_task3.loss_heatmap: 0.5987, aux_task3.loss_bbox: 0.2777, aux_task4.loss_heatmap: 0.4436, aux_task4.loss_bbox: 0.2693, aux_task5.loss_heatmap: 0.4603, aux_task5.loss_bbox: 0.2934, loss: 12.4427, grad_norm: 28.3986
2025-05-06 06:19:24,407 - mmdet - INFO - Epoch [13][700/773]	lr: 8.018e-05, eta: 2:10:29, time: 1.433, data_time: 0.005, memory: 8822, loss_cls: 0.3984, loss_bbox: 0.7254, d0.loss_cls: 0.4341, d0.loss_bbox: 0.8558, d1.loss_cls: 0.4157, d1.loss_bbox: 0.7708, d2.loss_cls: 0.4038, d2.loss_bbox: 0.7530, d3.loss_cls: 0.4022, d3.loss_bbox: 0.7372, d4.loss_cls: 0.3976, d4.loss_bbox: 0.7306, aux_task0.loss_heatmap: 0.5472, aux_task0.loss_bbox: 0.2250, aux_task1.loss_heatmap: 0.6747, aux_task1.loss_bbox: 0.2934, aux_task2.loss_heatmap: 0.7168, aux_task2.loss_bbox: 0.3227, aux_task3.loss_heatmap: 0.5606, aux_task3.loss_bbox: 0.2662, aux_task4.loss_heatmap: 0.3959, aux_task4.loss_bbox: 0.2651, aux_task5.loss_heatmap: 0.4206, aux_task5.loss_bbox: 0.2841, loss: 11.9968, grad_norm: 25.7191
2025-05-06 06:21:06,782 - mmdet - INFO - Epoch [13][750/773]	lr: 7.917e-05, eta: 2:09:34, time: 2.048, data_time: 0.005, memory: 8822, loss_cls: 0.4257, loss_bbox: 0.7539, d0.loss_cls: 0.4628, d0.loss_bbox: 0.8941, d1.loss_cls: 0.4419, d1.loss_bbox: 0.8025, d2.loss_cls: 0.4323, d2.loss_bbox: 0.7784, d3.loss_cls: 0.4290, d3.loss_bbox: 0.7650, d4.loss_cls: 0.4252, d4.loss_bbox: 0.7575, aux_task0.loss_heatmap: 0.5657, aux_task0.loss_bbox: 0.2358, aux_task1.loss_heatmap: 0.7252, aux_task1.loss_bbox: 0.3052, aux_task2.loss_heatmap: 0.6975, aux_task2.loss_bbox: 0.3399, aux_task3.loss_heatmap: 0.6295, aux_task3.loss_bbox: 0.2758, aux_task4.loss_heatmap: 0.4053, aux_task4.loss_bbox: 0.2647, aux_task5.loss_heatmap: 0.4522, aux_task5.loss_bbox: 0.2943, loss: 12.5592, grad_norm: 29.8047
2025-05-06 06:21:38,741 - mmdet - INFO - Saving checkpoint at 13 epochs
2025-05-06 06:23:10,530 - mmdet - INFO - Epoch [14][50/773]	lr: 7.767e-05, eta: 2:07:42, time: 1.802, data_time: 0.204, memory: 8822, loss_cls: 0.4014, loss_bbox: 0.7369, d0.loss_cls: 0.4356, d0.loss_bbox: 0.8714, d1.loss_cls: 0.4172, d1.loss_bbox: 0.7839, d2.loss_cls: 0.4073, d2.loss_bbox: 0.7639, d3.loss_cls: 0.4067, d3.loss_bbox: 0.7497, d4.loss_cls: 0.4001, d4.loss_bbox: 0.7422, aux_task0.loss_heatmap: 0.5031, aux_task0.loss_bbox: 0.2275, aux_task1.loss_heatmap: 0.7040, aux_task1.loss_bbox: 0.3057, aux_task2.loss_heatmap: 0.7599, aux_task2.loss_bbox: 0.3360, aux_task3.loss_heatmap: 0.5568, aux_task3.loss_bbox: 0.2746, aux_task4.loss_heatmap: 0.4221, aux_task4.loss_bbox: 0.2635, aux_task5.loss_heatmap: 0.4211, aux_task5.loss_bbox: 0.2836, loss: 12.1742, grad_norm: 29.3437
2025-05-06 06:24:23,336 - mmdet - INFO - Epoch [14][100/773]	lr: 7.664e-05, eta: 2:06:32, time: 1.457, data_time: 0.005, memory: 8822, loss_cls: 0.4239, loss_bbox: 0.7392, d0.loss_cls: 0.4561, d0.loss_bbox: 0.8828, d1.loss_cls: 0.4391, d1.loss_bbox: 0.7878, d2.loss_cls: 0.4289, d2.loss_bbox: 0.7666, d3.loss_cls: 0.4282, d3.loss_bbox: 0.7520, d4.loss_cls: 0.4237, d4.loss_bbox: 0.7435, aux_task0.loss_heatmap: 0.5327, aux_task0.loss_bbox: 0.2203, aux_task1.loss_heatmap: 0.7531, aux_task1.loss_bbox: 0.3041, aux_task2.loss_heatmap: 0.7492, aux_task2.loss_bbox: 0.3300, aux_task3.loss_heatmap: 0.5558, aux_task3.loss_bbox: 0.2668, aux_task4.loss_heatmap: 0.4386, aux_task4.loss_bbox: 0.2741, aux_task5.loss_heatmap: 0.4468, aux_task5.loss_bbox: 0.2852, loss: 12.4285, grad_norm: 29.0857
2025-05-06 06:25:33,163 - mmdet - INFO - Epoch [14][150/773]	lr: 7.561e-05, eta: 2:05:19, time: 1.396, data_time: 0.004, memory: 8822, loss_cls: 0.4078, loss_bbox: 0.7372, d0.loss_cls: 0.4453, d0.loss_bbox: 0.8704, d1.loss_cls: 0.4289, d1.loss_bbox: 0.7801, d2.loss_cls: 0.4161, d2.loss_bbox: 0.7599, d3.loss_cls: 0.4125, d3.loss_bbox: 0.7471, d4.loss_cls: 0.4074, d4.loss_bbox: 0.7414, aux_task0.loss_heatmap: 0.5393, aux_task0.loss_bbox: 0.2349, aux_task1.loss_heatmap: 0.6904, aux_task1.loss_bbox: 0.2955, aux_task2.loss_heatmap: 0.7099, aux_task2.loss_bbox: 0.3423, aux_task3.loss_heatmap: 0.5915, aux_task3.loss_bbox: 0.2781, aux_task4.loss_heatmap: 0.4124, aux_task4.loss_bbox: 0.2604, aux_task5.loss_heatmap: 0.4664, aux_task5.loss_bbox: 0.2883, loss: 12.2635, grad_norm: 29.3398
2025-05-06 06:26:42,662 - mmdet - INFO - Epoch [14][200/773]	lr: 7.457e-05, eta: 2:04:07, time: 1.390, data_time: 0.005, memory: 8822, loss_cls: 0.4205, loss_bbox: 0.7374, d0.loss_cls: 0.4571, d0.loss_bbox: 0.8720, d1.loss_cls: 0.4371, d1.loss_bbox: 0.7809, d2.loss_cls: 0.4274, d2.loss_bbox: 0.7600, d3.loss_cls: 0.4252, d3.loss_bbox: 0.7490, d4.loss_cls: 0.4199, d4.loss_bbox: 0.7423, aux_task0.loss_heatmap: 0.5652, aux_task0.loss_bbox: 0.2308, aux_task1.loss_heatmap: 0.6981, aux_task1.loss_bbox: 0.2827, aux_task2.loss_heatmap: 0.6954, aux_task2.loss_bbox: 0.3279, aux_task3.loss_heatmap: 0.6225, aux_task3.loss_bbox: 0.2741, aux_task4.loss_heatmap: 0.4323, aux_task4.loss_bbox: 0.2715, aux_task5.loss_heatmap: 0.4866, aux_task5.loss_bbox: 0.2899, loss: 12.4057, grad_norm: 27.4665
2025-05-06 06:27:52,145 - mmdet - INFO - Epoch [14][250/773]	lr: 7.353e-05, eta: 2:02:54, time: 1.390, data_time: 0.004, memory: 8822, loss_cls: 0.4035, loss_bbox: 0.7237, d0.loss_cls: 0.4377, d0.loss_bbox: 0.8622, d1.loss_cls: 0.4216, d1.loss_bbox: 0.7657, d2.loss_cls: 0.4114, d2.loss_bbox: 0.7442, d3.loss_cls: 0.4093, d3.loss_bbox: 0.7308, d4.loss_cls: 0.4040, d4.loss_bbox: 0.7256, aux_task0.loss_heatmap: 0.5243, aux_task0.loss_bbox: 0.2245, aux_task1.loss_heatmap: 0.7039, aux_task1.loss_bbox: 0.2985, aux_task2.loss_heatmap: 0.6421, aux_task2.loss_bbox: 0.3094, aux_task3.loss_heatmap: 0.4826, aux_task3.loss_bbox: 0.2604, aux_task4.loss_heatmap: 0.4606, aux_task4.loss_bbox: 0.2809, aux_task5.loss_heatmap: 0.4427, aux_task5.loss_bbox: 0.2870, loss: 11.9566, grad_norm: 28.1907
2025-05-06 06:29:01,087 - mmdet - INFO - Epoch [14][300/773]	lr: 7.249e-05, eta: 2:01:42, time: 1.379, data_time: 0.004, memory: 8822, loss_cls: 0.4061, loss_bbox: 0.7252, d0.loss_cls: 0.4444, d0.loss_bbox: 0.8630, d1.loss_cls: 0.4240, d1.loss_bbox: 0.7685, d2.loss_cls: 0.4142, d2.loss_bbox: 0.7487, d3.loss_cls: 0.4116, d3.loss_bbox: 0.7347, d4.loss_cls: 0.4059, d4.loss_bbox: 0.7296, aux_task0.loss_heatmap: 0.5378, aux_task0.loss_bbox: 0.2178, aux_task1.loss_heatmap: 0.7553, aux_task1.loss_bbox: 0.3003, aux_task2.loss_heatmap: 0.6279, aux_task2.loss_bbox: 0.3150, aux_task3.loss_heatmap: 0.5716, aux_task3.loss_bbox: 0.2848, aux_task4.loss_heatmap: 0.3829, aux_task4.loss_bbox: 0.2620, aux_task5.loss_heatmap: 0.4719, aux_task5.loss_bbox: 0.2916, loss: 12.0948, grad_norm: 29.2024
2025-05-06 06:30:09,405 - mmdet - INFO - Epoch [14][350/773]	lr: 7.144e-05, eta: 2:00:29, time: 1.366, data_time: 0.004, memory: 8822, loss_cls: 0.4022, loss_bbox: 0.7307, d0.loss_cls: 0.4405, d0.loss_bbox: 0.8765, d1.loss_cls: 0.4193, d1.loss_bbox: 0.7729, d2.loss_cls: 0.4087, d2.loss_bbox: 0.7549, d3.loss_cls: 0.4081, d3.loss_bbox: 0.7404, d4.loss_cls: 0.4025, d4.loss_bbox: 0.7349, aux_task0.loss_heatmap: 0.5086, aux_task0.loss_bbox: 0.2248, aux_task1.loss_heatmap: 0.7527, aux_task1.loss_bbox: 0.3097, aux_task2.loss_heatmap: 0.6738, aux_task2.loss_bbox: 0.3285, aux_task3.loss_heatmap: 0.5930, aux_task3.loss_bbox: 0.2801, aux_task4.loss_heatmap: 0.3966, aux_task4.loss_bbox: 0.2666, aux_task5.loss_heatmap: 0.4547, aux_task5.loss_bbox: 0.2878, loss: 12.1685, grad_norm: 31.7602
2025-05-06 06:31:18,039 - mmdet - INFO - Epoch [14][400/773]	lr: 7.040e-05, eta: 1:59:16, time: 1.373, data_time: 0.005, memory: 8822, loss_cls: 0.4110, loss_bbox: 0.7309, d0.loss_cls: 0.4440, d0.loss_bbox: 0.8740, d1.loss_cls: 0.4279, d1.loss_bbox: 0.7737, d2.loss_cls: 0.4158, d2.loss_bbox: 0.7581, d3.loss_cls: 0.4145, d3.loss_bbox: 0.7433, d4.loss_cls: 0.4109, d4.loss_bbox: 0.7366, aux_task0.loss_heatmap: 0.5219, aux_task0.loss_bbox: 0.2183, aux_task1.loss_heatmap: 0.7206, aux_task1.loss_bbox: 0.3093, aux_task2.loss_heatmap: 0.7283, aux_task2.loss_bbox: 0.3338, aux_task3.loss_heatmap: 0.5570, aux_task3.loss_bbox: 0.2862, aux_task4.loss_heatmap: 0.4114, aux_task4.loss_bbox: 0.2809, aux_task5.loss_heatmap: 0.4311, aux_task5.loss_bbox: 0.2783, loss: 12.2178, grad_norm: 27.9706
2025-05-06 06:32:27,309 - mmdet - INFO - Epoch [14][450/773]	lr: 6.935e-05, eta: 1:58:04, time: 1.386, data_time: 0.005, memory: 8822, loss_cls: 0.4040, loss_bbox: 0.7256, d0.loss_cls: 0.4392, d0.loss_bbox: 0.8644, d1.loss_cls: 0.4180, d1.loss_bbox: 0.7662, d2.loss_cls: 0.4070, d2.loss_bbox: 0.7488, d3.loss_cls: 0.4073, d3.loss_bbox: 0.7350, d4.loss_cls: 0.4026, d4.loss_bbox: 0.7285, aux_task0.loss_heatmap: 0.5342, aux_task0.loss_bbox: 0.2239, aux_task1.loss_heatmap: 0.7027, aux_task1.loss_bbox: 0.3067, aux_task2.loss_heatmap: 0.6753, aux_task2.loss_bbox: 0.3166, aux_task3.loss_heatmap: 0.5460, aux_task3.loss_bbox: 0.2750, aux_task4.loss_heatmap: 0.4199, aux_task4.loss_bbox: 0.2690, aux_task5.loss_heatmap: 0.4300, aux_task5.loss_bbox: 0.2874, loss: 12.0331, grad_norm: 26.0364
2025-05-06 06:33:36,789 - mmdet - INFO - Epoch [14][500/773]	lr: 6.829e-05, eta: 1:56:51, time: 1.389, data_time: 0.004, memory: 8822, loss_cls: 0.4043, loss_bbox: 0.7252, d0.loss_cls: 0.4466, d0.loss_bbox: 0.8656, d1.loss_cls: 0.4262, d1.loss_bbox: 0.7677, d2.loss_cls: 0.4111, d2.loss_bbox: 0.7509, d3.loss_cls: 0.4106, d3.loss_bbox: 0.7362, d4.loss_cls: 0.4041, d4.loss_bbox: 0.7297, aux_task0.loss_heatmap: 0.5375, aux_task0.loss_bbox: 0.2203, aux_task1.loss_heatmap: 0.7105, aux_task1.loss_bbox: 0.2978, aux_task2.loss_heatmap: 0.6841, aux_task2.loss_bbox: 0.3283, aux_task3.loss_heatmap: 0.5515, aux_task3.loss_bbox: 0.2809, aux_task4.loss_heatmap: 0.3868, aux_task4.loss_bbox: 0.2592, aux_task5.loss_heatmap: 0.4376, aux_task5.loss_bbox: 0.2871, loss: 12.0596, grad_norm: 25.1836
2025-05-06 06:34:45,826 - mmdet - INFO - Epoch [14][550/773]	lr: 6.724e-05, eta: 1:55:39, time: 1.381, data_time: 0.005, memory: 8822, loss_cls: 0.4032, loss_bbox: 0.7179, d0.loss_cls: 0.4411, d0.loss_bbox: 0.8510, d1.loss_cls: 0.4213, d1.loss_bbox: 0.7578, d2.loss_cls: 0.4091, d2.loss_bbox: 0.7412, d3.loss_cls: 0.4088, d3.loss_bbox: 0.7271, d4.loss_cls: 0.4033, d4.loss_bbox: 0.7210, aux_task0.loss_heatmap: 0.5453, aux_task0.loss_bbox: 0.2230, aux_task1.loss_heatmap: 0.7249, aux_task1.loss_bbox: 0.2987, aux_task2.loss_heatmap: 0.6479, aux_task2.loss_bbox: 0.3283, aux_task3.loss_heatmap: 0.5661, aux_task3.loss_bbox: 0.2878, aux_task4.loss_heatmap: 0.3863, aux_task4.loss_bbox: 0.2627, aux_task5.loss_heatmap: 0.4158, aux_task5.loss_bbox: 0.2881, loss: 11.9775, grad_norm: 27.1355
2025-05-06 06:35:54,974 - mmdet - INFO - Epoch [14][600/773]	lr: 6.618e-05, eta: 1:54:26, time: 1.383, data_time: 0.005, memory: 8822, loss_cls: 0.3993, loss_bbox: 0.7292, d0.loss_cls: 0.4376, d0.loss_bbox: 0.8676, d1.loss_cls: 0.4198, d1.loss_bbox: 0.7699, d2.loss_cls: 0.4057, d2.loss_bbox: 0.7518, d3.loss_cls: 0.4038, d3.loss_bbox: 0.7381, d4.loss_cls: 0.3979, d4.loss_bbox: 0.7344, aux_task0.loss_heatmap: 0.5354, aux_task0.loss_bbox: 0.2258, aux_task1.loss_heatmap: 0.7284, aux_task1.loss_bbox: 0.3013, aux_task2.loss_heatmap: 0.6436, aux_task2.loss_bbox: 0.3269, aux_task3.loss_heatmap: 0.5684, aux_task3.loss_bbox: 0.2842, aux_task4.loss_heatmap: 0.3709, aux_task4.loss_bbox: 0.2650, aux_task5.loss_heatmap: 0.4109, aux_task5.loss_bbox: 0.2862, loss: 12.0020, grad_norm: 28.5676
2025-05-06 06:37:04,769 - mmdet - INFO - Epoch [14][650/773]	lr: 6.512e-05, eta: 1:53:14, time: 1.396, data_time: 0.005, memory: 8822, loss_cls: 0.3923, loss_bbox: 0.7134, d0.loss_cls: 0.4313, d0.loss_bbox: 0.8548, d1.loss_cls: 0.4139, d1.loss_bbox: 0.7546, d2.loss_cls: 0.4012, d2.loss_bbox: 0.7363, d3.loss_cls: 0.3960, d3.loss_bbox: 0.7245, d4.loss_cls: 0.3927, d4.loss_bbox: 0.7166, aux_task0.loss_heatmap: 0.4975, aux_task0.loss_bbox: 0.2120, aux_task1.loss_heatmap: 0.7063, aux_task1.loss_bbox: 0.2999, aux_task2.loss_heatmap: 0.6233, aux_task2.loss_bbox: 0.3156, aux_task3.loss_heatmap: 0.5628, aux_task3.loss_bbox: 0.2694, aux_task4.loss_heatmap: 0.4070, aux_task4.loss_bbox: 0.2591, aux_task5.loss_heatmap: 0.4183, aux_task5.loss_bbox: 0.2877, loss: 11.7865, grad_norm: 29.2509
2025-05-06 06:38:20,517 - mmdet - INFO - Epoch [14][700/773]	lr: 6.407e-05, eta: 1:52:05, time: 1.515, data_time: 0.004, memory: 8822, loss_cls: 0.3812, loss_bbox: 0.7166, d0.loss_cls: 0.4191, d0.loss_bbox: 0.8488, d1.loss_cls: 0.4020, d1.loss_bbox: 0.7526, d2.loss_cls: 0.3899, d2.loss_bbox: 0.7361, d3.loss_cls: 0.3865, d3.loss_bbox: 0.7248, d4.loss_cls: 0.3811, d4.loss_bbox: 0.7207, aux_task0.loss_heatmap: 0.5412, aux_task0.loss_bbox: 0.2228, aux_task1.loss_heatmap: 0.6842, aux_task1.loss_bbox: 0.2862, aux_task2.loss_heatmap: 0.6928, aux_task2.loss_bbox: 0.3219, aux_task3.loss_heatmap: 0.4677, aux_task3.loss_bbox: 0.2698, aux_task4.loss_heatmap: 0.3835, aux_task4.loss_bbox: 0.2600, aux_task5.loss_heatmap: 0.4218, aux_task5.loss_bbox: 0.2866, loss: 11.6978, grad_norm: 27.3994
2025-05-06 06:39:33,749 - mmdet - INFO - Epoch [14][750/773]	lr: 6.301e-05, eta: 1:50:54, time: 1.465, data_time: 0.005, memory: 8822, loss_cls: 0.3981, loss_bbox: 0.7201, d0.loss_cls: 0.4330, d0.loss_bbox: 0.8669, d1.loss_cls: 0.4140, d1.loss_bbox: 0.7648, d2.loss_cls: 0.4054, d2.loss_bbox: 0.7453, d3.loss_cls: 0.4037, d3.loss_bbox: 0.7302, d4.loss_cls: 0.3994, d4.loss_bbox: 0.7235, aux_task0.loss_heatmap: 0.5148, aux_task0.loss_bbox: 0.2160, aux_task1.loss_heatmap: 0.6998, aux_task1.loss_bbox: 0.3019, aux_task2.loss_heatmap: 0.6435, aux_task2.loss_bbox: 0.3391, aux_task3.loss_heatmap: 0.5603, aux_task3.loss_bbox: 0.2716, aux_task4.loss_heatmap: 0.3793, aux_task4.loss_bbox: 0.2591, aux_task5.loss_heatmap: 0.4646, aux_task5.loss_bbox: 0.2911, loss: 11.9456, grad_norm: 30.9034
2025-05-06 06:40:05,902 - mmdet - INFO - Saving checkpoint at 14 epochs
2025-05-06 06:41:26,317 - mmdet - INFO - Epoch [15][50/773]	lr: 6.146e-05, eta: 1:48:59, time: 1.573, data_time: 0.194, memory: 8822, loss_cls: 0.4080, loss_bbox: 0.7280, d0.loss_cls: 0.4427, d0.loss_bbox: 0.8596, d1.loss_cls: 0.4260, d1.loss_bbox: 0.7634, d2.loss_cls: 0.4126, d2.loss_bbox: 0.7502, d3.loss_cls: 0.4118, d3.loss_bbox: 0.7384, d4.loss_cls: 0.4071, d4.loss_bbox: 0.7326, aux_task0.loss_heatmap: 0.5021, aux_task0.loss_bbox: 0.2151, aux_task1.loss_heatmap: 0.6762, aux_task1.loss_bbox: 0.2950, aux_task2.loss_heatmap: 0.7337, aux_task2.loss_bbox: 0.3278, aux_task3.loss_heatmap: 0.5366, aux_task3.loss_bbox: 0.2655, aux_task4.loss_heatmap: 0.4204, aux_task4.loss_bbox: 0.2571, aux_task5.loss_heatmap: 0.4235, aux_task5.loss_bbox: 0.2879, loss: 12.0213, grad_norm: 30.3001
2025-05-06 06:42:35,421 - mmdet - INFO - Epoch [15][100/773]	lr: 6.041e-05, eta: 1:47:47, time: 1.382, data_time: 0.005, memory: 8822, loss_cls: 0.3999, loss_bbox: 0.7233, d0.loss_cls: 0.4338, d0.loss_bbox: 0.8591, d1.loss_cls: 0.4174, d1.loss_bbox: 0.7645, d2.loss_cls: 0.4066, d2.loss_bbox: 0.7484, d3.loss_cls: 0.4056, d3.loss_bbox: 0.7327, d4.loss_cls: 0.4003, d4.loss_bbox: 0.7270, aux_task0.loss_heatmap: 0.5257, aux_task0.loss_bbox: 0.2158, aux_task1.loss_heatmap: 0.7142, aux_task1.loss_bbox: 0.2972, aux_task2.loss_heatmap: 0.7448, aux_task2.loss_bbox: 0.3170, aux_task3.loss_heatmap: 0.5222, aux_task3.loss_bbox: 0.2642, aux_task4.loss_heatmap: 0.4256, aux_task4.loss_bbox: 0.2661, aux_task5.loss_heatmap: 0.4224, aux_task5.loss_bbox: 0.2892, loss: 12.0231, grad_norm: 25.1301
2025-05-06 06:43:43,196 - mmdet - INFO - Epoch [15][150/773]	lr: 5.935e-05, eta: 1:46:34, time: 1.355, data_time: 0.004, memory: 8822, loss_cls: 0.3874, loss_bbox: 0.6892, d0.loss_cls: 0.4303, d0.loss_bbox: 0.8352, d1.loss_cls: 0.4109, d1.loss_bbox: 0.7340, d2.loss_cls: 0.3974, d2.loss_bbox: 0.7168, d3.loss_cls: 0.3945, d3.loss_bbox: 0.6992, d4.loss_cls: 0.3887, d4.loss_bbox: 0.6943, aux_task0.loss_heatmap: 0.4747, aux_task0.loss_bbox: 0.2048, aux_task1.loss_heatmap: 0.6536, aux_task1.loss_bbox: 0.2863, aux_task2.loss_heatmap: 0.6617, aux_task2.loss_bbox: 0.3387, aux_task3.loss_heatmap: 0.5345, aux_task3.loss_bbox: 0.2784, aux_task4.loss_heatmap: 0.3854, aux_task4.loss_bbox: 0.2512, aux_task5.loss_heatmap: 0.4146, aux_task5.loss_bbox: 0.2803, loss: 11.5419, grad_norm: 29.3711
2025-05-06 06:44:52,412 - mmdet - INFO - Epoch [15][200/773]	lr: 5.829e-05, eta: 1:45:22, time: 1.383, data_time: 0.005, memory: 8822, loss_cls: 0.3857, loss_bbox: 0.7047, d0.loss_cls: 0.4249, d0.loss_bbox: 0.8418, d1.loss_cls: 0.4096, d1.loss_bbox: 0.7415, d2.loss_cls: 0.3944, d2.loss_bbox: 0.7245, d3.loss_cls: 0.3916, d3.loss_bbox: 0.7125, d4.loss_cls: 0.3865, d4.loss_bbox: 0.7074, aux_task0.loss_heatmap: 0.4966, aux_task0.loss_bbox: 0.2167, aux_task1.loss_heatmap: 0.6699, aux_task1.loss_bbox: 0.2764, aux_task2.loss_heatmap: 0.6477, aux_task2.loss_bbox: 0.3211, aux_task3.loss_heatmap: 0.5761, aux_task3.loss_bbox: 0.2748, aux_task4.loss_heatmap: 0.4130, aux_task4.loss_bbox: 0.2670, aux_task5.loss_heatmap: 0.4231, aux_task5.loss_bbox: 0.2826, loss: 11.6902, grad_norm: 27.2989
2025-05-06 06:46:05,663 - mmdet - INFO - Epoch [15][250/773]	lr: 5.724e-05, eta: 1:44:12, time: 1.465, data_time: 0.006, memory: 8822, loss_cls: 0.3935, loss_bbox: 0.7094, d0.loss_cls: 0.4302, d0.loss_bbox: 0.8472, d1.loss_cls: 0.4130, d1.loss_bbox: 0.7491, d2.loss_cls: 0.4015, d2.loss_bbox: 0.7316, d3.loss_cls: 0.3995, d3.loss_bbox: 0.7174, d4.loss_cls: 0.3941, d4.loss_bbox: 0.7113, aux_task0.loss_heatmap: 0.5083, aux_task0.loss_bbox: 0.2186, aux_task1.loss_heatmap: 0.6782, aux_task1.loss_bbox: 0.2966, aux_task2.loss_heatmap: 0.6056, aux_task2.loss_bbox: 0.3001, aux_task3.loss_heatmap: 0.4831, aux_task3.loss_bbox: 0.2714, aux_task4.loss_heatmap: 0.4351, aux_task4.loss_bbox: 0.2665, aux_task5.loss_heatmap: 0.4548, aux_task5.loss_bbox: 0.2836, loss: 11.6996, grad_norm: 26.8648
2025-05-06 06:47:35,340 - mmdet - INFO - Epoch [15][300/773]	lr: 5.618e-05, eta: 1:43:08, time: 1.794, data_time: 0.005, memory: 8822, loss_cls: 0.3928, loss_bbox: 0.7014, d0.loss_cls: 0.4313, d0.loss_bbox: 0.8434, d1.loss_cls: 0.4113, d1.loss_bbox: 0.7435, d2.loss_cls: 0.3998, d2.loss_bbox: 0.7240, d3.loss_cls: 0.3963, d3.loss_bbox: 0.7110, d4.loss_cls: 0.3924, d4.loss_bbox: 0.7046, aux_task0.loss_heatmap: 0.4851, aux_task0.loss_bbox: 0.2047, aux_task1.loss_heatmap: 0.7340, aux_task1.loss_bbox: 0.2970, aux_task2.loss_heatmap: 0.5961, aux_task2.loss_bbox: 0.3078, aux_task3.loss_heatmap: 0.5214, aux_task3.loss_bbox: 0.2684, aux_task4.loss_heatmap: 0.3859, aux_task4.loss_bbox: 0.2583, aux_task5.loss_heatmap: 0.4536, aux_task5.loss_bbox: 0.2909, loss: 11.6550, grad_norm: 26.5448
2025-05-06 06:48:44,883 - mmdet - INFO - Epoch [15][350/773]	lr: 5.513e-05, eta: 1:41:56, time: 1.391, data_time: 0.004, memory: 8822, loss_cls: 0.3920, loss_bbox: 0.7146, d0.loss_cls: 0.4278, d0.loss_bbox: 0.8441, d1.loss_cls: 0.4096, d1.loss_bbox: 0.7520, d2.loss_cls: 0.3987, d2.loss_bbox: 0.7344, d3.loss_cls: 0.3962, d3.loss_bbox: 0.7220, d4.loss_cls: 0.3909, d4.loss_bbox: 0.7182, aux_task0.loss_heatmap: 0.5258, aux_task0.loss_bbox: 0.2147, aux_task1.loss_heatmap: 0.7303, aux_task1.loss_bbox: 0.3031, aux_task2.loss_heatmap: 0.6834, aux_task2.loss_bbox: 0.3200, aux_task3.loss_heatmap: 0.5477, aux_task3.loss_bbox: 0.2595, aux_task4.loss_heatmap: 0.3954, aux_task4.loss_bbox: 0.2591, aux_task5.loss_heatmap: 0.4353, aux_task5.loss_bbox: 0.2808, loss: 11.8556, grad_norm: 26.2806
2025-05-06 06:49:57,539 - mmdet - INFO - Epoch [15][400/773]	lr: 5.408e-05, eta: 1:40:45, time: 1.452, data_time: 0.004, memory: 8822, loss_cls: 0.3930, loss_bbox: 0.7126, d0.loss_cls: 0.4276, d0.loss_bbox: 0.8534, d1.loss_cls: 0.4109, d1.loss_bbox: 0.7538, d2.loss_cls: 0.3995, d2.loss_bbox: 0.7366, d3.loss_cls: 0.3961, d3.loss_bbox: 0.7227, d4.loss_cls: 0.3914, d4.loss_bbox: 0.7174, aux_task0.loss_heatmap: 0.5132, aux_task0.loss_bbox: 0.2174, aux_task1.loss_heatmap: 0.6964, aux_task1.loss_bbox: 0.3009, aux_task2.loss_heatmap: 0.7259, aux_task2.loss_bbox: 0.3250, aux_task3.loss_heatmap: 0.4677, aux_task3.loss_bbox: 0.2643, aux_task4.loss_heatmap: 0.3972, aux_task4.loss_bbox: 0.2725, aux_task5.loss_heatmap: 0.4154, aux_task5.loss_bbox: 0.2825, loss: 11.7935, grad_norm: 27.5750
2025-05-06 06:51:10,984 - mmdet - INFO - Epoch [15][450/773]	lr: 5.303e-05, eta: 1:39:35, time: 1.469, data_time: 0.005, memory: 8822, loss_cls: 0.3894, loss_bbox: 0.7057, d0.loss_cls: 0.4286, d0.loss_bbox: 0.8457, d1.loss_cls: 0.4110, d1.loss_bbox: 0.7462, d2.loss_cls: 0.3982, d2.loss_bbox: 0.7281, d3.loss_cls: 0.3947, d3.loss_bbox: 0.7160, d4.loss_cls: 0.3883, d4.loss_bbox: 0.7105, aux_task0.loss_heatmap: 0.4954, aux_task0.loss_bbox: 0.2140, aux_task1.loss_heatmap: 0.6903, aux_task1.loss_bbox: 0.2910, aux_task2.loss_heatmap: 0.6761, aux_task2.loss_bbox: 0.3186, aux_task3.loss_heatmap: 0.5414, aux_task3.loss_bbox: 0.2689, aux_task4.loss_heatmap: 0.4147, aux_task4.loss_bbox: 0.2616, aux_task5.loss_heatmap: 0.4114, aux_task5.loss_bbox: 0.2810, loss: 11.7268, grad_norm: 25.9951
2025-05-06 06:52:24,185 - mmdet - INFO - Epoch [15][500/773]	lr: 5.199e-05, eta: 1:38:24, time: 1.464, data_time: 0.005, memory: 8822, loss_cls: 0.4009, loss_bbox: 0.7102, d0.loss_cls: 0.4421, d0.loss_bbox: 0.8533, d1.loss_cls: 0.4280, d1.loss_bbox: 0.7484, d2.loss_cls: 0.4107, d2.loss_bbox: 0.7328, d3.loss_cls: 0.4097, d3.loss_bbox: 0.7193, d4.loss_cls: 0.4023, d4.loss_bbox: 0.7141, aux_task0.loss_heatmap: 0.5574, aux_task0.loss_bbox: 0.2179, aux_task1.loss_heatmap: 0.6693, aux_task1.loss_bbox: 0.2921, aux_task2.loss_heatmap: 0.6763, aux_task2.loss_bbox: 0.3281, aux_task3.loss_heatmap: 0.5598, aux_task3.loss_bbox: 0.2746, aux_task4.loss_heatmap: 0.3940, aux_task4.loss_bbox: 0.2557, aux_task5.loss_heatmap: 0.4094, aux_task5.loss_bbox: 0.2862, loss: 11.8927, grad_norm: 26.8825
2025-05-06 06:53:33,392 - mmdet - INFO - Epoch [15][550/773]	lr: 5.095e-05, eta: 1:37:12, time: 1.385, data_time: 0.005, memory: 8822, loss_cls: 0.3837, loss_bbox: 0.7035, d0.loss_cls: 0.4223, d0.loss_bbox: 0.8382, d1.loss_cls: 0.4056, d1.loss_bbox: 0.7416, d2.loss_cls: 0.3926, d2.loss_bbox: 0.7244, d3.loss_cls: 0.3904, d3.loss_bbox: 0.7107, d4.loss_cls: 0.3830, d4.loss_bbox: 0.7074, aux_task0.loss_heatmap: 0.5368, aux_task0.loss_bbox: 0.2194, aux_task1.loss_heatmap: 0.7033, aux_task1.loss_bbox: 0.2910, aux_task2.loss_heatmap: 0.6429, aux_task2.loss_bbox: 0.3286, aux_task3.loss_heatmap: 0.5232, aux_task3.loss_bbox: 0.2763, aux_task4.loss_heatmap: 0.3801, aux_task4.loss_bbox: 0.2574, aux_task5.loss_heatmap: 0.4173, aux_task5.loss_bbox: 0.2924, loss: 11.6721, grad_norm: 27.5504
2025-05-06 06:54:41,258 - mmdet - INFO - Epoch [15][600/773]	lr: 4.991e-05, eta: 1:35:59, time: 1.357, data_time: 0.004, memory: 8822, loss_cls: 0.3760, loss_bbox: 0.6946, d0.loss_cls: 0.4112, d0.loss_bbox: 0.8329, d1.loss_cls: 0.3973, d1.loss_bbox: 0.7329, d2.loss_cls: 0.3849, d2.loss_bbox: 0.7155, d3.loss_cls: 0.3813, d3.loss_bbox: 0.7018, d4.loss_cls: 0.3758, d4.loss_bbox: 0.6975, aux_task0.loss_heatmap: 0.5014, aux_task0.loss_bbox: 0.2103, aux_task1.loss_heatmap: 0.7023, aux_task1.loss_bbox: 0.2864, aux_task2.loss_heatmap: 0.6139, aux_task2.loss_bbox: 0.3182, aux_task3.loss_heatmap: 0.5836, aux_task3.loss_bbox: 0.2884, aux_task4.loss_heatmap: 0.3724, aux_task4.loss_bbox: 0.2610, aux_task5.loss_heatmap: 0.3835, aux_task5.loss_bbox: 0.2856, loss: 11.5090, grad_norm: 26.5595
2025-05-06 06:55:50,124 - mmdet - INFO - Epoch [15][650/773]	lr: 4.887e-05, eta: 1:34:47, time: 1.377, data_time: 0.004, memory: 8822, loss_cls: 0.3779, loss_bbox: 0.6952, d0.loss_cls: 0.4165, d0.loss_bbox: 0.8371, d1.loss_cls: 0.4009, d1.loss_bbox: 0.7376, d2.loss_cls: 0.3869, d2.loss_bbox: 0.7182, d3.loss_cls: 0.3843, d3.loss_bbox: 0.7048, d4.loss_cls: 0.3781, d4.loss_bbox: 0.6996, aux_task0.loss_heatmap: 0.4881, aux_task0.loss_bbox: 0.2112, aux_task1.loss_heatmap: 0.6986, aux_task1.loss_bbox: 0.2922, aux_task2.loss_heatmap: 0.5972, aux_task2.loss_bbox: 0.3056, aux_task3.loss_heatmap: 0.5759, aux_task3.loss_bbox: 0.2774, aux_task4.loss_heatmap: 0.3922, aux_task4.loss_bbox: 0.2558, aux_task5.loss_heatmap: 0.4295, aux_task5.loss_bbox: 0.2862, loss: 11.5469, grad_norm: 27.0021
2025-05-06 06:56:57,945 - mmdet - INFO - Epoch [15][700/773]	lr: 4.784e-05, eta: 1:33:35, time: 1.356, data_time: 0.004, memory: 8822, loss_cls: 0.3766, loss_bbox: 0.6874, d0.loss_cls: 0.4195, d0.loss_bbox: 0.8321, d1.loss_cls: 0.3992, d1.loss_bbox: 0.7292, d2.loss_cls: 0.3838, d2.loss_bbox: 0.7122, d3.loss_cls: 0.3830, d3.loss_bbox: 0.6962, d4.loss_cls: 0.3760, d4.loss_bbox: 0.6920, aux_task0.loss_heatmap: 0.5232, aux_task0.loss_bbox: 0.2133, aux_task1.loss_heatmap: 0.6804, aux_task1.loss_bbox: 0.2801, aux_task2.loss_heatmap: 0.6512, aux_task2.loss_bbox: 0.3052, aux_task3.loss_heatmap: 0.5387, aux_task3.loss_bbox: 0.2663, aux_task4.loss_heatmap: 0.3595, aux_task4.loss_bbox: 0.2532, aux_task5.loss_heatmap: 0.4072, aux_task5.loss_bbox: 0.2836, loss: 11.4493, grad_norm: 27.6034
2025-05-06 06:58:06,375 - mmdet - INFO - Epoch [15][750/773]	lr: 4.682e-05, eta: 1:32:22, time: 1.369, data_time: 0.005, memory: 8822, loss_cls: 0.3773, loss_bbox: 0.6920, d0.loss_cls: 0.4196, d0.loss_bbox: 0.8379, d1.loss_cls: 0.3987, d1.loss_bbox: 0.7358, d2.loss_cls: 0.3873, d2.loss_bbox: 0.7158, d3.loss_cls: 0.3823, d3.loss_bbox: 0.7030, d4.loss_cls: 0.3774, d4.loss_bbox: 0.6965, aux_task0.loss_heatmap: 0.5229, aux_task0.loss_bbox: 0.2169, aux_task1.loss_heatmap: 0.6535, aux_task1.loss_bbox: 0.2828, aux_task2.loss_heatmap: 0.6450, aux_task2.loss_bbox: 0.3247, aux_task3.loss_heatmap: 0.5453, aux_task3.loss_bbox: 0.2627, aux_task4.loss_heatmap: 0.3846, aux_task4.loss_bbox: 0.2513, aux_task5.loss_heatmap: 0.4478, aux_task5.loss_bbox: 0.2918, loss: 11.5532, grad_norm: 26.9494
2025-05-06 06:59:06,085 - mmdet - INFO - Saving checkpoint at 15 epochs
2025-05-06 07:24:39,633 - mmdet - INFO - Exp name: lidar_0075v_900q_hednet_hednet_split40_256.py
2025-05-06 07:24:41,793 - mmdet - INFO - Epoch(val) [15][1505]	pts_bbox_NuScenes/car_AP_dist_0.5: 0.5329, pts_bbox_NuScenes/car_AP_dist_1.0: 0.6785, pts_bbox_NuScenes/car_AP_dist_2.0: 0.7465, pts_bbox_NuScenes/car_AP_dist_4.0: 0.7909, pts_bbox_NuScenes/car_trans_err: 0.2682, pts_bbox_NuScenes/car_scale_err: 0.1688, pts_bbox_NuScenes/car_orient_err: 0.3080, pts_bbox_NuScenes/car_vel_err: 1.4628, pts_bbox_NuScenes/car_attr_err: 0.4241, pts_bbox_NuScenes/mATE: 0.4511, pts_bbox_NuScenes/mASE: 0.2915, pts_bbox_NuScenes/mAOE: 0.9042, pts_bbox_NuScenes/mAVE: 1.0329, pts_bbox_NuScenes/mAAE: 0.4197, pts_bbox_NuScenes/truck_AP_dist_0.5: 0.1405, pts_bbox_NuScenes/truck_AP_dist_1.0: 0.3156, pts_bbox_NuScenes/truck_AP_dist_2.0: 0.4247, pts_bbox_NuScenes/truck_AP_dist_4.0: 0.4708, pts_bbox_NuScenes/truck_trans_err: 0.4895, pts_bbox_NuScenes/truck_scale_err: 0.2416, pts_bbox_NuScenes/truck_orient_err: 0.3837, pts_bbox_NuScenes/truck_vel_err: 1.0099, pts_bbox_NuScenes/truck_attr_err: 0.3745, pts_bbox_NuScenes/construction_vehicle_AP_dist_0.5: 0.0005, pts_bbox_NuScenes/construction_vehicle_AP_dist_1.0: 0.0395, pts_bbox_NuScenes/construction_vehicle_AP_dist_2.0: 0.1352, pts_bbox_NuScenes/construction_vehicle_AP_dist_4.0: 0.2221, pts_bbox_NuScenes/construction_vehicle_trans_err: 0.7903, pts_bbox_NuScenes/construction_vehicle_scale_err: 0.4704, pts_bbox_NuScenes/construction_vehicle_orient_err: 1.3036, pts_bbox_NuScenes/construction_vehicle_vel_err: 0.1252, pts_bbox_NuScenes/construction_vehicle_attr_err: 0.3196, pts_bbox_NuScenes/bus_AP_dist_0.5: 0.1300, pts_bbox_NuScenes/bus_AP_dist_1.0: 0.3879, pts_bbox_NuScenes/bus_AP_dist_2.0: 0.5551, pts_bbox_NuScenes/bus_AP_dist_4.0: 0.6237, pts_bbox_NuScenes/bus_trans_err: 0.5600, pts_bbox_NuScenes/bus_scale_err: 0.2051, pts_bbox_NuScenes/bus_orient_err: 0.6986, pts_bbox_NuScenes/bus_vel_err: 2.2539, pts_bbox_NuScenes/bus_attr_err: 0.6530, pts_bbox_NuScenes/trailer_AP_dist_0.5: 0.0371, pts_bbox_NuScenes/trailer_AP_dist_1.0: 0.1420, pts_bbox_NuScenes/trailer_AP_dist_2.0: 0.2181, pts_bbox_NuScenes/trailer_AP_dist_4.0: 0.2646, pts_bbox_NuScenes/trailer_trans_err: 0.6373, pts_bbox_NuScenes/trailer_scale_err: 0.2518, pts_bbox_NuScenes/trailer_orient_err: 1.4863, pts_bbox_NuScenes/trailer_vel_err: 0.3391, pts_bbox_NuScenes/trailer_attr_err: 0.2206, pts_bbox_NuScenes/barrier_AP_dist_0.5: 0.1752, pts_bbox_NuScenes/barrier_AP_dist_1.0: 0.4190, pts_bbox_NuScenes/barrier_AP_dist_2.0: 0.5790, pts_bbox_NuScenes/barrier_AP_dist_4.0: 0.6316, pts_bbox_NuScenes/barrier_trans_err: 0.5407, pts_bbox_NuScenes/barrier_scale_err: 0.3087, pts_bbox_NuScenes/barrier_orient_err: 0.4097, pts_bbox_NuScenes/barrier_vel_err: nan, pts_bbox_NuScenes/barrier_attr_err: nan, pts_bbox_NuScenes/motorcycle_AP_dist_0.5: 0.1907, pts_bbox_NuScenes/motorcycle_AP_dist_1.0: 0.2455, pts_bbox_NuScenes/motorcycle_AP_dist_2.0: 0.2588, pts_bbox_NuScenes/motorcycle_AP_dist_4.0: 0.2704, pts_bbox_NuScenes/motorcycle_trans_err: 0.3083, pts_bbox_NuScenes/motorcycle_scale_err: 0.2704, pts_bbox_NuScenes/motorcycle_orient_err: 0.9466, pts_bbox_NuScenes/motorcycle_vel_err: 1.6054, pts_bbox_NuScenes/motorcycle_attr_err: 0.4608, pts_bbox_NuScenes/bicycle_AP_dist_0.5: 0.0548, pts_bbox_NuScenes/bicycle_AP_dist_1.0: 0.0639, pts_bbox_NuScenes/bicycle_AP_dist_2.0: 0.0680, pts_bbox_NuScenes/bicycle_AP_dist_4.0: 0.0751, pts_bbox_NuScenes/bicycle_trans_err: 0.2717, pts_bbox_NuScenes/bicycle_scale_err: 0.3020, pts_bbox_NuScenes/bicycle_orient_err: 1.0658, pts_bbox_NuScenes/bicycle_vel_err: 0.5269, pts_bbox_NuScenes/bicycle_attr_err: 0.1181, pts_bbox_NuScenes/pedestrian_AP_dist_0.5: 0.4513, pts_bbox_NuScenes/pedestrian_AP_dist_1.0: 0.6496, pts_bbox_NuScenes/pedestrian_AP_dist_2.0: 0.7017, pts_bbox_NuScenes/pedestrian_AP_dist_4.0: 0.7335, pts_bbox_NuScenes/pedestrian_trans_err: 0.3823, pts_bbox_NuScenes/pedestrian_scale_err: 0.2952, pts_bbox_NuScenes/pedestrian_orient_err: 1.5352, pts_bbox_NuScenes/pedestrian_vel_err: 0.9401, pts_bbox_NuScenes/pedestrian_attr_err: 0.7872, pts_bbox_NuScenes/traffic_cone_AP_dist_0.5: 0.3550, pts_bbox_NuScenes/traffic_cone_AP_dist_1.0: 0.4049, pts_bbox_NuScenes/traffic_cone_AP_dist_2.0: 0.4485, pts_bbox_NuScenes/traffic_cone_AP_dist_4.0: 0.5124, pts_bbox_NuScenes/traffic_cone_trans_err: 0.2625, pts_bbox_NuScenes/traffic_cone_scale_err: 0.4010, pts_bbox_NuScenes/traffic_cone_orient_err: nan, pts_bbox_NuScenes/traffic_cone_vel_err: nan, pts_bbox_NuScenes/traffic_cone_attr_err: nan, pts_bbox_NuScenes/NDS: 0.3702, pts_bbox_NuScenes/mAP: 0.3536
2025-05-06 07:24:41,817 - mmdet - INFO - No ObjectSample now!
2025-05-06 07:25:53,936 - mmdet - INFO - Epoch [16][50/773]	lr: 4.533e-05, eta: 1:30:27, time: 1.421, data_time: 0.075, memory: 8822, loss_cls: 0.4317, loss_bbox: 0.6791, d0.loss_cls: 0.4512, d0.loss_bbox: 0.8210, d1.loss_cls: 0.4365, d1.loss_bbox: 0.7175, d2.loss_cls: 0.4288, d2.loss_bbox: 0.7003, d3.loss_cls: 0.4284, d3.loss_bbox: 0.6876, d4.loss_cls: 0.4291, d4.loss_bbox: 0.6826, aux_task0.loss_heatmap: 0.4907, aux_task0.loss_bbox: 0.2070, aux_task1.loss_heatmap: 0.6897, aux_task1.loss_bbox: 0.2232, aux_task2.loss_heatmap: 0.5316, aux_task2.loss_bbox: 0.1747, aux_task3.loss_heatmap: 0.2998, aux_task3.loss_bbox: 0.1044, aux_task4.loss_heatmap: 0.5898, aux_task4.loss_bbox: 0.1409, aux_task5.loss_heatmap: 0.5118, aux_task5.loss_bbox: 0.2718, loss: 11.1292, grad_norm: 35.9640
2025-05-06 07:27:00,848 - mmdet - INFO - Epoch [16][100/773]	lr: 4.431e-05, eta: 1:29:15, time: 1.338, data_time: 0.005, memory: 8822, loss_cls: 0.4044, loss_bbox: 0.6837, d0.loss_cls: 0.4215, d0.loss_bbox: 0.8273, d1.loss_cls: 0.4079, d1.loss_bbox: 0.7235, d2.loss_cls: 0.4050, d2.loss_bbox: 0.7025, d3.loss_cls: 0.4040, d3.loss_bbox: 0.6926, d4.loss_cls: 0.4053, d4.loss_bbox: 0.6858, aux_task0.loss_heatmap: 0.4864, aux_task0.loss_bbox: 0.2023, aux_task1.loss_heatmap: 0.6582, aux_task1.loss_bbox: 0.2185, aux_task2.loss_heatmap: 0.5089, aux_task2.loss_bbox: 0.1806, aux_task3.loss_heatmap: 0.3840, aux_task3.loss_bbox: 0.1407, aux_task4.loss_heatmap: 0.4482, aux_task4.loss_bbox: 0.1305, aux_task5.loss_heatmap: 0.4690, aux_task5.loss_bbox: 0.2554, loss: 10.8462, grad_norm: 34.3684
2025-05-06 07:28:08,773 - mmdet - INFO - Epoch [16][150/773]	lr: 4.330e-05, eta: 1:28:03, time: 1.358, data_time: 0.004, memory: 8822, loss_cls: 0.4091, loss_bbox: 0.7048, d0.loss_cls: 0.4361, d0.loss_bbox: 0.8421, d1.loss_cls: 0.4162, d1.loss_bbox: 0.7384, d2.loss_cls: 0.4102, d2.loss_bbox: 0.7183, d3.loss_cls: 0.4100, d3.loss_bbox: 0.7105, d4.loss_cls: 0.4074, d4.loss_bbox: 0.7057, aux_task0.loss_heatmap: 0.5001, aux_task0.loss_bbox: 0.2086, aux_task1.loss_heatmap: 0.6248, aux_task1.loss_bbox: 0.2037, aux_task2.loss_heatmap: 0.3926, aux_task2.loss_bbox: 0.1512, aux_task3.loss_heatmap: 0.3823, aux_task3.loss_bbox: 0.1436, aux_task4.loss_heatmap: 0.5011, aux_task4.loss_bbox: 0.1452, aux_task5.loss_heatmap: 0.4747, aux_task5.loss_bbox: 0.2613, loss: 10.8981, grad_norm: 35.6803
2025-05-06 07:29:16,073 - mmdet - INFO - Epoch [16][200/773]	lr: 4.230e-05, eta: 1:26:50, time: 1.346, data_time: 0.005, memory: 8822, loss_cls: 0.3935, loss_bbox: 0.6953, d0.loss_cls: 0.4228, d0.loss_bbox: 0.8324, d1.loss_cls: 0.4067, d1.loss_bbox: 0.7328, d2.loss_cls: 0.3986, d2.loss_bbox: 0.7139, d3.loss_cls: 0.3969, d3.loss_bbox: 0.7030, d4.loss_cls: 0.3936, d4.loss_bbox: 0.6974, aux_task0.loss_heatmap: 0.4964, aux_task0.loss_bbox: 0.2044, aux_task1.loss_heatmap: 0.6867, aux_task1.loss_bbox: 0.2232, aux_task2.loss_heatmap: 0.4506, aux_task2.loss_bbox: 0.1592, aux_task3.loss_heatmap: 0.3152, aux_task3.loss_bbox: 0.1260, aux_task4.loss_heatmap: 0.4592, aux_task4.loss_bbox: 0.1505, aux_task5.loss_heatmap: 0.4454, aux_task5.loss_bbox: 0.2665, loss: 10.7701, grad_norm: 32.5866
2025-05-06 07:30:23,200 - mmdet - INFO - Epoch [16][250/773]	lr: 4.130e-05, eta: 1:25:38, time: 1.343, data_time: 0.004, memory: 8822, loss_cls: 0.4077, loss_bbox: 0.6893, d0.loss_cls: 0.4361, d0.loss_bbox: 0.8397, d1.loss_cls: 0.4237, d1.loss_bbox: 0.7311, d2.loss_cls: 0.4149, d2.loss_bbox: 0.7110, d3.loss_cls: 0.4109, d3.loss_bbox: 0.6978, d4.loss_cls: 0.4071, d4.loss_bbox: 0.6928, aux_task0.loss_heatmap: 0.5068, aux_task0.loss_bbox: 0.2070, aux_task1.loss_heatmap: 0.6926, aux_task1.loss_bbox: 0.2212, aux_task2.loss_heatmap: 0.4664, aux_task2.loss_bbox: 0.1582, aux_task3.loss_heatmap: 0.4076, aux_task3.loss_bbox: 0.1432, aux_task4.loss_heatmap: 0.4288, aux_task4.loss_bbox: 0.1336, aux_task5.loss_heatmap: 0.4778, aux_task5.loss_bbox: 0.2455, loss: 10.9509, grad_norm: 37.4161
2025-05-06 07:31:30,128 - mmdet - INFO - Epoch [16][300/773]	lr: 4.030e-05, eta: 1:24:26, time: 1.339, data_time: 0.004, memory: 8822, loss_cls: 0.3975, loss_bbox: 0.6753, d0.loss_cls: 0.4242, d0.loss_bbox: 0.8239, d1.loss_cls: 0.4093, d1.loss_bbox: 0.7130, d2.loss_cls: 0.4001, d2.loss_bbox: 0.6942, d3.loss_cls: 0.3984, d3.loss_bbox: 0.6855, d4.loss_cls: 0.3965, d4.loss_bbox: 0.6804, aux_task0.loss_heatmap: 0.4641, aux_task0.loss_bbox: 0.2047, aux_task1.loss_heatmap: 0.6314, aux_task1.loss_bbox: 0.2151, aux_task2.loss_heatmap: 0.4368, aux_task2.loss_bbox: 0.1770, aux_task3.loss_heatmap: 0.3609, aux_task3.loss_bbox: 0.1277, aux_task4.loss_heatmap: 0.4386, aux_task4.loss_bbox: 0.1373, aux_task5.loss_heatmap: 0.4627, aux_task5.loss_bbox: 0.2644, loss: 10.6190, grad_norm: 33.9528
2025-05-06 07:32:37,466 - mmdet - INFO - Epoch [16][350/773]	lr: 3.932e-05, eta: 1:23:14, time: 1.347, data_time: 0.004, memory: 8822, loss_cls: 0.3949, loss_bbox: 0.6827, d0.loss_cls: 0.4231, d0.loss_bbox: 0.8294, d1.loss_cls: 0.4074, d1.loss_bbox: 0.7248, d2.loss_cls: 0.4003, d2.loss_bbox: 0.7035, d3.loss_cls: 0.3977, d3.loss_bbox: 0.6929, d4.loss_cls: 0.3950, d4.loss_bbox: 0.6864, aux_task0.loss_heatmap: 0.4622, aux_task0.loss_bbox: 0.2004, aux_task1.loss_heatmap: 0.6498, aux_task1.loss_bbox: 0.2173, aux_task2.loss_heatmap: 0.3613, aux_task2.loss_bbox: 0.1389, aux_task3.loss_heatmap: 0.3935, aux_task3.loss_bbox: 0.1401, aux_task4.loss_heatmap: 0.4187, aux_task4.loss_bbox: 0.1246, aux_task5.loss_heatmap: 0.4441, aux_task5.loss_bbox: 0.2699, loss: 10.5586, grad_norm: 32.6342
2025-05-06 07:33:44,466 - mmdet - INFO - Epoch [16][400/773]	lr: 3.834e-05, eta: 1:22:01, time: 1.340, data_time: 0.005, memory: 8822, loss_cls: 0.4080, loss_bbox: 0.6804, d0.loss_cls: 0.4364, d0.loss_bbox: 0.8186, d1.loss_cls: 0.4215, d1.loss_bbox: 0.7138, d2.loss_cls: 0.4158, d2.loss_bbox: 0.6942, d3.loss_cls: 0.4122, d3.loss_bbox: 0.6872, d4.loss_cls: 0.4080, d4.loss_bbox: 0.6838, aux_task0.loss_heatmap: 0.4844, aux_task0.loss_bbox: 0.2105, aux_task1.loss_heatmap: 0.6595, aux_task1.loss_bbox: 0.2257, aux_task2.loss_heatmap: 0.4454, aux_task2.loss_bbox: 0.1738, aux_task3.loss_heatmap: 0.3482, aux_task3.loss_bbox: 0.1286, aux_task4.loss_heatmap: 0.4743, aux_task4.loss_bbox: 0.1395, aux_task5.loss_heatmap: 0.4571, aux_task5.loss_bbox: 0.2522, loss: 10.7792, grad_norm: 31.6266
2025-05-06 07:34:51,608 - mmdet - INFO - Epoch [16][450/773]	lr: 3.737e-05, eta: 1:20:49, time: 1.342, data_time: 0.004, memory: 8822, loss_cls: 0.3970, loss_bbox: 0.6702, d0.loss_cls: 0.4188, d0.loss_bbox: 0.8105, d1.loss_cls: 0.4096, d1.loss_bbox: 0.7074, d2.loss_cls: 0.3965, d2.loss_bbox: 0.6906, d3.loss_cls: 0.3965, d3.loss_bbox: 0.6814, d4.loss_cls: 0.3957, d4.loss_bbox: 0.6739, aux_task0.loss_heatmap: 0.4700, aux_task0.loss_bbox: 0.2016, aux_task1.loss_heatmap: 0.6212, aux_task1.loss_bbox: 0.1965, aux_task2.loss_heatmap: 0.5429, aux_task2.loss_bbox: 0.1962, aux_task3.loss_heatmap: 0.3586, aux_task3.loss_bbox: 0.1197, aux_task4.loss_heatmap: 0.4429, aux_task4.loss_bbox: 0.1273, aux_task5.loss_heatmap: 0.4257, aux_task5.loss_bbox: 0.2637, loss: 10.6145, grad_norm: 31.9393
2025-05-06 07:36:03,094 - mmdet - INFO - Epoch [16][500/773]	lr: 3.640e-05, eta: 1:19:38, time: 1.430, data_time: 0.005, memory: 8822, loss_cls: 0.3986, loss_bbox: 0.6836, d0.loss_cls: 0.4294, d0.loss_bbox: 0.8264, d1.loss_cls: 0.4160, d1.loss_bbox: 0.7201, d2.loss_cls: 0.4040, d2.loss_bbox: 0.7035, d3.loss_cls: 0.4012, d3.loss_bbox: 0.6920, d4.loss_cls: 0.3998, d4.loss_bbox: 0.6867, aux_task0.loss_heatmap: 0.4990, aux_task0.loss_bbox: 0.2103, aux_task1.loss_heatmap: 0.6674, aux_task1.loss_bbox: 0.2251, aux_task2.loss_heatmap: 0.4080, aux_task2.loss_bbox: 0.1506, aux_task3.loss_heatmap: 0.3683, aux_task3.loss_bbox: 0.1387, aux_task4.loss_heatmap: 0.3415, aux_task4.loss_bbox: 0.1061, aux_task5.loss_heatmap: 0.4772, aux_task5.loss_bbox: 0.2528, loss: 10.6061, grad_norm: 34.2384
2025-05-06 07:37:09,744 - mmdet - INFO - Epoch [16][550/773]	lr: 3.544e-05, eta: 1:18:26, time: 1.333, data_time: 0.004, memory: 8822, loss_cls: 0.4102, loss_bbox: 0.6761, d0.loss_cls: 0.4393, d0.loss_bbox: 0.8126, d1.loss_cls: 0.4246, d1.loss_bbox: 0.7173, d2.loss_cls: 0.4170, d2.loss_bbox: 0.6960, d3.loss_cls: 0.4130, d3.loss_bbox: 0.6869, d4.loss_cls: 0.4103, d4.loss_bbox: 0.6811, aux_task0.loss_heatmap: 0.4991, aux_task0.loss_bbox: 0.2027, aux_task1.loss_heatmap: 0.7002, aux_task1.loss_bbox: 0.2190, aux_task2.loss_heatmap: 0.4634, aux_task2.loss_bbox: 0.1765, aux_task3.loss_heatmap: 0.3768, aux_task3.loss_bbox: 0.1393, aux_task4.loss_heatmap: 0.4640, aux_task4.loss_bbox: 0.1350, aux_task5.loss_heatmap: 0.4517, aux_task5.loss_bbox: 0.2479, loss: 10.8599, grad_norm: 37.4517
2025-05-06 07:38:22,368 - mmdet - INFO - Epoch [16][600/773]	lr: 3.449e-05, eta: 1:17:16, time: 1.453, data_time: 0.004, memory: 8822, loss_cls: 0.3966, loss_bbox: 0.6664, d0.loss_cls: 0.4278, d0.loss_bbox: 0.7999, d1.loss_cls: 0.4105, d1.loss_bbox: 0.7044, d2.loss_cls: 0.4020, d2.loss_bbox: 0.6854, d3.loss_cls: 0.3981, d3.loss_bbox: 0.6769, d4.loss_cls: 0.3978, d4.loss_bbox: 0.6694, aux_task0.loss_heatmap: 0.4597, aux_task0.loss_bbox: 0.1980, aux_task1.loss_heatmap: 0.6852, aux_task1.loss_bbox: 0.2304, aux_task2.loss_heatmap: 0.4414, aux_task2.loss_bbox: 0.1667, aux_task3.loss_heatmap: 0.3403, aux_task3.loss_bbox: 0.1253, aux_task4.loss_heatmap: 0.3306, aux_task4.loss_bbox: 0.0999, aux_task5.loss_heatmap: 0.4564, aux_task5.loss_bbox: 0.2554, loss: 10.4244, grad_norm: 33.5083
2025-05-06 07:39:29,235 - mmdet - INFO - Epoch [16][650/773]	lr: 3.355e-05, eta: 1:16:04, time: 1.337, data_time: 0.004, memory: 8822, loss_cls: 0.3932, loss_bbox: 0.6741, d0.loss_cls: 0.4266, d0.loss_bbox: 0.8192, d1.loss_cls: 0.4059, d1.loss_bbox: 0.7164, d2.loss_cls: 0.3950, d2.loss_bbox: 0.6985, d3.loss_cls: 0.3940, d3.loss_bbox: 0.6847, d4.loss_cls: 0.3936, d4.loss_bbox: 0.6771, aux_task0.loss_heatmap: 0.4890, aux_task0.loss_bbox: 0.1986, aux_task1.loss_heatmap: 0.6946, aux_task1.loss_bbox: 0.2240, aux_task2.loss_heatmap: 0.4250, aux_task2.loss_bbox: 0.1569, aux_task3.loss_heatmap: 0.3749, aux_task3.loss_bbox: 0.1425, aux_task4.loss_heatmap: 0.4269, aux_task4.loss_bbox: 0.1345, aux_task5.loss_heatmap: 0.4485, aux_task5.loss_bbox: 0.2567, loss: 10.6504, grad_norm: 33.7683
2025-05-06 07:40:36,850 - mmdet - INFO - Epoch [16][700/773]	lr: 3.262e-05, eta: 1:14:52, time: 1.352, data_time: 0.005, memory: 8822, loss_cls: 0.3933, loss_bbox: 0.6698, d0.loss_cls: 0.4253, d0.loss_bbox: 0.8079, d1.loss_cls: 0.4063, d1.loss_bbox: 0.7086, d2.loss_cls: 0.3985, d2.loss_bbox: 0.6894, d3.loss_cls: 0.3969, d3.loss_bbox: 0.6800, d4.loss_cls: 0.3938, d4.loss_bbox: 0.6732, aux_task0.loss_heatmap: 0.4627, aux_task0.loss_bbox: 0.1954, aux_task1.loss_heatmap: 0.6611, aux_task1.loss_bbox: 0.2262, aux_task2.loss_heatmap: 0.4301, aux_task2.loss_bbox: 0.1667, aux_task3.loss_heatmap: 0.3419, aux_task3.loss_bbox: 0.1251, aux_task4.loss_heatmap: 0.3939, aux_task4.loss_bbox: 0.1217, aux_task5.loss_heatmap: 0.4320, aux_task5.loss_bbox: 0.2379, loss: 10.4379, grad_norm: 33.3138
2025-05-06 07:41:43,817 - mmdet - INFO - Epoch [16][750/773]	lr: 3.169e-05, eta: 1:13:40, time: 1.340, data_time: 0.005, memory: 8822, loss_cls: 0.3858, loss_bbox: 0.6704, d0.loss_cls: 0.4175, d0.loss_bbox: 0.8067, d1.loss_cls: 0.3980, d1.loss_bbox: 0.7058, d2.loss_cls: 0.3879, d2.loss_bbox: 0.6878, d3.loss_cls: 0.3878, d3.loss_bbox: 0.6771, d4.loss_cls: 0.3850, d4.loss_bbox: 0.6741, aux_task0.loss_heatmap: 0.4944, aux_task0.loss_bbox: 0.2027, aux_task1.loss_heatmap: 0.6774, aux_task1.loss_bbox: 0.2241, aux_task2.loss_heatmap: 0.3690, aux_task2.loss_bbox: 0.1492, aux_task3.loss_heatmap: 0.3156, aux_task3.loss_bbox: 0.1244, aux_task4.loss_heatmap: 0.3704, aux_task4.loss_bbox: 0.1173, aux_task5.loss_heatmap: 0.4361, aux_task5.loss_bbox: 0.2435, loss: 10.3080, grad_norm: 34.9229
2025-05-06 07:42:15,127 - mmdet - INFO - Saving checkpoint at 16 epochs
2025-05-06 07:42:16,714 - mmdet - INFO - No ObjectSample now!
2025-05-06 07:43:26,707 - mmdet - INFO - Epoch [17][50/773]	lr: 3.036e-05, eta: 1:11:48, time: 1.400, data_time: 0.071, memory: 8822, loss_cls: 0.3777, loss_bbox: 0.6685, d0.loss_cls: 0.4096, d0.loss_bbox: 0.8053, d1.loss_cls: 0.3935, d1.loss_bbox: 0.7047, d2.loss_cls: 0.3844, d2.loss_bbox: 0.6852, d3.loss_cls: 0.3812, d3.loss_bbox: 0.6755, d4.loss_cls: 0.3786, d4.loss_bbox: 0.6712, aux_task0.loss_heatmap: 0.4626, aux_task0.loss_bbox: 0.1993, aux_task1.loss_heatmap: 0.6543, aux_task1.loss_bbox: 0.2192, aux_task2.loss_heatmap: 0.3740, aux_task2.loss_bbox: 0.1543, aux_task3.loss_heatmap: 0.3229, aux_task3.loss_bbox: 0.1306, aux_task4.loss_heatmap: 0.4154, aux_task4.loss_bbox: 0.1299, aux_task5.loss_heatmap: 0.4510, aux_task5.loss_bbox: 0.2546, loss: 10.3034, grad_norm: 33.7101
2025-05-06 07:44:38,124 - mmdet - INFO - Epoch [17][100/773]	lr: 2.945e-05, eta: 1:10:37, time: 1.428, data_time: 0.004, memory: 8822, loss_cls: 0.3703, loss_bbox: 0.6425, d0.loss_cls: 0.4031, d0.loss_bbox: 0.7805, d1.loss_cls: 0.3874, d1.loss_bbox: 0.6809, d2.loss_cls: 0.3766, d2.loss_bbox: 0.6604, d3.loss_cls: 0.3749, d3.loss_bbox: 0.6490, d4.loss_cls: 0.3700, d4.loss_bbox: 0.6464, aux_task0.loss_heatmap: 0.4617, aux_task0.loss_bbox: 0.1894, aux_task1.loss_heatmap: 0.6026, aux_task1.loss_bbox: 0.2172, aux_task2.loss_heatmap: 0.3910, aux_task2.loss_bbox: 0.1593, aux_task3.loss_heatmap: 0.3246, aux_task3.loss_bbox: 0.1303, aux_task4.loss_heatmap: 0.3869, aux_task4.loss_bbox: 0.1161, aux_task5.loss_heatmap: 0.4511, aux_task5.loss_bbox: 0.2638, loss: 10.0361, grad_norm: 32.6706
2025-05-06 07:45:44,303 - mmdet - INFO - Epoch [17][150/773]	lr: 2.856e-05, eta: 1:09:25, time: 1.323, data_time: 0.004, memory: 8822, loss_cls: 0.3718, loss_bbox: 0.6598, d0.loss_cls: 0.4025, d0.loss_bbox: 0.8038, d1.loss_cls: 0.3855, d1.loss_bbox: 0.7034, d2.loss_cls: 0.3776, d2.loss_bbox: 0.6820, d3.loss_cls: 0.3749, d3.loss_bbox: 0.6713, d4.loss_cls: 0.3713, d4.loss_bbox: 0.6653, aux_task0.loss_heatmap: 0.4969, aux_task0.loss_bbox: 0.2035, aux_task1.loss_heatmap: 0.6226, aux_task1.loss_bbox: 0.2259, aux_task2.loss_heatmap: 0.3443, aux_task2.loss_bbox: 0.1585, aux_task3.loss_heatmap: 0.3434, aux_task3.loss_bbox: 0.1431, aux_task4.loss_heatmap: 0.3399, aux_task4.loss_bbox: 0.1211, aux_task5.loss_heatmap: 0.4151, aux_task5.loss_bbox: 0.2519, loss: 10.1357, grad_norm: 30.6575
2025-05-06 07:46:50,604 - mmdet - INFO - Epoch [17][200/773]	lr: 2.768e-05, eta: 1:08:14, time: 1.326, data_time: 0.004, memory: 8822, loss_cls: 0.3723, loss_bbox: 0.6509, d0.loss_cls: 0.4002, d0.loss_bbox: 0.7902, d1.loss_cls: 0.3853, d1.loss_bbox: 0.6876, d2.loss_cls: 0.3792, d2.loss_bbox: 0.6652, d3.loss_cls: 0.3760, d3.loss_bbox: 0.6573, d4.loss_cls: 0.3730, d4.loss_bbox: 0.6535, aux_task0.loss_heatmap: 0.4162, aux_task0.loss_bbox: 0.1931, aux_task1.loss_heatmap: 0.6148, aux_task1.loss_bbox: 0.2060, aux_task2.loss_heatmap: 0.3576, aux_task2.loss_bbox: 0.1509, aux_task3.loss_heatmap: 0.2347, aux_task3.loss_bbox: 0.1083, aux_task4.loss_heatmap: 0.3731, aux_task4.loss_bbox: 0.1164, aux_task5.loss_heatmap: 0.4295, aux_task5.loss_bbox: 0.2451, loss: 9.8365, grad_norm: 30.3617
2025-05-06 07:47:57,708 - mmdet - INFO - Epoch [17][250/773]	lr: 2.680e-05, eta: 1:07:02, time: 1.342, data_time: 0.004, memory: 8822, loss_cls: 0.3686, loss_bbox: 0.6564, d0.loss_cls: 0.4002, d0.loss_bbox: 0.7836, d1.loss_cls: 0.3839, d1.loss_bbox: 0.6921, d2.loss_cls: 0.3730, d2.loss_bbox: 0.6767, d3.loss_cls: 0.3699, d3.loss_bbox: 0.6663, d4.loss_cls: 0.3688, d4.loss_bbox: 0.6602, aux_task0.loss_heatmap: 0.4593, aux_task0.loss_bbox: 0.1987, aux_task1.loss_heatmap: 0.6628, aux_task1.loss_bbox: 0.2140, aux_task2.loss_heatmap: 0.4346, aux_task2.loss_bbox: 0.1687, aux_task3.loss_heatmap: 0.3431, aux_task3.loss_bbox: 0.1228, aux_task4.loss_heatmap: 0.3856, aux_task4.loss_bbox: 0.1258, aux_task5.loss_heatmap: 0.4287, aux_task5.loss_bbox: 0.2576, loss: 10.2012, grad_norm: 32.6760
2025-05-06 07:49:04,671 - mmdet - INFO - Epoch [17][300/773]	lr: 2.594e-05, eta: 1:05:50, time: 1.339, data_time: 0.004, memory: 8822, loss_cls: 0.3600, loss_bbox: 0.6572, d0.loss_cls: 0.3957, d0.loss_bbox: 0.7900, d1.loss_cls: 0.3778, d1.loss_bbox: 0.6931, d2.loss_cls: 0.3686, d2.loss_bbox: 0.6734, d3.loss_cls: 0.3654, d3.loss_bbox: 0.6638, d4.loss_cls: 0.3601, d4.loss_bbox: 0.6607, aux_task0.loss_heatmap: 0.4654, aux_task0.loss_bbox: 0.1948, aux_task1.loss_heatmap: 0.6151, aux_task1.loss_bbox: 0.2016, aux_task2.loss_heatmap: 0.4537, aux_task2.loss_bbox: 0.1800, aux_task3.loss_heatmap: 0.3327, aux_task3.loss_bbox: 0.1360, aux_task4.loss_heatmap: 0.4384, aux_task4.loss_bbox: 0.1402, aux_task5.loss_heatmap: 0.4286, aux_task5.loss_bbox: 0.2544, loss: 10.2069, grad_norm: 30.3173
2025-05-06 07:50:11,488 - mmdet - INFO - Epoch [17][350/773]	lr: 2.509e-05, eta: 1:04:39, time: 1.337, data_time: 0.005, memory: 8822, loss_cls: 0.3829, loss_bbox: 0.6507, d0.loss_cls: 0.4115, d0.loss_bbox: 0.7876, d1.loss_cls: 0.3971, d1.loss_bbox: 0.6906, d2.loss_cls: 0.3865, d2.loss_bbox: 0.6733, d3.loss_cls: 0.3852, d3.loss_bbox: 0.6609, d4.loss_cls: 0.3833, d4.loss_bbox: 0.6549, aux_task0.loss_heatmap: 0.4415, aux_task0.loss_bbox: 0.1856, aux_task1.loss_heatmap: 0.7221, aux_task1.loss_bbox: 0.2285, aux_task2.loss_heatmap: 0.4277, aux_task2.loss_bbox: 0.1609, aux_task3.loss_heatmap: 0.3358, aux_task3.loss_bbox: 0.1369, aux_task4.loss_heatmap: 0.4303, aux_task4.loss_bbox: 0.1329, aux_task5.loss_heatmap: 0.4269, aux_task5.loss_bbox: 0.2486, loss: 10.3422, grad_norm: 32.1945
2025-05-06 07:51:19,020 - mmdet - INFO - Epoch [17][400/773]	lr: 2.424e-05, eta: 1:03:27, time: 1.350, data_time: 0.005, memory: 8822, loss_cls: 0.3761, loss_bbox: 0.6643, d0.loss_cls: 0.4040, d0.loss_bbox: 0.7935, d1.loss_cls: 0.3908, d1.loss_bbox: 0.7017, d2.loss_cls: 0.3809, d2.loss_bbox: 0.6834, d3.loss_cls: 0.3795, d3.loss_bbox: 0.6721, d4.loss_cls: 0.3755, d4.loss_bbox: 0.6693, aux_task0.loss_heatmap: 0.4838, aux_task0.loss_bbox: 0.1963, aux_task1.loss_heatmap: 0.6703, aux_task1.loss_bbox: 0.2128, aux_task2.loss_heatmap: 0.4046, aux_task2.loss_bbox: 0.1669, aux_task3.loss_heatmap: 0.3054, aux_task3.loss_bbox: 0.1281, aux_task4.loss_heatmap: 0.3716, aux_task4.loss_bbox: 0.1192, aux_task5.loss_heatmap: 0.4101, aux_task5.loss_bbox: 0.2454, loss: 10.2057, grad_norm: 31.5915
2025-05-06 07:52:26,371 - mmdet - INFO - Epoch [17][450/773]	lr: 2.341e-05, eta: 1:02:16, time: 1.347, data_time: 0.005, memory: 8822, loss_cls: 0.3725, loss_bbox: 0.6524, d0.loss_cls: 0.4088, d0.loss_bbox: 0.7852, d1.loss_cls: 0.3934, d1.loss_bbox: 0.6867, d2.loss_cls: 0.3817, d2.loss_bbox: 0.6696, d3.loss_cls: 0.3795, d3.loss_bbox: 0.6607, d4.loss_cls: 0.3726, d4.loss_bbox: 0.6565, aux_task0.loss_heatmap: 0.4476, aux_task0.loss_bbox: 0.1948, aux_task1.loss_heatmap: 0.5992, aux_task1.loss_bbox: 0.2021, aux_task2.loss_heatmap: 0.4041, aux_task2.loss_bbox: 0.1633, aux_task3.loss_heatmap: 0.3863, aux_task3.loss_bbox: 0.1231, aux_task4.loss_heatmap: 0.4103, aux_task4.loss_bbox: 0.1396, aux_task5.loss_heatmap: 0.4597, aux_task5.loss_bbox: 0.2624, loss: 10.2122, grad_norm: 32.9318
2025-05-06 07:53:33,594 - mmdet - INFO - Epoch [17][500/773]	lr: 2.259e-05, eta: 1:01:05, time: 1.344, data_time: 0.004, memory: 8822, loss_cls: 0.3785, loss_bbox: 0.6564, d0.loss_cls: 0.4170, d0.loss_bbox: 0.7963, d1.loss_cls: 0.3972, d1.loss_bbox: 0.6936, d2.loss_cls: 0.3852, d2.loss_bbox: 0.6765, d3.loss_cls: 0.3819, d3.loss_bbox: 0.6658, d4.loss_cls: 0.3793, d4.loss_bbox: 0.6595, aux_task0.loss_heatmap: 0.4640, aux_task0.loss_bbox: 0.1911, aux_task1.loss_heatmap: 0.5840, aux_task1.loss_bbox: 0.2049, aux_task2.loss_heatmap: 0.4086, aux_task2.loss_bbox: 0.1558, aux_task3.loss_heatmap: 0.3326, aux_task3.loss_bbox: 0.1246, aux_task4.loss_heatmap: 0.3756, aux_task4.loss_bbox: 0.1199, aux_task5.loss_heatmap: 0.4643, aux_task5.loss_bbox: 0.2656, loss: 10.1782, grad_norm: 31.2891
2025-05-06 07:54:41,278 - mmdet - INFO - Epoch [17][550/773]	lr: 2.178e-05, eta: 0:59:53, time: 1.354, data_time: 0.004, memory: 8822, loss_cls: 0.3832, loss_bbox: 0.6478, d0.loss_cls: 0.4163, d0.loss_bbox: 0.7840, d1.loss_cls: 0.4030, d1.loss_bbox: 0.6822, d2.loss_cls: 0.3934, d2.loss_bbox: 0.6633, d3.loss_cls: 0.3885, d3.loss_bbox: 0.6558, d4.loss_cls: 0.3844, d4.loss_bbox: 0.6508, aux_task0.loss_heatmap: 0.4410, aux_task0.loss_bbox: 0.1928, aux_task1.loss_heatmap: 0.6802, aux_task1.loss_bbox: 0.2189, aux_task2.loss_heatmap: 0.3829, aux_task2.loss_bbox: 0.1580, aux_task3.loss_heatmap: 0.2991, aux_task3.loss_bbox: 0.1227, aux_task4.loss_heatmap: 0.3327, aux_task4.loss_bbox: 0.1126, aux_task5.loss_heatmap: 0.4677, aux_task5.loss_bbox: 0.2518, loss: 10.1132, grad_norm: 29.9123
2025-05-06 07:55:48,809 - mmdet - INFO - Epoch [17][600/773]	lr: 2.099e-05, eta: 0:58:42, time: 1.351, data_time: 0.004, memory: 8822, loss_cls: 0.3769, loss_bbox: 0.6585, d0.loss_cls: 0.4136, d0.loss_bbox: 0.7918, d1.loss_cls: 0.3964, d1.loss_bbox: 0.6960, d2.loss_cls: 0.3856, d2.loss_bbox: 0.6764, d3.loss_cls: 0.3823, d3.loss_bbox: 0.6669, d4.loss_cls: 0.3779, d4.loss_bbox: 0.6628, aux_task0.loss_heatmap: 0.4723, aux_task0.loss_bbox: 0.1988, aux_task1.loss_heatmap: 0.6117, aux_task1.loss_bbox: 0.2038, aux_task2.loss_heatmap: 0.3629, aux_task2.loss_bbox: 0.1663, aux_task3.loss_heatmap: 0.3359, aux_task3.loss_bbox: 0.1299, aux_task4.loss_heatmap: 0.3878, aux_task4.loss_bbox: 0.1270, aux_task5.loss_heatmap: 0.4342, aux_task5.loss_bbox: 0.2557, loss: 10.1715, grad_norm: 30.8545
2025-05-06 07:56:55,754 - mmdet - INFO - Epoch [17][650/773]	lr: 2.020e-05, eta: 0:57:31, time: 1.339, data_time: 0.004, memory: 8822, loss_cls: 0.3724, loss_bbox: 0.6410, d0.loss_cls: 0.4099, d0.loss_bbox: 0.7760, d1.loss_cls: 0.3909, d1.loss_bbox: 0.6803, d2.loss_cls: 0.3816, d2.loss_bbox: 0.6600, d3.loss_cls: 0.3783, d3.loss_bbox: 0.6498, d4.loss_cls: 0.3736, d4.loss_bbox: 0.6461, aux_task0.loss_heatmap: 0.4616, aux_task0.loss_bbox: 0.1924, aux_task1.loss_heatmap: 0.6644, aux_task1.loss_bbox: 0.2073, aux_task2.loss_heatmap: 0.3829, aux_task2.loss_bbox: 0.1493, aux_task3.loss_heatmap: 0.3242, aux_task3.loss_bbox: 0.1200, aux_task4.loss_heatmap: 0.3544, aux_task4.loss_bbox: 0.1194, aux_task5.loss_heatmap: 0.4135, aux_task5.loss_bbox: 0.2418, loss: 9.9910, grad_norm: 31.1300
2025-05-06 07:58:02,926 - mmdet - INFO - Epoch [17][700/773]	lr: 1.943e-05, eta: 0:56:19, time: 1.344, data_time: 0.005, memory: 8822, loss_cls: 0.3728, loss_bbox: 0.6551, d0.loss_cls: 0.4066, d0.loss_bbox: 0.7911, d1.loss_cls: 0.3882, d1.loss_bbox: 0.6954, d2.loss_cls: 0.3787, d2.loss_bbox: 0.6748, d3.loss_cls: 0.3761, d3.loss_bbox: 0.6653, d4.loss_cls: 0.3733, d4.loss_bbox: 0.6582, aux_task0.loss_heatmap: 0.4483, aux_task0.loss_bbox: 0.1936, aux_task1.loss_heatmap: 0.6518, aux_task1.loss_bbox: 0.2075, aux_task2.loss_heatmap: 0.4294, aux_task2.loss_bbox: 0.1663, aux_task3.loss_heatmap: 0.3723, aux_task3.loss_bbox: 0.1291, aux_task4.loss_heatmap: 0.4149, aux_task4.loss_bbox: 0.1220, aux_task5.loss_heatmap: 0.4266, aux_task5.loss_bbox: 0.2481, loss: 10.2454, grad_norm: 31.9813
2025-05-06 07:59:10,774 - mmdet - INFO - Epoch [17][750/773]	lr: 1.867e-05, eta: 0:55:08, time: 1.357, data_time: 0.005, memory: 8822, loss_cls: 0.3752, loss_bbox: 0.6715, d0.loss_cls: 0.4101, d0.loss_bbox: 0.7924, d1.loss_cls: 0.3917, d1.loss_bbox: 0.7046, d2.loss_cls: 0.3810, d2.loss_bbox: 0.6887, d3.loss_cls: 0.3773, d3.loss_bbox: 0.6804, d4.loss_cls: 0.3749, d4.loss_bbox: 0.6745, aux_task0.loss_heatmap: 0.4715, aux_task0.loss_bbox: 0.1962, aux_task1.loss_heatmap: 0.5861, aux_task1.loss_bbox: 0.2012, aux_task2.loss_heatmap: 0.3994, aux_task2.loss_bbox: 0.1509, aux_task3.loss_heatmap: 0.3618, aux_task3.loss_bbox: 0.1381, aux_task4.loss_heatmap: 0.4373, aux_task4.loss_bbox: 0.1490, aux_task5.loss_heatmap: 0.4273, aux_task5.loss_bbox: 0.2444, loss: 10.2855, grad_norm: 31.7345
2025-05-06 07:59:41,661 - mmdet - INFO - Saving checkpoint at 17 epochs
2025-05-06 07:59:43,346 - mmdet - INFO - No ObjectSample now!
2025-05-06 08:00:56,100 - mmdet - INFO - Epoch [18][50/773]	lr: 1.758e-05, eta: 0:53:20, time: 1.454, data_time: 0.070, memory: 8822, loss_cls: 0.3753, loss_bbox: 0.6461, d0.loss_cls: 0.4081, d0.loss_bbox: 0.7846, d1.loss_cls: 0.3938, d1.loss_bbox: 0.6880, d2.loss_cls: 0.3828, d2.loss_bbox: 0.6669, d3.loss_cls: 0.3789, d3.loss_bbox: 0.6559, d4.loss_cls: 0.3747, d4.loss_bbox: 0.6510, aux_task0.loss_heatmap: 0.4530, aux_task0.loss_bbox: 0.1877, aux_task1.loss_heatmap: 0.6371, aux_task1.loss_bbox: 0.2101, aux_task2.loss_heatmap: 0.4189, aux_task2.loss_bbox: 0.1576, aux_task3.loss_heatmap: 0.3664, aux_task3.loss_bbox: 0.1432, aux_task4.loss_heatmap: 0.4178, aux_task4.loss_bbox: 0.1404, aux_task5.loss_heatmap: 0.4204, aux_task5.loss_bbox: 0.2511, loss: 10.2099, grad_norm: 31.4785
2025-05-06 08:02:03,268 - mmdet - INFO - Epoch [18][100/773]	lr: 1.685e-05, eta: 0:52:09, time: 1.343, data_time: 0.005, memory: 8822, loss_cls: 0.3548, loss_bbox: 0.6383, d0.loss_cls: 0.3924, d0.loss_bbox: 0.7721, d1.loss_cls: 0.3761, d1.loss_bbox: 0.6773, d2.loss_cls: 0.3643, d2.loss_bbox: 0.6607, d3.loss_cls: 0.3618, d3.loss_bbox: 0.6482, d4.loss_cls: 0.3561, d4.loss_bbox: 0.6440, aux_task0.loss_heatmap: 0.4351, aux_task0.loss_bbox: 0.1907, aux_task1.loss_heatmap: 0.5922, aux_task1.loss_bbox: 0.2026, aux_task2.loss_heatmap: 0.3918, aux_task2.loss_bbox: 0.1461, aux_task3.loss_heatmap: 0.2766, aux_task3.loss_bbox: 0.1223, aux_task4.loss_heatmap: 0.3898, aux_task4.loss_bbox: 0.1384, aux_task5.loss_heatmap: 0.4009, aux_task5.loss_bbox: 0.2423, loss: 9.7751, grad_norm: 30.2104
2025-05-06 08:03:10,677 - mmdet - INFO - Epoch [18][150/773]	lr: 1.613e-05, eta: 0:50:58, time: 1.349, data_time: 0.005, memory: 8822, loss_cls: 0.3633, loss_bbox: 0.6514, d0.loss_cls: 0.3975, d0.loss_bbox: 0.7825, d1.loss_cls: 0.3807, d1.loss_bbox: 0.6897, d2.loss_cls: 0.3725, d2.loss_bbox: 0.6699, d3.loss_cls: 0.3672, d3.loss_bbox: 0.6604, d4.loss_cls: 0.3640, d4.loss_bbox: 0.6568, aux_task0.loss_heatmap: 0.4670, aux_task0.loss_bbox: 0.1967, aux_task1.loss_heatmap: 0.6185, aux_task1.loss_bbox: 0.2158, aux_task2.loss_heatmap: 0.4390, aux_task2.loss_bbox: 0.1756, aux_task3.loss_heatmap: 0.3405, aux_task3.loss_bbox: 0.1410, aux_task4.loss_heatmap: 0.3572, aux_task4.loss_bbox: 0.1203, aux_task5.loss_heatmap: 0.4705, aux_task5.loss_bbox: 0.2646, loss: 10.1624, grad_norm: 31.4360
2025-05-06 08:04:17,342 - mmdet - INFO - Epoch [18][200/773]	lr: 1.543e-05, eta: 0:49:47, time: 1.333, data_time: 0.004, memory: 8822, loss_cls: 0.3601, loss_bbox: 0.6491, d0.loss_cls: 0.3952, d0.loss_bbox: 0.7812, d1.loss_cls: 0.3794, d1.loss_bbox: 0.6878, d2.loss_cls: 0.3677, d2.loss_bbox: 0.6686, d3.loss_cls: 0.3640, d3.loss_bbox: 0.6574, d4.loss_cls: 0.3598, d4.loss_bbox: 0.6542, aux_task0.loss_heatmap: 0.4678, aux_task0.loss_bbox: 0.1906, aux_task1.loss_heatmap: 0.6198, aux_task1.loss_bbox: 0.2022, aux_task2.loss_heatmap: 0.4209, aux_task2.loss_bbox: 0.1722, aux_task3.loss_heatmap: 0.3284, aux_task3.loss_bbox: 0.1319, aux_task4.loss_heatmap: 0.4067, aux_task4.loss_bbox: 0.1318, aux_task5.loss_heatmap: 0.4192, aux_task5.loss_bbox: 0.2500, loss: 10.0661, grad_norm: 30.6772
2025-05-06 08:05:24,438 - mmdet - INFO - Epoch [18][250/773]	lr: 1.474e-05, eta: 0:48:36, time: 1.341, data_time: 0.004, memory: 8822, loss_cls: 0.3633, loss_bbox: 0.6551, d0.loss_cls: 0.3980, d0.loss_bbox: 0.7847, d1.loss_cls: 0.3820, d1.loss_bbox: 0.6926, d2.loss_cls: 0.3708, d2.loss_bbox: 0.6753, d3.loss_cls: 0.3692, d3.loss_bbox: 0.6645, d4.loss_cls: 0.3655, d4.loss_bbox: 0.6594, aux_task0.loss_heatmap: 0.4798, aux_task0.loss_bbox: 0.1915, aux_task1.loss_heatmap: 0.6404, aux_task1.loss_bbox: 0.2144, aux_task2.loss_heatmap: 0.4019, aux_task2.loss_bbox: 0.1717, aux_task3.loss_heatmap: 0.2968, aux_task3.loss_bbox: 0.1266, aux_task4.loss_heatmap: 0.3495, aux_task4.loss_bbox: 0.1122, aux_task5.loss_heatmap: 0.4154, aux_task5.loss_bbox: 0.2566, loss: 10.0372, grad_norm: 30.7137
2025-05-06 08:06:35,520 - mmdet - INFO - Epoch [18][300/773]	lr: 1.407e-05, eta: 0:47:25, time: 1.422, data_time: 0.005, memory: 8822, loss_cls: 0.3541, loss_bbox: 0.6442, d0.loss_cls: 0.3897, d0.loss_bbox: 0.7753, d1.loss_cls: 0.3736, d1.loss_bbox: 0.6836, d2.loss_cls: 0.3601, d2.loss_bbox: 0.6669, d3.loss_cls: 0.3582, d3.loss_bbox: 0.6556, d4.loss_cls: 0.3546, d4.loss_bbox: 0.6472, aux_task0.loss_heatmap: 0.4216, aux_task0.loss_bbox: 0.1862, aux_task1.loss_heatmap: 0.6374, aux_task1.loss_bbox: 0.2157, aux_task2.loss_heatmap: 0.3204, aux_task2.loss_bbox: 0.1376, aux_task3.loss_heatmap: 0.3105, aux_task3.loss_bbox: 0.1378, aux_task4.loss_heatmap: 0.3017, aux_task4.loss_bbox: 0.0955, aux_task5.loss_heatmap: 0.4279, aux_task5.loss_bbox: 0.2517, loss: 9.7070, grad_norm: 31.8633
2025-05-06 08:07:42,258 - mmdet - INFO - Epoch [18][350/773]	lr: 1.340e-05, eta: 0:46:14, time: 1.335, data_time: 0.005, memory: 8822, loss_cls: 0.3568, loss_bbox: 0.6253, d0.loss_cls: 0.3917, d0.loss_bbox: 0.7579, d1.loss_cls: 0.3759, d1.loss_bbox: 0.6657, d2.loss_cls: 0.3629, d2.loss_bbox: 0.6496, d3.loss_cls: 0.3608, d3.loss_bbox: 0.6353, d4.loss_cls: 0.3557, d4.loss_bbox: 0.6294, aux_task0.loss_heatmap: 0.4122, aux_task0.loss_bbox: 0.1875, aux_task1.loss_heatmap: 0.5961, aux_task1.loss_bbox: 0.2004, aux_task2.loss_heatmap: 0.3687, aux_task2.loss_bbox: 0.1425, aux_task3.loss_heatmap: 0.2804, aux_task3.loss_bbox: 0.1020, aux_task4.loss_heatmap: 0.4119, aux_task4.loss_bbox: 0.1338, aux_task5.loss_heatmap: 0.4359, aux_task5.loss_bbox: 0.2502, loss: 9.6884, grad_norm: 31.3697
2025-05-06 08:08:55,487 - mmdet - INFO - Epoch [18][400/773]	lr: 1.276e-05, eta: 0:45:04, time: 1.465, data_time: 0.005, memory: 8822, loss_cls: 0.3555, loss_bbox: 0.6576, d0.loss_cls: 0.3882, d0.loss_bbox: 0.7866, d1.loss_cls: 0.3710, d1.loss_bbox: 0.6957, d2.loss_cls: 0.3620, d2.loss_bbox: 0.6785, d3.loss_cls: 0.3604, d3.loss_bbox: 0.6671, d4.loss_cls: 0.3567, d4.loss_bbox: 0.6625, aux_task0.loss_heatmap: 0.4596, aux_task0.loss_bbox: 0.1979, aux_task1.loss_heatmap: 0.6272, aux_task1.loss_bbox: 0.2177, aux_task2.loss_heatmap: 0.3555, aux_task2.loss_bbox: 0.1548, aux_task3.loss_heatmap: 0.3262, aux_task3.loss_bbox: 0.1556, aux_task4.loss_heatmap: 0.3513, aux_task4.loss_bbox: 0.1013, aux_task5.loss_heatmap: 0.4208, aux_task5.loss_bbox: 0.2524, loss: 9.9620, grad_norm: 29.9258
2025-05-06 08:10:02,021 - mmdet - INFO - Epoch [18][450/773]	lr: 1.212e-05, eta: 0:43:53, time: 1.331, data_time: 0.005, memory: 8822, loss_cls: 0.3556, loss_bbox: 0.6239, d0.loss_cls: 0.3972, d0.loss_bbox: 0.7537, d1.loss_cls: 0.3779, d1.loss_bbox: 0.6612, d2.loss_cls: 0.3650, d2.loss_bbox: 0.6416, d3.loss_cls: 0.3605, d3.loss_bbox: 0.6318, d4.loss_cls: 0.3571, d4.loss_bbox: 0.6262, aux_task0.loss_heatmap: 0.4636, aux_task0.loss_bbox: 0.1891, aux_task1.loss_heatmap: 0.6025, aux_task1.loss_bbox: 0.1946, aux_task2.loss_heatmap: 0.3400, aux_task2.loss_bbox: 0.1617, aux_task3.loss_heatmap: 0.3525, aux_task3.loss_bbox: 0.1339, aux_task4.loss_heatmap: 0.3621, aux_task4.loss_bbox: 0.1225, aux_task5.loss_heatmap: 0.4549, aux_task5.loss_bbox: 0.2531, loss: 9.7823, grad_norm: 30.4156
2025-05-06 08:11:09,379 - mmdet - INFO - Epoch [18][500/773]	lr: 1.150e-05, eta: 0:42:42, time: 1.347, data_time: 0.005, memory: 8822, loss_cls: 0.3655, loss_bbox: 0.6553, d0.loss_cls: 0.3994, d0.loss_bbox: 0.7779, d1.loss_cls: 0.3827, d1.loss_bbox: 0.6904, d2.loss_cls: 0.3722, d2.loss_bbox: 0.6727, d3.loss_cls: 0.3687, d3.loss_bbox: 0.6659, d4.loss_cls: 0.3661, d4.loss_bbox: 0.6592, aux_task0.loss_heatmap: 0.4440, aux_task0.loss_bbox: 0.1844, aux_task1.loss_heatmap: 0.6216, aux_task1.loss_bbox: 0.2095, aux_task2.loss_heatmap: 0.3877, aux_task2.loss_bbox: 0.1450, aux_task3.loss_heatmap: 0.2922, aux_task3.loss_bbox: 0.1242, aux_task4.loss_heatmap: 0.2780, aux_task4.loss_bbox: 0.1110, aux_task5.loss_heatmap: 0.4170, aux_task5.loss_bbox: 0.2586, loss: 9.8490, grad_norm: 31.4045
2025-05-06 08:12:16,436 - mmdet - INFO - Epoch [18][550/773]	lr: 1.090e-05, eta: 0:41:31, time: 1.341, data_time: 0.005, memory: 8822, loss_cls: 0.3468, loss_bbox: 0.6336, d0.loss_cls: 0.3826, d0.loss_bbox: 0.7730, d1.loss_cls: 0.3639, d1.loss_bbox: 0.6748, d2.loss_cls: 0.3522, d2.loss_bbox: 0.6571, d3.loss_cls: 0.3504, d3.loss_bbox: 0.6442, d4.loss_cls: 0.3476, d4.loss_bbox: 0.6388, aux_task0.loss_heatmap: 0.4152, aux_task0.loss_bbox: 0.1819, aux_task1.loss_heatmap: 0.6239, aux_task1.loss_bbox: 0.2011, aux_task2.loss_heatmap: 0.4126, aux_task2.loss_bbox: 0.1670, aux_task3.loss_heatmap: 0.3782, aux_task3.loss_bbox: 0.1450, aux_task4.loss_heatmap: 0.3653, aux_task4.loss_bbox: 0.1227, aux_task5.loss_heatmap: 0.4014, aux_task5.loss_bbox: 0.2416, loss: 9.8207, grad_norm: 30.2749
2025-05-06 08:13:23,897 - mmdet - INFO - Epoch [18][600/773]	lr: 1.031e-05, eta: 0:40:21, time: 1.349, data_time: 0.005, memory: 8822, loss_cls: 0.3661, loss_bbox: 0.6346, d0.loss_cls: 0.4016, d0.loss_bbox: 0.7684, d1.loss_cls: 0.3819, d1.loss_bbox: 0.6761, d2.loss_cls: 0.3724, d2.loss_bbox: 0.6559, d3.loss_cls: 0.3689, d3.loss_bbox: 0.6456, d4.loss_cls: 0.3677, d4.loss_bbox: 0.6385, aux_task0.loss_heatmap: 0.4443, aux_task0.loss_bbox: 0.1910, aux_task1.loss_heatmap: 0.6278, aux_task1.loss_bbox: 0.2119, aux_task2.loss_heatmap: 0.3537, aux_task2.loss_bbox: 0.1454, aux_task3.loss_heatmap: 0.2867, aux_task3.loss_bbox: 0.1173, aux_task4.loss_heatmap: 0.3710, aux_task4.loss_bbox: 0.1211, aux_task5.loss_heatmap: 0.4210, aux_task5.loss_bbox: 0.2506, loss: 9.8197, grad_norm: 30.9426
2025-05-06 08:14:31,555 - mmdet - INFO - Epoch [18][650/773]	lr: 9.734e-06, eta: 0:39:10, time: 1.353, data_time: 0.005, memory: 8822, loss_cls: 0.3503, loss_bbox: 0.6560, d0.loss_cls: 0.3831, d0.loss_bbox: 0.7856, d1.loss_cls: 0.3710, d1.loss_bbox: 0.6924, d2.loss_cls: 0.3581, d2.loss_bbox: 0.6747, d3.loss_cls: 0.3552, d3.loss_bbox: 0.6656, d4.loss_cls: 0.3495, d4.loss_bbox: 0.6614, aux_task0.loss_heatmap: 0.4454, aux_task0.loss_bbox: 0.1855, aux_task1.loss_heatmap: 0.5588, aux_task1.loss_bbox: 0.1960, aux_task2.loss_heatmap: 0.3646, aux_task2.loss_bbox: 0.1575, aux_task3.loss_heatmap: 0.2639, aux_task3.loss_bbox: 0.1158, aux_task4.loss_heatmap: 0.3795, aux_task4.loss_bbox: 0.1287, aux_task5.loss_heatmap: 0.4076, aux_task5.loss_bbox: 0.2448, loss: 9.7512, grad_norm: 28.0130
2025-05-06 08:15:38,677 - mmdet - INFO - Epoch [18][700/773]	lr: 9.175e-06, eta: 0:37:59, time: 1.342, data_time: 0.005, memory: 8822, loss_cls: 0.3477, loss_bbox: 0.6274, d0.loss_cls: 0.3846, d0.loss_bbox: 0.7640, d1.loss_cls: 0.3679, d1.loss_bbox: 0.6705, d2.loss_cls: 0.3573, d2.loss_bbox: 0.6516, d3.loss_cls: 0.3554, d3.loss_bbox: 0.6386, d4.loss_cls: 0.3487, d4.loss_bbox: 0.6336, aux_task0.loss_heatmap: 0.4060, aux_task0.loss_bbox: 0.1821, aux_task1.loss_heatmap: 0.5483, aux_task1.loss_bbox: 0.2005, aux_task2.loss_heatmap: 0.3356, aux_task2.loss_bbox: 0.1496, aux_task3.loss_heatmap: 0.3069, aux_task3.loss_bbox: 0.1255, aux_task4.loss_heatmap: 0.3907, aux_task4.loss_bbox: 0.1365, aux_task5.loss_heatmap: 0.3978, aux_task5.loss_bbox: 0.2468, loss: 9.5736, grad_norm: 30.1503
2025-05-06 08:16:45,158 - mmdet - INFO - Epoch [18][750/773]	lr: 8.630e-06, eta: 0:36:48, time: 1.330, data_time: 0.005, memory: 8822, loss_cls: 0.3593, loss_bbox: 0.6212, d0.loss_cls: 0.3969, d0.loss_bbox: 0.7580, d1.loss_cls: 0.3776, d1.loss_bbox: 0.6604, d2.loss_cls: 0.3688, d2.loss_bbox: 0.6391, d3.loss_cls: 0.3637, d3.loss_bbox: 0.6313, d4.loss_cls: 0.3590, d4.loss_bbox: 0.6262, aux_task0.loss_heatmap: 0.4377, aux_task0.loss_bbox: 0.1813, aux_task1.loss_heatmap: 0.6078, aux_task1.loss_bbox: 0.2064, aux_task2.loss_heatmap: 0.3007, aux_task2.loss_bbox: 0.1409, aux_task3.loss_heatmap: 0.2919, aux_task3.loss_bbox: 0.1105, aux_task4.loss_heatmap: 0.3773, aux_task4.loss_bbox: 0.1225, aux_task5.loss_heatmap: 0.4140, aux_task5.loss_bbox: 0.2515, loss: 9.6040, grad_norm: 31.2275
2025-05-06 08:17:16,222 - mmdet - INFO - Saving checkpoint at 18 epochs
2025-05-06 08:17:18,022 - mmdet - INFO - No ObjectSample now!
2025-05-06 08:18:33,599 - mmdet - INFO - Epoch [19][50/773]	lr: 7.863e-06, eta: 0:35:02, time: 1.510, data_time: 0.070, memory: 8822, loss_cls: 0.3310, loss_bbox: 0.6274, d0.loss_cls: 0.3685, d0.loss_bbox: 0.7590, d1.loss_cls: 0.3503, d1.loss_bbox: 0.6673, d2.loss_cls: 0.3387, d2.loss_bbox: 0.6477, d3.loss_cls: 0.3346, d3.loss_bbox: 0.6373, d4.loss_cls: 0.3318, d4.loss_bbox: 0.6317, aux_task0.loss_heatmap: 0.4380, aux_task0.loss_bbox: 0.1902, aux_task1.loss_heatmap: 0.6166, aux_task1.loss_bbox: 0.2012, aux_task2.loss_heatmap: 0.3944, aux_task2.loss_bbox: 0.1657, aux_task3.loss_heatmap: 0.2391, aux_task3.loss_bbox: 0.1133, aux_task4.loss_heatmap: 0.3372, aux_task4.loss_bbox: 0.1289, aux_task5.loss_heatmap: 0.4093, aux_task5.loss_bbox: 0.2551, loss: 9.5141, grad_norm: 28.2871
2025-05-06 08:19:41,872 - mmdet - INFO - Epoch [19][100/773]	lr: 7.357e-06, eta: 0:33:52, time: 1.365, data_time: 0.006, memory: 8822, loss_cls: 0.3431, loss_bbox: 0.6180, d0.loss_cls: 0.3761, d0.loss_bbox: 0.7546, d1.loss_cls: 0.3584, d1.loss_bbox: 0.6640, d2.loss_cls: 0.3501, d2.loss_bbox: 0.6425, d3.loss_cls: 0.3462, d3.loss_bbox: 0.6320, d4.loss_cls: 0.3426, d4.loss_bbox: 0.6258, aux_task0.loss_heatmap: 0.4202, aux_task0.loss_bbox: 0.1785, aux_task1.loss_heatmap: 0.6170, aux_task1.loss_bbox: 0.2147, aux_task2.loss_heatmap: 0.3476, aux_task2.loss_bbox: 0.1448, aux_task3.loss_heatmap: 0.2777, aux_task3.loss_bbox: 0.1157, aux_task4.loss_heatmap: 0.3452, aux_task4.loss_bbox: 0.1212, aux_task5.loss_heatmap: 0.4203, aux_task5.loss_bbox: 0.2431, loss: 9.4994, grad_norm: 29.5718
2025-05-06 08:20:51,436 - mmdet - INFO - Epoch [19][150/773]	lr: 6.867e-06, eta: 0:32:42, time: 1.391, data_time: 0.006, memory: 8822, loss_cls: 0.3510, loss_bbox: 0.6377, d0.loss_cls: 0.3877, d0.loss_bbox: 0.7663, d1.loss_cls: 0.3685, d1.loss_bbox: 0.6764, d2.loss_cls: 0.3584, d2.loss_bbox: 0.6578, d3.loss_cls: 0.3565, d3.loss_bbox: 0.6477, d4.loss_cls: 0.3533, d4.loss_bbox: 0.6425, aux_task0.loss_heatmap: 0.4867, aux_task0.loss_bbox: 0.1985, aux_task1.loss_heatmap: 0.5528, aux_task1.loss_bbox: 0.2016, aux_task2.loss_heatmap: 0.3372, aux_task2.loss_bbox: 0.1503, aux_task3.loss_heatmap: 0.3301, aux_task3.loss_bbox: 0.1367, aux_task4.loss_heatmap: 0.3265, aux_task4.loss_bbox: 0.1163, aux_task5.loss_heatmap: 0.3947, aux_task5.loss_bbox: 0.2480, loss: 9.6830, grad_norm: 30.7773
2025-05-06 08:22:20,801 - mmdet - INFO - Epoch [19][200/773]	lr: 6.393e-06, eta: 0:31:33, time: 1.788, data_time: 0.006, memory: 8822, loss_cls: 0.3664, loss_bbox: 0.6291, d0.loss_cls: 0.4003, d0.loss_bbox: 0.7557, d1.loss_cls: 0.3845, d1.loss_bbox: 0.6671, d2.loss_cls: 0.3720, d2.loss_bbox: 0.6499, d3.loss_cls: 0.3695, d3.loss_bbox: 0.6396, d4.loss_cls: 0.3662, d4.loss_bbox: 0.6334, aux_task0.loss_heatmap: 0.4267, aux_task0.loss_bbox: 0.1900, aux_task1.loss_heatmap: 0.6036, aux_task1.loss_bbox: 0.1953, aux_task2.loss_heatmap: 0.3829, aux_task2.loss_bbox: 0.1558, aux_task3.loss_heatmap: 0.3273, aux_task3.loss_bbox: 0.1193, aux_task4.loss_heatmap: 0.4334, aux_task4.loss_bbox: 0.1262, aux_task5.loss_heatmap: 0.3987, aux_task5.loss_bbox: 0.2531, loss: 9.8460, grad_norm: 29.4294
2025-05-06 08:23:27,778 - mmdet - INFO - Epoch [19][250/773]	lr: 5.935e-06, eta: 0:30:23, time: 1.340, data_time: 0.005, memory: 8822, loss_cls: 0.3514, loss_bbox: 0.6471, d0.loss_cls: 0.3831, d0.loss_bbox: 0.7835, d1.loss_cls: 0.3694, d1.loss_bbox: 0.6878, d2.loss_cls: 0.3611, d2.loss_bbox: 0.6693, d3.loss_cls: 0.3553, d3.loss_bbox: 0.6589, d4.loss_cls: 0.3520, d4.loss_bbox: 0.6532, aux_task0.loss_heatmap: 0.4482, aux_task0.loss_bbox: 0.1870, aux_task1.loss_heatmap: 0.6163, aux_task1.loss_bbox: 0.2113, aux_task2.loss_heatmap: 0.3449, aux_task2.loss_bbox: 0.1754, aux_task3.loss_heatmap: 0.3859, aux_task3.loss_bbox: 0.1548, aux_task4.loss_heatmap: 0.3428, aux_task4.loss_bbox: 0.1086, aux_task5.loss_heatmap: 0.4166, aux_task5.loss_bbox: 0.2587, loss: 9.9226, grad_norm: 28.5215
2025-05-06 08:24:37,427 - mmdet - INFO - Epoch [19][300/773]	lr: 5.493e-06, eta: 0:29:12, time: 1.392, data_time: 0.005, memory: 8822, loss_cls: 0.3437, loss_bbox: 0.6395, d0.loss_cls: 0.3772, d0.loss_bbox: 0.7652, d1.loss_cls: 0.3586, d1.loss_bbox: 0.6756, d2.loss_cls: 0.3475, d2.loss_bbox: 0.6591, d3.loss_cls: 0.3469, d3.loss_bbox: 0.6495, d4.loss_cls: 0.3439, d4.loss_bbox: 0.6431, aux_task0.loss_heatmap: 0.4396, aux_task0.loss_bbox: 0.1878, aux_task1.loss_heatmap: 0.5774, aux_task1.loss_bbox: 0.2047, aux_task2.loss_heatmap: 0.3515, aux_task2.loss_bbox: 0.1539, aux_task3.loss_heatmap: 0.2933, aux_task3.loss_bbox: 0.1274, aux_task4.loss_heatmap: 0.3409, aux_task4.loss_bbox: 0.1165, aux_task5.loss_heatmap: 0.3849, aux_task5.loss_bbox: 0.2517, loss: 9.5795, grad_norm: 29.4725
2025-05-06 08:25:44,932 - mmdet - INFO - Epoch [19][350/773]	lr: 5.067e-06, eta: 0:28:02, time: 1.351, data_time: 0.009, memory: 8822, loss_cls: 0.3396, loss_bbox: 0.6310, d0.loss_cls: 0.3776, d0.loss_bbox: 0.7590, d1.loss_cls: 0.3591, d1.loss_bbox: 0.6710, d2.loss_cls: 0.3503, d2.loss_bbox: 0.6525, d3.loss_cls: 0.3457, d3.loss_bbox: 0.6397, d4.loss_cls: 0.3394, d4.loss_bbox: 0.6354, aux_task0.loss_heatmap: 0.4439, aux_task0.loss_bbox: 0.1876, aux_task1.loss_heatmap: 0.5387, aux_task1.loss_bbox: 0.1897, aux_task2.loss_heatmap: 0.3641, aux_task2.loss_bbox: 0.1601, aux_task3.loss_heatmap: 0.2880, aux_task3.loss_bbox: 0.1381, aux_task4.loss_heatmap: 0.4044, aux_task4.loss_bbox: 0.1353, aux_task5.loss_heatmap: 0.4012, aux_task5.loss_bbox: 0.2575, loss: 9.6089, grad_norm: 30.5246
2025-05-06 08:26:51,002 - mmdet - INFO - Epoch [19][400/773]	lr: 4.658e-06, eta: 0:26:51, time: 1.321, data_time: 0.004, memory: 8822, loss_cls: 0.3394, loss_bbox: 0.6257, d0.loss_cls: 0.3765, d0.loss_bbox: 0.7517, d1.loss_cls: 0.3579, d1.loss_bbox: 0.6635, d2.loss_cls: 0.3458, d2.loss_bbox: 0.6448, d3.loss_cls: 0.3442, d3.loss_bbox: 0.6350, d4.loss_cls: 0.3395, d4.loss_bbox: 0.6292, aux_task0.loss_heatmap: 0.4071, aux_task0.loss_bbox: 0.1778, aux_task1.loss_heatmap: 0.5590, aux_task1.loss_bbox: 0.1980, aux_task2.loss_heatmap: 0.3279, aux_task2.loss_bbox: 0.1379, aux_task3.loss_heatmap: 0.3055, aux_task3.loss_bbox: 0.1348, aux_task4.loss_heatmap: 0.3525, aux_task4.loss_bbox: 0.1295, aux_task5.loss_heatmap: 0.4042, aux_task5.loss_bbox: 0.2504, loss: 9.4378, grad_norm: 29.7611
2025-05-06 08:27:57,728 - mmdet - INFO - Epoch [19][450/773]	lr: 4.265e-06, eta: 0:25:40, time: 1.334, data_time: 0.005, memory: 8822, loss_cls: 0.3533, loss_bbox: 0.6384, d0.loss_cls: 0.3929, d0.loss_bbox: 0.7756, d1.loss_cls: 0.3728, d1.loss_bbox: 0.6839, d2.loss_cls: 0.3611, d2.loss_bbox: 0.6616, d3.loss_cls: 0.3581, d3.loss_bbox: 0.6495, d4.loss_cls: 0.3544, d4.loss_bbox: 0.6425, aux_task0.loss_heatmap: 0.4218, aux_task0.loss_bbox: 0.1830, aux_task1.loss_heatmap: 0.6106, aux_task1.loss_bbox: 0.2070, aux_task2.loss_heatmap: 0.3530, aux_task2.loss_bbox: 0.1540, aux_task3.loss_heatmap: 0.3118, aux_task3.loss_bbox: 0.1287, aux_task4.loss_heatmap: 0.3824, aux_task4.loss_bbox: 0.1271, aux_task5.loss_heatmap: 0.3908, aux_task5.loss_bbox: 0.2229, loss: 9.7374, grad_norm: 29.1128
2025-05-06 08:29:04,598 - mmdet - INFO - Epoch [19][500/773]	lr: 3.890e-06, eta: 0:24:30, time: 1.337, data_time: 0.005, memory: 8822, loss_cls: 0.3443, loss_bbox: 0.6295, d0.loss_cls: 0.3814, d0.loss_bbox: 0.7614, d1.loss_cls: 0.3627, d1.loss_bbox: 0.6706, d2.loss_cls: 0.3504, d2.loss_bbox: 0.6518, d3.loss_cls: 0.3487, d3.loss_bbox: 0.6411, d4.loss_cls: 0.3451, d4.loss_bbox: 0.6343, aux_task0.loss_heatmap: 0.4373, aux_task0.loss_bbox: 0.1883, aux_task1.loss_heatmap: 0.5839, aux_task1.loss_bbox: 0.2076, aux_task2.loss_heatmap: 0.4030, aux_task2.loss_bbox: 0.1662, aux_task3.loss_heatmap: 0.2959, aux_task3.loss_bbox: 0.1234, aux_task4.loss_heatmap: 0.3460, aux_task4.loss_bbox: 0.1147, aux_task5.loss_heatmap: 0.3960, aux_task5.loss_bbox: 0.2463, loss: 9.6300, grad_norm: 30.2198
2025-05-06 08:30:11,717 - mmdet - INFO - Epoch [19][550/773]	lr: 3.531e-06, eta: 0:23:19, time: 1.342, data_time: 0.005, memory: 8822, loss_cls: 0.3448, loss_bbox: 0.6402, d0.loss_cls: 0.3800, d0.loss_bbox: 0.7759, d1.loss_cls: 0.3632, d1.loss_bbox: 0.6776, d2.loss_cls: 0.3506, d2.loss_bbox: 0.6604, d3.loss_cls: 0.3487, d3.loss_bbox: 0.6495, d4.loss_cls: 0.3441, d4.loss_bbox: 0.6450, aux_task0.loss_heatmap: 0.4502, aux_task0.loss_bbox: 0.1906, aux_task1.loss_heatmap: 0.5719, aux_task1.loss_bbox: 0.1989, aux_task2.loss_heatmap: 0.4197, aux_task2.loss_bbox: 0.1741, aux_task3.loss_heatmap: 0.2441, aux_task3.loss_bbox: 0.1123, aux_task4.loss_heatmap: 0.3188, aux_task4.loss_bbox: 0.1078, aux_task5.loss_heatmap: 0.4114, aux_task5.loss_bbox: 0.2549, loss: 9.6347, grad_norm: 29.9533
2025-05-06 08:31:17,867 - mmdet - INFO - Epoch [19][600/773]	lr: 3.188e-06, eta: 0:22:09, time: 1.323, data_time: 0.005, memory: 8822, loss_cls: 0.3516, loss_bbox: 0.6248, d0.loss_cls: 0.3825, d0.loss_bbox: 0.7564, d1.loss_cls: 0.3659, d1.loss_bbox: 0.6665, d2.loss_cls: 0.3590, d2.loss_bbox: 0.6481, d3.loss_cls: 0.3565, d3.loss_bbox: 0.6351, d4.loss_cls: 0.3507, d4.loss_bbox: 0.6314, aux_task0.loss_heatmap: 0.4365, aux_task0.loss_bbox: 0.1868, aux_task1.loss_heatmap: 0.6330, aux_task1.loss_bbox: 0.2051, aux_task2.loss_heatmap: 0.3396, aux_task2.loss_bbox: 0.1547, aux_task3.loss_heatmap: 0.3394, aux_task3.loss_bbox: 0.1462, aux_task4.loss_heatmap: 0.3456, aux_task4.loss_bbox: 0.1116, aux_task5.loss_heatmap: 0.4478, aux_task5.loss_bbox: 0.2588, loss: 9.7334, grad_norm: 28.9480
2025-05-06 08:32:24,116 - mmdet - INFO - Epoch [19][650/773]	lr: 2.863e-06, eta: 0:20:58, time: 1.325, data_time: 0.005, memory: 8822, loss_cls: 0.3631, loss_bbox: 0.6434, d0.loss_cls: 0.4067, d0.loss_bbox: 0.7728, d1.loss_cls: 0.3844, d1.loss_bbox: 0.6828, d2.loss_cls: 0.3747, d2.loss_bbox: 0.6626, d3.loss_cls: 0.3700, d3.loss_bbox: 0.6510, d4.loss_cls: 0.3641, d4.loss_bbox: 0.6466, aux_task0.loss_heatmap: 0.4065, aux_task0.loss_bbox: 0.1796, aux_task1.loss_heatmap: 0.5685, aux_task1.loss_bbox: 0.2021, aux_task2.loss_heatmap: 0.3953, aux_task2.loss_bbox: 0.1568, aux_task3.loss_heatmap: 0.3445, aux_task3.loss_bbox: 0.1273, aux_task4.loss_heatmap: 0.3487, aux_task4.loss_bbox: 0.1108, aux_task5.loss_heatmap: 0.4417, aux_task5.loss_bbox: 0.2481, loss: 9.8519, grad_norm: 29.8919
2025-05-06 08:33:30,663 - mmdet - INFO - Epoch [19][700/773]	lr: 2.555e-06, eta: 0:19:48, time: 1.331, data_time: 0.005, memory: 8822, loss_cls: 0.3589, loss_bbox: 0.6383, d0.loss_cls: 0.3939, d0.loss_bbox: 0.7650, d1.loss_cls: 0.3726, d1.loss_bbox: 0.6766, d2.loss_cls: 0.3646, d2.loss_bbox: 0.6600, d3.loss_cls: 0.3619, d3.loss_bbox: 0.6493, d4.loss_cls: 0.3586, d4.loss_bbox: 0.6434, aux_task0.loss_heatmap: 0.4225, aux_task0.loss_bbox: 0.1847, aux_task1.loss_heatmap: 0.5723, aux_task1.loss_bbox: 0.1978, aux_task2.loss_heatmap: 0.2885, aux_task2.loss_bbox: 0.1288, aux_task3.loss_heatmap: 0.2651, aux_task3.loss_bbox: 0.1064, aux_task4.loss_heatmap: 0.3668, aux_task4.loss_bbox: 0.1379, aux_task5.loss_heatmap: 0.4046, aux_task5.loss_bbox: 0.2497, loss: 9.5681, grad_norm: 30.0851
2025-05-06 08:34:37,008 - mmdet - INFO - Epoch [19][750/773]	lr: 2.264e-06, eta: 0:18:37, time: 1.327, data_time: 0.005, memory: 8822, loss_cls: 0.3566, loss_bbox: 0.6517, d0.loss_cls: 0.3954, d0.loss_bbox: 0.7795, d1.loss_cls: 0.3779, d1.loss_bbox: 0.6914, d2.loss_cls: 0.3657, d2.loss_bbox: 0.6694, d3.loss_cls: 0.3620, d3.loss_bbox: 0.6605, d4.loss_cls: 0.3572, d4.loss_bbox: 0.6556, aux_task0.loss_heatmap: 0.4679, aux_task0.loss_bbox: 0.1918, aux_task1.loss_heatmap: 0.6154, aux_task1.loss_bbox: 0.2051, aux_task2.loss_heatmap: 0.4299, aux_task2.loss_bbox: 0.1840, aux_task3.loss_heatmap: 0.3162, aux_task3.loss_bbox: 0.1343, aux_task4.loss_heatmap: 0.4405, aux_task4.loss_bbox: 0.1361, aux_task5.loss_heatmap: 0.4254, aux_task5.loss_bbox: 0.2426, loss: 10.1120, grad_norm: 29.0784
2025-05-06 08:35:08,240 - mmdet - INFO - Saving checkpoint at 19 epochs
2025-05-06 08:35:09,813 - mmdet - INFO - No ObjectSample now!
2025-05-06 08:36:22,109 - mmdet - INFO - Epoch [20][50/773]	lr: 1.871e-06, eta: 0:16:53, time: 1.446, data_time: 0.060, memory: 8822, loss_cls: 0.3491, loss_bbox: 0.6287, d0.loss_cls: 0.3764, d0.loss_bbox: 0.7607, d1.loss_cls: 0.3637, d1.loss_bbox: 0.6679, d2.loss_cls: 0.3555, d2.loss_bbox: 0.6481, d3.loss_cls: 0.3520, d3.loss_bbox: 0.6376, d4.loss_cls: 0.3496, d4.loss_bbox: 0.6320, aux_task0.loss_heatmap: 0.4456, aux_task0.loss_bbox: 0.1952, aux_task1.loss_heatmap: 0.5687, aux_task1.loss_bbox: 0.1968, aux_task2.loss_heatmap: 0.3422, aux_task2.loss_bbox: 0.1610, aux_task3.loss_heatmap: 0.2859, aux_task3.loss_bbox: 0.1239, aux_task4.loss_heatmap: 0.3900, aux_task4.loss_bbox: 0.1320, aux_task5.loss_heatmap: 0.4046, aux_task5.loss_bbox: 0.2419, loss: 9.6092, grad_norm: 28.9288
2025-05-06 08:37:29,300 - mmdet - INFO - Epoch [20][100/773]	lr: 1.623e-06, eta: 0:15:43, time: 1.344, data_time: 0.005, memory: 8822, loss_cls: 0.3445, loss_bbox: 0.6213, d0.loss_cls: 0.3807, d0.loss_bbox: 0.7403, d1.loss_cls: 0.3629, d1.loss_bbox: 0.6552, d2.loss_cls: 0.3505, d2.loss_bbox: 0.6410, d3.loss_cls: 0.3479, d3.loss_bbox: 0.6291, d4.loss_cls: 0.3446, d4.loss_bbox: 0.6245, aux_task0.loss_heatmap: 0.4142, aux_task0.loss_bbox: 0.1730, aux_task1.loss_heatmap: 0.5883, aux_task1.loss_bbox: 0.2022, aux_task2.loss_heatmap: 0.3205, aux_task2.loss_bbox: 0.1413, aux_task3.loss_heatmap: 0.2896, aux_task3.loss_bbox: 0.1208, aux_task4.loss_heatmap: 0.3573, aux_task4.loss_bbox: 0.1213, aux_task5.loss_heatmap: 0.4194, aux_task5.loss_bbox: 0.2555, loss: 9.4460, grad_norm: 29.7852
2025-05-06 08:38:40,224 - mmdet - INFO - Epoch [20][150/773]	lr: 1.392e-06, eta: 0:14:33, time: 1.418, data_time: 0.005, memory: 8822, loss_cls: 0.3647, loss_bbox: 0.6466, d0.loss_cls: 0.4015, d0.loss_bbox: 0.7768, d1.loss_cls: 0.3848, d1.loss_bbox: 0.6916, d2.loss_cls: 0.3724, d2.loss_bbox: 0.6722, d3.loss_cls: 0.3690, d3.loss_bbox: 0.6594, d4.loss_cls: 0.3639, d4.loss_bbox: 0.6534, aux_task0.loss_heatmap: 0.4716, aux_task0.loss_bbox: 0.1954, aux_task1.loss_heatmap: 0.6064, aux_task1.loss_bbox: 0.2179, aux_task2.loss_heatmap: 0.3711, aux_task2.loss_bbox: 0.1493, aux_task3.loss_heatmap: 0.3082, aux_task3.loss_bbox: 0.1214, aux_task4.loss_heatmap: 0.3335, aux_task4.loss_bbox: 0.1252, aux_task5.loss_heatmap: 0.3904, aux_task5.loss_bbox: 0.2470, loss: 9.8939, grad_norm: 29.3909
2025-05-06 08:39:47,678 - mmdet - INFO - Epoch [20][200/773]	lr: 1.179e-06, eta: 0:13:23, time: 1.349, data_time: 0.005, memory: 8822, loss_cls: 0.3434, loss_bbox: 0.6317, d0.loss_cls: 0.3764, d0.loss_bbox: 0.7638, d1.loss_cls: 0.3576, d1.loss_bbox: 0.6720, d2.loss_cls: 0.3494, d2.loss_bbox: 0.6514, d3.loss_cls: 0.3457, d3.loss_bbox: 0.6412, d4.loss_cls: 0.3436, d4.loss_bbox: 0.6364, aux_task0.loss_heatmap: 0.4297, aux_task0.loss_bbox: 0.1837, aux_task1.loss_heatmap: 0.5680, aux_task1.loss_bbox: 0.2042, aux_task2.loss_heatmap: 0.3483, aux_task2.loss_bbox: 0.1465, aux_task3.loss_heatmap: 0.2478, aux_task3.loss_bbox: 0.1113, aux_task4.loss_heatmap: 0.3965, aux_task4.loss_bbox: 0.1323, aux_task5.loss_heatmap: 0.4232, aux_task5.loss_bbox: 0.2566, loss: 9.5604, grad_norm: 29.3506
2025-05-06 08:41:06,362 - mmdet - INFO - Epoch [20][250/773]	lr: 9.829e-07, eta: 0:12:13, time: 1.574, data_time: 0.005, memory: 8822, loss_cls: 0.3533, loss_bbox: 0.6220, d0.loss_cls: 0.3861, d0.loss_bbox: 0.7631, d1.loss_cls: 0.3730, d1.loss_bbox: 0.6651, d2.loss_cls: 0.3621, d2.loss_bbox: 0.6440, d3.loss_cls: 0.3601, d3.loss_bbox: 0.6328, d4.loss_cls: 0.3546, d4.loss_bbox: 0.6275, aux_task0.loss_heatmap: 0.4281, aux_task0.loss_bbox: 0.1803, aux_task1.loss_heatmap: 0.6273, aux_task1.loss_bbox: 0.2068, aux_task2.loss_heatmap: 0.2968, aux_task2.loss_bbox: 0.1344, aux_task3.loss_heatmap: 0.3339, aux_task3.loss_bbox: 0.1328, aux_task4.loss_heatmap: 0.3542, aux_task4.loss_bbox: 0.1195, aux_task5.loss_heatmap: 0.4087, aux_task5.loss_bbox: 0.2527, loss: 9.6193, grad_norm: 29.9384
2025-05-06 08:42:16,694 - mmdet - INFO - Epoch [20][300/773]	lr: 8.049e-07, eta: 0:11:03, time: 1.405, data_time: 0.004, memory: 8822, loss_cls: 0.3504, loss_bbox: 0.6372, d0.loss_cls: 0.3835, d0.loss_bbox: 0.7698, d1.loss_cls: 0.3685, d1.loss_bbox: 0.6794, d2.loss_cls: 0.3569, d2.loss_bbox: 0.6616, d3.loss_cls: 0.3551, d3.loss_bbox: 0.6484, d4.loss_cls: 0.3524, d4.loss_bbox: 0.6424, aux_task0.loss_heatmap: 0.4582, aux_task0.loss_bbox: 0.1934, aux_task1.loss_heatmap: 0.5247, aux_task1.loss_bbox: 0.1895, aux_task2.loss_heatmap: 0.3748, aux_task2.loss_bbox: 0.1720, aux_task3.loss_heatmap: 0.2791, aux_task3.loss_bbox: 0.1198, aux_task4.loss_heatmap: 0.3677, aux_task4.loss_bbox: 0.1263, aux_task5.loss_heatmap: 0.4313, aux_task5.loss_bbox: 0.2511, loss: 9.6935, grad_norm: 29.8940
2025-05-06 08:43:27,990 - mmdet - INFO - Epoch [20][350/773]	lr: 6.445e-07, eta: 0:09:53, time: 1.426, data_time: 0.005, memory: 8822, loss_cls: 0.3374, loss_bbox: 0.6355, d0.loss_cls: 0.3730, d0.loss_bbox: 0.7703, d1.loss_cls: 0.3526, d1.loss_bbox: 0.6799, d2.loss_cls: 0.3431, d2.loss_bbox: 0.6583, d3.loss_cls: 0.3408, d3.loss_bbox: 0.6468, d4.loss_cls: 0.3380, d4.loss_bbox: 0.6408, aux_task0.loss_heatmap: 0.4269, aux_task0.loss_bbox: 0.1859, aux_task1.loss_heatmap: 0.5874, aux_task1.loss_bbox: 0.2004, aux_task2.loss_heatmap: 0.3555, aux_task2.loss_bbox: 0.1698, aux_task3.loss_heatmap: 0.2934, aux_task3.loss_bbox: 0.1370, aux_task4.loss_heatmap: 0.3120, aux_task4.loss_bbox: 0.1099, aux_task5.loss_heatmap: 0.4069, aux_task5.loss_bbox: 0.2481, loss: 9.5498, grad_norm: 28.4489
2025-05-06 08:44:35,165 - mmdet - INFO - Epoch [20][400/773]	lr: 5.020e-07, eta: 0:08:43, time: 1.344, data_time: 0.005, memory: 8822, loss_cls: 0.3423, loss_bbox: 0.6415, d0.loss_cls: 0.3821, d0.loss_bbox: 0.7739, d1.loss_cls: 0.3638, d1.loss_bbox: 0.6809, d2.loss_cls: 0.3507, d2.loss_bbox: 0.6622, d3.loss_cls: 0.3475, d3.loss_bbox: 0.6523, d4.loss_cls: 0.3425, d4.loss_bbox: 0.6464, aux_task0.loss_heatmap: 0.4463, aux_task0.loss_bbox: 0.1842, aux_task1.loss_heatmap: 0.5894, aux_task1.loss_bbox: 0.2035, aux_task2.loss_heatmap: 0.3855, aux_task2.loss_bbox: 0.1607, aux_task3.loss_heatmap: 0.3000, aux_task3.loss_bbox: 0.1170, aux_task4.loss_heatmap: 0.3251, aux_task4.loss_bbox: 0.1207, aux_task5.loss_heatmap: 0.3835, aux_task5.loss_bbox: 0.2495, loss: 9.6517, grad_norm: 28.7159
2025-05-06 08:45:41,952 - mmdet - INFO - Epoch [20][450/773]	lr: 3.772e-07, eta: 0:07:32, time: 1.335, data_time: 0.004, memory: 8822, loss_cls: 0.3451, loss_bbox: 0.6332, d0.loss_cls: 0.3776, d0.loss_bbox: 0.7647, d1.loss_cls: 0.3624, d1.loss_bbox: 0.6730, d2.loss_cls: 0.3538, d2.loss_bbox: 0.6517, d3.loss_cls: 0.3492, d3.loss_bbox: 0.6417, d4.loss_cls: 0.3469, d4.loss_bbox: 0.6375, aux_task0.loss_heatmap: 0.4275, aux_task0.loss_bbox: 0.1783, aux_task1.loss_heatmap: 0.5947, aux_task1.loss_bbox: 0.2092, aux_task2.loss_heatmap: 0.3401, aux_task2.loss_bbox: 0.1422, aux_task3.loss_heatmap: 0.3343, aux_task3.loss_bbox: 0.1267, aux_task4.loss_heatmap: 0.2996, aux_task4.loss_bbox: 0.1181, aux_task5.loss_heatmap: 0.4122, aux_task5.loss_bbox: 0.2421, loss: 9.5617, grad_norm: 30.3099
2025-05-06 08:46:48,904 - mmdet - INFO - Epoch [20][500/773]	lr: 2.702e-07, eta: 0:06:22, time: 1.339, data_time: 0.005, memory: 8822, loss_cls: 0.3466, loss_bbox: 0.6371, d0.loss_cls: 0.3786, d0.loss_bbox: 0.7621, d1.loss_cls: 0.3658, d1.loss_bbox: 0.6748, d2.loss_cls: 0.3558, d2.loss_bbox: 0.6555, d3.loss_cls: 0.3515, d3.loss_bbox: 0.6475, d4.loss_cls: 0.3464, d4.loss_bbox: 0.6420, aux_task0.loss_heatmap: 0.4341, aux_task0.loss_bbox: 0.1864, aux_task1.loss_heatmap: 0.5790, aux_task1.loss_bbox: 0.2072, aux_task2.loss_heatmap: 0.3833, aux_task2.loss_bbox: 0.1549, aux_task3.loss_heatmap: 0.3086, aux_task3.loss_bbox: 0.1411, aux_task4.loss_heatmap: 0.3477, aux_task4.loss_bbox: 0.1131, aux_task5.loss_heatmap: 0.4200, aux_task5.loss_bbox: 0.2585, loss: 9.6976, grad_norm: 29.1724
2025-05-06 08:47:56,728 - mmdet - INFO - Epoch [20][550/773]	lr: 1.810e-07, eta: 0:05:12, time: 1.357, data_time: 0.004, memory: 8822, loss_cls: 0.3449, loss_bbox: 0.6324, d0.loss_cls: 0.3842, d0.loss_bbox: 0.7569, d1.loss_cls: 0.3651, d1.loss_bbox: 0.6731, d2.loss_cls: 0.3547, d2.loss_bbox: 0.6546, d3.loss_cls: 0.3510, d3.loss_bbox: 0.6436, d4.loss_cls: 0.3478, d4.loss_bbox: 0.6369, aux_task0.loss_heatmap: 0.4385, aux_task0.loss_bbox: 0.1784, aux_task1.loss_heatmap: 0.5773, aux_task1.loss_bbox: 0.2016, aux_task2.loss_heatmap: 0.3162, aux_task2.loss_bbox: 0.1381, aux_task3.loss_heatmap: 0.3015, aux_task3.loss_bbox: 0.1302, aux_task4.loss_heatmap: 0.4155, aux_task4.loss_bbox: 0.1315, aux_task5.loss_heatmap: 0.4049, aux_task5.loss_bbox: 0.2500, loss: 9.6289, grad_norm: 29.8395
2025-05-06 08:49:03,424 - mmdet - INFO - Epoch [20][600/773]	lr: 1.097e-07, eta: 0:04:02, time: 1.334, data_time: 0.004, memory: 8822, loss_cls: 0.3442, loss_bbox: 0.6358, d0.loss_cls: 0.3816, d0.loss_bbox: 0.7639, d1.loss_cls: 0.3654, d1.loss_bbox: 0.6743, d2.loss_cls: 0.3559, d2.loss_bbox: 0.6560, d3.loss_cls: 0.3530, d3.loss_bbox: 0.6432, d4.loss_cls: 0.3460, d4.loss_bbox: 0.6397, aux_task0.loss_heatmap: 0.4263, aux_task0.loss_bbox: 0.1844, aux_task1.loss_heatmap: 0.6137, aux_task1.loss_bbox: 0.2025, aux_task2.loss_heatmap: 0.3614, aux_task2.loss_bbox: 0.1716, aux_task3.loss_heatmap: 0.2718, aux_task3.loss_bbox: 0.1296, aux_task4.loss_heatmap: 0.2834, aux_task4.loss_bbox: 0.0952, aux_task5.loss_heatmap: 0.4141, aux_task5.loss_bbox: 0.2572, loss: 9.5702, grad_norm: 27.7390
2025-05-06 08:50:10,693 - mmdet - INFO - Epoch [20][650/773]	lr: 5.636e-08, eta: 0:02:52, time: 1.345, data_time: 0.005, memory: 8822, loss_cls: 0.3332, loss_bbox: 0.6273, d0.loss_cls: 0.3694, d0.loss_bbox: 0.7551, d1.loss_cls: 0.3515, d1.loss_bbox: 0.6676, d2.loss_cls: 0.3397, d2.loss_bbox: 0.6462, d3.loss_cls: 0.3372, d3.loss_bbox: 0.6363, d4.loss_cls: 0.3325, d4.loss_bbox: 0.6315, aux_task0.loss_heatmap: 0.4203, aux_task0.loss_bbox: 0.1870, aux_task1.loss_heatmap: 0.5719, aux_task1.loss_bbox: 0.1945, aux_task2.loss_heatmap: 0.4155, aux_task2.loss_bbox: 0.1624, aux_task3.loss_heatmap: 0.2618, aux_task3.loss_bbox: 0.1172, aux_task4.loss_heatmap: 0.3976, aux_task4.loss_bbox: 0.1390, aux_task5.loss_heatmap: 0.3589, aux_task5.loss_bbox: 0.2423, loss: 9.4957, grad_norm: 27.4597
2025-05-06 08:51:17,319 - mmdet - INFO - Epoch [20][700/773]	lr: 2.088e-08, eta: 0:01:42, time: 1.333, data_time: 0.005, memory: 8822, loss_cls: 0.3530, loss_bbox: 0.6209, d0.loss_cls: 0.3919, d0.loss_bbox: 0.7529, d1.loss_cls: 0.3703, d1.loss_bbox: 0.6604, d2.loss_cls: 0.3590, d2.loss_bbox: 0.6435, d3.loss_cls: 0.3568, d3.loss_bbox: 0.6326, d4.loss_cls: 0.3516, d4.loss_bbox: 0.6272, aux_task0.loss_heatmap: 0.4270, aux_task0.loss_bbox: 0.1813, aux_task1.loss_heatmap: 0.5594, aux_task1.loss_bbox: 0.2028, aux_task2.loss_heatmap: 0.3575, aux_task2.loss_bbox: 0.1546, aux_task3.loss_heatmap: 0.3181, aux_task3.loss_bbox: 0.1360, aux_task4.loss_heatmap: 0.3654, aux_task4.loss_bbox: 0.1223, aux_task5.loss_heatmap: 0.4111, aux_task5.loss_bbox: 0.2394, loss: 9.5950, grad_norm: 28.9308
2025-05-06 08:52:24,507 - mmdet - INFO - Epoch [20][750/773]	lr: 3.315e-09, eta: 0:00:32, time: 1.344, data_time: 0.004, memory: 8822, loss_cls: 0.3465, loss_bbox: 0.6317, d0.loss_cls: 0.3843, d0.loss_bbox: 0.7627, d1.loss_cls: 0.3637, d1.loss_bbox: 0.6720, d2.loss_cls: 0.3527, d2.loss_bbox: 0.6536, d3.loss_cls: 0.3501, d3.loss_bbox: 0.6422, d4.loss_cls: 0.3467, d4.loss_bbox: 0.6363, aux_task0.loss_heatmap: 0.4496, aux_task0.loss_bbox: 0.1898, aux_task1.loss_heatmap: 0.5787, aux_task1.loss_bbox: 0.1930, aux_task2.loss_heatmap: 0.3612, aux_task2.loss_bbox: 0.1586, aux_task3.loss_heatmap: 0.3101, aux_task3.loss_bbox: 0.1141, aux_task4.loss_heatmap: 0.3440, aux_task4.loss_bbox: 0.1160, aux_task5.loss_heatmap: 0.3996, aux_task5.loss_bbox: 0.2463, loss: 9.6035, grad_norm: 29.7458
2025-05-06 08:52:55,418 - mmdet - INFO - Saving checkpoint at 20 epochs
2025-05-06 09:14:43,063 - mmdet - INFO - Exp name: lidar_0075v_900q_hednet_hednet_split40_256.py
2025-05-06 09:14:43,064 - mmdet - INFO - Epoch(val) [20][1505]	pts_bbox_NuScenes/car_AP_dist_0.5: 0.6036, pts_bbox_NuScenes/car_AP_dist_1.0: 0.7311, pts_bbox_NuScenes/car_AP_dist_2.0: 0.7916, pts_bbox_NuScenes/car_AP_dist_4.0: 0.8302, pts_bbox_NuScenes/car_trans_err: 0.2313, pts_bbox_NuScenes/car_scale_err: 0.1681, pts_bbox_NuScenes/car_orient_err: 0.2459, pts_bbox_NuScenes/car_vel_err: 1.5570, pts_bbox_NuScenes/car_attr_err: 0.4408, pts_bbox_NuScenes/mATE: 0.4233, pts_bbox_NuScenes/mASE: 0.2864, pts_bbox_NuScenes/mAOE: 0.8325, pts_bbox_NuScenes/mAVE: 1.1177, pts_bbox_NuScenes/mAAE: 0.4364, pts_bbox_NuScenes/truck_AP_dist_0.5: 0.2235, pts_bbox_NuScenes/truck_AP_dist_1.0: 0.4333, pts_bbox_NuScenes/truck_AP_dist_2.0: 0.5363, pts_bbox_NuScenes/truck_AP_dist_4.0: 0.5904, pts_bbox_NuScenes/truck_trans_err: 0.4422, pts_bbox_NuScenes/truck_scale_err: 0.2263, pts_bbox_NuScenes/truck_orient_err: 0.2704, pts_bbox_NuScenes/truck_vel_err: 1.0161, pts_bbox_NuScenes/truck_attr_err: 0.3760, pts_bbox_NuScenes/construction_vehicle_AP_dist_0.5: 0.0027, pts_bbox_NuScenes/construction_vehicle_AP_dist_1.0: 0.0753, pts_bbox_NuScenes/construction_vehicle_AP_dist_2.0: 0.2485, pts_bbox_NuScenes/construction_vehicle_AP_dist_4.0: 0.3570, pts_bbox_NuScenes/construction_vehicle_trans_err: 0.8101, pts_bbox_NuScenes/construction_vehicle_scale_err: 0.4826, pts_bbox_NuScenes/construction_vehicle_orient_err: 1.1323, pts_bbox_NuScenes/construction_vehicle_vel_err: 0.1329, pts_bbox_NuScenes/construction_vehicle_attr_err: 0.3468, pts_bbox_NuScenes/bus_AP_dist_0.5: 0.2317, pts_bbox_NuScenes/bus_AP_dist_1.0: 0.5526, pts_bbox_NuScenes/bus_AP_dist_2.0: 0.7137, pts_bbox_NuScenes/bus_AP_dist_4.0: 0.7670, pts_bbox_NuScenes/bus_trans_err: 0.4980, pts_bbox_NuScenes/bus_scale_err: 0.2346, pts_bbox_NuScenes/bus_orient_err: 0.4623, pts_bbox_NuScenes/bus_vel_err: 2.3973, pts_bbox_NuScenes/bus_attr_err: 0.6722, pts_bbox_NuScenes/trailer_AP_dist_0.5: 0.1013, pts_bbox_NuScenes/trailer_AP_dist_1.0: 0.2476, pts_bbox_NuScenes/trailer_AP_dist_2.0: 0.4216, pts_bbox_NuScenes/trailer_AP_dist_4.0: 0.5548, pts_bbox_NuScenes/trailer_trans_err: 0.6099, pts_bbox_NuScenes/trailer_scale_err: 0.2491, pts_bbox_NuScenes/trailer_orient_err: 1.4978, pts_bbox_NuScenes/trailer_vel_err: 0.4330, pts_bbox_NuScenes/trailer_attr_err: 0.2328, pts_bbox_NuScenes/barrier_AP_dist_0.5: 0.2450, pts_bbox_NuScenes/barrier_AP_dist_1.0: 0.4876, pts_bbox_NuScenes/barrier_AP_dist_2.0: 0.6350, pts_bbox_NuScenes/barrier_AP_dist_4.0: 0.6887, pts_bbox_NuScenes/barrier_trans_err: 0.4861, pts_bbox_NuScenes/barrier_scale_err: 0.2908, pts_bbox_NuScenes/barrier_orient_err: 0.4877, pts_bbox_NuScenes/barrier_vel_err: nan, pts_bbox_NuScenes/barrier_attr_err: nan, pts_bbox_NuScenes/motorcycle_AP_dist_0.5: 0.3310, pts_bbox_NuScenes/motorcycle_AP_dist_1.0: 0.4342, pts_bbox_NuScenes/motorcycle_AP_dist_2.0: 0.4645, pts_bbox_NuScenes/motorcycle_AP_dist_4.0: 0.4954, pts_bbox_NuScenes/motorcycle_trans_err: 0.3012, pts_bbox_NuScenes/motorcycle_scale_err: 0.2674, pts_bbox_NuScenes/motorcycle_orient_err: 0.9496, pts_bbox_NuScenes/motorcycle_vel_err: 1.6957, pts_bbox_NuScenes/motorcycle_attr_err: 0.4652, pts_bbox_NuScenes/bicycle_AP_dist_0.5: 0.2450, pts_bbox_NuScenes/bicycle_AP_dist_1.0: 0.2868, pts_bbox_NuScenes/bicycle_AP_dist_2.0: 0.3025, pts_bbox_NuScenes/bicycle_AP_dist_4.0: 0.3288, pts_bbox_NuScenes/bicycle_trans_err: 0.2584, pts_bbox_NuScenes/bicycle_scale_err: 0.2806, pts_bbox_NuScenes/bicycle_orient_err: 0.9824, pts_bbox_NuScenes/bicycle_vel_err: 0.7393, pts_bbox_NuScenes/bicycle_attr_err: 0.1562, pts_bbox_NuScenes/pedestrian_AP_dist_0.5: 0.5237, pts_bbox_NuScenes/pedestrian_AP_dist_1.0: 0.7058, pts_bbox_NuScenes/pedestrian_AP_dist_2.0: 0.7520, pts_bbox_NuScenes/pedestrian_AP_dist_4.0: 0.7807, pts_bbox_NuScenes/pedestrian_trans_err: 0.3595, pts_bbox_NuScenes/pedestrian_scale_err: 0.2861, pts_bbox_NuScenes/pedestrian_orient_err: 1.4639, pts_bbox_NuScenes/pedestrian_vel_err: 0.9706, pts_bbox_NuScenes/pedestrian_attr_err: 0.8011, pts_bbox_NuScenes/traffic_cone_AP_dist_0.5: 0.4676, pts_bbox_NuScenes/traffic_cone_AP_dist_1.0: 0.5152, pts_bbox_NuScenes/traffic_cone_AP_dist_2.0: 0.5617, pts_bbox_NuScenes/traffic_cone_AP_dist_4.0: 0.6225, pts_bbox_NuScenes/traffic_cone_trans_err: 0.2359, pts_bbox_NuScenes/traffic_cone_scale_err: 0.3784, pts_bbox_NuScenes/traffic_cone_orient_err: nan, pts_bbox_NuScenes/traffic_cone_vel_err: nan, pts_bbox_NuScenes/traffic_cone_attr_err: nan, pts_bbox_NuScenes/NDS: 0.4382, pts_bbox_NuScenes/mAP: 0.4722
