{"env_info": "sys.platform: linux\nPython: 3.8.20 (default, Oct  3 2024, 15:24:27) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.8, V11.8.89\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0\nPyTorch: 1.13.0+cu116\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.6\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.14.0+cu116\nOpenCV: 4.11.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.6\nMMDetection: 2.27.0\nMMSegmentation: 0.30.0\nMMDetection3D: 1.0.0rc6+d00cbec\nspconv2.0: True", "config": "point_cloud_range = [-54, -54, -5.0, 54, 54, 3.0]\nclass_names = [\n    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n]\ndataset_type = 'NuScenesDataset'\ndata_root = 'data/nuscenes/'\ninput_modality = dict(\n    use_lidar=True,\n    use_camera=False,\n    use_radar=False,\n    use_map=False,\n    use_external=False)\nfile_client_args = dict(backend='disk')\ntrain_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),\n    dict(\n        type='ObjectSample',\n        db_sampler=dict(\n            data_root='data/nuscenes/',\n            info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',\n            rate=1.0,\n            prepare=dict(\n                filter_by_difficulty=[-1],\n                filter_by_min_points=dict(\n                    car=5,\n                    truck=5,\n                    bus=5,\n                    trailer=5,\n                    construction_vehicle=5,\n                    traffic_cone=5,\n                    barrier=5,\n                    motorcycle=5,\n                    bicycle=5,\n                    pedestrian=5)),\n            classes=[\n                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                'traffic_cone'\n            ],\n            sample_groups=dict(\n                car=2,\n                truck=3,\n                construction_vehicle=7,\n                bus=4,\n                trailer=6,\n                barrier=2,\n                motorcycle=6,\n                bicycle=6,\n                pedestrian=2,\n                traffic_cone=2),\n            points_loader=dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk')))),\n    dict(\n        type='GlobalRotScaleTrans',\n        rot_range=[-0.785, 0.785],\n        scale_ratio_range=[0.9, 1.1],\n        translation_std=[0.5, 0.5, 0.5]),\n    dict(\n        type='RandomFlip3D',\n        sync_2d=False,\n        flip_ratio_bev_horizontal=0.5,\n        flip_ratio_bev_vertical=0.5),\n    dict(\n        type='PointsRangeFilter',\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    dict(\n        type='ObjectRangeFilter',\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    dict(\n        type='ObjectNameFilter',\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(type='PointShuffle'),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(type='Collect3D', keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n]\ntest_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),\n    dict(\n        type='MultiScaleFlipAug3D',\n        img_scale=(1333, 800),\n        pts_scale_ratio=1,\n        flip=False,\n        transforms=[\n            dict(\n                type='GlobalRotScaleTrans',\n                rot_range=[0, 0],\n                scale_ratio_range=[1.0, 1.0],\n                translation_std=[0, 0, 0]),\n            dict(type='RandomFlip3D'),\n            dict(\n                type='PointsRangeFilter',\n                point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ],\n                with_label=False),\n            dict(\n                type='Collect3D',\n                keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n        ])\n]\neval_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        with_label=False),\n    dict(type='Collect3D', keys=['points'])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=4,\n    train=dict(\n        type='CBGSDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_train.pkl',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=10,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadAnnotations3D',\n                with_bbox_3d=True,\n                with_label_3d=True),\n            dict(\n                type='GlobalRotScaleTrans',\n                rot_range=[-0.3925, 0.3925],\n                scale_ratio_range=[0.95, 1.05],\n                translation_std=[0, 0, 0]),\n            dict(type='RandomFlip3D', flip_ratio_bev_horizontal=0.5),\n            dict(\n                type='PointsRangeFilter',\n                point_cloud_range=[-50, -50, -5, 50, 50, 3]),\n            dict(\n                type='ObjectRangeFilter',\n                point_cloud_range=[-50, -50, -5, 50, 50, 3]),\n            dict(\n                type='ObjectNameFilter',\n                classes=[\n                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                    'barrier'\n                ]),\n            dict(type='PointShuffle'),\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                    'barrier'\n                ]),\n            dict(\n                type='Collect3D',\n                keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n        ],\n        classes=[\n            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=False,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=False,\n        box_type_3d='LiDAR',\n        split=14,\n        dataset=dict(\n            type='NuScenesDataset',\n            data_root='data/nuscenes/',\n            ann_file='data/nuscenes/nuscenes_infos_train.pkl',\n            pipeline=[\n                dict(\n                    type='LoadPointsFromFile',\n                    coord_type='LIDAR',\n                    load_dim=5,\n                    use_dim=5,\n                    file_client_args=dict(backend='disk')),\n                dict(\n                    type='LoadPointsFromMultiSweeps',\n                    sweeps_num=9,\n                    use_dim=[0, 1, 2, 3, 4],\n                    file_client_args=dict(backend='disk'),\n                    pad_empty_sweeps=True,\n                    remove_close=True),\n                dict(\n                    type='LoadAnnotations3D',\n                    with_bbox_3d=True,\n                    with_label_3d=True),\n                dict(\n                    type='ObjectSample',\n                    db_sampler=dict(\n                        data_root='data/nuscenes/',\n                        info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',\n                        rate=1.0,\n                        prepare=dict(\n                            filter_by_difficulty=[-1],\n                            filter_by_min_points=dict(\n                                car=5,\n                                truck=5,\n                                bus=5,\n                                trailer=5,\n                                construction_vehicle=5,\n                                traffic_cone=5,\n                                barrier=5,\n                                motorcycle=5,\n                                bicycle=5,\n                                pedestrian=5)),\n                        classes=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        sample_groups=dict(\n                            car=2,\n                            truck=3,\n                            construction_vehicle=7,\n                            bus=4,\n                            trailer=6,\n                            barrier=2,\n                            motorcycle=6,\n                            bicycle=6,\n                            pedestrian=2,\n                            traffic_cone=2),\n                        points_loader=dict(\n                            type='LoadPointsFromFile',\n                            coord_type='LIDAR',\n                            load_dim=5,\n                            use_dim=[0, 1, 2, 3, 4],\n                            file_client_args=dict(backend='disk')))),\n                dict(\n                    type='GlobalRotScaleTrans',\n                    rot_range=[-0.785, 0.785],\n                    scale_ratio_range=[0.9, 1.1],\n                    translation_std=[0.5, 0.5, 0.5]),\n                dict(\n                    type='RandomFlip3D',\n                    sync_2d=False,\n                    flip_ratio_bev_horizontal=0.5,\n                    flip_ratio_bev_vertical=0.5),\n                dict(\n                    type='PointsRangeFilter',\n                    point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                dict(\n                    type='ObjectRangeFilter',\n                    point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                dict(\n                    type='ObjectNameFilter',\n                    classes=[\n                        'car', 'truck', 'construction_vehicle', 'bus',\n                        'trailer', 'barrier', 'motorcycle', 'bicycle',\n                        'pedestrian', 'traffic_cone'\n                    ]),\n                dict(type='PointShuffle'),\n                dict(\n                    type='DefaultFormatBundle3D',\n                    class_names=[\n                        'car', 'truck', 'construction_vehicle', 'bus',\n                        'trailer', 'barrier', 'motorcycle', 'bicycle',\n                        'pedestrian', 'traffic_cone'\n                    ]),\n                dict(\n                    type='Collect3D',\n                    keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n            ],\n            classes=[\n                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                'traffic_cone'\n            ],\n            test_mode=False,\n            use_valid_flag=True,\n            box_type_3d='LiDAR')),\n    val=dict(\n        type='NuScenesDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_val.pkl',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=9,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk'),\n                pad_empty_sweeps=True,\n                remove_close=True),\n            dict(\n                type='LoadAnnotations3D',\n                with_bbox_3d=True,\n                with_label_3d=True),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1333, 800),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='GlobalRotScaleTrans',\n                        rot_range=[0, 0],\n                        scale_ratio_range=[1.0, 1.0],\n                        translation_std=[0, 0, 0]),\n                    dict(type='RandomFlip3D'),\n                    dict(\n                        type='PointsRangeFilter',\n                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(\n                        type='Collect3D',\n                        keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=False,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=True,\n        box_type_3d='LiDAR'),\n    test=dict(\n        type='NuScenesDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_val.pkl',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=9,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk'),\n                pad_empty_sweeps=True,\n                remove_close=True),\n            dict(\n                type='LoadAnnotations3D',\n                with_bbox_3d=True,\n                with_label_3d=True),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1333, 800),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='GlobalRotScaleTrans',\n                        rot_range=[0, 0],\n                        scale_ratio_range=[1.0, 1.0],\n                        translation_std=[0, 0, 0]),\n                    dict(type='RandomFlip3D'),\n                    dict(\n                        type='PointsRangeFilter',\n                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(\n                        type='Collect3D',\n                        keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=False,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=True,\n        box_type_3d='LiDAR'))\nevaluation = dict(\n    interval=1,\n    pipeline=[\n        dict(\n            type='LoadPointsFromFile',\n            coord_type='LIDAR',\n            load_dim=5,\n            use_dim=5,\n            file_client_args=dict(backend='disk')),\n        dict(\n            type='LoadPointsFromMultiSweeps',\n            sweeps_num=10,\n            file_client_args=dict(backend='disk')),\n        dict(\n            type='DefaultFormatBundle3D',\n            class_names=[\n                'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                'barrier'\n            ],\n            with_label=False),\n        dict(type='Collect3D', keys=['points'])\n    ])\noptimizer = dict(type='AdamW', lr=1.25e-05, weight_decay=0.01)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='cyclic',\n    target_ratio=(10, 0.0001),\n    cyclic_times=1,\n    step_ratio_up=0.4)\nmomentum_config = dict(\n    policy='cyclic',\n    target_ratio=(0.8947368421052632, 1),\n    cyclic_times=1,\n    step_ratio_up=0.4)\nrunner = dict(type='EpochBasedRunner', max_epochs=20)\ncheckpoint_config = dict(interval=1, max_keep_ckpts=10)\nlog_config = dict(\n    interval=50,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nwork_dir = './work_dirs/lidar_0075v_900q_split14_2x2_hednetmiddleencoder_hednetbackbone4_dss0511_dp03_hugeep2_num2_morton_conv_xy_rope/fp16'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nplugin = 'plugin/futr3d'\nvoxel_size = [0.075, 0.075, 0.2]\ncenter_head = dict(\n    type='CenterHead',\n    in_channels=512,\n    tasks=[\n        dict(num_class=1, class_names=['car']),\n        dict(num_class=2, class_names=['truck', 'construction_vehicle']),\n        dict(num_class=2, class_names=['bus', 'trailer']),\n        dict(num_class=1, class_names=['barrier']),\n        dict(num_class=2, class_names=['motorcycle', 'bicycle']),\n        dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])\n    ],\n    common_heads=dict(\n        reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),\n    share_conv_channel=64,\n    bbox_coder=dict(\n        type='CenterPointBBoxCoder',\n        pc_range=[-54, -54],\n        post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n        max_num=500,\n        score_threshold=0.1,\n        out_size_factor=8,\n        voxel_size=[0.075, 0.075],\n        code_size=9),\n    separate_head=dict(type='SeparateHead', init_bias=-2.19, final_kernel=3),\n    loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),\n    loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),\n    norm_bbox=True)\nmodel = dict(\n    type='FUTR3D',\n    aux_weight=0.5,\n    pts_voxel_layer=dict(\n        max_num_points=-1,\n        voxel_size=[0.075, 0.075, 0.2],\n        max_voxels=(-1, -1),\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    pts_voxel_encoder=dict(\n        type='DynamicVFE',\n        in_channels=5,\n        feat_channels=[64, 128],\n        with_distance=False,\n        with_cluster_center=True,\n        with_voxel_center=True,\n        voxel_size=[0.075, 0.075, 0.2],\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    pts_middle_encoder=dict(\n        type='HEDNet',\n        in_channels=128,\n        sparse_shape=[41, 1440, 1440],\n        model_cfg=dict(\n            FEATURE_DIM=128,\n            NUM_LAYERS=2,\n            NUM_SBB=[2, 1, 1],\n            DOWN_STRIDE=[1, 2, 2],\n            DOWN_KERNEL_SIZE=[3, 3, 3])),\n    pts_backbone=dict(\n        type='CascadeDEDBackbone',\n        in_channels=256,\n        model_cfg=dict(\n            USE_SECONDMAMBA=False,\n            FEATURE_DIM=256,\n            NUM_LAYERS=4,\n            NUM_SBB=[2, 1, 1],\n            DOWN_STRIDES=[1, 2, 2])),\n    pts_neck=dict(\n        type='FPN',\n        norm_cfg=dict(type='BN2d', eps=0.001, momentum=0.01),\n        act_cfg=dict(type='ReLU', inplace=False),\n        in_channels=[256],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs=True,\n        num_outs=4,\n        relu_before_extra_convs=True),\n    pts_bbox_head=dict(\n        type='FUTR3DHead',\n        use_dab=True,\n        use_dss=True,\n        use_hybrid=False,\n        dss_date_version='0511',\n        dss_drop_prob=0.3,\n        dss_mamba_version='DSSMamba_Huge_EP2',\n        dss_num_layers=2,\n        dss_use_morton=True,\n        dss_use_conv=True,\n        dss_use_xy=True,\n        dss_use_rope=True,\n        dss_stack=True,\n        dss_strong_cls=True,\n        anchor_size=3,\n        use_aux=True,\n        aux_head=dict(\n            type='CenterHead',\n            in_channels=512,\n            tasks=[\n                dict(num_class=1, class_names=['car']),\n                dict(\n                    num_class=2, class_names=['truck',\n                                              'construction_vehicle']),\n                dict(num_class=2, class_names=['bus', 'trailer']),\n                dict(num_class=1, class_names=['barrier']),\n                dict(num_class=2, class_names=['motorcycle', 'bicycle']),\n                dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])\n            ],\n            common_heads=dict(\n                reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),\n            share_conv_channel=64,\n            bbox_coder=dict(\n                type='CenterPointBBoxCoder',\n                pc_range=[-54, -54],\n                post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n                max_num=500,\n                score_threshold=0.1,\n                out_size_factor=8,\n                voxel_size=[0.075, 0.075],\n                code_size=9),\n            separate_head=dict(\n                type='SeparateHead', init_bias=-2.19, final_kernel=3),\n            loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),\n            loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),\n            norm_bbox=True),\n        mix_selection=False,\n        num_query=900,\n        num_classes=10,\n        in_channels=256,\n        pc_range=[-54, -54, -5.0, 54, 54, 3.0],\n        sync_cls_avg_factor=True,\n        with_box_refine=True,\n        as_two_stage=False,\n        code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],\n        transformer=dict(\n            type='FUTR3DTransformer',\n            use_dab=True,\n            decoder=dict(\n                type='FUTR3DTransformerDecoder',\n                num_layers=6,\n                use_dab=True,\n                anchor_size=3,\n                return_intermediate=True,\n                transformerlayers=dict(\n                    type='DetrTransformerDecoderLayer',\n                    attn_cfgs=[\n                        dict(\n                            type='MultiheadAttention',\n                            embed_dims=256,\n                            num_heads=8,\n                            dropout=0.1),\n                        dict(type='FUTR3DAttention', embed_dims=256)\n                    ],\n                    feedforward_channels=1024,\n                    ffn_dropout=0.1,\n                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',\n                                     'ffn', 'norm')))),\n        positional_encoding=dict(\n            type='SinePositionalEncoding',\n            num_feats=128,\n            normalize=True,\n            offset=-0.5),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=2.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=0.25),\n        loss_iou=dict(type='GIoULoss', loss_weight=0)),\n    train_cfg=dict(\n        pts=dict(\n            point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0],\n            pc_range=[-54, -54, -5.0, 54, 54, 3.0],\n            grid_size=[1440, 1440, 40],\n            voxel_size=[0.075, 0.075, 0.2],\n            out_size_factor=8,\n            dense_reg=1,\n            gaussian_overlap=0.1,\n            max_objs=500,\n            min_radius=2,\n            code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],\n            assigner=dict(\n                type='HungarianAssigner3D',\n                cls_cost=dict(type='FocalLossCost', weight=2.0),\n                reg_cost=dict(type='BBox3DL1Cost', weight=0.25),\n                iou_cost=dict(type='IoUCost', weight=0)))),\n    test_cfg=dict(\n        pts=dict(\n            pc_range=[-54, -54],\n            post_center_limit_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n            max_per_img=500,\n            max_pool_nms=False,\n            min_radius=[4, 12, 10, 1, 0.85, 0.175],\n            out_size_factor=8,\n            voxel_size=[0.075, 0.075],\n            nms_type='circle',\n            pre_max_size=1000,\n            post_max_size=83,\n            nms_thr=0.2,\n            max_num=300,\n            score_threshold=0,\n            post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0])))\ndb_sampler = dict(\n    data_root='data/nuscenes/',\n    info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',\n    rate=1.0,\n    prepare=dict(\n        filter_by_difficulty=[-1],\n        filter_by_min_points=dict(\n            car=5,\n            truck=5,\n            bus=5,\n            trailer=5,\n            construction_vehicle=5,\n            traffic_cone=5,\n            barrier=5,\n            motorcycle=5,\n            bicycle=5,\n            pedestrian=5)),\n    classes=[\n        'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n        'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n    ],\n    sample_groups=dict(\n        car=2,\n        truck=3,\n        construction_vehicle=7,\n        bus=4,\n        trailer=6,\n        barrier=2,\n        motorcycle=6,\n        bicycle=6,\n        pedestrian=2,\n        traffic_cone=2),\n    points_loader=dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk')))\nfind_unused_parameters = True\ncustom_hooks = [dict(type='FadeOjectSampleHook', num_last_epochs=5)]\nfp16 = dict(loss_scale=1.0)\ngpu_ids = range(0, 2)\n", "seed": 0, "exp_name": "lidar_0075v_900q_split14_2x2_hednetmiddleencoder_hednetbackbone4_dss0511_dp03_hugeep2_num2_morton_conv_xy_rope.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 1e-05, "memory": 14439, "data_time": 0.16066, "loss_cls": 2.17639, "loss_bbox": 2.26644, "d0.loss_cls": 2.2236, "d0.loss_bbox": 4.40802, "d1.loss_cls": 2.21165, "d1.loss_bbox": 2.27627, "d2.loss_cls": 2.19363, "d2.loss_bbox": 2.2737, "d3.loss_cls": 2.17997, "d3.loss_bbox": 2.27139, "d4.loss_cls": 2.17752, "d4.loss_bbox": 2.26905, "aux_task0.loss_heatmap": 335.00291, "aux_task0.loss_bbox": 0.902, "aux_task1.loss_heatmap": 658.00542, "aux_task1.loss_bbox": 1.03144, "aux_task2.loss_heatmap": 957.09541, "aux_task2.loss_bbox": 1.25793, "aux_task3.loss_heatmap": 1089.67156, "aux_task3.loss_bbox": 0.7714, "aux_task4.loss_heatmap": 534.2762, "aux_task4.loss_bbox": 0.76239, "aux_task5.loss_heatmap": 711.61656, "aux_task5.loss_bbox": 0.85076, "loss": 4320.17155, "grad_norm": 64922.48117, "time": 1.43244}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 1e-05, "memory": 14439, "data_time": 0.02854, "loss_cls": 1.78175, "loss_bbox": 2.16281, "d0.loss_cls": 2.06906, "d0.loss_bbox": 4.27093, "d1.loss_cls": 1.93213, "d1.loss_bbox": 2.2213, "d2.loss_cls": 1.82647, "d2.loss_bbox": 2.20597, "d3.loss_cls": 1.7724, "d3.loss_bbox": 2.19089, "d4.loss_cls": 1.78183, "d4.loss_bbox": 2.17803, "aux_task0.loss_heatmap": 212.9655, "aux_task0.loss_bbox": 0.79021, "aux_task1.loss_heatmap": 432.42618, "aux_task1.loss_bbox": 0.94648, "aux_task2.loss_heatmap": 616.34594, "aux_task2.loss_bbox": 1.14455, "aux_task3.loss_heatmap": 483.00413, "aux_task3.loss_bbox": 0.60042, "aux_task4.loss_heatmap": 321.02453, "aux_task4.loss_bbox": 0.61553, "aux_task5.loss_heatmap": 374.67762, "aux_task5.loss_bbox": 0.69468, "loss": 2471.62935, "grad_norm": 17175.73173, "time": 1.18214}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 14557, "data_time": 0.03037, "loss_cls": 1.29229, "loss_bbox": 1.94293, "d0.loss_cls": 1.51435, "d0.loss_bbox": 4.07539, "d1.loss_cls": 1.3527, "d1.loss_bbox": 2.11262, "d2.loss_cls": 1.2964, "d2.loss_bbox": 2.06245, "d3.loss_cls": 1.29439, "d3.loss_bbox": 2.01505, "d4.loss_cls": 1.28943, "d4.loss_bbox": 1.97668, "aux_task0.loss_heatmap": 100.93517, "aux_task0.loss_bbox": 0.64703, "aux_task1.loss_heatmap": 229.17147, "aux_task1.loss_bbox": 0.79882, "aux_task2.loss_heatmap": 355.76416, "aux_task2.loss_bbox": 0.98189, "aux_task3.loss_heatmap": 328.12221, "aux_task3.loss_bbox": 0.50475, "aux_task4.loss_heatmap": 167.95334, "aux_task4.loss_bbox": 0.52278, "aux_task5.loss_heatmap": 237.7457, "aux_task5.loss_bbox": 0.54242, "loss": 1445.91446, "grad_norm": 8453.0019, "time": 1.18053}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 1e-05, "memory": 14557, "data_time": 0.02764, "loss_cls": 1.17683, "loss_bbox": 1.90651, "d0.loss_cls": 1.18475, "d0.loss_bbox": 3.21387, "d1.loss_cls": 1.17887, "d1.loss_bbox": 1.8833, "d2.loss_cls": 1.17838, "d2.loss_bbox": 1.83428, "d3.loss_cls": 1.17935, "d3.loss_bbox": 1.82845, "d4.loss_cls": 1.18048, "d4.loss_bbox": 1.86251, "aux_task0.loss_heatmap": 64.05455, "aux_task0.loss_bbox": 0.54903, "aux_task1.loss_heatmap": 147.63256, "aux_task1.loss_bbox": 0.70505, "aux_task2.loss_heatmap": 219.10055, "aux_task2.loss_bbox": 0.87031, "aux_task3.loss_heatmap": 207.08761, "aux_task3.loss_bbox": 0.4454, "aux_task4.loss_heatmap": 97.22784, "aux_task4.loss_bbox": 0.48527, "aux_task5.loss_heatmap": 151.06492, "aux_task5.loss_bbox": 0.48461, "loss": 909.3153, "grad_norm": 5893.23652, "time": 1.1801}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 1e-05, "memory": 14557, "data_time": 0.02697, "loss_cls": 1.14499, "loss_bbox": 1.99268, "d0.loss_cls": 1.14521, "d0.loss_bbox": 2.05331, "d1.loss_cls": 1.15048, "d1.loss_bbox": 1.79068, "d2.loss_cls": 1.15101, "d2.loss_bbox": 1.8478, "d3.loss_cls": 1.14714, "d3.loss_bbox": 1.90714, "d4.loss_cls": 1.14773, "d4.loss_bbox": 1.95686, "aux_task0.loss_heatmap": 27.50811, "aux_task0.loss_bbox": 0.5133, "aux_task1.loss_heatmap": 90.10497, "aux_task1.loss_bbox": 0.61684, "aux_task2.loss_heatmap": 150.81138, "aux_task2.loss_bbox": 0.74786, "aux_task3.loss_heatmap": 111.4066, "aux_task3.loss_bbox": 0.44446, "aux_task4.loss_heatmap": 61.69983, "aux_task4.loss_bbox": 0.45972, "aux_task5.loss_heatmap": 80.83168, "aux_task5.loss_bbox": 0.47389, "loss": 544.0537, "grad_norm": 3779.9941, "time": 1.17915}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 1e-05, "memory": 14557, "data_time": 0.02647, "loss_cls": 1.14152, "loss_bbox": 1.84941, "d0.loss_cls": 1.15312, "d0.loss_bbox": 1.77978, "d1.loss_cls": 1.15056, "d1.loss_bbox": 1.77837, "d2.loss_cls": 1.14931, "d2.loss_bbox": 1.80809, "d3.loss_cls": 1.1434, "d3.loss_bbox": 1.83594, "d4.loss_cls": 1.13946, "d4.loss_bbox": 1.84912, "aux_task0.loss_heatmap": 18.27307, "aux_task0.loss_bbox": 0.48139, "aux_task1.loss_heatmap": 59.02296, "aux_task1.loss_bbox": 0.56411, "aux_task2.loss_heatmap": 102.39308, "aux_task2.loss_bbox": 0.67292, "aux_task3.loss_heatmap": 88.77141, "aux_task3.loss_bbox": 0.42442, "aux_task4.loss_heatmap": 38.13619, "aux_task4.loss_bbox": 0.44518, "aux_task5.loss_heatmap": 62.61837, "aux_task5.loss_bbox": 0.46533, "loss": 390.04651, "grad_norm": 2867.35698, "time": 1.18729}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 1e-05, "memory": 14557, "data_time": 0.02738, "loss_cls": 1.15631, "loss_bbox": 1.78028, "d0.loss_cls": 1.16856, "d0.loss_bbox": 1.77306, "d1.loss_cls": 1.16142, "d1.loss_bbox": 1.77347, "d2.loss_cls": 1.16029, "d2.loss_bbox": 1.7877, "d3.loss_cls": 1.15034, "d3.loss_bbox": 1.79245, "d4.loss_cls": 1.14884, "d4.loss_bbox": 1.78916, "aux_task0.loss_heatmap": 16.63055, "aux_task0.loss_bbox": 0.47528, "aux_task1.loss_heatmap": 39.32083, "aux_task1.loss_bbox": 0.53066, "aux_task2.loss_heatmap": 75.30285, "aux_task2.loss_bbox": 0.60398, "aux_task3.loss_heatmap": 66.23842, "aux_task3.loss_bbox": 0.42351, "aux_task4.loss_heatmap": 26.00702, "aux_task4.loss_bbox": 0.43815, "aux_task5.loss_heatmap": 43.12064, "aux_task5.loss_bbox": 0.46505, "loss": 287.19883, "grad_norm": 2231.85682, "time": 1.19747}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 1e-05, "memory": 14557, "data_time": 0.0263, "loss_cls": 1.13848, "loss_bbox": 1.74346, "d0.loss_cls": 1.14776, "d0.loss_bbox": 1.75051, "d1.loss_cls": 1.13388, "d1.loss_bbox": 1.74605, "d2.loss_cls": 1.13386, "d2.loss_bbox": 1.74935, "d3.loss_cls": 1.1294, "d3.loss_bbox": 1.74869, "d4.loss_cls": 1.13058, "d4.loss_bbox": 1.74909, "aux_task0.loss_heatmap": 8.79156, "aux_task0.loss_bbox": 0.4584, "aux_task1.loss_heatmap": 27.29266, "aux_task1.loss_bbox": 0.52917, "aux_task2.loss_heatmap": 52.01945, "aux_task2.loss_bbox": 0.58057, "aux_task3.loss_heatmap": 48.81156, "aux_task3.loss_bbox": 0.4305, "aux_task4.loss_heatmap": 18.0811, "aux_task4.loss_bbox": 0.43704, "aux_task5.loss_heatmap": 28.11906, "aux_task5.loss_bbox": 0.462, "loss": 203.31418, "grad_norm": 1629.69385, "time": 1.18899}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 1e-05, "memory": 14557, "data_time": 0.02845, "loss_cls": 1.13902, "loss_bbox": 1.75852, "d0.loss_cls": 1.15165, "d0.loss_bbox": 1.7675, "d1.loss_cls": 1.13613, "d1.loss_bbox": 1.75846, "d2.loss_cls": 1.13506, "d2.loss_bbox": 1.76176, "d3.loss_cls": 1.13084, "d3.loss_bbox": 1.76306, "d4.loss_cls": 1.13142, "d4.loss_bbox": 1.76228, "aux_task0.loss_heatmap": 8.32722, "aux_task0.loss_bbox": 0.44839, "aux_task1.loss_heatmap": 18.26055, "aux_task1.loss_bbox": 0.49844, "aux_task2.loss_heatmap": 32.48013, "aux_task2.loss_bbox": 0.54597, "aux_task3.loss_heatmap": 26.95399, "aux_task3.loss_bbox": 0.41575, "aux_task4.loss_heatmap": 12.21569, "aux_task4.loss_bbox": 0.43336, "aux_task5.loss_heatmap": 18.67667, "aux_task5.loss_bbox": 0.46125, "loss": 137.1131, "grad_norm": 1037.87381, "time": 1.20605}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 1e-05, "memory": 14557, "data_time": 0.02637, "loss_cls": 1.12592, "loss_bbox": 1.74626, "d0.loss_cls": 1.14354, "d0.loss_bbox": 1.75763, "d1.loss_cls": 1.12124, "d1.loss_bbox": 1.74918, "d2.loss_cls": 1.12248, "d2.loss_bbox": 1.74637, "d3.loss_cls": 1.12033, "d3.loss_bbox": 1.74568, "d4.loss_cls": 1.11977, "d4.loss_bbox": 1.74475, "aux_task0.loss_heatmap": 4.93276, "aux_task0.loss_bbox": 0.44537, "aux_task1.loss_heatmap": 12.53013, "aux_task1.loss_bbox": 0.49535, "aux_task2.loss_heatmap": 24.31142, "aux_task2.loss_bbox": 0.5212, "aux_task3.loss_heatmap": 18.06417, "aux_task3.loss_bbox": 0.40499, "aux_task4.loss_heatmap": 8.20976, "aux_task4.loss_bbox": 0.4349, "aux_task5.loss_heatmap": 13.50527, "aux_task5.loss_bbox": 0.46537, "loss": 101.56385, "grad_norm": 751.80992, "time": 1.18892}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 1e-05, "memory": 14848, "data_time": 0.02644, "loss_cls": 1.10381, "loss_bbox": 1.75116, "d0.loss_cls": 1.13522, "d0.loss_bbox": 1.76238, "d1.loss_cls": 1.10517, "d1.loss_bbox": 1.75053, "d2.loss_cls": 1.10507, "d2.loss_bbox": 1.74986, "d3.loss_cls": 1.09684, "d3.loss_bbox": 1.75213, "d4.loss_cls": 1.09879, "d4.loss_bbox": 1.75063, "aux_task0.loss_heatmap": 3.9911, "aux_task0.loss_bbox": 0.43325, "aux_task1.loss_heatmap": 8.00873, "aux_task1.loss_bbox": 0.48236, "aux_task2.loss_heatmap": 13.80855, "aux_task2.loss_bbox": 0.51505, "aux_task3.loss_heatmap": 13.00871, "aux_task3.loss_bbox": 0.40517, "aux_task4.loss_heatmap": 5.71988, "aux_task4.loss_bbox": 0.41483, "aux_task5.loss_heatmap": 8.68516, "aux_task5.loss_bbox": 0.45388, "loss": 73.08825, "grad_norm": 507.42589, "time": 1.19622}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 1e-05, "memory": 14848, "data_time": 0.02483, "loss_cls": 1.1086, "loss_bbox": 1.75288, "d0.loss_cls": 1.14796, "d0.loss_bbox": 1.75688, "d1.loss_cls": 1.10832, "d1.loss_bbox": 1.75887, "d2.loss_cls": 1.10708, "d2.loss_bbox": 1.76237, "d3.loss_cls": 1.09956, "d3.loss_bbox": 1.76286, "d4.loss_cls": 1.10312, "d4.loss_bbox": 1.75449, "aux_task0.loss_heatmap": 3.1799, "aux_task0.loss_bbox": 0.44469, "aux_task1.loss_heatmap": 5.60839, "aux_task1.loss_bbox": 0.48334, "aux_task2.loss_heatmap": 8.9595, "aux_task2.loss_bbox": 0.51475, "aux_task3.loss_heatmap": 10.79499, "aux_task3.loss_bbox": 0.40268, "aux_task4.loss_heatmap": 4.04536, "aux_task4.loss_bbox": 0.42652, "aux_task5.loss_heatmap": 6.17179, "aux_task5.loss_bbox": 0.45413, "loss": 58.70902, "grad_norm": 379.75812, "time": 1.1955}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 1e-05, "memory": 14848, "data_time": 0.02611, "loss_cls": 1.09759, "loss_bbox": 1.75468, "d0.loss_cls": 1.13368, "d0.loss_bbox": 1.78668, "d1.loss_cls": 1.09959, "d1.loss_bbox": 1.77886, "d2.loss_cls": 1.09846, "d2.loss_bbox": 1.773, "d3.loss_cls": 1.09117, "d3.loss_bbox": 1.76568, "d4.loss_cls": 1.08953, "d4.loss_bbox": 1.75724, "aux_task0.loss_heatmap": 2.62344, "aux_task0.loss_bbox": 0.45057, "aux_task1.loss_heatmap": 4.0629, "aux_task1.loss_bbox": 0.49887, "aux_task2.loss_heatmap": 5.8857, "aux_task2.loss_bbox": 0.51568, "aux_task3.loss_heatmap": 6.57946, "aux_task3.loss_bbox": 0.41764, "aux_task4.loss_heatmap": 3.02489, "aux_task4.loss_bbox": 0.4323, "aux_task5.loss_heatmap": 4.2706, "aux_task5.loss_bbox": 0.45779, "loss": 46.44601, "grad_norm": 232.95773, "time": 1.18877}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 1e-05, "memory": 14848, "data_time": 0.02777, "loss_cls": 1.06919, "loss_bbox": 1.70577, "d0.loss_cls": 1.11672, "d0.loss_bbox": 1.75238, "d1.loss_cls": 1.08044, "d1.loss_bbox": 1.74412, "d2.loss_cls": 1.07967, "d2.loss_bbox": 1.73498, "d3.loss_cls": 1.06488, "d3.loss_bbox": 1.71996, "d4.loss_cls": 1.05999, "d4.loss_bbox": 1.70959, "aux_task0.loss_heatmap": 2.09116, "aux_task0.loss_bbox": 0.44224, "aux_task1.loss_heatmap": 3.03347, "aux_task1.loss_bbox": 0.49797, "aux_task2.loss_heatmap": 4.32417, "aux_task2.loss_bbox": 0.48595, "aux_task3.loss_heatmap": 5.32415, "aux_task3.loss_bbox": 0.40889, "aux_task4.loss_heatmap": 2.45573, "aux_task4.loss_bbox": 0.42558, "aux_task5.loss_heatmap": 3.12708, "aux_task5.loss_bbox": 0.45136, "loss": 39.90543, "grad_norm": 165.43003, "time": 1.20016}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 1e-05, "memory": 14848, "data_time": 0.02711, "loss_cls": 1.04472, "loss_bbox": 1.70298, "d0.loss_cls": 1.10403, "d0.loss_bbox": 1.76281, "d1.loss_cls": 1.07392, "d1.loss_bbox": 1.74157, "d2.loss_cls": 1.06358, "d2.loss_bbox": 1.72132, "d3.loss_cls": 1.04486, "d3.loss_bbox": 1.70953, "d4.loss_cls": 1.03916, "d4.loss_bbox": 1.71021, "aux_task0.loss_heatmap": 1.87459, "aux_task0.loss_bbox": 0.42226, "aux_task1.loss_heatmap": 2.39297, "aux_task1.loss_bbox": 0.48575, "aux_task2.loss_heatmap": 3.21271, "aux_task2.loss_bbox": 0.47662, "aux_task3.loss_heatmap": 3.39684, "aux_task3.loss_bbox": 0.40191, "aux_task4.loss_heatmap": 2.048, "aux_task4.loss_bbox": 0.43011, "aux_task5.loss_heatmap": 2.52655, "aux_task5.loss_bbox": 0.44428, "loss": 34.83126, "grad_norm": 97.48882, "time": 1.2728}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 1e-05, "memory": 14848, "data_time": 0.02662, "loss_cls": 1.02808, "loss_bbox": 1.66388, "d0.loss_cls": 1.08774, "d0.loss_bbox": 1.73297, "d1.loss_cls": 1.05217, "d1.loss_bbox": 1.71129, "d2.loss_cls": 1.03649, "d2.loss_bbox": 1.68887, "d3.loss_cls": 1.0204, "d3.loss_bbox": 1.68522, "d4.loss_cls": 1.02221, "d4.loss_bbox": 1.67604, "aux_task0.loss_heatmap": 1.62626, "aux_task0.loss_bbox": 0.43432, "aux_task1.loss_heatmap": 2.01963, "aux_task1.loss_bbox": 0.46912, "aux_task2.loss_heatmap": 2.64322, "aux_task2.loss_bbox": 0.47481, "aux_task3.loss_heatmap": 3.06183, "aux_task3.loss_bbox": 0.39519, "aux_task4.loss_heatmap": 1.83313, "aux_task4.loss_bbox": 0.42235, "aux_task5.loss_heatmap": 2.12081, "aux_task5.loss_bbox": 0.44531, "loss": 32.35134, "grad_norm": 79.97778, "time": 1.19449}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 1e-05, "memory": 14848, "data_time": 0.02587, "loss_cls": 1.04028, "loss_bbox": 1.66177, "d0.loss_cls": 1.08671, "d0.loss_bbox": 1.75651, "d1.loss_cls": 1.05219, "d1.loss_bbox": 1.71269, "d2.loss_cls": 1.03739, "d2.loss_bbox": 1.69372, "d3.loss_cls": 1.03362, "d3.loss_bbox": 1.67594, "d4.loss_cls": 1.03776, "d4.loss_bbox": 1.66711, "aux_task0.loss_heatmap": 1.5755, "aux_task0.loss_bbox": 0.42209, "aux_task1.loss_heatmap": 1.85155, "aux_task1.loss_bbox": 0.4795, "aux_task2.loss_heatmap": 2.2107, "aux_task2.loss_bbox": 0.49108, "aux_task3.loss_heatmap": 2.37286, "aux_task3.loss_bbox": 0.3999, "aux_task4.loss_heatmap": 1.6506, "aux_task4.loss_bbox": 0.42292, "aux_task5.loss_heatmap": 1.94059, "aux_task5.loss_bbox": 0.44804, "loss": 30.72105, "grad_norm": 59.16891, "time": 1.19795}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 1e-05, "memory": 14848, "data_time": 0.0251, "loss_cls": 1.02235, "loss_bbox": 1.66649, "d0.loss_cls": 1.07181, "d0.loss_bbox": 1.76673, "d1.loss_cls": 1.02751, "d1.loss_bbox": 1.71639, "d2.loss_cls": 1.01992, "d2.loss_bbox": 1.7016, "d3.loss_cls": 1.01829, "d3.loss_bbox": 1.67931, "d4.loss_cls": 1.02124, "d4.loss_bbox": 1.67444, "aux_task0.loss_heatmap": 1.44909, "aux_task0.loss_bbox": 0.43159, "aux_task1.loss_heatmap": 1.73632, "aux_task1.loss_bbox": 0.47876, "aux_task2.loss_heatmap": 2.05159, "aux_task2.loss_bbox": 0.4879, "aux_task3.loss_heatmap": 2.12937, "aux_task3.loss_bbox": 0.39591, "aux_task4.loss_heatmap": 1.50235, "aux_task4.loss_bbox": 0.41945, "aux_task5.loss_heatmap": 1.69483, "aux_task5.loss_bbox": 0.44935, "loss": 29.6126, "grad_norm": 52.2199, "time": 1.19718}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 1e-05, "memory": 14848, "data_time": 0.02692, "loss_cls": 0.98958, "loss_bbox": 1.65434, "d0.loss_cls": 1.03475, "d0.loss_bbox": 1.76963, "d1.loss_cls": 0.98221, "d1.loss_bbox": 1.70579, "d2.loss_cls": 0.98095, "d2.loss_bbox": 1.68245, "d3.loss_cls": 0.97911, "d3.loss_bbox": 1.66302, "d4.loss_cls": 0.98677, "d4.loss_bbox": 1.65936, "aux_task0.loss_heatmap": 1.41203, "aux_task0.loss_bbox": 0.43407, "aux_task1.loss_heatmap": 1.67221, "aux_task1.loss_bbox": 0.46754, "aux_task2.loss_heatmap": 1.85967, "aux_task2.loss_bbox": 0.46353, "aux_task3.loss_heatmap": 1.80477, "aux_task3.loss_bbox": 0.39352, "aux_task4.loss_heatmap": 1.36452, "aux_task4.loss_bbox": 0.41639, "aux_task5.loss_heatmap": 1.54337, "aux_task5.loss_bbox": 0.44402, "loss": 28.36361, "grad_norm": 42.90573, "time": 1.20768}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 1e-05, "memory": 14848, "data_time": 0.02702, "loss_cls": 0.982, "loss_bbox": 1.61135, "d0.loss_cls": 1.03146, "d0.loss_bbox": 1.74649, "d1.loss_cls": 0.97161, "d1.loss_bbox": 1.67087, "d2.loss_cls": 0.97456, "d2.loss_bbox": 1.64121, "d3.loss_cls": 0.97228, "d3.loss_bbox": 1.62065, "d4.loss_cls": 0.97788, "d4.loss_bbox": 1.61822, "aux_task0.loss_heatmap": 1.41551, "aux_task0.loss_bbox": 0.43373, "aux_task1.loss_heatmap": 1.59643, "aux_task1.loss_bbox": 0.45159, "aux_task2.loss_heatmap": 1.86887, "aux_task2.loss_bbox": 0.46902, "aux_task3.loss_heatmap": 1.80581, "aux_task3.loss_bbox": 0.4082, "aux_task4.loss_heatmap": 1.25886, "aux_task4.loss_bbox": 0.41585, "aux_task5.loss_heatmap": 1.52949, "aux_task5.loss_bbox": 0.44834, "loss": 27.92028, "grad_norm": 44.58891, "time": 1.19537}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 1e-05, "memory": 14848, "data_time": 0.02778, "loss_cls": 0.9566, "loss_bbox": 1.63931, "d0.loss_cls": 1.00546, "d0.loss_bbox": 1.77266, "d1.loss_cls": 0.95161, "d1.loss_bbox": 1.68186, "d2.loss_cls": 0.95435, "d2.loss_bbox": 1.65965, "d3.loss_cls": 0.95041, "d3.loss_bbox": 1.64567, "d4.loss_cls": 0.95284, "d4.loss_bbox": 1.6461, "aux_task0.loss_heatmap": 1.32521, "aux_task0.loss_bbox": 0.43234, "aux_task1.loss_heatmap": 1.53895, "aux_task1.loss_bbox": 0.45611, "aux_task2.loss_heatmap": 1.78998, "aux_task2.loss_bbox": 0.47695, "aux_task3.loss_heatmap": 1.61315, "aux_task3.loss_bbox": 0.3963, "aux_task4.loss_heatmap": 1.18915, "aux_task4.loss_bbox": 0.42431, "aux_task5.loss_heatmap": 1.46606, "aux_task5.loss_bbox": 0.44809, "loss": 27.37312, "grad_norm": 39.55075, "time": 1.27513}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 1e-05, "memory": 14848, "data_time": 0.02595, "loss_cls": 0.94253, "loss_bbox": 1.62339, "d0.loss_cls": 0.98726, "d0.loss_bbox": 1.77573, "d1.loss_cls": 0.93608, "d1.loss_bbox": 1.67004, "d2.loss_cls": 0.94046, "d2.loss_bbox": 1.64739, "d3.loss_cls": 0.93908, "d3.loss_bbox": 1.63407, "d4.loss_cls": 0.9396, "d4.loss_bbox": 1.63237, "aux_task0.loss_heatmap": 1.30761, "aux_task0.loss_bbox": 0.41896, "aux_task1.loss_heatmap": 1.53255, "aux_task1.loss_bbox": 0.46397, "aux_task2.loss_heatmap": 1.79698, "aux_task2.loss_bbox": 0.47039, "aux_task3.loss_heatmap": 1.55957, "aux_task3.loss_bbox": 0.40363, "aux_task4.loss_heatmap": 1.08242, "aux_task4.loss_bbox": 0.41158, "aux_task5.loss_heatmap": 1.36765, "aux_task5.loss_bbox": 0.43666, "loss": 26.91998, "grad_norm": 39.70034, "time": 1.20331}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 1e-05, "memory": 14848, "data_time": 0.06699, "loss_cls": 0.93718, "loss_bbox": 1.59386, "d0.loss_cls": 0.98519, "d0.loss_bbox": 1.75097, "d1.loss_cls": 0.93549, "d1.loss_bbox": 1.64302, "d2.loss_cls": 0.93866, "d2.loss_bbox": 1.61955, "d3.loss_cls": 0.93634, "d3.loss_bbox": 1.60592, "d4.loss_cls": 0.93476, "d4.loss_bbox": 1.60231, "aux_task0.loss_heatmap": 1.27382, "aux_task0.loss_bbox": 0.407, "aux_task1.loss_heatmap": 1.51014, "aux_task1.loss_bbox": 0.44381, "aux_task2.loss_heatmap": 1.75518, "aux_task2.loss_bbox": 0.47788, "aux_task3.loss_heatmap": 1.50585, "aux_task3.loss_bbox": 0.39292, "aux_task4.loss_heatmap": 1.07252, "aux_task4.loss_bbox": 0.40855, "aux_task5.loss_heatmap": 1.36149, "aux_task5.loss_bbox": 0.43132, "loss": 26.52373, "grad_norm": 42.55845, "time": 1.24551}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 1e-05, "memory": 14848, "data_time": 0.02783, "loss_cls": 0.92702, "loss_bbox": 1.56248, "d0.loss_cls": 0.9789, "d0.loss_bbox": 1.72498, "d1.loss_cls": 0.92556, "d1.loss_bbox": 1.61673, "d2.loss_cls": 0.92436, "d2.loss_bbox": 1.59287, "d3.loss_cls": 0.92151, "d3.loss_bbox": 1.57742, "d4.loss_cls": 0.92214, "d4.loss_bbox": 1.57024, "aux_task0.loss_heatmap": 1.23453, "aux_task0.loss_bbox": 0.39951, "aux_task1.loss_heatmap": 1.5021, "aux_task1.loss_bbox": 0.43666, "aux_task2.loss_heatmap": 1.75234, "aux_task2.loss_bbox": 0.46575, "aux_task3.loss_heatmap": 1.47306, "aux_task3.loss_bbox": 0.38642, "aux_task4.loss_heatmap": 1.02103, "aux_task4.loss_bbox": 0.40426, "aux_task5.loss_heatmap": 1.33922, "aux_task5.loss_bbox": 0.43374, "loss": 26.09285, "grad_norm": 40.72233, "time": 1.20651}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 1e-05, "memory": 14882, "data_time": 0.02722, "loss_cls": 0.93192, "loss_bbox": 1.58209, "d0.loss_cls": 0.98514, "d0.loss_bbox": 1.74674, "d1.loss_cls": 0.93162, "d1.loss_bbox": 1.62888, "d2.loss_cls": 0.93199, "d2.loss_bbox": 1.60889, "d3.loss_cls": 0.92838, "d3.loss_bbox": 1.59266, "d4.loss_cls": 0.92643, "d4.loss_bbox": 1.58788, "aux_task0.loss_heatmap": 1.31443, "aux_task0.loss_bbox": 0.4148, "aux_task1.loss_heatmap": 1.44529, "aux_task1.loss_bbox": 0.43679, "aux_task2.loss_heatmap": 1.72515, "aux_task2.loss_bbox": 0.46927, "aux_task3.loss_heatmap": 1.48914, "aux_task3.loss_bbox": 0.38025, "aux_task4.loss_heatmap": 1.02469, "aux_task4.loss_bbox": 0.40686, "aux_task5.loss_heatmap": 1.32298, "aux_task5.loss_bbox": 0.42788, "loss": 26.24014, "grad_norm": 41.16056, "time": 1.20326}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 1e-05, "memory": 14882, "data_time": 0.0264, "loss_cls": 0.91336, "loss_bbox": 1.55545, "d0.loss_cls": 0.9662, "d0.loss_bbox": 1.73027, "d1.loss_cls": 0.91349, "d1.loss_bbox": 1.60717, "d2.loss_cls": 0.91469, "d2.loss_bbox": 1.58452, "d3.loss_cls": 0.91091, "d3.loss_bbox": 1.56789, "d4.loss_cls": 0.90998, "d4.loss_bbox": 1.56124, "aux_task0.loss_heatmap": 1.23506, "aux_task0.loss_bbox": 0.40107, "aux_task1.loss_heatmap": 1.42671, "aux_task1.loss_bbox": 0.43933, "aux_task2.loss_heatmap": 1.72459, "aux_task2.loss_bbox": 0.477, "aux_task3.loss_heatmap": 1.4748, "aux_task3.loss_bbox": 0.37363, "aux_task4.loss_heatmap": 1.00884, "aux_task4.loss_bbox": 0.3906, "aux_task5.loss_heatmap": 1.26841, "aux_task5.loss_bbox": 0.42234, "loss": 25.77754, "grad_norm": 44.95241, "time": 1.19428}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 1e-05, "memory": 14882, "data_time": 0.0263, "loss_cls": 0.90555, "loss_bbox": 1.54548, "d0.loss_cls": 0.95743, "d0.loss_bbox": 1.72851, "d1.loss_cls": 0.90693, "d1.loss_bbox": 1.60024, "d2.loss_cls": 0.91015, "d2.loss_bbox": 1.5754, "d3.loss_cls": 0.90345, "d3.loss_bbox": 1.55692, "d4.loss_cls": 0.90106, "d4.loss_bbox": 1.5506, "aux_task0.loss_heatmap": 1.21125, "aux_task0.loss_bbox": 0.40024, "aux_task1.loss_heatmap": 1.43572, "aux_task1.loss_bbox": 0.42766, "aux_task2.loss_heatmap": 1.70083, "aux_task2.loss_bbox": 0.47216, "aux_task3.loss_heatmap": 1.3652, "aux_task3.loss_bbox": 0.37533, "aux_task4.loss_heatmap": 0.96435, "aux_task4.loss_bbox": 0.38166, "aux_task5.loss_heatmap": 1.24945, "aux_task5.loss_bbox": 0.40822, "loss": 25.43378, "grad_norm": 41.57569, "time": 1.20384}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 1e-05, "memory": 14882, "data_time": 0.0279, "loss_cls": 0.9028, "loss_bbox": 1.54159, "d0.loss_cls": 0.95469, "d0.loss_bbox": 1.73167, "d1.loss_cls": 0.90681, "d1.loss_bbox": 1.59335, "d2.loss_cls": 0.90806, "d2.loss_bbox": 1.5706, "d3.loss_cls": 0.90061, "d3.loss_bbox": 1.55163, "d4.loss_cls": 0.9001, "d4.loss_bbox": 1.54441, "aux_task0.loss_heatmap": 1.23683, "aux_task0.loss_bbox": 0.39944, "aux_task1.loss_heatmap": 1.39901, "aux_task1.loss_bbox": 0.41133, "aux_task2.loss_heatmap": 1.69576, "aux_task2.loss_bbox": 0.45945, "aux_task3.loss_heatmap": 1.38218, "aux_task3.loss_bbox": 0.36727, "aux_task4.loss_heatmap": 0.9503, "aux_task4.loss_bbox": 0.38318, "aux_task5.loss_heatmap": 1.22045, "aux_task5.loss_bbox": 0.39871, "loss": 25.31023, "grad_norm": 41.36163, "time": 1.20801}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 1e-05, "memory": 14882, "data_time": 0.02895, "loss_cls": 0.898, "loss_bbox": 1.51788, "d0.loss_cls": 0.94454, "d0.loss_bbox": 1.71709, "d1.loss_cls": 0.89727, "d1.loss_bbox": 1.57105, "d2.loss_cls": 0.89593, "d2.loss_bbox": 1.54941, "d3.loss_cls": 0.89318, "d3.loss_bbox": 1.53127, "d4.loss_cls": 0.89343, "d4.loss_bbox": 1.52287, "aux_task0.loss_heatmap": 1.1994, "aux_task0.loss_bbox": 0.39163, "aux_task1.loss_heatmap": 1.41672, "aux_task1.loss_bbox": 0.41562, "aux_task2.loss_heatmap": 1.68256, "aux_task2.loss_bbox": 0.46574, "aux_task3.loss_heatmap": 1.33431, "aux_task3.loss_bbox": 0.36023, "aux_task4.loss_heatmap": 0.95602, "aux_task4.loss_bbox": 0.37884, "aux_task5.loss_heatmap": 1.21241, "aux_task5.loss_bbox": 0.40154, "loss": 25.04695, "grad_norm": 42.64154, "time": 1.20651}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 1e-05, "memory": 14920, "data_time": 0.02822, "loss_cls": 0.89557, "loss_bbox": 1.51322, "d0.loss_cls": 0.93968, "d0.loss_bbox": 1.71539, "d1.loss_cls": 0.89628, "d1.loss_bbox": 1.57079, "d2.loss_cls": 0.89685, "d2.loss_bbox": 1.54612, "d3.loss_cls": 0.89214, "d3.loss_bbox": 1.52607, "d4.loss_cls": 0.89224, "d4.loss_bbox": 1.51706, "aux_task0.loss_heatmap": 1.20012, "aux_task0.loss_bbox": 0.38309, "aux_task1.loss_heatmap": 1.3886, "aux_task1.loss_bbox": 0.41809, "aux_task2.loss_heatmap": 1.69015, "aux_task2.loss_bbox": 0.44777, "aux_task3.loss_heatmap": 1.3204, "aux_task3.loss_bbox": 0.37002, "aux_task4.loss_heatmap": 0.95484, "aux_task4.loss_bbox": 0.38058, "aux_task5.loss_heatmap": 1.23167, "aux_task5.loss_bbox": 0.39935, "loss": 24.9861, "grad_norm": 47.48103, "time": 1.20281}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 1e-05, "memory": 14920, "data_time": 0.02538, "loss_cls": 0.8888, "loss_bbox": 1.48017, "d0.loss_cls": 0.93185, "d0.loss_bbox": 1.70808, "d1.loss_cls": 0.88832, "d1.loss_bbox": 1.54642, "d2.loss_cls": 0.88956, "d2.loss_bbox": 1.51886, "d3.loss_cls": 0.8857, "d3.loss_bbox": 1.49621, "d4.loss_cls": 0.88464, "d4.loss_bbox": 1.4865, "aux_task0.loss_heatmap": 1.15348, "aux_task0.loss_bbox": 0.38709, "aux_task1.loss_heatmap": 1.38986, "aux_task1.loss_bbox": 0.41581, "aux_task2.loss_heatmap": 1.69046, "aux_task2.loss_bbox": 0.45248, "aux_task3.loss_heatmap": 1.2602, "aux_task3.loss_bbox": 0.35524, "aux_task4.loss_heatmap": 0.89648, "aux_task4.loss_bbox": 0.36062, "aux_task5.loss_heatmap": 1.16524, "aux_task5.loss_bbox": 0.38059, "loss": 24.51266, "grad_norm": 44.54609, "time": 1.19419}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 1e-05, "memory": 14920, "data_time": 0.02496, "loss_cls": 0.87717, "loss_bbox": 1.45319, "d0.loss_cls": 0.92063, "d0.loss_bbox": 1.68012, "d1.loss_cls": 0.87742, "d1.loss_bbox": 1.51501, "d2.loss_cls": 0.87798, "d2.loss_bbox": 1.48727, "d3.loss_cls": 0.87409, "d3.loss_bbox": 1.4643, "d4.loss_cls": 0.87461, "d4.loss_bbox": 1.45267, "aux_task0.loss_heatmap": 1.13162, "aux_task0.loss_bbox": 0.38896, "aux_task1.loss_heatmap": 1.37509, "aux_task1.loss_bbox": 0.40939, "aux_task2.loss_heatmap": 1.67217, "aux_task2.loss_bbox": 0.44908, "aux_task3.loss_heatmap": 1.26245, "aux_task3.loss_bbox": 0.35185, "aux_task4.loss_heatmap": 0.90967, "aux_task4.loss_bbox": 0.36978, "aux_task5.loss_heatmap": 1.1426, "aux_task5.loss_bbox": 0.38687, "loss": 24.20401, "grad_norm": 46.64766, "time": 1.19668}
{"mode": "train", "epoch": 1, "iter": 1650, "lr": 1e-05, "memory": 14920, "data_time": 0.02698, "loss_cls": 0.87908, "loss_bbox": 1.42862, "d0.loss_cls": 0.91892, "d0.loss_bbox": 1.67369, "d1.loss_cls": 0.8788, "d1.loss_bbox": 1.5025, "d2.loss_cls": 0.88115, "d2.loss_bbox": 1.47344, "d3.loss_cls": 0.87848, "d3.loss_bbox": 1.44688, "d4.loss_cls": 0.8784, "d4.loss_bbox": 1.43316, "aux_task0.loss_heatmap": 1.09705, "aux_task0.loss_bbox": 0.37382, "aux_task1.loss_heatmap": 1.35616, "aux_task1.loss_bbox": 0.41456, "aux_task2.loss_heatmap": 1.62946, "aux_task2.loss_bbox": 0.45453, "aux_task3.loss_heatmap": 1.31828, "aux_task3.loss_bbox": 0.35504, "aux_task4.loss_heatmap": 0.88431, "aux_task4.loss_bbox": 0.36711, "aux_task5.loss_heatmap": 1.12733, "aux_task5.loss_bbox": 0.38325, "loss": 24.034, "grad_norm": 46.51793, "time": 1.24928}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 2e-05, "memory": 14920, "data_time": 0.02772, "loss_cls": 0.87231, "loss_bbox": 1.4251, "d0.loss_cls": 0.91102, "d0.loss_bbox": 1.66931, "d1.loss_cls": 0.87495, "d1.loss_bbox": 1.49308, "d2.loss_cls": 0.87434, "d2.loss_bbox": 1.46802, "d3.loss_cls": 0.87032, "d3.loss_bbox": 1.44393, "d4.loss_cls": 0.87033, "d4.loss_bbox": 1.4296, "aux_task0.loss_heatmap": 1.10794, "aux_task0.loss_bbox": 0.38067, "aux_task1.loss_heatmap": 1.35533, "aux_task1.loss_bbox": 0.4074, "aux_task2.loss_heatmap": 1.62846, "aux_task2.loss_bbox": 0.45171, "aux_task3.loss_heatmap": 1.2791, "aux_task3.loss_bbox": 0.34794, "aux_task4.loss_heatmap": 0.86875, "aux_task4.loss_bbox": 0.35679, "aux_task5.loss_heatmap": 1.12615, "aux_task5.loss_bbox": 0.38106, "loss": 23.8936, "grad_norm": 49.24288, "time": 1.20239}
{"mode": "train", "epoch": 1, "iter": 1750, "lr": 2e-05, "memory": 14920, "data_time": 0.02769, "loss_cls": 0.88282, "loss_bbox": 1.42073, "d0.loss_cls": 0.9086, "d0.loss_bbox": 1.67586, "d1.loss_cls": 0.87384, "d1.loss_bbox": 1.5007, "d2.loss_cls": 0.87412, "d2.loss_bbox": 1.47284, "d3.loss_cls": 0.8749, "d3.loss_bbox": 1.44193, "d4.loss_cls": 0.87651, "d4.loss_bbox": 1.42603, "aux_task0.loss_heatmap": 1.10104, "aux_task0.loss_bbox": 0.37626, "aux_task1.loss_heatmap": 1.35876, "aux_task1.loss_bbox": 0.40132, "aux_task2.loss_heatmap": 1.63709, "aux_task2.loss_bbox": 0.45753, "aux_task3.loss_heatmap": 1.24289, "aux_task3.loss_bbox": 0.35063, "aux_task4.loss_heatmap": 0.8771, "aux_task4.loss_bbox": 0.3626, "aux_task5.loss_heatmap": 1.13362, "aux_task5.loss_bbox": 0.38894, "loss": 23.91666, "grad_norm": 47.84737, "time": 1.20905}
{"mode": "train", "epoch": 1, "iter": 1800, "lr": 2e-05, "memory": 14920, "data_time": 0.02682, "loss_cls": 0.87842, "loss_bbox": 1.39253, "d0.loss_cls": 0.90747, "d0.loss_bbox": 1.65824, "d1.loss_cls": 0.87774, "d1.loss_bbox": 1.47753, "d2.loss_cls": 0.8758, "d2.loss_bbox": 1.45084, "d3.loss_cls": 0.8728, "d3.loss_bbox": 1.4215, "d4.loss_cls": 0.87574, "d4.loss_bbox": 1.40113, "aux_task0.loss_heatmap": 1.11105, "aux_task0.loss_bbox": 0.37797, "aux_task1.loss_heatmap": 1.32997, "aux_task1.loss_bbox": 0.4055, "aux_task2.loss_heatmap": 1.61565, "aux_task2.loss_bbox": 0.45546, "aux_task3.loss_heatmap": 1.27574, "aux_task3.loss_bbox": 0.34946, "aux_task4.loss_heatmap": 0.88669, "aux_task4.loss_bbox": 0.36341, "aux_task5.loss_heatmap": 1.11457, "aux_task5.loss_bbox": 0.38222, "loss": 23.75745, "grad_norm": 50.25444, "time": 1.19798}
{"mode": "train", "epoch": 1, "iter": 1850, "lr": 2e-05, "memory": 14920, "data_time": 0.02745, "loss_cls": 0.86599, "loss_bbox": 1.38737, "d0.loss_cls": 0.89312, "d0.loss_bbox": 1.66204, "d1.loss_cls": 0.86248, "d1.loss_bbox": 1.47779, "d2.loss_cls": 0.86178, "d2.loss_bbox": 1.44827, "d3.loss_cls": 0.86015, "d3.loss_bbox": 1.4171, "d4.loss_cls": 0.86218, "d4.loss_bbox": 1.39525, "aux_task0.loss_heatmap": 1.07971, "aux_task0.loss_bbox": 0.37955, "aux_task1.loss_heatmap": 1.35837, "aux_task1.loss_bbox": 0.40655, "aux_task2.loss_heatmap": 1.61709, "aux_task2.loss_bbox": 0.44952, "aux_task3.loss_heatmap": 1.22116, "aux_task3.loss_bbox": 0.34689, "aux_task4.loss_heatmap": 0.84491, "aux_task4.loss_bbox": 0.36306, "aux_task5.loss_heatmap": 1.08901, "aux_task5.loss_bbox": 0.37586, "loss": 23.52518, "grad_norm": 49.26059, "time": 1.19371}
{"mode": "train", "epoch": 1, "iter": 1900, "lr": 2e-05, "memory": 14920, "data_time": 0.02818, "loss_cls": 0.85975, "loss_bbox": 1.33594, "d0.loss_cls": 0.87919, "d0.loss_bbox": 1.62369, "d1.loss_cls": 0.85634, "d1.loss_bbox": 1.43349, "d2.loss_cls": 0.85649, "d2.loss_bbox": 1.40342, "d3.loss_cls": 0.85406, "d3.loss_bbox": 1.36525, "d4.loss_cls": 0.8548, "d4.loss_bbox": 1.34346, "aux_task0.loss_heatmap": 1.07356, "aux_task0.loss_bbox": 0.37603, "aux_task1.loss_heatmap": 1.31185, "aux_task1.loss_bbox": 0.39978, "aux_task2.loss_heatmap": 1.60631, "aux_task2.loss_bbox": 0.43997, "aux_task3.loss_heatmap": 1.22486, "aux_task3.loss_bbox": 0.35107, "aux_task4.loss_heatmap": 0.83128, "aux_task4.loss_bbox": 0.35431, "aux_task5.loss_heatmap": 1.07863, "aux_task5.loss_bbox": 0.37626, "loss": 23.08978, "grad_norm": 50.62516, "time": 1.18958}
{"mode": "train", "epoch": 1, "iter": 1950, "lr": 2e-05, "memory": 14920, "data_time": 0.02598, "loss_cls": 0.85388, "loss_bbox": 1.33986, "d0.loss_cls": 0.88093, "d0.loss_bbox": 1.62711, "d1.loss_cls": 0.85403, "d1.loss_bbox": 1.43806, "d2.loss_cls": 0.85385, "d2.loss_bbox": 1.40693, "d3.loss_cls": 0.85041, "d3.loss_bbox": 1.3707, "d4.loss_cls": 0.85149, "d4.loss_bbox": 1.34656, "aux_task0.loss_heatmap": 1.06262, "aux_task0.loss_bbox": 0.36883, "aux_task1.loss_heatmap": 1.29171, "aux_task1.loss_bbox": 0.40384, "aux_task2.loss_heatmap": 1.62677, "aux_task2.loss_bbox": 0.44457, "aux_task3.loss_heatmap": 1.21385, "aux_task3.loss_bbox": 0.34518, "aux_task4.loss_heatmap": 0.8273, "aux_task4.loss_bbox": 0.36129, "aux_task5.loss_heatmap": 1.05895, "aux_task5.loss_bbox": 0.37251, "loss": 23.05123, "grad_norm": 51.18142, "time": 1.19193}
{"mode": "train", "epoch": 1, "iter": 2000, "lr": 2e-05, "memory": 14920, "data_time": 0.0276, "loss_cls": 0.84074, "loss_bbox": 1.31775, "d0.loss_cls": 0.87027, "d0.loss_bbox": 1.61245, "d1.loss_cls": 0.84257, "d1.loss_bbox": 1.41917, "d2.loss_cls": 0.84102, "d2.loss_bbox": 1.38468, "d3.loss_cls": 0.83483, "d3.loss_bbox": 1.35036, "d4.loss_cls": 0.83954, "d4.loss_bbox": 1.32685, "aux_task0.loss_heatmap": 1.06506, "aux_task0.loss_bbox": 0.37117, "aux_task1.loss_heatmap": 1.31599, "aux_task1.loss_bbox": 0.4078, "aux_task2.loss_heatmap": 1.5579, "aux_task2.loss_bbox": 0.44417, "aux_task3.loss_heatmap": 1.18099, "aux_task3.loss_bbox": 0.33844, "aux_task4.loss_heatmap": 0.8246, "aux_task4.loss_bbox": 0.3618, "aux_task5.loss_heatmap": 1.02965, "aux_task5.loss_bbox": 0.37488, "loss": 22.75266, "grad_norm": 49.94281, "time": 1.19703}
{"mode": "train", "epoch": 1, "iter": 2050, "lr": 2e-05, "memory": 14920, "data_time": 0.02629, "loss_cls": 0.82433, "loss_bbox": 1.27324, "d0.loss_cls": 0.84765, "d0.loss_bbox": 1.56693, "d1.loss_cls": 0.82541, "d1.loss_bbox": 1.37755, "d2.loss_cls": 0.82121, "d2.loss_bbox": 1.3441, "d3.loss_cls": 0.81784, "d3.loss_bbox": 1.30414, "d4.loss_cls": 0.82421, "d4.loss_bbox": 1.27827, "aux_task0.loss_heatmap": 1.0175, "aux_task0.loss_bbox": 0.35445, "aux_task1.loss_heatmap": 1.28755, "aux_task1.loss_bbox": 0.3951, "aux_task2.loss_heatmap": 1.58164, "aux_task2.loss_bbox": 0.43359, "aux_task3.loss_heatmap": 1.18008, "aux_task3.loss_bbox": 0.34797, "aux_task4.loss_heatmap": 0.80832, "aux_task4.loss_bbox": 0.35194, "aux_task5.loss_heatmap": 1.03766, "aux_task5.loss_bbox": 0.36875, "loss": 22.26945, "grad_norm": 50.10212, "time": 1.19412}
{"mode": "train", "epoch": 1, "iter": 2100, "lr": 2e-05, "memory": 14920, "data_time": 0.0248, "loss_cls": 0.82005, "loss_bbox": 1.29639, "d0.loss_cls": 0.84092, "d0.loss_bbox": 1.59996, "d1.loss_cls": 0.81797, "d1.loss_bbox": 1.40244, "d2.loss_cls": 0.81513, "d2.loss_bbox": 1.36715, "d3.loss_cls": 0.81499, "d3.loss_bbox": 1.32814, "d4.loss_cls": 0.81642, "d4.loss_bbox": 1.30518, "aux_task0.loss_heatmap": 1.00714, "aux_task0.loss_bbox": 0.37422, "aux_task1.loss_heatmap": 1.29208, "aux_task1.loss_bbox": 0.40782, "aux_task2.loss_heatmap": 1.55032, "aux_task2.loss_bbox": 0.42843, "aux_task3.loss_heatmap": 1.17787, "aux_task3.loss_bbox": 0.3387, "aux_task4.loss_heatmap": 0.8181, "aux_task4.loss_bbox": 0.35904, "aux_task5.loss_heatmap": 1.00111, "aux_task5.loss_bbox": 0.36508, "loss": 22.34464, "grad_norm": 49.45046, "time": 1.26443}
{"mode": "train", "epoch": 1, "iter": 2150, "lr": 2e-05, "memory": 14920, "data_time": 0.02606, "loss_cls": 0.82565, "loss_bbox": 1.29838, "d0.loss_cls": 0.84739, "d0.loss_bbox": 1.60138, "d1.loss_cls": 0.82302, "d1.loss_bbox": 1.40006, "d2.loss_cls": 0.82062, "d2.loss_bbox": 1.36559, "d3.loss_cls": 0.81966, "d3.loss_bbox": 1.32653, "d4.loss_cls": 0.8238, "d4.loss_bbox": 1.30524, "aux_task0.loss_heatmap": 1.03862, "aux_task0.loss_bbox": 0.37298, "aux_task1.loss_heatmap": 1.28556, "aux_task1.loss_bbox": 0.4055, "aux_task2.loss_heatmap": 1.56286, "aux_task2.loss_bbox": 0.44359, "aux_task3.loss_heatmap": 1.15979, "aux_task3.loss_bbox": 0.33886, "aux_task4.loss_heatmap": 0.79605, "aux_task4.loss_bbox": 0.36034, "aux_task5.loss_heatmap": 0.97707, "aux_task5.loss_bbox": 0.36527, "loss": 22.36379, "grad_norm": 51.61909, "time": 1.209}
{"mode": "train", "epoch": 1, "iter": 2200, "lr": 2e-05, "memory": 14920, "data_time": 0.0271, "loss_cls": 0.83636, "loss_bbox": 1.28693, "d0.loss_cls": 0.85105, "d0.loss_bbox": 1.58283, "d1.loss_cls": 0.83104, "d1.loss_bbox": 1.39176, "d2.loss_cls": 0.82883, "d2.loss_bbox": 1.35734, "d3.loss_cls": 0.82841, "d3.loss_bbox": 1.31822, "d4.loss_cls": 0.83321, "d4.loss_bbox": 1.29557, "aux_task0.loss_heatmap": 1.05379, "aux_task0.loss_bbox": 0.36949, "aux_task1.loss_heatmap": 1.28214, "aux_task1.loss_bbox": 0.39996, "aux_task2.loss_heatmap": 1.55325, "aux_task2.loss_bbox": 0.44733, "aux_task3.loss_heatmap": 1.13258, "aux_task3.loss_bbox": 0.34151, "aux_task4.loss_heatmap": 0.85179, "aux_task4.loss_bbox": 0.36624, "aux_task5.loss_heatmap": 0.98428, "aux_task5.loss_bbox": 0.3655, "loss": 22.38941, "grad_norm": 52.49051, "time": 1.20354}
