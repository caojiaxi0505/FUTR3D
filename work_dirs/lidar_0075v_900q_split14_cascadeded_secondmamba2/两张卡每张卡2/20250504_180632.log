2025-05-04 18:06:32,079 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.20 | packaged by conda-forge | (default, Sep 30 2024, 17:52:49) [GCC 13.3.0]
CUDA available: True
GPU 0,1: NVIDIA GeForce RTX 4090 D
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.6, V11.6.55
GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0
PyTorch: 1.13.0
PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2022.1-Product Build 20220311 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.6
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.14.0
OpenCV: 4.11.0
MMCV: 1.7.0
MMCV Compiler: GCC 9.4
MMCV CUDA Compiler: 11.6
MMDetection: 2.27.0
MMSegmentation: 0.30.0
MMDetection3D: 1.0.0rc6+637e2ea
spconv2.0: True
------------------------------------------------------------

2025-05-04 18:06:32,902 - mmdet - INFO - 分布式训练: True
2025-05-04 18:06:33,708 - mmdet - INFO - 配置:
point_cloud_range = [-54, -54, -5.0, 54, 54, 3.0]
class_names = [
    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',
    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
]
dataset_type = 'NuScenesDataset'
data_root = 'data/nuscenes/'
input_modality = dict(
    use_lidar=True,
    use_camera=False,
    use_radar=False,
    use_map=False,
    use_external=False)
file_client_args = dict(backend='disk')
train_pipeline = [
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        file_client_args=dict(backend='disk')),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=9,
        use_dim=[0, 1, 2, 3, 4],
        file_client_args=dict(backend='disk'),
        pad_empty_sweeps=True,
        remove_close=True),
    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),
    dict(
        type='ObjectSample',
        db_sampler=dict(
            data_root='data/nuscenes/',
            info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',
            rate=1.0,
            prepare=dict(
                filter_by_difficulty=[-1],
                filter_by_min_points=dict(
                    car=5,
                    truck=5,
                    bus=5,
                    trailer=5,
                    construction_vehicle=5,
                    traffic_cone=5,
                    barrier=5,
                    motorcycle=5,
                    bicycle=5,
                    pedestrian=5)),
            classes=[
                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                'traffic_cone'
            ],
            sample_groups=dict(
                car=2,
                truck=3,
                construction_vehicle=7,
                bus=4,
                trailer=6,
                barrier=2,
                motorcycle=6,
                bicycle=6,
                pedestrian=2,
                traffic_cone=2),
            points_loader=dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=[0, 1, 2, 3, 4],
                file_client_args=dict(backend='disk')))),
    dict(
        type='GlobalRotScaleTrans',
        rot_range=[-0.785, 0.785],
        scale_ratio_range=[0.9, 1.1],
        translation_std=[0.5, 0.5, 0.5]),
    dict(
        type='RandomFlip3D',
        sync_2d=False,
        flip_ratio_bev_horizontal=0.5,
        flip_ratio_bev_vertical=0.5),
    dict(
        type='PointsRangeFilter',
        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
    dict(
        type='ObjectRangeFilter',
        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
    dict(
        type='ObjectNameFilter',
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ]),
    dict(type='PointShuffle'),
    dict(
        type='DefaultFormatBundle3D',
        class_names=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ]),
    dict(type='Collect3D', keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])
]
test_pipeline = [
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        file_client_args=dict(backend='disk')),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=9,
        use_dim=[0, 1, 2, 3, 4],
        file_client_args=dict(backend='disk'),
        pad_empty_sweeps=True,
        remove_close=True),
    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),
    dict(
        type='MultiScaleFlipAug3D',
        img_scale=(1333, 800),
        pts_scale_ratio=1,
        flip=False,
        transforms=[
            dict(
                type='GlobalRotScaleTrans',
                rot_range=[0, 0],
                scale_ratio_range=[1.0, 1.0],
                translation_std=[0, 0, 0]),
            dict(type='RandomFlip3D'),
            dict(
                type='PointsRangeFilter',
                point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
            dict(
                type='DefaultFormatBundle3D',
                class_names=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ],
                with_label=False),
            dict(
                type='Collect3D',
                keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])
        ])
]
eval_pipeline = [
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        file_client_args=dict(backend='disk')),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=9,
        use_dim=[0, 1, 2, 3, 4],
        file_client_args=dict(backend='disk'),
        pad_empty_sweeps=True,
        remove_close=True),
    dict(
        type='DefaultFormatBundle3D',
        class_names=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        with_label=False),
    dict(type='Collect3D', keys=['points'])
]
data = dict(
    samples_per_gpu=2,
    workers_per_gpu=4,
    train=dict(
        type='CBGSDataset',
        data_root='data/nuscenes/',
        ann_file='data/nuscenes/nuscenes_infos_train.pkl',
        pipeline=[
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                file_client_args=dict(backend='disk')),
            dict(
                type='LoadPointsFromMultiSweeps',
                sweeps_num=10,
                file_client_args=dict(backend='disk')),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True),
            dict(
                type='GlobalRotScaleTrans',
                rot_range=[-0.3925, 0.3925],
                scale_ratio_range=[0.95, 1.05],
                translation_std=[0, 0, 0]),
            dict(type='RandomFlip3D', flip_ratio_bev_horizontal=0.5),
            dict(
                type='PointsRangeFilter',
                point_cloud_range=[-50, -50, -5, 50, 50, 3]),
            dict(
                type='ObjectRangeFilter',
                point_cloud_range=[-50, -50, -5, 50, 50, 3]),
            dict(
                type='ObjectNameFilter',
                classes=[
                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',
                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',
                    'barrier'
                ]),
            dict(type='PointShuffle'),
            dict(
                type='DefaultFormatBundle3D',
                class_names=[
                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',
                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',
                    'barrier'
                ]),
            dict(
                type='Collect3D',
                keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])
        ],
        classes=[
            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',
            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=False,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=False,
        box_type_3d='LiDAR',
        split=14,
        dataset=dict(
            type='NuScenesDataset',
            data_root='data/nuscenes/',
            ann_file='data/nuscenes/nuscenes_infos_train.pkl',
            pipeline=[
                dict(
                    type='LoadPointsFromFile',
                    coord_type='LIDAR',
                    load_dim=5,
                    use_dim=5,
                    file_client_args=dict(backend='disk')),
                dict(
                    type='LoadPointsFromMultiSweeps',
                    sweeps_num=9,
                    use_dim=[0, 1, 2, 3, 4],
                    file_client_args=dict(backend='disk'),
                    pad_empty_sweeps=True,
                    remove_close=True),
                dict(
                    type='LoadAnnotations3D',
                    with_bbox_3d=True,
                    with_label_3d=True),
                dict(
                    type='ObjectSample',
                    db_sampler=dict(
                        data_root='data/nuscenes/',
                        info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',
                        rate=1.0,
                        prepare=dict(
                            filter_by_difficulty=[-1],
                            filter_by_min_points=dict(
                                car=5,
                                truck=5,
                                bus=5,
                                trailer=5,
                                construction_vehicle=5,
                                traffic_cone=5,
                                barrier=5,
                                motorcycle=5,
                                bicycle=5,
                                pedestrian=5)),
                        classes=[
                            'car', 'truck', 'construction_vehicle', 'bus',
                            'trailer', 'barrier', 'motorcycle', 'bicycle',
                            'pedestrian', 'traffic_cone'
                        ],
                        sample_groups=dict(
                            car=2,
                            truck=3,
                            construction_vehicle=7,
                            bus=4,
                            trailer=6,
                            barrier=2,
                            motorcycle=6,
                            bicycle=6,
                            pedestrian=2,
                            traffic_cone=2),
                        points_loader=dict(
                            type='LoadPointsFromFile',
                            coord_type='LIDAR',
                            load_dim=5,
                            use_dim=[0, 1, 2, 3, 4],
                            file_client_args=dict(backend='disk')))),
                dict(
                    type='GlobalRotScaleTrans',
                    rot_range=[-0.785, 0.785],
                    scale_ratio_range=[0.9, 1.1],
                    translation_std=[0.5, 0.5, 0.5]),
                dict(
                    type='RandomFlip3D',
                    sync_2d=False,
                    flip_ratio_bev_horizontal=0.5,
                    flip_ratio_bev_vertical=0.5),
                dict(
                    type='PointsRangeFilter',
                    point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
                dict(
                    type='ObjectRangeFilter',
                    point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
                dict(
                    type='ObjectNameFilter',
                    classes=[
                        'car', 'truck', 'construction_vehicle', 'bus',
                        'trailer', 'barrier', 'motorcycle', 'bicycle',
                        'pedestrian', 'traffic_cone'
                    ]),
                dict(type='PointShuffle'),
                dict(
                    type='DefaultFormatBundle3D',
                    class_names=[
                        'car', 'truck', 'construction_vehicle', 'bus',
                        'trailer', 'barrier', 'motorcycle', 'bicycle',
                        'pedestrian', 'traffic_cone'
                    ]),
                dict(
                    type='Collect3D',
                    keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])
            ],
            classes=[
                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                'traffic_cone'
            ],
            test_mode=False,
            use_valid_flag=True,
            box_type_3d='LiDAR')),
    val=dict(
        type='NuScenesDataset',
        data_root='data/nuscenes/',
        ann_file='data/nuscenes/nuscenes_infos_val.pkl',
        pipeline=[
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                file_client_args=dict(backend='disk')),
            dict(
                type='LoadPointsFromMultiSweeps',
                sweeps_num=9,
                use_dim=[0, 1, 2, 3, 4],
                file_client_args=dict(backend='disk'),
                pad_empty_sweeps=True,
                remove_close=True),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True),
            dict(
                type='MultiScaleFlipAug3D',
                img_scale=(1333, 800),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type='GlobalRotScaleTrans',
                        rot_range=[0, 0],
                        scale_ratio_range=[1.0, 1.0],
                        translation_std=[0, 0, 0]),
                    dict(type='RandomFlip3D'),
                    dict(
                        type='PointsRangeFilter',
                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
                    dict(
                        type='DefaultFormatBundle3D',
                        class_names=[
                            'car', 'truck', 'construction_vehicle', 'bus',
                            'trailer', 'barrier', 'motorcycle', 'bicycle',
                            'pedestrian', 'traffic_cone'
                        ],
                        with_label=False),
                    dict(
                        type='Collect3D',
                        keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])
                ])
        ],
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=False,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=True,
        box_type_3d='LiDAR'),
    test=dict(
        type='NuScenesDataset',
        data_root='data/nuscenes/',
        ann_file='data/nuscenes/nuscenes_infos_val.pkl',
        pipeline=[
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                file_client_args=dict(backend='disk')),
            dict(
                type='LoadPointsFromMultiSweeps',
                sweeps_num=9,
                use_dim=[0, 1, 2, 3, 4],
                file_client_args=dict(backend='disk'),
                pad_empty_sweeps=True,
                remove_close=True),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True),
            dict(
                type='MultiScaleFlipAug3D',
                img_scale=(1333, 800),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type='GlobalRotScaleTrans',
                        rot_range=[0, 0],
                        scale_ratio_range=[1.0, 1.0],
                        translation_std=[0, 0, 0]),
                    dict(type='RandomFlip3D'),
                    dict(
                        type='PointsRangeFilter',
                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
                    dict(
                        type='DefaultFormatBundle3D',
                        class_names=[
                            'car', 'truck', 'construction_vehicle', 'bus',
                            'trailer', 'barrier', 'motorcycle', 'bicycle',
                            'pedestrian', 'traffic_cone'
                        ],
                        with_label=False),
                    dict(
                        type='Collect3D',
                        keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])
                ])
        ],
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=False,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=True,
        box_type_3d='LiDAR'))
evaluation = dict(
    interval=5,
    pipeline=[
        dict(
            type='LoadPointsFromFile',
            coord_type='LIDAR',
            load_dim=5,
            use_dim=5,
            file_client_args=dict(backend='disk')),
        dict(
            type='LoadPointsFromMultiSweeps',
            sweeps_num=10,
            file_client_args=dict(backend='disk')),
        dict(
            type='DefaultFormatBundle3D',
            class_names=[
                'car', 'truck', 'trailer', 'bus', 'construction_vehicle',
                'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',
                'barrier'
            ],
            with_label=False),
        dict(type='Collect3D', keys=['points'])
    ])
optimizer = dict(type='AdamW', lr=1.25e-05, weight_decay=0.01)
optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))
lr_config = dict(
    policy='cyclic',
    target_ratio=(10, 0.0001),
    cyclic_times=1,
    step_ratio_up=0.4)
momentum_config = dict(
    policy='cyclic',
    target_ratio=(0.8947368421052632, 1),
    cyclic_times=1,
    step_ratio_up=0.4)
runner = dict(type='EpochBasedRunner', max_epochs=20)
checkpoint_config = dict(interval=1, max_keep_ckpts=1)
log_config = dict(
    interval=50,
    hooks=[dict(type='TextLoggerHook'),
           dict(type='TensorboardLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
work_dir = './work_dirs/lidar_0075v_900q_split14_cascadeded_secondmamba2/两张卡每张卡2'
load_from = None
resume_from = None
workflow = [('train', 1)]
opencv_num_threads = 0
mp_start_method = 'fork'
plugin = 'plugin/futr3d'
voxel_size = [0.075, 0.075, 0.2]
center_head = dict(
    type='CenterHead',
    in_channels=512,
    tasks=[
        dict(num_class=1, class_names=['car']),
        dict(num_class=2, class_names=['truck', 'construction_vehicle']),
        dict(num_class=2, class_names=['bus', 'trailer']),
        dict(num_class=1, class_names=['barrier']),
        dict(num_class=2, class_names=['motorcycle', 'bicycle']),
        dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])
    ],
    common_heads=dict(
        reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),
    share_conv_channel=64,
    bbox_coder=dict(
        type='CenterPointBBoxCoder',
        pc_range=[-54, -54],
        post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],
        max_num=500,
        score_threshold=0.1,
        out_size_factor=8,
        voxel_size=[0.075, 0.075],
        code_size=9),
    separate_head=dict(type='SeparateHead', init_bias=-2.19, final_kernel=3),
    loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),
    loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),
    norm_bbox=True)
model = dict(
    type='FUTR3D',
    aux_weight=0.5,
    pts_voxel_layer=dict(
        max_num_points=10,
        voxel_size=[0.075, 0.075, 0.2],
        max_voxels=(120000, 160000),
        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
    pts_voxel_encoder=dict(type='HardSimpleVFE', num_features=5),
    pts_middle_encoder=dict(
        type='SparseEncoder',
        in_channels=5,
        sparse_shape=[41, 1440, 1440],
        output_channels=128,
        order=('conv', 'norm', 'act'),
        encoder_channels=((16, 16, 32), (32, 32, 64), (64, 64, 128), (128,
                                                                      128)),
        encoder_paddings=((0, 0, 1), (0, 0, 1), (0, 0, [0, 1, 1]), (0, 0)),
        block_type='basicblock'),
    pts_backbone=dict(
        type='CascadeDEDBackbone',
        in_channels=256,
        model_cfg=dict(
            USE_SECONDMAMBA=True,
            SECONDMAMBA_NUM_LAYERS=2,
            FEATURE_DIM=256,
            NUM_LAYERS=2,
            NUM_SBB=[2, 1, 1],
            DOWN_STRIDES=[1, 2, 2])),
    pts_neck=dict(
        type='FPN',
        norm_cfg=dict(type='BN2d', eps=0.001, momentum=0.01),
        act_cfg=dict(type='ReLU', inplace=False),
        in_channels=[256],
        out_channels=256,
        start_level=0,
        add_extra_convs=True,
        num_outs=4,
        relu_before_extra_convs=True),
    pts_bbox_head=dict(
        type='FUTR3DHead',
        use_dab=True,
        anchor_size=3,
        use_aux=True,
        aux_head=dict(
            type='CenterHead',
            in_channels=512,
            tasks=[
                dict(num_class=1, class_names=['car']),
                dict(
                    num_class=2, class_names=['truck',
                                              'construction_vehicle']),
                dict(num_class=2, class_names=['bus', 'trailer']),
                dict(num_class=1, class_names=['barrier']),
                dict(num_class=2, class_names=['motorcycle', 'bicycle']),
                dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])
            ],
            common_heads=dict(
                reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),
            share_conv_channel=64,
            bbox_coder=dict(
                type='CenterPointBBoxCoder',
                pc_range=[-54, -54],
                post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],
                max_num=500,
                score_threshold=0.1,
                out_size_factor=8,
                voxel_size=[0.075, 0.075],
                code_size=9),
            separate_head=dict(
                type='SeparateHead', init_bias=-2.19, final_kernel=3),
            loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),
            loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),
            norm_bbox=True),
        mix_selection=False,
        num_query=900,
        num_classes=10,
        in_channels=256,
        pc_range=[-54, -54, -5.0, 54, 54, 3.0],
        sync_cls_avg_factor=True,
        with_box_refine=True,
        as_two_stage=False,
        code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],
        transformer=dict(
            type='FUTR3DTransformer',
            use_dab=True,
            decoder=dict(
                type='FUTR3DTransformerDecoder',
                num_layers=6,
                use_dab=True,
                anchor_size=3,
                return_intermediate=True,
                transformerlayers=dict(
                    type='DetrTransformerDecoderLayer',
                    attn_cfgs=[
                        dict(
                            type='MultiheadAttention',
                            embed_dims=256,
                            num_heads=8,
                            dropout=0.1),
                        dict(type='FUTR3DAttention', embed_dims=256)
                    ],
                    feedforward_channels=1024,
                    ffn_dropout=0.1,
                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',
                                     'ffn', 'norm')))),
        positional_encoding=dict(
            type='SinePositionalEncoding',
            num_feats=128,
            normalize=True,
            offset=-0.5),
        loss_cls=dict(
            type='FocalLoss',
            use_sigmoid=True,
            gamma=2.0,
            alpha=0.25,
            loss_weight=2.0),
        loss_bbox=dict(type='L1Loss', loss_weight=0.25),
        loss_iou=dict(type='GIoULoss', loss_weight=0)),
    train_cfg=dict(
        pts=dict(
            point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0],
            pc_range=[-54, -54, -5.0, 54, 54, 3.0],
            grid_size=[1440, 1440, 40],
            voxel_size=[0.075, 0.075, 0.2],
            out_size_factor=8,
            dense_reg=1,
            gaussian_overlap=0.1,
            max_objs=500,
            min_radius=2,
            code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],
            assigner=dict(
                type='HungarianAssigner3D',
                cls_cost=dict(type='FocalLossCost', weight=2.0),
                reg_cost=dict(type='BBox3DL1Cost', weight=0.25),
                iou_cost=dict(type='IoUCost', weight=0)))),
    test_cfg=dict(
        pts=dict(
            pc_range=[-54, -54],
            post_center_limit_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],
            max_per_img=500,
            max_pool_nms=False,
            min_radius=[4, 12, 10, 1, 0.85, 0.175],
            out_size_factor=8,
            voxel_size=[0.075, 0.075],
            nms_type='circle',
            pre_max_size=1000,
            post_max_size=83,
            nms_thr=0.2,
            max_num=300,
            score_threshold=0,
            post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0])))
db_sampler = dict(
    data_root='data/nuscenes/',
    info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',
    rate=1.0,
    prepare=dict(
        filter_by_difficulty=[-1],
        filter_by_min_points=dict(
            car=5,
            truck=5,
            bus=5,
            trailer=5,
            construction_vehicle=5,
            traffic_cone=5,
            barrier=5,
            motorcycle=5,
            bicycle=5,
            pedestrian=5)),
    classes=[
        'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',
        'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
    ],
    sample_groups=dict(
        car=2,
        truck=3,
        construction_vehicle=7,
        bus=4,
        trailer=6,
        barrier=2,
        motorcycle=6,
        bicycle=6,
        pedestrian=2,
        traffic_cone=2),
    points_loader=dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=[0, 1, 2, 3, 4],
        file_client_args=dict(backend='disk')))
find_unused_parameters = True
custom_hooks = [dict(type='FadeOjectSampleHook', num_last_epochs=5)]
gpu_ids = range(0, 2)

2025-05-04 18:06:33,708 - mmdet - INFO - 设置随机种子为 0, deterministic: False
2025-05-04 18:06:34,178 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
Name of parameter - Initialization information

pts_middle_encoder.conv_input.0.weight - torch.Size([16, 3, 3, 3, 5]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv_input.1.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv_input.1.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.0.conv1.weight - torch.Size([16, 3, 3, 3, 16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.0.bn1.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.0.bn1.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.0.conv2.weight - torch.Size([16, 3, 3, 3, 16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.0.bn2.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.0.bn2.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.1.conv1.weight - torch.Size([16, 3, 3, 3, 16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.1.bn1.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.1.bn1.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.1.conv2.weight - torch.Size([16, 3, 3, 3, 16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.1.bn2.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.1.bn2.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.2.0.weight - torch.Size([32, 3, 3, 3, 16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.2.1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.2.1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.0.conv1.weight - torch.Size([32, 3, 3, 3, 32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.0.bn1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.0.bn1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.0.conv2.weight - torch.Size([32, 3, 3, 3, 32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.0.bn2.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.0.bn2.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.1.conv1.weight - torch.Size([32, 3, 3, 3, 32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.1.bn1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.1.bn1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.1.conv2.weight - torch.Size([32, 3, 3, 3, 32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.1.bn2.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.1.bn2.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.2.0.weight - torch.Size([64, 3, 3, 3, 32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.2.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.2.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.0.conv1.weight - torch.Size([64, 3, 3, 3, 64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.0.conv2.weight - torch.Size([64, 3, 3, 3, 64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.0.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.1.conv1.weight - torch.Size([64, 3, 3, 3, 64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.1.conv2.weight - torch.Size([64, 3, 3, 3, 64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.2.0.weight - torch.Size([128, 3, 3, 3, 64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.2.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.2.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.0.conv1.weight - torch.Size([128, 3, 3, 3, 128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.0.conv2.weight - torch.Size([128, 3, 3, 3, 128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.1.conv1.weight - torch.Size([128, 3, 3, 3, 128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.1.conv2.weight - torch.Size([128, 3, 3, 3, 128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv_out.0.weight - torch.Size([128, 3, 1, 1, 128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv_out.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv_out.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.0.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.downsample_layer.0.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.downsample_layer.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.downsample_layer.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.downsample_layer.0.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.downsample_layer.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.downsample_layer.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder.0.0.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder.0.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder.0.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder.1.0.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder.1.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder.1.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder_norm.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder_norm.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder_norm.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder_norm.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.0.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.downsample_layer.0.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.downsample_layer.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.downsample_layer.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.downsample_layer.0.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.downsample_layer.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.downsample_layer.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder.0.0.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder.0.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder.0.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder.1.0.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder.1.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder.1.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder_norm.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder_norm.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder_norm.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder_norm.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.0.dt_bias_H - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.0.dt_bias_V - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.0.A_log_H - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.0.A_log_V - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.0.D_H - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.0.D_V - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.0.pos_embed - torch.Size([1, 256, 180, 180]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.0.in_proj_H.weight - torch.Size([524, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.0.in_proj_V.weight - torch.Size([524, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.0.out_proj.weight - torch.Size([256, 512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.0.out_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.0.out_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.0.sincos_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.0.sincos_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.3.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.5.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.6.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.6.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.8.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.8.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.9.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.9.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.0.dt_bias_H - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.0.dt_bias_V - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.0.A_log_H - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.0.A_log_V - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.0.D_H - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.0.D_V - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.0.pos_embed - torch.Size([1, 256, 180, 180]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.0.in_proj_H.weight - torch.Size([524, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.0.in_proj_V.weight - torch.Size([524, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.0.out_proj.weight - torch.Size([256, 512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.0.out_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.0.out_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.0.conv1d_H.weight - torch.Size([256, 256, 4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.0.conv1d_V.weight - torch.Size([256, 256, 4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.0.sincos_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.0.sincos_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.3.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.5.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.6.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.6.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.8.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.8.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.9.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.9.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.0.dt_bias_H - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.0.dt_bias_V - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.0.A_log_H - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.0.A_log_V - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.0.D_H - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.0.D_V - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.0.pos_embed - torch.Size([1, 256, 90, 90]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.0.in_proj_H.weight - torch.Size([524, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.0.in_proj_V.weight - torch.Size([524, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.0.out_proj.weight - torch.Size([256, 512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.0.out_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.0.out_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.0.conv1d_H.weight - torch.Size([256, 256, 4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.0.conv1d_V.weight - torch.Size([256, 256, 4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.0.sincos_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.0.sincos_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.3.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.5.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.6.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.6.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.8.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.8.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.9.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.9.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.3.0.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.3.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.3.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.4.0.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.4.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.4.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.norm_1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.norm_1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.norm_2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.norm_2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.0.dt_bias_H - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.0.dt_bias_V - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.0.A_log_H - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.0.A_log_V - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.0.D_H - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.0.D_V - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.0.pos_embed - torch.Size([1, 256, 180, 180]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.0.in_proj_H.weight - torch.Size([524, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.0.in_proj_V.weight - torch.Size([524, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.0.out_proj.weight - torch.Size([256, 512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.0.out_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.0.out_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.0.sincos_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.0.sincos_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.3.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.5.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.6.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.6.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.8.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.8.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.9.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.9.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.0.dt_bias_H - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.0.dt_bias_V - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.0.A_log_H - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.0.A_log_V - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.0.D_H - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.0.D_V - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.0.pos_embed - torch.Size([1, 256, 180, 180]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.0.in_proj_H.weight - torch.Size([524, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.0.in_proj_V.weight - torch.Size([524, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.0.out_proj.weight - torch.Size([256, 512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.0.out_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.0.out_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.0.conv1d_H.weight - torch.Size([256, 256, 4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.0.conv1d_V.weight - torch.Size([256, 256, 4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.0.sincos_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.0.sincos_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.3.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.5.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.6.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.6.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.8.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.8.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.9.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.9.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.0.dt_bias_H - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.0.dt_bias_V - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.0.A_log_H - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.0.A_log_V - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.0.D_H - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.0.D_V - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.0.pos_embed - torch.Size([1, 256, 90, 90]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.0.in_proj_H.weight - torch.Size([524, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.0.in_proj_V.weight - torch.Size([524, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.0.out_proj.weight - torch.Size([256, 512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.0.out_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.0.out_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.0.conv1d_H.weight - torch.Size([256, 256, 4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.0.conv1d_V.weight - torch.Size([256, 256, 4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.0.sincos_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.0.sincos_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.3.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.5.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.6.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.6.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.8.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.8.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.9.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.9.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.3.0.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.3.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.3.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.4.0.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.4.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.4.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.norm_1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.norm_1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.norm_2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.norm_2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.lateral_convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.lateral_convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.fpn_convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.fpn_convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.fpn_convs.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.fpn_convs.3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.level_embeds - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.query_scale.layers.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.query_scale.layers.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.query_scale.layers.1.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.query_scale.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.ref_point_head.layers.0.weight - torch.Size([256, 384]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.ref_point_head.layers.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.ref_point_head.layers.1.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.ref_point_head.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.0.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.0.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.cls_branches.1.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.1.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.cls_branches.2.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.2.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.cls_branches.3.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.3.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.cls_branches.4.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.cls_branches.5.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.5.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.0.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.0.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.0.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.0.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.0.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.0.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.1.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.1.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.1.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.1.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.1.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.1.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.2.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.2.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.2.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.2.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.2.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.2.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.3.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.3.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.3.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.3.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.3.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.3.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.4.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.4.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.4.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.4.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.4.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.4.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.5.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.5.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.5.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.5.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.5.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.5.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.tgt_embed.weight - torch.Size([900, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.refpoint_embed.weight - torch.Size([900, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.shared_conv.conv.weight - torch.Size([64, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.shared_conv.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.shared_conv.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.heatmap.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.heatmap.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.heatmap.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.heatmap.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.heatmap.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.heatmap.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.heatmap.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.heatmap.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.heatmap.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.heatmap.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.heatmap.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.heatmap.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  
2025-05-04 18:06:34,205 - mmdet - INFO - Model:
FUTR3D(
  (pts_voxel_layer): Voxelization(voxel_size=[0.075, 0.075, 0.2], point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0], max_num_points=10, max_voxels=(120000, 160000), deterministic=True)
  (pts_voxel_encoder): HardSimpleVFE()
  (pts_middle_encoder): SparseEncoder(
    (conv_input): SparseSequential(
      (0): SubMConv3d(5, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
      (1): SyncBatchNorm(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
    (encoder_layers): SparseSequential(
      (encoder_layer1): SparseSequential(
        (0): SparseBasicBlock(
          (conv1): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn1): SyncBatchNorm(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (conv2): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn2): SyncBatchNorm(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (1): SparseBasicBlock(
          (conv1): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn1): SyncBatchNorm(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (conv2): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn2): SyncBatchNorm(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): SparseSequential(
          (0): SparseConv3d(16, 32, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
      (encoder_layer2): SparseSequential(
        (0): SparseBasicBlock(
          (conv1): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn1): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (conv2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn2): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (1): SparseBasicBlock(
          (conv1): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn1): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (conv2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn2): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): SparseSequential(
          (0): SparseConv3d(32, 64, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
      (encoder_layer3): SparseSequential(
        (0): SparseBasicBlock(
          (conv1): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (conv2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn2): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (1): SparseBasicBlock(
          (conv1): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (conv2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn2): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): SparseSequential(
          (0): SparseConv3d(64, 128, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[0, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
      (encoder_layer4): SparseSequential(
        (0): SparseBasicBlock(
          (conv1): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (conv2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (1): SparseBasicBlock(
          (conv1): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (conv2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
      )
    )
    (conv_out): SparseSequential(
      (0): SparseConv3d(128, 128, kernel_size=[3, 1, 1], stride=[2, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
      (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
  )
  (pts_backbone): CascadeDEDBackbone(
    (layers): ModuleList(
      (0): DEDBackbone(
        (encoder): ModuleList(
          (0): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
            (1): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
          (1): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
              (downsample_layer): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
            (1): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
          (2): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
              (downsample_layer): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
            (1): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
        )
        (decoder): ModuleList(
          (0): Sequential(
            (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (1): Sequential(
            (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
        )
        (decoder_norm): ModuleList(
          (0): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (1): DEDBackbone(
        (encoder): ModuleList(
          (0): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
            (1): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
          (1): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
              (downsample_layer): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
            (1): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
          (2): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
              (downsample_layer): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
            (1): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
        )
        (decoder): ModuleList(
          (0): Sequential(
            (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (1): Sequential(
            (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
        )
        (decoder_norm): ModuleList(
          (0): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
    )
    (secondmamba): Sequential(
      (0): SECONDMamba(
        (blocks): ModuleList(
          (0): Sequential(
            (0): SECONDMambaBlock(
              (in_proj_H): Linear(in_features=256, out_features=524, bias=False)
              (in_proj_V): Linear(in_features=256, out_features=524, bias=False)
              (act): SiLU()
              (out_proj): Linear(in_features=512, out_features=256, bias=False)
              (out_norm): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
              (sincos_proj): Linear(in_features=256, out_features=256, bias=True)
            )
            (1): ReLU()
            (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (6): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (7): ReLU()
            (8): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (9): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (10): ReLU()
          )
          (1): Sequential(
            (0): SECONDMambaBlock(
              (in_proj_H): Linear(in_features=256, out_features=524, bias=False)
              (in_proj_V): Linear(in_features=256, out_features=524, bias=False)
              (act): SiLU()
              (out_proj): Linear(in_features=512, out_features=256, bias=False)
              (out_norm): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
              (conv1d_H): Conv1d(256, 256, kernel_size=(4,), stride=(4,), bias=False)
              (conv1d_V): Conv1d(256, 256, kernel_size=(4,), stride=(4,), bias=False)
              (sincos_proj): Linear(in_features=256, out_features=256, bias=True)
            )
            (1): ReLU()
            (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (6): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (7): ReLU()
            (8): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (9): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (10): ReLU()
          )
          (2): Sequential(
            (0): SECONDMambaBlock(
              (in_proj_H): Linear(in_features=256, out_features=524, bias=False)
              (in_proj_V): Linear(in_features=256, out_features=524, bias=False)
              (act): SiLU()
              (out_proj): Linear(in_features=512, out_features=256, bias=False)
              (out_norm): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
              (conv1d_H): Conv1d(256, 256, kernel_size=(4,), stride=(4,), bias=False)
              (conv1d_V): Conv1d(256, 256, kernel_size=(4,), stride=(4,), bias=False)
              (sincos_proj): Linear(in_features=256, out_features=256, bias=True)
            )
            (1): ReLU()
            (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (6): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (7): ReLU()
            (8): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (9): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (10): ReLU()
          )
          (3): Sequential(
            (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (4): Sequential(
            (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
        )
        (norm_1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (norm_2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      )
      (1): SECONDMamba(
        (blocks): ModuleList(
          (0): Sequential(
            (0): SECONDMambaBlock(
              (in_proj_H): Linear(in_features=256, out_features=524, bias=False)
              (in_proj_V): Linear(in_features=256, out_features=524, bias=False)
              (act): SiLU()
              (out_proj): Linear(in_features=512, out_features=256, bias=False)
              (out_norm): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
              (sincos_proj): Linear(in_features=256, out_features=256, bias=True)
            )
            (1): ReLU()
            (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (6): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (7): ReLU()
            (8): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (9): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (10): ReLU()
          )
          (1): Sequential(
            (0): SECONDMambaBlock(
              (in_proj_H): Linear(in_features=256, out_features=524, bias=False)
              (in_proj_V): Linear(in_features=256, out_features=524, bias=False)
              (act): SiLU()
              (out_proj): Linear(in_features=512, out_features=256, bias=False)
              (out_norm): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
              (conv1d_H): Conv1d(256, 256, kernel_size=(4,), stride=(4,), bias=False)
              (conv1d_V): Conv1d(256, 256, kernel_size=(4,), stride=(4,), bias=False)
              (sincos_proj): Linear(in_features=256, out_features=256, bias=True)
            )
            (1): ReLU()
            (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (6): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (7): ReLU()
            (8): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (9): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (10): ReLU()
          )
          (2): Sequential(
            (0): SECONDMambaBlock(
              (in_proj_H): Linear(in_features=256, out_features=524, bias=False)
              (in_proj_V): Linear(in_features=256, out_features=524, bias=False)
              (act): SiLU()
              (out_proj): Linear(in_features=512, out_features=256, bias=False)
              (out_norm): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
              (conv1d_H): Conv1d(256, 256, kernel_size=(4,), stride=(4,), bias=False)
              (conv1d_V): Conv1d(256, 256, kernel_size=(4,), stride=(4,), bias=False)
              (sincos_proj): Linear(in_features=256, out_features=256, bias=True)
            )
            (1): ReLU()
            (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (3): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (4): ReLU()
            (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (6): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (7): ReLU()
            (8): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (9): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (10): ReLU()
          )
          (3): Sequential(
            (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (4): Sequential(
            (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
        )
        (norm_1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (norm_2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      )
    )
  )
  (pts_neck): FPN(
    (lateral_convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
    )
    (fpn_convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
      (1): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
      (2): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
      (3): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
    )
  )
  init_cfg={'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
  (pts_bbox_head): FUTR3DHead(
    (loss_cls): FocalLoss()
    (loss_bbox): L1Loss()
    (loss_iou): GIoULoss()
    (activate): ReLU(inplace=True)
    (positional_encoding): SinePositionalEncoding(num_feats=128, temperature=10000, normalize=True, scale=6.283185307179586, eps=1e-06)
    (transformer): FUTR3DTransformer(
      (decoder): FUTR3DTransformerDecoder(
        (layers): ModuleList(
          (0): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (1): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (2): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (3): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (4): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (5): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
        (query_scale): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=256, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
          )
        )
        (ref_point_head): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=384, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
          )
        )
      )
    )
    (cls_branches): ModuleList(
      (0): Linear(in_features=256, out_features=10, bias=True)
      (1): Linear(in_features=256, out_features=10, bias=True)
      (2): Linear(in_features=256, out_features=10, bias=True)
      (3): Linear(in_features=256, out_features=10, bias=True)
      (4): Linear(in_features=256, out_features=10, bias=True)
      (5): Linear(in_features=256, out_features=10, bias=True)
    )
    (reg_branches): ModuleList(
      (0): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (1): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (2): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (3): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (4): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (5): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
    )
    (tgt_embed): Embedding(900, 256)
    (refpoint_embed): Embedding(900, 3)
    (aux_head): CenterHead(
      (loss_cls): GaussianFocalLoss()
      (loss_bbox): L1Loss()
      (shared_conv): ConvModule(
        (conv): Conv2d(512, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (task_heads): ModuleList(
        (0): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
        (1): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
        (2): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
        (3): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
        (4): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
        (5): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
      )
    )
  )
)
2025-05-04 18:06:46,912 - mmdet - INFO - Start running, host: ubuntu@ubuntu, work_dir: /home/ubuntu/jxcao/hdd/jxc/FUTR3D/work_dirs/lidar_0075v_900q_split14_cascadeded_secondmamba2/两张卡每张卡2
2025-05-04 18:06:46,912 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CyclicLrUpdaterHook                
(HIGH        ) CyclicMomentumUpdaterHook          
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CyclicLrUpdaterHook                
(HIGH        ) CyclicMomentumUpdaterHook          
(NORMAL      ) FadeOjectSampleHook                
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CyclicLrUpdaterHook                
(HIGH        ) CyclicMomentumUpdaterHook          
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_epoch:
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
2025-05-04 18:06:46,938 - mmdet - INFO - workflow: [('train', 1)], max: 20 epochs
2025-05-04 18:06:46,938 - mmdet - INFO - Checkpoints will be saved to /home/ubuntu/jxcao/hdd/jxc/FUTR3D/work_dirs/lidar_0075v_900q_split14_cascadeded_secondmamba2/两张卡每张卡2 by HardDiskBackend.
2025-05-04 18:07:54,385 - mmdet - INFO - Epoch [1][50/2207]	lr: 1.250e-05, eta: 16:29:43, time: 1.347, data_time: 0.135, memory: 15697, loss_cls: 1.4943, loss_bbox: 2.2823, d0.loss_cls: 1.8652, d0.loss_bbox: 4.4819, d1.loss_cls: 1.7249, d1.loss_bbox: 2.3289, d2.loss_cls: 1.6605, d2.loss_bbox: 2.3082, d3.loss_cls: 1.5789, d3.loss_bbox: 2.2908, d4.loss_cls: 1.5346, d4.loss_bbox: 2.2843, aux_task0.loss_heatmap: 445.3862, aux_task0.loss_bbox: 0.8051, aux_task1.loss_heatmap: 881.9307, aux_task1.loss_bbox: 1.0298, aux_task2.loss_heatmap: 948.0271, aux_task2.loss_bbox: 1.1428, aux_task3.loss_heatmap: 1574.1303, aux_task3.loss_bbox: 0.7677, aux_task4.loss_heatmap: 281.9837, aux_task4.loss_bbox: 0.6295, aux_task5.loss_heatmap: 908.7572, aux_task5.loss_bbox: 0.6831, loss: 5071.1081, grad_norm: 675819.7600
2025-05-04 18:08:46,979 - mmdet - INFO - Epoch [1][100/2207]	lr: 1.251e-05, eta: 14:40:20, time: 1.052, data_time: 0.006, memory: 15697, loss_cls: 1.1841, loss_bbox: 2.2041, d0.loss_cls: 1.6334, d0.loss_bbox: 4.3656, d1.loss_cls: 1.3752, d1.loss_bbox: 2.2713, d2.loss_cls: 1.2655, d2.loss_bbox: 2.2446, d3.loss_cls: 1.2245, d3.loss_bbox: 2.2247, d4.loss_cls: 1.1955, d4.loss_bbox: 2.2127, aux_task0.loss_heatmap: 375.1651, aux_task0.loss_bbox: 0.7710, aux_task1.loss_heatmap: 719.0816, aux_task1.loss_bbox: 0.9380, aux_task2.loss_heatmap: 790.9419, aux_task2.loss_bbox: 1.0595, aux_task3.loss_heatmap: 1029.8888, aux_task3.loss_bbox: 0.6974, aux_task4.loss_heatmap: 208.0786, aux_task4.loss_bbox: 0.5917, aux_task5.loss_heatmap: 651.2333, aux_task5.loss_bbox: 0.6369, loss: 3802.4850, grad_norm: 459588.6341
2025-05-04 18:09:39,414 - mmdet - INFO - Epoch [1][150/2207]	lr: 1.252e-05, eta: 14:02:30, time: 1.049, data_time: 0.006, memory: 15697, loss_cls: 1.1848, loss_bbox: 2.1140, d0.loss_cls: 1.4063, d0.loss_bbox: 4.3621, d1.loss_cls: 1.2280, d1.loss_bbox: 2.2424, d2.loss_cls: 1.1890, d2.loss_bbox: 2.2033, d3.loss_cls: 1.1858, d3.loss_bbox: 2.1697, d4.loss_cls: 1.1851, d4.loss_bbox: 2.1398, aux_task0.loss_heatmap: 273.4439, aux_task0.loss_bbox: 0.7267, aux_task1.loss_heatmap: 473.6696, aux_task1.loss_bbox: 0.8532, aux_task2.loss_heatmap: 561.6322, aux_task2.loss_bbox: 0.9719, aux_task3.loss_heatmap: 915.7113, aux_task3.loss_bbox: 0.6423, aux_task4.loss_heatmap: 141.1058, aux_task4.loss_bbox: 0.5576, aux_task5.loss_heatmap: 537.6730, aux_task5.loss_bbox: 0.5745, loss: 2930.1723, grad_norm: 255649.9864
2025-05-04 18:10:31,739 - mmdet - INFO - Epoch [1][200/2207]	lr: 1.254e-05, eta: 13:42:45, time: 1.046, data_time: 0.006, memory: 15724, loss_cls: 1.1886, loss_bbox: 1.8772, d0.loss_cls: 1.2423, d0.loss_bbox: 4.0514, d1.loss_cls: 1.1821, d1.loss_bbox: 2.0975, d2.loss_cls: 1.1843, d2.loss_bbox: 2.0214, d3.loss_cls: 1.1839, d3.loss_bbox: 1.9658, d4.loss_cls: 1.1877, d4.loss_bbox: 1.9136, aux_task0.loss_heatmap: 180.6948, aux_task0.loss_bbox: 0.6582, aux_task1.loss_heatmap: 284.8378, aux_task1.loss_bbox: 0.7625, aux_task2.loss_heatmap: 299.9791, aux_task2.loss_bbox: 0.8953, aux_task3.loss_heatmap: 486.7117, aux_task3.loss_bbox: 0.5412, aux_task4.loss_heatmap: 76.6555, aux_task4.loss_bbox: 0.5116, aux_task5.loss_heatmap: 311.5515, aux_task5.loss_bbox: 0.5256, loss: 1665.4205, grad_norm: 117466.6507
2025-05-04 18:11:27,403 - mmdet - INFO - Epoch [1][250/2207]	lr: 1.256e-05, eta: 13:40:20, time: 1.113, data_time: 0.006, memory: 15724, loss_cls: 1.1565, loss_bbox: 1.8906, d0.loss_cls: 1.1549, d0.loss_bbox: 3.0824, d1.loss_cls: 1.1516, d1.loss_bbox: 1.8395, d2.loss_cls: 1.1557, d2.loss_bbox: 1.7921, d3.loss_cls: 1.1547, d3.loss_bbox: 1.7993, d4.loss_cls: 1.1563, d4.loss_bbox: 1.8358, aux_task0.loss_heatmap: 66.8719, aux_task0.loss_bbox: 0.5775, aux_task1.loss_heatmap: 140.5900, aux_task1.loss_bbox: 0.6390, aux_task2.loss_heatmap: 150.2041, aux_task2.loss_bbox: 0.7659, aux_task3.loss_heatmap: 181.9524, aux_task3.loss_bbox: 0.4837, aux_task4.loss_heatmap: 38.8503, aux_task4.loss_bbox: 0.4594, aux_task5.loss_heatmap: 133.0010, aux_task5.loss_bbox: 0.4981, loss: 734.0625, grad_norm: 32708.3007
2025-05-04 18:12:19,783 - mmdet - INFO - Epoch [1][300/2207]	lr: 1.258e-05, eta: 13:30:24, time: 1.048, data_time: 0.006, memory: 15724, loss_cls: 1.1525, loss_bbox: 1.9658, d0.loss_cls: 1.1476, d0.loss_bbox: 1.9081, d1.loss_cls: 1.1525, d1.loss_bbox: 1.7714, d2.loss_cls: 1.1501, d2.loss_bbox: 1.8280, d3.loss_cls: 1.1509, d3.loss_bbox: 1.8839, d4.loss_cls: 1.1505, d4.loss_bbox: 1.9299, aux_task0.loss_heatmap: 30.3150, aux_task0.loss_bbox: 0.4890, aux_task1.loss_heatmap: 62.2063, aux_task1.loss_bbox: 0.5555, aux_task2.loss_heatmap: 62.9704, aux_task2.loss_bbox: 0.6716, aux_task3.loss_heatmap: 88.3948, aux_task3.loss_bbox: 0.4429, aux_task4.loss_heatmap: 15.0237, aux_task4.loss_bbox: 0.4310, aux_task5.loss_heatmap: 66.6958, aux_task5.loss_bbox: 0.4682, loss: 346.8556, grad_norm: 8364.5695
2025-05-04 18:13:12,301 - mmdet - INFO - Epoch [1][350/2207]	lr: 1.261e-05, eta: 13:23:21, time: 1.050, data_time: 0.007, memory: 15724, loss_cls: 1.1597, loss_bbox: 1.7832, d0.loss_cls: 1.1617, d0.loss_bbox: 1.7588, d1.loss_cls: 1.1611, d1.loss_bbox: 1.7487, d2.loss_cls: 1.1582, d2.loss_bbox: 1.7657, d3.loss_cls: 1.1572, d3.loss_bbox: 1.7782, d4.loss_cls: 1.1584, d4.loss_bbox: 1.7818, aux_task0.loss_heatmap: 17.3258, aux_task0.loss_bbox: 0.4583, aux_task1.loss_heatmap: 26.2572, aux_task1.loss_bbox: 0.5216, aux_task2.loss_heatmap: 28.3400, aux_task2.loss_bbox: 0.5684, aux_task3.loss_heatmap: 40.0437, aux_task3.loss_bbox: 0.4169, aux_task4.loss_heatmap: 6.5205, aux_task4.loss_bbox: 0.4263, aux_task5.loss_heatmap: 28.3153, aux_task5.loss_bbox: 0.4602, loss: 167.2269, grad_norm: 2640.5510
2025-05-04 18:14:04,648 - mmdet - INFO - Epoch [1][400/2207]	lr: 1.264e-05, eta: 13:17:32, time: 1.047, data_time: 0.006, memory: 15724, loss_cls: 1.1289, loss_bbox: 1.7227, d0.loss_cls: 1.1400, d0.loss_bbox: 1.7382, d1.loss_cls: 1.1337, d1.loss_bbox: 1.7226, d2.loss_cls: 1.1253, d2.loss_bbox: 1.7224, d3.loss_cls: 1.1284, d3.loss_bbox: 1.7222, d4.loss_cls: 1.1282, d4.loss_bbox: 1.7197, aux_task0.loss_heatmap: 5.9572, aux_task0.loss_bbox: 0.4430, aux_task1.loss_heatmap: 11.3788, aux_task1.loss_bbox: 0.5183, aux_task2.loss_heatmap: 12.3594, aux_task2.loss_bbox: 0.5372, aux_task3.loss_heatmap: 18.5794, aux_task3.loss_bbox: 0.4289, aux_task4.loss_heatmap: 3.3340, aux_task4.loss_bbox: 0.4255, aux_task5.loss_heatmap: 11.6298, aux_task5.loss_bbox: 0.4716, loss: 83.1954, grad_norm: 826.8933
2025-05-04 18:14:57,475 - mmdet - INFO - Epoch [1][450/2207]	lr: 1.268e-05, eta: 13:13:35, time: 1.057, data_time: 0.007, memory: 15724, loss_cls: 1.1321, loss_bbox: 1.7363, d0.loss_cls: 1.1431, d0.loss_bbox: 1.7493, d1.loss_cls: 1.1353, d1.loss_bbox: 1.7296, d2.loss_cls: 1.1275, d2.loss_bbox: 1.7280, d3.loss_cls: 1.1298, d3.loss_bbox: 1.7260, d4.loss_cls: 1.1306, d4.loss_bbox: 1.7309, aux_task0.loss_heatmap: 4.1284, aux_task0.loss_bbox: 0.4353, aux_task1.loss_heatmap: 5.4712, aux_task1.loss_bbox: 0.4966, aux_task2.loss_heatmap: 5.6845, aux_task2.loss_bbox: 0.5035, aux_task3.loss_heatmap: 7.3110, aux_task3.loss_bbox: 0.4137, aux_task4.loss_heatmap: 2.1786, aux_task4.loss_bbox: 0.4323, aux_task5.loss_heatmap: 5.5409, aux_task5.loss_bbox: 0.4636, loss: 50.2579, grad_norm: 360.8095
2025-05-04 18:15:49,782 - mmdet - INFO - Epoch [1][500/2207]	lr: 1.272e-05, eta: 13:09:30, time: 1.046, data_time: 0.007, memory: 15724, loss_cls: 1.1194, loss_bbox: 1.7136, d0.loss_cls: 1.1310, d0.loss_bbox: 1.7365, d1.loss_cls: 1.1222, d1.loss_bbox: 1.7159, d2.loss_cls: 1.1149, d2.loss_bbox: 1.7123, d3.loss_cls: 1.1194, d3.loss_bbox: 1.7096, d4.loss_cls: 1.1160, d4.loss_bbox: 1.7111, aux_task0.loss_heatmap: 2.2964, aux_task0.loss_bbox: 0.4483, aux_task1.loss_heatmap: 3.3560, aux_task1.loss_bbox: 0.4944, aux_task2.loss_heatmap: 3.7837, aux_task2.loss_bbox: 0.4992, aux_task3.loss_heatmap: 4.2836, aux_task3.loss_bbox: 0.4058, aux_task4.loss_heatmap: 1.7922, aux_task4.loss_bbox: 0.4328, aux_task5.loss_heatmap: 3.5131, aux_task5.loss_bbox: 0.4774, loss: 38.8048, grad_norm: 210.3419
2025-05-04 18:16:42,159 - mmdet - INFO - Epoch [1][550/2207]	lr: 1.277e-05, eta: 13:06:05, time: 1.048, data_time: 0.007, memory: 15724, loss_cls: 1.1093, loss_bbox: 1.7189, d0.loss_cls: 1.1198, d0.loss_bbox: 1.7405, d1.loss_cls: 1.1134, d1.loss_bbox: 1.7189, d2.loss_cls: 1.1063, d2.loss_bbox: 1.7218, d3.loss_cls: 1.1088, d3.loss_bbox: 1.7171, d4.loss_cls: 1.1068, d4.loss_bbox: 1.7168, aux_task0.loss_heatmap: 1.9412, aux_task0.loss_bbox: 0.4510, aux_task1.loss_heatmap: 2.4144, aux_task1.loss_bbox: 0.4978, aux_task2.loss_heatmap: 2.5595, aux_task2.loss_bbox: 0.5119, aux_task3.loss_heatmap: 3.1093, aux_task3.loss_bbox: 0.4140, aux_task4.loss_heatmap: 1.6695, aux_task4.loss_bbox: 0.4164, aux_task5.loss_heatmap: 2.5132, aux_task5.loss_bbox: 0.4646, loss: 33.9615, grad_norm: 161.1363
2025-05-04 18:17:34,594 - mmdet - INFO - Epoch [1][600/2207]	lr: 1.282e-05, eta: 13:03:10, time: 1.049, data_time: 0.007, memory: 15786, loss_cls: 1.1134, loss_bbox: 1.7106, d0.loss_cls: 1.1336, d0.loss_bbox: 1.7347, d1.loss_cls: 1.1182, d1.loss_bbox: 1.7149, d2.loss_cls: 1.1107, d2.loss_bbox: 1.7140, d3.loss_cls: 1.1142, d3.loss_bbox: 1.7107, d4.loss_cls: 1.1114, d4.loss_bbox: 1.7091, aux_task0.loss_heatmap: 1.7650, aux_task0.loss_bbox: 0.4551, aux_task1.loss_heatmap: 2.0897, aux_task1.loss_bbox: 0.5007, aux_task2.loss_heatmap: 2.1835, aux_task2.loss_bbox: 0.5120, aux_task3.loss_heatmap: 2.7966, aux_task3.loss_bbox: 0.4182, aux_task4.loss_heatmap: 1.6088, aux_task4.loss_bbox: 0.4257, aux_task5.loss_heatmap: 2.1849, aux_task5.loss_bbox: 0.4677, loss: 32.4032, grad_norm: 153.9172
2025-05-04 18:18:26,761 - mmdet - INFO - Epoch [1][650/2207]	lr: 1.287e-05, eta: 13:00:16, time: 1.043, data_time: 0.006, memory: 15786, loss_cls: 1.1009, loss_bbox: 1.7159, d0.loss_cls: 1.1250, d0.loss_bbox: 1.7451, d1.loss_cls: 1.1075, d1.loss_bbox: 1.7188, d2.loss_cls: 1.0996, d2.loss_bbox: 1.7193, d3.loss_cls: 1.1045, d3.loss_bbox: 1.7124, d4.loss_cls: 1.1002, d4.loss_bbox: 1.7154, aux_task0.loss_heatmap: 1.6935, aux_task0.loss_bbox: 0.4664, aux_task1.loss_heatmap: 1.9338, aux_task1.loss_bbox: 0.5097, aux_task2.loss_heatmap: 1.9990, aux_task2.loss_bbox: 0.5147, aux_task3.loss_heatmap: 2.2570, aux_task3.loss_bbox: 0.4272, aux_task4.loss_heatmap: 1.5662, aux_task4.loss_bbox: 0.4292, aux_task5.loss_heatmap: 1.9650, aux_task5.loss_bbox: 0.4703, loss: 31.1966, grad_norm: 148.1997
2025-05-04 18:19:18,935 - mmdet - INFO - Epoch [1][700/2207]	lr: 1.293e-05, eta: 12:57:40, time: 1.043, data_time: 0.006, memory: 15786, loss_cls: 1.0936, loss_bbox: 1.7005, d0.loss_cls: 1.1134, d0.loss_bbox: 1.7335, d1.loss_cls: 1.0995, d1.loss_bbox: 1.7092, d2.loss_cls: 1.0932, d2.loss_bbox: 1.7099, d3.loss_cls: 1.0976, d3.loss_bbox: 1.7033, d4.loss_cls: 1.0918, d4.loss_bbox: 1.7042, aux_task0.loss_heatmap: 1.5912, aux_task0.loss_bbox: 0.4550, aux_task1.loss_heatmap: 1.8221, aux_task1.loss_bbox: 0.5137, aux_task2.loss_heatmap: 1.9377, aux_task2.loss_bbox: 0.4903, aux_task3.loss_heatmap: 2.2022, aux_task3.loss_bbox: 0.4182, aux_task4.loss_heatmap: 1.5542, aux_task4.loss_bbox: 0.4277, aux_task5.loss_heatmap: 1.8339, aux_task5.loss_bbox: 0.4695, loss: 30.5654, grad_norm: 154.4765
2025-05-04 18:20:11,406 - mmdet - INFO - Epoch [1][750/2207]	lr: 1.300e-05, eta: 12:55:34, time: 1.049, data_time: 0.006, memory: 15786, loss_cls: 1.0861, loss_bbox: 1.6945, d0.loss_cls: 1.1050, d0.loss_bbox: 1.7251, d1.loss_cls: 1.0889, d1.loss_bbox: 1.7035, d2.loss_cls: 1.0873, d2.loss_bbox: 1.7032, d3.loss_cls: 1.0874, d3.loss_bbox: 1.6979, d4.loss_cls: 1.0845, d4.loss_bbox: 1.6964, aux_task0.loss_heatmap: 1.5823, aux_task0.loss_bbox: 0.4496, aux_task1.loss_heatmap: 1.7584, aux_task1.loss_bbox: 0.4983, aux_task2.loss_heatmap: 1.8848, aux_task2.loss_bbox: 0.4844, aux_task3.loss_heatmap: 1.9078, aux_task3.loss_bbox: 0.4234, aux_task4.loss_heatmap: 1.5236, aux_task4.loss_bbox: 0.4354, aux_task5.loss_heatmap: 1.7751, aux_task5.loss_bbox: 0.4669, loss: 29.9499, grad_norm: 149.5370
2025-05-04 18:21:03,836 - mmdet - INFO - Epoch [1][800/2207]	lr: 1.307e-05, eta: 12:53:36, time: 1.049, data_time: 0.007, memory: 15786, loss_cls: 1.0629, loss_bbox: 1.6710, d0.loss_cls: 1.0882, d0.loss_bbox: 1.7062, d1.loss_cls: 1.0628, d1.loss_bbox: 1.6826, d2.loss_cls: 1.0604, d2.loss_bbox: 1.6793, d3.loss_cls: 1.0671, d3.loss_bbox: 1.6725, d4.loss_cls: 1.0614, d4.loss_bbox: 1.6722, aux_task0.loss_heatmap: 1.5017, aux_task0.loss_bbox: 0.4579, aux_task1.loss_heatmap: 1.6841, aux_task1.loss_bbox: 0.4899, aux_task2.loss_heatmap: 1.8538, aux_task2.loss_bbox: 0.4866, aux_task3.loss_heatmap: 1.9531, aux_task3.loss_bbox: 0.4002, aux_task4.loss_heatmap: 1.4991, aux_task4.loss_bbox: 0.4246, aux_task5.loss_heatmap: 1.7156, aux_task5.loss_bbox: 0.4637, loss: 29.4168, grad_norm: 151.2223
2025-05-04 18:21:56,362 - mmdet - INFO - Epoch [1][850/2207]	lr: 1.314e-05, eta: 12:51:50, time: 1.051, data_time: 0.007, memory: 15786, loss_cls: 1.0836, loss_bbox: 1.6780, d0.loss_cls: 1.1073, d0.loss_bbox: 1.7144, d1.loss_cls: 1.0853, d1.loss_bbox: 1.6951, d2.loss_cls: 1.0835, d2.loss_bbox: 1.6905, d3.loss_cls: 1.0876, d3.loss_bbox: 1.6819, d4.loss_cls: 1.0839, d4.loss_bbox: 1.6807, aux_task0.loss_heatmap: 1.5257, aux_task0.loss_bbox: 0.4385, aux_task1.loss_heatmap: 1.6787, aux_task1.loss_bbox: 0.5005, aux_task2.loss_heatmap: 1.8114, aux_task2.loss_bbox: 0.5027, aux_task3.loss_heatmap: 1.8156, aux_task3.loss_bbox: 0.4071, aux_task4.loss_heatmap: 1.4928, aux_task4.loss_bbox: 0.4262, aux_task5.loss_heatmap: 1.7202, aux_task5.loss_bbox: 0.4615, loss: 29.4527, grad_norm: 146.6739
2025-05-04 18:22:48,735 - mmdet - INFO - Epoch [1][900/2207]	lr: 1.322e-05, eta: 12:50:03, time: 1.047, data_time: 0.007, memory: 15786, loss_cls: 1.0748, loss_bbox: 1.6946, d0.loss_cls: 1.0997, d0.loss_bbox: 1.7323, d1.loss_cls: 1.0777, d1.loss_bbox: 1.7077, d2.loss_cls: 1.0747, d2.loss_bbox: 1.7026, d3.loss_cls: 1.0775, d3.loss_bbox: 1.6964, d4.loss_cls: 1.0722, d4.loss_bbox: 1.6963, aux_task0.loss_heatmap: 1.4934, aux_task0.loss_bbox: 0.4521, aux_task1.loss_heatmap: 1.6538, aux_task1.loss_bbox: 0.5002, aux_task2.loss_heatmap: 1.8065, aux_task2.loss_bbox: 0.5082, aux_task3.loss_heatmap: 1.7915, aux_task3.loss_bbox: 0.4051, aux_task4.loss_heatmap: 1.4710, aux_task4.loss_bbox: 0.4288, aux_task5.loss_heatmap: 1.6476, aux_task5.loss_bbox: 0.4692, loss: 29.3340, grad_norm: 140.5974
2025-05-04 18:23:41,209 - mmdet - INFO - Epoch [1][950/2207]	lr: 1.330e-05, eta: 12:48:27, time: 1.049, data_time: 0.006, memory: 15800, loss_cls: 1.0556, loss_bbox: 1.6902, d0.loss_cls: 1.0798, d0.loss_bbox: 1.7362, d1.loss_cls: 1.0552, d1.loss_bbox: 1.7055, d2.loss_cls: 1.0533, d2.loss_bbox: 1.7023, d3.loss_cls: 1.0555, d3.loss_bbox: 1.6974, d4.loss_cls: 1.0520, d4.loss_bbox: 1.6951, aux_task0.loss_heatmap: 1.4778, aux_task0.loss_bbox: 0.4607, aux_task1.loss_heatmap: 1.6278, aux_task1.loss_bbox: 0.5075, aux_task2.loss_heatmap: 1.7413, aux_task2.loss_bbox: 0.4824, aux_task3.loss_heatmap: 1.6833, aux_task3.loss_bbox: 0.4070, aux_task4.loss_heatmap: 1.4334, aux_task4.loss_bbox: 0.4238, aux_task5.loss_heatmap: 1.5857, aux_task5.loss_bbox: 0.4608, loss: 28.8695, grad_norm: 124.1298
2025-05-04 18:24:33,686 - mmdet - INFO - Exp name: lidar_0075v_900q_split14_cascadeded_secondmamba2.py
2025-05-04 18:24:33,687 - mmdet - INFO - Epoch [1][1000/2207]	lr: 1.339e-05, eta: 12:46:54, time: 1.050, data_time: 0.006, memory: 15800, loss_cls: 1.0630, loss_bbox: 1.6614, d0.loss_cls: 1.0913, d0.loss_bbox: 1.7177, d1.loss_cls: 1.0601, d1.loss_bbox: 1.6867, d2.loss_cls: 1.0586, d2.loss_bbox: 1.6799, d3.loss_cls: 1.0596, d3.loss_bbox: 1.6723, d4.loss_cls: 1.0607, d4.loss_bbox: 1.6675, aux_task0.loss_heatmap: 1.4978, aux_task0.loss_bbox: 0.4603, aux_task1.loss_heatmap: 1.5825, aux_task1.loss_bbox: 0.4909, aux_task2.loss_heatmap: 1.7737, aux_task2.loss_bbox: 0.4917, aux_task3.loss_heatmap: 1.7266, aux_task3.loss_bbox: 0.4175, aux_task4.loss_heatmap: 1.4177, aux_task4.loss_bbox: 0.4246, aux_task5.loss_heatmap: 1.5964, aux_task5.loss_bbox: 0.4667, loss: 28.8252, grad_norm: 125.6713
2025-05-04 18:25:26,226 - mmdet - INFO - Epoch [1][1050/2207]	lr: 1.348e-05, eta: 12:45:29, time: 1.051, data_time: 0.006, memory: 15800, loss_cls: 1.0482, loss_bbox: 1.6814, d0.loss_cls: 1.0742, d0.loss_bbox: 1.7402, d1.loss_cls: 1.0458, d1.loss_bbox: 1.7084, d2.loss_cls: 1.0409, d2.loss_bbox: 1.7035, d3.loss_cls: 1.0446, d3.loss_bbox: 1.6930, d4.loss_cls: 1.0448, d4.loss_bbox: 1.6860, aux_task0.loss_heatmap: 1.4342, aux_task0.loss_bbox: 0.4612, aux_task1.loss_heatmap: 1.5528, aux_task1.loss_bbox: 0.5006, aux_task2.loss_heatmap: 1.7396, aux_task2.loss_bbox: 0.5033, aux_task3.loss_heatmap: 1.6290, aux_task3.loss_bbox: 0.4170, aux_task4.loss_heatmap: 1.4060, aux_task4.loss_bbox: 0.4334, aux_task5.loss_heatmap: 1.5872, aux_task5.loss_bbox: 0.4706, loss: 28.6459, grad_norm: 116.1188
2025-05-04 18:26:18,583 - mmdet - INFO - Epoch [1][1100/2207]	lr: 1.357e-05, eta: 12:43:59, time: 1.047, data_time: 0.007, memory: 15800, loss_cls: 1.0417, loss_bbox: 1.6618, d0.loss_cls: 1.0611, d0.loss_bbox: 1.7394, d1.loss_cls: 1.0344, d1.loss_bbox: 1.7012, d2.loss_cls: 1.0347, d2.loss_bbox: 1.6905, d3.loss_cls: 1.0351, d3.loss_bbox: 1.6781, d4.loss_cls: 1.0359, d4.loss_bbox: 1.6676, aux_task0.loss_heatmap: 1.4274, aux_task0.loss_bbox: 0.4613, aux_task1.loss_heatmap: 1.5591, aux_task1.loss_bbox: 0.5098, aux_task2.loss_heatmap: 1.7530, aux_task2.loss_bbox: 0.5023, aux_task3.loss_heatmap: 1.6090, aux_task3.loss_bbox: 0.4191, aux_task4.loss_heatmap: 1.3608, aux_task4.loss_bbox: 0.4305, aux_task5.loss_heatmap: 1.5338, aux_task5.loss_bbox: 0.4673, loss: 28.4152, grad_norm: 118.3330
2025-05-04 18:27:11,035 - mmdet - INFO - Epoch [1][1150/2207]	lr: 1.367e-05, eta: 12:42:35, time: 1.049, data_time: 0.007, memory: 15800, loss_cls: 1.0396, loss_bbox: 1.6342, d0.loss_cls: 1.0585, d0.loss_bbox: 1.7222, d1.loss_cls: 1.0325, d1.loss_bbox: 1.6769, d2.loss_cls: 1.0327, d2.loss_bbox: 1.6643, d3.loss_cls: 1.0334, d3.loss_bbox: 1.6497, d4.loss_cls: 1.0349, d4.loss_bbox: 1.6389, aux_task0.loss_heatmap: 1.4080, aux_task0.loss_bbox: 0.4472, aux_task1.loss_heatmap: 1.5443, aux_task1.loss_bbox: 0.4922, aux_task2.loss_heatmap: 1.7450, aux_task2.loss_bbox: 0.5002, aux_task3.loss_heatmap: 1.5856, aux_task3.loss_bbox: 0.4139, aux_task4.loss_heatmap: 1.3543, aux_task4.loss_bbox: 0.4307, aux_task5.loss_heatmap: 1.5340, aux_task5.loss_bbox: 0.4639, loss: 28.1370, grad_norm: 121.4042
2025-05-04 18:28:03,644 - mmdet - INFO - Epoch [1][1200/2207]	lr: 1.378e-05, eta: 12:41:20, time: 1.052, data_time: 0.006, memory: 15800, loss_cls: 1.0389, loss_bbox: 1.5911, d0.loss_cls: 1.0556, d0.loss_bbox: 1.7008, d1.loss_cls: 1.0259, d1.loss_bbox: 1.6416, d2.loss_cls: 1.0287, d2.loss_bbox: 1.6238, d3.loss_cls: 1.0301, d3.loss_bbox: 1.6058, d4.loss_cls: 1.0360, d4.loss_bbox: 1.5952, aux_task0.loss_heatmap: 1.3868, aux_task0.loss_bbox: 0.4437, aux_task1.loss_heatmap: 1.5411, aux_task1.loss_bbox: 0.4869, aux_task2.loss_heatmap: 1.7237, aux_task2.loss_bbox: 0.4914, aux_task3.loss_heatmap: 1.5744, aux_task3.loss_bbox: 0.4072, aux_task4.loss_heatmap: 1.3264, aux_task4.loss_bbox: 0.4300, aux_task5.loss_heatmap: 1.5228, aux_task5.loss_bbox: 0.4706, loss: 27.7785, grad_norm: 120.8343
2025-05-04 18:28:56,294 - mmdet - INFO - Epoch [1][1250/2207]	lr: 1.388e-05, eta: 12:40:09, time: 1.053, data_time: 0.006, memory: 15800, loss_cls: 1.0506, loss_bbox: 1.6070, d0.loss_cls: 1.0642, d0.loss_bbox: 1.7164, d1.loss_cls: 1.0338, d1.loss_bbox: 1.6561, d2.loss_cls: 1.0392, d2.loss_bbox: 1.6365, d3.loss_cls: 1.0382, d3.loss_bbox: 1.6207, d4.loss_cls: 1.0415, d4.loss_bbox: 1.6114, aux_task0.loss_heatmap: 1.4611, aux_task0.loss_bbox: 0.4681, aux_task1.loss_heatmap: 1.5019, aux_task1.loss_bbox: 0.4896, aux_task2.loss_heatmap: 1.7156, aux_task2.loss_bbox: 0.4990, aux_task3.loss_heatmap: 1.5746, aux_task3.loss_bbox: 0.4087, aux_task4.loss_heatmap: 1.3166, aux_task4.loss_bbox: 0.4404, aux_task5.loss_heatmap: 1.5371, aux_task5.loss_bbox: 0.4678, loss: 27.9960, grad_norm: 115.1317
2025-05-04 18:29:48,516 - mmdet - INFO - Epoch [1][1300/2207]	lr: 1.400e-05, eta: 12:38:44, time: 1.044, data_time: 0.006, memory: 15800, loss_cls: 1.0346, loss_bbox: 1.5706, d0.loss_cls: 1.0488, d0.loss_bbox: 1.6987, d1.loss_cls: 1.0221, d1.loss_bbox: 1.6258, d2.loss_cls: 1.0238, d2.loss_bbox: 1.5980, d3.loss_cls: 1.0218, d3.loss_bbox: 1.5843, d4.loss_cls: 1.0272, d4.loss_bbox: 1.5757, aux_task0.loss_heatmap: 1.3958, aux_task0.loss_bbox: 0.4503, aux_task1.loss_heatmap: 1.4872, aux_task1.loss_bbox: 0.5004, aux_task2.loss_heatmap: 1.7201, aux_task2.loss_bbox: 0.5112, aux_task3.loss_heatmap: 1.5925, aux_task3.loss_bbox: 0.4129, aux_task4.loss_heatmap: 1.3034, aux_task4.loss_bbox: 0.4301, aux_task5.loss_heatmap: 1.4965, aux_task5.loss_bbox: 0.4629, loss: 27.5946, grad_norm: 99.4795
2025-05-04 18:30:40,954 - mmdet - INFO - Epoch [1][1350/2207]	lr: 1.411e-05, eta: 12:37:29, time: 1.049, data_time: 0.006, memory: 15800, loss_cls: 1.0135, loss_bbox: 1.5723, d0.loss_cls: 1.0354, d0.loss_bbox: 1.7100, d1.loss_cls: 1.0111, d1.loss_bbox: 1.6296, d2.loss_cls: 1.0113, d2.loss_bbox: 1.5987, d3.loss_cls: 1.0021, d3.loss_bbox: 1.5849, d4.loss_cls: 1.0047, d4.loss_bbox: 1.5773, aux_task0.loss_heatmap: 1.3744, aux_task0.loss_bbox: 0.4653, aux_task1.loss_heatmap: 1.4836, aux_task1.loss_bbox: 0.4951, aux_task2.loss_heatmap: 1.6979, aux_task2.loss_bbox: 0.5080, aux_task3.loss_heatmap: 1.5214, aux_task3.loss_bbox: 0.4142, aux_task4.loss_heatmap: 1.2722, aux_task4.loss_bbox: 0.4250, aux_task5.loss_heatmap: 1.4814, aux_task5.loss_bbox: 0.4679, loss: 27.3574, grad_norm: 88.0774
2025-05-04 18:31:33,580 - mmdet - INFO - Epoch [1][1400/2207]	lr: 1.423e-05, eta: 12:36:21, time: 1.053, data_time: 0.006, memory: 15800, loss_cls: 1.0047, loss_bbox: 1.5603, d0.loss_cls: 1.0394, d0.loss_bbox: 1.7136, d1.loss_cls: 1.0151, d1.loss_bbox: 1.6238, d2.loss_cls: 1.0100, d2.loss_bbox: 1.5915, d3.loss_cls: 0.9968, d3.loss_bbox: 1.5756, d4.loss_cls: 0.9983, d4.loss_bbox: 1.5638, aux_task0.loss_heatmap: 1.4151, aux_task0.loss_bbox: 0.4663, aux_task1.loss_heatmap: 1.4699, aux_task1.loss_bbox: 0.4884, aux_task2.loss_heatmap: 1.7142, aux_task2.loss_bbox: 0.4898, aux_task3.loss_heatmap: 1.5125, aux_task3.loss_bbox: 0.4132, aux_task4.loss_heatmap: 1.2644, aux_task4.loss_bbox: 0.4324, aux_task5.loss_heatmap: 1.4720, aux_task5.loss_bbox: 0.4585, loss: 27.2897, grad_norm: 86.8982
2025-05-04 18:32:25,939 - mmdet - INFO - Epoch [1][1450/2207]	lr: 1.436e-05, eta: 12:35:07, time: 1.047, data_time: 0.006, memory: 15800, loss_cls: 0.9929, loss_bbox: 1.5406, d0.loss_cls: 1.0341, d0.loss_bbox: 1.7092, d1.loss_cls: 1.0143, d1.loss_bbox: 1.6045, d2.loss_cls: 1.0062, d2.loss_bbox: 1.5701, d3.loss_cls: 0.9931, d3.loss_bbox: 1.5535, d4.loss_cls: 0.9900, d4.loss_bbox: 1.5438, aux_task0.loss_heatmap: 1.3838, aux_task0.loss_bbox: 0.4540, aux_task1.loss_heatmap: 1.4823, aux_task1.loss_bbox: 0.4888, aux_task2.loss_heatmap: 1.7009, aux_task2.loss_bbox: 0.5011, aux_task3.loss_heatmap: 1.4846, aux_task3.loss_bbox: 0.4129, aux_task4.loss_heatmap: 1.2319, aux_task4.loss_bbox: 0.4319, aux_task5.loss_heatmap: 1.4629, aux_task5.loss_bbox: 0.4694, loss: 27.0569, grad_norm: 84.6405
2025-05-04 18:33:18,523 - mmdet - INFO - Epoch [1][1500/2207]	lr: 1.449e-05, eta: 12:34:00, time: 1.052, data_time: 0.007, memory: 15802, loss_cls: 0.9877, loss_bbox: 1.5234, d0.loss_cls: 1.0308, d0.loss_bbox: 1.7071, d1.loss_cls: 1.0125, d1.loss_bbox: 1.5952, d2.loss_cls: 1.0004, d2.loss_bbox: 1.5572, d3.loss_cls: 0.9860, d3.loss_bbox: 1.5371, d4.loss_cls: 0.9823, d4.loss_bbox: 1.5255, aux_task0.loss_heatmap: 1.3846, aux_task0.loss_bbox: 0.4413, aux_task1.loss_heatmap: 1.4653, aux_task1.loss_bbox: 0.4878, aux_task2.loss_heatmap: 1.7059, aux_task2.loss_bbox: 0.4776, aux_task3.loss_heatmap: 1.4751, aux_task3.loss_bbox: 0.4155, aux_task4.loss_heatmap: 1.2412, aux_task4.loss_bbox: 0.4394, aux_task5.loss_heatmap: 1.4732, aux_task5.loss_bbox: 0.4599, loss: 26.9121, grad_norm: 81.9117
2025-05-04 18:34:10,738 - mmdet - INFO - Epoch [1][1550/2207]	lr: 1.462e-05, eta: 12:32:44, time: 1.044, data_time: 0.006, memory: 15802, loss_cls: 0.9723, loss_bbox: 1.5159, d0.loss_cls: 1.0249, d0.loss_bbox: 1.7097, d1.loss_cls: 1.0091, d1.loss_bbox: 1.5887, d2.loss_cls: 0.9915, d2.loss_bbox: 1.5429, d3.loss_cls: 0.9735, d3.loss_bbox: 1.5243, d4.loss_cls: 0.9698, d4.loss_bbox: 1.5151, aux_task0.loss_heatmap: 1.3421, aux_task0.loss_bbox: 0.4483, aux_task1.loss_heatmap: 1.4733, aux_task1.loss_bbox: 0.4836, aux_task2.loss_heatmap: 1.7123, aux_task2.loss_bbox: 0.4905, aux_task3.loss_heatmap: 1.4196, aux_task3.loss_bbox: 0.4037, aux_task4.loss_heatmap: 1.1954, aux_task4.loss_bbox: 0.4189, aux_task5.loss_heatmap: 1.4273, aux_task5.loss_bbox: 0.4542, loss: 26.6070, grad_norm: 82.3897
2025-05-04 18:35:03,110 - mmdet - INFO - Epoch [1][1600/2207]	lr: 1.476e-05, eta: 12:31:34, time: 1.047, data_time: 0.006, memory: 15802, loss_cls: 0.9649, loss_bbox: 1.4866, d0.loss_cls: 1.0150, d0.loss_bbox: 1.6826, d1.loss_cls: 0.9976, d1.loss_bbox: 1.5616, d2.loss_cls: 0.9759, d2.loss_bbox: 1.5087, d3.loss_cls: 0.9628, d3.loss_bbox: 1.4895, d4.loss_cls: 0.9621, d4.loss_bbox: 1.4845, aux_task0.loss_heatmap: 1.3280, aux_task0.loss_bbox: 0.4615, aux_task1.loss_heatmap: 1.4539, aux_task1.loss_bbox: 0.4850, aux_task2.loss_heatmap: 1.6941, aux_task2.loss_bbox: 0.4834, aux_task3.loss_heatmap: 1.4364, aux_task3.loss_bbox: 0.4129, aux_task4.loss_heatmap: 1.1835, aux_task4.loss_bbox: 0.4287, aux_task5.loss_heatmap: 1.4043, aux_task5.loss_bbox: 0.4545, loss: 26.3181, grad_norm: 79.7114
2025-05-04 18:35:55,409 - mmdet - INFO - Epoch [1][1650/2207]	lr: 1.490e-05, eta: 12:30:22, time: 1.046, data_time: 0.006, memory: 15802, loss_cls: 0.9645, loss_bbox: 1.4886, d0.loss_cls: 1.0167, d0.loss_bbox: 1.6847, d1.loss_cls: 0.9974, d1.loss_bbox: 1.5628, d2.loss_cls: 0.9760, d2.loss_bbox: 1.5096, d3.loss_cls: 0.9645, d3.loss_bbox: 1.4963, d4.loss_cls: 0.9644, d4.loss_bbox: 1.4895, aux_task0.loss_heatmap: 1.3044, aux_task0.loss_bbox: 0.4461, aux_task1.loss_heatmap: 1.4346, aux_task1.loss_bbox: 0.4926, aux_task2.loss_heatmap: 1.6661, aux_task2.loss_bbox: 0.4932, aux_task3.loss_heatmap: 1.4798, aux_task3.loss_bbox: 0.4126, aux_task4.loss_heatmap: 1.1633, aux_task4.loss_bbox: 0.4312, aux_task5.loss_heatmap: 1.4114, aux_task5.loss_bbox: 0.4623, loss: 26.3127, grad_norm: 81.1591
2025-05-04 18:36:47,666 - mmdet - INFO - Epoch [1][1700/2207]	lr: 1.505e-05, eta: 12:29:11, time: 1.045, data_time: 0.006, memory: 15802, loss_cls: 0.9663, loss_bbox: 1.4736, d0.loss_cls: 1.0095, d0.loss_bbox: 1.6820, d1.loss_cls: 0.9982, d1.loss_bbox: 1.5577, d2.loss_cls: 0.9734, d2.loss_bbox: 1.5003, d3.loss_cls: 0.9606, d3.loss_bbox: 1.4824, d4.loss_cls: 0.9631, d4.loss_bbox: 1.4747, aux_task0.loss_heatmap: 1.3195, aux_task0.loss_bbox: 0.4496, aux_task1.loss_heatmap: 1.4454, aux_task1.loss_bbox: 0.4931, aux_task2.loss_heatmap: 1.6652, aux_task2.loss_bbox: 0.4985, aux_task3.loss_heatmap: 1.4626, aux_task3.loss_bbox: 0.4135, aux_task4.loss_heatmap: 1.1485, aux_task4.loss_bbox: 0.4167, aux_task5.loss_heatmap: 1.3933, aux_task5.loss_bbox: 0.4569, loss: 26.2050, grad_norm: 76.9044
2025-05-04 18:37:40,279 - mmdet - INFO - Epoch [1][1750/2207]	lr: 1.520e-05, eta: 12:28:10, time: 1.052, data_time: 0.006, memory: 15869, loss_cls: 0.9579, loss_bbox: 1.4818, d0.loss_cls: 1.0080, d0.loss_bbox: 1.6801, d1.loss_cls: 0.9902, d1.loss_bbox: 1.5658, d2.loss_cls: 0.9657, d2.loss_bbox: 1.5050, d3.loss_cls: 0.9587, d3.loss_bbox: 1.4900, d4.loss_cls: 0.9556, d4.loss_bbox: 1.4835, aux_task0.loss_heatmap: 1.2905, aux_task0.loss_bbox: 0.4589, aux_task1.loss_heatmap: 1.4494, aux_task1.loss_bbox: 0.4844, aux_task2.loss_heatmap: 1.6745, aux_task2.loss_bbox: 0.5068, aux_task3.loss_heatmap: 1.4343, aux_task3.loss_bbox: 0.4216, aux_task4.loss_heatmap: 1.1525, aux_task4.loss_bbox: 0.4232, aux_task5.loss_heatmap: 1.4057, aux_task5.loss_bbox: 0.4605, loss: 26.2045, grad_norm: 79.7243
2025-05-04 18:38:32,684 - mmdet - INFO - Epoch [1][1800/2207]	lr: 1.536e-05, eta: 12:27:04, time: 1.048, data_time: 0.008, memory: 15869, loss_cls: 0.9659, loss_bbox: 1.4618, d0.loss_cls: 1.0156, d0.loss_bbox: 1.6763, d1.loss_cls: 1.0022, d1.loss_bbox: 1.5444, d2.loss_cls: 0.9720, d2.loss_bbox: 1.4859, d3.loss_cls: 0.9630, d3.loss_bbox: 1.4738, d4.loss_cls: 0.9661, d4.loss_bbox: 1.4661, aux_task0.loss_heatmap: 1.3183, aux_task0.loss_bbox: 0.4640, aux_task1.loss_heatmap: 1.4160, aux_task1.loss_bbox: 0.4807, aux_task2.loss_heatmap: 1.6560, aux_task2.loss_bbox: 0.4999, aux_task3.loss_heatmap: 1.4512, aux_task3.loss_bbox: 0.4282, aux_task4.loss_heatmap: 1.1510, aux_task4.loss_bbox: 0.4334, aux_task5.loss_heatmap: 1.3920, aux_task5.loss_bbox: 0.4729, loss: 26.1566, grad_norm: 81.0289
2025-05-04 18:39:24,981 - mmdet - INFO - Epoch [1][1850/2207]	lr: 1.552e-05, eta: 12:25:57, time: 1.046, data_time: 0.006, memory: 15869, loss_cls: 0.9514, loss_bbox: 1.4578, d0.loss_cls: 0.9948, d0.loss_bbox: 1.6791, d1.loss_cls: 0.9833, d1.loss_bbox: 1.5378, d2.loss_cls: 0.9523, d2.loss_bbox: 1.4759, d3.loss_cls: 0.9455, d3.loss_bbox: 1.4675, d4.loss_cls: 0.9481, d4.loss_bbox: 1.4608, aux_task0.loss_heatmap: 1.2790, aux_task0.loss_bbox: 0.4589, aux_task1.loss_heatmap: 1.4359, aux_task1.loss_bbox: 0.4833, aux_task2.loss_heatmap: 1.6647, aux_task2.loss_bbox: 0.4957, aux_task3.loss_heatmap: 1.4030, aux_task3.loss_bbox: 0.4117, aux_task4.loss_heatmap: 1.1106, aux_task4.loss_bbox: 0.4257, aux_task5.loss_heatmap: 1.3810, aux_task5.loss_bbox: 0.4676, loss: 25.8714, grad_norm: 73.7683
2025-05-04 18:40:17,135 - mmdet - INFO - Epoch [1][1900/2207]	lr: 1.568e-05, eta: 12:24:47, time: 1.043, data_time: 0.006, memory: 15869, loss_cls: 0.9515, loss_bbox: 1.4272, d0.loss_cls: 0.9960, d0.loss_bbox: 1.6550, d1.loss_cls: 0.9837, d1.loss_bbox: 1.5045, d2.loss_cls: 0.9557, d2.loss_bbox: 1.4509, d3.loss_cls: 0.9510, d3.loss_bbox: 1.4382, d4.loss_cls: 0.9490, d4.loss_bbox: 1.4317, aux_task0.loss_heatmap: 1.2762, aux_task0.loss_bbox: 0.4585, aux_task1.loss_heatmap: 1.4135, aux_task1.loss_bbox: 0.4724, aux_task2.loss_heatmap: 1.6581, aux_task2.loss_bbox: 0.4957, aux_task3.loss_heatmap: 1.4117, aux_task3.loss_bbox: 0.4300, aux_task4.loss_heatmap: 1.1053, aux_task4.loss_bbox: 0.4219, aux_task5.loss_heatmap: 1.3613, aux_task5.loss_bbox: 0.4518, loss: 25.6508, grad_norm: 73.6401
2025-05-04 18:41:09,408 - mmdet - INFO - Epoch [1][1950/2207]	lr: 1.585e-05, eta: 12:23:40, time: 1.045, data_time: 0.006, memory: 15869, loss_cls: 0.9489, loss_bbox: 1.4440, d0.loss_cls: 0.9933, d0.loss_bbox: 1.6517, d1.loss_cls: 0.9760, d1.loss_bbox: 1.5146, d2.loss_cls: 0.9476, d2.loss_bbox: 1.4604, d3.loss_cls: 0.9402, d3.loss_bbox: 1.4505, d4.loss_cls: 0.9421, d4.loss_bbox: 1.4460, aux_task0.loss_heatmap: 1.2691, aux_task0.loss_bbox: 0.4530, aux_task1.loss_heatmap: 1.4006, aux_task1.loss_bbox: 0.4833, aux_task2.loss_heatmap: 1.6627, aux_task2.loss_bbox: 0.4938, aux_task3.loss_heatmap: 1.4005, aux_task3.loss_bbox: 0.4096, aux_task4.loss_heatmap: 1.1096, aux_task4.loss_bbox: 0.4281, aux_task5.loss_heatmap: 1.3551, aux_task5.loss_bbox: 0.4606, loss: 25.6410, grad_norm: 68.7697
2025-05-04 18:42:01,843 - mmdet - INFO - Exp name: lidar_0075v_900q_split14_cascadeded_secondmamba2.py
2025-05-04 18:42:01,843 - mmdet - INFO - Epoch [1][2000/2207]	lr: 1.602e-05, eta: 12:22:38, time: 1.049, data_time: 0.006, memory: 15869, loss_cls: 0.9331, loss_bbox: 1.4390, d0.loss_cls: 0.9823, d0.loss_bbox: 1.6724, d1.loss_cls: 0.9626, d1.loss_bbox: 1.5220, d2.loss_cls: 0.9373, d2.loss_bbox: 1.4603, d3.loss_cls: 0.9316, d3.loss_bbox: 1.4517, d4.loss_cls: 0.9286, d4.loss_bbox: 1.4435, aux_task0.loss_heatmap: 1.2802, aux_task0.loss_bbox: 0.4540, aux_task1.loss_heatmap: 1.4133, aux_task1.loss_bbox: 0.4777, aux_task2.loss_heatmap: 1.6103, aux_task2.loss_bbox: 0.4989, aux_task3.loss_heatmap: 1.3570, aux_task3.loss_bbox: 0.4116, aux_task4.loss_heatmap: 1.0830, aux_task4.loss_bbox: 0.4283, aux_task5.loss_heatmap: 1.3149, aux_task5.loss_bbox: 0.4535, loss: 25.4471, grad_norm: 68.3455
2025-05-04 18:42:54,144 - mmdet - INFO - Epoch [1][2050/2207]	lr: 1.620e-05, eta: 12:21:34, time: 1.046, data_time: 0.006, memory: 15869, loss_cls: 0.9217, loss_bbox: 1.3877, d0.loss_cls: 0.9696, d0.loss_bbox: 1.6129, d1.loss_cls: 0.9510, d1.loss_bbox: 1.4664, d2.loss_cls: 0.9268, d2.loss_bbox: 1.4112, d3.loss_cls: 0.9207, d3.loss_bbox: 1.3997, d4.loss_cls: 0.9177, d4.loss_bbox: 1.3909, aux_task0.loss_heatmap: 1.2315, aux_task0.loss_bbox: 0.4339, aux_task1.loss_heatmap: 1.3905, aux_task1.loss_bbox: 0.4699, aux_task2.loss_heatmap: 1.6267, aux_task2.loss_bbox: 0.4825, aux_task3.loss_heatmap: 1.3658, aux_task3.loss_bbox: 0.4111, aux_task4.loss_heatmap: 1.0560, aux_task4.loss_bbox: 0.4148, aux_task5.loss_heatmap: 1.3407, aux_task5.loss_bbox: 0.4479, loss: 24.9477, grad_norm: 70.9101
2025-05-04 18:43:46,550 - mmdet - INFO - Epoch [1][2100/2207]	lr: 1.638e-05, eta: 12:20:32, time: 1.048, data_time: 0.006, memory: 15869, loss_cls: 0.9177, loss_bbox: 1.4247, d0.loss_cls: 0.9655, d0.loss_bbox: 1.6591, d1.loss_cls: 0.9452, d1.loss_bbox: 1.5035, d2.loss_cls: 0.9174, d2.loss_bbox: 1.4523, d3.loss_cls: 0.9150, d3.loss_bbox: 1.4395, d4.loss_cls: 0.9134, d4.loss_bbox: 1.4315, aux_task0.loss_heatmap: 1.2260, aux_task0.loss_bbox: 0.4541, aux_task1.loss_heatmap: 1.4055, aux_task1.loss_bbox: 0.4708, aux_task2.loss_heatmap: 1.6130, aux_task2.loss_bbox: 0.4708, aux_task3.loss_heatmap: 1.3668, aux_task3.loss_bbox: 0.4081, aux_task4.loss_heatmap: 1.0841, aux_task4.loss_bbox: 0.4243, aux_task5.loss_heatmap: 1.3025, aux_task5.loss_bbox: 0.4515, loss: 25.1621, grad_norm: 68.7456
2025-05-04 18:44:39,182 - mmdet - INFO - Epoch [1][2150/2207]	lr: 1.656e-05, eta: 12:19:35, time: 1.053, data_time: 0.007, memory: 15869, loss_cls: 0.9243, loss_bbox: 1.4122, d0.loss_cls: 0.9654, d0.loss_bbox: 1.6565, d1.loss_cls: 0.9456, d1.loss_bbox: 1.5005, d2.loss_cls: 0.9204, d2.loss_bbox: 1.4480, d3.loss_cls: 0.9208, d3.loss_bbox: 1.4318, d4.loss_cls: 0.9198, d4.loss_bbox: 1.4176, aux_task0.loss_heatmap: 1.2399, aux_task0.loss_bbox: 0.4503, aux_task1.loss_heatmap: 1.3897, aux_task1.loss_bbox: 0.4601, aux_task2.loss_heatmap: 1.6223, aux_task2.loss_bbox: 0.4921, aux_task3.loss_heatmap: 1.3584, aux_task3.loss_bbox: 0.4115, aux_task4.loss_heatmap: 1.0515, aux_task4.loss_bbox: 0.4265, aux_task5.loss_heatmap: 1.2949, aux_task5.loss_bbox: 0.4470, loss: 25.1069, grad_norm: 63.0801
2025-05-04 18:45:31,797 - mmdet - INFO - Epoch [1][2200/2207]	lr: 1.675e-05, eta: 12:18:38, time: 1.052, data_time: 0.007, memory: 15869, loss_cls: 0.9274, loss_bbox: 1.4014, d0.loss_cls: 0.9751, d0.loss_bbox: 1.6493, d1.loss_cls: 0.9520, d1.loss_bbox: 1.4900, d2.loss_cls: 0.9288, d2.loss_bbox: 1.4366, d3.loss_cls: 0.9248, d3.loss_bbox: 1.4208, d4.loss_cls: 0.9245, d4.loss_bbox: 1.4074, aux_task0.loss_heatmap: 1.2655, aux_task0.loss_bbox: 0.4380, aux_task1.loss_heatmap: 1.3917, aux_task1.loss_bbox: 0.4602, aux_task2.loss_heatmap: 1.5979, aux_task2.loss_bbox: 0.4923, aux_task3.loss_heatmap: 1.3412, aux_task3.loss_bbox: 0.3977, aux_task4.loss_heatmap: 1.0900, aux_task4.loss_bbox: 0.4263, aux_task5.loss_heatmap: 1.2827, aux_task5.loss_bbox: 0.4471, loss: 25.0685, grad_norm: 68.4320
2025-05-04 18:45:39,390 - mmdet - INFO - Saving checkpoint at 1 epochs
2025-05-04 18:46:45,581 - mmdet - INFO - Epoch [2][50/2207]	lr: 1.697e-05, eta: 12:16:11, time: 1.111, data_time: 0.070, memory: 15869, loss_cls: 0.9195, loss_bbox: 1.3864, d0.loss_cls: 0.9621, d0.loss_bbox: 1.6424, d1.loss_cls: 0.9397, d1.loss_bbox: 1.4716, d2.loss_cls: 0.9183, d2.loss_bbox: 1.4256, d3.loss_cls: 0.9168, d3.loss_bbox: 1.4075, d4.loss_cls: 0.9144, d4.loss_bbox: 1.3939, aux_task0.loss_heatmap: 1.2198, aux_task0.loss_bbox: 0.4330, aux_task1.loss_heatmap: 1.3789, aux_task1.loss_bbox: 0.4485, aux_task2.loss_heatmap: 1.6096, aux_task2.loss_bbox: 0.4899, aux_task3.loss_heatmap: 1.3314, aux_task3.loss_bbox: 0.3987, aux_task4.loss_heatmap: 1.0466, aux_task4.loss_bbox: 0.4166, aux_task5.loss_heatmap: 1.2669, aux_task5.loss_bbox: 0.4452, loss: 24.7832, grad_norm: 64.5596
2025-05-04 18:47:37,973 - mmdet - INFO - Epoch [2][100/2207]	lr: 1.717e-05, eta: 12:15:12, time: 1.048, data_time: 0.007, memory: 15869, loss_cls: 0.9171, loss_bbox: 1.3601, d0.loss_cls: 0.9633, d0.loss_bbox: 1.6194, d1.loss_cls: 0.9385, d1.loss_bbox: 1.4435, d2.loss_cls: 0.9177, d2.loss_bbox: 1.3989, d3.loss_cls: 0.9129, d3.loss_bbox: 1.3806, d4.loss_cls: 0.9119, d4.loss_bbox: 1.3648, aux_task0.loss_heatmap: 1.2278, aux_task0.loss_bbox: 0.4329, aux_task1.loss_heatmap: 1.3655, aux_task1.loss_bbox: 0.4399, aux_task2.loss_heatmap: 1.5782, aux_task2.loss_bbox: 0.4960, aux_task3.loss_heatmap: 1.3221, aux_task3.loss_bbox: 0.4002, aux_task4.loss_heatmap: 1.0475, aux_task4.loss_bbox: 0.4146, aux_task5.loss_heatmap: 1.2813, aux_task5.loss_bbox: 0.4412, loss: 24.5758, grad_norm: 62.6802
2025-05-04 18:48:30,498 - mmdet - INFO - Epoch [2][150/2207]	lr: 1.737e-05, eta: 12:14:15, time: 1.050, data_time: 0.006, memory: 15869, loss_cls: 0.9229, loss_bbox: 1.3503, d0.loss_cls: 0.9601, d0.loss_bbox: 1.6002, d1.loss_cls: 0.9420, d1.loss_bbox: 1.4284, d2.loss_cls: 0.9227, d2.loss_bbox: 1.3873, d3.loss_cls: 0.9199, d3.loss_bbox: 1.3676, d4.loss_cls: 0.9196, d4.loss_bbox: 1.3538, aux_task0.loss_heatmap: 1.1826, aux_task0.loss_bbox: 0.4277, aux_task1.loss_heatmap: 1.3730, aux_task1.loss_bbox: 0.4424, aux_task2.loss_heatmap: 1.5813, aux_task2.loss_bbox: 0.4595, aux_task3.loss_heatmap: 1.3455, aux_task3.loss_bbox: 0.4004, aux_task4.loss_heatmap: 1.0348, aux_task4.loss_bbox: 0.4139, aux_task5.loss_heatmap: 1.2880, aux_task5.loss_bbox: 0.4363, loss: 24.4600, grad_norm: 62.2261
2025-05-04 18:49:22,836 - mmdet - INFO - Epoch [2][200/2207]	lr: 1.758e-05, eta: 12:13:16, time: 1.047, data_time: 0.006, memory: 15869, loss_cls: 0.9019, loss_bbox: 1.3763, d0.loss_cls: 0.9514, d0.loss_bbox: 1.6405, d1.loss_cls: 0.9207, d1.loss_bbox: 1.4620, d2.loss_cls: 0.9006, d2.loss_bbox: 1.4192, d3.loss_cls: 0.8973, d3.loss_bbox: 1.3983, d4.loss_cls: 0.8976, d4.loss_bbox: 1.3829, aux_task0.loss_heatmap: 1.2205, aux_task0.loss_bbox: 0.4392, aux_task1.loss_heatmap: 1.3902, aux_task1.loss_bbox: 0.4395, aux_task2.loss_heatmap: 1.5981, aux_task2.loss_bbox: 0.4822, aux_task3.loss_heatmap: 1.2994, aux_task3.loss_bbox: 0.4003, aux_task4.loss_heatmap: 1.0049, aux_task4.loss_bbox: 0.4142, aux_task5.loss_heatmap: 1.2524, aux_task5.loss_bbox: 0.4339, loss: 24.5236, grad_norm: 56.6937
2025-05-04 18:50:15,323 - mmdet - INFO - Epoch [2][250/2207]	lr: 1.779e-05, eta: 12:12:20, time: 1.050, data_time: 0.006, memory: 15869, loss_cls: 0.9128, loss_bbox: 1.3500, d0.loss_cls: 0.9540, d0.loss_bbox: 1.6116, d1.loss_cls: 0.9251, d1.loss_bbox: 1.4281, d2.loss_cls: 0.9112, d2.loss_bbox: 1.3913, d3.loss_cls: 0.9078, d3.loss_bbox: 1.3703, d4.loss_cls: 0.9085, d4.loss_bbox: 1.3553, aux_task0.loss_heatmap: 1.2407, aux_task0.loss_bbox: 0.4257, aux_task1.loss_heatmap: 1.3643, aux_task1.loss_bbox: 0.4395, aux_task2.loss_heatmap: 1.5534, aux_task2.loss_bbox: 0.4695, aux_task3.loss_heatmap: 1.3279, aux_task3.loss_bbox: 0.4018, aux_task4.loss_heatmap: 1.0255, aux_task4.loss_bbox: 0.4116, aux_task5.loss_heatmap: 1.2506, aux_task5.loss_bbox: 0.4307, loss: 24.3669, grad_norm: 58.8462
2025-05-04 18:51:07,584 - mmdet - INFO - Epoch [2][300/2207]	lr: 1.800e-05, eta: 12:11:19, time: 1.045, data_time: 0.006, memory: 15869, loss_cls: 0.8935, loss_bbox: 1.3381, d0.loss_cls: 0.9352, d0.loss_bbox: 1.6029, d1.loss_cls: 0.9065, d1.loss_bbox: 1.4220, d2.loss_cls: 0.8924, d2.loss_bbox: 1.3851, d3.loss_cls: 0.8905, d3.loss_bbox: 1.3591, d4.loss_cls: 0.8884, d4.loss_bbox: 1.3445, aux_task0.loss_heatmap: 1.1608, aux_task0.loss_bbox: 0.4120, aux_task1.loss_heatmap: 1.3767, aux_task1.loss_bbox: 0.4316, aux_task2.loss_heatmap: 1.5603, aux_task2.loss_bbox: 0.4735, aux_task3.loss_heatmap: 1.3017, aux_task3.loss_bbox: 0.3884, aux_task4.loss_heatmap: 0.9886, aux_task4.loss_bbox: 0.3926, aux_task5.loss_heatmap: 1.2155, aux_task5.loss_bbox: 0.4281, loss: 23.9879, grad_norm: 58.1387
2025-05-04 18:51:59,983 - mmdet - INFO - Epoch [2][350/2207]	lr: 1.822e-05, eta: 12:10:22, time: 1.048, data_time: 0.007, memory: 15869, loss_cls: 0.9037, loss_bbox: 1.3378, d0.loss_cls: 0.9481, d0.loss_bbox: 1.5874, d1.loss_cls: 0.9192, d1.loss_bbox: 1.4117, d2.loss_cls: 0.9035, d2.loss_bbox: 1.3753, d3.loss_cls: 0.9008, d3.loss_bbox: 1.3516, d4.loss_cls: 0.8982, d4.loss_bbox: 1.3420, aux_task0.loss_heatmap: 1.1731, aux_task0.loss_bbox: 0.4145, aux_task1.loss_heatmap: 1.3607, aux_task1.loss_bbox: 0.4229, aux_task2.loss_heatmap: 1.5569, aux_task2.loss_bbox: 0.4467, aux_task3.loss_heatmap: 1.3519, aux_task3.loss_bbox: 0.3822, aux_task4.loss_heatmap: 1.0194, aux_task4.loss_bbox: 0.3843, aux_task5.loss_heatmap: 1.2422, aux_task5.loss_bbox: 0.4218, loss: 24.0559, grad_norm: 60.3067
2025-05-04 18:52:52,204 - mmdet - INFO - Epoch [2][400/2207]	lr: 1.844e-05, eta: 12:09:22, time: 1.044, data_time: 0.007, memory: 15869, loss_cls: 0.9152, loss_bbox: 1.3353, d0.loss_cls: 0.9500, d0.loss_bbox: 1.5997, d1.loss_cls: 0.9236, d1.loss_bbox: 1.4249, d2.loss_cls: 0.9101, d2.loss_bbox: 1.3837, d3.loss_cls: 0.9124, d3.loss_bbox: 1.3558, d4.loss_cls: 0.9098, d4.loss_bbox: 1.3406, aux_task0.loss_heatmap: 1.1974, aux_task0.loss_bbox: 0.4070, aux_task1.loss_heatmap: 1.3491, aux_task1.loss_bbox: 0.4349, aux_task2.loss_heatmap: 1.5619, aux_task2.loss_bbox: 0.4692, aux_task3.loss_heatmap: 1.2896, aux_task3.loss_bbox: 0.3783, aux_task4.loss_heatmap: 0.9864, aux_task4.loss_bbox: 0.3896, aux_task5.loss_heatmap: 1.2520, aux_task5.loss_bbox: 0.4204, loss: 24.0971, grad_norm: 55.6353
2025-05-04 18:53:44,427 - mmdet - INFO - Epoch [2][450/2207]	lr: 1.867e-05, eta: 12:08:22, time: 1.044, data_time: 0.007, memory: 15869, loss_cls: 0.9083, loss_bbox: 1.3175, d0.loss_cls: 0.9497, d0.loss_bbox: 1.5739, d1.loss_cls: 0.9206, d1.loss_bbox: 1.3903, d2.loss_cls: 0.9083, d2.loss_bbox: 1.3560, d3.loss_cls: 0.9079, d3.loss_bbox: 1.3294, d4.loss_cls: 0.9049, d4.loss_bbox: 1.3179, aux_task0.loss_heatmap: 1.1788, aux_task0.loss_bbox: 0.4139, aux_task1.loss_heatmap: 1.3445, aux_task1.loss_bbox: 0.4258, aux_task2.loss_heatmap: 1.5457, aux_task2.loss_bbox: 0.4406, aux_task3.loss_heatmap: 1.2843, aux_task3.loss_bbox: 0.3709, aux_task4.loss_heatmap: 1.0068, aux_task4.loss_bbox: 0.3899, aux_task5.loss_heatmap: 1.2457, aux_task5.loss_bbox: 0.4105, loss: 23.8419, grad_norm: 57.3485
2025-05-04 18:54:36,551 - mmdet - INFO - Epoch [2][500/2207]	lr: 1.890e-05, eta: 12:07:21, time: 1.042, data_time: 0.006, memory: 15869, loss_cls: 0.8994, loss_bbox: 1.2984, d0.loss_cls: 0.9344, d0.loss_bbox: 1.5750, d1.loss_cls: 0.9104, d1.loss_bbox: 1.3851, d2.loss_cls: 0.8960, d2.loss_bbox: 1.3440, d3.loss_cls: 0.8957, d3.loss_bbox: 1.3184, d4.loss_cls: 0.8951, d4.loss_bbox: 1.3044, aux_task0.loss_heatmap: 1.1848, aux_task0.loss_bbox: 0.3971, aux_task1.loss_heatmap: 1.3673, aux_task1.loss_bbox: 0.4235, aux_task2.loss_heatmap: 1.5660, aux_task2.loss_bbox: 0.4548, aux_task3.loss_heatmap: 1.2803, aux_task3.loss_bbox: 0.3715, aux_task4.loss_heatmap: 0.9794, aux_task4.loss_bbox: 0.3898, aux_task5.loss_heatmap: 1.2198, aux_task5.loss_bbox: 0.4098, loss: 23.7005, grad_norm: 55.3132
2025-05-04 18:55:28,896 - mmdet - INFO - Epoch [2][550/2207]	lr: 1.913e-05, eta: 12:06:23, time: 1.047, data_time: 0.006, memory: 15869, loss_cls: 0.8980, loss_bbox: 1.3121, d0.loss_cls: 0.9340, d0.loss_bbox: 1.5762, d1.loss_cls: 0.9133, d1.loss_bbox: 1.3899, d2.loss_cls: 0.8964, d2.loss_bbox: 1.3497, d3.loss_cls: 0.8949, d3.loss_bbox: 1.3208, d4.loss_cls: 0.8948, d4.loss_bbox: 1.3101, aux_task0.loss_heatmap: 1.1646, aux_task0.loss_bbox: 0.4019, aux_task1.loss_heatmap: 1.3538, aux_task1.loss_bbox: 0.4154, aux_task2.loss_heatmap: 1.5568, aux_task2.loss_bbox: 0.4588, aux_task3.loss_heatmap: 1.2635, aux_task3.loss_bbox: 0.3630, aux_task4.loss_heatmap: 0.9710, aux_task4.loss_bbox: 0.3738, aux_task5.loss_heatmap: 1.2151, aux_task5.loss_bbox: 0.4018, loss: 23.6294, grad_norm: 54.3332
2025-05-04 18:56:21,484 - mmdet - INFO - Epoch [2][600/2207]	lr: 1.937e-05, eta: 12:05:29, time: 1.052, data_time: 0.007, memory: 15869, loss_cls: 0.8876, loss_bbox: 1.2943, d0.loss_cls: 0.9230, d0.loss_bbox: 1.5578, d1.loss_cls: 0.8976, d1.loss_bbox: 1.3822, d2.loss_cls: 0.8819, d2.loss_bbox: 1.3435, d3.loss_cls: 0.8840, d3.loss_bbox: 1.3136, d4.loss_cls: 0.8830, d4.loss_bbox: 1.2993, aux_task0.loss_heatmap: 1.1225, aux_task0.loss_bbox: 0.3910, aux_task1.loss_heatmap: 1.3604, aux_task1.loss_bbox: 0.4131, aux_task2.loss_heatmap: 1.5076, aux_task2.loss_bbox: 0.4481, aux_task3.loss_heatmap: 1.2876, aux_task3.loss_bbox: 0.3758, aux_task4.loss_heatmap: 0.9682, aux_task4.loss_bbox: 0.3757, aux_task5.loss_heatmap: 1.1920, aux_task5.loss_bbox: 0.3996, loss: 23.3895, grad_norm: 51.3951
2025-05-04 18:57:13,590 - mmdet - INFO - Epoch [2][650/2207]	lr: 1.961e-05, eta: 12:04:29, time: 1.042, data_time: 0.006, memory: 15869, loss_cls: 0.8914, loss_bbox: 1.2915, d0.loss_cls: 0.9252, d0.loss_bbox: 1.5463, d1.loss_cls: 0.8950, d1.loss_bbox: 1.3718, d2.loss_cls: 0.8859, d2.loss_bbox: 1.3341, d3.loss_cls: 0.8882, d3.loss_bbox: 1.3050, d4.loss_cls: 0.8870, d4.loss_bbox: 1.2937, aux_task0.loss_heatmap: 1.1418, aux_task0.loss_bbox: 0.3857, aux_task1.loss_heatmap: 1.3811, aux_task1.loss_bbox: 0.4235, aux_task2.loss_heatmap: 1.5204, aux_task2.loss_bbox: 0.4522, aux_task3.loss_heatmap: 1.2782, aux_task3.loss_bbox: 0.3633, aux_task4.loss_heatmap: 0.9635, aux_task4.loss_bbox: 0.3814, aux_task5.loss_heatmap: 1.1934, aux_task5.loss_bbox: 0.3962, loss: 23.3957, grad_norm: 50.7592
2025-05-04 18:58:06,012 - mmdet - INFO - Epoch [2][700/2207]	lr: 1.985e-05, eta: 12:03:33, time: 1.048, data_time: 0.007, memory: 15869, loss_cls: 0.9037, loss_bbox: 1.2834, d0.loss_cls: 0.9363, d0.loss_bbox: 1.5522, d1.loss_cls: 0.9072, d1.loss_bbox: 1.3688, d2.loss_cls: 0.8953, d2.loss_bbox: 1.3304, d3.loss_cls: 0.8959, d3.loss_bbox: 1.3033, d4.loss_cls: 0.8985, d4.loss_bbox: 1.2889, aux_task0.loss_heatmap: 1.1621, aux_task0.loss_bbox: 0.3937, aux_task1.loss_heatmap: 1.3240, aux_task1.loss_bbox: 0.4141, aux_task2.loss_heatmap: 1.5305, aux_task2.loss_bbox: 0.4356, aux_task3.loss_heatmap: 1.2689, aux_task3.loss_bbox: 0.3700, aux_task4.loss_heatmap: 0.9810, aux_task4.loss_bbox: 0.3811, aux_task5.loss_heatmap: 1.1920, aux_task5.loss_bbox: 0.3986, loss: 23.4154, grad_norm: 54.0223
2025-05-04 18:58:58,917 - mmdet - INFO - Epoch [2][750/2207]	lr: 2.010e-05, eta: 12:02:44, time: 1.058, data_time: 0.007, memory: 15869, loss_cls: 0.8972, loss_bbox: 1.2669, d0.loss_cls: 0.9236, d0.loss_bbox: 1.5370, d1.loss_cls: 0.8996, d1.loss_bbox: 1.3549, d2.loss_cls: 0.8873, d2.loss_bbox: 1.3112, d3.loss_cls: 0.8902, d3.loss_bbox: 1.2831, d4.loss_cls: 0.8911, d4.loss_bbox: 1.2706, aux_task0.loss_heatmap: 1.1536, aux_task0.loss_bbox: 0.3979, aux_task1.loss_heatmap: 1.3386, aux_task1.loss_bbox: 0.4145, aux_task2.loss_heatmap: 1.5492, aux_task2.loss_bbox: 0.4309, aux_task3.loss_heatmap: 1.2748, aux_task3.loss_bbox: 0.3728, aux_task4.loss_heatmap: 0.9575, aux_task4.loss_bbox: 0.3801, aux_task5.loss_heatmap: 1.1795, aux_task5.loss_bbox: 0.3927, loss: 23.2550, grad_norm: 50.0103
2025-05-04 18:59:51,278 - mmdet - INFO - Epoch [2][800/2207]	lr: 2.036e-05, eta: 12:01:47, time: 1.047, data_time: 0.006, memory: 15869, loss_cls: 0.8940, loss_bbox: 1.2591, d0.loss_cls: 0.9265, d0.loss_bbox: 1.5393, d1.loss_cls: 0.9000, d1.loss_bbox: 1.3453, d2.loss_cls: 0.8902, d2.loss_bbox: 1.3024, d3.loss_cls: 0.8896, d3.loss_bbox: 1.2782, d4.loss_cls: 0.8912, d4.loss_bbox: 1.2638, aux_task0.loss_heatmap: 1.1247, aux_task0.loss_bbox: 0.3980, aux_task1.loss_heatmap: 1.3126, aux_task1.loss_bbox: 0.4131, aux_task2.loss_heatmap: 1.5242, aux_task2.loss_bbox: 0.4412, aux_task3.loss_heatmap: 1.2387, aux_task3.loss_bbox: 0.3646, aux_task4.loss_heatmap: 0.9186, aux_task4.loss_bbox: 0.3720, aux_task5.loss_heatmap: 1.1822, aux_task5.loss_bbox: 0.3942, loss: 23.0635, grad_norm: 50.7946
2025-05-04 19:00:45,528 - mmdet - INFO - Epoch [2][850/2207]	lr: 2.061e-05, eta: 12:01:16, time: 1.085, data_time: 0.007, memory: 15869, loss_cls: 0.8866, loss_bbox: 1.2615, d0.loss_cls: 0.9167, d0.loss_bbox: 1.5315, d1.loss_cls: 0.8901, d1.loss_bbox: 1.3452, d2.loss_cls: 0.8786, d2.loss_bbox: 1.3021, d3.loss_cls: 0.8797, d3.loss_bbox: 1.2769, d4.loss_cls: 0.8824, d4.loss_bbox: 1.2629, aux_task0.loss_heatmap: 1.1193, aux_task0.loss_bbox: 0.3785, aux_task1.loss_heatmap: 1.3078, aux_task1.loss_bbox: 0.4078, aux_task2.loss_heatmap: 1.4934, aux_task2.loss_bbox: 0.4313, aux_task3.loss_heatmap: 1.2599, aux_task3.loss_bbox: 0.3572, aux_task4.loss_heatmap: 0.9589, aux_task4.loss_bbox: 0.3733, aux_task5.loss_heatmap: 1.1835, aux_task5.loss_bbox: 0.3901, loss: 22.9755, grad_norm: 51.5094
2025-05-04 19:01:37,991 - mmdet - INFO - Epoch [2][900/2207]	lr: 2.087e-05, eta: 12:00:21, time: 1.049, data_time: 0.006, memory: 15869, loss_cls: 0.8858, loss_bbox: 1.2586, d0.loss_cls: 0.9142, d0.loss_bbox: 1.5307, d1.loss_cls: 0.8896, d1.loss_bbox: 1.3377, d2.loss_cls: 0.8782, d2.loss_bbox: 1.2904, d3.loss_cls: 0.8796, d3.loss_bbox: 1.2685, d4.loss_cls: 0.8824, d4.loss_bbox: 1.2585, aux_task0.loss_heatmap: 1.1035, aux_task0.loss_bbox: 0.3856, aux_task1.loss_heatmap: 1.3099, aux_task1.loss_bbox: 0.4064, aux_task2.loss_heatmap: 1.4885, aux_task2.loss_bbox: 0.4378, aux_task3.loss_heatmap: 1.2295, aux_task3.loss_bbox: 0.3515, aux_task4.loss_heatmap: 0.9521, aux_task4.loss_bbox: 0.3768, aux_task5.loss_heatmap: 1.1938, aux_task5.loss_bbox: 0.3884, loss: 22.8978, grad_norm: 51.0433
2025-05-04 19:02:32,165 - mmdet - INFO - Epoch [2][950/2207]	lr: 2.114e-05, eta: 11:59:48, time: 1.083, data_time: 0.006, memory: 15869, loss_cls: 0.8850, loss_bbox: 1.2476, d0.loss_cls: 0.9149, d0.loss_bbox: 1.5124, d1.loss_cls: 0.8908, d1.loss_bbox: 1.3230, d2.loss_cls: 0.8792, d2.loss_bbox: 1.2780, d3.loss_cls: 0.8780, d3.loss_bbox: 1.2578, d4.loss_cls: 0.8798, d4.loss_bbox: 1.2472, aux_task0.loss_heatmap: 1.1382, aux_task0.loss_bbox: 0.3847, aux_task1.loss_heatmap: 1.3439, aux_task1.loss_bbox: 0.4139, aux_task2.loss_heatmap: 1.4545, aux_task2.loss_bbox: 0.4236, aux_task3.loss_heatmap: 1.2477, aux_task3.loss_bbox: 0.3541, aux_task4.loss_heatmap: 0.9143, aux_task4.loss_bbox: 0.3691, aux_task5.loss_heatmap: 1.1635, aux_task5.loss_bbox: 0.3855, loss: 22.7867, grad_norm: 51.8390
2025-05-04 19:03:24,439 - mmdet - INFO - Epoch [2][1000/2207]	lr: 2.141e-05, eta: 11:58:50, time: 1.045, data_time: 0.007, memory: 15869, loss_cls: 0.8744, loss_bbox: 1.2232, d0.loss_cls: 0.9039, d0.loss_bbox: 1.5008, d1.loss_cls: 0.8754, d1.loss_bbox: 1.3058, d2.loss_cls: 0.8649, d2.loss_bbox: 1.2578, d3.loss_cls: 0.8658, d3.loss_bbox: 1.2349, d4.loss_cls: 0.8681, d4.loss_bbox: 1.2231, aux_task0.loss_heatmap: 1.1143, aux_task0.loss_bbox: 0.3761, aux_task1.loss_heatmap: 1.2850, aux_task1.loss_bbox: 0.3997, aux_task2.loss_heatmap: 1.4687, aux_task2.loss_bbox: 0.4339, aux_task3.loss_heatmap: 1.2256, aux_task3.loss_bbox: 0.3561, aux_task4.loss_heatmap: 0.9094, aux_task4.loss_bbox: 0.3735, aux_task5.loss_heatmap: 1.1294, aux_task5.loss_bbox: 0.3836, loss: 22.4535, grad_norm: 48.9470
2025-05-04 19:04:16,753 - mmdet - INFO - Epoch [2][1050/2207]	lr: 2.168e-05, eta: 11:57:52, time: 1.046, data_time: 0.006, memory: 15869, loss_cls: 0.8854, loss_bbox: 1.2429, d0.loss_cls: 0.9093, d0.loss_bbox: 1.5144, d1.loss_cls: 0.8859, d1.loss_bbox: 1.3263, d2.loss_cls: 0.8776, d2.loss_bbox: 1.2781, d3.loss_cls: 0.8812, d3.loss_bbox: 1.2544, d4.loss_cls: 0.8823, d4.loss_bbox: 1.2436, aux_task0.loss_heatmap: 1.1230, aux_task0.loss_bbox: 0.3914, aux_task1.loss_heatmap: 1.2793, aux_task1.loss_bbox: 0.4018, aux_task2.loss_heatmap: 1.4945, aux_task2.loss_bbox: 0.4316, aux_task3.loss_heatmap: 1.2511, aux_task3.loss_bbox: 0.3500, aux_task4.loss_heatmap: 0.9288, aux_task4.loss_bbox: 0.3774, aux_task5.loss_heatmap: 1.1595, aux_task5.loss_bbox: 0.3877, loss: 22.7576, grad_norm: 47.0047
2025-05-04 19:05:08,866 - mmdet - INFO - Epoch [2][1100/2207]	lr: 2.195e-05, eta: 11:56:53, time: 1.042, data_time: 0.007, memory: 15869, loss_cls: 0.8744, loss_bbox: 1.2181, d0.loss_cls: 0.9008, d0.loss_bbox: 1.5015, d1.loss_cls: 0.8761, d1.loss_bbox: 1.3118, d2.loss_cls: 0.8648, d2.loss_bbox: 1.2640, d3.loss_cls: 0.8656, d3.loss_bbox: 1.2398, d4.loss_cls: 0.8675, d4.loss_bbox: 1.2239, aux_task0.loss_heatmap: 1.0872, aux_task0.loss_bbox: 0.3812, aux_task1.loss_heatmap: 1.2732, aux_task1.loss_bbox: 0.4069, aux_task2.loss_heatmap: 1.4861, aux_task2.loss_bbox: 0.4346, aux_task3.loss_heatmap: 1.2756, aux_task3.loss_bbox: 0.3518, aux_task4.loss_heatmap: 0.8810, aux_task4.loss_bbox: 0.3698, aux_task5.loss_heatmap: 1.1535, aux_task5.loss_bbox: 0.3782, loss: 22.4875, grad_norm: 47.9880
2025-05-04 19:06:01,155 - mmdet - INFO - Epoch [2][1150/2207]	lr: 2.223e-05, eta: 11:55:56, time: 1.046, data_time: 0.006, memory: 15869, loss_cls: 0.8698, loss_bbox: 1.2179, d0.loss_cls: 0.8958, d0.loss_bbox: 1.4886, d1.loss_cls: 0.8706, d1.loss_bbox: 1.2955, d2.loss_cls: 0.8627, d2.loss_bbox: 1.2523, d3.loss_cls: 0.8654, d3.loss_bbox: 1.2300, d4.loss_cls: 0.8648, d4.loss_bbox: 1.2180, aux_task0.loss_heatmap: 1.0864, aux_task0.loss_bbox: 0.3706, aux_task1.loss_heatmap: 1.2789, aux_task1.loss_bbox: 0.4012, aux_task2.loss_heatmap: 1.4983, aux_task2.loss_bbox: 0.4365, aux_task3.loss_heatmap: 1.2229, aux_task3.loss_bbox: 0.3512, aux_task4.loss_heatmap: 0.8924, aux_task4.loss_bbox: 0.3664, aux_task5.loss_heatmap: 1.1619, aux_task5.loss_bbox: 0.3813, loss: 22.3794, grad_norm: 49.4959
2025-05-04 19:06:53,647 - mmdet - INFO - Epoch [2][1200/2207]	lr: 2.252e-05, eta: 11:55:01, time: 1.050, data_time: 0.007, memory: 15869, loss_cls: 0.8626, loss_bbox: 1.2076, d0.loss_cls: 0.8906, d0.loss_bbox: 1.4821, d1.loss_cls: 0.8643, d1.loss_bbox: 1.2898, d2.loss_cls: 0.8584, d2.loss_bbox: 1.2407, d3.loss_cls: 0.8582, d3.loss_bbox: 1.2238, d4.loss_cls: 0.8591, d4.loss_bbox: 1.2085, aux_task0.loss_heatmap: 1.1052, aux_task0.loss_bbox: 0.3759, aux_task1.loss_heatmap: 1.2959, aux_task1.loss_bbox: 0.3991, aux_task2.loss_heatmap: 1.4400, aux_task2.loss_bbox: 0.4359, aux_task3.loss_heatmap: 1.1901, aux_task3.loss_bbox: 0.3581, aux_task4.loss_heatmap: 0.8761, aux_task4.loss_bbox: 0.3659, aux_task5.loss_heatmap: 1.1103, aux_task5.loss_bbox: 0.3794, loss: 22.1774, grad_norm: 48.8096
2025-05-04 19:07:46,172 - mmdet - INFO - Epoch [2][1250/2207]	lr: 2.280e-05, eta: 11:54:07, time: 1.051, data_time: 0.006, memory: 15869, loss_cls: 0.8684, loss_bbox: 1.2141, d0.loss_cls: 0.8918, d0.loss_bbox: 1.4824, d1.loss_cls: 0.8725, d1.loss_bbox: 1.2950, d2.loss_cls: 0.8662, d2.loss_bbox: 1.2485, d3.loss_cls: 0.8662, d3.loss_bbox: 1.2298, d4.loss_cls: 0.8660, d4.loss_bbox: 1.2170, aux_task0.loss_heatmap: 1.0669, aux_task0.loss_bbox: 0.3713, aux_task1.loss_heatmap: 1.2377, aux_task1.loss_bbox: 0.3943, aux_task2.loss_heatmap: 1.4925, aux_task2.loss_bbox: 0.4396, aux_task3.loss_heatmap: 1.2831, aux_task3.loss_bbox: 0.3472, aux_task4.loss_heatmap: 0.9467, aux_task4.loss_bbox: 0.3725, aux_task5.loss_heatmap: 1.1107, aux_task5.loss_bbox: 0.3787, loss: 22.3590, grad_norm: 48.6004
2025-05-04 19:08:38,634 - mmdet - INFO - Epoch [2][1300/2207]	lr: 2.310e-05, eta: 11:53:12, time: 1.049, data_time: 0.007, memory: 15869, loss_cls: 0.8709, loss_bbox: 1.2253, d0.loss_cls: 0.8953, d0.loss_bbox: 1.5053, d1.loss_cls: 0.8726, d1.loss_bbox: 1.3122, d2.loss_cls: 0.8653, d2.loss_bbox: 1.2649, d3.loss_cls: 0.8663, d3.loss_bbox: 1.2457, d4.loss_cls: 0.8683, d4.loss_bbox: 1.2307, aux_task0.loss_heatmap: 1.1072, aux_task0.loss_bbox: 0.3882, aux_task1.loss_heatmap: 1.2543, aux_task1.loss_bbox: 0.4129, aux_task2.loss_heatmap: 1.4880, aux_task2.loss_bbox: 0.4455, aux_task3.loss_heatmap: 1.2645, aux_task3.loss_bbox: 0.3461, aux_task4.loss_heatmap: 0.9179, aux_task4.loss_bbox: 0.3713, aux_task5.loss_heatmap: 1.1334, aux_task5.loss_bbox: 0.3773, loss: 22.5293, grad_norm: 48.5965
2025-05-04 19:09:30,920 - mmdet - INFO - Epoch [2][1350/2207]	lr: 2.339e-05, eta: 11:52:15, time: 1.046, data_time: 0.006, memory: 15869, loss_cls: 0.8606, loss_bbox: 1.1991, d0.loss_cls: 0.8832, d0.loss_bbox: 1.4556, d1.loss_cls: 0.8620, d1.loss_bbox: 1.2661, d2.loss_cls: 0.8544, d2.loss_bbox: 1.2224, d3.loss_cls: 0.8542, d3.loss_bbox: 1.2060, d4.loss_cls: 0.8558, d4.loss_bbox: 1.1970, aux_task0.loss_heatmap: 1.0323, aux_task0.loss_bbox: 0.3699, aux_task1.loss_heatmap: 1.2563, aux_task1.loss_bbox: 0.4043, aux_task2.loss_heatmap: 1.4573, aux_task2.loss_bbox: 0.4318, aux_task3.loss_heatmap: 1.2721, aux_task3.loss_bbox: 0.3523, aux_task4.loss_heatmap: 0.8832, aux_task4.loss_bbox: 0.3647, aux_task5.loss_heatmap: 1.1086, aux_task5.loss_bbox: 0.3711, loss: 22.0204, grad_norm: 48.6917
2025-05-04 19:10:23,288 - mmdet - INFO - Epoch [2][1400/2207]	lr: 2.369e-05, eta: 11:51:19, time: 1.047, data_time: 0.007, memory: 15869, loss_cls: 0.8561, loss_bbox: 1.1820, d0.loss_cls: 0.8820, d0.loss_bbox: 1.4569, d1.loss_cls: 0.8593, d1.loss_bbox: 1.2677, d2.loss_cls: 0.8519, d2.loss_bbox: 1.2200, d3.loss_cls: 0.8528, d3.loss_bbox: 1.2020, d4.loss_cls: 0.8538, d4.loss_bbox: 1.1865, aux_task0.loss_heatmap: 1.0627, aux_task0.loss_bbox: 0.3710, aux_task1.loss_heatmap: 1.2468, aux_task1.loss_bbox: 0.3907, aux_task2.loss_heatmap: 1.4363, aux_task2.loss_bbox: 0.4290, aux_task3.loss_heatmap: 1.2108, aux_task3.loss_bbox: 0.3469, aux_task4.loss_heatmap: 0.8738, aux_task4.loss_bbox: 0.3715, aux_task5.loss_heatmap: 1.1188, aux_task5.loss_bbox: 0.3727, loss: 21.9020, grad_norm: 47.1505
2025-05-04 19:11:15,760 - mmdet - INFO - Epoch [2][1450/2207]	lr: 2.399e-05, eta: 11:50:24, time: 1.049, data_time: 0.006, memory: 15869, loss_cls: 0.8607, loss_bbox: 1.1789, d0.loss_cls: 0.8735, d0.loss_bbox: 1.4547, d1.loss_cls: 0.8598, d1.loss_bbox: 1.2652, d2.loss_cls: 0.8512, d2.loss_bbox: 1.2187, d3.loss_cls: 0.8548, d3.loss_bbox: 1.2000, d4.loss_cls: 0.8546, d4.loss_bbox: 1.1844, aux_task0.loss_heatmap: 1.0547, aux_task0.loss_bbox: 0.3672, aux_task1.loss_heatmap: 1.2859, aux_task1.loss_bbox: 0.3964, aux_task2.loss_heatmap: 1.4558, aux_task2.loss_bbox: 0.4383, aux_task3.loss_heatmap: 1.1838, aux_task3.loss_bbox: 0.3435, aux_task4.loss_heatmap: 0.8621, aux_task4.loss_bbox: 0.3646, aux_task5.loss_heatmap: 1.0797, aux_task5.loss_bbox: 0.3665, loss: 21.8550, grad_norm: 51.5035
2025-05-04 19:12:08,254 - mmdet - INFO - Epoch [2][1500/2207]	lr: 2.429e-05, eta: 11:49:30, time: 1.050, data_time: 0.007, memory: 15869, loss_cls: 0.8520, loss_bbox: 1.1609, d0.loss_cls: 0.8718, d0.loss_bbox: 1.4357, d1.loss_cls: 0.8541, d1.loss_bbox: 1.2430, d2.loss_cls: 0.8469, d2.loss_bbox: 1.1979, d3.loss_cls: 0.8482, d3.loss_bbox: 1.1781, d4.loss_cls: 0.8489, d4.loss_bbox: 1.1630, aux_task0.loss_heatmap: 1.0497, aux_task0.loss_bbox: 0.3628, aux_task1.loss_heatmap: 1.2549, aux_task1.loss_bbox: 0.3967, aux_task2.loss_heatmap: 1.4314, aux_task2.loss_bbox: 0.4260, aux_task3.loss_heatmap: 1.1997, aux_task3.loss_bbox: 0.3480, aux_task4.loss_heatmap: 0.8900, aux_task4.loss_bbox: 0.3693, aux_task5.loss_heatmap: 1.0707, aux_task5.loss_bbox: 0.3643, loss: 21.6641, grad_norm: 48.5361
2025-05-04 19:13:00,602 - mmdet - INFO - Epoch [2][1550/2207]	lr: 2.460e-05, eta: 11:48:34, time: 1.047, data_time: 0.006, memory: 15869, loss_cls: 0.8596, loss_bbox: 1.1892, d0.loss_cls: 0.8766, d0.loss_bbox: 1.4660, d1.loss_cls: 0.8568, d1.loss_bbox: 1.2766, d2.loss_cls: 0.8525, d2.loss_bbox: 1.2282, d3.loss_cls: 0.8560, d3.loss_bbox: 1.2072, d4.loss_cls: 0.8570, d4.loss_bbox: 1.1912, aux_task0.loss_heatmap: 1.0435, aux_task0.loss_bbox: 0.3646, aux_task1.loss_heatmap: 1.2750, aux_task1.loss_bbox: 0.3979, aux_task2.loss_heatmap: 1.4600, aux_task2.loss_bbox: 0.4265, aux_task3.loss_heatmap: 1.1587, aux_task3.loss_bbox: 0.3404, aux_task4.loss_heatmap: 0.8867, aux_task4.loss_bbox: 0.3568, aux_task5.loss_heatmap: 1.0868, aux_task5.loss_bbox: 0.3725, loss: 21.8862, grad_norm: 48.0790
2025-05-04 19:13:52,961 - mmdet - INFO - Epoch [2][1600/2207]	lr: 2.491e-05, eta: 11:47:39, time: 1.047, data_time: 0.006, memory: 15869, loss_cls: 0.8524, loss_bbox: 1.1686, d0.loss_cls: 0.8698, d0.loss_bbox: 1.4390, d1.loss_cls: 0.8507, d1.loss_bbox: 1.2559, d2.loss_cls: 0.8454, d2.loss_bbox: 1.2020, d3.loss_cls: 0.8484, d3.loss_bbox: 1.1836, d4.loss_cls: 0.8497, d4.loss_bbox: 1.1690, aux_task0.loss_heatmap: 1.0548, aux_task0.loss_bbox: 0.3683, aux_task1.loss_heatmap: 1.2362, aux_task1.loss_bbox: 0.3894, aux_task2.loss_heatmap: 1.4414, aux_task2.loss_bbox: 0.4125, aux_task3.loss_heatmap: 1.2181, aux_task3.loss_bbox: 0.3388, aux_task4.loss_heatmap: 0.8731, aux_task4.loss_bbox: 0.3614, aux_task5.loss_heatmap: 1.1104, aux_task5.loss_bbox: 0.3734, loss: 21.7122, grad_norm: 47.1669
2025-05-04 19:14:45,023 - mmdet - INFO - Epoch [2][1650/2207]	lr: 2.523e-05, eta: 11:46:40, time: 1.041, data_time: 0.006, memory: 15869, loss_cls: 0.8410, loss_bbox: 1.1627, d0.loss_cls: 0.8608, d0.loss_bbox: 1.4411, d1.loss_cls: 0.8428, d1.loss_bbox: 1.2535, d2.loss_cls: 0.8378, d2.loss_bbox: 1.1994, d3.loss_cls: 0.8396, d3.loss_bbox: 1.1786, d4.loss_cls: 0.8394, d4.loss_bbox: 1.1637, aux_task0.loss_heatmap: 1.0145, aux_task0.loss_bbox: 0.3693, aux_task1.loss_heatmap: 1.2489, aux_task1.loss_bbox: 0.3974, aux_task2.loss_heatmap: 1.3790, aux_task2.loss_bbox: 0.4248, aux_task3.loss_heatmap: 1.2086, aux_task3.loss_bbox: 0.3443, aux_task4.loss_heatmap: 0.8622, aux_task4.loss_bbox: 0.3633, aux_task5.loss_heatmap: 1.0490, aux_task5.loss_bbox: 0.3675, loss: 21.4891, grad_norm: 48.2279
2025-05-04 19:15:37,253 - mmdet - INFO - Epoch [2][1700/2207]	lr: 2.555e-05, eta: 11:45:43, time: 1.045, data_time: 0.006, memory: 15869, loss_cls: 0.8531, loss_bbox: 1.1565, d0.loss_cls: 0.8661, d0.loss_bbox: 1.4399, d1.loss_cls: 0.8551, d1.loss_bbox: 1.2503, d2.loss_cls: 0.8475, d2.loss_bbox: 1.1991, d3.loss_cls: 0.8480, d3.loss_bbox: 1.1793, d4.loss_cls: 0.8484, d4.loss_bbox: 1.1623, aux_task0.loss_heatmap: 1.0426, aux_task0.loss_bbox: 0.3689, aux_task1.loss_heatmap: 1.2587, aux_task1.loss_bbox: 0.3919, aux_task2.loss_heatmap: 1.4302, aux_task2.loss_bbox: 0.4296, aux_task3.loss_heatmap: 1.1815, aux_task3.loss_bbox: 0.3456, aux_task4.loss_heatmap: 0.8409, aux_task4.loss_bbox: 0.3519, aux_task5.loss_heatmap: 1.0716, aux_task5.loss_bbox: 0.3626, loss: 21.5816, grad_norm: 47.0283
2025-05-04 19:16:29,722 - mmdet - INFO - Epoch [2][1750/2207]	lr: 2.587e-05, eta: 11:44:49, time: 1.049, data_time: 0.006, memory: 15869, loss_cls: 0.8481, loss_bbox: 1.1586, d0.loss_cls: 0.8562, d0.loss_bbox: 1.4304, d1.loss_cls: 0.8419, d1.loss_bbox: 1.2481, d2.loss_cls: 0.8370, d2.loss_bbox: 1.1958, d3.loss_cls: 0.8396, d3.loss_bbox: 1.1766, d4.loss_cls: 0.8425, d4.loss_bbox: 1.1599, aux_task0.loss_heatmap: 1.0369, aux_task0.loss_bbox: 0.3673, aux_task1.loss_heatmap: 1.2519, aux_task1.loss_bbox: 0.3939, aux_task2.loss_heatmap: 1.4149, aux_task2.loss_bbox: 0.4225, aux_task3.loss_heatmap: 1.1846, aux_task3.loss_bbox: 0.3487, aux_task4.loss_heatmap: 0.8773, aux_task4.loss_bbox: 0.3537, aux_task5.loss_heatmap: 1.0376, aux_task5.loss_bbox: 0.3684, loss: 21.4924, grad_norm: 45.3443
2025-05-04 19:17:22,212 - mmdet - INFO - Epoch [2][1800/2207]	lr: 2.620e-05, eta: 11:43:55, time: 1.050, data_time: 0.007, memory: 15869, loss_cls: 0.8559, loss_bbox: 1.1586, d0.loss_cls: 0.8633, d0.loss_bbox: 1.4250, d1.loss_cls: 0.8516, d1.loss_bbox: 1.2492, d2.loss_cls: 0.8466, d2.loss_bbox: 1.1962, d3.loss_cls: 0.8501, d3.loss_bbox: 1.1756, d4.loss_cls: 0.8507, d4.loss_bbox: 1.1600, aux_task0.loss_heatmap: 1.0076, aux_task0.loss_bbox: 0.3634, aux_task1.loss_heatmap: 1.2549, aux_task1.loss_bbox: 0.3945, aux_task2.loss_heatmap: 1.3996, aux_task2.loss_bbox: 0.4290, aux_task3.loss_heatmap: 1.1679, aux_task3.loss_bbox: 0.3425, aux_task4.loss_heatmap: 0.8808, aux_task4.loss_bbox: 0.3587, aux_task5.loss_heatmap: 1.0820, aux_task5.loss_bbox: 0.3688, loss: 21.5326, grad_norm: 46.2737
2025-05-04 19:18:14,388 - mmdet - INFO - Epoch [2][1850/2207]	lr: 2.652e-05, eta: 11:42:58, time: 1.044, data_time: 0.007, memory: 15869, loss_cls: 0.8656, loss_bbox: 1.1551, d0.loss_cls: 0.8714, d0.loss_bbox: 1.4248, d1.loss_cls: 0.8587, d1.loss_bbox: 1.2508, d2.loss_cls: 0.8567, d2.loss_bbox: 1.1964, d3.loss_cls: 0.8621, d3.loss_bbox: 1.1763, d4.loss_cls: 0.8623, d4.loss_bbox: 1.1590, aux_task0.loss_heatmap: 1.0818, aux_task0.loss_bbox: 0.3755, aux_task1.loss_heatmap: 1.2950, aux_task1.loss_bbox: 0.4007, aux_task2.loss_heatmap: 1.4006, aux_task2.loss_bbox: 0.4259, aux_task3.loss_heatmap: 1.2075, aux_task3.loss_bbox: 0.3468, aux_task4.loss_heatmap: 0.8177, aux_task4.loss_bbox: 0.3653, aux_task5.loss_heatmap: 1.0754, aux_task5.loss_bbox: 0.3678, loss: 21.6993, grad_norm: 46.2972
2025-05-04 19:19:06,959 - mmdet - INFO - Epoch [2][1900/2207]	lr: 2.686e-05, eta: 11:42:05, time: 1.051, data_time: 0.007, memory: 15869, loss_cls: 0.8365, loss_bbox: 1.1591, d0.loss_cls: 0.8501, d0.loss_bbox: 1.4050, d1.loss_cls: 0.8388, d1.loss_bbox: 1.2393, d2.loss_cls: 0.8305, d2.loss_bbox: 1.1881, d3.loss_cls: 0.8325, d3.loss_bbox: 1.1705, d4.loss_cls: 0.8342, d4.loss_bbox: 1.1593, aux_task0.loss_heatmap: 1.0327, aux_task0.loss_bbox: 0.3700, aux_task1.loss_heatmap: 1.2265, aux_task1.loss_bbox: 0.3940, aux_task2.loss_heatmap: 1.3826, aux_task2.loss_bbox: 0.4183, aux_task3.loss_heatmap: 1.1737, aux_task3.loss_bbox: 0.3450, aux_task4.loss_heatmap: 0.8643, aux_task4.loss_bbox: 0.3593, aux_task5.loss_heatmap: 1.0608, aux_task5.loss_bbox: 0.3664, loss: 21.3375, grad_norm: 46.2712
2025-05-04 19:19:59,229 - mmdet - INFO - Epoch [2][1950/2207]	lr: 2.719e-05, eta: 11:41:09, time: 1.045, data_time: 0.006, memory: 15869, loss_cls: 0.8492, loss_bbox: 1.1392, d0.loss_cls: 0.8592, d0.loss_bbox: 1.4065, d1.loss_cls: 0.8517, d1.loss_bbox: 1.2399, d2.loss_cls: 0.8446, d2.loss_bbox: 1.1800, d3.loss_cls: 0.8469, d3.loss_bbox: 1.1608, d4.loss_cls: 0.8460, d4.loss_bbox: 1.1440, aux_task0.loss_heatmap: 1.0215, aux_task0.loss_bbox: 0.3653, aux_task1.loss_heatmap: 1.2573, aux_task1.loss_bbox: 0.3958, aux_task2.loss_heatmap: 1.3937, aux_task2.loss_bbox: 0.4201, aux_task3.loss_heatmap: 1.1611, aux_task3.loss_bbox: 0.3420, aux_task4.loss_heatmap: 0.8518, aux_task4.loss_bbox: 0.3580, aux_task5.loss_heatmap: 1.0484, aux_task5.loss_bbox: 0.3639, loss: 21.3468, grad_norm: 45.9506
2025-05-04 19:20:51,450 - mmdet - INFO - Epoch [2][2000/2207]	lr: 2.753e-05, eta: 11:40:13, time: 1.044, data_time: 0.007, memory: 15902, loss_cls: 0.8424, loss_bbox: 1.1361, d0.loss_cls: 0.8489, d0.loss_bbox: 1.3922, d1.loss_cls: 0.8378, d1.loss_bbox: 1.2348, d2.loss_cls: 0.8343, d2.loss_bbox: 1.1765, d3.loss_cls: 0.8371, d3.loss_bbox: 1.1566, d4.loss_cls: 0.8404, d4.loss_bbox: 1.1403, aux_task0.loss_heatmap: 1.0084, aux_task0.loss_bbox: 0.3512, aux_task1.loss_heatmap: 1.2684, aux_task1.loss_bbox: 0.3936, aux_task2.loss_heatmap: 1.3677, aux_task2.loss_bbox: 0.4272, aux_task3.loss_heatmap: 1.1711, aux_task3.loss_bbox: 0.3435, aux_task4.loss_heatmap: 0.8423, aux_task4.loss_bbox: 0.3561, aux_task5.loss_heatmap: 1.0512, aux_task5.loss_bbox: 0.3650, loss: 21.2232, grad_norm: 47.3821
2025-05-04 19:21:43,813 - mmdet - INFO - Epoch [2][2050/2207]	lr: 2.787e-05, eta: 11:39:18, time: 1.047, data_time: 0.006, memory: 15902, loss_cls: 0.8359, loss_bbox: 1.1143, d0.loss_cls: 0.8424, d0.loss_bbox: 1.3898, d1.loss_cls: 0.8351, d1.loss_bbox: 1.2229, d2.loss_cls: 0.8305, d2.loss_bbox: 1.1601, d3.loss_cls: 0.8318, d3.loss_bbox: 1.1394, d4.loss_cls: 0.8338, d4.loss_bbox: 1.1207, aux_task0.loss_heatmap: 1.0059, aux_task0.loss_bbox: 0.3586, aux_task1.loss_heatmap: 1.2247, aux_task1.loss_bbox: 0.3905, aux_task2.loss_heatmap: 1.3788, aux_task2.loss_bbox: 0.4138, aux_task3.loss_heatmap: 1.1406, aux_task3.loss_bbox: 0.3462, aux_task4.loss_heatmap: 0.8503, aux_task4.loss_bbox: 0.3545, aux_task5.loss_heatmap: 1.0094, aux_task5.loss_bbox: 0.3606, loss: 20.9906, grad_norm: 45.0409
2025-05-04 19:22:36,420 - mmdet - INFO - Epoch [2][2100/2207]	lr: 2.822e-05, eta: 11:38:25, time: 1.052, data_time: 0.006, memory: 15902, loss_cls: 0.8360, loss_bbox: 1.1291, d0.loss_cls: 0.8394, d0.loss_bbox: 1.3873, d1.loss_cls: 0.8327, d1.loss_bbox: 1.2335, d2.loss_cls: 0.8304, d2.loss_bbox: 1.1678, d3.loss_cls: 0.8344, d3.loss_bbox: 1.1475, d4.loss_cls: 0.8352, d4.loss_bbox: 1.1308, aux_task0.loss_heatmap: 1.0040, aux_task0.loss_bbox: 0.3503, aux_task1.loss_heatmap: 1.2394, aux_task1.loss_bbox: 0.3966, aux_task2.loss_heatmap: 1.3536, aux_task2.loss_bbox: 0.4122, aux_task3.loss_heatmap: 1.1654, aux_task3.loss_bbox: 0.3353, aux_task4.loss_heatmap: 0.8399, aux_task4.loss_bbox: 0.3559, aux_task5.loss_heatmap: 1.0428, aux_task5.loss_bbox: 0.3600, loss: 21.0593, grad_norm: 47.2911
2025-05-04 19:23:29,068 - mmdet - INFO - Epoch [2][2150/2207]	lr: 2.857e-05, eta: 11:37:33, time: 1.053, data_time: 0.007, memory: 15902, loss_cls: 0.8289, loss_bbox: 1.1234, d0.loss_cls: 0.8337, d0.loss_bbox: 1.3640, d1.loss_cls: 0.8255, d1.loss_bbox: 1.2163, d2.loss_cls: 0.8219, d2.loss_bbox: 1.1556, d3.loss_cls: 0.8253, d3.loss_bbox: 1.1365, d4.loss_cls: 0.8265, d4.loss_bbox: 1.1235, aux_task0.loss_heatmap: 0.9786, aux_task0.loss_bbox: 0.3565, aux_task1.loss_heatmap: 1.2366, aux_task1.loss_bbox: 0.3920, aux_task2.loss_heatmap: 1.3611, aux_task2.loss_bbox: 0.4182, aux_task3.loss_heatmap: 1.1337, aux_task3.loss_bbox: 0.3376, aux_task4.loss_heatmap: 0.8287, aux_task4.loss_bbox: 0.3623, aux_task5.loss_heatmap: 1.0165, aux_task5.loss_bbox: 0.3586, loss: 20.8616, grad_norm: 46.3453
2025-05-04 19:24:21,610 - mmdet - INFO - Epoch [2][2200/2207]	lr: 2.892e-05, eta: 11:36:40, time: 1.051, data_time: 0.007, memory: 15902, loss_cls: 0.8431, loss_bbox: 1.1551, d0.loss_cls: 0.8438, d0.loss_bbox: 1.3860, d1.loss_cls: 0.8470, d1.loss_bbox: 1.2574, d2.loss_cls: 0.8407, d2.loss_bbox: 1.1940, d3.loss_cls: 0.8402, d3.loss_bbox: 1.1739, d4.loss_cls: 0.8410, d4.loss_bbox: 1.1603, aux_task0.loss_heatmap: 1.0212, aux_task0.loss_bbox: 0.3685, aux_task1.loss_heatmap: 1.2315, aux_task1.loss_bbox: 0.3933, aux_task2.loss_heatmap: 1.3756, aux_task2.loss_bbox: 0.4257, aux_task3.loss_heatmap: 1.1171, aux_task3.loss_bbox: 0.3464, aux_task4.loss_heatmap: 0.8607, aux_task4.loss_bbox: 0.3716, aux_task5.loss_heatmap: 1.0112, aux_task5.loss_bbox: 0.3662, loss: 21.2714, grad_norm: 46.5691
2025-05-04 19:24:29,340 - mmdet - INFO - Saving checkpoint at 2 epochs
2025-05-04 19:25:35,437 - mmdet - INFO - Epoch [3][50/2207]	lr: 2.932e-05, eta: 11:35:01, time: 1.112, data_time: 0.071, memory: 15902, loss_cls: 0.8393, loss_bbox: 1.1300, d0.loss_cls: 0.8511, d0.loss_bbox: 1.3628, d1.loss_cls: 0.8384, d1.loss_bbox: 1.2288, d2.loss_cls: 0.8356, d2.loss_bbox: 1.1637, d3.loss_cls: 0.8349, d3.loss_bbox: 1.1482, d4.loss_cls: 0.8367, d4.loss_bbox: 1.1347, aux_task0.loss_heatmap: 1.0333, aux_task0.loss_bbox: 0.3655, aux_task1.loss_heatmap: 1.2407, aux_task1.loss_bbox: 0.3916, aux_task2.loss_heatmap: 1.4027, aux_task2.loss_bbox: 0.4156, aux_task3.loss_heatmap: 1.1554, aux_task3.loss_bbox: 0.3362, aux_task4.loss_heatmap: 0.8262, aux_task4.loss_bbox: 0.3602, aux_task5.loss_heatmap: 1.0084, aux_task5.loss_bbox: 0.3603, loss: 21.1001, grad_norm: 45.9832
2025-05-04 19:26:27,983 - mmdet - INFO - Epoch [3][100/2207]	lr: 2.968e-05, eta: 11:34:09, time: 1.051, data_time: 0.006, memory: 15902, loss_cls: 0.8393, loss_bbox: 1.1172, d0.loss_cls: 0.8441, d0.loss_bbox: 1.3553, d1.loss_cls: 0.8370, d1.loss_bbox: 1.2151, d2.loss_cls: 0.8321, d2.loss_bbox: 1.1572, d3.loss_cls: 0.8340, d3.loss_bbox: 1.1392, d4.loss_cls: 0.8367, d4.loss_bbox: 1.1225, aux_task0.loss_heatmap: 1.0196, aux_task0.loss_bbox: 0.3665, aux_task1.loss_heatmap: 1.2169, aux_task1.loss_bbox: 0.3872, aux_task2.loss_heatmap: 1.3472, aux_task2.loss_bbox: 0.4252, aux_task3.loss_heatmap: 1.0616, aux_task3.loss_bbox: 0.3426, aux_task4.loss_heatmap: 0.8306, aux_task4.loss_bbox: 0.3593, aux_task5.loss_heatmap: 1.0221, aux_task5.loss_bbox: 0.3572, loss: 20.8656, grad_norm: 44.0641
2025-05-04 19:27:20,578 - mmdet - INFO - Epoch [3][150/2207]	lr: 3.004e-05, eta: 11:33:16, time: 1.052, data_time: 0.006, memory: 15902, loss_cls: 0.8235, loss_bbox: 1.0891, d0.loss_cls: 0.8300, d0.loss_bbox: 1.3373, d1.loss_cls: 0.8225, d1.loss_bbox: 1.1926, d2.loss_cls: 0.8163, d2.loss_bbox: 1.1295, d3.loss_cls: 0.8186, d3.loss_bbox: 1.1125, d4.loss_cls: 0.8223, d4.loss_bbox: 1.0948, aux_task0.loss_heatmap: 0.9599, aux_task0.loss_bbox: 0.3567, aux_task1.loss_heatmap: 1.2269, aux_task1.loss_bbox: 0.3853, aux_task2.loss_heatmap: 1.3186, aux_task2.loss_bbox: 0.4035, aux_task3.loss_heatmap: 1.1222, aux_task3.loss_bbox: 0.3333, aux_task4.loss_heatmap: 0.8025, aux_task4.loss_bbox: 0.3605, aux_task5.loss_heatmap: 1.0201, aux_task5.loss_bbox: 0.3652, loss: 20.5435, grad_norm: 44.6789
2025-05-04 19:28:12,753 - mmdet - INFO - Epoch [3][200/2207]	lr: 3.041e-05, eta: 11:32:21, time: 1.043, data_time: 0.006, memory: 15902, loss_cls: 0.8264, loss_bbox: 1.1145, d0.loss_cls: 0.8343, d0.loss_bbox: 1.3568, d1.loss_cls: 0.8293, d1.loss_bbox: 1.2213, d2.loss_cls: 0.8228, d2.loss_bbox: 1.1568, d3.loss_cls: 0.8230, d3.loss_bbox: 1.1397, d4.loss_cls: 0.8234, d4.loss_bbox: 1.1219, aux_task0.loss_heatmap: 1.0077, aux_task0.loss_bbox: 0.3595, aux_task1.loss_heatmap: 1.2447, aux_task1.loss_bbox: 0.3925, aux_task2.loss_heatmap: 1.3809, aux_task2.loss_bbox: 0.4204, aux_task3.loss_heatmap: 1.1116, aux_task3.loss_bbox: 0.3494, aux_task4.loss_heatmap: 0.8406, aux_task4.loss_bbox: 0.3645, aux_task5.loss_heatmap: 0.9918, aux_task5.loss_bbox: 0.3647, loss: 20.8985, grad_norm: 43.6721
2025-05-04 19:29:05,210 - mmdet - INFO - Epoch [3][250/2207]	lr: 3.078e-05, eta: 11:31:27, time: 1.049, data_time: 0.007, memory: 15902, loss_cls: 0.8165, loss_bbox: 1.0972, d0.loss_cls: 0.8198, d0.loss_bbox: 1.3448, d1.loss_cls: 0.8162, d1.loss_bbox: 1.2078, d2.loss_cls: 0.8118, d2.loss_bbox: 1.1399, d3.loss_cls: 0.8136, d3.loss_bbox: 1.1209, d4.loss_cls: 0.8150, d4.loss_bbox: 1.1028, aux_task0.loss_heatmap: 0.9825, aux_task0.loss_bbox: 0.3577, aux_task1.loss_heatmap: 1.1849, aux_task1.loss_bbox: 0.3884, aux_task2.loss_heatmap: 1.3286, aux_task2.loss_bbox: 0.4129, aux_task3.loss_heatmap: 1.1549, aux_task3.loss_bbox: 0.3432, aux_task4.loss_heatmap: 0.8479, aux_task4.loss_bbox: 0.3583, aux_task5.loss_heatmap: 0.9392, aux_task5.loss_bbox: 0.3522, loss: 20.5571, grad_norm: 43.5964
2025-05-04 19:29:57,406 - mmdet - INFO - Epoch [3][300/2207]	lr: 3.115e-05, eta: 11:30:32, time: 1.044, data_time: 0.006, memory: 15902, loss_cls: 0.8258, loss_bbox: 1.0907, d0.loss_cls: 0.8254, d0.loss_bbox: 1.3308, d1.loss_cls: 0.8205, d1.loss_bbox: 1.1986, d2.loss_cls: 0.8174, d2.loss_bbox: 1.1366, d3.loss_cls: 0.8231, d3.loss_bbox: 1.1156, d4.loss_cls: 0.8238, d4.loss_bbox: 1.0982, aux_task0.loss_heatmap: 0.9490, aux_task0.loss_bbox: 0.3510, aux_task1.loss_heatmap: 1.2203, aux_task1.loss_bbox: 0.3892, aux_task2.loss_heatmap: 1.3359, aux_task2.loss_bbox: 0.4178, aux_task3.loss_heatmap: 1.1181, aux_task3.loss_bbox: 0.3443, aux_task4.loss_heatmap: 0.8001, aux_task4.loss_bbox: 0.3507, aux_task5.loss_heatmap: 0.9761, aux_task5.loss_bbox: 0.3573, loss: 20.5163, grad_norm: 45.6092
2025-05-04 19:30:49,670 - mmdet - INFO - Epoch [3][350/2207]	lr: 3.152e-05, eta: 11:29:37, time: 1.045, data_time: 0.006, memory: 15902, loss_cls: 0.8089, loss_bbox: 1.0793, d0.loss_cls: 0.8134, d0.loss_bbox: 1.3323, d1.loss_cls: 0.8051, d1.loss_bbox: 1.1969, d2.loss_cls: 0.8030, d2.loss_bbox: 1.1307, d3.loss_cls: 0.8051, d3.loss_bbox: 1.1080, d4.loss_cls: 0.8064, d4.loss_bbox: 1.0875, aux_task0.loss_heatmap: 0.9281, aux_task0.loss_bbox: 0.3505, aux_task1.loss_heatmap: 1.1977, aux_task1.loss_bbox: 0.3868, aux_task2.loss_heatmap: 1.3290, aux_task2.loss_bbox: 0.4196, aux_task3.loss_heatmap: 1.0779, aux_task3.loss_bbox: 0.3319, aux_task4.loss_heatmap: 0.7947, aux_task4.loss_bbox: 0.3496, aux_task5.loss_heatmap: 1.0030, aux_task5.loss_bbox: 0.3660, loss: 20.3113, grad_norm: 43.4003
2025-05-04 19:31:41,803 - mmdet - INFO - Epoch [3][400/2207]	lr: 3.190e-05, eta: 11:28:41, time: 1.043, data_time: 0.006, memory: 15902, loss_cls: 0.8359, loss_bbox: 1.0885, d0.loss_cls: 0.8407, d0.loss_bbox: 1.3343, d1.loss_cls: 0.8308, d1.loss_bbox: 1.2037, d2.loss_cls: 0.8295, d2.loss_bbox: 1.1329, d3.loss_cls: 0.8314, d3.loss_bbox: 1.1120, d4.loss_cls: 0.8322, d4.loss_bbox: 1.0953, aux_task0.loss_heatmap: 0.9857, aux_task0.loss_bbox: 0.3601, aux_task1.loss_heatmap: 1.2033, aux_task1.loss_bbox: 0.3940, aux_task2.loss_heatmap: 1.3357, aux_task2.loss_bbox: 0.4160, aux_task3.loss_heatmap: 1.1380, aux_task3.loss_bbox: 0.3378, aux_task4.loss_heatmap: 0.7811, aux_task4.loss_bbox: 0.3520, aux_task5.loss_heatmap: 0.9900, aux_task5.loss_bbox: 0.3619, loss: 20.6230, grad_norm: 45.8856
2025-05-04 19:32:34,343 - mmdet - INFO - Epoch [3][450/2207]	lr: 3.228e-05, eta: 11:27:49, time: 1.051, data_time: 0.006, memory: 15902, loss_cls: 0.8080, loss_bbox: 1.0856, d0.loss_cls: 0.8181, d0.loss_bbox: 1.3152, d1.loss_cls: 0.8078, d1.loss_bbox: 1.1904, d2.loss_cls: 0.8034, d2.loss_bbox: 1.1298, d3.loss_cls: 0.8039, d3.loss_bbox: 1.1117, d4.loss_cls: 0.8050, d4.loss_bbox: 1.0927, aux_task0.loss_heatmap: 0.9613, aux_task0.loss_bbox: 0.3585, aux_task1.loss_heatmap: 1.1870, aux_task1.loss_bbox: 0.3935, aux_task2.loss_heatmap: 1.3067, aux_task2.loss_bbox: 0.4164, aux_task3.loss_heatmap: 1.0720, aux_task3.loss_bbox: 0.3365, aux_task4.loss_heatmap: 0.8227, aux_task4.loss_bbox: 0.3592, aux_task5.loss_heatmap: 0.9793, aux_task5.loss_bbox: 0.3599, loss: 20.3246, grad_norm: 44.8591
2025-05-04 19:33:26,520 - mmdet - INFO - Epoch [3][500/2207]	lr: 3.266e-05, eta: 11:26:53, time: 1.044, data_time: 0.007, memory: 15902, loss_cls: 0.8143, loss_bbox: 1.0815, d0.loss_cls: 0.8229, d0.loss_bbox: 1.3181, d1.loss_cls: 0.8163, d1.loss_bbox: 1.1871, d2.loss_cls: 0.8117, d2.loss_bbox: 1.1242, d3.loss_cls: 0.8130, d3.loss_bbox: 1.1022, d4.loss_cls: 0.8136, d4.loss_bbox: 1.0857, aux_task0.loss_heatmap: 0.9941, aux_task0.loss_bbox: 0.3647, aux_task1.loss_heatmap: 1.2019, aux_task1.loss_bbox: 0.3960, aux_task2.loss_heatmap: 1.3551, aux_task2.loss_bbox: 0.4242, aux_task3.loss_heatmap: 1.0994, aux_task3.loss_bbox: 0.3330, aux_task4.loss_heatmap: 0.8266, aux_task4.loss_bbox: 0.3577, aux_task5.loss_heatmap: 0.9497, aux_task5.loss_bbox: 0.3639, loss: 20.4568, grad_norm: 46.4163
2025-05-04 19:34:19,005 - mmdet - INFO - Epoch [3][550/2207]	lr: 3.304e-05, eta: 11:26:00, time: 1.050, data_time: 0.006, memory: 15902, loss_cls: 0.8010, loss_bbox: 1.0512, d0.loss_cls: 0.8141, d0.loss_bbox: 1.2993, d1.loss_cls: 0.8003, d1.loss_bbox: 1.1668, d2.loss_cls: 0.7981, d2.loss_bbox: 1.0994, d3.loss_cls: 0.7997, d3.loss_bbox: 1.0746, d4.loss_cls: 0.7990, d4.loss_bbox: 1.0589, aux_task0.loss_heatmap: 0.9323, aux_task0.loss_bbox: 0.3466, aux_task1.loss_heatmap: 1.1789, aux_task1.loss_bbox: 0.3821, aux_task2.loss_heatmap: 1.3438, aux_task2.loss_bbox: 0.4180, aux_task3.loss_heatmap: 1.0819, aux_task3.loss_bbox: 0.3347, aux_task4.loss_heatmap: 0.8085, aux_task4.loss_bbox: 0.3423, aux_task5.loss_heatmap: 0.9469, aux_task5.loss_bbox: 0.3537, loss: 20.0323, grad_norm: 43.5016
2025-05-04 19:35:11,432 - mmdet - INFO - Epoch [3][600/2207]	lr: 3.343e-05, eta: 11:25:07, time: 1.049, data_time: 0.007, memory: 15902, loss_cls: 0.8063, loss_bbox: 1.0926, d0.loss_cls: 0.8159, d0.loss_bbox: 1.3196, d1.loss_cls: 0.8066, d1.loss_bbox: 1.1865, d2.loss_cls: 0.8013, d2.loss_bbox: 1.1287, d3.loss_cls: 0.8020, d3.loss_bbox: 1.1104, d4.loss_cls: 0.8039, d4.loss_bbox: 1.0969, aux_task0.loss_heatmap: 0.9555, aux_task0.loss_bbox: 0.3530, aux_task1.loss_heatmap: 1.2106, aux_task1.loss_bbox: 0.3893, aux_task2.loss_heatmap: 1.2715, aux_task2.loss_bbox: 0.4143, aux_task3.loss_heatmap: 1.1259, aux_task3.loss_bbox: 0.3328, aux_task4.loss_heatmap: 0.8180, aux_task4.loss_bbox: 0.3511, aux_task5.loss_heatmap: 0.9516, aux_task5.loss_bbox: 0.3525, loss: 20.2968, grad_norm: 46.7947
2025-05-04 19:36:03,881 - mmdet - INFO - Epoch [3][650/2207]	lr: 3.382e-05, eta: 11:24:14, time: 1.049, data_time: 0.006, memory: 15902, loss_cls: 0.7969, loss_bbox: 1.0645, d0.loss_cls: 0.8111, d0.loss_bbox: 1.3056, d1.loss_cls: 0.7994, d1.loss_bbox: 1.1736, d2.loss_cls: 0.7934, d2.loss_bbox: 1.1093, d3.loss_cls: 0.7930, d3.loss_bbox: 1.0897, d4.loss_cls: 0.7936, d4.loss_bbox: 1.0721, aux_task0.loss_heatmap: 0.9590, aux_task0.loss_bbox: 0.3490, aux_task1.loss_heatmap: 1.2465, aux_task1.loss_bbox: 0.3917, aux_task2.loss_heatmap: 1.2968, aux_task2.loss_bbox: 0.4205, aux_task3.loss_heatmap: 1.0810, aux_task3.loss_bbox: 0.3310, aux_task4.loss_heatmap: 0.8135, aux_task4.loss_bbox: 0.3519, aux_task5.loss_heatmap: 0.9249, aux_task5.loss_bbox: 0.3501, loss: 20.1180, grad_norm: 44.4091
2025-05-04 19:36:56,521 - mmdet - INFO - Epoch [3][700/2207]	lr: 3.422e-05, eta: 11:23:22, time: 1.053, data_time: 0.007, memory: 15902, loss_cls: 0.8015, loss_bbox: 1.0799, d0.loss_cls: 0.8129, d0.loss_bbox: 1.3093, d1.loss_cls: 0.7984, d1.loss_bbox: 1.1759, d2.loss_cls: 0.7971, d2.loss_bbox: 1.1153, d3.loss_cls: 0.7969, d3.loss_bbox: 1.0976, d4.loss_cls: 0.7966, d4.loss_bbox: 1.0860, aux_task0.loss_heatmap: 0.9105, aux_task0.loss_bbox: 0.3495, aux_task1.loss_heatmap: 1.1852, aux_task1.loss_bbox: 0.3895, aux_task2.loss_heatmap: 1.3176, aux_task2.loss_bbox: 0.4083, aux_task3.loss_heatmap: 1.1023, aux_task3.loss_bbox: 0.3419, aux_task4.loss_heatmap: 0.8322, aux_task4.loss_bbox: 0.3553, aux_task5.loss_heatmap: 0.9314, aux_task5.loss_bbox: 0.3541, loss: 20.1451, grad_norm: 46.8835
2025-05-04 19:37:48,867 - mmdet - INFO - Epoch [3][750/2207]	lr: 3.461e-05, eta: 11:22:28, time: 1.047, data_time: 0.007, memory: 15902, loss_cls: 0.7987, loss_bbox: 1.0511, d0.loss_cls: 0.8090, d0.loss_bbox: 1.2871, d1.loss_cls: 0.7980, d1.loss_bbox: 1.1588, d2.loss_cls: 0.7932, d2.loss_bbox: 1.0932, d3.loss_cls: 0.7918, d3.loss_bbox: 1.0741, d4.loss_cls: 0.7958, d4.loss_bbox: 1.0568, aux_task0.loss_heatmap: 0.9347, aux_task0.loss_bbox: 0.3446, aux_task1.loss_heatmap: 1.1893, aux_task1.loss_bbox: 0.3829, aux_task2.loss_heatmap: 1.3112, aux_task2.loss_bbox: 0.4014, aux_task3.loss_heatmap: 1.0652, aux_task3.loss_bbox: 0.3323, aux_task4.loss_heatmap: 0.7662, aux_task4.loss_bbox: 0.3474, aux_task5.loss_heatmap: 0.9411, aux_task5.loss_bbox: 0.3504, loss: 19.8741, grad_norm: 45.5935
2025-05-04 19:38:41,493 - mmdet - INFO - Epoch [3][800/2207]	lr: 3.501e-05, eta: 11:21:36, time: 1.053, data_time: 0.006, memory: 15902, loss_cls: 0.7958, loss_bbox: 1.0499, d0.loss_cls: 0.7963, d0.loss_bbox: 1.2931, d1.loss_cls: 0.7890, d1.loss_bbox: 1.1564, d2.loss_cls: 0.7901, d2.loss_bbox: 1.0939, d3.loss_cls: 0.7944, d3.loss_bbox: 1.0705, d4.loss_cls: 0.7941, d4.loss_bbox: 1.0550, aux_task0.loss_heatmap: 0.9447, aux_task0.loss_bbox: 0.3524, aux_task1.loss_heatmap: 1.1593, aux_task1.loss_bbox: 0.3870, aux_task2.loss_heatmap: 1.3149, aux_task2.loss_bbox: 0.4093, aux_task3.loss_heatmap: 1.0185, aux_task3.loss_bbox: 0.3408, aux_task4.loss_heatmap: 0.7839, aux_task4.loss_bbox: 0.3488, aux_task5.loss_heatmap: 0.9160, aux_task5.loss_bbox: 0.3459, loss: 19.7999, grad_norm: 41.8912
2025-05-04 19:39:34,015 - mmdet - INFO - Epoch [3][850/2207]	lr: 3.541e-05, eta: 11:20:44, time: 1.050, data_time: 0.008, memory: 15902, loss_cls: 0.7812, loss_bbox: 1.0334, d0.loss_cls: 0.7893, d0.loss_bbox: 1.2692, d1.loss_cls: 0.7808, d1.loss_bbox: 1.1376, d2.loss_cls: 0.7774, d2.loss_bbox: 1.0759, d3.loss_cls: 0.7774, d3.loss_bbox: 1.0533, d4.loss_cls: 0.7800, d4.loss_bbox: 1.0381, aux_task0.loss_heatmap: 0.9260, aux_task0.loss_bbox: 0.3427, aux_task1.loss_heatmap: 1.1579, aux_task1.loss_bbox: 0.3836, aux_task2.loss_heatmap: 1.3152, aux_task2.loss_bbox: 0.4037, aux_task3.loss_heatmap: 1.0404, aux_task3.loss_bbox: 0.3247, aux_task4.loss_heatmap: 0.8083, aux_task4.loss_bbox: 0.3487, aux_task5.loss_heatmap: 0.9196, aux_task5.loss_bbox: 0.3466, loss: 19.6110, grad_norm: 42.9404
2025-05-04 19:40:26,597 - mmdet - INFO - Epoch [3][900/2207]	lr: 3.582e-05, eta: 11:19:51, time: 1.052, data_time: 0.006, memory: 15902, loss_cls: 0.7986, loss_bbox: 1.0509, d0.loss_cls: 0.8070, d0.loss_bbox: 1.2830, d1.loss_cls: 0.7938, d1.loss_bbox: 1.1564, d2.loss_cls: 0.7923, d2.loss_bbox: 1.0935, d3.loss_cls: 0.7937, d3.loss_bbox: 1.0714, d4.loss_cls: 0.7948, d4.loss_bbox: 1.0570, aux_task0.loss_heatmap: 0.9383, aux_task0.loss_bbox: 0.3495, aux_task1.loss_heatmap: 1.1621, aux_task1.loss_bbox: 0.3762, aux_task2.loss_heatmap: 1.2995, aux_task2.loss_bbox: 0.4154, aux_task3.loss_heatmap: 1.1100, aux_task3.loss_bbox: 0.3287, aux_task4.loss_heatmap: 0.8250, aux_task4.loss_bbox: 0.3516, aux_task5.loss_heatmap: 0.9210, aux_task5.loss_bbox: 0.3511, loss: 19.9206, grad_norm: 44.5108
2025-05-04 19:41:18,819 - mmdet - INFO - Epoch [3][950/2207]	lr: 3.623e-05, eta: 11:18:57, time: 1.044, data_time: 0.006, memory: 15902, loss_cls: 0.7878, loss_bbox: 1.0431, d0.loss_cls: 0.7989, d0.loss_bbox: 1.2735, d1.loss_cls: 0.7894, d1.loss_bbox: 1.1416, d2.loss_cls: 0.7847, d2.loss_bbox: 1.0824, d3.loss_cls: 0.7827, d3.loss_bbox: 1.0622, d4.loss_cls: 0.7852, d4.loss_bbox: 1.0488, aux_task0.loss_heatmap: 0.9155, aux_task0.loss_bbox: 0.3405, aux_task1.loss_heatmap: 1.2161, aux_task1.loss_bbox: 0.3796, aux_task2.loss_heatmap: 1.2479, aux_task2.loss_bbox: 0.3947, aux_task3.loss_heatmap: 1.1124, aux_task3.loss_bbox: 0.3286, aux_task4.loss_heatmap: 0.7820, aux_task4.loss_bbox: 0.3407, aux_task5.loss_heatmap: 0.9008, aux_task5.loss_bbox: 0.3479, loss: 19.6869, grad_norm: 43.6087
2025-05-04 19:42:11,168 - mmdet - INFO - Epoch [3][1000/2207]	lr: 3.663e-05, eta: 11:18:03, time: 1.047, data_time: 0.007, memory: 15902, loss_cls: 0.7858, loss_bbox: 1.0321, d0.loss_cls: 0.7991, d0.loss_bbox: 1.2559, d1.loss_cls: 0.7849, d1.loss_bbox: 1.1347, d2.loss_cls: 0.7784, d2.loss_bbox: 1.0760, d3.loss_cls: 0.7810, d3.loss_bbox: 1.0524, d4.loss_cls: 0.7813, d4.loss_bbox: 1.0366, aux_task0.loss_heatmap: 0.9466, aux_task0.loss_bbox: 0.3429, aux_task1.loss_heatmap: 1.1469, aux_task1.loss_bbox: 0.3761, aux_task2.loss_heatmap: 1.2489, aux_task2.loss_bbox: 0.4086, aux_task3.loss_heatmap: 1.0953, aux_task3.loss_bbox: 0.3213, aux_task4.loss_heatmap: 0.7896, aux_task4.loss_bbox: 0.3514, aux_task5.loss_heatmap: 0.9005, aux_task5.loss_bbox: 0.3491, loss: 19.5754, grad_norm: 41.0091
2025-05-04 19:43:03,546 - mmdet - INFO - Epoch [3][1050/2207]	lr: 3.705e-05, eta: 11:17:09, time: 1.048, data_time: 0.006, memory: 15902, loss_cls: 0.7807, loss_bbox: 1.0407, d0.loss_cls: 0.7920, d0.loss_bbox: 1.2817, d1.loss_cls: 0.7789, d1.loss_bbox: 1.1420, d2.loss_cls: 0.7730, d2.loss_bbox: 1.0839, d3.loss_cls: 0.7765, d3.loss_bbox: 1.0609, d4.loss_cls: 0.7775, d4.loss_bbox: 1.0470, aux_task0.loss_heatmap: 0.9319, aux_task0.loss_bbox: 0.3473, aux_task1.loss_heatmap: 1.1428, aux_task1.loss_bbox: 0.3828, aux_task2.loss_heatmap: 1.3023, aux_task2.loss_bbox: 0.4076, aux_task3.loss_heatmap: 1.0467, aux_task3.loss_bbox: 0.3254, aux_task4.loss_heatmap: 0.7834, aux_task4.loss_bbox: 0.3498, aux_task5.loss_heatmap: 0.9166, aux_task5.loss_bbox: 0.3476, loss: 19.6191, grad_norm: 43.8137
2025-05-04 19:43:55,777 - mmdet - INFO - Epoch [3][1100/2207]	lr: 3.746e-05, eta: 11:16:15, time: 1.045, data_time: 0.006, memory: 15902, loss_cls: 0.7848, loss_bbox: 1.0379, d0.loss_cls: 0.7919, d0.loss_bbox: 1.2754, d1.loss_cls: 0.7823, d1.loss_bbox: 1.1368, d2.loss_cls: 0.7758, d2.loss_bbox: 1.0767, d3.loss_cls: 0.7780, d3.loss_bbox: 1.0579, d4.loss_cls: 0.7818, d4.loss_bbox: 1.0425, aux_task0.loss_heatmap: 0.9411, aux_task0.loss_bbox: 0.3529, aux_task1.loss_heatmap: 1.1460, aux_task1.loss_bbox: 0.3834, aux_task2.loss_heatmap: 1.3064, aux_task2.loss_bbox: 0.4091, aux_task3.loss_heatmap: 1.0602, aux_task3.loss_bbox: 0.3375, aux_task4.loss_heatmap: 0.7559, aux_task4.loss_bbox: 0.3481, aux_task5.loss_heatmap: 0.9012, aux_task5.loss_bbox: 0.3452, loss: 19.6088, grad_norm: 41.7892
2025-05-04 19:44:47,905 - mmdet - INFO - Epoch [3][1150/2207]	lr: 3.788e-05, eta: 11:15:19, time: 1.043, data_time: 0.007, memory: 15902, loss_cls: 0.7909, loss_bbox: 1.0307, d0.loss_cls: 0.8005, d0.loss_bbox: 1.2583, d1.loss_cls: 0.7872, d1.loss_bbox: 1.1299, d2.loss_cls: 0.7830, d2.loss_bbox: 1.0717, d3.loss_cls: 0.7854, d3.loss_bbox: 1.0522, d4.loss_cls: 0.7881, d4.loss_bbox: 1.0361, aux_task0.loss_heatmap: 0.9583, aux_task0.loss_bbox: 0.3498, aux_task1.loss_heatmap: 1.1579, aux_task1.loss_bbox: 0.3818, aux_task2.loss_heatmap: 1.2981, aux_task2.loss_bbox: 0.4152, aux_task3.loss_heatmap: 1.0871, aux_task3.loss_bbox: 0.3331, aux_task4.loss_heatmap: 0.7458, aux_task4.loss_bbox: 0.3401, aux_task5.loss_heatmap: 0.8654, aux_task5.loss_bbox: 0.3468, loss: 19.5938, grad_norm: 45.8864
2025-05-04 19:45:42,188 - mmdet - INFO - Epoch [3][1200/2207]	lr: 3.830e-05, eta: 11:14:39, time: 1.086, data_time: 0.009, memory: 15902, loss_cls: 0.7760, loss_bbox: 1.0239, d0.loss_cls: 0.7899, d0.loss_bbox: 1.2528, d1.loss_cls: 0.7794, d1.loss_bbox: 1.1149, d2.loss_cls: 0.7734, d2.loss_bbox: 1.0581, d3.loss_cls: 0.7720, d3.loss_bbox: 1.0397, d4.loss_cls: 0.7745, d4.loss_bbox: 1.0276, aux_task0.loss_heatmap: 0.9175, aux_task0.loss_bbox: 0.3297, aux_task1.loss_heatmap: 1.1813, aux_task1.loss_bbox: 0.3813, aux_task2.loss_heatmap: 1.2747, aux_task2.loss_bbox: 0.4145, aux_task3.loss_heatmap: 1.0911, aux_task3.loss_bbox: 0.3358, aux_task4.loss_heatmap: 0.7408, aux_task4.loss_bbox: 0.3436, aux_task5.loss_heatmap: 0.8946, aux_task5.loss_bbox: 0.3487, loss: 19.4356, grad_norm: 42.3309
2025-05-04 19:46:34,771 - mmdet - INFO - Epoch [3][1250/2207]	lr: 3.872e-05, eta: 11:13:47, time: 1.052, data_time: 0.006, memory: 15902, loss_cls: 0.7757, loss_bbox: 1.0338, d0.loss_cls: 0.7890, d0.loss_bbox: 1.2532, d1.loss_cls: 0.7748, d1.loss_bbox: 1.1233, d2.loss_cls: 0.7720, d2.loss_bbox: 1.0671, d3.loss_cls: 0.7712, d3.loss_bbox: 1.0502, d4.loss_cls: 0.7745, d4.loss_bbox: 1.0382, aux_task0.loss_heatmap: 0.8951, aux_task0.loss_bbox: 0.3288, aux_task1.loss_heatmap: 1.0926, aux_task1.loss_bbox: 0.3753, aux_task2.loss_heatmap: 1.2773, aux_task2.loss_bbox: 0.4065, aux_task3.loss_heatmap: 1.0756, aux_task3.loss_bbox: 0.3332, aux_task4.loss_heatmap: 0.7926, aux_task4.loss_bbox: 0.3508, aux_task5.loss_heatmap: 0.8908, aux_task5.loss_bbox: 0.3460, loss: 19.3877, grad_norm: 47.6141
2025-05-04 19:47:26,985 - mmdet - INFO - Epoch [3][1300/2207]	lr: 3.914e-05, eta: 11:12:52, time: 1.044, data_time: 0.006, memory: 15902, loss_cls: 0.7692, loss_bbox: 1.0309, d0.loss_cls: 0.7875, d0.loss_bbox: 1.2658, d1.loss_cls: 0.7725, d1.loss_bbox: 1.1277, d2.loss_cls: 0.7651, d2.loss_bbox: 1.0694, d3.loss_cls: 0.7658, d3.loss_bbox: 1.0519, d4.loss_cls: 0.7660, d4.loss_bbox: 1.0373, aux_task0.loss_heatmap: 0.9345, aux_task0.loss_bbox: 0.3475, aux_task1.loss_heatmap: 1.1009, aux_task1.loss_bbox: 0.3865, aux_task2.loss_heatmap: 1.2820, aux_task2.loss_bbox: 0.4164, aux_task3.loss_heatmap: 1.0470, aux_task3.loss_bbox: 0.3312, aux_task4.loss_heatmap: 0.7867, aux_task4.loss_bbox: 0.3429, aux_task5.loss_heatmap: 0.8574, aux_task5.loss_bbox: 0.3430, loss: 19.3850, grad_norm: 42.5407
2025-05-04 19:48:19,589 - mmdet - INFO - Epoch [3][1350/2207]	lr: 3.957e-05, eta: 11:12:00, time: 1.052, data_time: 0.007, memory: 15902, loss_cls: 0.7600, loss_bbox: 1.0085, d0.loss_cls: 0.7712, d0.loss_bbox: 1.2348, d1.loss_cls: 0.7565, d1.loss_bbox: 1.1022, d2.loss_cls: 0.7532, d2.loss_bbox: 1.0445, d3.loss_cls: 0.7534, d3.loss_bbox: 1.0272, d4.loss_cls: 0.7568, d4.loss_bbox: 1.0125, aux_task0.loss_heatmap: 0.9039, aux_task0.loss_bbox: 0.3342, aux_task1.loss_heatmap: 1.1385, aux_task1.loss_bbox: 0.3832, aux_task2.loss_heatmap: 1.2653, aux_task2.loss_bbox: 0.4095, aux_task3.loss_heatmap: 1.0486, aux_task3.loss_bbox: 0.3253, aux_task4.loss_heatmap: 0.7575, aux_task4.loss_bbox: 0.3467, aux_task5.loss_heatmap: 0.8392, aux_task5.loss_bbox: 0.3422, loss: 19.0750, grad_norm: 43.3643
2025-05-04 19:49:11,978 - mmdet - INFO - Epoch [3][1400/2207]	lr: 4.000e-05, eta: 11:11:07, time: 1.048, data_time: 0.007, memory: 15902, loss_cls: 0.7643, loss_bbox: 1.0233, d0.loss_cls: 0.7790, d0.loss_bbox: 1.2418, d1.loss_cls: 0.7653, d1.loss_bbox: 1.1125, d2.loss_cls: 0.7600, d2.loss_bbox: 1.0573, d3.loss_cls: 0.7608, d3.loss_bbox: 1.0393, d4.loss_cls: 0.7617, d4.loss_bbox: 1.0265, aux_task0.loss_heatmap: 0.9193, aux_task0.loss_bbox: 0.3324, aux_task1.loss_heatmap: 1.1104, aux_task1.loss_bbox: 0.3719, aux_task2.loss_heatmap: 1.2596, aux_task2.loss_bbox: 0.4130, aux_task3.loss_heatmap: 1.0768, aux_task3.loss_bbox: 0.3216, aux_task4.loss_heatmap: 0.7684, aux_task4.loss_bbox: 0.3468, aux_task5.loss_heatmap: 0.8641, aux_task5.loss_bbox: 0.3394, loss: 19.2154, grad_norm: 43.7783
2025-05-04 19:50:04,486 - mmdet - INFO - Epoch [3][1450/2207]	lr: 4.043e-05, eta: 11:10:14, time: 1.050, data_time: 0.006, memory: 15902, loss_cls: 0.7656, loss_bbox: 1.0140, d0.loss_cls: 0.7774, d0.loss_bbox: 1.2432, d1.loss_cls: 0.7645, d1.loss_bbox: 1.1012, d2.loss_cls: 0.7598, d2.loss_bbox: 1.0468, d3.loss_cls: 0.7617, d3.loss_bbox: 1.0306, d4.loss_cls: 0.7622, d4.loss_bbox: 1.0179, aux_task0.loss_heatmap: 0.9121, aux_task0.loss_bbox: 0.3361, aux_task1.loss_heatmap: 1.1570, aux_task1.loss_bbox: 0.3760, aux_task2.loss_heatmap: 1.2496, aux_task2.loss_bbox: 0.4142, aux_task3.loss_heatmap: 1.0245, aux_task3.loss_bbox: 0.3188, aux_task4.loss_heatmap: 0.7639, aux_task4.loss_bbox: 0.3467, aux_task5.loss_heatmap: 0.8544, aux_task5.loss_bbox: 0.3435, loss: 19.1418, grad_norm: 43.6240
2025-05-04 19:50:56,773 - mmdet - INFO - Epoch [3][1500/2207]	lr: 4.087e-05, eta: 11:09:20, time: 1.046, data_time: 0.006, memory: 15902, loss_cls: 0.7563, loss_bbox: 1.0149, d0.loss_cls: 0.7734, d0.loss_bbox: 1.2506, d1.loss_cls: 0.7565, d1.loss_bbox: 1.1054, d2.loss_cls: 0.7524, d2.loss_bbox: 1.0538, d3.loss_cls: 0.7532, d3.loss_bbox: 1.0348, d4.loss_cls: 0.7536, d4.loss_bbox: 1.0211, aux_task0.loss_heatmap: 0.9273, aux_task0.loss_bbox: 0.3441, aux_task1.loss_heatmap: 1.1501, aux_task1.loss_bbox: 0.3823, aux_task2.loss_heatmap: 1.1921, aux_task2.loss_bbox: 0.4014, aux_task3.loss_heatmap: 1.0070, aux_task3.loss_bbox: 0.3284, aux_task4.loss_heatmap: 0.7481, aux_task4.loss_bbox: 0.3500, aux_task5.loss_heatmap: 0.8435, aux_task5.loss_bbox: 0.3479, loss: 19.0482, grad_norm: 41.8248
2025-05-04 19:51:48,913 - mmdet - INFO - Epoch [3][1550/2207]	lr: 4.130e-05, eta: 11:08:25, time: 1.043, data_time: 0.006, memory: 15902, loss_cls: 0.7636, loss_bbox: 1.0253, d0.loss_cls: 0.7831, d0.loss_bbox: 1.2427, d1.loss_cls: 0.7658, d1.loss_bbox: 1.1106, d2.loss_cls: 0.7584, d2.loss_bbox: 1.0579, d3.loss_cls: 0.7595, d3.loss_bbox: 1.0384, d4.loss_cls: 0.7600, d4.loss_bbox: 1.0283, aux_task0.loss_heatmap: 0.8914, aux_task0.loss_bbox: 0.3439, aux_task1.loss_heatmap: 1.1560, aux_task1.loss_bbox: 0.3807, aux_task2.loss_heatmap: 1.2770, aux_task2.loss_bbox: 0.4049, aux_task3.loss_heatmap: 1.0285, aux_task3.loss_bbox: 0.3312, aux_task4.loss_heatmap: 0.7540, aux_task4.loss_bbox: 0.3363, aux_task5.loss_heatmap: 0.8322, aux_task5.loss_bbox: 0.3410, loss: 19.1708, grad_norm: 41.3629
2025-05-04 19:52:41,210 - mmdet - INFO - Epoch [3][1600/2207]	lr: 4.174e-05, eta: 11:07:31, time: 1.046, data_time: 0.006, memory: 15902, loss_cls: 0.7516, loss_bbox: 1.0019, d0.loss_cls: 0.7680, d0.loss_bbox: 1.2215, d1.loss_cls: 0.7539, d1.loss_bbox: 1.0921, d2.loss_cls: 0.7488, d2.loss_bbox: 1.0384, d3.loss_cls: 0.7473, d3.loss_bbox: 1.0198, d4.loss_cls: 0.7493, d4.loss_bbox: 1.0069, aux_task0.loss_heatmap: 0.9209, aux_task0.loss_bbox: 0.3422, aux_task1.loss_heatmap: 1.1147, aux_task1.loss_bbox: 0.3717, aux_task2.loss_heatmap: 1.2473, aux_task2.loss_bbox: 0.3997, aux_task3.loss_heatmap: 1.0271, aux_task3.loss_bbox: 0.3320, aux_task4.loss_heatmap: 0.7684, aux_task4.loss_bbox: 0.3469, aux_task5.loss_heatmap: 0.7770, aux_task5.loss_bbox: 0.3335, loss: 18.8807, grad_norm: 40.6734
2025-05-04 19:53:33,601 - mmdet - INFO - Epoch [3][1650/2207]	lr: 4.218e-05, eta: 11:06:37, time: 1.048, data_time: 0.006, memory: 15902, loss_cls: 0.7506, loss_bbox: 1.0184, d0.loss_cls: 0.7625, d0.loss_bbox: 1.2450, d1.loss_cls: 0.7493, d1.loss_bbox: 1.1027, d2.loss_cls: 0.7435, d2.loss_bbox: 1.0515, d3.loss_cls: 0.7449, d3.loss_bbox: 1.0347, d4.loss_cls: 0.7479, d4.loss_bbox: 1.0234, aux_task0.loss_heatmap: 0.9123, aux_task0.loss_bbox: 0.3371, aux_task1.loss_heatmap: 1.1385, aux_task1.loss_bbox: 0.3852, aux_task2.loss_heatmap: 1.1878, aux_task2.loss_bbox: 0.4049, aux_task3.loss_heatmap: 1.0163, aux_task3.loss_bbox: 0.3211, aux_task4.loss_heatmap: 0.7759, aux_task4.loss_bbox: 0.3453, aux_task5.loss_heatmap: 0.8269, aux_task5.loss_bbox: 0.3356, loss: 18.9612, grad_norm: 44.9042
2025-05-04 19:54:25,891 - mmdet - INFO - Epoch [3][1700/2207]	lr: 4.262e-05, eta: 11:05:43, time: 1.046, data_time: 0.006, memory: 15902, loss_cls: 0.7575, loss_bbox: 1.0001, d0.loss_cls: 0.7638, d0.loss_bbox: 1.2275, d1.loss_cls: 0.7538, d1.loss_bbox: 1.0896, d2.loss_cls: 0.7526, d2.loss_bbox: 1.0361, d3.loss_cls: 0.7529, d3.loss_bbox: 1.0173, d4.loss_cls: 0.7544, d4.loss_bbox: 1.0067, aux_task0.loss_heatmap: 0.9124, aux_task0.loss_bbox: 0.3427, aux_task1.loss_heatmap: 1.1505, aux_task1.loss_bbox: 0.3836, aux_task2.loss_heatmap: 1.2715, aux_task2.loss_bbox: 0.4180, aux_task3.loss_heatmap: 1.0249, aux_task3.loss_bbox: 0.3232, aux_task4.loss_heatmap: 0.7255, aux_task4.loss_bbox: 0.3338, aux_task5.loss_heatmap: 0.8208, aux_task5.loss_bbox: 0.3402, loss: 18.9597, grad_norm: 41.5239
2025-05-04 19:55:18,283 - mmdet - INFO - Epoch [3][1750/2207]	lr: 4.307e-05, eta: 11:04:50, time: 1.048, data_time: 0.006, memory: 15902, loss_cls: 0.7423, loss_bbox: 1.0060, d0.loss_cls: 0.7644, d0.loss_bbox: 1.2269, d1.loss_cls: 0.7433, d1.loss_bbox: 1.0924, d2.loss_cls: 0.7390, d2.loss_bbox: 1.0385, d3.loss_cls: 0.7382, d3.loss_bbox: 1.0242, d4.loss_cls: 0.7394, d4.loss_bbox: 1.0108, aux_task0.loss_heatmap: 0.8995, aux_task0.loss_bbox: 0.3408, aux_task1.loss_heatmap: 1.1513, aux_task1.loss_bbox: 0.3766, aux_task2.loss_heatmap: 1.2461, aux_task2.loss_bbox: 0.4157, aux_task3.loss_heatmap: 0.9865, aux_task3.loss_bbox: 0.3286, aux_task4.loss_heatmap: 0.7635, aux_task4.loss_bbox: 0.3358, aux_task5.loss_heatmap: 0.7849, aux_task5.loss_bbox: 0.3413, loss: 18.8359, grad_norm: 42.3481
2025-05-04 19:56:10,821 - mmdet - INFO - Epoch [3][1800/2207]	lr: 4.351e-05, eta: 11:03:58, time: 1.051, data_time: 0.007, memory: 15902, loss_cls: 0.7544, loss_bbox: 1.0102, d0.loss_cls: 0.7690, d0.loss_bbox: 1.2214, d1.loss_cls: 0.7546, d1.loss_bbox: 1.0930, d2.loss_cls: 0.7508, d2.loss_bbox: 1.0427, d3.loss_cls: 0.7512, d3.loss_bbox: 1.0268, d4.loss_cls: 0.7519, d4.loss_bbox: 1.0151, aux_task0.loss_heatmap: 0.8738, aux_task0.loss_bbox: 0.3374, aux_task1.loss_heatmap: 1.1083, aux_task1.loss_bbox: 0.3735, aux_task2.loss_heatmap: 1.2225, aux_task2.loss_bbox: 0.4129, aux_task3.loss_heatmap: 1.0735, aux_task3.loss_bbox: 0.3387, aux_task4.loss_heatmap: 0.7642, aux_task4.loss_bbox: 0.3376, aux_task5.loss_heatmap: 0.8198, aux_task5.loss_bbox: 0.3384, loss: 18.9414, grad_norm: 45.4643
2025-05-04 19:57:03,408 - mmdet - INFO - Epoch [3][1850/2207]	lr: 4.396e-05, eta: 11:03:06, time: 1.052, data_time: 0.007, memory: 15902, loss_cls: 0.7482, loss_bbox: 1.0111, d0.loss_cls: 0.7701, d0.loss_bbox: 1.2270, d1.loss_cls: 0.7503, d1.loss_bbox: 1.0958, d2.loss_cls: 0.7443, d2.loss_bbox: 1.0438, d3.loss_cls: 0.7416, d3.loss_bbox: 1.0269, d4.loss_cls: 0.7459, d4.loss_bbox: 1.0158, aux_task0.loss_heatmap: 0.9146, aux_task0.loss_bbox: 0.3378, aux_task1.loss_heatmap: 1.1543, aux_task1.loss_bbox: 0.3824, aux_task2.loss_heatmap: 1.2068, aux_task2.loss_bbox: 0.4083, aux_task3.loss_heatmap: 1.0128, aux_task3.loss_bbox: 0.3249, aux_task4.loss_heatmap: 0.7182, aux_task4.loss_bbox: 0.3419, aux_task5.loss_heatmap: 0.7826, aux_task5.loss_bbox: 0.3361, loss: 18.8415, grad_norm: 40.6398
2025-05-04 19:57:55,739 - mmdet - INFO - Epoch [3][1900/2207]	lr: 4.441e-05, eta: 11:02:12, time: 1.047, data_time: 0.007, memory: 15902, loss_cls: 0.7320, loss_bbox: 1.0174, d0.loss_cls: 0.7516, d0.loss_bbox: 1.2402, d1.loss_cls: 0.7364, d1.loss_bbox: 1.1018, d2.loss_cls: 0.7297, d2.loss_bbox: 1.0506, d3.loss_cls: 0.7291, d3.loss_bbox: 1.0333, d4.loss_cls: 0.7301, d4.loss_bbox: 1.0211, aux_task0.loss_heatmap: 0.8729, aux_task0.loss_bbox: 0.3441, aux_task1.loss_heatmap: 1.1156, aux_task1.loss_bbox: 0.3828, aux_task2.loss_heatmap: 1.2350, aux_task2.loss_bbox: 0.4018, aux_task3.loss_heatmap: 1.0271, aux_task3.loss_bbox: 0.3316, aux_task4.loss_heatmap: 0.7466, aux_task4.loss_bbox: 0.3390, aux_task5.loss_heatmap: 0.7643, aux_task5.loss_bbox: 0.3407, loss: 18.7751, grad_norm: 40.9979
2025-05-04 19:58:48,258 - mmdet - INFO - Epoch [3][1950/2207]	lr: 4.486e-05, eta: 11:01:19, time: 1.050, data_time: 0.007, memory: 15902, loss_cls: 0.7333, loss_bbox: 0.9983, d0.loss_cls: 0.7504, d0.loss_bbox: 1.2105, d1.loss_cls: 0.7340, d1.loss_bbox: 1.0768, d2.loss_cls: 0.7269, d2.loss_bbox: 1.0286, d3.loss_cls: 0.7284, d3.loss_bbox: 1.0121, d4.loss_cls: 0.7328, d4.loss_bbox: 0.9998, aux_task0.loss_heatmap: 0.8905, aux_task0.loss_bbox: 0.3394, aux_task1.loss_heatmap: 1.1433, aux_task1.loss_bbox: 0.3791, aux_task2.loss_heatmap: 1.2466, aux_task2.loss_bbox: 0.4048, aux_task3.loss_heatmap: 0.9881, aux_task3.loss_bbox: 0.3268, aux_task4.loss_heatmap: 0.7200, aux_task4.loss_bbox: 0.3354, aux_task5.loss_heatmap: 0.7720, aux_task5.loss_bbox: 0.3378, loss: 18.6156, grad_norm: 44.0761
2025-05-04 19:59:42,494 - mmdet - INFO - Epoch [3][2000/2207]	lr: 4.532e-05, eta: 11:00:37, time: 1.085, data_time: 0.007, memory: 15902, loss_cls: 0.7363, loss_bbox: 0.9908, d0.loss_cls: 0.7470, d0.loss_bbox: 1.1989, d1.loss_cls: 0.7362, d1.loss_bbox: 1.0637, d2.loss_cls: 0.7265, d2.loss_bbox: 1.0175, d3.loss_cls: 0.7276, d3.loss_bbox: 1.0042, d4.loss_cls: 0.7337, d4.loss_bbox: 0.9930, aux_task0.loss_heatmap: 0.8813, aux_task0.loss_bbox: 0.3285, aux_task1.loss_heatmap: 1.1340, aux_task1.loss_bbox: 0.3769, aux_task2.loss_heatmap: 1.1606, aux_task2.loss_bbox: 0.4052, aux_task3.loss_heatmap: 0.9908, aux_task3.loss_bbox: 0.3286, aux_task4.loss_heatmap: 0.7260, aux_task4.loss_bbox: 0.3388, aux_task5.loss_heatmap: 0.7338, aux_task5.loss_bbox: 0.3366, loss: 18.4162, grad_norm: 43.6955
2025-05-04 20:00:34,799 - mmdet - INFO - Epoch [3][2050/2207]	lr: 4.577e-05, eta: 10:59:43, time: 1.046, data_time: 0.007, memory: 15902, loss_cls: 0.7378, loss_bbox: 0.9808, d0.loss_cls: 0.7527, d0.loss_bbox: 1.1951, d1.loss_cls: 0.7351, d1.loss_bbox: 1.0624, d2.loss_cls: 0.7296, d2.loss_bbox: 1.0130, d3.loss_cls: 0.7306, d3.loss_bbox: 0.9955, d4.loss_cls: 0.7337, d4.loss_bbox: 0.9840, aux_task0.loss_heatmap: 0.8747, aux_task0.loss_bbox: 0.3329, aux_task1.loss_heatmap: 1.1177, aux_task1.loss_bbox: 0.3735, aux_task2.loss_heatmap: 1.1722, aux_task2.loss_bbox: 0.3963, aux_task3.loss_heatmap: 0.9844, aux_task3.loss_bbox: 0.3206, aux_task4.loss_heatmap: 0.7333, aux_task4.loss_bbox: 0.3364, aux_task5.loss_heatmap: 0.7912, aux_task5.loss_bbox: 0.3364, loss: 18.4199, grad_norm: 40.1176
2025-05-04 20:01:27,067 - mmdet - INFO - Epoch [3][2100/2207]	lr: 4.623e-05, eta: 10:58:49, time: 1.045, data_time: 0.006, memory: 15902, loss_cls: 0.7403, loss_bbox: 1.0074, d0.loss_cls: 0.7546, d0.loss_bbox: 1.2187, d1.loss_cls: 0.7411, d1.loss_bbox: 1.0856, d2.loss_cls: 0.7362, d2.loss_bbox: 1.0371, d3.loss_cls: 0.7362, d3.loss_bbox: 1.0232, d4.loss_cls: 0.7378, d4.loss_bbox: 1.0120, aux_task0.loss_heatmap: 0.8928, aux_task0.loss_bbox: 0.3377, aux_task1.loss_heatmap: 1.1173, aux_task1.loss_bbox: 0.3847, aux_task2.loss_heatmap: 1.1567, aux_task2.loss_bbox: 0.3936, aux_task3.loss_heatmap: 1.0293, aux_task3.loss_bbox: 0.3272, aux_task4.loss_heatmap: 0.7567, aux_task4.loss_bbox: 0.3434, aux_task5.loss_heatmap: 0.7512, aux_task5.loss_bbox: 0.3368, loss: 18.6576, grad_norm: 43.2819
2025-05-04 20:02:19,580 - mmdet - INFO - Epoch [3][2150/2207]	lr: 4.669e-05, eta: 10:57:56, time: 1.050, data_time: 0.006, memory: 15902, loss_cls: 0.7384, loss_bbox: 0.9976, d0.loss_cls: 0.7516, d0.loss_bbox: 1.2124, d1.loss_cls: 0.7371, d1.loss_bbox: 1.0725, d2.loss_cls: 0.7305, d2.loss_bbox: 1.0271, d3.loss_cls: 0.7335, d3.loss_bbox: 1.0106, d4.loss_cls: 0.7339, d4.loss_bbox: 1.0020, aux_task0.loss_heatmap: 0.9078, aux_task0.loss_bbox: 0.3470, aux_task1.loss_heatmap: 1.1005, aux_task1.loss_bbox: 0.3753, aux_task2.loss_heatmap: 1.2262, aux_task2.loss_bbox: 0.4099, aux_task3.loss_heatmap: 0.9972, aux_task3.loss_bbox: 0.3226, aux_task4.loss_heatmap: 0.7217, aux_task4.loss_bbox: 0.3396, aux_task5.loss_heatmap: 0.7789, aux_task5.loss_bbox: 0.3367, loss: 18.6106, grad_norm: 43.9066
2025-05-04 20:03:11,918 - mmdet - INFO - Epoch [3][2200/2207]	lr: 4.715e-05, eta: 10:57:03, time: 1.047, data_time: 0.006, memory: 15902, loss_cls: 0.7286, loss_bbox: 1.0089, d0.loss_cls: 0.7440, d0.loss_bbox: 1.2210, d1.loss_cls: 0.7316, d1.loss_bbox: 1.0845, d2.loss_cls: 0.7272, d2.loss_bbox: 1.0370, d3.loss_cls: 0.7285, d3.loss_bbox: 1.0195, d4.loss_cls: 0.7285, d4.loss_bbox: 1.0096, aux_task0.loss_heatmap: 0.8708, aux_task0.loss_bbox: 0.3412, aux_task1.loss_heatmap: 1.1272, aux_task1.loss_bbox: 0.3827, aux_task2.loss_heatmap: 1.1740, aux_task2.loss_bbox: 0.4100, aux_task3.loss_heatmap: 0.9659, aux_task3.loss_bbox: 0.3254, aux_task4.loss_heatmap: 0.7417, aux_task4.loss_bbox: 0.3474, aux_task5.loss_heatmap: 0.7554, aux_task5.loss_bbox: 0.3370, loss: 18.5475, grad_norm: 39.4488
2025-05-04 20:03:19,488 - mmdet - INFO - Saving checkpoint at 3 epochs
2025-05-04 20:04:25,889 - mmdet - INFO - Epoch [4][50/2207]	lr: 4.768e-05, eta: 10:55:40, time: 1.116, data_time: 0.071, memory: 15902, loss_cls: 0.7333, loss_bbox: 0.9885, d0.loss_cls: 0.7465, d0.loss_bbox: 1.1937, d1.loss_cls: 0.7335, d1.loss_bbox: 1.0583, d2.loss_cls: 0.7278, d2.loss_bbox: 1.0124, d3.loss_cls: 0.7287, d3.loss_bbox: 0.9997, d4.loss_cls: 0.7310, d4.loss_bbox: 0.9913, aux_task0.loss_heatmap: 0.8995, aux_task0.loss_bbox: 0.3359, aux_task1.loss_heatmap: 1.1102, aux_task1.loss_bbox: 0.3766, aux_task2.loss_heatmap: 1.2515, aux_task2.loss_bbox: 0.3981, aux_task3.loss_heatmap: 0.9292, aux_task3.loss_bbox: 0.3221, aux_task4.loss_heatmap: 0.7337, aux_task4.loss_bbox: 0.3389, aux_task5.loss_heatmap: 0.7582, aux_task5.loss_bbox: 0.3382, loss: 18.4369, grad_norm: 39.5505
2025-05-04 20:05:18,302 - mmdet - INFO - Epoch [4][100/2207]	lr: 4.814e-05, eta: 10:54:47, time: 1.048, data_time: 0.006, memory: 15902, loss_cls: 0.7242, loss_bbox: 0.9847, d0.loss_cls: 0.7395, d0.loss_bbox: 1.1862, d1.loss_cls: 0.7257, d1.loss_bbox: 1.0556, d2.loss_cls: 0.7211, d2.loss_bbox: 1.0129, d3.loss_cls: 0.7222, d3.loss_bbox: 0.9974, d4.loss_cls: 0.7233, d4.loss_bbox: 0.9864, aux_task0.loss_heatmap: 0.8398, aux_task0.loss_bbox: 0.3339, aux_task1.loss_heatmap: 1.0973, aux_task1.loss_bbox: 0.3686, aux_task2.loss_heatmap: 1.1666, aux_task2.loss_bbox: 0.4091, aux_task3.loss_heatmap: 0.9410, aux_task3.loss_bbox: 0.3236, aux_task4.loss_heatmap: 0.7402, aux_task4.loss_bbox: 0.3380, aux_task5.loss_heatmap: 0.7356, aux_task5.loss_bbox: 0.3335, loss: 18.2064, grad_norm: 43.9620
2025-05-04 20:06:10,911 - mmdet - INFO - Epoch [4][150/2207]	lr: 4.861e-05, eta: 10:53:55, time: 1.052, data_time: 0.006, memory: 15902, loss_cls: 0.7229, loss_bbox: 0.9794, d0.loss_cls: 0.7402, d0.loss_bbox: 1.1862, d1.loss_cls: 0.7239, d1.loss_bbox: 1.0608, d2.loss_cls: 0.7202, d2.loss_bbox: 1.0101, d3.loss_cls: 0.7192, d3.loss_bbox: 0.9945, d4.loss_cls: 0.7218, d4.loss_bbox: 0.9826, aux_task0.loss_heatmap: 0.8568, aux_task0.loss_bbox: 0.3307, aux_task1.loss_heatmap: 1.1314, aux_task1.loss_bbox: 0.3753, aux_task2.loss_heatmap: 1.1103, aux_task2.loss_bbox: 0.3844, aux_task3.loss_heatmap: 1.0040, aux_task3.loss_bbox: 0.3245, aux_task4.loss_heatmap: 0.7054, aux_task4.loss_bbox: 0.3388, aux_task5.loss_heatmap: 0.7614, aux_task5.loss_bbox: 0.3368, loss: 18.2218, grad_norm: 43.1076
2025-05-04 20:07:03,023 - mmdet - INFO - Epoch [4][200/2207]	lr: 4.908e-05, eta: 10:53:00, time: 1.042, data_time: 0.006, memory: 15902, loss_cls: 0.7207, loss_bbox: 0.9845, d0.loss_cls: 0.7363, d0.loss_bbox: 1.1792, d1.loss_cls: 0.7210, d1.loss_bbox: 1.0532, d2.loss_cls: 0.7145, d2.loss_bbox: 1.0095, d3.loss_cls: 0.7156, d3.loss_bbox: 0.9948, d4.loss_cls: 0.7163, d4.loss_bbox: 0.9864, aux_task0.loss_heatmap: 0.8249, aux_task0.loss_bbox: 0.3277, aux_task1.loss_heatmap: 1.1431, aux_task1.loss_bbox: 0.3816, aux_task2.loss_heatmap: 1.1889, aux_task2.loss_bbox: 0.4027, aux_task3.loss_heatmap: 0.9896, aux_task3.loss_bbox: 0.3271, aux_task4.loss_heatmap: 0.7225, aux_task4.loss_bbox: 0.3434, aux_task5.loss_heatmap: 0.7142, aux_task5.loss_bbox: 0.3245, loss: 18.2221, grad_norm: 43.2369
2025-05-04 20:07:55,398 - mmdet - INFO - Epoch [4][250/2207]	lr: 4.955e-05, eta: 10:52:07, time: 1.047, data_time: 0.006, memory: 15902, loss_cls: 0.7275, loss_bbox: 0.9850, d0.loss_cls: 0.7351, d0.loss_bbox: 1.1908, d1.loss_cls: 0.7228, d1.loss_bbox: 1.0590, d2.loss_cls: 0.7179, d2.loss_bbox: 1.0112, d3.loss_cls: 0.7179, d3.loss_bbox: 0.9971, d4.loss_cls: 0.7247, d4.loss_bbox: 0.9876, aux_task0.loss_heatmap: 0.8442, aux_task0.loss_bbox: 0.3295, aux_task1.loss_heatmap: 1.0733, aux_task1.loss_bbox: 0.3752, aux_task2.loss_heatmap: 1.1698, aux_task2.loss_bbox: 0.3949, aux_task3.loss_heatmap: 1.0137, aux_task3.loss_bbox: 0.3288, aux_task4.loss_heatmap: 0.7117, aux_task4.loss_bbox: 0.3400, aux_task5.loss_heatmap: 0.7445, aux_task5.loss_bbox: 0.3355, loss: 18.2377, grad_norm: 39.9016
2025-05-04 20:08:47,549 - mmdet - INFO - Epoch [4][300/2207]	lr: 5.002e-05, eta: 10:51:13, time: 1.043, data_time: 0.006, memory: 15902, loss_cls: 0.7156, loss_bbox: 0.9755, d0.loss_cls: 0.7305, d0.loss_bbox: 1.1829, d1.loss_cls: 0.7200, d1.loss_bbox: 1.0422, d2.loss_cls: 0.7146, d2.loss_bbox: 0.9980, d3.loss_cls: 0.7127, d3.loss_bbox: 0.9863, d4.loss_cls: 0.7151, d4.loss_bbox: 0.9784, aux_task0.loss_heatmap: 0.8653, aux_task0.loss_bbox: 0.3360, aux_task1.loss_heatmap: 1.1166, aux_task1.loss_bbox: 0.3770, aux_task2.loss_heatmap: 1.1468, aux_task2.loss_bbox: 0.4037, aux_task3.loss_heatmap: 1.0114, aux_task3.loss_bbox: 0.3286, aux_task4.loss_heatmap: 0.6971, aux_task4.loss_bbox: 0.3341, aux_task5.loss_heatmap: 0.7134, aux_task5.loss_bbox: 0.3318, loss: 18.1335, grad_norm: 41.8850
2025-05-04 20:09:39,817 - mmdet - INFO - Epoch [4][350/2207]	lr: 5.049e-05, eta: 10:50:19, time: 1.045, data_time: 0.006, memory: 15902, loss_cls: 0.7074, loss_bbox: 0.9746, d0.loss_cls: 0.7240, d0.loss_bbox: 1.1781, d1.loss_cls: 0.7070, d1.loss_bbox: 1.0464, d2.loss_cls: 0.7048, d2.loss_bbox: 0.9993, d3.loss_cls: 0.7041, d3.loss_bbox: 0.9847, d4.loss_cls: 0.7057, d4.loss_bbox: 0.9762, aux_task0.loss_heatmap: 0.8446, aux_task0.loss_bbox: 0.3297, aux_task1.loss_heatmap: 1.0721, aux_task1.loss_bbox: 0.3733, aux_task2.loss_heatmap: 1.1378, aux_task2.loss_bbox: 0.3955, aux_task3.loss_heatmap: 0.9610, aux_task3.loss_bbox: 0.3278, aux_task4.loss_heatmap: 0.7075, aux_task4.loss_bbox: 0.3310, aux_task5.loss_heatmap: 0.7228, aux_task5.loss_bbox: 0.3382, loss: 17.9538, grad_norm: 45.2141
2025-05-04 20:10:32,196 - mmdet - INFO - Epoch [4][400/2207]	lr: 5.096e-05, eta: 10:49:26, time: 1.048, data_time: 0.007, memory: 15902, loss_cls: 0.7141, loss_bbox: 0.9820, d0.loss_cls: 0.7293, d0.loss_bbox: 1.1870, d1.loss_cls: 0.7137, d1.loss_bbox: 1.0547, d2.loss_cls: 0.7116, d2.loss_bbox: 1.0061, d3.loss_cls: 0.7134, d3.loss_bbox: 0.9915, d4.loss_cls: 0.7123, d4.loss_bbox: 0.9844, aux_task0.loss_heatmap: 0.8526, aux_task0.loss_bbox: 0.3382, aux_task1.loss_heatmap: 1.0939, aux_task1.loss_bbox: 0.3768, aux_task2.loss_heatmap: 1.1467, aux_task2.loss_bbox: 0.3967, aux_task3.loss_heatmap: 0.9303, aux_task3.loss_bbox: 0.3291, aux_task4.loss_heatmap: 0.6925, aux_task4.loss_bbox: 0.3383, aux_task5.loss_heatmap: 0.7291, aux_task5.loss_bbox: 0.3369, loss: 18.0614, grad_norm: 41.1505
2025-05-04 20:11:24,646 - mmdet - INFO - Epoch [4][450/2207]	lr: 5.144e-05, eta: 10:48:33, time: 1.049, data_time: 0.007, memory: 15902, loss_cls: 0.7012, loss_bbox: 0.9555, d0.loss_cls: 0.7126, d0.loss_bbox: 1.1656, d1.loss_cls: 0.6983, d1.loss_bbox: 1.0282, d2.loss_cls: 0.6928, d2.loss_bbox: 0.9829, d3.loss_cls: 0.6967, d3.loss_bbox: 0.9674, d4.loss_cls: 0.6982, d4.loss_bbox: 0.9584, aux_task0.loss_heatmap: 0.8208, aux_task0.loss_bbox: 0.3263, aux_task1.loss_heatmap: 1.0564, aux_task1.loss_bbox: 0.3710, aux_task2.loss_heatmap: 1.1331, aux_task2.loss_bbox: 0.3898, aux_task3.loss_heatmap: 0.9144, aux_task3.loss_bbox: 0.3146, aux_task4.loss_heatmap: 0.7121, aux_task4.loss_bbox: 0.3359, aux_task5.loss_heatmap: 0.7468, aux_task5.loss_bbox: 0.3399, loss: 17.7191, grad_norm: 40.2191
2025-05-04 20:12:16,868 - mmdet - INFO - Epoch [4][500/2207]	lr: 5.192e-05, eta: 10:47:40, time: 1.044, data_time: 0.007, memory: 15902, loss_cls: 0.7103, loss_bbox: 0.9638, d0.loss_cls: 0.7156, d0.loss_bbox: 1.1702, d1.loss_cls: 0.7047, d1.loss_bbox: 1.0361, d2.loss_cls: 0.7013, d2.loss_bbox: 0.9903, d3.loss_cls: 0.7026, d3.loss_bbox: 0.9756, d4.loss_cls: 0.7061, d4.loss_bbox: 0.9670, aux_task0.loss_heatmap: 0.8303, aux_task0.loss_bbox: 0.3267, aux_task1.loss_heatmap: 1.0942, aux_task1.loss_bbox: 0.3811, aux_task2.loss_heatmap: 1.1858, aux_task2.loss_bbox: 0.4014, aux_task3.loss_heatmap: 0.9372, aux_task3.loss_bbox: 0.3203, aux_task4.loss_heatmap: 0.7231, aux_task4.loss_bbox: 0.3351, aux_task5.loss_heatmap: 0.7226, aux_task5.loss_bbox: 0.3309, loss: 17.9322, grad_norm: 41.7742
2025-05-04 20:13:09,346 - mmdet - INFO - Epoch [4][550/2207]	lr: 5.240e-05, eta: 10:46:47, time: 1.050, data_time: 0.006, memory: 15902, loss_cls: 0.6957, loss_bbox: 0.9568, d0.loss_cls: 0.7124, d0.loss_bbox: 1.1479, d1.loss_cls: 0.6970, d1.loss_bbox: 1.0208, d2.loss_cls: 0.6928, d2.loss_bbox: 0.9781, d3.loss_cls: 0.6925, d3.loss_bbox: 0.9648, d4.loss_cls: 0.6940, d4.loss_bbox: 0.9590, aux_task0.loss_heatmap: 0.8422, aux_task0.loss_bbox: 0.3306, aux_task1.loss_heatmap: 1.0673, aux_task1.loss_bbox: 0.3701, aux_task2.loss_heatmap: 1.1800, aux_task2.loss_bbox: 0.4111, aux_task3.loss_heatmap: 0.8763, aux_task3.loss_bbox: 0.3172, aux_task4.loss_heatmap: 0.7113, aux_task4.loss_bbox: 0.3247, aux_task5.loss_heatmap: 0.7015, aux_task5.loss_bbox: 0.3306, loss: 17.6748, grad_norm: 39.3927
2025-05-04 20:14:01,960 - mmdet - INFO - Epoch [4][600/2207]	lr: 5.287e-05, eta: 10:45:55, time: 1.052, data_time: 0.006, memory: 15902, loss_cls: 0.7022, loss_bbox: 0.9743, d0.loss_cls: 0.7134, d0.loss_bbox: 1.1735, d1.loss_cls: 0.7030, d1.loss_bbox: 1.0402, d2.loss_cls: 0.6994, d2.loss_bbox: 0.9964, d3.loss_cls: 0.6978, d3.loss_bbox: 0.9825, d4.loss_cls: 0.6994, d4.loss_bbox: 0.9751, aux_task0.loss_heatmap: 0.8504, aux_task0.loss_bbox: 0.3319, aux_task1.loss_heatmap: 1.1040, aux_task1.loss_bbox: 0.3792, aux_task2.loss_heatmap: 1.0696, aux_task2.loss_bbox: 0.3989, aux_task3.loss_heatmap: 0.9490, aux_task3.loss_bbox: 0.3258, aux_task4.loss_heatmap: 0.7098, aux_task4.loss_bbox: 0.3327, aux_task5.loss_heatmap: 0.7380, aux_task5.loss_bbox: 0.3315, loss: 17.8781, grad_norm: 42.2850
2025-05-04 20:14:54,408 - mmdet - INFO - Epoch [4][650/2207]	lr: 5.336e-05, eta: 10:45:02, time: 1.049, data_time: 0.007, memory: 15902, loss_cls: 0.7146, loss_bbox: 0.9776, d0.loss_cls: 0.7303, d0.loss_bbox: 1.1713, d1.loss_cls: 0.7173, d1.loss_bbox: 1.0424, d2.loss_cls: 0.7132, d2.loss_bbox: 1.0024, d3.loss_cls: 0.7113, d3.loss_bbox: 0.9904, d4.loss_cls: 0.7132, d4.loss_bbox: 0.9813, aux_task0.loss_heatmap: 0.8680, aux_task0.loss_bbox: 0.3260, aux_task1.loss_heatmap: 1.1319, aux_task1.loss_bbox: 0.3804, aux_task2.loss_heatmap: 1.1607, aux_task2.loss_bbox: 0.4053, aux_task3.loss_heatmap: 0.9568, aux_task3.loss_bbox: 0.3276, aux_task4.loss_heatmap: 0.7192, aux_task4.loss_bbox: 0.3359, aux_task5.loss_heatmap: 0.7132, aux_task5.loss_bbox: 0.3311, loss: 18.1214, grad_norm: 38.8788
2025-05-04 20:15:46,620 - mmdet - INFO - Epoch [4][700/2207]	lr: 5.384e-05, eta: 10:44:09, time: 1.044, data_time: 0.006, memory: 15902, loss_cls: 0.6981, loss_bbox: 0.9605, d0.loss_cls: 0.7161, d0.loss_bbox: 1.1566, d1.loss_cls: 0.7032, d1.loss_bbox: 1.0230, d2.loss_cls: 0.6992, d2.loss_bbox: 0.9813, d3.loss_cls: 0.6971, d3.loss_bbox: 0.9707, d4.loss_cls: 0.6960, d4.loss_bbox: 0.9636, aux_task0.loss_heatmap: 0.8525, aux_task0.loss_bbox: 0.3281, aux_task1.loss_heatmap: 1.0690, aux_task1.loss_bbox: 0.3736, aux_task2.loss_heatmap: 1.1802, aux_task2.loss_bbox: 0.3965, aux_task3.loss_heatmap: 0.9282, aux_task3.loss_bbox: 0.3211, aux_task4.loss_heatmap: 0.7030, aux_task4.loss_bbox: 0.3362, aux_task5.loss_heatmap: 0.6905, aux_task5.loss_bbox: 0.3294, loss: 17.7737, grad_norm: 42.7545
2025-05-04 20:16:39,014 - mmdet - INFO - Epoch [4][750/2207]	lr: 5.432e-05, eta: 10:43:16, time: 1.048, data_time: 0.007, memory: 15902, loss_cls: 0.6894, loss_bbox: 0.9616, d0.loss_cls: 0.7087, d0.loss_bbox: 1.1526, d1.loss_cls: 0.6924, d1.loss_bbox: 1.0275, d2.loss_cls: 0.6869, d2.loss_bbox: 0.9853, d3.loss_cls: 0.6875, d3.loss_bbox: 0.9704, d4.loss_cls: 0.6880, d4.loss_bbox: 0.9637, aux_task0.loss_heatmap: 0.8359, aux_task0.loss_bbox: 0.3320, aux_task1.loss_heatmap: 1.0790, aux_task1.loss_bbox: 0.3747, aux_task2.loss_heatmap: 1.1539, aux_task2.loss_bbox: 0.3876, aux_task3.loss_heatmap: 0.8987, aux_task3.loss_bbox: 0.3203, aux_task4.loss_heatmap: 0.6872, aux_task4.loss_bbox: 0.3388, aux_task5.loss_heatmap: 0.6986, aux_task5.loss_bbox: 0.3321, loss: 17.6527, grad_norm: 39.6747
2025-05-04 20:17:31,582 - mmdet - INFO - Epoch [4][800/2207]	lr: 5.480e-05, eta: 10:42:24, time: 1.051, data_time: 0.005, memory: 15902, loss_cls: 0.6867, loss_bbox: 0.9613, d0.loss_cls: 0.7002, d0.loss_bbox: 1.1525, d1.loss_cls: 0.6857, d1.loss_bbox: 1.0260, d2.loss_cls: 0.6803, d2.loss_bbox: 0.9875, d3.loss_cls: 0.6799, d3.loss_bbox: 0.9726, d4.loss_cls: 0.6841, d4.loss_bbox: 0.9641, aux_task0.loss_heatmap: 0.8316, aux_task0.loss_bbox: 0.3300, aux_task1.loss_heatmap: 1.0354, aux_task1.loss_bbox: 0.3699, aux_task2.loss_heatmap: 1.1725, aux_task2.loss_bbox: 0.3955, aux_task3.loss_heatmap: 0.8859, aux_task3.loss_bbox: 0.3272, aux_task4.loss_heatmap: 0.6770, aux_task4.loss_bbox: 0.3319, aux_task5.loss_heatmap: 0.7056, aux_task5.loss_bbox: 0.3255, loss: 17.5688, grad_norm: 41.3444
2025-05-04 20:18:23,997 - mmdet - INFO - Epoch [4][850/2207]	lr: 5.529e-05, eta: 10:41:31, time: 1.048, data_time: 0.006, memory: 15902, loss_cls: 0.6856, loss_bbox: 0.9572, d0.loss_cls: 0.6981, d0.loss_bbox: 1.1470, d1.loss_cls: 0.6840, d1.loss_bbox: 1.0214, d2.loss_cls: 0.6807, d2.loss_bbox: 0.9801, d3.loss_cls: 0.6804, d3.loss_bbox: 0.9672, d4.loss_cls: 0.6833, d4.loss_bbox: 0.9601, aux_task0.loss_heatmap: 0.8102, aux_task0.loss_bbox: 0.3289, aux_task1.loss_heatmap: 1.0553, aux_task1.loss_bbox: 0.3710, aux_task2.loss_heatmap: 1.1427, aux_task2.loss_bbox: 0.3952, aux_task3.loss_heatmap: 0.9287, aux_task3.loss_bbox: 0.3195, aux_task4.loss_heatmap: 0.6997, aux_task4.loss_bbox: 0.3292, aux_task5.loss_heatmap: 0.6853, aux_task5.loss_bbox: 0.3324, loss: 17.5434, grad_norm: 40.4621
2025-05-04 20:19:16,474 - mmdet - INFO - Epoch [4][900/2207]	lr: 5.578e-05, eta: 10:40:38, time: 1.050, data_time: 0.007, memory: 15902, loss_cls: 0.7015, loss_bbox: 0.9618, d0.loss_cls: 0.7188, d0.loss_bbox: 1.1523, d1.loss_cls: 0.7042, d1.loss_bbox: 1.0242, d2.loss_cls: 0.6988, d2.loss_bbox: 0.9842, d3.loss_cls: 0.6982, d3.loss_bbox: 0.9717, d4.loss_cls: 0.6992, d4.loss_bbox: 0.9653, aux_task0.loss_heatmap: 0.8498, aux_task0.loss_bbox: 0.3192, aux_task1.loss_heatmap: 1.0606, aux_task1.loss_bbox: 0.3699, aux_task2.loss_heatmap: 1.1538, aux_task2.loss_bbox: 0.3980, aux_task3.loss_heatmap: 0.9629, aux_task3.loss_bbox: 0.3142, aux_task4.loss_heatmap: 0.7171, aux_task4.loss_bbox: 0.3353, aux_task5.loss_heatmap: 0.7187, aux_task5.loss_bbox: 0.3299, loss: 17.8095, grad_norm: 40.6208
2025-05-04 20:20:08,849 - mmdet - INFO - Epoch [4][950/2207]	lr: 5.626e-05, eta: 10:39:45, time: 1.048, data_time: 0.007, memory: 15902, loss_cls: 0.6860, loss_bbox: 0.9696, d0.loss_cls: 0.7013, d0.loss_bbox: 1.1515, d1.loss_cls: 0.6861, d1.loss_bbox: 1.0313, d2.loss_cls: 0.6832, d2.loss_bbox: 0.9896, d3.loss_cls: 0.6830, d3.loss_bbox: 0.9760, d4.loss_cls: 0.6838, d4.loss_bbox: 0.9711, aux_task0.loss_heatmap: 0.8411, aux_task0.loss_bbox: 0.3283, aux_task1.loss_heatmap: 1.1092, aux_task1.loss_bbox: 0.3769, aux_task2.loss_heatmap: 1.0727, aux_task2.loss_bbox: 0.3882, aux_task3.loss_heatmap: 0.8844, aux_task3.loss_bbox: 0.3124, aux_task4.loss_heatmap: 0.6810, aux_task4.loss_bbox: 0.3320, aux_task5.loss_heatmap: 0.6922, aux_task5.loss_bbox: 0.3279, loss: 17.5590, grad_norm: 42.0872
2025-05-04 20:21:01,204 - mmdet - INFO - Epoch [4][1000/2207]	lr: 5.675e-05, eta: 10:38:52, time: 1.047, data_time: 0.007, memory: 15902, loss_cls: 0.6726, loss_bbox: 0.9561, d0.loss_cls: 0.6890, d0.loss_bbox: 1.1448, d1.loss_cls: 0.6775, d1.loss_bbox: 1.0144, d2.loss_cls: 0.6713, d2.loss_bbox: 0.9744, d3.loss_cls: 0.6704, d3.loss_bbox: 0.9644, d4.loss_cls: 0.6708, d4.loss_bbox: 0.9587, aux_task0.loss_heatmap: 0.8500, aux_task0.loss_bbox: 0.3252, aux_task1.loss_heatmap: 1.0517, aux_task1.loss_bbox: 0.3685, aux_task2.loss_heatmap: 1.1131, aux_task2.loss_bbox: 0.3957, aux_task3.loss_heatmap: 0.9213, aux_task3.loss_bbox: 0.3148, aux_task4.loss_heatmap: 0.6649, aux_task4.loss_bbox: 0.3348, aux_task5.loss_heatmap: 0.6903, aux_task5.loss_bbox: 0.3308, loss: 17.4251, grad_norm: 39.3956
2025-05-04 20:21:53,633 - mmdet - INFO - Epoch [4][1050/2207]	lr: 5.724e-05, eta: 10:37:59, time: 1.049, data_time: 0.008, memory: 15902, loss_cls: 0.6917, loss_bbox: 0.9707, d0.loss_cls: 0.7064, d0.loss_bbox: 1.1541, d1.loss_cls: 0.6915, d1.loss_bbox: 1.0331, d2.loss_cls: 0.6872, d2.loss_bbox: 0.9928, d3.loss_cls: 0.6881, d3.loss_bbox: 0.9780, d4.loss_cls: 0.6887, d4.loss_bbox: 0.9735, aux_task0.loss_heatmap: 0.8651, aux_task0.loss_bbox: 0.3323, aux_task1.loss_heatmap: 1.0185, aux_task1.loss_bbox: 0.3656, aux_task2.loss_heatmap: 1.1303, aux_task2.loss_bbox: 0.3951, aux_task3.loss_heatmap: 0.9290, aux_task3.loss_bbox: 0.3285, aux_task4.loss_heatmap: 0.6828, aux_task4.loss_bbox: 0.3340, aux_task5.loss_heatmap: 0.6937, aux_task5.loss_bbox: 0.3322, loss: 17.6627, grad_norm: 39.9562
2025-05-04 20:22:45,882 - mmdet - INFO - Epoch [4][1100/2207]	lr: 5.773e-05, eta: 10:37:06, time: 1.045, data_time: 0.006, memory: 15902, loss_cls: 0.6805, loss_bbox: 0.9531, d0.loss_cls: 0.6905, d0.loss_bbox: 1.1426, d1.loss_cls: 0.6819, d1.loss_bbox: 1.0162, d2.loss_cls: 0.6760, d2.loss_bbox: 0.9766, d3.loss_cls: 0.6754, d3.loss_bbox: 0.9646, d4.loss_cls: 0.6780, d4.loss_bbox: 0.9566, aux_task0.loss_heatmap: 0.8454, aux_task0.loss_bbox: 0.3324, aux_task1.loss_heatmap: 1.0407, aux_task1.loss_bbox: 0.3699, aux_task2.loss_heatmap: 1.1293, aux_task2.loss_bbox: 0.3925, aux_task3.loss_heatmap: 0.9278, aux_task3.loss_bbox: 0.3233, aux_task4.loss_heatmap: 0.6622, aux_task4.loss_bbox: 0.3296, aux_task5.loss_heatmap: 0.6878, aux_task5.loss_bbox: 0.3214, loss: 17.4543, grad_norm: 38.7920
2025-05-04 20:23:38,522 - mmdet - INFO - Epoch [4][1150/2207]	lr: 5.822e-05, eta: 10:36:14, time: 1.053, data_time: 0.006, memory: 15902, loss_cls: 0.6801, loss_bbox: 0.9554, d0.loss_cls: 0.6927, d0.loss_bbox: 1.1456, d1.loss_cls: 0.6814, d1.loss_bbox: 1.0188, d2.loss_cls: 0.6748, d2.loss_bbox: 0.9785, d3.loss_cls: 0.6734, d3.loss_bbox: 0.9685, d4.loss_cls: 0.6774, d4.loss_bbox: 0.9605, aux_task0.loss_heatmap: 0.8359, aux_task0.loss_bbox: 0.3232, aux_task1.loss_heatmap: 1.0545, aux_task1.loss_bbox: 0.3709, aux_task2.loss_heatmap: 1.1398, aux_task2.loss_bbox: 0.3993, aux_task3.loss_heatmap: 0.9518, aux_task3.loss_bbox: 0.3139, aux_task4.loss_heatmap: 0.6906, aux_task4.loss_bbox: 0.3262, aux_task5.loss_heatmap: 0.6776, aux_task5.loss_bbox: 0.3253, loss: 17.5164, grad_norm: 39.6945
2025-05-04 20:24:30,883 - mmdet - INFO - Epoch [4][1200/2207]	lr: 5.872e-05, eta: 10:35:21, time: 1.047, data_time: 0.007, memory: 15902, loss_cls: 0.6839, loss_bbox: 0.9548, d0.loss_cls: 0.6947, d0.loss_bbox: 1.1337, d1.loss_cls: 0.6811, d1.loss_bbox: 1.0152, d2.loss_cls: 0.6763, d2.loss_bbox: 0.9774, d3.loss_cls: 0.6792, d3.loss_bbox: 0.9637, d4.loss_cls: 0.6811, d4.loss_bbox: 0.9566, aux_task0.loss_heatmap: 0.8405, aux_task0.loss_bbox: 0.3318, aux_task1.loss_heatmap: 1.0563, aux_task1.loss_bbox: 0.3694, aux_task2.loss_heatmap: 1.0950, aux_task2.loss_bbox: 0.3982, aux_task3.loss_heatmap: 0.9537, aux_task3.loss_bbox: 0.3144, aux_task4.loss_heatmap: 0.6613, aux_task4.loss_bbox: 0.3322, aux_task5.loss_heatmap: 0.7050, aux_task5.loss_bbox: 0.3289, loss: 17.4845, grad_norm: 39.2682
2025-05-04 20:25:23,464 - mmdet - INFO - Epoch [4][1250/2207]	lr: 5.921e-05, eta: 10:34:29, time: 1.052, data_time: 0.006, memory: 15993, loss_cls: 0.6702, loss_bbox: 0.9416, d0.loss_cls: 0.6901, d0.loss_bbox: 1.1224, d1.loss_cls: 0.6774, d1.loss_bbox: 1.0002, d2.loss_cls: 0.6685, d2.loss_bbox: 0.9627, d3.loss_cls: 0.6678, d3.loss_bbox: 0.9512, d4.loss_cls: 0.6699, d4.loss_bbox: 0.9442, aux_task0.loss_heatmap: 0.8328, aux_task0.loss_bbox: 0.3160, aux_task1.loss_heatmap: 0.9824, aux_task1.loss_bbox: 0.3662, aux_task2.loss_heatmap: 1.1334, aux_task2.loss_bbox: 0.3973, aux_task3.loss_heatmap: 0.9514, aux_task3.loss_bbox: 0.3246, aux_task4.loss_heatmap: 0.6931, aux_task4.loss_bbox: 0.3345, aux_task5.loss_heatmap: 0.6612, aux_task5.loss_bbox: 0.3242, loss: 17.2835, grad_norm: 42.4452
2025-05-04 20:26:15,619 - mmdet - INFO - Epoch [4][1300/2207]	lr: 5.970e-05, eta: 10:33:35, time: 1.043, data_time: 0.007, memory: 15993, loss_cls: 0.6777, loss_bbox: 0.9371, d0.loss_cls: 0.6908, d0.loss_bbox: 1.1205, d1.loss_cls: 0.6793, d1.loss_bbox: 0.9933, d2.loss_cls: 0.6768, d2.loss_bbox: 0.9535, d3.loss_cls: 0.6771, d3.loss_bbox: 0.9414, d4.loss_cls: 0.6761, d4.loss_bbox: 0.9386, aux_task0.loss_heatmap: 0.8201, aux_task0.loss_bbox: 0.3177, aux_task1.loss_heatmap: 1.0172, aux_task1.loss_bbox: 0.3738, aux_task2.loss_heatmap: 1.1137, aux_task2.loss_bbox: 0.4049, aux_task3.loss_heatmap: 0.9126, aux_task3.loss_bbox: 0.3109, aux_task4.loss_heatmap: 0.6921, aux_task4.loss_bbox: 0.3258, aux_task5.loss_heatmap: 0.6569, aux_task5.loss_bbox: 0.3243, loss: 17.2323, grad_norm: 38.7710
2025-05-04 20:27:08,123 - mmdet - INFO - Epoch [4][1350/2207]	lr: 6.020e-05, eta: 10:32:43, time: 1.050, data_time: 0.007, memory: 15993, loss_cls: 0.6605, loss_bbox: 0.9350, d0.loss_cls: 0.6744, d0.loss_bbox: 1.1225, d1.loss_cls: 0.6665, d1.loss_bbox: 0.9904, d2.loss_cls: 0.6584, d2.loss_bbox: 0.9520, d3.loss_cls: 0.6583, d3.loss_bbox: 0.9396, d4.loss_cls: 0.6589, d4.loss_bbox: 0.9351, aux_task0.loss_heatmap: 0.7878, aux_task0.loss_bbox: 0.3192, aux_task1.loss_heatmap: 1.0504, aux_task1.loss_bbox: 0.3706, aux_task2.loss_heatmap: 1.1023, aux_task2.loss_bbox: 0.3917, aux_task3.loss_heatmap: 0.8618, aux_task3.loss_bbox: 0.3209, aux_task4.loss_heatmap: 0.6440, aux_task4.loss_bbox: 0.3289, aux_task5.loss_heatmap: 0.6753, aux_task5.loss_bbox: 0.3226, loss: 17.0271, grad_norm: 37.8945
2025-05-04 20:28:00,506 - mmdet - INFO - Epoch [4][1400/2207]	lr: 6.069e-05, eta: 10:31:50, time: 1.048, data_time: 0.008, memory: 15993, loss_cls: 0.6588, loss_bbox: 0.9357, d0.loss_cls: 0.6802, d0.loss_bbox: 1.1183, d1.loss_cls: 0.6652, d1.loss_bbox: 0.9945, d2.loss_cls: 0.6575, d2.loss_bbox: 0.9571, d3.loss_cls: 0.6562, d3.loss_bbox: 0.9453, d4.loss_cls: 0.6580, d4.loss_bbox: 0.9383, aux_task0.loss_heatmap: 0.8008, aux_task0.loss_bbox: 0.3237, aux_task1.loss_heatmap: 1.0112, aux_task1.loss_bbox: 0.3613, aux_task2.loss_heatmap: 1.0964, aux_task2.loss_bbox: 0.3926, aux_task3.loss_heatmap: 0.9120, aux_task3.loss_bbox: 0.3210, aux_task4.loss_heatmap: 0.6805, aux_task4.loss_bbox: 0.3352, aux_task5.loss_heatmap: 0.6606, aux_task5.loss_bbox: 0.3199, loss: 17.0802, grad_norm: 36.1272
2025-05-04 20:28:52,889 - mmdet - INFO - Epoch [4][1450/2207]	lr: 6.119e-05, eta: 10:30:57, time: 1.048, data_time: 0.007, memory: 15993, loss_cls: 0.6577, loss_bbox: 0.9414, d0.loss_cls: 0.6735, d0.loss_bbox: 1.1221, d1.loss_cls: 0.6616, d1.loss_bbox: 0.9985, d2.loss_cls: 0.6582, d2.loss_bbox: 0.9616, d3.loss_cls: 0.6570, d3.loss_bbox: 0.9503, d4.loss_cls: 0.6569, d4.loss_bbox: 0.9450, aux_task0.loss_heatmap: 0.7946, aux_task0.loss_bbox: 0.3222, aux_task1.loss_heatmap: 1.0217, aux_task1.loss_bbox: 0.3629, aux_task2.loss_heatmap: 1.0896, aux_task2.loss_bbox: 0.3928, aux_task3.loss_heatmap: 0.9324, aux_task3.loss_bbox: 0.3162, aux_task4.loss_heatmap: 0.6700, aux_task4.loss_bbox: 0.3321, aux_task5.loss_heatmap: 0.6581, aux_task5.loss_bbox: 0.3276, loss: 17.1042, grad_norm: 38.1195
2025-05-04 20:29:45,555 - mmdet - INFO - Epoch [4][1500/2207]	lr: 6.168e-05, eta: 10:30:05, time: 1.053, data_time: 0.007, memory: 15993, loss_cls: 0.6612, loss_bbox: 0.9399, d0.loss_cls: 0.6757, d0.loss_bbox: 1.1273, d1.loss_cls: 0.6661, d1.loss_bbox: 1.0001, d2.loss_cls: 0.6600, d2.loss_bbox: 0.9623, d3.loss_cls: 0.6576, d3.loss_bbox: 0.9503, d4.loss_cls: 0.6587, d4.loss_bbox: 0.9440, aux_task0.loss_heatmap: 0.8206, aux_task0.loss_bbox: 0.3237, aux_task1.loss_heatmap: 1.0326, aux_task1.loss_bbox: 0.3674, aux_task2.loss_heatmap: 1.0524, aux_task2.loss_bbox: 0.3915, aux_task3.loss_heatmap: 0.8920, aux_task3.loss_bbox: 0.3135, aux_task4.loss_heatmap: 0.6972, aux_task4.loss_bbox: 0.3353, aux_task5.loss_heatmap: 0.6606, aux_task5.loss_bbox: 0.3228, loss: 17.1126, grad_norm: 39.9906
2025-05-04 20:30:38,040 - mmdet - INFO - Epoch [4][1550/2207]	lr: 6.218e-05, eta: 10:29:13, time: 1.050, data_time: 0.006, memory: 15993, loss_cls: 0.6571, loss_bbox: 0.9480, d0.loss_cls: 0.6699, d0.loss_bbox: 1.1263, d1.loss_cls: 0.6605, d1.loss_bbox: 1.0027, d2.loss_cls: 0.6530, d2.loss_bbox: 0.9682, d3.loss_cls: 0.6534, d3.loss_bbox: 0.9569, d4.loss_cls: 0.6543, d4.loss_bbox: 0.9501, aux_task0.loss_heatmap: 0.7855, aux_task0.loss_bbox: 0.3222, aux_task1.loss_heatmap: 1.0750, aux_task1.loss_bbox: 0.3755, aux_task2.loss_heatmap: 1.1230, aux_task2.loss_bbox: 0.3943, aux_task3.loss_heatmap: 0.8443, aux_task3.loss_bbox: 0.3163, aux_task4.loss_heatmap: 0.6592, aux_task4.loss_bbox: 0.3293, aux_task5.loss_heatmap: 0.6590, aux_task5.loss_bbox: 0.3242, loss: 17.1082, grad_norm: 42.1368
2025-05-04 20:31:30,397 - mmdet - INFO - Epoch [4][1600/2207]	lr: 6.268e-05, eta: 10:28:20, time: 1.047, data_time: 0.008, memory: 15993, loss_cls: 0.6509, loss_bbox: 0.9323, d0.loss_cls: 0.6727, d0.loss_bbox: 1.1158, d1.loss_cls: 0.6597, d1.loss_bbox: 0.9898, d2.loss_cls: 0.6517, d2.loss_bbox: 0.9546, d3.loss_cls: 0.6512, d3.loss_bbox: 0.9402, d4.loss_cls: 0.6492, d4.loss_bbox: 0.9357, aux_task0.loss_heatmap: 0.7573, aux_task0.loss_bbox: 0.3154, aux_task1.loss_heatmap: 0.9847, aux_task1.loss_bbox: 0.3644, aux_task2.loss_heatmap: 1.0764, aux_task2.loss_bbox: 0.3903, aux_task3.loss_heatmap: 0.8485, aux_task3.loss_bbox: 0.3093, aux_task4.loss_heatmap: 0.6779, aux_task4.loss_bbox: 0.3298, aux_task5.loss_heatmap: 0.6581, aux_task5.loss_bbox: 0.3206, loss: 16.8362, grad_norm: 39.2943
2025-05-04 20:32:22,748 - mmdet - INFO - Epoch [4][1650/2207]	lr: 6.317e-05, eta: 10:27:27, time: 1.047, data_time: 0.006, memory: 15993, loss_cls: 0.6472, loss_bbox: 0.9386, d0.loss_cls: 0.6657, d0.loss_bbox: 1.1102, d1.loss_cls: 0.6506, d1.loss_bbox: 0.9949, d2.loss_cls: 0.6447, d2.loss_bbox: 0.9599, d3.loss_cls: 0.6437, d3.loss_bbox: 0.9471, d4.loss_cls: 0.6483, d4.loss_bbox: 0.9394, aux_task0.loss_heatmap: 0.7887, aux_task0.loss_bbox: 0.3202, aux_task1.loss_heatmap: 1.0208, aux_task1.loss_bbox: 0.3687, aux_task2.loss_heatmap: 1.0679, aux_task2.loss_bbox: 0.3949, aux_task3.loss_heatmap: 0.8648, aux_task3.loss_bbox: 0.3203, aux_task4.loss_heatmap: 0.6598, aux_task4.loss_bbox: 0.3331, aux_task5.loss_heatmap: 0.6174, aux_task5.loss_bbox: 0.3198, loss: 16.8663, grad_norm: 37.5741
2025-05-04 20:33:15,060 - mmdet - INFO - Epoch [4][1700/2207]	lr: 6.367e-05, eta: 10:26:33, time: 1.046, data_time: 0.007, memory: 15993, loss_cls: 0.6544, loss_bbox: 0.9338, d0.loss_cls: 0.6697, d0.loss_bbox: 1.1122, d1.loss_cls: 0.6572, d1.loss_bbox: 0.9950, d2.loss_cls: 0.6541, d2.loss_bbox: 0.9565, d3.loss_cls: 0.6514, d3.loss_bbox: 0.9445, d4.loss_cls: 0.6523, d4.loss_bbox: 0.9377, aux_task0.loss_heatmap: 0.8080, aux_task0.loss_bbox: 0.3277, aux_task1.loss_heatmap: 0.9866, aux_task1.loss_bbox: 0.3689, aux_task2.loss_heatmap: 1.1162, aux_task2.loss_bbox: 0.4000, aux_task3.loss_heatmap: 0.8482, aux_task3.loss_bbox: 0.3121, aux_task4.loss_heatmap: 0.6037, aux_task4.loss_bbox: 0.3196, aux_task5.loss_heatmap: 0.6692, aux_task5.loss_bbox: 0.3241, loss: 16.9033, grad_norm: 38.3400
2025-05-04 20:34:07,466 - mmdet - INFO - Epoch [4][1750/2207]	lr: 6.417e-05, eta: 10:25:41, time: 1.048, data_time: 0.006, memory: 15993, loss_cls: 0.6641, loss_bbox: 0.9495, d0.loss_cls: 0.6793, d0.loss_bbox: 1.1229, d1.loss_cls: 0.6680, d1.loss_bbox: 1.0007, d2.loss_cls: 0.6630, d2.loss_bbox: 0.9644, d3.loss_cls: 0.6616, d3.loss_bbox: 0.9563, d4.loss_cls: 0.6636, d4.loss_bbox: 0.9508, aux_task0.loss_heatmap: 0.7897, aux_task0.loss_bbox: 0.3101, aux_task1.loss_heatmap: 1.0292, aux_task1.loss_bbox: 0.3629, aux_task2.loss_heatmap: 1.1043, aux_task2.loss_bbox: 0.4019, aux_task3.loss_heatmap: 0.8874, aux_task3.loss_bbox: 0.3218, aux_task4.loss_heatmap: 0.6697, aux_task4.loss_bbox: 0.3216, aux_task5.loss_heatmap: 0.6687, aux_task5.loss_bbox: 0.3243, loss: 17.1358, grad_norm: 39.5190
2025-05-04 20:34:59,896 - mmdet - INFO - Epoch [4][1800/2207]	lr: 6.467e-05, eta: 10:24:48, time: 1.049, data_time: 0.006, memory: 15993, loss_cls: 0.6515, loss_bbox: 0.9273, d0.loss_cls: 0.6601, d0.loss_bbox: 1.1036, d1.loss_cls: 0.6534, d1.loss_bbox: 0.9849, d2.loss_cls: 0.6471, d2.loss_bbox: 0.9505, d3.loss_cls: 0.6458, d3.loss_bbox: 0.9405, d4.loss_cls: 0.6474, d4.loss_bbox: 0.9318, aux_task0.loss_heatmap: 0.7744, aux_task0.loss_bbox: 0.3240, aux_task1.loss_heatmap: 1.0456, aux_task1.loss_bbox: 0.3695, aux_task2.loss_heatmap: 1.0520, aux_task2.loss_bbox: 0.3887, aux_task3.loss_heatmap: 0.8490, aux_task3.loss_bbox: 0.3246, aux_task4.loss_heatmap: 0.6596, aux_task4.loss_bbox: 0.3243, aux_task5.loss_heatmap: 0.6291, aux_task5.loss_bbox: 0.3242, loss: 16.8089, grad_norm: 39.3039
2025-05-04 20:35:52,150 - mmdet - INFO - Epoch [4][1850/2207]	lr: 6.517e-05, eta: 10:23:55, time: 1.045, data_time: 0.006, memory: 15993, loss_cls: 0.6576, loss_bbox: 0.9398, d0.loss_cls: 0.6743, d0.loss_bbox: 1.1146, d1.loss_cls: 0.6608, d1.loss_bbox: 0.9927, d2.loss_cls: 0.6526, d2.loss_bbox: 0.9600, d3.loss_cls: 0.6534, d3.loss_bbox: 0.9491, d4.loss_cls: 0.6561, d4.loss_bbox: 0.9429, aux_task0.loss_heatmap: 0.7802, aux_task0.loss_bbox: 0.3215, aux_task1.loss_heatmap: 1.0602, aux_task1.loss_bbox: 0.3749, aux_task2.loss_heatmap: 1.0362, aux_task2.loss_bbox: 0.3982, aux_task3.loss_heatmap: 0.9011, aux_task3.loss_bbox: 0.3145, aux_task4.loss_heatmap: 0.6502, aux_task4.loss_bbox: 0.3272, aux_task5.loss_heatmap: 0.6336, aux_task5.loss_bbox: 0.3218, loss: 16.9736, grad_norm: 37.2650
2025-05-04 20:36:44,622 - mmdet - INFO - Epoch [4][1900/2207]	lr: 6.567e-05, eta: 10:23:02, time: 1.049, data_time: 0.006, memory: 15993, loss_cls: 0.6548, loss_bbox: 0.9388, d0.loss_cls: 0.6713, d0.loss_bbox: 1.1125, d1.loss_cls: 0.6591, d1.loss_bbox: 0.9925, d2.loss_cls: 0.6536, d2.loss_bbox: 0.9587, d3.loss_cls: 0.6524, d3.loss_bbox: 0.9488, d4.loss_cls: 0.6536, d4.loss_bbox: 0.9420, aux_task0.loss_heatmap: 0.8095, aux_task0.loss_bbox: 0.3235, aux_task1.loss_heatmap: 1.0168, aux_task1.loss_bbox: 0.3667, aux_task2.loss_heatmap: 1.1314, aux_task2.loss_bbox: 0.3903, aux_task3.loss_heatmap: 0.8742, aux_task3.loss_bbox: 0.3109, aux_task4.loss_heatmap: 0.6394, aux_task4.loss_bbox: 0.3219, aux_task5.loss_heatmap: 0.6564, aux_task5.loss_bbox: 0.3180, loss: 16.9971, grad_norm: 39.4132
2025-05-04 20:37:36,882 - mmdet - INFO - Epoch [4][1950/2207]	lr: 6.617e-05, eta: 10:22:09, time: 1.045, data_time: 0.006, memory: 15993, loss_cls: 0.6500, loss_bbox: 0.9359, d0.loss_cls: 0.6672, d0.loss_bbox: 1.1024, d1.loss_cls: 0.6559, d1.loss_bbox: 0.9838, d2.loss_cls: 0.6505, d2.loss_bbox: 0.9499, d3.loss_cls: 0.6478, d3.loss_bbox: 0.9416, d4.loss_cls: 0.6491, d4.loss_bbox: 0.9373, aux_task0.loss_heatmap: 0.7858, aux_task0.loss_bbox: 0.3126, aux_task1.loss_heatmap: 1.0629, aux_task1.loss_bbox: 0.3640, aux_task2.loss_heatmap: 1.0928, aux_task2.loss_bbox: 0.3941, aux_task3.loss_heatmap: 0.8565, aux_task3.loss_bbox: 0.3188, aux_task4.loss_heatmap: 0.6408, aux_task4.loss_bbox: 0.3201, aux_task5.loss_heatmap: 0.6389, aux_task5.loss_bbox: 0.3215, loss: 16.8802, grad_norm: 41.1444
2025-05-04 20:38:29,005 - mmdet - INFO - Epoch [4][2000/2207]	lr: 6.667e-05, eta: 10:21:15, time: 1.042, data_time: 0.006, memory: 15993, loss_cls: 0.6503, loss_bbox: 0.9205, d0.loss_cls: 0.6728, d0.loss_bbox: 1.0958, d1.loss_cls: 0.6555, d1.loss_bbox: 0.9778, d2.loss_cls: 0.6487, d2.loss_bbox: 0.9452, d3.loss_cls: 0.6479, d3.loss_bbox: 0.9320, d4.loss_cls: 0.6490, d4.loss_bbox: 0.9236, aux_task0.loss_heatmap: 0.7742, aux_task0.loss_bbox: 0.3133, aux_task1.loss_heatmap: 1.0238, aux_task1.loss_bbox: 0.3680, aux_task2.loss_heatmap: 1.0264, aux_task2.loss_bbox: 0.3878, aux_task3.loss_heatmap: 0.8425, aux_task3.loss_bbox: 0.2987, aux_task4.loss_heatmap: 0.6302, aux_task4.loss_bbox: 0.3261, aux_task5.loss_heatmap: 0.6431, aux_task5.loss_bbox: 0.3188, loss: 16.6720, grad_norm: 36.8545
2025-05-04 20:39:21,366 - mmdet - INFO - Epoch [4][2050/2207]	lr: 6.717e-05, eta: 10:20:22, time: 1.047, data_time: 0.009, memory: 15993, loss_cls: 0.6469, loss_bbox: 0.9222, d0.loss_cls: 0.6604, d0.loss_bbox: 1.0917, d1.loss_cls: 0.6519, d1.loss_bbox: 0.9735, d2.loss_cls: 0.6454, d2.loss_bbox: 0.9416, d3.loss_cls: 0.6457, d3.loss_bbox: 0.9310, d4.loss_cls: 0.6455, d4.loss_bbox: 0.9248, aux_task0.loss_heatmap: 0.7988, aux_task0.loss_bbox: 0.3186, aux_task1.loss_heatmap: 1.0356, aux_task1.loss_bbox: 0.3673, aux_task2.loss_heatmap: 1.0597, aux_task2.loss_bbox: 0.3791, aux_task3.loss_heatmap: 0.8897, aux_task3.loss_bbox: 0.3046, aux_task4.loss_heatmap: 0.6447, aux_task4.loss_bbox: 0.3204, aux_task5.loss_heatmap: 0.6143, aux_task5.loss_bbox: 0.3171, loss: 16.7305, grad_norm: 36.7478
2025-05-04 20:40:13,722 - mmdet - INFO - Epoch [4][2100/2207]	lr: 6.767e-05, eta: 10:19:29, time: 1.047, data_time: 0.006, memory: 15993, loss_cls: 0.6375, loss_bbox: 0.9255, d0.loss_cls: 0.6501, d0.loss_bbox: 1.0983, d1.loss_cls: 0.6399, d1.loss_bbox: 0.9776, d2.loss_cls: 0.6375, d2.loss_bbox: 0.9453, d3.loss_cls: 0.6366, d3.loss_bbox: 0.9349, d4.loss_cls: 0.6376, d4.loss_bbox: 0.9273, aux_task0.loss_heatmap: 0.7830, aux_task0.loss_bbox: 0.3204, aux_task1.loss_heatmap: 1.0216, aux_task1.loss_bbox: 0.3736, aux_task2.loss_heatmap: 1.0149, aux_task2.loss_bbox: 0.3826, aux_task3.loss_heatmap: 0.8691, aux_task3.loss_bbox: 0.3160, aux_task4.loss_heatmap: 0.6538, aux_task4.loss_bbox: 0.3299, aux_task5.loss_heatmap: 0.6275, aux_task5.loss_bbox: 0.3166, loss: 16.6570, grad_norm: 36.6166
2025-05-04 20:41:06,412 - mmdet - INFO - Epoch [4][2150/2207]	lr: 6.817e-05, eta: 10:18:37, time: 1.054, data_time: 0.006, memory: 15993, loss_cls: 0.6305, loss_bbox: 0.9178, d0.loss_cls: 0.6469, d0.loss_bbox: 1.0908, d1.loss_cls: 0.6357, d1.loss_bbox: 0.9683, d2.loss_cls: 0.6302, d2.loss_bbox: 0.9340, d3.loss_cls: 0.6292, d3.loss_bbox: 0.9239, d4.loss_cls: 0.6305, d4.loss_bbox: 0.9189, aux_task0.loss_heatmap: 0.7719, aux_task0.loss_bbox: 0.3149, aux_task1.loss_heatmap: 1.0130, aux_task1.loss_bbox: 0.3612, aux_task2.loss_heatmap: 1.0817, aux_task2.loss_bbox: 0.3888, aux_task3.loss_heatmap: 0.8041, aux_task3.loss_bbox: 0.3118, aux_task4.loss_heatmap: 0.6294, aux_task4.loss_bbox: 0.3250, aux_task5.loss_heatmap: 0.6329, aux_task5.loss_bbox: 0.3185, loss: 16.5098, grad_norm: 40.6169
2025-05-04 20:41:58,816 - mmdet - INFO - Epoch [4][2200/2207]	lr: 6.867e-05, eta: 10:17:45, time: 1.048, data_time: 0.007, memory: 15993, loss_cls: 0.6330, loss_bbox: 0.9195, d0.loss_cls: 0.6474, d0.loss_bbox: 1.0990, d1.loss_cls: 0.6372, d1.loss_bbox: 0.9786, d2.loss_cls: 0.6323, d2.loss_bbox: 0.9429, d3.loss_cls: 0.6323, d3.loss_bbox: 0.9307, d4.loss_cls: 0.6328, d4.loss_bbox: 0.9243, aux_task0.loss_heatmap: 0.7745, aux_task0.loss_bbox: 0.3113, aux_task1.loss_heatmap: 1.0004, aux_task1.loss_bbox: 0.3681, aux_task2.loss_heatmap: 1.0411, aux_task2.loss_bbox: 0.3971, aux_task3.loss_heatmap: 0.8030, aux_task3.loss_bbox: 0.3047, aux_task4.loss_heatmap: 0.6779, aux_task4.loss_bbox: 0.3337, aux_task5.loss_heatmap: 0.6124, aux_task5.loss_bbox: 0.3146, loss: 16.5487, grad_norm: 39.8034
2025-05-04 20:42:06,491 - mmdet - INFO - Saving checkpoint at 4 epochs
2025-05-04 20:43:17,019 - mmdet - INFO - Epoch [5][50/2207]	lr: 6.924e-05, eta: 10:16:44, time: 1.191, data_time: 0.116, memory: 15993, loss_cls: 0.6439, loss_bbox: 0.9247, d0.loss_cls: 0.6597, d0.loss_bbox: 1.0887, d1.loss_cls: 0.6473, d1.loss_bbox: 0.9735, d2.loss_cls: 0.6407, d2.loss_bbox: 0.9443, d3.loss_cls: 0.6409, d3.loss_bbox: 0.9345, d4.loss_cls: 0.6428, d4.loss_bbox: 0.9280, aux_task0.loss_heatmap: 0.7568, aux_task0.loss_bbox: 0.3215, aux_task1.loss_heatmap: 0.9948, aux_task1.loss_bbox: 0.3611, aux_task2.loss_heatmap: 1.0989, aux_task2.loss_bbox: 0.3837, aux_task3.loss_heatmap: 0.8733, aux_task3.loss_bbox: 0.3139, aux_task4.loss_heatmap: 0.6454, aux_task4.loss_bbox: 0.3254, aux_task5.loss_heatmap: 0.5942, aux_task5.loss_bbox: 0.3199, loss: 16.6576, grad_norm: 39.5436
2025-05-04 20:44:09,393 - mmdet - INFO - Epoch [5][100/2207]	lr: 6.974e-05, eta: 10:15:51, time: 1.047, data_time: 0.007, memory: 15993, loss_cls: 0.6386, loss_bbox: 0.9221, d0.loss_cls: 0.6575, d0.loss_bbox: 1.0899, d1.loss_cls: 0.6456, d1.loss_bbox: 0.9752, d2.loss_cls: 0.6397, d2.loss_bbox: 0.9390, d3.loss_cls: 0.6397, d3.loss_bbox: 0.9273, d4.loss_cls: 0.6389, d4.loss_bbox: 0.9234, aux_task0.loss_heatmap: 0.7740, aux_task0.loss_bbox: 0.3258, aux_task1.loss_heatmap: 1.0076, aux_task1.loss_bbox: 0.3558, aux_task2.loss_heatmap: 1.0347, aux_task2.loss_bbox: 0.3891, aux_task3.loss_heatmap: 0.8265, aux_task3.loss_bbox: 0.3073, aux_task4.loss_heatmap: 0.6335, aux_task4.loss_bbox: 0.3256, aux_task5.loss_heatmap: 0.6467, aux_task5.loss_bbox: 0.3158, loss: 16.5794, grad_norm: 39.5935
2025-05-04 20:45:01,925 - mmdet - INFO - Epoch [5][150/2207]	lr: 7.024e-05, eta: 10:14:59, time: 1.051, data_time: 0.006, memory: 15993, loss_cls: 0.6277, loss_bbox: 0.9022, d0.loss_cls: 0.6417, d0.loss_bbox: 1.0694, d1.loss_cls: 0.6329, d1.loss_bbox: 0.9542, d2.loss_cls: 0.6252, d2.loss_bbox: 0.9199, d3.loss_cls: 0.6256, d3.loss_bbox: 0.9078, d4.loss_cls: 0.6276, d4.loss_bbox: 0.9034, aux_task0.loss_heatmap: 0.7279, aux_task0.loss_bbox: 0.3139, aux_task1.loss_heatmap: 0.9907, aux_task1.loss_bbox: 0.3594, aux_task2.loss_heatmap: 1.0344, aux_task2.loss_bbox: 0.3726, aux_task3.loss_heatmap: 0.8428, aux_task3.loss_bbox: 0.3141, aux_task4.loss_heatmap: 0.6480, aux_task4.loss_bbox: 0.3258, aux_task5.loss_heatmap: 0.6374, aux_task5.loss_bbox: 0.3216, loss: 16.3262, grad_norm: 41.2120
2025-05-04 20:45:53,951 - mmdet - INFO - Epoch [5][200/2207]	lr: 7.074e-05, eta: 10:14:04, time: 1.041, data_time: 0.006, memory: 15993, loss_cls: 0.6336, loss_bbox: 0.9268, d0.loss_cls: 0.6548, d0.loss_bbox: 1.0935, d1.loss_cls: 0.6418, d1.loss_bbox: 0.9793, d2.loss_cls: 0.6333, d2.loss_bbox: 0.9453, d3.loss_cls: 0.6305, d3.loss_bbox: 0.9351, d4.loss_cls: 0.6328, d4.loss_bbox: 0.9302, aux_task0.loss_heatmap: 0.7787, aux_task0.loss_bbox: 0.3096, aux_task1.loss_heatmap: 1.0148, aux_task1.loss_bbox: 0.3618, aux_task2.loss_heatmap: 1.0551, aux_task2.loss_bbox: 0.3899, aux_task3.loss_heatmap: 0.8455, aux_task3.loss_bbox: 0.3223, aux_task4.loss_heatmap: 0.6263, aux_task4.loss_bbox: 0.3323, aux_task5.loss_heatmap: 0.6186, aux_task5.loss_bbox: 0.3188, loss: 16.6106, grad_norm: 37.3983
2025-05-04 20:46:46,454 - mmdet - INFO - Epoch [5][250/2207]	lr: 7.124e-05, eta: 10:13:12, time: 1.050, data_time: 0.007, memory: 15993, loss_cls: 0.6276, loss_bbox: 0.9152, d0.loss_cls: 0.6435, d0.loss_bbox: 1.0845, d1.loss_cls: 0.6355, d1.loss_bbox: 0.9650, d2.loss_cls: 0.6284, d2.loss_bbox: 0.9332, d3.loss_cls: 0.6264, d3.loss_bbox: 0.9226, d4.loss_cls: 0.6264, d4.loss_bbox: 0.9185, aux_task0.loss_heatmap: 0.7494, aux_task0.loss_bbox: 0.3134, aux_task1.loss_heatmap: 0.9758, aux_task1.loss_bbox: 0.3671, aux_task2.loss_heatmap: 1.0454, aux_task2.loss_bbox: 0.3822, aux_task3.loss_heatmap: 0.7612, aux_task3.loss_bbox: 0.3159, aux_task4.loss_heatmap: 0.6437, aux_task4.loss_bbox: 0.3320, aux_task5.loss_heatmap: 0.6120, aux_task5.loss_bbox: 0.3159, loss: 16.3408, grad_norm: 38.4581
2025-05-04 20:47:38,614 - mmdet - INFO - Epoch [5][300/2207]	lr: 7.174e-05, eta: 10:12:18, time: 1.043, data_time: 0.006, memory: 15993, loss_cls: 0.6249, loss_bbox: 0.9203, d0.loss_cls: 0.6421, d0.loss_bbox: 1.0960, d1.loss_cls: 0.6307, d1.loss_bbox: 0.9724, d2.loss_cls: 0.6238, d2.loss_bbox: 0.9393, d3.loss_cls: 0.6213, d3.loss_bbox: 0.9308, d4.loss_cls: 0.6214, d4.loss_bbox: 0.9244, aux_task0.loss_heatmap: 0.7718, aux_task0.loss_bbox: 0.3200, aux_task1.loss_heatmap: 1.0051, aux_task1.loss_bbox: 0.3682, aux_task2.loss_heatmap: 1.0093, aux_task2.loss_bbox: 0.3945, aux_task3.loss_heatmap: 0.8511, aux_task3.loss_bbox: 0.3205, aux_task4.loss_heatmap: 0.6005, aux_task4.loss_bbox: 0.3181, aux_task5.loss_heatmap: 0.6259, aux_task5.loss_bbox: 0.3259, loss: 16.4583, grad_norm: 40.5939
2025-05-04 20:48:30,879 - mmdet - INFO - Epoch [5][350/2207]	lr: 7.224e-05, eta: 10:11:25, time: 1.045, data_time: 0.006, memory: 15993, loss_cls: 0.6160, loss_bbox: 0.9173, d0.loss_cls: 0.6286, d0.loss_bbox: 1.0908, d1.loss_cls: 0.6204, d1.loss_bbox: 0.9709, d2.loss_cls: 0.6174, d2.loss_bbox: 0.9364, d3.loss_cls: 0.6151, d3.loss_bbox: 0.9263, d4.loss_cls: 0.6146, d4.loss_bbox: 0.9210, aux_task0.loss_heatmap: 0.7675, aux_task0.loss_bbox: 0.3132, aux_task1.loss_heatmap: 0.9569, aux_task1.loss_bbox: 0.3654, aux_task2.loss_heatmap: 1.0201, aux_task2.loss_bbox: 0.3862, aux_task3.loss_heatmap: 0.8666, aux_task3.loss_bbox: 0.3163, aux_task4.loss_heatmap: 0.6244, aux_task4.loss_bbox: 0.3200, aux_task5.loss_heatmap: 0.6273, aux_task5.loss_bbox: 0.3253, loss: 16.3638, grad_norm: 38.7926
2025-05-04 20:49:23,186 - mmdet - INFO - Epoch [5][400/2207]	lr: 7.274e-05, eta: 10:10:32, time: 1.046, data_time: 0.007, memory: 15993, loss_cls: 0.6178, loss_bbox: 0.9110, d0.loss_cls: 0.6372, d0.loss_bbox: 1.0776, d1.loss_cls: 0.6226, d1.loss_bbox: 0.9618, d2.loss_cls: 0.6160, d2.loss_bbox: 0.9285, d3.loss_cls: 0.6148, d3.loss_bbox: 0.9182, d4.loss_cls: 0.6168, d4.loss_bbox: 0.9125, aux_task0.loss_heatmap: 0.7430, aux_task0.loss_bbox: 0.3087, aux_task1.loss_heatmap: 0.9740, aux_task1.loss_bbox: 0.3635, aux_task2.loss_heatmap: 1.0123, aux_task2.loss_bbox: 0.3907, aux_task3.loss_heatmap: 0.8780, aux_task3.loss_bbox: 0.3150, aux_task4.loss_heatmap: 0.6031, aux_task4.loss_bbox: 0.3255, aux_task5.loss_heatmap: 0.6193, aux_task5.loss_bbox: 0.3226, loss: 16.2904, grad_norm: 35.5424
2025-05-04 20:50:15,609 - mmdet - INFO - Epoch [5][450/2207]	lr: 7.324e-05, eta: 10:09:40, time: 1.048, data_time: 0.006, memory: 15993, loss_cls: 0.6219, loss_bbox: 0.9176, d0.loss_cls: 0.6371, d0.loss_bbox: 1.0818, d1.loss_cls: 0.6292, d1.loss_bbox: 0.9663, d2.loss_cls: 0.6222, d2.loss_bbox: 0.9359, d3.loss_cls: 0.6192, d3.loss_bbox: 0.9272, d4.loss_cls: 0.6202, d4.loss_bbox: 0.9215, aux_task0.loss_heatmap: 0.7627, aux_task0.loss_bbox: 0.3131, aux_task1.loss_heatmap: 0.9799, aux_task1.loss_bbox: 0.3629, aux_task2.loss_heatmap: 1.0043, aux_task2.loss_bbox: 0.3702, aux_task3.loss_heatmap: 0.8194, aux_task3.loss_bbox: 0.3003, aux_task4.loss_heatmap: 0.6504, aux_task4.loss_bbox: 0.3258, aux_task5.loss_heatmap: 0.6188, aux_task5.loss_bbox: 0.3152, loss: 16.3231, grad_norm: 36.7993
2025-05-04 20:51:07,965 - mmdet - INFO - Epoch [5][500/2207]	lr: 7.374e-05, eta: 10:08:47, time: 1.047, data_time: 0.009, memory: 15993, loss_cls: 0.6309, loss_bbox: 0.9271, d0.loss_cls: 0.6442, d0.loss_bbox: 1.0998, d1.loss_cls: 0.6347, d1.loss_bbox: 0.9771, d2.loss_cls: 0.6305, d2.loss_bbox: 0.9451, d3.loss_cls: 0.6295, d3.loss_bbox: 0.9329, d4.loss_cls: 0.6300, d4.loss_bbox: 0.9299, aux_task0.loss_heatmap: 0.7793, aux_task0.loss_bbox: 0.3146, aux_task1.loss_heatmap: 0.9994, aux_task1.loss_bbox: 0.3642, aux_task2.loss_heatmap: 1.0703, aux_task2.loss_bbox: 0.3863, aux_task3.loss_heatmap: 0.8195, aux_task3.loss_bbox: 0.3069, aux_task4.loss_heatmap: 0.6406, aux_task4.loss_bbox: 0.3285, aux_task5.loss_heatmap: 0.6364, aux_task5.loss_bbox: 0.3182, loss: 16.5760, grad_norm: 37.8728
2025-05-04 20:52:00,282 - mmdet - INFO - Epoch [5][550/2207]	lr: 7.424e-05, eta: 10:07:54, time: 1.046, data_time: 0.007, memory: 15993, loss_cls: 0.6235, loss_bbox: 0.9088, d0.loss_cls: 0.6396, d0.loss_bbox: 1.0760, d1.loss_cls: 0.6297, d1.loss_bbox: 0.9627, d2.loss_cls: 0.6245, d2.loss_bbox: 0.9301, d3.loss_cls: 0.6236, d3.loss_bbox: 0.9202, d4.loss_cls: 0.6225, d4.loss_bbox: 0.9132, aux_task0.loss_heatmap: 0.7382, aux_task0.loss_bbox: 0.3096, aux_task1.loss_heatmap: 0.9810, aux_task1.loss_bbox: 0.3597, aux_task2.loss_heatmap: 1.0541, aux_task2.loss_bbox: 0.4058, aux_task3.loss_heatmap: 0.8495, aux_task3.loss_bbox: 0.3129, aux_task4.loss_heatmap: 0.6261, aux_task4.loss_bbox: 0.3153, aux_task5.loss_heatmap: 0.6265, aux_task5.loss_bbox: 0.3187, loss: 16.3717, grad_norm: 34.7473
2025-05-04 20:52:52,787 - mmdet - INFO - Epoch [5][600/2207]	lr: 7.473e-05, eta: 10:07:01, time: 1.050, data_time: 0.006, memory: 15993, loss_cls: 0.6089, loss_bbox: 0.8923, d0.loss_cls: 0.6248, d0.loss_bbox: 1.0652, d1.loss_cls: 0.6103, d1.loss_bbox: 0.9463, d2.loss_cls: 0.6053, d2.loss_bbox: 0.9136, d3.loss_cls: 0.6059, d3.loss_bbox: 0.9013, d4.loss_cls: 0.6061, d4.loss_bbox: 0.8959, aux_task0.loss_heatmap: 0.7037, aux_task0.loss_bbox: 0.3100, aux_task1.loss_heatmap: 1.0135, aux_task1.loss_bbox: 0.3606, aux_task2.loss_heatmap: 0.9578, aux_task2.loss_bbox: 0.3788, aux_task3.loss_heatmap: 0.8073, aux_task3.loss_bbox: 0.3177, aux_task4.loss_heatmap: 0.6269, aux_task4.loss_bbox: 0.3189, aux_task5.loss_heatmap: 0.5864, aux_task5.loss_bbox: 0.3096, loss: 15.9673, grad_norm: 38.4020
2025-05-04 20:53:45,188 - mmdet - INFO - Epoch [5][650/2207]	lr: 7.523e-05, eta: 10:06:09, time: 1.048, data_time: 0.006, memory: 15993, loss_cls: 0.6284, loss_bbox: 0.9178, d0.loss_cls: 0.6457, d0.loss_bbox: 1.0762, d1.loss_cls: 0.6349, d1.loss_bbox: 0.9653, d2.loss_cls: 0.6277, d2.loss_bbox: 0.9364, d3.loss_cls: 0.6260, d3.loss_bbox: 0.9265, d4.loss_cls: 0.6268, d4.loss_bbox: 0.9233, aux_task0.loss_heatmap: 0.7284, aux_task0.loss_bbox: 0.3090, aux_task1.loss_heatmap: 1.0327, aux_task1.loss_bbox: 0.3646, aux_task2.loss_heatmap: 1.0196, aux_task2.loss_bbox: 0.3900, aux_task3.loss_heatmap: 0.8581, aux_task3.loss_bbox: 0.3048, aux_task4.loss_heatmap: 0.6295, aux_task4.loss_bbox: 0.3238, aux_task5.loss_heatmap: 0.6065, aux_task5.loss_bbox: 0.3182, loss: 16.4202, grad_norm: 34.8777
2025-05-04 20:54:37,694 - mmdet - INFO - Epoch [5][700/2207]	lr: 7.573e-05, eta: 10:05:16, time: 1.050, data_time: 0.006, memory: 15993, loss_cls: 0.6182, loss_bbox: 0.9096, d0.loss_cls: 0.6361, d0.loss_bbox: 1.0734, d1.loss_cls: 0.6247, d1.loss_bbox: 0.9578, d2.loss_cls: 0.6189, d2.loss_bbox: 0.9270, d3.loss_cls: 0.6159, d3.loss_bbox: 0.9191, d4.loss_cls: 0.6175, d4.loss_bbox: 0.9143, aux_task0.loss_heatmap: 0.7346, aux_task0.loss_bbox: 0.3071, aux_task1.loss_heatmap: 1.0016, aux_task1.loss_bbox: 0.3641, aux_task2.loss_heatmap: 1.0562, aux_task2.loss_bbox: 0.3833, aux_task3.loss_heatmap: 0.8807, aux_task3.loss_bbox: 0.3195, aux_task4.loss_heatmap: 0.6601, aux_task4.loss_bbox: 0.3218, aux_task5.loss_heatmap: 0.5917, aux_task5.loss_bbox: 0.3152, loss: 16.3683, grad_norm: 38.1720
2025-05-04 20:55:29,955 - mmdet - INFO - Epoch [5][750/2207]	lr: 7.622e-05, eta: 10:04:23, time: 1.045, data_time: 0.006, memory: 15993, loss_cls: 0.6040, loss_bbox: 0.8936, d0.loss_cls: 0.6239, d0.loss_bbox: 1.0564, d1.loss_cls: 0.6133, d1.loss_bbox: 0.9433, d2.loss_cls: 0.6066, d2.loss_bbox: 0.9126, d3.loss_cls: 0.6037, d3.loss_bbox: 0.9025, d4.loss_cls: 0.6022, d4.loss_bbox: 0.8987, aux_task0.loss_heatmap: 0.7054, aux_task0.loss_bbox: 0.3048, aux_task1.loss_heatmap: 0.9910, aux_task1.loss_bbox: 0.3584, aux_task2.loss_heatmap: 1.0566, aux_task2.loss_bbox: 0.3767, aux_task3.loss_heatmap: 0.7528, aux_task3.loss_bbox: 0.3115, aux_task4.loss_heatmap: 0.5984, aux_task4.loss_bbox: 0.3219, aux_task5.loss_heatmap: 0.6054, aux_task5.loss_bbox: 0.3169, loss: 15.9606, grad_norm: 34.1888
2025-05-04 20:56:22,514 - mmdet - INFO - Epoch [5][800/2207]	lr: 7.672e-05, eta: 10:03:31, time: 1.051, data_time: 0.006, memory: 15993, loss_cls: 0.6100, loss_bbox: 0.8995, d0.loss_cls: 0.6307, d0.loss_bbox: 1.0616, d1.loss_cls: 0.6157, d1.loss_bbox: 0.9474, d2.loss_cls: 0.6113, d2.loss_bbox: 0.9152, d3.loss_cls: 0.6086, d3.loss_bbox: 0.9062, d4.loss_cls: 0.6088, d4.loss_bbox: 0.9021, aux_task0.loss_heatmap: 0.7376, aux_task0.loss_bbox: 0.3078, aux_task1.loss_heatmap: 0.9761, aux_task1.loss_bbox: 0.3605, aux_task2.loss_heatmap: 1.0548, aux_task2.loss_bbox: 0.3717, aux_task3.loss_heatmap: 0.7791, aux_task3.loss_bbox: 0.3187, aux_task4.loss_heatmap: 0.5928, aux_task4.loss_bbox: 0.3227, aux_task5.loss_heatmap: 0.6125, aux_task5.loss_bbox: 0.3193, loss: 16.0708, grad_norm: 37.4286
2025-05-04 20:57:14,858 - mmdet - INFO - Epoch [5][850/2207]	lr: 7.722e-05, eta: 10:02:38, time: 1.047, data_time: 0.006, memory: 15993, loss_cls: 0.6070, loss_bbox: 0.9027, d0.loss_cls: 0.6280, d0.loss_bbox: 1.0626, d1.loss_cls: 0.6163, d1.loss_bbox: 0.9477, d2.loss_cls: 0.6102, d2.loss_bbox: 0.9175, d3.loss_cls: 0.6069, d3.loss_bbox: 0.9107, d4.loss_cls: 0.6068, d4.loss_bbox: 0.9058, aux_task0.loss_heatmap: 0.7648, aux_task0.loss_bbox: 0.3167, aux_task1.loss_heatmap: 0.9766, aux_task1.loss_bbox: 0.3609, aux_task2.loss_heatmap: 1.0471, aux_task2.loss_bbox: 0.3905, aux_task3.loss_heatmap: 0.7697, aux_task3.loss_bbox: 0.3009, aux_task4.loss_heatmap: 0.6197, aux_task4.loss_bbox: 0.3215, aux_task5.loss_heatmap: 0.6269, aux_task5.loss_bbox: 0.3161, loss: 16.1334, grad_norm: 35.4330
2025-05-04 20:58:07,287 - mmdet - INFO - Epoch [5][900/2207]	lr: 7.771e-05, eta: 10:01:46, time: 1.049, data_time: 0.007, memory: 15993, loss_cls: 0.6191, loss_bbox: 0.9077, d0.loss_cls: 0.6342, d0.loss_bbox: 1.0674, d1.loss_cls: 0.6215, d1.loss_bbox: 0.9573, d2.loss_cls: 0.6166, d2.loss_bbox: 0.9250, d3.loss_cls: 0.6155, d3.loss_bbox: 0.9172, d4.loss_cls: 0.6160, d4.loss_bbox: 0.9119, aux_task0.loss_heatmap: 0.7373, aux_task0.loss_bbox: 0.3145, aux_task1.loss_heatmap: 0.9359, aux_task1.loss_bbox: 0.3596, aux_task2.loss_heatmap: 1.0400, aux_task2.loss_bbox: 0.3861, aux_task3.loss_heatmap: 0.8808, aux_task3.loss_bbox: 0.3158, aux_task4.loss_heatmap: 0.6564, aux_task4.loss_bbox: 0.3289, aux_task5.loss_heatmap: 0.6169, aux_task5.loss_bbox: 0.3190, loss: 16.3006, grad_norm: 33.8273
2025-05-04 20:58:59,550 - mmdet - INFO - Epoch [5][950/2207]	lr: 7.820e-05, eta: 10:00:52, time: 1.045, data_time: 0.007, memory: 15993, loss_cls: 0.6102, loss_bbox: 0.9035, d0.loss_cls: 0.6259, d0.loss_bbox: 1.0601, d1.loss_cls: 0.6157, d1.loss_bbox: 0.9531, d2.loss_cls: 0.6116, d2.loss_bbox: 0.9194, d3.loss_cls: 0.6087, d3.loss_bbox: 0.9107, d4.loss_cls: 0.6093, d4.loss_bbox: 0.9058, aux_task0.loss_heatmap: 0.7437, aux_task0.loss_bbox: 0.3105, aux_task1.loss_heatmap: 1.0337, aux_task1.loss_bbox: 0.3665, aux_task2.loss_heatmap: 0.9739, aux_task2.loss_bbox: 0.3726, aux_task3.loss_heatmap: 0.7956, aux_task3.loss_bbox: 0.2981, aux_task4.loss_heatmap: 0.6071, aux_task4.loss_bbox: 0.3181, aux_task5.loss_heatmap: 0.5936, aux_task5.loss_bbox: 0.3124, loss: 16.0596, grad_norm: 33.2987
2025-05-04 20:59:51,913 - mmdet - INFO - Epoch [5][1000/2207]	lr: 7.870e-05, eta: 10:00:00, time: 1.047, data_time: 0.007, memory: 15993, loss_cls: 0.6059, loss_bbox: 0.9025, d0.loss_cls: 0.6213, d0.loss_bbox: 1.0585, d1.loss_cls: 0.6112, d1.loss_bbox: 0.9466, d2.loss_cls: 0.6058, d2.loss_bbox: 0.9169, d3.loss_cls: 0.6050, d3.loss_bbox: 0.9074, d4.loss_cls: 0.6051, d4.loss_bbox: 0.9028, aux_task0.loss_heatmap: 0.7282, aux_task0.loss_bbox: 0.3111, aux_task1.loss_heatmap: 0.9723, aux_task1.loss_bbox: 0.3561, aux_task2.loss_heatmap: 0.9974, aux_task2.loss_bbox: 0.3834, aux_task3.loss_heatmap: 0.8238, aux_task3.loss_bbox: 0.2997, aux_task4.loss_heatmap: 0.6226, aux_task4.loss_bbox: 0.3199, aux_task5.loss_heatmap: 0.5965, aux_task5.loss_bbox: 0.3107, loss: 16.0108, grad_norm: 35.9155
2025-05-04 21:00:44,029 - mmdet - INFO - Epoch [5][1050/2207]	lr: 7.919e-05, eta: 9:59:06, time: 1.042, data_time: 0.006, memory: 15993, loss_cls: 0.6079, loss_bbox: 0.9014, d0.loss_cls: 0.6256, d0.loss_bbox: 1.0637, d1.loss_cls: 0.6131, d1.loss_bbox: 0.9504, d2.loss_cls: 0.6058, d2.loss_bbox: 0.9181, d3.loss_cls: 0.6034, d3.loss_bbox: 0.9116, d4.loss_cls: 0.6070, d4.loss_bbox: 0.9048, aux_task0.loss_heatmap: 0.7332, aux_task0.loss_bbox: 0.3027, aux_task1.loss_heatmap: 0.9429, aux_task1.loss_bbox: 0.3528, aux_task2.loss_heatmap: 1.0335, aux_task2.loss_bbox: 0.3750, aux_task3.loss_heatmap: 0.7875, aux_task3.loss_bbox: 0.3011, aux_task4.loss_heatmap: 0.6165, aux_task4.loss_bbox: 0.3223, aux_task5.loss_heatmap: 0.5976, aux_task5.loss_bbox: 0.3090, loss: 15.9870, grad_norm: 36.9210
2025-05-04 21:01:36,478 - mmdet - INFO - Epoch [5][1100/2207]	lr: 7.968e-05, eta: 9:58:14, time: 1.049, data_time: 0.006, memory: 15993, loss_cls: 0.5999, loss_bbox: 0.9016, d0.loss_cls: 0.6246, d0.loss_bbox: 1.0514, d1.loss_cls: 0.6108, d1.loss_bbox: 0.9461, d2.loss_cls: 0.6033, d2.loss_bbox: 0.9181, d3.loss_cls: 0.6002, d3.loss_bbox: 0.9089, d4.loss_cls: 0.5997, d4.loss_bbox: 0.9042, aux_task0.loss_heatmap: 0.7305, aux_task0.loss_bbox: 0.3102, aux_task1.loss_heatmap: 0.9593, aux_task1.loss_bbox: 0.3621, aux_task2.loss_heatmap: 1.0128, aux_task2.loss_bbox: 0.3849, aux_task3.loss_heatmap: 0.8761, aux_task3.loss_bbox: 0.3018, aux_task4.loss_heatmap: 0.5881, aux_task4.loss_bbox: 0.3235, aux_task5.loss_heatmap: 0.6022, aux_task5.loss_bbox: 0.3130, loss: 16.0331, grad_norm: 35.4895
2025-05-04 21:02:28,651 - mmdet - INFO - Epoch [5][1150/2207]	lr: 8.017e-05, eta: 9:57:20, time: 1.043, data_time: 0.006, memory: 15993, loss_cls: 0.5987, loss_bbox: 0.9087, d0.loss_cls: 0.6166, d0.loss_bbox: 1.0541, d1.loss_cls: 0.6021, d1.loss_bbox: 0.9520, d2.loss_cls: 0.5979, d2.loss_bbox: 0.9247, d3.loss_cls: 0.5993, d3.loss_bbox: 0.9150, d4.loss_cls: 0.5980, d4.loss_bbox: 0.9115, aux_task0.loss_heatmap: 0.7234, aux_task0.loss_bbox: 0.3088, aux_task1.loss_heatmap: 0.9431, aux_task1.loss_bbox: 0.3562, aux_task2.loss_heatmap: 1.0464, aux_task2.loss_bbox: 0.3910, aux_task3.loss_heatmap: 0.8655, aux_task3.loss_bbox: 0.3164, aux_task4.loss_heatmap: 0.5934, aux_task4.loss_bbox: 0.3122, aux_task5.loss_heatmap: 0.5963, aux_task5.loss_bbox: 0.3126, loss: 16.0439, grad_norm: 38.1661
2025-05-04 21:03:21,041 - mmdet - INFO - Epoch [5][1200/2207]	lr: 8.066e-05, eta: 9:56:27, time: 1.048, data_time: 0.006, memory: 15993, loss_cls: 0.5931, loss_bbox: 0.8977, d0.loss_cls: 0.6100, d0.loss_bbox: 1.0525, d1.loss_cls: 0.5996, d1.loss_bbox: 0.9462, d2.loss_cls: 0.5913, d2.loss_bbox: 0.9170, d3.loss_cls: 0.5914, d3.loss_bbox: 0.9063, d4.loss_cls: 0.5945, d4.loss_bbox: 0.9008, aux_task0.loss_heatmap: 0.7232, aux_task0.loss_bbox: 0.3075, aux_task1.loss_heatmap: 0.9745, aux_task1.loss_bbox: 0.3625, aux_task2.loss_heatmap: 0.9681, aux_task2.loss_bbox: 0.3818, aux_task3.loss_heatmap: 0.8088, aux_task3.loss_bbox: 0.3063, aux_task4.loss_heatmap: 0.5674, aux_task4.loss_bbox: 0.3175, aux_task5.loss_heatmap: 0.6114, aux_task5.loss_bbox: 0.3180, loss: 15.8474, grad_norm: 36.3443
2025-05-04 21:04:13,554 - mmdet - INFO - Epoch [5][1250/2207]	lr: 8.115e-05, eta: 9:55:35, time: 1.050, data_time: 0.006, memory: 15993, loss_cls: 0.6076, loss_bbox: 0.9149, d0.loss_cls: 0.6220, d0.loss_bbox: 1.0664, d1.loss_cls: 0.6131, d1.loss_bbox: 0.9585, d2.loss_cls: 0.6087, d2.loss_bbox: 0.9279, d3.loss_cls: 0.6069, d3.loss_bbox: 0.9215, d4.loss_cls: 0.6098, d4.loss_bbox: 0.9160, aux_task0.loss_heatmap: 0.7524, aux_task0.loss_bbox: 0.3183, aux_task1.loss_heatmap: 0.9157, aux_task1.loss_bbox: 0.3557, aux_task2.loss_heatmap: 1.0475, aux_task2.loss_bbox: 0.3909, aux_task3.loss_heatmap: 0.8239, aux_task3.loss_bbox: 0.3129, aux_task4.loss_heatmap: 0.6277, aux_task4.loss_bbox: 0.3265, aux_task5.loss_heatmap: 0.6463, aux_task5.loss_bbox: 0.3211, loss: 16.2123, grad_norm: 38.0089
2025-05-04 21:05:07,773 - mmdet - INFO - Epoch [5][1300/2207]	lr: 8.164e-05, eta: 9:54:49, time: 1.084, data_time: 0.007, memory: 15993, loss_cls: 0.5965, loss_bbox: 0.9007, d0.loss_cls: 0.6171, d0.loss_bbox: 1.0532, d1.loss_cls: 0.6065, d1.loss_bbox: 0.9469, d2.loss_cls: 0.6004, d2.loss_bbox: 0.9189, d3.loss_cls: 0.5971, d3.loss_bbox: 0.9114, d4.loss_cls: 0.5975, d4.loss_bbox: 0.9048, aux_task0.loss_heatmap: 0.7069, aux_task0.loss_bbox: 0.3079, aux_task1.loss_heatmap: 0.9025, aux_task1.loss_bbox: 0.3597, aux_task2.loss_heatmap: 1.0212, aux_task2.loss_bbox: 0.3856, aux_task3.loss_heatmap: 0.8025, aux_task3.loss_bbox: 0.3102, aux_task4.loss_heatmap: 0.6338, aux_task4.loss_bbox: 0.3197, aux_task5.loss_heatmap: 0.5859, aux_task5.loss_bbox: 0.3190, loss: 15.9057, grad_norm: 37.3023
2025-05-04 21:06:00,160 - mmdet - INFO - Epoch [5][1350/2207]	lr: 8.212e-05, eta: 9:53:56, time: 1.048, data_time: 0.007, memory: 15993, loss_cls: 0.5978, loss_bbox: 0.8983, d0.loss_cls: 0.6159, d0.loss_bbox: 1.0452, d1.loss_cls: 0.6041, d1.loss_bbox: 0.9433, d2.loss_cls: 0.5990, d2.loss_bbox: 0.9136, d3.loss_cls: 0.5974, d3.loss_bbox: 0.9056, d4.loss_cls: 0.5971, d4.loss_bbox: 0.9004, aux_task0.loss_heatmap: 0.7259, aux_task0.loss_bbox: 0.3109, aux_task1.loss_heatmap: 0.9563, aux_task1.loss_bbox: 0.3623, aux_task2.loss_heatmap: 1.0149, aux_task2.loss_bbox: 0.3783, aux_task3.loss_heatmap: 0.8319, aux_task3.loss_bbox: 0.2992, aux_task4.loss_heatmap: 0.5853, aux_task4.loss_bbox: 0.3213, aux_task5.loss_heatmap: 0.5964, aux_task5.loss_bbox: 0.3148, loss: 15.9149, grad_norm: 34.4737
2025-05-04 21:06:52,453 - mmdet - INFO - Epoch [5][1400/2207]	lr: 8.261e-05, eta: 9:53:03, time: 1.046, data_time: 0.006, memory: 15993, loss_cls: 0.5953, loss_bbox: 0.8859, d0.loss_cls: 0.6128, d0.loss_bbox: 1.0388, d1.loss_cls: 0.5998, d1.loss_bbox: 0.9302, d2.loss_cls: 0.5948, d2.loss_bbox: 0.9009, d3.loss_cls: 0.5955, d3.loss_bbox: 0.8917, d4.loss_cls: 0.5940, d4.loss_bbox: 0.8889, aux_task0.loss_heatmap: 0.7261, aux_task0.loss_bbox: 0.3016, aux_task1.loss_heatmap: 0.9553, aux_task1.loss_bbox: 0.3521, aux_task2.loss_heatmap: 0.9965, aux_task2.loss_bbox: 0.3750, aux_task3.loss_heatmap: 0.8449, aux_task3.loss_bbox: 0.3091, aux_task4.loss_heatmap: 0.6016, aux_task4.loss_bbox: 0.3198, aux_task5.loss_heatmap: 0.5753, aux_task5.loss_bbox: 0.3131, loss: 15.7990, grad_norm: 34.4839
2025-05-04 21:07:44,913 - mmdet - INFO - Epoch [5][1450/2207]	lr: 8.309e-05, eta: 9:52:10, time: 1.049, data_time: 0.007, memory: 15993, loss_cls: 0.5919, loss_bbox: 0.8874, d0.loss_cls: 0.6114, d0.loss_bbox: 1.0405, d1.loss_cls: 0.5995, d1.loss_bbox: 0.9356, d2.loss_cls: 0.5919, d2.loss_bbox: 0.9069, d3.loss_cls: 0.5904, d3.loss_bbox: 0.8973, d4.loss_cls: 0.5905, d4.loss_bbox: 0.8922, aux_task0.loss_heatmap: 0.6799, aux_task0.loss_bbox: 0.3118, aux_task1.loss_heatmap: 0.9509, aux_task1.loss_bbox: 0.3551, aux_task2.loss_heatmap: 1.0256, aux_task2.loss_bbox: 0.3881, aux_task3.loss_heatmap: 0.8210, aux_task3.loss_bbox: 0.3040, aux_task4.loss_heatmap: 0.6253, aux_task4.loss_bbox: 0.3186, aux_task5.loss_heatmap: 0.5824, aux_task5.loss_bbox: 0.3117, loss: 15.8100, grad_norm: 34.7911
2025-05-04 21:08:37,178 - mmdet - INFO - Epoch [5][1500/2207]	lr: 8.358e-05, eta: 9:51:17, time: 1.045, data_time: 0.007, memory: 15993, loss_cls: 0.5949, loss_bbox: 0.8877, d0.loss_cls: 0.6165, d0.loss_bbox: 1.0397, d1.loss_cls: 0.6034, d1.loss_bbox: 0.9337, d2.loss_cls: 0.5978, d2.loss_bbox: 0.9043, d3.loss_cls: 0.5963, d3.loss_bbox: 0.8953, d4.loss_cls: 0.5966, d4.loss_bbox: 0.8895, aux_task0.loss_heatmap: 0.7185, aux_task0.loss_bbox: 0.3055, aux_task1.loss_heatmap: 0.9642, aux_task1.loss_bbox: 0.3574, aux_task2.loss_heatmap: 0.9622, aux_task2.loss_bbox: 0.3736, aux_task3.loss_heatmap: 0.8134, aux_task3.loss_bbox: 0.2986, aux_task4.loss_heatmap: 0.6184, aux_task4.loss_bbox: 0.3205, aux_task5.loss_heatmap: 0.6270, aux_task5.loss_bbox: 0.3191, loss: 15.8342, grad_norm: 32.7165
2025-05-04 21:09:29,561 - mmdet - INFO - Epoch [5][1550/2207]	lr: 8.406e-05, eta: 9:50:25, time: 1.048, data_time: 0.006, memory: 15993, loss_cls: 0.5999, loss_bbox: 0.8961, d0.loss_cls: 0.6212, d0.loss_bbox: 1.0503, d1.loss_cls: 0.6089, d1.loss_bbox: 0.9425, d2.loss_cls: 0.6005, d2.loss_bbox: 0.9124, d3.loss_cls: 0.5982, d3.loss_bbox: 0.9036, d4.loss_cls: 0.5976, d4.loss_bbox: 0.8990, aux_task0.loss_heatmap: 0.7563, aux_task0.loss_bbox: 0.3118, aux_task1.loss_heatmap: 0.9732, aux_task1.loss_bbox: 0.3553, aux_task2.loss_heatmap: 1.0367, aux_task2.loss_bbox: 0.3828, aux_task3.loss_heatmap: 0.8322, aux_task3.loss_bbox: 0.3035, aux_task4.loss_heatmap: 0.5906, aux_task4.loss_bbox: 0.3098, aux_task5.loss_heatmap: 0.5977, aux_task5.loss_bbox: 0.3101, loss: 15.9903, grad_norm: 34.8630
2025-05-04 21:10:22,054 - mmdet - INFO - Epoch [5][1600/2207]	lr: 8.454e-05, eta: 9:49:32, time: 1.050, data_time: 0.006, memory: 15993, loss_cls: 0.5704, loss_bbox: 0.8795, d0.loss_cls: 0.5990, d0.loss_bbox: 1.0319, d1.loss_cls: 0.5861, d1.loss_bbox: 0.9233, d2.loss_cls: 0.5745, d2.loss_bbox: 0.8969, d3.loss_cls: 0.5747, d3.loss_bbox: 0.8867, d4.loss_cls: 0.5718, d4.loss_bbox: 0.8833, aux_task0.loss_heatmap: 0.7142, aux_task0.loss_bbox: 0.3031, aux_task1.loss_heatmap: 0.9084, aux_task1.loss_bbox: 0.3575, aux_task2.loss_heatmap: 0.9878, aux_task2.loss_bbox: 0.3740, aux_task3.loss_heatmap: 0.7780, aux_task3.loss_bbox: 0.3009, aux_task4.loss_heatmap: 0.6019, aux_task4.loss_bbox: 0.3162, aux_task5.loss_heatmap: 0.5931, aux_task5.loss_bbox: 0.3105, loss: 15.5236, grad_norm: 34.8465
2025-05-04 21:11:14,215 - mmdet - INFO - Epoch [5][1650/2207]	lr: 8.502e-05, eta: 9:48:39, time: 1.043, data_time: 0.006, memory: 15993, loss_cls: 0.5851, loss_bbox: 0.8935, d0.loss_cls: 0.6103, d0.loss_bbox: 1.0395, d1.loss_cls: 0.5906, d1.loss_bbox: 0.9391, d2.loss_cls: 0.5872, d2.loss_bbox: 0.9083, d3.loss_cls: 0.5818, d3.loss_bbox: 0.9020, d4.loss_cls: 0.5839, d4.loss_bbox: 0.8976, aux_task0.loss_heatmap: 0.7147, aux_task0.loss_bbox: 0.3063, aux_task1.loss_heatmap: 0.9471, aux_task1.loss_bbox: 0.3531, aux_task2.loss_heatmap: 0.9631, aux_task2.loss_bbox: 0.3801, aux_task3.loss_heatmap: 0.7681, aux_task3.loss_bbox: 0.3023, aux_task4.loss_heatmap: 0.5838, aux_task4.loss_bbox: 0.3184, aux_task5.loss_heatmap: 0.5989, aux_task5.loss_bbox: 0.3125, loss: 15.6673, grad_norm: 33.2471
2025-05-04 21:12:06,446 - mmdet - INFO - Epoch [5][1700/2207]	lr: 8.550e-05, eta: 9:47:46, time: 1.045, data_time: 0.007, memory: 15993, loss_cls: 0.5910, loss_bbox: 0.8901, d0.loss_cls: 0.6116, d0.loss_bbox: 1.0416, d1.loss_cls: 0.5964, d1.loss_bbox: 0.9335, d2.loss_cls: 0.5903, d2.loss_bbox: 0.9047, d3.loss_cls: 0.5894, d3.loss_bbox: 0.8976, d4.loss_cls: 0.5901, d4.loss_bbox: 0.8930, aux_task0.loss_heatmap: 0.6903, aux_task0.loss_bbox: 0.3089, aux_task1.loss_heatmap: 0.9773, aux_task1.loss_bbox: 0.3630, aux_task2.loss_heatmap: 0.9963, aux_task2.loss_bbox: 0.3840, aux_task3.loss_heatmap: 0.8272, aux_task3.loss_bbox: 0.3045, aux_task4.loss_heatmap: 0.5678, aux_task4.loss_bbox: 0.3002, aux_task5.loss_heatmap: 0.6070, aux_task5.loss_bbox: 0.3126, loss: 15.7685, grad_norm: 35.2573
2025-05-04 21:12:59,019 - mmdet - INFO - Epoch [5][1750/2207]	lr: 8.597e-05, eta: 9:46:53, time: 1.051, data_time: 0.009, memory: 15993, loss_cls: 0.5845, loss_bbox: 0.8884, d0.loss_cls: 0.6077, d0.loss_bbox: 1.0378, d1.loss_cls: 0.5955, d1.loss_bbox: 0.9337, d2.loss_cls: 0.5883, d2.loss_bbox: 0.9047, d3.loss_cls: 0.5847, d3.loss_bbox: 0.8961, d4.loss_cls: 0.5833, d4.loss_bbox: 0.8907, aux_task0.loss_heatmap: 0.6676, aux_task0.loss_bbox: 0.2993, aux_task1.loss_heatmap: 0.9706, aux_task1.loss_bbox: 0.3496, aux_task2.loss_heatmap: 1.0233, aux_task2.loss_bbox: 0.3921, aux_task3.loss_heatmap: 0.8443, aux_task3.loss_bbox: 0.3056, aux_task4.loss_heatmap: 0.5957, aux_task4.loss_bbox: 0.3082, aux_task5.loss_heatmap: 0.5802, aux_task5.loss_bbox: 0.3088, loss: 15.7407, grad_norm: 32.4153
2025-05-04 21:13:51,434 - mmdet - INFO - Epoch [5][1800/2207]	lr: 8.645e-05, eta: 9:46:01, time: 1.048, data_time: 0.006, memory: 15993, loss_cls: 0.5981, loss_bbox: 0.8810, d0.loss_cls: 0.6179, d0.loss_bbox: 1.0278, d1.loss_cls: 0.6057, d1.loss_bbox: 0.9221, d2.loss_cls: 0.5988, d2.loss_bbox: 0.8942, d3.loss_cls: 0.5971, d3.loss_bbox: 0.8873, d4.loss_cls: 0.5976, d4.loss_bbox: 0.8837, aux_task0.loss_heatmap: 0.7168, aux_task0.loss_bbox: 0.3023, aux_task1.loss_heatmap: 0.9593, aux_task1.loss_bbox: 0.3568, aux_task2.loss_heatmap: 0.9658, aux_task2.loss_bbox: 0.3815, aux_task3.loss_heatmap: 0.7987, aux_task3.loss_bbox: 0.3008, aux_task4.loss_heatmap: 0.6162, aux_task4.loss_bbox: 0.3094, aux_task5.loss_heatmap: 0.5935, aux_task5.loss_bbox: 0.3117, loss: 15.7240, grad_norm: 32.7953
2025-05-04 21:14:44,010 - mmdet - INFO - Epoch [5][1850/2207]	lr: 8.692e-05, eta: 9:45:09, time: 1.052, data_time: 0.007, memory: 15993, loss_cls: 0.5751, loss_bbox: 0.8937, d0.loss_cls: 0.5978, d0.loss_bbox: 1.0476, d1.loss_cls: 0.5828, d1.loss_bbox: 0.9393, d2.loss_cls: 0.5778, d2.loss_bbox: 0.9095, d3.loss_cls: 0.5744, d3.loss_bbox: 0.9022, d4.loss_cls: 0.5737, d4.loss_bbox: 0.8979, aux_task0.loss_heatmap: 0.7101, aux_task0.loss_bbox: 0.3011, aux_task1.loss_heatmap: 0.9863, aux_task1.loss_bbox: 0.3608, aux_task2.loss_heatmap: 0.9799, aux_task2.loss_bbox: 0.3792, aux_task3.loss_heatmap: 0.7585, aux_task3.loss_bbox: 0.3096, aux_task4.loss_heatmap: 0.5818, aux_task4.loss_bbox: 0.3150, aux_task5.loss_heatmap: 0.5626, aux_task5.loss_bbox: 0.3133, loss: 15.6301, grad_norm: 33.0813
2025-05-04 21:15:36,127 - mmdet - INFO - Epoch [5][1900/2207]	lr: 8.740e-05, eta: 9:44:15, time: 1.042, data_time: 0.007, memory: 15993, loss_cls: 0.5758, loss_bbox: 0.8792, d0.loss_cls: 0.6009, d0.loss_bbox: 1.0220, d1.loss_cls: 0.5851, d1.loss_bbox: 0.9223, d2.loss_cls: 0.5768, d2.loss_bbox: 0.8964, d3.loss_cls: 0.5748, d3.loss_bbox: 0.8889, d4.loss_cls: 0.5752, d4.loss_bbox: 0.8836, aux_task0.loss_heatmap: 0.6832, aux_task0.loss_bbox: 0.2951, aux_task1.loss_heatmap: 0.9438, aux_task1.loss_bbox: 0.3535, aux_task2.loss_heatmap: 0.9907, aux_task2.loss_bbox: 0.3717, aux_task3.loss_heatmap: 0.7264, aux_task3.loss_bbox: 0.3040, aux_task4.loss_heatmap: 0.5783, aux_task4.loss_bbox: 0.3101, aux_task5.loss_heatmap: 0.5951, aux_task5.loss_bbox: 0.3143, loss: 15.4474, grad_norm: 34.3076
2025-05-04 21:16:28,379 - mmdet - INFO - Epoch [5][1950/2207]	lr: 8.787e-05, eta: 9:43:22, time: 1.045, data_time: 0.006, memory: 15993, loss_cls: 0.5804, loss_bbox: 0.8854, d0.loss_cls: 0.6032, d0.loss_bbox: 1.0291, d1.loss_cls: 0.5864, d1.loss_bbox: 0.9284, d2.loss_cls: 0.5801, d2.loss_bbox: 0.9021, d3.loss_cls: 0.5811, d3.loss_bbox: 0.8927, d4.loss_cls: 0.5814, d4.loss_bbox: 0.8884, aux_task0.loss_heatmap: 0.7021, aux_task0.loss_bbox: 0.3061, aux_task1.loss_heatmap: 0.9929, aux_task1.loss_bbox: 0.3561, aux_task2.loss_heatmap: 1.0278, aux_task2.loss_bbox: 0.3814, aux_task3.loss_heatmap: 0.7968, aux_task3.loss_bbox: 0.3161, aux_task4.loss_heatmap: 0.5903, aux_task4.loss_bbox: 0.3108, aux_task5.loss_heatmap: 0.6038, aux_task5.loss_bbox: 0.3110, loss: 15.7338, grad_norm: 33.9647
2025-05-04 21:17:20,614 - mmdet - INFO - Epoch [5][2000/2207]	lr: 8.834e-05, eta: 9:42:29, time: 1.045, data_time: 0.007, memory: 15993, loss_cls: 0.5638, loss_bbox: 0.8743, d0.loss_cls: 0.5879, d0.loss_bbox: 1.0228, d1.loss_cls: 0.5735, d1.loss_bbox: 0.9209, d2.loss_cls: 0.5670, d2.loss_bbox: 0.8921, d3.loss_cls: 0.5643, d3.loss_bbox: 0.8828, d4.loss_cls: 0.5660, d4.loss_bbox: 0.8761, aux_task0.loss_heatmap: 0.6636, aux_task0.loss_bbox: 0.3017, aux_task1.loss_heatmap: 0.9681, aux_task1.loss_bbox: 0.3571, aux_task2.loss_heatmap: 0.9503, aux_task2.loss_bbox: 0.3783, aux_task3.loss_heatmap: 0.7351, aux_task3.loss_bbox: 0.3087, aux_task4.loss_heatmap: 0.5665, aux_task4.loss_bbox: 0.3168, aux_task5.loss_heatmap: 0.5625, aux_task5.loss_bbox: 0.3081, loss: 15.3084, grad_norm: 34.5071
2025-05-04 21:18:12,918 - mmdet - INFO - Epoch [5][2050/2207]	lr: 8.881e-05, eta: 9:41:36, time: 1.046, data_time: 0.007, memory: 15993, loss_cls: 0.5698, loss_bbox: 0.8739, d0.loss_cls: 0.5957, d0.loss_bbox: 1.0226, d1.loss_cls: 0.5822, d1.loss_bbox: 0.9163, d2.loss_cls: 0.5732, d2.loss_bbox: 0.8911, d3.loss_cls: 0.5718, d3.loss_bbox: 0.8813, d4.loss_cls: 0.5722, d4.loss_bbox: 0.8763, aux_task0.loss_heatmap: 0.6740, aux_task0.loss_bbox: 0.2969, aux_task1.loss_heatmap: 0.9230, aux_task1.loss_bbox: 0.3533, aux_task2.loss_heatmap: 0.9775, aux_task2.loss_bbox: 0.3701, aux_task3.loss_heatmap: 0.7550, aux_task3.loss_bbox: 0.3014, aux_task4.loss_heatmap: 0.5803, aux_task4.loss_bbox: 0.3079, aux_task5.loss_heatmap: 0.5860, aux_task5.loss_bbox: 0.3182, loss: 15.3701, grad_norm: 36.2991
2025-05-04 21:19:05,136 - mmdet - INFO - Epoch [5][2100/2207]	lr: 8.927e-05, eta: 9:40:43, time: 1.044, data_time: 0.006, memory: 15993, loss_cls: 0.5860, loss_bbox: 0.8933, d0.loss_cls: 0.6046, d0.loss_bbox: 1.0316, d1.loss_cls: 0.5926, d1.loss_bbox: 0.9335, d2.loss_cls: 0.5872, d2.loss_bbox: 0.9078, d3.loss_cls: 0.5852, d3.loss_bbox: 0.9023, d4.loss_cls: 0.5850, d4.loss_bbox: 0.8969, aux_task0.loss_heatmap: 0.7044, aux_task0.loss_bbox: 0.3039, aux_task1.loss_heatmap: 0.9753, aux_task1.loss_bbox: 0.3619, aux_task2.loss_heatmap: 0.9474, aux_task2.loss_bbox: 0.3661, aux_task3.loss_heatmap: 0.8176, aux_task3.loss_bbox: 0.2991, aux_task4.loss_heatmap: 0.5937, aux_task4.loss_bbox: 0.3149, aux_task5.loss_heatmap: 0.5822, aux_task5.loss_bbox: 0.3078, loss: 15.6805, grad_norm: 35.2941
2025-05-04 21:19:57,427 - mmdet - INFO - Epoch [5][2150/2207]	lr: 8.974e-05, eta: 9:39:50, time: 1.046, data_time: 0.006, memory: 15993, loss_cls: 0.5653, loss_bbox: 0.8757, d0.loss_cls: 0.5866, d0.loss_bbox: 1.0256, d1.loss_cls: 0.5754, d1.loss_bbox: 0.9181, d2.loss_cls: 0.5710, d2.loss_bbox: 0.8907, d3.loss_cls: 0.5673, d3.loss_bbox: 0.8811, d4.loss_cls: 0.5660, d4.loss_bbox: 0.8782, aux_task0.loss_heatmap: 0.7010, aux_task0.loss_bbox: 0.2996, aux_task1.loss_heatmap: 0.9311, aux_task1.loss_bbox: 0.3456, aux_task2.loss_heatmap: 0.9612, aux_task2.loss_bbox: 0.3730, aux_task3.loss_heatmap: 0.8100, aux_task3.loss_bbox: 0.3081, aux_task4.loss_heatmap: 0.5626, aux_task4.loss_bbox: 0.3116, aux_task5.loss_heatmap: 0.5602, aux_task5.loss_bbox: 0.3067, loss: 15.3717, grad_norm: 34.9061
2025-05-04 21:20:49,977 - mmdet - INFO - Epoch [5][2200/2207]	lr: 9.020e-05, eta: 9:38:58, time: 1.051, data_time: 0.009, memory: 15993, loss_cls: 0.5700, loss_bbox: 0.8919, d0.loss_cls: 0.5899, d0.loss_bbox: 1.0374, d1.loss_cls: 0.5779, d1.loss_bbox: 0.9368, d2.loss_cls: 0.5727, d2.loss_bbox: 0.9077, d3.loss_cls: 0.5705, d3.loss_bbox: 0.9001, d4.loss_cls: 0.5703, d4.loss_bbox: 0.8959, aux_task0.loss_heatmap: 0.7020, aux_task0.loss_bbox: 0.3001, aux_task1.loss_heatmap: 0.9367, aux_task1.loss_bbox: 0.3584, aux_task2.loss_heatmap: 0.9622, aux_task2.loss_bbox: 0.3826, aux_task3.loss_heatmap: 0.7381, aux_task3.loss_bbox: 0.3029, aux_task4.loss_heatmap: 0.6053, aux_task4.loss_bbox: 0.3210, aux_task5.loss_heatmap: 0.5733, aux_task5.loss_bbox: 0.3127, loss: 15.5163, grad_norm: 37.2332
2025-05-04 21:20:57,605 - mmdet - INFO - Saving checkpoint at 5 epochs
2025-05-04 21:34:27,310 - mmdet - INFO - Exp name: lidar_0075v_900q_split14_cascadeded_secondmamba2.py
2025-05-04 21:34:27,310 - mmdet - INFO - Epoch(val) [5][3010]	pts_bbox_NuScenes/car_AP_dist_0.5: 0.2474, pts_bbox_NuScenes/car_AP_dist_1.0: 0.4300, pts_bbox_NuScenes/car_AP_dist_2.0: 0.5391, pts_bbox_NuScenes/car_AP_dist_4.0: 0.6209, pts_bbox_NuScenes/car_trans_err: 0.4200, pts_bbox_NuScenes/car_scale_err: 0.2624, pts_bbox_NuScenes/car_orient_err: 1.2447, pts_bbox_NuScenes/car_vel_err: 1.2471, pts_bbox_NuScenes/car_attr_err: 0.4015, pts_bbox_NuScenes/mATE: 0.5870, pts_bbox_NuScenes/mASE: 0.3366, pts_bbox_NuScenes/mAOE: 1.4050, pts_bbox_NuScenes/mAVE: 1.1266, pts_bbox_NuScenes/mAAE: 0.4543, pts_bbox_NuScenes/truck_AP_dist_0.5: 0.0169, pts_bbox_NuScenes/truck_AP_dist_1.0: 0.0792, pts_bbox_NuScenes/truck_AP_dist_2.0: 0.1372, pts_bbox_NuScenes/truck_AP_dist_4.0: 0.1737, pts_bbox_NuScenes/truck_trans_err: 0.6136, pts_bbox_NuScenes/truck_scale_err: 0.2845, pts_bbox_NuScenes/truck_orient_err: 1.5579, pts_bbox_NuScenes/truck_vel_err: 0.9293, pts_bbox_NuScenes/truck_attr_err: 0.3817, pts_bbox_NuScenes/construction_vehicle_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/construction_vehicle_AP_dist_1.0: 0.0004, pts_bbox_NuScenes/construction_vehicle_AP_dist_2.0: 0.0105, pts_bbox_NuScenes/construction_vehicle_AP_dist_4.0: 0.0177, pts_bbox_NuScenes/construction_vehicle_trans_err: 0.8614, pts_bbox_NuScenes/construction_vehicle_scale_err: 0.5098, pts_bbox_NuScenes/construction_vehicle_orient_err: 1.5624, pts_bbox_NuScenes/construction_vehicle_vel_err: 0.1277, pts_bbox_NuScenes/construction_vehicle_attr_err: 0.3655, pts_bbox_NuScenes/bus_AP_dist_0.5: 0.0089, pts_bbox_NuScenes/bus_AP_dist_1.0: 0.0967, pts_bbox_NuScenes/bus_AP_dist_2.0: 0.2519, pts_bbox_NuScenes/bus_AP_dist_4.0: 0.3663, pts_bbox_NuScenes/bus_trans_err: 0.7910, pts_bbox_NuScenes/bus_scale_err: 0.2920, pts_bbox_NuScenes/bus_orient_err: 1.5740, pts_bbox_NuScenes/bus_vel_err: 2.3057, pts_bbox_NuScenes/bus_attr_err: 0.6360, pts_bbox_NuScenes/trailer_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/trailer_AP_dist_1.0: 0.0064, pts_bbox_NuScenes/trailer_AP_dist_2.0: 0.0271, pts_bbox_NuScenes/trailer_AP_dist_4.0: 0.0603, pts_bbox_NuScenes/trailer_trans_err: 0.8496, pts_bbox_NuScenes/trailer_scale_err: 0.3130, pts_bbox_NuScenes/trailer_orient_err: 1.5563, pts_bbox_NuScenes/trailer_vel_err: 0.5483, pts_bbox_NuScenes/trailer_attr_err: 0.2745, pts_bbox_NuScenes/barrier_AP_dist_0.5: 0.0914, pts_bbox_NuScenes/barrier_AP_dist_1.0: 0.2942, pts_bbox_NuScenes/barrier_AP_dist_2.0: 0.4638, pts_bbox_NuScenes/barrier_AP_dist_4.0: 0.5334, pts_bbox_NuScenes/barrier_trans_err: 0.6644, pts_bbox_NuScenes/barrier_scale_err: 0.3520, pts_bbox_NuScenes/barrier_orient_err: 0.6307, pts_bbox_NuScenes/barrier_vel_err: nan, pts_bbox_NuScenes/barrier_attr_err: nan, pts_bbox_NuScenes/motorcycle_AP_dist_0.5: 0.0204, pts_bbox_NuScenes/motorcycle_AP_dist_1.0: 0.0503, pts_bbox_NuScenes/motorcycle_AP_dist_2.0: 0.0716, pts_bbox_NuScenes/motorcycle_AP_dist_4.0: 0.0794, pts_bbox_NuScenes/motorcycle_trans_err: 0.4656, pts_bbox_NuScenes/motorcycle_scale_err: 0.3157, pts_bbox_NuScenes/motorcycle_orient_err: 1.5063, pts_bbox_NuScenes/motorcycle_vel_err: 2.1158, pts_bbox_NuScenes/motorcycle_attr_err: 0.5484, pts_bbox_NuScenes/bicycle_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/bicycle_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/bicycle_AP_dist_2.0: 0.0000, pts_bbox_NuScenes/bicycle_AP_dist_4.0: 0.0000, pts_bbox_NuScenes/bicycle_trans_err: 0.4159, pts_bbox_NuScenes/bicycle_scale_err: 0.2994, pts_bbox_NuScenes/bicycle_orient_err: 1.4858, pts_bbox_NuScenes/bicycle_vel_err: 0.6834, pts_bbox_NuScenes/bicycle_attr_err: 0.1658, pts_bbox_NuScenes/pedestrian_AP_dist_0.5: 0.2418, pts_bbox_NuScenes/pedestrian_AP_dist_1.0: 0.4398, pts_bbox_NuScenes/pedestrian_AP_dist_2.0: 0.4873, pts_bbox_NuScenes/pedestrian_AP_dist_4.0: 0.5210, pts_bbox_NuScenes/pedestrian_trans_err: 0.4435, pts_bbox_NuScenes/pedestrian_scale_err: 0.2921, pts_bbox_NuScenes/pedestrian_orient_err: 1.5263, pts_bbox_NuScenes/pedestrian_vel_err: 1.0552, pts_bbox_NuScenes/pedestrian_attr_err: 0.8608, pts_bbox_NuScenes/traffic_cone_AP_dist_0.5: 0.1805, pts_bbox_NuScenes/traffic_cone_AP_dist_1.0: 0.2236, pts_bbox_NuScenes/traffic_cone_AP_dist_2.0: 0.2574, pts_bbox_NuScenes/traffic_cone_AP_dist_4.0: 0.3248, pts_bbox_NuScenes/traffic_cone_trans_err: 0.3447, pts_bbox_NuScenes/traffic_cone_scale_err: 0.4451, pts_bbox_NuScenes/traffic_cone_orient_err: nan, pts_bbox_NuScenes/traffic_cone_vel_err: nan, pts_bbox_NuScenes/traffic_cone_attr_err: nan, pts_bbox_NuScenes/NDS: 0.2544, pts_bbox_NuScenes/mAP: 0.1843
