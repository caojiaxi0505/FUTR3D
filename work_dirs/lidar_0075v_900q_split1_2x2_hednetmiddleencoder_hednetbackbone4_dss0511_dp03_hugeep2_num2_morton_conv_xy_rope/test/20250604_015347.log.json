{"env_info": "sys.platform: linux\nPython: 3.8.20 (default, Oct  3 2024, 15:24:27) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.8, V11.8.89\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0\nPyTorch: 1.13.0+cu116\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.6\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.14.0+cu116\nOpenCV: 4.11.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.6\nMMDetection: 2.27.0\nMMSegmentation: 0.30.0\nMMDetection3D: 1.0.0rc6+d00cbec\nspconv2.0: True", "config": "point_cloud_range = [-54, -54, -5.0, 54, 54, 3.0]\nclass_names = [\n    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n]\ndataset_type = 'NuScenesDataset'\ndata_root = 'data/nuscenes/'\ninput_modality = dict(\n    use_lidar=True,\n    use_camera=False,\n    use_radar=False,\n    use_map=False,\n    use_external=False)\nfile_client_args = dict(backend='disk')\ntrain_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),\n    dict(\n        type='ObjectSample',\n        db_sampler=dict(\n            data_root='data/nuscenes/',\n            info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',\n            rate=1.0,\n            prepare=dict(\n                filter_by_difficulty=[-1],\n                filter_by_min_points=dict(\n                    car=5,\n                    truck=5,\n                    bus=5,\n                    trailer=5,\n                    construction_vehicle=5,\n                    traffic_cone=5,\n                    barrier=5,\n                    motorcycle=5,\n                    bicycle=5,\n                    pedestrian=5)),\n            classes=[\n                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                'traffic_cone'\n            ],\n            sample_groups=dict(\n                car=2,\n                truck=3,\n                construction_vehicle=7,\n                bus=4,\n                trailer=6,\n                barrier=2,\n                motorcycle=6,\n                bicycle=6,\n                pedestrian=2,\n                traffic_cone=2),\n            points_loader=dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk')))),\n    dict(\n        type='GlobalRotScaleTrans',\n        rot_range=[-0.785, 0.785],\n        scale_ratio_range=[0.9, 1.1],\n        translation_std=[0.5, 0.5, 0.5]),\n    dict(\n        type='RandomFlip3D',\n        sync_2d=False,\n        flip_ratio_bev_horizontal=0.5,\n        flip_ratio_bev_vertical=0.5),\n    dict(\n        type='PointsRangeFilter',\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    dict(\n        type='ObjectRangeFilter',\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    dict(\n        type='ObjectNameFilter',\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(type='PointShuffle'),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(type='Collect3D', keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n]\ntest_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),\n    dict(\n        type='MultiScaleFlipAug3D',\n        img_scale=(1333, 800),\n        pts_scale_ratio=1,\n        flip=False,\n        transforms=[\n            dict(\n                type='GlobalRotScaleTrans',\n                rot_range=[0, 0],\n                scale_ratio_range=[1.0, 1.0],\n                translation_std=[0, 0, 0]),\n            dict(type='RandomFlip3D'),\n            dict(\n                type='PointsRangeFilter',\n                point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ],\n                with_label=False),\n            dict(\n                type='Collect3D',\n                keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n        ])\n]\neval_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        with_label=False),\n    dict(type='Collect3D', keys=['points'])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=4,\n    train=dict(\n        type='CBGSDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_train.pkl',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=10,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadAnnotations3D',\n                with_bbox_3d=True,\n                with_label_3d=True),\n            dict(\n                type='GlobalRotScaleTrans',\n                rot_range=[-0.3925, 0.3925],\n                scale_ratio_range=[0.95, 1.05],\n                translation_std=[0, 0, 0]),\n            dict(type='RandomFlip3D', flip_ratio_bev_horizontal=0.5),\n            dict(\n                type='PointsRangeFilter',\n                point_cloud_range=[-50, -50, -5, 50, 50, 3]),\n            dict(\n                type='ObjectRangeFilter',\n                point_cloud_range=[-50, -50, -5, 50, 50, 3]),\n            dict(\n                type='ObjectNameFilter',\n                classes=[\n                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                    'barrier'\n                ]),\n            dict(type='PointShuffle'),\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                    'barrier'\n                ]),\n            dict(\n                type='Collect3D',\n                keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n        ],\n        classes=[\n            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=False,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=False,\n        box_type_3d='LiDAR',\n        dataset=dict(\n            type='NuScenesDataset',\n            data_root='data/nuscenes/',\n            ann_file='data/nuscenes/nuscenes_infos_train.pkl',\n            pipeline=[\n                dict(\n                    type='LoadPointsFromFile',\n                    coord_type='LIDAR',\n                    load_dim=5,\n                    use_dim=5,\n                    file_client_args=dict(backend='disk')),\n                dict(\n                    type='LoadPointsFromMultiSweeps',\n                    sweeps_num=9,\n                    use_dim=[0, 1, 2, 3, 4],\n                    file_client_args=dict(backend='disk'),\n                    pad_empty_sweeps=True,\n                    remove_close=True),\n                dict(\n                    type='LoadAnnotations3D',\n                    with_bbox_3d=True,\n                    with_label_3d=True),\n                dict(\n                    type='ObjectSample',\n                    db_sampler=dict(\n                        data_root='data/nuscenes/',\n                        info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',\n                        rate=1.0,\n                        prepare=dict(\n                            filter_by_difficulty=[-1],\n                            filter_by_min_points=dict(\n                                car=5,\n                                truck=5,\n                                bus=5,\n                                trailer=5,\n                                construction_vehicle=5,\n                                traffic_cone=5,\n                                barrier=5,\n                                motorcycle=5,\n                                bicycle=5,\n                                pedestrian=5)),\n                        classes=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        sample_groups=dict(\n                            car=2,\n                            truck=3,\n                            construction_vehicle=7,\n                            bus=4,\n                            trailer=6,\n                            barrier=2,\n                            motorcycle=6,\n                            bicycle=6,\n                            pedestrian=2,\n                            traffic_cone=2),\n                        points_loader=dict(\n                            type='LoadPointsFromFile',\n                            coord_type='LIDAR',\n                            load_dim=5,\n                            use_dim=[0, 1, 2, 3, 4],\n                            file_client_args=dict(backend='disk')))),\n                dict(\n                    type='GlobalRotScaleTrans',\n                    rot_range=[-0.785, 0.785],\n                    scale_ratio_range=[0.9, 1.1],\n                    translation_std=[0.5, 0.5, 0.5]),\n                dict(\n                    type='RandomFlip3D',\n                    sync_2d=False,\n                    flip_ratio_bev_horizontal=0.5,\n                    flip_ratio_bev_vertical=0.5),\n                dict(\n                    type='PointsRangeFilter',\n                    point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                dict(\n                    type='ObjectRangeFilter',\n                    point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                dict(\n                    type='ObjectNameFilter',\n                    classes=[\n                        'car', 'truck', 'construction_vehicle', 'bus',\n                        'trailer', 'barrier', 'motorcycle', 'bicycle',\n                        'pedestrian', 'traffic_cone'\n                    ]),\n                dict(type='PointShuffle'),\n                dict(\n                    type='DefaultFormatBundle3D',\n                    class_names=[\n                        'car', 'truck', 'construction_vehicle', 'bus',\n                        'trailer', 'barrier', 'motorcycle', 'bicycle',\n                        'pedestrian', 'traffic_cone'\n                    ]),\n                dict(\n                    type='Collect3D',\n                    keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n            ],\n            classes=[\n                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                'traffic_cone'\n            ],\n            test_mode=False,\n            use_valid_flag=True,\n            box_type_3d='LiDAR')),\n    val=dict(\n        type='NuScenesDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_val.pkl',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=9,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk'),\n                pad_empty_sweeps=True,\n                remove_close=True),\n            dict(\n                type='LoadAnnotations3D',\n                with_bbox_3d=True,\n                with_label_3d=True),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1333, 800),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='GlobalRotScaleTrans',\n                        rot_range=[0, 0],\n                        scale_ratio_range=[1.0, 1.0],\n                        translation_std=[0, 0, 0]),\n                    dict(type='RandomFlip3D'),\n                    dict(\n                        type='PointsRangeFilter',\n                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(\n                        type='Collect3D',\n                        keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=False,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=True,\n        box_type_3d='LiDAR'),\n    test=dict(\n        type='NuScenesDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_val.pkl',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=9,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk'),\n                pad_empty_sweeps=True,\n                remove_close=True),\n            dict(\n                type='LoadAnnotations3D',\n                with_bbox_3d=True,\n                with_label_3d=True),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1333, 800),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='GlobalRotScaleTrans',\n                        rot_range=[0, 0],\n                        scale_ratio_range=[1.0, 1.0],\n                        translation_std=[0, 0, 0]),\n                    dict(type='RandomFlip3D'),\n                    dict(\n                        type='PointsRangeFilter',\n                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(\n                        type='Collect3D',\n                        keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=False,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=True,\n        box_type_3d='LiDAR'))\nevaluation = dict(\n    interval=1,\n    pipeline=[\n        dict(\n            type='LoadPointsFromFile',\n            coord_type='LIDAR',\n            load_dim=5,\n            use_dim=5,\n            file_client_args=dict(backend='disk')),\n        dict(\n            type='LoadPointsFromMultiSweeps',\n            sweeps_num=10,\n            file_client_args=dict(backend='disk')),\n        dict(\n            type='DefaultFormatBundle3D',\n            class_names=[\n                'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                'barrier'\n            ],\n            with_label=False),\n        dict(type='Collect3D', keys=['points'])\n    ])\noptimizer = dict(type='AdamW', lr=6.25e-06, weight_decay=0.01)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='cyclic',\n    target_ratio=(10, 0.0001),\n    cyclic_times=1,\n    step_ratio_up=0.4)\nmomentum_config = dict(\n    policy='cyclic',\n    target_ratio=(0.8947368421052632, 1),\n    cyclic_times=1,\n    step_ratio_up=0.4)\nrunner = dict(type='EpochBasedRunner', max_epochs=20)\ncheckpoint_config = dict(interval=1, max_keep_ckpts=10)\nlog_config = dict(\n    interval=50,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nwork_dir = './work_dirs/lidar_0075v_900q_split1_2x2_hednetmiddleencoder_hednetbackbone4_dss0511_dp03_hugeep2_num2_morton_conv_xy_rope/test'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nplugin = 'plugin/futr3d'\nvoxel_size = [0.075, 0.075, 0.2]\ncenter_head = dict(\n    type='CenterHead',\n    in_channels=512,\n    tasks=[\n        dict(num_class=1, class_names=['car']),\n        dict(num_class=2, class_names=['truck', 'construction_vehicle']),\n        dict(num_class=2, class_names=['bus', 'trailer']),\n        dict(num_class=1, class_names=['barrier']),\n        dict(num_class=2, class_names=['motorcycle', 'bicycle']),\n        dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])\n    ],\n    common_heads=dict(\n        reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),\n    share_conv_channel=64,\n    bbox_coder=dict(\n        type='CenterPointBBoxCoder',\n        pc_range=[-54, -54],\n        post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n        max_num=500,\n        score_threshold=0.1,\n        out_size_factor=8,\n        voxel_size=[0.075, 0.075],\n        code_size=9),\n    separate_head=dict(type='SeparateHead', init_bias=-2.19, final_kernel=3),\n    loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),\n    loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),\n    norm_bbox=True)\nmodel = dict(\n    type='FUTR3D',\n    aux_weight=0.5,\n    pts_voxel_layer=dict(\n        max_num_points=-1,\n        voxel_size=[0.075, 0.075, 0.2],\n        max_voxels=(-1, -1),\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    pts_voxel_encoder=dict(\n        type='DynamicVFE',\n        in_channels=5,\n        feat_channels=[64, 128],\n        with_distance=False,\n        with_cluster_center=True,\n        with_voxel_center=True,\n        voxel_size=[0.075, 0.075, 0.2],\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    pts_middle_encoder=dict(\n        type='HEDNet',\n        in_channels=128,\n        sparse_shape=[41, 1440, 1440],\n        model_cfg=dict(\n            FEATURE_DIM=128,\n            NUM_LAYERS=2,\n            NUM_SBB=[2, 1, 1],\n            DOWN_STRIDE=[1, 2, 2],\n            DOWN_KERNEL_SIZE=[3, 3, 3])),\n    pts_backbone=dict(\n        type='CascadeDEDBackbone',\n        in_channels=256,\n        model_cfg=dict(\n            USE_SECONDMAMBA=False,\n            FEATURE_DIM=256,\n            NUM_LAYERS=4,\n            NUM_SBB=[2, 1, 1],\n            DOWN_STRIDES=[1, 2, 2])),\n    pts_neck=dict(\n        type='FPN',\n        norm_cfg=dict(type='BN2d', eps=0.001, momentum=0.01),\n        act_cfg=dict(type='ReLU', inplace=False),\n        in_channels=[256],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs=True,\n        num_outs=4,\n        relu_before_extra_convs=True),\n    pts_bbox_head=dict(\n        type='FUTR3DHead',\n        use_dab=True,\n        use_dss=True,\n        use_hybrid=False,\n        dss_date_version='0511',\n        dss_drop_prob=0.3,\n        dss_mamba_version='DSSMamba_Huge_EP2',\n        dss_num_layers=2,\n        dss_use_morton=True,\n        dss_use_conv=True,\n        dss_use_xy=True,\n        dss_use_rope=True,\n        dss_stack=True,\n        dss_strong_cls=True,\n        anchor_size=3,\n        use_aux=True,\n        aux_head=dict(\n            type='CenterHead',\n            in_channels=512,\n            tasks=[\n                dict(num_class=1, class_names=['car']),\n                dict(\n                    num_class=2, class_names=['truck',\n                                              'construction_vehicle']),\n                dict(num_class=2, class_names=['bus', 'trailer']),\n                dict(num_class=1, class_names=['barrier']),\n                dict(num_class=2, class_names=['motorcycle', 'bicycle']),\n                dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])\n            ],\n            common_heads=dict(\n                reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),\n            share_conv_channel=64,\n            bbox_coder=dict(\n                type='CenterPointBBoxCoder',\n                pc_range=[-54, -54],\n                post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n                max_num=500,\n                score_threshold=0.1,\n                out_size_factor=8,\n                voxel_size=[0.075, 0.075],\n                code_size=9),\n            separate_head=dict(\n                type='SeparateHead', init_bias=-2.19, final_kernel=3),\n            loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),\n            loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),\n            norm_bbox=True),\n        mix_selection=False,\n        num_query=900,\n        num_classes=10,\n        in_channels=256,\n        pc_range=[-54, -54, -5.0, 54, 54, 3.0],\n        sync_cls_avg_factor=True,\n        with_box_refine=True,\n        as_two_stage=False,\n        code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],\n        transformer=dict(\n            type='FUTR3DTransformer',\n            use_dab=True,\n            decoder=dict(\n                type='FUTR3DTransformerDecoder',\n                num_layers=6,\n                use_dab=True,\n                anchor_size=3,\n                return_intermediate=True,\n                transformerlayers=dict(\n                    type='DetrTransformerDecoderLayer',\n                    attn_cfgs=[\n                        dict(\n                            type='MultiheadAttention',\n                            embed_dims=256,\n                            num_heads=8,\n                            dropout=0.1),\n                        dict(type='FUTR3DAttention', embed_dims=256)\n                    ],\n                    feedforward_channels=1024,\n                    ffn_dropout=0.1,\n                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',\n                                     'ffn', 'norm')))),\n        positional_encoding=dict(\n            type='SinePositionalEncoding',\n            num_feats=128,\n            normalize=True,\n            offset=-0.5),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=2.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=0.25),\n        loss_iou=dict(type='GIoULoss', loss_weight=0)),\n    train_cfg=dict(\n        pts=dict(\n            point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0],\n            pc_range=[-54, -54, -5.0, 54, 54, 3.0],\n            grid_size=[1440, 1440, 40],\n            voxel_size=[0.075, 0.075, 0.2],\n            out_size_factor=8,\n            dense_reg=1,\n            gaussian_overlap=0.1,\n            max_objs=500,\n            min_radius=2,\n            code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],\n            assigner=dict(\n                type='HungarianAssigner3D',\n                cls_cost=dict(type='FocalLossCost', weight=2.0),\n                reg_cost=dict(type='BBox3DL1Cost', weight=0.25),\n                iou_cost=dict(type='IoUCost', weight=0)))),\n    test_cfg=dict(\n        pts=dict(\n            pc_range=[-54, -54],\n            post_center_limit_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n            max_per_img=500,\n            max_pool_nms=False,\n            min_radius=[4, 12, 10, 1, 0.85, 0.175],\n            out_size_factor=8,\n            voxel_size=[0.075, 0.075],\n            nms_type='circle',\n            pre_max_size=1000,\n            post_max_size=83,\n            nms_thr=0.2,\n            max_num=300,\n            score_threshold=0,\n            post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0])))\ndb_sampler = dict(\n    data_root='data/nuscenes/',\n    info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',\n    rate=1.0,\n    prepare=dict(\n        filter_by_difficulty=[-1],\n        filter_by_min_points=dict(\n            car=5,\n            truck=5,\n            bus=5,\n            trailer=5,\n            construction_vehicle=5,\n            traffic_cone=5,\n            barrier=5,\n            motorcycle=5,\n            bicycle=5,\n            pedestrian=5)),\n    classes=[\n        'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n        'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n    ],\n    sample_groups=dict(\n        car=2,\n        truck=3,\n        construction_vehicle=7,\n        bus=4,\n        trailer=6,\n        barrier=2,\n        motorcycle=6,\n        bicycle=6,\n        pedestrian=2,\n        traffic_cone=2),\n    points_loader=dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk')))\nfind_unused_parameters = True\ncustom_hooks = [dict(type='FadeOjectSampleHook', num_last_epochs=5)]\nfp16 = dict(loss_scale=1.0)\ngpu_ids = range(0, 1)\n", "seed": 0, "exp_name": "lidar_0075v_900q_split1_2x2_hednetmiddleencoder_hednetbackbone4_dss0511_dp03_hugeep2_num2_morton_conv_xy_rope.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 1e-05, "memory": 14487, "data_time": 0.13674, "loss_cls": 2.23021, "loss_bbox": 2.28665, "d0.loss_cls": 2.23769, "d0.loss_bbox": 4.43953, "d1.loss_cls": 2.23728, "d1.loss_bbox": 2.29109, "d2.loss_cls": 2.23216, "d2.loss_bbox": 2.29003, "d3.loss_cls": 2.23029, "d3.loss_bbox": 2.2891, "d4.loss_cls": 2.22931, "d4.loss_bbox": 2.28761, "aux_task0.loss_heatmap": 318.42481, "aux_task0.loss_bbox": 0.95, "aux_task1.loss_heatmap": 724.52403, "aux_task1.loss_bbox": 1.06812, "aux_task2.loss_heatmap": 1016.06806, "aux_task2.loss_bbox": 1.29037, "aux_task3.loss_heatmap": 1137.66683, "aux_task3.loss_bbox": 0.78816, "aux_task4.loss_heatmap": 576.09504, "aux_task4.loss_bbox": 0.84112, "aux_task5.loss_heatmap": 836.10973, "aux_task5.loss_bbox": 0.89416, "loss": 4644.00136, "grad_norm": 116061.84898, "time": 1.16024}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 1e-05, "memory": 14487, "data_time": 0.02834, "loss_cls": 2.14079, "loss_bbox": 2.23866, "d0.loss_cls": 2.21528, "d0.loss_bbox": 4.38695, "d1.loss_cls": 2.1981, "d1.loss_bbox": 2.25416, "d2.loss_cls": 2.17212, "d2.loss_bbox": 2.25038, "d3.loss_cls": 2.1535, "d3.loss_bbox": 2.24644, "d4.loss_cls": 2.14852, "d4.loss_bbox": 2.24317, "aux_task0.loss_heatmap": 287.08284, "aux_task0.loss_bbox": 0.90724, "aux_task1.loss_heatmap": 631.89778, "aux_task1.loss_bbox": 1.04999, "aux_task2.loss_heatmap": 953.9742, "aux_task2.loss_bbox": 1.23487, "aux_task3.loss_heatmap": 919.17153, "aux_task3.loss_bbox": 0.78054, "aux_task4.loss_heatmap": 494.99507, "aux_task4.loss_bbox": 0.75624, "aux_task5.loss_heatmap": 724.64512, "aux_task5.loss_bbox": 0.81643, "loss": 4045.95992, "grad_norm": 86116.15688, "time": 0.94872}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 14490, "data_time": 0.02466, "loss_cls": 1.929, "loss_bbox": 2.21714, "d0.loss_cls": 2.15922, "d0.loss_bbox": 4.38739, "d1.loss_cls": 2.08557, "d1.loss_bbox": 2.25804, "d2.loss_cls": 1.99815, "d2.loss_bbox": 2.24735, "d3.loss_cls": 1.93709, "d3.loss_bbox": 2.23712, "d4.loss_cls": 1.93907, "d4.loss_bbox": 2.22797, "aux_task0.loss_heatmap": 233.05493, "aux_task0.loss_bbox": 0.8434, "aux_task1.loss_heatmap": 463.98021, "aux_task1.loss_bbox": 0.95584, "aux_task2.loss_heatmap": 726.21669, "aux_task2.loss_bbox": 1.20247, "aux_task3.loss_heatmap": 595.99518, "aux_task3.loss_bbox": 0.66595, "aux_task4.loss_heatmap": 357.51152, "aux_task4.loss_bbox": 0.68699, "aux_task5.loss_heatmap": 536.48808, "aux_task5.loss_bbox": 0.74492, "loss": 2945.96928, "grad_norm": 37650.31916, "time": 0.93851}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 1e-05, "memory": 14490, "data_time": 0.02947, "loss_cls": 1.62138, "loss_bbox": 2.10976, "d0.loss_cls": 1.99661, "d0.loss_bbox": 4.27093, "d1.loss_cls": 1.80772, "d1.loss_bbox": 2.19849, "d2.loss_cls": 1.6688, "d2.loss_bbox": 2.17538, "d3.loss_cls": 1.61395, "d3.loss_bbox": 2.15287, "d4.loss_cls": 1.62393, "d4.loss_bbox": 2.13291, "aux_task0.loss_heatmap": 163.3612, "aux_task0.loss_bbox": 0.75404, "aux_task1.loss_heatmap": 340.58111, "aux_task1.loss_bbox": 0.88758, "aux_task2.loss_heatmap": 496.9488, "aux_task2.loss_bbox": 1.09294, "aux_task3.loss_heatmap": 392.88654, "aux_task3.loss_bbox": 0.60549, "aux_task4.loss_heatmap": 254.68532, "aux_task4.loss_bbox": 0.61256, "aux_task5.loss_heatmap": 311.27609, "aux_task5.loss_bbox": 0.71253, "loss": 1989.77697, "grad_norm": 14973.1848, "time": 0.94841}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 1e-05, "memory": 14490, "data_time": 0.02399, "loss_cls": 1.32383, "loss_bbox": 1.95964, "d0.loss_cls": 1.64575, "d0.loss_bbox": 4.08307, "d1.loss_cls": 1.41775, "d1.loss_bbox": 2.12921, "d2.loss_cls": 1.33232, "d2.loss_bbox": 2.08063, "d3.loss_cls": 1.32988, "d3.loss_bbox": 2.03348, "d4.loss_cls": 1.32606, "d4.loss_bbox": 1.99568, "aux_task0.loss_heatmap": 108.35783, "aux_task0.loss_bbox": 0.66325, "aux_task1.loss_heatmap": 235.30224, "aux_task1.loss_bbox": 0.82184, "aux_task2.loss_heatmap": 340.03827, "aux_task2.loss_bbox": 1.0171, "aux_task3.loss_heatmap": 323.58964, "aux_task3.loss_bbox": 0.5552, "aux_task4.loss_heatmap": 179.00765, "aux_task4.loss_bbox": 0.53954, "aux_task5.loss_heatmap": 228.41183, "aux_task5.loss_bbox": 0.5839, "loss": 1441.54561, "grad_norm": 9551.27854, "time": 0.94561}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 1e-05, "memory": 14490, "data_time": 0.0293, "loss_cls": 1.2002, "loss_bbox": 1.86318, "d0.loss_cls": 1.3098, "d0.loss_bbox": 3.78309, "d1.loss_cls": 1.22777, "d1.loss_bbox": 2.03629, "d2.loss_cls": 1.20421, "d2.loss_bbox": 1.96483, "d3.loss_cls": 1.21145, "d3.loss_bbox": 1.90599, "d4.loss_cls": 1.20623, "d4.loss_bbox": 1.87691, "aux_task0.loss_heatmap": 67.09598, "aux_task0.loss_bbox": 0.61888, "aux_task1.loss_heatmap": 173.74652, "aux_task1.loss_bbox": 0.75302, "aux_task2.loss_heatmap": 294.67846, "aux_task2.loss_bbox": 0.9592, "aux_task3.loss_heatmap": 223.90566, "aux_task3.loss_bbox": 0.5098, "aux_task4.loss_heatmap": 132.40259, "aux_task4.loss_bbox": 0.5186, "aux_task5.loss_heatmap": 195.08885, "aux_task5.loss_bbox": 0.55827, "loss": 1111.6258, "grad_norm": 7368.97446, "time": 0.9438}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 1e-05, "memory": 14490, "data_time": 0.02622, "loss_cls": 1.16775, "loss_bbox": 1.90904, "d0.loss_cls": 1.18497, "d0.loss_bbox": 3.15986, "d1.loss_cls": 1.17084, "d1.loss_bbox": 1.87785, "d2.loss_cls": 1.16846, "d2.loss_bbox": 1.82614, "d3.loss_cls": 1.17262, "d3.loss_bbox": 1.83012, "d4.loss_cls": 1.17323, "d4.loss_bbox": 1.86134, "aux_task0.loss_heatmap": 51.64669, "aux_task0.loss_bbox": 0.57182, "aux_task1.loss_heatmap": 136.27403, "aux_task1.loss_bbox": 0.71511, "aux_task2.loss_heatmap": 231.26644, "aux_task2.loss_bbox": 0.86138, "aux_task3.loss_heatmap": 212.3646, "aux_task3.loss_bbox": 0.48788, "aux_task4.loss_heatmap": 98.00933, "aux_task4.loss_bbox": 0.49445, "aux_task5.loss_heatmap": 134.99085, "aux_task5.loss_bbox": 0.53011, "loss": 887.7149, "grad_norm": 6248.96757, "time": 0.94865}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 1e-05, "memory": 14490, "data_time": 0.02637, "loss_cls": 1.17107, "loss_bbox": 1.97657, "d0.loss_cls": 1.17035, "d0.loss_bbox": 2.48969, "d1.loss_cls": 1.17363, "d1.loss_bbox": 1.80906, "d2.loss_cls": 1.17506, "d2.loss_bbox": 1.82929, "d3.loss_cls": 1.17487, "d3.loss_bbox": 1.87911, "d4.loss_cls": 1.17627, "d4.loss_bbox": 1.92815, "aux_task0.loss_heatmap": 35.47223, "aux_task0.loss_bbox": 0.5217, "aux_task1.loss_heatmap": 110.94746, "aux_task1.loss_bbox": 0.67353, "aux_task2.loss_heatmap": 182.62003, "aux_task2.loss_bbox": 0.83331, "aux_task3.loss_heatmap": 153.4316, "aux_task3.loss_bbox": 0.46037, "aux_task4.loss_heatmap": 75.61106, "aux_task4.loss_bbox": 0.48339, "aux_task5.loss_heatmap": 112.56683, "aux_task5.loss_bbox": 0.51034, "loss": 693.08498, "grad_norm": 4920.23137, "time": 0.94403}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 1e-05, "memory": 14543, "data_time": 0.02641, "loss_cls": 1.16797, "loss_bbox": 1.95887, "d0.loss_cls": 1.16678, "d0.loss_bbox": 2.01348, "d1.loss_cls": 1.17225, "d1.loss_bbox": 1.79492, "d2.loss_cls": 1.17127, "d2.loss_bbox": 1.84426, "d3.loss_cls": 1.16863, "d3.loss_bbox": 1.89698, "d4.loss_cls": 1.16974, "d4.loss_bbox": 1.92675, "aux_task0.loss_heatmap": 31.14232, "aux_task0.loss_bbox": 0.51668, "aux_task1.loss_heatmap": 87.56148, "aux_task1.loss_bbox": 0.63572, "aux_task2.loss_heatmap": 146.01133, "aux_task2.loss_bbox": 0.75486, "aux_task3.loss_heatmap": 132.2431, "aux_task3.loss_bbox": 0.42031, "aux_task4.loss_heatmap": 59.93453, "aux_task4.loss_bbox": 0.47027, "aux_task5.loss_heatmap": 90.5177, "aux_task5.loss_bbox": 0.48171, "loss": 569.14192, "grad_norm": 4274.14595, "time": 0.94643}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 1e-05, "memory": 14543, "data_time": 0.02743, "loss_cls": 1.17391, "loss_bbox": 1.95138, "d0.loss_cls": 1.18098, "d0.loss_bbox": 1.85235, "d1.loss_cls": 1.18105, "d1.loss_bbox": 1.82193, "d2.loss_cls": 1.17974, "d2.loss_bbox": 1.87288, "d3.loss_cls": 1.1775, "d3.loss_bbox": 1.90772, "d4.loss_cls": 1.17566, "d4.loss_bbox": 1.93636, "aux_task0.loss_heatmap": 29.62041, "aux_task0.loss_bbox": 0.50671, "aux_task1.loss_heatmap": 71.36436, "aux_task1.loss_bbox": 0.60046, "aux_task2.loss_heatmap": 135.15103, "aux_task2.loss_bbox": 0.73542, "aux_task3.loss_heatmap": 107.91735, "aux_task3.loss_bbox": 0.44408, "aux_task4.loss_heatmap": 47.3296, "aux_task4.loss_bbox": 0.46211, "aux_task5.loss_heatmap": 72.95923, "aux_task5.loss_bbox": 0.48931, "loss": 485.99154, "grad_norm": 3727.35224, "time": 0.94898}
