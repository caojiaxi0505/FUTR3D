{"env_info": "sys.platform: linux\nPython: 3.8.20 (default, Oct  3 2024, 15:24:27) [GCC 11.2.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.8, V11.8.89\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0\nPyTorch: 1.13.0+cu116\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.6\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.14.0+cu116\nOpenCV: 4.11.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.6\nMMDetection: 2.27.0\nMMSegmentation: 0.30.0\nMMDetection3D: 1.0.0rc6+d00cbec\nspconv2.0: True", "config": "point_cloud_range = [-54, -54, -5.0, 54, 54, 3.0]\nclass_names = [\n    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n]\ndataset_type = 'NuScenesDataset'\ndata_root = 'data/nuscenes/'\ninput_modality = dict(\n    use_lidar=True,\n    use_camera=False,\n    use_radar=False,\n    use_map=False,\n    use_external=False)\nfile_client_args = dict(backend='disk')\ntrain_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),\n    dict(\n        type='ObjectSample',\n        db_sampler=dict(\n            data_root='data/nuscenes/',\n            info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',\n            rate=1.0,\n            prepare=dict(\n                filter_by_difficulty=[-1],\n                filter_by_min_points=dict(\n                    car=5,\n                    truck=5,\n                    bus=5,\n                    trailer=5,\n                    construction_vehicle=5,\n                    traffic_cone=5,\n                    barrier=5,\n                    motorcycle=5,\n                    bicycle=5,\n                    pedestrian=5)),\n            classes=[\n                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                'traffic_cone'\n            ],\n            sample_groups=dict(\n                car=2,\n                truck=3,\n                construction_vehicle=7,\n                bus=4,\n                trailer=6,\n                barrier=2,\n                motorcycle=6,\n                bicycle=6,\n                pedestrian=2,\n                traffic_cone=2),\n            points_loader=dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk')))),\n    dict(\n        type='GlobalRotScaleTrans',\n        rot_range=[-0.785, 0.785],\n        scale_ratio_range=[0.9, 1.1],\n        translation_std=[0.5, 0.5, 0.5]),\n    dict(\n        type='RandomFlip3D',\n        sync_2d=False,\n        flip_ratio_bev_horizontal=0.5,\n        flip_ratio_bev_vertical=0.5),\n    dict(\n        type='PointsRangeFilter',\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    dict(\n        type='ObjectRangeFilter',\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    dict(\n        type='ObjectNameFilter',\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(type='PointShuffle'),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(type='Collect3D', keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n]\ntest_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),\n    dict(\n        type='MultiScaleFlipAug3D',\n        img_scale=(1333, 800),\n        pts_scale_ratio=1,\n        flip=False,\n        transforms=[\n            dict(\n                type='GlobalRotScaleTrans',\n                rot_range=[0, 0],\n                scale_ratio_range=[1.0, 1.0],\n                translation_std=[0, 0, 0]),\n            dict(type='RandomFlip3D'),\n            dict(\n                type='PointsRangeFilter',\n                point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ],\n                with_label=False),\n            dict(\n                type='Collect3D',\n                keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n        ])\n]\neval_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        with_label=False),\n    dict(type='Collect3D', keys=['points'])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=4,\n    train=dict(\n        type='CBGSDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_train.pkl',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=10,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadAnnotations3D',\n                with_bbox_3d=True,\n                with_label_3d=True),\n            dict(\n                type='GlobalRotScaleTrans',\n                rot_range=[-0.3925, 0.3925],\n                scale_ratio_range=[0.95, 1.05],\n                translation_std=[0, 0, 0]),\n            dict(type='RandomFlip3D', flip_ratio_bev_horizontal=0.5),\n            dict(\n                type='PointsRangeFilter',\n                point_cloud_range=[-50, -50, -5, 50, 50, 3]),\n            dict(\n                type='ObjectRangeFilter',\n                point_cloud_range=[-50, -50, -5, 50, 50, 3]),\n            dict(\n                type='ObjectNameFilter',\n                classes=[\n                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                    'barrier'\n                ]),\n            dict(type='PointShuffle'),\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                    'barrier'\n                ]),\n            dict(\n                type='Collect3D',\n                keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n        ],\n        classes=[\n            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=False,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=False,\n        box_type_3d='LiDAR',\n        dataset=dict(\n            type='NuScenesDataset',\n            data_root='data/nuscenes/',\n            ann_file='data/nuscenes/nuscenes_infos_train.pkl',\n            pipeline=[\n                dict(\n                    type='LoadPointsFromFile',\n                    coord_type='LIDAR',\n                    load_dim=5,\n                    use_dim=5,\n                    file_client_args=dict(backend='disk')),\n                dict(\n                    type='LoadPointsFromMultiSweeps',\n                    sweeps_num=9,\n                    use_dim=[0, 1, 2, 3, 4],\n                    file_client_args=dict(backend='disk'),\n                    pad_empty_sweeps=True,\n                    remove_close=True),\n                dict(\n                    type='LoadAnnotations3D',\n                    with_bbox_3d=True,\n                    with_label_3d=True),\n                dict(\n                    type='ObjectSample',\n                    db_sampler=dict(\n                        data_root='data/nuscenes/',\n                        info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',\n                        rate=1.0,\n                        prepare=dict(\n                            filter_by_difficulty=[-1],\n                            filter_by_min_points=dict(\n                                car=5,\n                                truck=5,\n                                bus=5,\n                                trailer=5,\n                                construction_vehicle=5,\n                                traffic_cone=5,\n                                barrier=5,\n                                motorcycle=5,\n                                bicycle=5,\n                                pedestrian=5)),\n                        classes=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        sample_groups=dict(\n                            car=2,\n                            truck=3,\n                            construction_vehicle=7,\n                            bus=4,\n                            trailer=6,\n                            barrier=2,\n                            motorcycle=6,\n                            bicycle=6,\n                            pedestrian=2,\n                            traffic_cone=2),\n                        points_loader=dict(\n                            type='LoadPointsFromFile',\n                            coord_type='LIDAR',\n                            load_dim=5,\n                            use_dim=[0, 1, 2, 3, 4],\n                            file_client_args=dict(backend='disk')))),\n                dict(\n                    type='GlobalRotScaleTrans',\n                    rot_range=[-0.785, 0.785],\n                    scale_ratio_range=[0.9, 1.1],\n                    translation_std=[0.5, 0.5, 0.5]),\n                dict(\n                    type='RandomFlip3D',\n                    sync_2d=False,\n                    flip_ratio_bev_horizontal=0.5,\n                    flip_ratio_bev_vertical=0.5),\n                dict(\n                    type='PointsRangeFilter',\n                    point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                dict(\n                    type='ObjectRangeFilter',\n                    point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                dict(\n                    type='ObjectNameFilter',\n                    classes=[\n                        'car', 'truck', 'construction_vehicle', 'bus',\n                        'trailer', 'barrier', 'motorcycle', 'bicycle',\n                        'pedestrian', 'traffic_cone'\n                    ]),\n                dict(type='PointShuffle'),\n                dict(\n                    type='DefaultFormatBundle3D',\n                    class_names=[\n                        'car', 'truck', 'construction_vehicle', 'bus',\n                        'trailer', 'barrier', 'motorcycle', 'bicycle',\n                        'pedestrian', 'traffic_cone'\n                    ]),\n                dict(\n                    type='Collect3D',\n                    keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n            ],\n            classes=[\n                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                'traffic_cone'\n            ],\n            test_mode=False,\n            use_valid_flag=True,\n            box_type_3d='LiDAR')),\n    val=dict(\n        type='NuScenesDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_val.pkl',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=9,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk'),\n                pad_empty_sweeps=True,\n                remove_close=True),\n            dict(\n                type='LoadAnnotations3D',\n                with_bbox_3d=True,\n                with_label_3d=True),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1333, 800),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='GlobalRotScaleTrans',\n                        rot_range=[0, 0],\n                        scale_ratio_range=[1.0, 1.0],\n                        translation_std=[0, 0, 0]),\n                    dict(type='RandomFlip3D'),\n                    dict(\n                        type='PointsRangeFilter',\n                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(\n                        type='Collect3D',\n                        keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=False,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=True,\n        box_type_3d='LiDAR'),\n    test=dict(\n        type='NuScenesDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_val.pkl',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=9,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk'),\n                pad_empty_sweeps=True,\n                remove_close=True),\n            dict(\n                type='LoadAnnotations3D',\n                with_bbox_3d=True,\n                with_label_3d=True),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1333, 800),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='GlobalRotScaleTrans',\n                        rot_range=[0, 0],\n                        scale_ratio_range=[1.0, 1.0],\n                        translation_std=[0, 0, 0]),\n                    dict(type='RandomFlip3D'),\n                    dict(\n                        type='PointsRangeFilter',\n                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(\n                        type='Collect3D',\n                        keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=False,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=True,\n        box_type_3d='LiDAR'))\nevaluation = dict(\n    interval=1,\n    pipeline=[\n        dict(\n            type='LoadPointsFromFile',\n            coord_type='LIDAR',\n            load_dim=5,\n            use_dim=5,\n            file_client_args=dict(backend='disk')),\n        dict(\n            type='LoadPointsFromMultiSweeps',\n            sweeps_num=10,\n            file_client_args=dict(backend='disk')),\n        dict(\n            type='DefaultFormatBundle3D',\n            class_names=[\n                'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                'barrier'\n            ],\n            with_label=False),\n        dict(type='Collect3D', keys=['points'])\n    ])\noptimizer = dict(type='AdamW', lr=6.25e-06, weight_decay=0.01)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='cyclic',\n    target_ratio=(10, 0.0001),\n    cyclic_times=1,\n    step_ratio_up=0.4)\nmomentum_config = dict(\n    policy='cyclic',\n    target_ratio=(0.8947368421052632, 1),\n    cyclic_times=1,\n    step_ratio_up=0.4)\nrunner = dict(type='EpochBasedRunner', max_epochs=20)\ncheckpoint_config = dict(interval=1, max_keep_ckpts=10)\nlog_config = dict(\n    interval=50,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nwork_dir = './work_dirs/lidar_0075v_900q_split1_2x2_hednetmiddleencoder_hednetbackbone4_dss0511_dp03_hugeep2_num2_morton_conv_xy_rope/test'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nplugin = 'plugin/futr3d'\nvoxel_size = [0.075, 0.075, 0.2]\ncenter_head = dict(\n    type='CenterHead',\n    in_channels=512,\n    tasks=[\n        dict(num_class=1, class_names=['car']),\n        dict(num_class=2, class_names=['truck', 'construction_vehicle']),\n        dict(num_class=2, class_names=['bus', 'trailer']),\n        dict(num_class=1, class_names=['barrier']),\n        dict(num_class=2, class_names=['motorcycle', 'bicycle']),\n        dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])\n    ],\n    common_heads=dict(\n        reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),\n    share_conv_channel=64,\n    bbox_coder=dict(\n        type='CenterPointBBoxCoder',\n        pc_range=[-54, -54],\n        post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n        max_num=500,\n        score_threshold=0.1,\n        out_size_factor=8,\n        voxel_size=[0.075, 0.075],\n        code_size=9),\n    separate_head=dict(type='SeparateHead', init_bias=-2.19, final_kernel=3),\n    loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),\n    loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),\n    norm_bbox=True)\nmodel = dict(\n    type='FUTR3D',\n    aux_weight=0.5,\n    pts_voxel_layer=dict(\n        max_num_points=-1,\n        voxel_size=[0.075, 0.075, 0.2],\n        max_voxels=(-1, -1),\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    pts_voxel_encoder=dict(\n        type='DynamicVFE',\n        in_channels=5,\n        feat_channels=[64, 128],\n        with_distance=False,\n        with_cluster_center=True,\n        with_voxel_center=True,\n        voxel_size=[0.075, 0.075, 0.2],\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    pts_middle_encoder=dict(\n        type='HEDNet',\n        in_channels=128,\n        sparse_shape=[41, 1440, 1440],\n        model_cfg=dict(\n            FEATURE_DIM=128,\n            NUM_LAYERS=2,\n            NUM_SBB=[2, 1, 1],\n            DOWN_STRIDE=[1, 2, 2],\n            DOWN_KERNEL_SIZE=[3, 3, 3])),\n    pts_backbone=dict(\n        type='CascadeDEDBackbone',\n        in_channels=256,\n        model_cfg=dict(\n            USE_SECONDMAMBA=False,\n            FEATURE_DIM=256,\n            NUM_LAYERS=4,\n            NUM_SBB=[2, 1, 1],\n            DOWN_STRIDES=[1, 2, 2])),\n    pts_neck=dict(\n        type='FPN',\n        norm_cfg=dict(type='BN2d', eps=0.001, momentum=0.01),\n        act_cfg=dict(type='ReLU', inplace=False),\n        in_channels=[256],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs=True,\n        num_outs=4,\n        relu_before_extra_convs=True),\n    pts_bbox_head=dict(\n        type='FUTR3DHead',\n        use_dab=True,\n        use_dss=True,\n        use_hybrid=False,\n        dss_date_version='0511',\n        dss_drop_prob=0.3,\n        dss_mamba_version='DSSMamba_Huge_EP2',\n        dss_num_layers=2,\n        dss_use_morton=True,\n        dss_use_conv=True,\n        dss_use_xy=True,\n        dss_use_rope=True,\n        dss_stack=True,\n        dss_strong_cls=True,\n        anchor_size=3,\n        use_aux=True,\n        aux_head=dict(\n            type='CenterHead',\n            in_channels=512,\n            tasks=[\n                dict(num_class=1, class_names=['car']),\n                dict(\n                    num_class=2, class_names=['truck',\n                                              'construction_vehicle']),\n                dict(num_class=2, class_names=['bus', 'trailer']),\n                dict(num_class=1, class_names=['barrier']),\n                dict(num_class=2, class_names=['motorcycle', 'bicycle']),\n                dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])\n            ],\n            common_heads=dict(\n                reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),\n            share_conv_channel=64,\n            bbox_coder=dict(\n                type='CenterPointBBoxCoder',\n                pc_range=[-54, -54],\n                post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n                max_num=500,\n                score_threshold=0.1,\n                out_size_factor=8,\n                voxel_size=[0.075, 0.075],\n                code_size=9),\n            separate_head=dict(\n                type='SeparateHead', init_bias=-2.19, final_kernel=3),\n            loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),\n            loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),\n            norm_bbox=True),\n        mix_selection=False,\n        num_query=900,\n        num_classes=10,\n        in_channels=256,\n        pc_range=[-54, -54, -5.0, 54, 54, 3.0],\n        sync_cls_avg_factor=True,\n        with_box_refine=True,\n        as_two_stage=False,\n        code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],\n        transformer=dict(\n            type='FUTR3DTransformer',\n            use_dab=True,\n            decoder=dict(\n                type='FUTR3DTransformerDecoder',\n                num_layers=6,\n                use_dab=True,\n                anchor_size=3,\n                return_intermediate=True,\n                transformerlayers=dict(\n                    type='DetrTransformerDecoderLayer',\n                    attn_cfgs=[\n                        dict(\n                            type='MultiheadAttention',\n                            embed_dims=256,\n                            num_heads=8,\n                            dropout=0.1),\n                        dict(type='FUTR3DAttention', embed_dims=256)\n                    ],\n                    feedforward_channels=1024,\n                    ffn_dropout=0.1,\n                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',\n                                     'ffn', 'norm')))),\n        positional_encoding=dict(\n            type='SinePositionalEncoding',\n            num_feats=128,\n            normalize=True,\n            offset=-0.5),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=2.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=0.25),\n        loss_iou=dict(type='GIoULoss', loss_weight=0)),\n    train_cfg=dict(\n        pts=dict(\n            point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0],\n            pc_range=[-54, -54, -5.0, 54, 54, 3.0],\n            grid_size=[1440, 1440, 40],\n            voxel_size=[0.075, 0.075, 0.2],\n            out_size_factor=8,\n            dense_reg=1,\n            gaussian_overlap=0.1,\n            max_objs=500,\n            min_radius=2,\n            code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],\n            assigner=dict(\n                type='HungarianAssigner3D',\n                cls_cost=dict(type='FocalLossCost', weight=2.0),\n                reg_cost=dict(type='BBox3DL1Cost', weight=0.25),\n                iou_cost=dict(type='IoUCost', weight=0)))),\n    test_cfg=dict(\n        pts=dict(\n            pc_range=[-54, -54],\n            post_center_limit_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n            max_per_img=500,\n            max_pool_nms=False,\n            min_radius=[4, 12, 10, 1, 0.85, 0.175],\n            out_size_factor=8,\n            voxel_size=[0.075, 0.075],\n            nms_type='circle',\n            pre_max_size=1000,\n            post_max_size=83,\n            nms_thr=0.2,\n            max_num=300,\n            score_threshold=0,\n            post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0])))\ndb_sampler = dict(\n    data_root='data/nuscenes/',\n    info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',\n    rate=1.0,\n    prepare=dict(\n        filter_by_difficulty=[-1],\n        filter_by_min_points=dict(\n            car=5,\n            truck=5,\n            bus=5,\n            trailer=5,\n            construction_vehicle=5,\n            traffic_cone=5,\n            barrier=5,\n            motorcycle=5,\n            bicycle=5,\n            pedestrian=5)),\n    classes=[\n        'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n        'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n    ],\n    sample_groups=dict(\n        car=2,\n        truck=3,\n        construction_vehicle=7,\n        bus=4,\n        trailer=6,\n        barrier=2,\n        motorcycle=6,\n        bicycle=6,\n        pedestrian=2,\n        traffic_cone=2),\n    points_loader=dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk')))\nfind_unused_parameters = True\ncustom_hooks = [dict(type='FadeOjectSampleHook', num_last_epochs=5)]\nfp16 = dict(loss_scale=512.0)\ngpu_ids = range(0, 1)\n", "seed": 0, "exp_name": "lidar_0075v_900q_split1_2x2_hednetmiddleencoder_hednetbackbone4_dss0511_dp03_hugeep2_num2_morton_conv_xy_rope.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 1e-05, "memory": 13802, "data_time": 0.12907, "loss_cls": 2.25677, "loss_bbox": 2.2941, "d0.loss_cls": 2.24588, "d0.loss_bbox": 4.44549, "d1.loss_cls": 2.25046, "d1.loss_bbox": 2.29437, "d2.loss_cls": 2.25002, "d2.loss_bbox": 2.29452, "d3.loss_cls": 2.25243, "d3.loss_bbox": 2.29458, "d4.loss_cls": 2.25283, "d4.loss_bbox": 2.29395, "aux_task0.loss_heatmap": 332.62915, "aux_task0.loss_bbox": 0.96439, "aux_task1.loss_heatmap": 775.39818, "aux_task1.loss_bbox": 1.08091, "aux_task2.loss_heatmap": 1107.56838, "aux_task2.loss_bbox": 1.34295, "aux_task3.loss_heatmap": 1258.14843, "aux_task3.loss_bbox": 0.79018, "aux_task4.loss_heatmap": 609.81254, "aux_task4.loss_bbox": 0.86227, "aux_task5.loss_heatmap": 883.89349, "aux_task5.loss_bbox": 0.93424, "loss": 5002.85049, "grad_norm": Infinity, "time": 1.07837}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 1e-05, "memory": 13802, "data_time": 0.0468, "loss_cls": 2.25724, "loss_bbox": 2.26696, "d0.loss_cls": 2.24622, "d0.loss_bbox": 4.40992, "d1.loss_cls": 2.25053, "d1.loss_bbox": 2.26693, "d2.loss_cls": 2.25017, "d2.loss_bbox": 2.26689, "d3.loss_cls": 2.25393, "d3.loss_bbox": 2.26699, "d4.loss_cls": 2.25475, "d4.loss_bbox": 2.26668, "aux_task0.loss_heatmap": 340.35484, "aux_task0.loss_bbox": 0.99338, "aux_task1.loss_heatmap": 794.31179, "aux_task1.loss_bbox": 1.11256, "aux_task2.loss_heatmap": 1253.50754, "aux_task2.loss_bbox": 1.3007, "aux_task3.loss_heatmap": 1373.89396, "aux_task3.loss_bbox": 0.83, "aux_task4.loss_heatmap": 607.80385, "aux_task4.loss_bbox": 0.83038, "aux_task5.loss_heatmap": 920.67576, "aux_task5.loss_bbox": 0.8909, "loss": 5325.76296, "grad_norm": Infinity, "time": 0.88104}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 13804, "data_time": 0.02612, "loss_cls": 2.25673, "loss_bbox": 2.28848, "d0.loss_cls": 2.24538, "d0.loss_bbox": 4.44253, "d1.loss_cls": 2.24904, "d1.loss_bbox": 2.28871, "d2.loss_cls": 2.24844, "d2.loss_bbox": 2.28855, "d3.loss_cls": 2.25253, "d3.loss_bbox": 2.28824, "d4.loss_cls": 2.25232, "d4.loss_bbox": 2.28846, "aux_task0.loss_heatmap": 385.3649, "aux_task0.loss_bbox": 1.00173, "aux_task1.loss_heatmap": 759.27238, "aux_task1.loss_bbox": 1.05134, "aux_task2.loss_heatmap": 1291.88263, "aux_task2.loss_bbox": 1.38044, "aux_task3.loss_heatmap": 1251.14093, "aux_task3.loss_bbox": 0.79314, "aux_task4.loss_heatmap": 579.42697, "aux_task4.loss_bbox": 0.83752, "aux_task5.loss_heatmap": 951.58476, "aux_task5.loss_bbox": 0.91224, "loss": 5254.03845, "grad_norm": Infinity, "time": 0.85899}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 1e-05, "memory": 13804, "data_time": 0.02617, "loss_cls": 2.25635, "loss_bbox": 2.26472, "d0.loss_cls": 2.24595, "d0.loss_bbox": 4.40504, "d1.loss_cls": 2.2505, "d1.loss_bbox": 2.26494, "d2.loss_cls": 2.25024, "d2.loss_bbox": 2.26502, "d3.loss_cls": 2.25369, "d3.loss_bbox": 2.2654, "d4.loss_cls": 2.2523, "d4.loss_bbox": 2.2651, "aux_task0.loss_heatmap": 425.30123, "aux_task0.loss_bbox": 0.99114, "aux_task1.loss_heatmap": 763.3339, "aux_task1.loss_bbox": 1.07036, "aux_task2.loss_heatmap": 1239.27098, "aux_task2.loss_bbox": 1.28509, "aux_task3.loss_heatmap": 1142.14313, "aux_task3.loss_bbox": 0.84139, "aux_task4.loss_heatmap": 589.30862, "aux_task4.loss_bbox": 0.86393, "aux_task5.loss_heatmap": 786.36262, "aux_task5.loss_bbox": 1.00038, "loss": 4981.01202, "grad_norm": Infinity, "time": 0.86264}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 1e-05, "memory": 13804, "data_time": 0.03742, "loss_cls": 2.2576, "loss_bbox": 2.28125, "d0.loss_cls": 2.24336, "d0.loss_bbox": 4.40538, "d1.loss_cls": 2.24849, "d1.loss_bbox": 2.28125, "d2.loss_cls": 2.24866, "d2.loss_bbox": 2.2811, "d3.loss_cls": 2.25309, "d3.loss_bbox": 2.28108, "d4.loss_cls": 2.2532, "d4.loss_bbox": 2.28082, "aux_task0.loss_heatmap": 424.06292, "aux_task0.loss_bbox": 1.01589, "aux_task1.loss_heatmap": 737.59911, "aux_task1.loss_bbox": 1.07919, "aux_task2.loss_heatmap": 1173.92773, "aux_task2.loss_bbox": 1.28332, "aux_task3.loss_heatmap": 1353.89686, "aux_task3.loss_bbox": 0.83176, "aux_task4.loss_heatmap": 597.67655, "aux_task4.loss_bbox": 0.8411, "aux_task5.loss_heatmap": 804.38305, "aux_task5.loss_bbox": 0.97975, "loss": 5126.89248, "grad_norm": Infinity, "time": 0.87948}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 1e-05, "memory": 13804, "data_time": 0.02549, "loss_cls": 2.2563, "loss_bbox": 2.30945, "d0.loss_cls": 2.24521, "d0.loss_bbox": 4.44473, "d1.loss_cls": 2.24981, "d1.loss_bbox": 2.30995, "d2.loss_cls": 2.24939, "d2.loss_bbox": 2.30943, "d3.loss_cls": 2.25338, "d3.loss_bbox": 2.30966, "d4.loss_cls": 2.25305, "d4.loss_bbox": 2.30929, "aux_task0.loss_heatmap": 361.38306, "aux_task0.loss_bbox": 1.00503, "aux_task1.loss_heatmap": 722.96552, "aux_task1.loss_bbox": 1.07024, "aux_task2.loss_heatmap": 1316.84556, "aux_task2.loss_bbox": 1.33312, "aux_task3.loss_heatmap": 1254.4659, "aux_task3.loss_bbox": 0.7677, "aux_task4.loss_heatmap": 605.89101, "aux_task4.loss_bbox": 0.87573, "aux_task5.loss_heatmap": 902.32892, "aux_task5.loss_bbox": 1.08708, "loss": 5199.51848, "grad_norm": Infinity, "time": 0.86132}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 1e-05, "memory": 13804, "data_time": 0.02932, "loss_cls": 2.25762, "loss_bbox": 2.28683, "d0.loss_cls": 2.24578, "d0.loss_bbox": 4.4053, "d1.loss_cls": 2.25057, "d1.loss_bbox": 2.28724, "d2.loss_cls": 2.24965, "d2.loss_bbox": 2.28679, "d3.loss_cls": 2.25449, "d3.loss_bbox": 2.28712, "d4.loss_cls": 2.25151, "d4.loss_bbox": 2.28719, "aux_task0.loss_heatmap": 370.0971, "aux_task0.loss_bbox": 0.98621, "aux_task1.loss_heatmap": 729.73056, "aux_task1.loss_bbox": 1.07513, "aux_task2.loss_heatmap": 1301.1066, "aux_task2.loss_bbox": 1.33624, "aux_task3.loss_heatmap": 1505.14679, "aux_task3.loss_bbox": 0.84992, "aux_task4.loss_heatmap": 598.20852, "aux_task4.loss_bbox": 0.87828, "aux_task5.loss_heatmap": 791.62929, "aux_task5.loss_bbox": 1.08168, "loss": 5331.47644, "grad_norm": Infinity, "time": 0.86231}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 1e-05, "memory": 13804, "data_time": 0.04607, "loss_cls": 2.25723, "loss_bbox": 2.29586, "d0.loss_cls": 2.244, "d0.loss_bbox": 4.4298, "d1.loss_cls": 2.24934, "d1.loss_bbox": 2.29619, "d2.loss_cls": 2.24966, "d2.loss_bbox": 2.29586, "d3.loss_cls": 2.25409, "d3.loss_bbox": 2.29624, "d4.loss_cls": 2.25264, "d4.loss_bbox": 2.29627, "aux_task0.loss_heatmap": 324.84181, "aux_task0.loss_bbox": 0.99287, "aux_task1.loss_heatmap": 750.65134, "aux_task1.loss_bbox": 1.08755, "aux_task2.loss_heatmap": 1255.15361, "aux_task2.loss_bbox": 1.303, "aux_task3.loss_heatmap": 1379.18997, "aux_task3.loss_bbox": 0.77766, "aux_task4.loss_heatmap": 599.57157, "aux_task4.loss_bbox": 0.87992, "aux_task5.loss_heatmap": 824.30621, "aux_task5.loss_bbox": 1.0958, "loss": 5169.26849, "grad_norm": Infinity, "time": 0.87998}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 1e-05, "memory": 13854, "data_time": 0.02895, "loss_cls": 2.25651, "loss_bbox": 2.27811, "d0.loss_cls": 2.24652, "d0.loss_bbox": 4.42892, "d1.loss_cls": 2.25032, "d1.loss_bbox": 2.2778, "d2.loss_cls": 2.24986, "d2.loss_bbox": 2.2781, "d3.loss_cls": 2.25256, "d3.loss_bbox": 2.27813, "d4.loss_cls": 2.25178, "d4.loss_bbox": 2.27828, "aux_task0.loss_heatmap": 359.29288, "aux_task0.loss_bbox": 1.01431, "aux_task1.loss_heatmap": 740.3232, "aux_task1.loss_bbox": 1.05002, "aux_task2.loss_heatmap": 1213.11471, "aux_task2.loss_bbox": 1.26493, "aux_task3.loss_heatmap": 1435.85318, "aux_task3.loss_bbox": 0.79715, "aux_task4.loss_heatmap": 604.66704, "aux_task4.loss_bbox": 0.86333, "aux_task5.loss_heatmap": 814.73395, "aux_task5.loss_bbox": 0.87424, "loss": 5203.1758, "grad_norm": Infinity, "time": 0.86254}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 1e-05, "memory": 13854, "data_time": 0.02644, "loss_cls": 2.25868, "loss_bbox": 2.27087, "d0.loss_cls": 2.24423, "d0.loss_bbox": 4.41919, "d1.loss_cls": 2.25044, "d1.loss_bbox": 2.27098, "d2.loss_cls": 2.24988, "d2.loss_bbox": 2.27111, "d3.loss_cls": 2.25305, "d3.loss_bbox": 2.27108, "d4.loss_cls": 2.25203, "d4.loss_bbox": 2.27102, "aux_task0.loss_heatmap": 427.5795, "aux_task0.loss_bbox": 0.98942, "aux_task1.loss_heatmap": 738.97488, "aux_task1.loss_bbox": 1.07599, "aux_task2.loss_heatmap": 1362.35847, "aux_task2.loss_bbox": 1.281, "aux_task3.loss_heatmap": 1406.40189, "aux_task3.loss_bbox": 0.83135, "aux_task4.loss_heatmap": 596.83057, "aux_task4.loss_bbox": 0.84608, "aux_task5.loss_heatmap": 801.46885, "aux_task5.loss_bbox": 1.01991, "loss": 5368.94055, "grad_norm": Infinity, "time": 0.85671}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 1e-05, "memory": 13854, "data_time": 0.04861, "loss_cls": 2.25662, "loss_bbox": 2.2807, "d0.loss_cls": 2.24521, "d0.loss_bbox": 4.40336, "d1.loss_cls": 2.25086, "d1.loss_bbox": 2.28116, "d2.loss_cls": 2.24983, "d2.loss_bbox": 2.28095, "d3.loss_cls": 2.25317, "d3.loss_bbox": 2.2817, "d4.loss_cls": 2.25269, "d4.loss_bbox": 2.28042, "aux_task0.loss_heatmap": 409.69762, "aux_task0.loss_bbox": 1.0084, "aux_task1.loss_heatmap": 731.983, "aux_task1.loss_bbox": 1.06165, "aux_task2.loss_heatmap": 1234.34277, "aux_task2.loss_bbox": 1.29026, "aux_task3.loss_heatmap": 1236.07612, "aux_task3.loss_bbox": 0.79095, "aux_task4.loss_heatmap": 593.91413, "aux_task4.loss_bbox": 0.88628, "aux_task5.loss_heatmap": 845.75291, "aux_task5.loss_bbox": 0.96311, "loss": 5087.08391, "grad_norm": Infinity, "time": 0.88025}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 1e-05, "memory": 13854, "data_time": 0.02525, "loss_cls": 2.25721, "loss_bbox": 2.27023, "d0.loss_cls": 2.24499, "d0.loss_bbox": 4.39686, "d1.loss_cls": 2.24952, "d1.loss_bbox": 2.27067, "d2.loss_cls": 2.24957, "d2.loss_bbox": 2.27016, "d3.loss_cls": 2.25515, "d3.loss_bbox": 2.27027, "d4.loss_cls": 2.2528, "d4.loss_bbox": 2.2702, "aux_task0.loss_heatmap": 384.61214, "aux_task0.loss_bbox": 1.0067, "aux_task1.loss_heatmap": 737.0028, "aux_task1.loss_bbox": 1.06474, "aux_task2.loss_heatmap": 1247.81024, "aux_task2.loss_bbox": 1.32253, "aux_task3.loss_heatmap": 1302.82473, "aux_task3.loss_bbox": 0.95993, "aux_task4.loss_heatmap": 586.00425, "aux_task4.loss_bbox": 0.86002, "aux_task5.loss_heatmap": 780.73438, "aux_task5.loss_bbox": 1.06835, "loss": 5074.5284, "grad_norm": Infinity, "time": 0.85749}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 1e-05, "memory": 13854, "data_time": 0.02616, "loss_cls": 2.25577, "loss_bbox": 2.25685, "d0.loss_cls": 2.24582, "d0.loss_bbox": 4.39815, "d1.loss_cls": 2.24975, "d1.loss_bbox": 2.25667, "d2.loss_cls": 2.24949, "d2.loss_bbox": 2.25698, "d3.loss_cls": 2.25396, "d3.loss_bbox": 2.25668, "d4.loss_cls": 2.2534, "d4.loss_bbox": 2.25687, "aux_task0.loss_heatmap": 369.56928, "aux_task0.loss_bbox": 1.02814, "aux_task1.loss_heatmap": 776.58646, "aux_task1.loss_bbox": 1.08311, "aux_task2.loss_heatmap": 1260.77656, "aux_task2.loss_bbox": 1.26788, "aux_task3.loss_heatmap": 1325.03798, "aux_task3.loss_bbox": 0.77341, "aux_task4.loss_heatmap": 588.42171, "aux_task4.loss_bbox": 0.91678, "aux_task5.loss_heatmap": 775.6026, "aux_task5.loss_bbox": 1.01544, "loss": 5131.26972, "grad_norm": NaN, "time": 0.86071}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 1e-05, "memory": 13854, "data_time": 0.09044, "loss_cls": 2.25733, "loss_bbox": 2.26366, "d0.loss_cls": 2.24579, "d0.loss_bbox": 4.41044, "d1.loss_cls": 2.25071, "d1.loss_bbox": 2.26399, "d2.loss_cls": 2.25117, "d2.loss_bbox": 2.2638, "d3.loss_cls": 2.25543, "d3.loss_bbox": 2.2637, "d4.loss_cls": 2.25329, "d4.loss_bbox": 2.26365, "aux_task0.loss_heatmap": 324.39084, "aux_task0.loss_bbox": 1.00408, "aux_task1.loss_heatmap": 738.16155, "aux_task1.loss_bbox": 1.07224, "aux_task2.loss_heatmap": 1353.0974, "aux_task2.loss_bbox": 1.36006, "aux_task3.loss_heatmap": 1143.64646, "aux_task3.loss_bbox": 0.74723, "aux_task4.loss_heatmap": 588.39767, "aux_task4.loss_bbox": 0.87227, "aux_task5.loss_heatmap": 831.07722, "aux_task5.loss_bbox": 1.02335, "loss": 5014.09336, "grad_norm": Infinity, "time": 0.91775}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 1e-05, "memory": 13854, "data_time": 0.02338, "loss_cls": 2.25781, "loss_bbox": 2.22552, "d0.loss_cls": 2.24376, "d0.loss_bbox": 4.3413, "d1.loss_cls": 2.25017, "d1.loss_bbox": 2.2258, "d2.loss_cls": 2.24774, "d2.loss_bbox": 2.22579, "d3.loss_cls": 2.25338, "d3.loss_bbox": 2.22532, "d4.loss_cls": 2.25205, "d4.loss_bbox": 2.22607, "aux_task0.loss_heatmap": 378.68374, "aux_task0.loss_bbox": 0.97666, "aux_task1.loss_heatmap": 763.22359, "aux_task1.loss_bbox": 1.04596, "aux_task2.loss_heatmap": 1259.82814, "aux_task2.loss_bbox": 1.29382, "aux_task3.loss_heatmap": 1430.48188, "aux_task3.loss_bbox": 0.83748, "aux_task4.loss_heatmap": 596.29685, "aux_task4.loss_bbox": 0.89516, "aux_task5.loss_heatmap": 696.55254, "aux_task5.loss_bbox": 1.0117, "loss": 5160.10219, "grad_norm": Infinity, "time": 0.86438}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 1e-05, "memory": 13854, "data_time": 0.02871, "loss_cls": 2.25703, "loss_bbox": 2.23761, "d0.loss_cls": 2.24478, "d0.loss_bbox": 4.36544, "d1.loss_cls": 2.25019, "d1.loss_bbox": 2.2379, "d2.loss_cls": 2.24981, "d2.loss_bbox": 2.23758, "d3.loss_cls": 2.25336, "d3.loss_bbox": 2.23756, "d4.loss_cls": 2.25253, "d4.loss_bbox": 2.23774, "aux_task0.loss_heatmap": 352.21007, "aux_task0.loss_bbox": 1.02158, "aux_task1.loss_heatmap": 753.84871, "aux_task1.loss_bbox": 1.05767, "aux_task2.loss_heatmap": 1302.00417, "aux_task2.loss_bbox": 1.31813, "aux_task3.loss_heatmap": 1171.24716, "aux_task3.loss_bbox": 0.80269, "aux_task4.loss_heatmap": 588.89138, "aux_task4.loss_bbox": 0.89954, "aux_task5.loss_heatmap": 752.15064, "aux_task5.loss_bbox": 0.86512, "loss": 4955.37837, "grad_norm": Infinity, "time": 0.85942}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 1e-05, "memory": 13854, "data_time": 0.03738, "loss_cls": 2.25865, "loss_bbox": 2.22172, "d0.loss_cls": 2.24582, "d0.loss_bbox": 4.36784, "d1.loss_cls": 2.25008, "d1.loss_bbox": 2.22185, "d2.loss_cls": 2.25045, "d2.loss_bbox": 2.22228, "d3.loss_cls": 2.25392, "d3.loss_bbox": 2.22187, "d4.loss_cls": 2.25504, "d4.loss_bbox": 2.22146, "aux_task0.loss_heatmap": 351.12678, "aux_task0.loss_bbox": 0.95745, "aux_task1.loss_heatmap": 790.38952, "aux_task1.loss_bbox": 1.0655, "aux_task2.loss_heatmap": 1281.24771, "aux_task2.loss_bbox": 1.29985, "aux_task3.loss_heatmap": 1503.54727, "aux_task3.loss_bbox": 0.78272, "aux_task4.loss_heatmap": 590.87621, "aux_task4.loss_bbox": 0.85007, "aux_task5.loss_heatmap": 802.45571, "aux_task5.loss_bbox": 0.87897, "loss": 5354.46881, "grad_norm": Infinity, "time": 0.93965}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 1e-05, "memory": 14022, "data_time": 0.02398, "loss_cls": 2.25747, "loss_bbox": 2.22818, "d0.loss_cls": 2.2463, "d0.loss_bbox": 4.34728, "d1.loss_cls": 2.25105, "d1.loss_bbox": 2.22811, "d2.loss_cls": 2.25091, "d2.loss_bbox": 2.22848, "d3.loss_cls": 2.25477, "d3.loss_bbox": 2.22824, "d4.loss_cls": 2.25509, "d4.loss_bbox": 2.22771, "aux_task0.loss_heatmap": 384.72983, "aux_task0.loss_bbox": 1.0199, "aux_task1.loss_heatmap": 789.46106, "aux_task1.loss_bbox": 1.06407, "aux_task2.loss_heatmap": 1307.17351, "aux_task2.loss_bbox": 1.33846, "aux_task3.loss_heatmap": 1191.12445, "aux_task3.loss_bbox": 0.80613, "aux_task4.loss_heatmap": 590.05015, "aux_task4.loss_bbox": 0.85993, "aux_task5.loss_heatmap": 772.5919, "aux_task5.loss_bbox": 0.94576, "loss": 5070.16876, "grad_norm": Infinity, "time": 0.86587}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 1e-05, "memory": 14022, "data_time": 0.02385, "loss_cls": 2.25691, "loss_bbox": 2.2654, "d0.loss_cls": 2.24508, "d0.loss_bbox": 4.39689, "d1.loss_cls": 2.2509, "d1.loss_bbox": 2.26569, "d2.loss_cls": 2.24993, "d2.loss_bbox": 2.26533, "d3.loss_cls": 2.25405, "d3.loss_bbox": 2.26558, "d4.loss_cls": 2.25249, "d4.loss_bbox": 2.26573, "aux_task0.loss_heatmap": 386.97881, "aux_task0.loss_bbox": 0.98191, "aux_task1.loss_heatmap": 839.49103, "aux_task1.loss_bbox": 1.06604, "aux_task2.loss_heatmap": 1199.29467, "aux_task2.loss_bbox": 1.22476, "aux_task3.loss_heatmap": 1382.5644, "aux_task3.loss_bbox": 0.81353, "aux_task4.loss_heatmap": 601.64682, "aux_task4.loss_bbox": 0.93184, "aux_task5.loss_heatmap": 831.32317, "aux_task5.loss_bbox": 0.91672, "loss": 5276.4677, "grad_norm": Infinity, "time": 0.85728}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 1e-05, "memory": 14022, "data_time": 0.02824, "loss_cls": 2.25678, "loss_bbox": 2.27416, "d0.loss_cls": 2.24371, "d0.loss_bbox": 4.39583, "d1.loss_cls": 2.25052, "d1.loss_bbox": 2.27406, "d2.loss_cls": 2.24852, "d2.loss_bbox": 2.27442, "d3.loss_cls": 2.25215, "d3.loss_bbox": 2.27449, "d4.loss_cls": 2.25154, "d4.loss_bbox": 2.2742, "aux_task0.loss_heatmap": 437.10714, "aux_task0.loss_bbox": 0.96656, "aux_task1.loss_heatmap": 785.68768, "aux_task1.loss_bbox": 1.10486, "aux_task2.loss_heatmap": 1255.84983, "aux_task2.loss_bbox": 1.25772, "aux_task3.loss_heatmap": 1528.02228, "aux_task3.loss_bbox": 0.82242, "aux_task4.loss_heatmap": 595.45374, "aux_task4.loss_bbox": 0.85856, "aux_task5.loss_heatmap": 812.92036, "aux_task5.loss_bbox": 1.01029, "loss": 5450.33185, "grad_norm": NaN, "time": 0.86069}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 1e-05, "memory": 14022, "data_time": 0.02409, "loss_cls": 2.25683, "loss_bbox": 2.26785, "d0.loss_cls": 2.24419, "d0.loss_bbox": 4.41355, "d1.loss_cls": 2.25024, "d1.loss_bbox": 2.26851, "d2.loss_cls": 2.2498, "d2.loss_bbox": 2.26818, "d3.loss_cls": 2.25175, "d3.loss_bbox": 2.26857, "d4.loss_cls": 2.25236, "d4.loss_bbox": 2.26821, "aux_task0.loss_heatmap": 481.69102, "aux_task0.loss_bbox": 0.96924, "aux_task1.loss_heatmap": 748.4073, "aux_task1.loss_bbox": 1.08907, "aux_task2.loss_heatmap": 1270.88603, "aux_task2.loss_bbox": 1.20223, "aux_task3.loss_heatmap": 1357.55959, "aux_task3.loss_bbox": 0.8519, "aux_task4.loss_heatmap": 579.85294, "aux_task4.loss_bbox": 0.90665, "aux_task5.loss_heatmap": 870.44268, "aux_task5.loss_bbox": 0.98243, "loss": 5344.10105, "grad_norm": Infinity, "time": 0.86578}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 1e-05, "memory": 14022, "data_time": 0.02424, "loss_cls": 2.25603, "loss_bbox": 2.25198, "d0.loss_cls": 2.24423, "d0.loss_bbox": 4.38959, "d1.loss_cls": 2.24973, "d1.loss_bbox": 2.25225, "d2.loss_cls": 2.24955, "d2.loss_bbox": 2.25239, "d3.loss_cls": 2.25305, "d3.loss_bbox": 2.25267, "d4.loss_cls": 2.2514, "d4.loss_bbox": 2.25254, "aux_task0.loss_heatmap": 395.68326, "aux_task0.loss_bbox": 0.96351, "aux_task1.loss_heatmap": 713.33746, "aux_task1.loss_bbox": 1.09112, "aux_task2.loss_heatmap": 1252.52229, "aux_task2.loss_bbox": 1.24738, "aux_task3.loss_heatmap": 1236.70606, "aux_task3.loss_bbox": 0.90048, "aux_task4.loss_heatmap": 604.16436, "aux_task4.loss_bbox": 0.89071, "aux_task5.loss_heatmap": 727.59204, "aux_task5.loss_bbox": 0.99862, "loss": 4965.2527, "grad_norm": Infinity, "time": 0.85962}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 1e-05, "memory": 14022, "data_time": 0.02672, "loss_cls": 2.25696, "loss_bbox": 2.30017, "d0.loss_cls": 2.24583, "d0.loss_bbox": 4.43018, "d1.loss_cls": 2.25034, "d1.loss_bbox": 2.3004, "d2.loss_cls": 2.2505, "d2.loss_bbox": 2.29989, "d3.loss_cls": 2.25432, "d3.loss_bbox": 2.30002, "d4.loss_cls": 2.25328, "d4.loss_bbox": 2.30026, "aux_task0.loss_heatmap": 320.43219, "aux_task0.loss_bbox": 0.99397, "aux_task1.loss_heatmap": 742.51127, "aux_task1.loss_bbox": 1.13034, "aux_task2.loss_heatmap": 1259.53445, "aux_task2.loss_bbox": 1.28803, "aux_task3.loss_heatmap": 1402.14227, "aux_task3.loss_bbox": 0.7836, "aux_task4.loss_heatmap": 608.48394, "aux_task4.loss_bbox": 0.90007, "aux_task5.loss_heatmap": 842.42462, "aux_task5.loss_bbox": 0.99746, "loss": 5211.06434, "grad_norm": Infinity, "time": 0.85916}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 1e-05, "memory": 14022, "data_time": 0.02578, "loss_cls": 2.25699, "loss_bbox": 2.25417, "d0.loss_cls": 2.24559, "d0.loss_bbox": 4.36587, "d1.loss_cls": 2.25009, "d1.loss_bbox": 2.25486, "d2.loss_cls": 2.25034, "d2.loss_bbox": 2.25468, "d3.loss_cls": 2.25393, "d3.loss_bbox": 2.25429, "d4.loss_cls": 2.25315, "d4.loss_bbox": 2.254, "aux_task0.loss_heatmap": 441.88761, "aux_task0.loss_bbox": 0.98302, "aux_task1.loss_heatmap": 756.86659, "aux_task1.loss_bbox": 1.1384, "aux_task2.loss_heatmap": 1299.41852, "aux_task2.loss_bbox": 1.31574, "aux_task3.loss_heatmap": 1138.69177, "aux_task3.loss_bbox": 0.89115, "aux_task4.loss_heatmap": 589.9141, "aux_task4.loss_bbox": 0.84522, "aux_task5.loss_heatmap": 825.98831, "aux_task5.loss_bbox": 0.98002, "loss": 5088.06838, "grad_norm": Infinity, "time": 0.85331}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 1e-05, "memory": 14022, "data_time": 0.02524, "loss_cls": 2.25683, "loss_bbox": 2.28845, "d0.loss_cls": 2.24489, "d0.loss_bbox": 4.44065, "d1.loss_cls": 2.24974, "d1.loss_bbox": 2.2892, "d2.loss_cls": 2.25073, "d2.loss_bbox": 2.28878, "d3.loss_cls": 2.25456, "d3.loss_bbox": 2.2887, "d4.loss_cls": 2.25344, "d4.loss_bbox": 2.28867, "aux_task0.loss_heatmap": 361.08377, "aux_task0.loss_bbox": 1.01934, "aux_task1.loss_heatmap": 790.13975, "aux_task1.loss_bbox": 1.08624, "aux_task2.loss_heatmap": 1198.45733, "aux_task2.loss_bbox": 1.29128, "aux_task3.loss_heatmap": 1659.18701, "aux_task3.loss_bbox": 0.83734, "aux_task4.loss_heatmap": 604.92784, "aux_task4.loss_bbox": 0.84947, "aux_task5.loss_heatmap": 823.89911, "aux_task5.loss_bbox": 0.9955, "loss": 5473.16853, "grad_norm": NaN, "time": 0.85132}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 1e-05, "memory": 14022, "data_time": 0.03018, "loss_cls": 2.25505, "loss_bbox": 2.26144, "d0.loss_cls": 2.24559, "d0.loss_bbox": 4.39724, "d1.loss_cls": 2.25025, "d1.loss_bbox": 2.26219, "d2.loss_cls": 2.25157, "d2.loss_bbox": 2.26184, "d3.loss_cls": 2.2542, "d3.loss_bbox": 2.26193, "d4.loss_cls": 2.25297, "d4.loss_bbox": 2.26167, "aux_task0.loss_heatmap": 395.06633, "aux_task0.loss_bbox": 1.02363, "aux_task1.loss_heatmap": 747.56287, "aux_task1.loss_bbox": 1.04765, "aux_task2.loss_heatmap": 1278.36538, "aux_task2.loss_bbox": 1.31295, "aux_task3.loss_heatmap": 987.00628, "aux_task3.loss_bbox": 0.8244, "aux_task4.loss_heatmap": 596.83355, "aux_task4.loss_bbox": 0.88945, "aux_task5.loss_heatmap": 796.96526, "aux_task5.loss_bbox": 0.95908, "loss": 4837.07284, "grad_norm": Infinity, "time": 0.85981}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 1e-05, "memory": 14022, "data_time": 0.02866, "loss_cls": 2.26005, "loss_bbox": 2.24542, "d0.loss_cls": 2.24535, "d0.loss_bbox": 4.38319, "d1.loss_cls": 2.2501, "d1.loss_bbox": 2.24598, "d2.loss_cls": 2.25023, "d2.loss_bbox": 2.24588, "d3.loss_cls": 2.25513, "d3.loss_bbox": 2.24603, "d4.loss_cls": 2.25394, "d4.loss_bbox": 2.24563, "aux_task0.loss_heatmap": 267.13678, "aux_task0.loss_bbox": 0.99819, "aux_task1.loss_heatmap": 780.71118, "aux_task1.loss_bbox": 1.07761, "aux_task2.loss_heatmap": 1280.9464, "aux_task2.loss_bbox": 1.34944, "aux_task3.loss_heatmap": 1419.82744, "aux_task3.loss_bbox": 0.8173, "aux_task4.loss_heatmap": 598.38606, "aux_task4.loss_bbox": 0.90336, "aux_task5.loss_heatmap": 752.6395, "aux_task5.loss_bbox": 1.00341, "loss": 5134.92355, "grad_norm": Infinity, "time": 0.85246}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 1e-05, "memory": 14022, "data_time": 0.02671, "loss_cls": 2.25586, "loss_bbox": 2.26026, "d0.loss_cls": 2.24469, "d0.loss_bbox": 4.39319, "d1.loss_cls": 2.24904, "d1.loss_bbox": 2.26079, "d2.loss_cls": 2.24914, "d2.loss_bbox": 2.26037, "d3.loss_cls": 2.25184, "d3.loss_bbox": 2.2611, "d4.loss_cls": 2.25163, "d4.loss_bbox": 2.26069, "aux_task0.loss_heatmap": 466.11053, "aux_task0.loss_bbox": 1.00814, "aux_task1.loss_heatmap": 729.86193, "aux_task1.loss_bbox": 1.08356, "aux_task2.loss_heatmap": 1217.9473, "aux_task2.loss_bbox": 1.27012, "aux_task3.loss_heatmap": 1324.55603, "aux_task3.loss_bbox": 0.80617, "aux_task4.loss_heatmap": 588.1684, "aux_task4.loss_bbox": 0.86336, "aux_task5.loss_heatmap": 801.81411, "aux_task5.loss_bbox": 0.9618, "loss": 5163.65002, "grad_norm": Infinity, "time": 0.86547}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 1e-05, "memory": 14022, "data_time": 0.02721, "loss_cls": 2.25888, "loss_bbox": 2.22424, "d0.loss_cls": 2.24636, "d0.loss_bbox": 4.38229, "d1.loss_cls": 2.25114, "d1.loss_bbox": 2.22484, "d2.loss_cls": 2.25029, "d2.loss_bbox": 2.22493, "d3.loss_cls": 2.25396, "d3.loss_bbox": 2.22461, "d4.loss_cls": 2.25382, "d4.loss_bbox": 2.22438, "aux_task0.loss_heatmap": 321.09949, "aux_task0.loss_bbox": 0.97624, "aux_task1.loss_heatmap": 765.73262, "aux_task1.loss_bbox": 1.09393, "aux_task2.loss_heatmap": 1330.70375, "aux_task2.loss_bbox": 1.26929, "aux_task3.loss_heatmap": 1388.02172, "aux_task3.loss_bbox": 0.8039, "aux_task4.loss_heatmap": 610.69855, "aux_task4.loss_bbox": 0.85997, "aux_task5.loss_heatmap": 856.89926, "aux_task5.loss_bbox": 0.98171, "loss": 5308.16013, "grad_norm": Infinity, "time": 0.86365}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 1e-05, "memory": 14022, "data_time": 0.03038, "loss_cls": 2.25712, "loss_bbox": 2.27454, "d0.loss_cls": 2.24519, "d0.loss_bbox": 4.41433, "d1.loss_cls": 2.24955, "d1.loss_bbox": 2.27453, "d2.loss_cls": 2.25109, "d2.loss_bbox": 2.27466, "d3.loss_cls": 2.25338, "d3.loss_bbox": 2.27471, "d4.loss_cls": 2.25236, "d4.loss_bbox": 2.27461, "aux_task0.loss_heatmap": 365.41963, "aux_task0.loss_bbox": 0.98083, "aux_task1.loss_heatmap": 726.81415, "aux_task1.loss_bbox": 1.07393, "aux_task2.loss_heatmap": 1259.41534, "aux_task2.loss_bbox": 1.31902, "aux_task3.loss_heatmap": 1217.33275, "aux_task3.loss_bbox": 0.84745, "aux_task4.loss_heatmap": 581.76859, "aux_task4.loss_bbox": 0.87321, "aux_task5.loss_heatmap": 843.29627, "aux_task5.loss_bbox": 1.00077, "loss": 5029.43794, "grad_norm": Infinity, "time": 0.8649}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 1e-05, "memory": 14022, "data_time": 0.02793, "loss_cls": 2.25494, "loss_bbox": 2.25419, "d0.loss_cls": 2.24388, "d0.loss_bbox": 4.38464, "d1.loss_cls": 2.24911, "d1.loss_bbox": 2.25417, "d2.loss_cls": 2.25085, "d2.loss_bbox": 2.25458, "d3.loss_cls": 2.25349, "d3.loss_bbox": 2.25471, "d4.loss_cls": 2.25034, "d4.loss_bbox": 2.25432, "aux_task0.loss_heatmap": 405.25779, "aux_task0.loss_bbox": 1.03008, "aux_task1.loss_heatmap": 811.97589, "aux_task1.loss_bbox": 1.03868, "aux_task2.loss_heatmap": 1264.12438, "aux_task2.loss_bbox": 1.30991, "aux_task3.loss_heatmap": 1099.60033, "aux_task3.loss_bbox": 0.82199, "aux_task4.loss_heatmap": 590.60474, "aux_task4.loss_bbox": 0.84231, "aux_task5.loss_heatmap": 783.9568, "aux_task5.loss_bbox": 1.00073, "loss": 4990.72281, "grad_norm": Infinity, "time": 0.85256}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 1e-05, "memory": 14022, "data_time": 0.02672, "loss_cls": 2.257, "loss_bbox": 2.29376, "d0.loss_cls": 2.24378, "d0.loss_bbox": 4.43175, "d1.loss_cls": 2.24938, "d1.loss_bbox": 2.29383, "d2.loss_cls": 2.24951, "d2.loss_bbox": 2.29376, "d3.loss_cls": 2.25332, "d3.loss_bbox": 2.29377, "d4.loss_cls": 2.25269, "d4.loss_bbox": 2.2936, "aux_task0.loss_heatmap": 393.31232, "aux_task0.loss_bbox": 0.9872, "aux_task1.loss_heatmap": 763.15368, "aux_task1.loss_bbox": 1.06937, "aux_task2.loss_heatmap": 1212.72658, "aux_task2.loss_bbox": 1.28196, "aux_task3.loss_heatmap": 1639.51208, "aux_task3.loss_bbox": 0.81795, "aux_task4.loss_heatmap": 587.16987, "aux_task4.loss_bbox": 0.83894, "aux_task5.loss_heatmap": 763.68428, "aux_task5.loss_bbox": 0.92188, "loss": 5394.88226, "grad_norm": NaN, "time": 0.86252}
{"mode": "train", "epoch": 1, "iter": 1650, "lr": 1e-05, "memory": 14022, "data_time": 0.02676, "loss_cls": 2.25676, "loss_bbox": 2.24409, "d0.loss_cls": 2.24499, "d0.loss_bbox": 4.38653, "d1.loss_cls": 2.25054, "d1.loss_bbox": 2.24451, "d2.loss_cls": 2.25178, "d2.loss_bbox": 2.24417, "d3.loss_cls": 2.25432, "d3.loss_bbox": 2.24434, "d4.loss_cls": 2.25209, "d4.loss_bbox": 2.24403, "aux_task0.loss_heatmap": 358.55503, "aux_task0.loss_bbox": 1.02543, "aux_task1.loss_heatmap": 767.79353, "aux_task1.loss_bbox": 1.10653, "aux_task2.loss_heatmap": 1207.92697, "aux_task2.loss_bbox": 1.28737, "aux_task3.loss_heatmap": 1196.54704, "aux_task3.loss_bbox": 0.88661, "aux_task4.loss_heatmap": 601.39248, "aux_task4.loss_bbox": 0.86232, "aux_task5.loss_heatmap": 825.50551, "aux_task5.loss_bbox": 0.99132, "loss": 4992.99838, "grad_norm": Infinity, "time": 0.85303}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 1e-05, "memory": 14022, "data_time": 0.02666, "loss_cls": 2.25601, "loss_bbox": 2.27224, "d0.loss_cls": 2.24441, "d0.loss_bbox": 4.39599, "d1.loss_cls": 2.24942, "d1.loss_bbox": 2.27224, "d2.loss_cls": 2.24954, "d2.loss_bbox": 2.27254, "d3.loss_cls": 2.25277, "d3.loss_bbox": 2.27257, "d4.loss_cls": 2.25156, "d4.loss_bbox": 2.27266, "aux_task0.loss_heatmap": 350.53733, "aux_task0.loss_bbox": 0.99925, "aux_task1.loss_heatmap": 764.37466, "aux_task1.loss_bbox": 1.04898, "aux_task2.loss_heatmap": 1191.75518, "aux_task2.loss_bbox": 1.28528, "aux_task3.loss_heatmap": 1447.70227, "aux_task3.loss_bbox": 0.77902, "aux_task4.loss_heatmap": 591.79194, "aux_task4.loss_bbox": 0.88135, "aux_task5.loss_heatmap": 734.76587, "aux_task5.loss_bbox": 1.02353, "loss": 5116.20655, "grad_norm": Infinity, "time": 0.85407}
{"mode": "train", "epoch": 1, "iter": 1750, "lr": 1e-05, "memory": 14022, "data_time": 0.02626, "loss_cls": 2.25778, "loss_bbox": 2.28081, "d0.loss_cls": 2.2458, "d0.loss_bbox": 4.44005, "d1.loss_cls": 2.25111, "d1.loss_bbox": 2.28086, "d2.loss_cls": 2.25195, "d2.loss_bbox": 2.28116, "d3.loss_cls": 2.25439, "d3.loss_bbox": 2.28105, "d4.loss_cls": 2.25316, "d4.loss_bbox": 2.28134, "aux_task0.loss_heatmap": 446.85664, "aux_task0.loss_bbox": 0.9904, "aux_task1.loss_heatmap": 769.09193, "aux_task1.loss_bbox": 1.08785, "aux_task2.loss_heatmap": 1200.86933, "aux_task2.loss_bbox": 1.38847, "aux_task3.loss_heatmap": 1395.86808, "aux_task3.loss_bbox": 0.81253, "aux_task4.loss_heatmap": 586.92084, "aux_task4.loss_bbox": 0.7991, "aux_task5.loss_heatmap": 916.39075, "aux_task5.loss_bbox": 0.95008, "loss": 5351.38537, "grad_norm": NaN, "time": 0.86503}
