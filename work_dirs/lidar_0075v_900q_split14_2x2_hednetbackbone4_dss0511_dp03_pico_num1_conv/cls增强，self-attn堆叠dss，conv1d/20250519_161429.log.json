{"env_info": "sys.platform: linux\nPython: 3.8.20 | packaged by conda-forge | (default, Sep 30 2024, 17:52:49) [GCC 13.3.0]\nCUDA available: True\nGPU 0,1: NVIDIA GeForce RTX 4090 D\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.6, V11.6.55\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0\nPyTorch: 1.13.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2022.1-Product Build 20220311 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.6\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.14.0\nOpenCV: 4.11.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.4\nMMCV CUDA Compiler: 11.6\nMMDetection: 2.27.0\nMMSegmentation: 0.30.0\nMMDetection3D: 1.0.0rc6+52a0242\nspconv2.0: True", "config": "point_cloud_range = [-54, -54, -5.0, 54, 54, 3.0]\nclass_names = [\n    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n]\ndataset_type = 'NuScenesDataset'\ndata_root = 'data/nuscenes/'\ninput_modality = dict(\n    use_lidar=True,\n    use_camera=False,\n    use_radar=False,\n    use_map=False,\n    use_external=False)\nfile_client_args = dict(backend='disk')\ntrain_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),\n    dict(\n        type='ObjectSample',\n        db_sampler=dict(\n            data_root='data/nuscenes/',\n            info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',\n            rate=1.0,\n            prepare=dict(\n                filter_by_difficulty=[-1],\n                filter_by_min_points=dict(\n                    car=5,\n                    truck=5,\n                    bus=5,\n                    trailer=5,\n                    construction_vehicle=5,\n                    traffic_cone=5,\n                    barrier=5,\n                    motorcycle=5,\n                    bicycle=5,\n                    pedestrian=5)),\n            classes=[\n                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                'traffic_cone'\n            ],\n            sample_groups=dict(\n                car=2,\n                truck=3,\n                construction_vehicle=7,\n                bus=4,\n                trailer=6,\n                barrier=2,\n                motorcycle=6,\n                bicycle=6,\n                pedestrian=2,\n                traffic_cone=2),\n            points_loader=dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk')))),\n    dict(\n        type='GlobalRotScaleTrans',\n        rot_range=[-0.785, 0.785],\n        scale_ratio_range=[0.9, 1.1],\n        translation_std=[0.5, 0.5, 0.5]),\n    dict(\n        type='RandomFlip3D',\n        sync_2d=False,\n        flip_ratio_bev_horizontal=0.5,\n        flip_ratio_bev_vertical=0.5),\n    dict(\n        type='PointsRangeFilter',\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    dict(\n        type='ObjectRangeFilter',\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    dict(\n        type='ObjectNameFilter',\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(type='PointShuffle'),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(type='Collect3D', keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n]\ntest_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),\n    dict(\n        type='MultiScaleFlipAug3D',\n        img_scale=(1333, 800),\n        pts_scale_ratio=1,\n        flip=False,\n        transforms=[\n            dict(\n                type='GlobalRotScaleTrans',\n                rot_range=[0, 0],\n                scale_ratio_range=[1.0, 1.0],\n                translation_std=[0, 0, 0]),\n            dict(type='RandomFlip3D'),\n            dict(\n                type='PointsRangeFilter',\n                point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ],\n                with_label=False),\n            dict(\n                type='Collect3D',\n                keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n        ])\n]\neval_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        with_label=False),\n    dict(type='Collect3D', keys=['points'])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=4,\n    train=dict(\n        type='CBGSDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_train.pkl',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=10,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadAnnotations3D',\n                with_bbox_3d=True,\n                with_label_3d=True),\n            dict(\n                type='GlobalRotScaleTrans',\n                rot_range=[-0.3925, 0.3925],\n                scale_ratio_range=[0.95, 1.05],\n                translation_std=[0, 0, 0]),\n            dict(type='RandomFlip3D', flip_ratio_bev_horizontal=0.5),\n            dict(\n                type='PointsRangeFilter',\n                point_cloud_range=[-50, -50, -5, 50, 50, 3]),\n            dict(\n                type='ObjectRangeFilter',\n                point_cloud_range=[-50, -50, -5, 50, 50, 3]),\n            dict(\n                type='ObjectNameFilter',\n                classes=[\n                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                    'barrier'\n                ]),\n            dict(type='PointShuffle'),\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                    'barrier'\n                ]),\n            dict(\n                type='Collect3D',\n                keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n        ],\n        classes=[\n            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=False,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=False,\n        box_type_3d='LiDAR',\n        split=14,\n        dataset=dict(\n            type='NuScenesDataset',\n            data_root='data/nuscenes/',\n            ann_file='data/nuscenes/nuscenes_infos_train.pkl',\n            pipeline=[\n                dict(\n                    type='LoadPointsFromFile',\n                    coord_type='LIDAR',\n                    load_dim=5,\n                    use_dim=5,\n                    file_client_args=dict(backend='disk')),\n                dict(\n                    type='LoadPointsFromMultiSweeps',\n                    sweeps_num=9,\n                    use_dim=[0, 1, 2, 3, 4],\n                    file_client_args=dict(backend='disk'),\n                    pad_empty_sweeps=True,\n                    remove_close=True),\n                dict(\n                    type='LoadAnnotations3D',\n                    with_bbox_3d=True,\n                    with_label_3d=True),\n                dict(\n                    type='ObjectSample',\n                    db_sampler=dict(\n                        data_root='data/nuscenes/',\n                        info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',\n                        rate=1.0,\n                        prepare=dict(\n                            filter_by_difficulty=[-1],\n                            filter_by_min_points=dict(\n                                car=5,\n                                truck=5,\n                                bus=5,\n                                trailer=5,\n                                construction_vehicle=5,\n                                traffic_cone=5,\n                                barrier=5,\n                                motorcycle=5,\n                                bicycle=5,\n                                pedestrian=5)),\n                        classes=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        sample_groups=dict(\n                            car=2,\n                            truck=3,\n                            construction_vehicle=7,\n                            bus=4,\n                            trailer=6,\n                            barrier=2,\n                            motorcycle=6,\n                            bicycle=6,\n                            pedestrian=2,\n                            traffic_cone=2),\n                        points_loader=dict(\n                            type='LoadPointsFromFile',\n                            coord_type='LIDAR',\n                            load_dim=5,\n                            use_dim=[0, 1, 2, 3, 4],\n                            file_client_args=dict(backend='disk')))),\n                dict(\n                    type='GlobalRotScaleTrans',\n                    rot_range=[-0.785, 0.785],\n                    scale_ratio_range=[0.9, 1.1],\n                    translation_std=[0.5, 0.5, 0.5]),\n                dict(\n                    type='RandomFlip3D',\n                    sync_2d=False,\n                    flip_ratio_bev_horizontal=0.5,\n                    flip_ratio_bev_vertical=0.5),\n                dict(\n                    type='PointsRangeFilter',\n                    point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                dict(\n                    type='ObjectRangeFilter',\n                    point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                dict(\n                    type='ObjectNameFilter',\n                    classes=[\n                        'car', 'truck', 'construction_vehicle', 'bus',\n                        'trailer', 'barrier', 'motorcycle', 'bicycle',\n                        'pedestrian', 'traffic_cone'\n                    ]),\n                dict(type='PointShuffle'),\n                dict(\n                    type='DefaultFormatBundle3D',\n                    class_names=[\n                        'car', 'truck', 'construction_vehicle', 'bus',\n                        'trailer', 'barrier', 'motorcycle', 'bicycle',\n                        'pedestrian', 'traffic_cone'\n                    ]),\n                dict(\n                    type='Collect3D',\n                    keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n            ],\n            classes=[\n                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                'traffic_cone'\n            ],\n            test_mode=False,\n            use_valid_flag=True,\n            box_type_3d='LiDAR')),\n    val=dict(\n        type='NuScenesDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_val.pkl',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=9,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk'),\n                pad_empty_sweeps=True,\n                remove_close=True),\n            dict(\n                type='LoadAnnotations3D',\n                with_bbox_3d=True,\n                with_label_3d=True),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1333, 800),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='GlobalRotScaleTrans',\n                        rot_range=[0, 0],\n                        scale_ratio_range=[1.0, 1.0],\n                        translation_std=[0, 0, 0]),\n                    dict(type='RandomFlip3D'),\n                    dict(\n                        type='PointsRangeFilter',\n                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(\n                        type='Collect3D',\n                        keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=False,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=True,\n        box_type_3d='LiDAR'),\n    test=dict(\n        type='NuScenesDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_val.pkl',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=9,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk'),\n                pad_empty_sweeps=True,\n                remove_close=True),\n            dict(\n                type='LoadAnnotations3D',\n                with_bbox_3d=True,\n                with_label_3d=True),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1333, 800),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='GlobalRotScaleTrans',\n                        rot_range=[0, 0],\n                        scale_ratio_range=[1.0, 1.0],\n                        translation_std=[0, 0, 0]),\n                    dict(type='RandomFlip3D'),\n                    dict(\n                        type='PointsRangeFilter',\n                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(\n                        type='Collect3D',\n                        keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=False,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=True,\n        box_type_3d='LiDAR'))\nevaluation = dict(\n    interval=5,\n    pipeline=[\n        dict(\n            type='LoadPointsFromFile',\n            coord_type='LIDAR',\n            load_dim=5,\n            use_dim=5,\n            file_client_args=dict(backend='disk')),\n        dict(\n            type='LoadPointsFromMultiSweeps',\n            sweeps_num=10,\n            file_client_args=dict(backend='disk')),\n        dict(\n            type='DefaultFormatBundle3D',\n            class_names=[\n                'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                'barrier'\n            ],\n            with_label=False),\n        dict(type='Collect3D', keys=['points'])\n    ])\noptimizer = dict(type='AdamW', lr=1.25e-05, weight_decay=0.01)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='cyclic',\n    target_ratio=(10, 0.0001),\n    cyclic_times=1,\n    step_ratio_up=0.4)\nmomentum_config = dict(\n    policy='cyclic',\n    target_ratio=(0.8947368421052632, 1),\n    cyclic_times=1,\n    step_ratio_up=0.4)\nrunner = dict(type='EpochBasedRunner', max_epochs=20)\ncheckpoint_config = dict(interval=1, max_keep_ckpts=1)\nlog_config = dict(\n    interval=50,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nwork_dir = './work_dirs/lidar_0075v_900q_split14_hednetbackbone4_dss0511_num1_nomorton_noxy_norope_dp03/cls\u589e\u5f3a\uff0cself-attn\u5806\u53e0dss\uff0cconv1d'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nplugin = 'plugin/futr3d'\nvoxel_size = [0.075, 0.075, 0.2]\ncenter_head = dict(\n    type='CenterHead',\n    in_channels=512,\n    tasks=[\n        dict(num_class=1, class_names=['car']),\n        dict(num_class=2, class_names=['truck', 'construction_vehicle']),\n        dict(num_class=2, class_names=['bus', 'trailer']),\n        dict(num_class=1, class_names=['barrier']),\n        dict(num_class=2, class_names=['motorcycle', 'bicycle']),\n        dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])\n    ],\n    common_heads=dict(\n        reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),\n    share_conv_channel=64,\n    bbox_coder=dict(\n        type='CenterPointBBoxCoder',\n        pc_range=[-54, -54],\n        post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n        max_num=500,\n        score_threshold=0.1,\n        out_size_factor=8,\n        voxel_size=[0.075, 0.075],\n        code_size=9),\n    separate_head=dict(type='SeparateHead', init_bias=-2.19, final_kernel=3),\n    loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),\n    loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),\n    norm_bbox=True)\nmodel = dict(\n    type='FUTR3D',\n    aux_weight=0.5,\n    pts_voxel_layer=dict(\n        max_num_points=10,\n        voxel_size=[0.075, 0.075, 0.2],\n        max_voxels=(120000, 160000),\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    pts_voxel_encoder=dict(type='HardSimpleVFE', num_features=5),\n    pts_middle_encoder=dict(\n        type='SparseEncoder',\n        in_channels=5,\n        sparse_shape=[41, 1440, 1440],\n        output_channels=128,\n        order=('conv', 'norm', 'act'),\n        encoder_channels=((16, 16, 32), (32, 32, 64), (64, 64, 128), (128,\n                                                                      128)),\n        encoder_paddings=((0, 0, 1), (0, 0, 1), (0, 0, [0, 1, 1]), (0, 0)),\n        block_type='basicblock'),\n    pts_backbone=dict(\n        type='CascadeDEDBackbone',\n        in_channels=256,\n        model_cfg=dict(\n            USE_SECONDMAMBA=False,\n            FEATURE_DIM=256,\n            NUM_LAYERS=4,\n            NUM_SBB=[2, 1, 1],\n            DOWN_STRIDES=[1, 2, 2])),\n    pts_neck=dict(\n        type='FPN',\n        norm_cfg=dict(type='BN2d', eps=0.001, momentum=0.01),\n        act_cfg=dict(type='ReLU', inplace=False),\n        in_channels=[256],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs=True,\n        num_outs=4,\n        relu_before_extra_convs=True),\n    pts_bbox_head=dict(\n        type='FUTR3DHead',\n        use_dab=True,\n        use_dss=True,\n        use_hybrid=False,\n        dss_drop_prob=0.3,\n        dss_mamba_version='DSSMamba_Pico',\n        dss_num_layers=1,\n        dss_use_morton=False,\n        dss_use_conv=True,\n        dss_use_xy=False,\n        dss_use_rope=False,\n        anchor_size=3,\n        use_aux=True,\n        aux_head=dict(\n            type='CenterHead',\n            in_channels=512,\n            tasks=[\n                dict(num_class=1, class_names=['car']),\n                dict(\n                    num_class=2, class_names=['truck',\n                                              'construction_vehicle']),\n                dict(num_class=2, class_names=['bus', 'trailer']),\n                dict(num_class=1, class_names=['barrier']),\n                dict(num_class=2, class_names=['motorcycle', 'bicycle']),\n                dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])\n            ],\n            common_heads=dict(\n                reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),\n            share_conv_channel=64,\n            bbox_coder=dict(\n                type='CenterPointBBoxCoder',\n                pc_range=[-54, -54],\n                post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n                max_num=500,\n                score_threshold=0.1,\n                out_size_factor=8,\n                voxel_size=[0.075, 0.075],\n                code_size=9),\n            separate_head=dict(\n                type='SeparateHead', init_bias=-2.19, final_kernel=3),\n            loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),\n            loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),\n            norm_bbox=True),\n        mix_selection=False,\n        num_query=900,\n        num_classes=10,\n        in_channels=256,\n        pc_range=[-54, -54, -5.0, 54, 54, 3.0],\n        sync_cls_avg_factor=True,\n        with_box_refine=True,\n        as_two_stage=False,\n        code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],\n        transformer=dict(\n            type='FUTR3DTransformer',\n            use_dab=True,\n            decoder=dict(\n                type='FUTR3DTransformerDecoder',\n                num_layers=6,\n                use_dab=True,\n                anchor_size=3,\n                return_intermediate=True,\n                transformerlayers=dict(\n                    type='DetrTransformerDecoderLayer',\n                    attn_cfgs=[\n                        dict(\n                            type='MultiheadAttention',\n                            embed_dims=256,\n                            num_heads=8,\n                            dropout=0.1),\n                        dict(type='FUTR3DAttention', embed_dims=256)\n                    ],\n                    feedforward_channels=1024,\n                    ffn_dropout=0.1,\n                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',\n                                     'ffn', 'norm')))),\n        positional_encoding=dict(\n            type='SinePositionalEncoding',\n            num_feats=128,\n            normalize=True,\n            offset=-0.5),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=2.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=0.25),\n        loss_iou=dict(type='GIoULoss', loss_weight=0)),\n    train_cfg=dict(\n        pts=dict(\n            point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0],\n            pc_range=[-54, -54, -5.0, 54, 54, 3.0],\n            grid_size=[1440, 1440, 40],\n            voxel_size=[0.075, 0.075, 0.2],\n            out_size_factor=8,\n            dense_reg=1,\n            gaussian_overlap=0.1,\n            max_objs=500,\n            min_radius=2,\n            code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],\n            assigner=dict(\n                type='HungarianAssigner3D',\n                cls_cost=dict(type='FocalLossCost', weight=2.0),\n                reg_cost=dict(type='BBox3DL1Cost', weight=0.25),\n                iou_cost=dict(type='IoUCost', weight=0)))),\n    test_cfg=dict(\n        pts=dict(\n            pc_range=[-54, -54],\n            post_center_limit_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n            max_per_img=500,\n            max_pool_nms=False,\n            min_radius=[4, 12, 10, 1, 0.85, 0.175],\n            out_size_factor=8,\n            voxel_size=[0.075, 0.075],\n            nms_type='circle',\n            pre_max_size=1000,\n            post_max_size=83,\n            nms_thr=0.2,\n            max_num=300,\n            score_threshold=0,\n            post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0])))\ndb_sampler = dict(\n    data_root='data/nuscenes/',\n    info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',\n    rate=1.0,\n    prepare=dict(\n        filter_by_difficulty=[-1],\n        filter_by_min_points=dict(\n            car=5,\n            truck=5,\n            bus=5,\n            trailer=5,\n            construction_vehicle=5,\n            traffic_cone=5,\n            barrier=5,\n            motorcycle=5,\n            bicycle=5,\n            pedestrian=5)),\n    classes=[\n        'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n        'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n    ],\n    sample_groups=dict(\n        car=2,\n        truck=3,\n        construction_vehicle=7,\n        bus=4,\n        trailer=6,\n        barrier=2,\n        motorcycle=6,\n        bicycle=6,\n        pedestrian=2,\n        traffic_cone=2),\n    points_loader=dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk')))\nfind_unused_parameters = True\ncustom_hooks = [dict(type='FadeOjectSampleHook', num_last_epochs=5)]\ngpu_ids = range(0, 2)\n", "seed": 0, "exp_name": "lidar_0075v_900q_split14_hednetbackbone4_dss0511_num1_nomorton_noxy_norope_dp03.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 1e-05, "memory": 11166, "data_time": 0.07342, "loss_cls": 2.04676, "loss_bbox": 2.23768, "d0.loss_cls": 2.21218, "d0.loss_bbox": 4.38134, "d1.loss_cls": 2.15884, "d1.loss_bbox": 2.25044, "d2.loss_cls": 2.10784, "d2.loss_bbox": 2.24697, "d3.loss_cls": 2.09035, "d3.loss_bbox": 2.24358, "d4.loss_cls": 2.0611, "d4.loss_bbox": 2.24046, "aux_task0.loss_heatmap": 291.78399, "aux_task0.loss_bbox": 0.88389, "aux_task1.loss_heatmap": 677.68532, "aux_task1.loss_bbox": 1.04328, "aux_task2.loss_heatmap": 799.79135, "aux_task2.loss_bbox": 1.18179, "aux_task3.loss_heatmap": 800.04957, "aux_task3.loss_bbox": 0.89361, "aux_task4.loss_heatmap": 627.20516, "aux_task4.loss_bbox": 0.77223, "aux_task5.loss_heatmap": 726.98786, "aux_task5.loss_bbox": 0.77851, "loss": 3957.33411, "grad_norm": 20085.70746, "time": 1.08637}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 1e-05, "memory": 11166, "data_time": 0.00562, "loss_cls": 1.5224, "loss_bbox": 2.13365, "d0.loss_cls": 2.03006, "d0.loss_bbox": 4.24164, "d1.loss_cls": 1.7634, "d1.loss_bbox": 2.19271, "d2.loss_cls": 1.64172, "d2.loss_bbox": 2.17715, "d3.loss_cls": 1.60506, "d3.loss_bbox": 2.16101, "d4.loss_cls": 1.55934, "d4.loss_bbox": 2.14698, "aux_task0.loss_heatmap": 175.87572, "aux_task0.loss_bbox": 0.77355, "aux_task1.loss_heatmap": 440.46988, "aux_task1.loss_bbox": 0.94276, "aux_task2.loss_heatmap": 486.26008, "aux_task2.loss_bbox": 1.04769, "aux_task3.loss_heatmap": 329.1546, "aux_task3.loss_bbox": 0.70076, "aux_task4.loss_heatmap": 394.3664, "aux_task4.loss_bbox": 0.63444, "aux_task5.loss_heatmap": 404.54115, "aux_task5.loss_bbox": 0.66009, "loss": 2260.60225, "grad_norm": 11908.36933, "time": 0.85574}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 11166, "data_time": 0.00621, "loss_cls": 1.21947, "loss_bbox": 1.92538, "d0.loss_cls": 1.52081, "d0.loss_bbox": 4.06456, "d1.loss_cls": 1.27004, "d1.loss_bbox": 2.08997, "d2.loss_cls": 1.2436, "d2.loss_bbox": 2.04179, "d3.loss_cls": 1.23951, "d3.loss_bbox": 1.99417, "d4.loss_cls": 1.22704, "d4.loss_bbox": 1.95294, "aux_task0.loss_heatmap": 103.01985, "aux_task0.loss_bbox": 0.66195, "aux_task1.loss_heatmap": 250.63578, "aux_task1.loss_bbox": 0.82025, "aux_task2.loss_heatmap": 304.51464, "aux_task2.loss_bbox": 0.91742, "aux_task3.loss_heatmap": 231.68255, "aux_task3.loss_bbox": 0.60899, "aux_task4.loss_heatmap": 248.05844, "aux_task4.loss_bbox": 0.54884, "aux_task5.loss_heatmap": 288.31925, "aux_task5.loss_bbox": 0.56486, "loss": 1452.14211, "grad_norm": 8266.03312, "time": 0.85398}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 1e-05, "memory": 11195, "data_time": 0.0059, "loss_cls": 1.17187, "loss_bbox": 1.8653, "d0.loss_cls": 1.18815, "d0.loss_bbox": 3.22767, "d1.loss_cls": 1.17705, "d1.loss_bbox": 1.85793, "d2.loss_cls": 1.17295, "d2.loss_bbox": 1.81526, "d3.loss_cls": 1.17294, "d3.loss_bbox": 1.80846, "d4.loss_cls": 1.17469, "d4.loss_bbox": 1.8265, "aux_task0.loss_heatmap": 78.81473, "aux_task0.loss_bbox": 0.58382, "aux_task1.loss_heatmap": 172.64806, "aux_task1.loss_bbox": 0.75779, "aux_task2.loss_heatmap": 189.34901, "aux_task2.loss_bbox": 0.84242, "aux_task3.loss_heatmap": 148.75274, "aux_task3.loss_bbox": 0.52591, "aux_task4.loss_heatmap": 163.97135, "aux_task4.loss_bbox": 0.50021, "aux_task5.loss_heatmap": 196.01014, "aux_task5.loss_bbox": 0.52154, "loss": 972.73648, "grad_norm": 5967.35007, "time": 0.85128}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 1e-05, "memory": 11195, "data_time": 0.00623, "loss_cls": 1.1203, "loss_bbox": 1.93674, "d0.loss_cls": 1.14897, "d0.loss_bbox": 2.03338, "d1.loss_cls": 1.14561, "d1.loss_bbox": 1.76275, "d2.loss_cls": 1.13812, "d2.loss_bbox": 1.80887, "d3.loss_cls": 1.12693, "d3.loss_bbox": 1.8617, "d4.loss_cls": 1.12485, "d4.loss_bbox": 1.90717, "aux_task0.loss_heatmap": 37.38215, "aux_task0.loss_bbox": 0.53577, "aux_task1.loss_heatmap": 109.06177, "aux_task1.loss_bbox": 0.66332, "aux_task2.loss_heatmap": 126.49832, "aux_task2.loss_bbox": 0.74626, "aux_task3.loss_heatmap": 76.4199, "aux_task3.loss_bbox": 0.49089, "aux_task4.loss_heatmap": 113.04692, "aux_task4.loss_bbox": 0.47092, "aux_task5.loss_heatmap": 108.20645, "aux_task5.loss_bbox": 0.50592, "loss": 592.144, "grad_norm": 3823.38757, "time": 0.85238}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 1e-05, "memory": 11195, "data_time": 0.00546, "loss_cls": 1.09818, "loss_bbox": 1.81156, "d0.loss_cls": 1.15063, "d0.loss_bbox": 1.75049, "d1.loss_cls": 1.14339, "d1.loss_bbox": 1.74075, "d2.loss_cls": 1.12463, "d2.loss_bbox": 1.77405, "d3.loss_cls": 1.10627, "d3.loss_bbox": 1.80074, "d4.loss_cls": 1.10038, "d4.loss_bbox": 1.81201, "aux_task0.loss_heatmap": 25.3639, "aux_task0.loss_bbox": 0.47538, "aux_task1.loss_heatmap": 71.90355, "aux_task1.loss_bbox": 0.59772, "aux_task2.loss_heatmap": 82.28839, "aux_task2.loss_bbox": 0.67745, "aux_task3.loss_heatmap": 56.91041, "aux_task3.loss_bbox": 0.45897, "aux_task4.loss_heatmap": 72.35015, "aux_task4.loss_bbox": 0.45453, "aux_task5.loss_heatmap": 84.29273, "aux_task5.loss_bbox": 0.48032, "loss": 413.66658, "grad_norm": 2798.99081, "time": 0.85121}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 1e-05, "memory": 11195, "data_time": 0.00598, "loss_cls": 1.13355, "loss_bbox": 1.75498, "d0.loss_cls": 1.16576, "d0.loss_bbox": 1.73925, "d1.loss_cls": 1.15613, "d1.loss_bbox": 1.73859, "d2.loss_cls": 1.13797, "d2.loss_bbox": 1.75845, "d3.loss_cls": 1.12946, "d3.loss_bbox": 1.76461, "d4.loss_cls": 1.12883, "d4.loss_bbox": 1.76451, "aux_task0.loss_heatmap": 23.07597, "aux_task0.loss_bbox": 0.46577, "aux_task1.loss_heatmap": 46.94442, "aux_task1.loss_bbox": 0.55206, "aux_task2.loss_heatmap": 58.79114, "aux_task2.loss_bbox": 0.61469, "aux_task3.loss_heatmap": 39.51894, "aux_task3.loss_bbox": 0.43451, "aux_task4.loss_heatmap": 50.03683, "aux_task4.loss_bbox": 0.43988, "aux_task5.loss_heatmap": 57.28772, "aux_task5.loss_bbox": 0.46813, "loss": 296.00217, "grad_norm": 2066.27384, "time": 0.85632}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 1e-05, "memory": 11195, "data_time": 0.00584, "loss_cls": 1.12023, "loss_bbox": 1.72952, "d0.loss_cls": 1.14281, "d0.loss_bbox": 1.73187, "d1.loss_cls": 1.13353, "d1.loss_bbox": 1.72755, "d2.loss_cls": 1.11961, "d2.loss_bbox": 1.73669, "d3.loss_cls": 1.11854, "d3.loss_bbox": 1.73863, "d4.loss_cls": 1.11698, "d4.loss_bbox": 1.73564, "aux_task0.loss_heatmap": 11.84326, "aux_task0.loss_bbox": 0.45505, "aux_task1.loss_heatmap": 31.56669, "aux_task1.loss_bbox": 0.53457, "aux_task2.loss_heatmap": 39.72397, "aux_task2.loss_bbox": 0.5825, "aux_task3.loss_heatmap": 27.97061, "aux_task3.loss_bbox": 0.44323, "aux_task4.loss_heatmap": 35.0485, "aux_task4.loss_bbox": 0.44175, "aux_task5.loss_heatmap": 36.44806, "aux_task5.loss_bbox": 0.47927, "loss": 202.68908, "grad_norm": 1430.80019, "time": 0.85132}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 1e-05, "memory": 11195, "data_time": 0.00642, "loss_cls": 1.11875, "loss_bbox": 1.72503, "d0.loss_cls": 1.14725, "d0.loss_bbox": 1.73681, "d1.loss_cls": 1.13881, "d1.loss_bbox": 1.72627, "d2.loss_cls": 1.128, "d2.loss_bbox": 1.73381, "d3.loss_cls": 1.12501, "d3.loss_bbox": 1.73159, "d4.loss_cls": 1.12036, "d4.loss_bbox": 1.72916, "aux_task0.loss_heatmap": 11.01478, "aux_task0.loss_bbox": 0.44122, "aux_task1.loss_heatmap": 20.54362, "aux_task1.loss_bbox": 0.50134, "aux_task2.loss_heatmap": 24.35382, "aux_task2.loss_bbox": 0.54331, "aux_task3.loss_heatmap": 15.31762, "aux_task3.loss_bbox": 0.43222, "aux_task4.loss_heatmap": 23.61279, "aux_task4.loss_bbox": 0.4397, "aux_task5.loss_heatmap": 23.67994, "aux_task5.loss_bbox": 0.46614, "loss": 138.50735, "grad_norm": 930.3749, "time": 0.86142}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 1e-05, "memory": 11195, "data_time": 0.006, "loss_cls": 1.10079, "loss_bbox": 1.71115, "d0.loss_cls": 1.13722, "d0.loss_bbox": 1.73794, "d1.loss_cls": 1.13016, "d1.loss_bbox": 1.73182, "d2.loss_cls": 1.11944, "d2.loss_bbox": 1.73532, "d3.loss_cls": 1.11439, "d3.loss_bbox": 1.73294, "d4.loss_cls": 1.10505, "d4.loss_bbox": 1.72054, "aux_task0.loss_heatmap": 6.36143, "aux_task0.loss_bbox": 0.45095, "aux_task1.loss_heatmap": 14.08617, "aux_task1.loss_bbox": 0.49889, "aux_task2.loss_heatmap": 18.64267, "aux_task2.loss_bbox": 0.5249, "aux_task3.loss_heatmap": 10.6206, "aux_task3.loss_bbox": 0.42069, "aux_task4.loss_heatmap": 15.76814, "aux_task4.loss_bbox": 0.44129, "aux_task5.loss_heatmap": 17.04058, "aux_task5.loss_bbox": 0.47221, "loss": 102.40528, "grad_norm": 666.73432, "time": 0.85083}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 1e-05, "memory": 11195, "data_time": 0.00646, "loss_cls": 1.07194, "loss_bbox": 1.70932, "d0.loss_cls": 1.12159, "d0.loss_bbox": 1.74118, "d1.loss_cls": 1.11683, "d1.loss_bbox": 1.72237, "d2.loss_cls": 1.10823, "d2.loss_bbox": 1.72464, "d3.loss_cls": 1.09625, "d3.loss_bbox": 1.71804, "d4.loss_cls": 1.07983, "d4.loss_bbox": 1.71169, "aux_task0.loss_heatmap": 5.06105, "aux_task0.loss_bbox": 0.45348, "aux_task1.loss_heatmap": 9.12139, "aux_task1.loss_bbox": 0.4987, "aux_task2.loss_heatmap": 11.06839, "aux_task2.loss_bbox": 0.52084, "aux_task3.loss_heatmap": 7.94311, "aux_task3.loss_bbox": 0.42128, "aux_task4.loss_heatmap": 10.83056, "aux_task4.loss_bbox": 0.42397, "aux_task5.loss_heatmap": 11.20631, "aux_task5.loss_bbox": 0.46669, "loss": 74.93767, "grad_norm": 447.15761, "time": 0.85287}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 1e-05, "memory": 11252, "data_time": 0.00618, "loss_cls": 1.06749, "loss_bbox": 1.70355, "d0.loss_cls": 1.12979, "d0.loss_bbox": 1.74093, "d1.loss_cls": 1.11883, "d1.loss_bbox": 1.72914, "d2.loss_cls": 1.10724, "d2.loss_bbox": 1.7199, "d3.loss_cls": 1.09087, "d3.loss_bbox": 1.70501, "d4.loss_cls": 1.07194, "d4.loss_bbox": 1.70493, "aux_task0.loss_heatmap": 3.93928, "aux_task0.loss_bbox": 0.45787, "aux_task1.loss_heatmap": 6.42482, "aux_task1.loss_bbox": 0.49687, "aux_task2.loss_heatmap": 7.48094, "aux_task2.loss_bbox": 0.5231, "aux_task3.loss_heatmap": 6.78718, "aux_task3.loss_bbox": 0.42098, "aux_task4.loss_heatmap": 7.31545, "aux_task4.loss_bbox": 0.43122, "aux_task5.loss_heatmap": 8.08332, "aux_task5.loss_bbox": 0.46334, "loss": 59.71398, "grad_norm": 314.67747, "time": 0.85397}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 1e-05, "memory": 11252, "data_time": 0.00654, "loss_cls": 1.05263, "loss_bbox": 1.71806, "d0.loss_cls": 1.11879, "d0.loss_bbox": 1.75344, "d1.loss_cls": 1.10555, "d1.loss_bbox": 1.73698, "d2.loss_cls": 1.08904, "d2.loss_bbox": 1.72427, "d3.loss_cls": 1.06512, "d3.loss_bbox": 1.71696, "d4.loss_cls": 1.05283, "d4.loss_bbox": 1.72536, "aux_task0.loss_heatmap": 3.17201, "aux_task0.loss_bbox": 0.46391, "aux_task1.loss_heatmap": 4.63149, "aux_task1.loss_bbox": 0.50744, "aux_task2.loss_heatmap": 5.12567, "aux_task2.loss_bbox": 0.52026, "aux_task3.loss_heatmap": 4.44099, "aux_task3.loss_bbox": 0.42132, "aux_task4.loss_heatmap": 5.08305, "aux_task4.loss_bbox": 0.43638, "aux_task5.loss_heatmap": 5.5116, "aux_task5.loss_bbox": 0.46518, "loss": 47.63835, "grad_norm": 203.18233, "time": 0.84873}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 1e-05, "memory": 11252, "data_time": 0.00644, "loss_cls": 1.04944, "loss_bbox": 1.67033, "d0.loss_cls": 1.10481, "d0.loss_bbox": 1.74045, "d1.loss_cls": 1.09348, "d1.loss_bbox": 1.71756, "d2.loss_cls": 1.06829, "d2.loss_bbox": 1.69277, "d3.loss_cls": 1.04689, "d3.loss_bbox": 1.68547, "d4.loss_cls": 1.04321, "d4.loss_bbox": 1.67931, "aux_task0.loss_heatmap": 2.40886, "aux_task0.loss_bbox": 0.4489, "aux_task1.loss_heatmap": 3.42831, "aux_task1.loss_bbox": 0.50878, "aux_task2.loss_heatmap": 3.89407, "aux_task2.loss_bbox": 0.49461, "aux_task3.loss_heatmap": 3.72929, "aux_task3.loss_bbox": 0.41096, "aux_task4.loss_heatmap": 3.74602, "aux_task4.loss_bbox": 0.43063, "aux_task5.loss_heatmap": 3.90278, "aux_task5.loss_bbox": 0.45844, "loss": 40.45365, "grad_norm": 141.86071, "time": 0.84969}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 1e-05, "memory": 11252, "data_time": 0.00633, "loss_cls": 1.04159, "loss_bbox": 1.65107, "d0.loss_cls": 1.08879, "d0.loss_bbox": 1.73881, "d1.loss_cls": 1.07992, "d1.loss_bbox": 1.71749, "d2.loss_cls": 1.03661, "d2.loss_bbox": 1.69018, "d3.loss_cls": 1.02896, "d3.loss_bbox": 1.67278, "d4.loss_cls": 1.03545, "d4.loss_bbox": 1.66003, "aux_task0.loss_heatmap": 2.10074, "aux_task0.loss_bbox": 0.43495, "aux_task1.loss_heatmap": 2.67504, "aux_task1.loss_bbox": 0.49439, "aux_task2.loss_heatmap": 2.96392, "aux_task2.loss_bbox": 0.48188, "aux_task3.loss_heatmap": 2.61096, "aux_task3.loss_bbox": 0.40951, "aux_task4.loss_heatmap": 2.80672, "aux_task4.loss_bbox": 0.43617, "aux_task5.loss_heatmap": 3.02815, "aux_task5.loss_bbox": 0.45457, "loss": 35.33868, "grad_norm": 90.32248, "time": 0.85516}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 1e-05, "memory": 11252, "data_time": 0.00631, "loss_cls": 1.01768, "loss_bbox": 1.61379, "d0.loss_cls": 1.07136, "d0.loss_bbox": 1.70618, "d1.loss_cls": 1.0492, "d1.loss_bbox": 1.69117, "d2.loss_cls": 0.99968, "d2.loss_bbox": 1.66048, "d3.loss_cls": 1.00157, "d3.loss_bbox": 1.63082, "d4.loss_cls": 1.00928, "d4.loss_bbox": 1.62147, "aux_task0.loss_heatmap": 1.74925, "aux_task0.loss_bbox": 0.44248, "aux_task1.loss_heatmap": 2.19872, "aux_task1.loss_bbox": 0.48439, "aux_task2.loss_heatmap": 2.4667, "aux_task2.loss_bbox": 0.48581, "aux_task3.loss_heatmap": 2.42307, "aux_task3.loss_bbox": 0.39836, "aux_task4.loss_heatmap": 2.29972, "aux_task4.loss_bbox": 0.42373, "aux_task5.loss_heatmap": 2.42193, "aux_task5.loss_bbox": 0.44723, "loss": 32.31408, "grad_norm": 66.74791, "time": 0.85438}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 1e-05, "memory": 11252, "data_time": 0.00629, "loss_cls": 1.03111, "loss_bbox": 1.63, "d0.loss_cls": 1.07775, "d0.loss_bbox": 1.72868, "d1.loss_cls": 1.05541, "d1.loss_bbox": 1.69397, "d2.loss_cls": 1.01057, "d2.loss_bbox": 1.65602, "d3.loss_cls": 1.01688, "d3.loss_bbox": 1.63769, "d4.loss_cls": 1.02586, "d4.loss_bbox": 1.63214, "aux_task0.loss_heatmap": 1.695, "aux_task0.loss_bbox": 0.42178, "aux_task1.loss_heatmap": 1.98428, "aux_task1.loss_bbox": 0.48904, "aux_task2.loss_heatmap": 2.10603, "aux_task2.loss_bbox": 0.49823, "aux_task3.loss_heatmap": 2.02604, "aux_task3.loss_bbox": 0.40004, "aux_task4.loss_heatmap": 1.9716, "aux_task4.loss_bbox": 0.42229, "aux_task5.loss_heatmap": 2.18109, "aux_task5.loss_bbox": 0.44741, "loss": 30.83892, "grad_norm": 51.6218, "time": 0.85534}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 1e-05, "memory": 11252, "data_time": 0.0063, "loss_cls": 1.02255, "loss_bbox": 1.62126, "d0.loss_cls": 1.07001, "d0.loss_bbox": 1.7399, "d1.loss_cls": 1.04181, "d1.loss_bbox": 1.69702, "d2.loss_cls": 1.00118, "d2.loss_bbox": 1.6594, "d3.loss_cls": 1.0072, "d3.loss_bbox": 1.6351, "d4.loss_cls": 1.01727, "d4.loss_bbox": 1.62618, "aux_task0.loss_heatmap": 1.57665, "aux_task0.loss_bbox": 0.42711, "aux_task1.loss_heatmap": 1.84002, "aux_task1.loss_bbox": 0.49116, "aux_task2.loss_heatmap": 1.98435, "aux_task2.loss_bbox": 0.49745, "aux_task3.loss_heatmap": 1.91075, "aux_task3.loss_bbox": 0.39673, "aux_task4.loss_heatmap": 1.79042, "aux_task4.loss_bbox": 0.42301, "aux_task5.loss_heatmap": 1.87155, "aux_task5.loss_bbox": 0.44557, "loss": 29.79364, "grad_norm": 43.64357, "time": 0.88672}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 1e-05, "memory": 11260, "data_time": 0.00737, "loss_cls": 0.99725, "loss_bbox": 1.62043, "d0.loss_cls": 1.04507, "d0.loss_bbox": 1.74047, "d1.loss_cls": 1.01014, "d1.loss_bbox": 1.67783, "d2.loss_cls": 0.97751, "d2.loss_bbox": 1.64236, "d3.loss_cls": 0.98668, "d3.loss_bbox": 1.62555, "d4.loss_cls": 0.99261, "d4.loss_bbox": 1.62392, "aux_task0.loss_heatmap": 1.50995, "aux_task0.loss_bbox": 0.4358, "aux_task1.loss_heatmap": 1.73271, "aux_task1.loss_bbox": 0.48793, "aux_task2.loss_heatmap": 1.82317, "aux_task2.loss_bbox": 0.4724, "aux_task3.loss_heatmap": 1.71158, "aux_task3.loss_bbox": 0.3986, "aux_task4.loss_heatmap": 1.65392, "aux_task4.loss_bbox": 0.42013, "aux_task5.loss_heatmap": 1.69856, "aux_task5.loss_bbox": 0.44564, "loss": 28.73019, "grad_norm": 37.68207, "time": 0.88991}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 1e-05, "memory": 11260, "data_time": 0.00527, "loss_cls": 1.00073, "loss_bbox": 1.57955, "d0.loss_cls": 1.05288, "d0.loss_bbox": 1.69892, "d1.loss_cls": 1.01242, "d1.loss_bbox": 1.62731, "d2.loss_cls": 0.98686, "d2.loss_bbox": 1.60234, "d3.loss_cls": 0.99413, "d3.loss_bbox": 1.58678, "d4.loss_cls": 0.99978, "d4.loss_bbox": 1.58275, "aux_task0.loss_heatmap": 1.51343, "aux_task0.loss_bbox": 0.43005, "aux_task1.loss_heatmap": 1.64939, "aux_task1.loss_bbox": 0.46748, "aux_task2.loss_heatmap": 1.83337, "aux_task2.loss_bbox": 0.47656, "aux_task3.loss_heatmap": 1.71265, "aux_task3.loss_bbox": 0.40137, "aux_task4.loss_heatmap": 1.55993, "aux_task4.loss_bbox": 0.41728, "aux_task5.loss_heatmap": 1.66655, "aux_task5.loss_bbox": 0.44277, "loss": 28.29526, "grad_norm": 37.08158, "time": 0.8538}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 1e-05, "memory": 11260, "data_time": 0.00668, "loss_cls": 0.98073, "loss_bbox": 1.59994, "d0.loss_cls": 1.03331, "d0.loss_bbox": 1.72787, "d1.loss_cls": 0.98899, "d1.loss_bbox": 1.64875, "d2.loss_cls": 0.97199, "d2.loss_bbox": 1.6237, "d3.loss_cls": 0.97635, "d3.loss_bbox": 1.61073, "d4.loss_cls": 0.97954, "d4.loss_bbox": 1.60578, "aux_task0.loss_heatmap": 1.43261, "aux_task0.loss_bbox": 0.4336, "aux_task1.loss_heatmap": 1.59359, "aux_task1.loss_bbox": 0.47174, "aux_task2.loss_heatmap": 1.7787, "aux_task2.loss_bbox": 0.48474, "aux_task3.loss_heatmap": 1.5866, "aux_task3.loss_bbox": 0.40101, "aux_task4.loss_heatmap": 1.49054, "aux_task4.loss_bbox": 0.42823, "aux_task5.loss_heatmap": 1.60244, "aux_task5.loss_bbox": 0.44659, "loss": 27.89807, "grad_norm": 34.65939, "time": 0.85633}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 1e-05, "memory": 11260, "data_time": 0.00636, "loss_cls": 0.95926, "loss_bbox": 1.58182, "d0.loss_cls": 1.01792, "d0.loss_bbox": 1.71485, "d1.loss_cls": 0.97287, "d1.loss_bbox": 1.62152, "d2.loss_cls": 0.95763, "d2.loss_bbox": 1.59648, "d3.loss_cls": 0.95747, "d3.loss_bbox": 1.58647, "d4.loss_cls": 0.95774, "d4.loss_bbox": 1.58328, "aux_task0.loss_heatmap": 1.40903, "aux_task0.loss_bbox": 0.42467, "aux_task1.loss_heatmap": 1.58533, "aux_task1.loss_bbox": 0.47905, "aux_task2.loss_heatmap": 1.78665, "aux_task2.loss_bbox": 0.47471, "aux_task3.loss_heatmap": 1.52746, "aux_task3.loss_bbox": 0.40071, "aux_task4.loss_heatmap": 1.38412, "aux_task4.loss_bbox": 0.41915, "aux_task5.loss_heatmap": 1.50944, "aux_task5.loss_bbox": 0.4369, "loss": 27.34455, "grad_norm": 35.28473, "time": 0.85259}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 1e-05, "memory": 11260, "data_time": 0.00775, "loss_cls": 0.95442, "loss_bbox": 1.55902, "d0.loss_cls": 1.00352, "d0.loss_bbox": 1.69669, "d1.loss_cls": 0.96322, "d1.loss_bbox": 1.59872, "d2.loss_cls": 0.9542, "d2.loss_bbox": 1.5766, "d3.loss_cls": 0.95101, "d3.loss_bbox": 1.56719, "d4.loss_cls": 0.95146, "d4.loss_bbox": 1.56302, "aux_task0.loss_heatmap": 1.37918, "aux_task0.loss_bbox": 0.40954, "aux_task1.loss_heatmap": 1.57677, "aux_task1.loss_bbox": 0.45565, "aux_task2.loss_heatmap": 1.76264, "aux_task2.loss_bbox": 0.4864, "aux_task3.loss_heatmap": 1.50425, "aux_task3.loss_bbox": 0.39404, "aux_task4.loss_heatmap": 1.33626, "aux_task4.loss_bbox": 0.41424, "aux_task5.loss_heatmap": 1.49993, "aux_task5.loss_bbox": 0.43496, "loss": 26.99292, "grad_norm": 36.62081, "time": 0.85516}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 1e-05, "memory": 11260, "data_time": 0.00624, "loss_cls": 0.93401, "loss_bbox": 1.5606, "d0.loss_cls": 0.99597, "d0.loss_bbox": 1.68036, "d1.loss_cls": 0.95219, "d1.loss_bbox": 1.58664, "d2.loss_cls": 0.93564, "d2.loss_bbox": 1.5735, "d3.loss_cls": 0.93492, "d3.loss_bbox": 1.56465, "d4.loss_cls": 0.93252, "d4.loss_bbox": 1.56307, "aux_task0.loss_heatmap": 1.33809, "aux_task0.loss_bbox": 0.41458, "aux_task1.loss_heatmap": 1.57242, "aux_task1.loss_bbox": 0.45642, "aux_task2.loss_heatmap": 1.74876, "aux_task2.loss_bbox": 0.47252, "aux_task3.loss_heatmap": 1.48001, "aux_task3.loss_bbox": 0.3937, "aux_task4.loss_heatmap": 1.26758, "aux_task4.loss_bbox": 0.41391, "aux_task5.loss_heatmap": 1.46013, "aux_task5.loss_bbox": 0.43571, "loss": 26.66792, "grad_norm": 35.07978, "time": 0.85762}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 1e-05, "memory": 11260, "data_time": 0.00564, "loss_cls": 0.94394, "loss_bbox": 1.56285, "d0.loss_cls": 1.00214, "d0.loss_bbox": 1.68221, "d1.loss_cls": 0.95866, "d1.loss_bbox": 1.59073, "d2.loss_cls": 0.94763, "d2.loss_bbox": 1.57856, "d3.loss_cls": 0.94606, "d3.loss_bbox": 1.56835, "d4.loss_cls": 0.9434, "d4.loss_bbox": 1.56488, "aux_task0.loss_heatmap": 1.41433, "aux_task0.loss_bbox": 0.42546, "aux_task1.loss_heatmap": 1.52715, "aux_task1.loss_bbox": 0.45747, "aux_task2.loss_heatmap": 1.7351, "aux_task2.loss_bbox": 0.46838, "aux_task3.loss_heatmap": 1.48704, "aux_task3.loss_bbox": 0.3829, "aux_task4.loss_heatmap": 1.23776, "aux_task4.loss_bbox": 0.41934, "aux_task5.loss_heatmap": 1.43886, "aux_task5.loss_bbox": 0.43736, "loss": 26.72054, "grad_norm": 35.17606, "time": 0.85733}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 1e-05, "memory": 11260, "data_time": 0.00625, "loss_cls": 0.92583, "loss_bbox": 1.5488, "d0.loss_cls": 0.9759, "d0.loss_bbox": 1.6623, "d1.loss_cls": 0.93903, "d1.loss_bbox": 1.57613, "d2.loss_cls": 0.92676, "d2.loss_bbox": 1.56384, "d3.loss_cls": 0.92477, "d3.loss_bbox": 1.55582, "d4.loss_cls": 0.92409, "d4.loss_bbox": 1.55182, "aux_task0.loss_heatmap": 1.32898, "aux_task0.loss_bbox": 0.41047, "aux_task1.loss_heatmap": 1.50407, "aux_task1.loss_bbox": 0.46062, "aux_task2.loss_heatmap": 1.73744, "aux_task2.loss_bbox": 0.48648, "aux_task3.loss_heatmap": 1.48356, "aux_task3.loss_bbox": 0.38341, "aux_task4.loss_heatmap": 1.2044, "aux_task4.loss_bbox": 0.41036, "aux_task5.loss_heatmap": 1.37659, "aux_task5.loss_bbox": 0.42738, "loss": 26.28884, "grad_norm": 35.70136, "time": 0.8506}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 1e-05, "memory": 11260, "data_time": 0.00648, "loss_cls": 0.91481, "loss_bbox": 1.55276, "d0.loss_cls": 0.96657, "d0.loss_bbox": 1.66039, "d1.loss_cls": 0.93104, "d1.loss_bbox": 1.58213, "d2.loss_cls": 0.91905, "d2.loss_bbox": 1.57007, "d3.loss_cls": 0.91667, "d3.loss_bbox": 1.55957, "d4.loss_cls": 0.91543, "d4.loss_bbox": 1.55528, "aux_task0.loss_heatmap": 1.31098, "aux_task0.loss_bbox": 0.41446, "aux_task1.loss_heatmap": 1.50253, "aux_task1.loss_bbox": 0.45383, "aux_task2.loss_heatmap": 1.71954, "aux_task2.loss_bbox": 0.48467, "aux_task3.loss_heatmap": 1.39843, "aux_task3.loss_bbox": 0.38282, "aux_task4.loss_heatmap": 1.14958, "aux_task4.loss_bbox": 0.40527, "aux_task5.loss_heatmap": 1.35434, "aux_task5.loss_bbox": 0.42556, "loss": 26.04579, "grad_norm": 33.57974, "time": 0.85523}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 1e-05, "memory": 11260, "data_time": 0.00662, "loss_cls": 0.92319, "loss_bbox": 1.5485, "d0.loss_cls": 0.97203, "d0.loss_bbox": 1.6605, "d1.loss_cls": 0.93417, "d1.loss_bbox": 1.57672, "d2.loss_cls": 0.92449, "d2.loss_bbox": 1.56836, "d3.loss_cls": 0.91985, "d3.loss_bbox": 1.55945, "d4.loss_cls": 0.91986, "d4.loss_bbox": 1.55357, "aux_task0.loss_heatmap": 1.34181, "aux_task0.loss_bbox": 0.41053, "aux_task1.loss_heatmap": 1.48827, "aux_task1.loss_bbox": 0.43814, "aux_task2.loss_heatmap": 1.72423, "aux_task2.loss_bbox": 0.46941, "aux_task3.loss_heatmap": 1.42283, "aux_task3.loss_bbox": 0.37663, "aux_task4.loss_heatmap": 1.11947, "aux_task4.loss_bbox": 0.40647, "aux_task5.loss_heatmap": 1.31916, "aux_task5.loss_bbox": 0.41286, "loss": 25.99051, "grad_norm": 34.9407, "time": 0.86002}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 1e-05, "memory": 11260, "data_time": 0.00607, "loss_cls": 0.91321, "loss_bbox": 1.53522, "d0.loss_cls": 0.96631, "d0.loss_bbox": 1.64905, "d1.loss_cls": 0.9289, "d1.loss_bbox": 1.56535, "d2.loss_cls": 0.91816, "d2.loss_bbox": 1.55437, "d3.loss_cls": 0.91403, "d3.loss_bbox": 1.54336, "d4.loss_cls": 0.91124, "d4.loss_bbox": 1.5385, "aux_task0.loss_heatmap": 1.30167, "aux_task0.loss_bbox": 0.40283, "aux_task1.loss_heatmap": 1.49982, "aux_task1.loss_bbox": 0.43824, "aux_task2.loss_heatmap": 1.71051, "aux_task2.loss_bbox": 0.47392, "aux_task3.loss_heatmap": 1.36611, "aux_task3.loss_bbox": 0.37285, "aux_task4.loss_heatmap": 1.11169, "aux_task4.loss_bbox": 0.40152, "aux_task5.loss_heatmap": 1.33278, "aux_task5.loss_bbox": 0.4211, "loss": 25.77075, "grad_norm": 33.88535, "time": 0.85455}
