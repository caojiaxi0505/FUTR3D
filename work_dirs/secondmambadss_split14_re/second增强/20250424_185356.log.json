{"env_info": "sys.platform: linux\nPython: 3.8.20 | packaged by conda-forge | (default, Sep 30 2024, 17:52:49) [GCC 13.3.0]\nCUDA available: True\nGPU 0,1: NVIDIA GeForce RTX 4090 D\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.6, V11.6.55\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0\nPyTorch: 1.13.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2022.1-Product Build 20220311 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.6\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.14.0\nOpenCV: 4.11.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.4\nMMCV CUDA Compiler: 11.6\nMMDetection: 2.27.0\nMMSegmentation: 0.30.0\nMMDetection3D: 1.0.0rc6+637e2ea\nspconv2.0: True", "config": "point_cloud_range = [-54, -54, -5.0, 54, 54, 3.0]\nclass_names = [\n    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n]\ndataset_type = 'NuScenesDataset'\ndata_root = 'data/nuscenes/'\ninput_modality = dict(\n    use_lidar=True,\n    use_camera=False,\n    use_radar=False,\n    use_map=False,\n    use_external=False)\nfile_client_args = dict(backend='disk')\ntrain_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),\n    dict(\n        type='ObjectSample',\n        db_sampler=dict(\n            data_root='data/nuscenes/',\n            info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',\n            rate=1.0,\n            prepare=dict(\n                filter_by_difficulty=[-1],\n                filter_by_min_points=dict(\n                    car=5,\n                    truck=5,\n                    bus=5,\n                    trailer=5,\n                    construction_vehicle=5,\n                    traffic_cone=5,\n                    barrier=5,\n                    motorcycle=5,\n                    bicycle=5,\n                    pedestrian=5)),\n            classes=[\n                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                'traffic_cone'\n            ],\n            sample_groups=dict(\n                car=2,\n                truck=3,\n                construction_vehicle=7,\n                bus=4,\n                trailer=6,\n                barrier=2,\n                motorcycle=6,\n                bicycle=6,\n                pedestrian=2,\n                traffic_cone=2),\n            points_loader=dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk')))),\n    dict(\n        type='GlobalRotScaleTrans',\n        rot_range=[-0.785, 0.785],\n        scale_ratio_range=[0.9, 1.1],\n        translation_std=[0.5, 0.5, 0.5]),\n    dict(\n        type='RandomFlip3D',\n        sync_2d=False,\n        flip_ratio_bev_horizontal=0.5,\n        flip_ratio_bev_vertical=0.5),\n    dict(\n        type='PointsRangeFilter',\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    dict(\n        type='ObjectRangeFilter',\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    dict(\n        type='ObjectNameFilter',\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(type='PointShuffle'),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(type='Collect3D', keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n]\ntest_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),\n    dict(\n        type='MultiScaleFlipAug3D',\n        img_scale=(1333, 800),\n        pts_scale_ratio=1,\n        flip=False,\n        transforms=[\n            dict(\n                type='GlobalRotScaleTrans',\n                rot_range=[0, 0],\n                scale_ratio_range=[1.0, 1.0],\n                translation_std=[0, 0, 0]),\n            dict(type='RandomFlip3D'),\n            dict(\n                type='PointsRangeFilter',\n                point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ],\n                with_label=False),\n            dict(\n                type='Collect3D',\n                keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n        ])\n]\neval_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        with_label=False),\n    dict(type='Collect3D', keys=['points'])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=4,\n    train=dict(\n        type='CBGSDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_train.pkl',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=10,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadAnnotations3D',\n                with_bbox_3d=True,\n                with_label_3d=True),\n            dict(\n                type='GlobalRotScaleTrans',\n                rot_range=[-0.3925, 0.3925],\n                scale_ratio_range=[0.95, 1.05],\n                translation_std=[0, 0, 0]),\n            dict(type='RandomFlip3D', flip_ratio_bev_horizontal=0.5),\n            dict(\n                type='PointsRangeFilter',\n                point_cloud_range=[-50, -50, -5, 50, 50, 3]),\n            dict(\n                type='ObjectRangeFilter',\n                point_cloud_range=[-50, -50, -5, 50, 50, 3]),\n            dict(\n                type='ObjectNameFilter',\n                classes=[\n                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                    'barrier'\n                ]),\n            dict(type='PointShuffle'),\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                    'barrier'\n                ]),\n            dict(\n                type='Collect3D',\n                keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n        ],\n        classes=[\n            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=False,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=False,\n        box_type_3d='LiDAR',\n        split=14,\n        dataset=dict(\n            type='NuScenesDataset',\n            data_root='data/nuscenes/',\n            ann_file='data/nuscenes/nuscenes_infos_train.pkl',\n            pipeline=[\n                dict(\n                    type='LoadPointsFromFile',\n                    coord_type='LIDAR',\n                    load_dim=5,\n                    use_dim=5,\n                    file_client_args=dict(backend='disk')),\n                dict(\n                    type='LoadPointsFromMultiSweeps',\n                    sweeps_num=9,\n                    use_dim=[0, 1, 2, 3, 4],\n                    file_client_args=dict(backend='disk'),\n                    pad_empty_sweeps=True,\n                    remove_close=True),\n                dict(\n                    type='LoadAnnotations3D',\n                    with_bbox_3d=True,\n                    with_label_3d=True),\n                dict(\n                    type='ObjectSample',\n                    db_sampler=dict(\n                        data_root='data/nuscenes/',\n                        info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',\n                        rate=1.0,\n                        prepare=dict(\n                            filter_by_difficulty=[-1],\n                            filter_by_min_points=dict(\n                                car=5,\n                                truck=5,\n                                bus=5,\n                                trailer=5,\n                                construction_vehicle=5,\n                                traffic_cone=5,\n                                barrier=5,\n                                motorcycle=5,\n                                bicycle=5,\n                                pedestrian=5)),\n                        classes=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        sample_groups=dict(\n                            car=2,\n                            truck=3,\n                            construction_vehicle=7,\n                            bus=4,\n                            trailer=6,\n                            barrier=2,\n                            motorcycle=6,\n                            bicycle=6,\n                            pedestrian=2,\n                            traffic_cone=2),\n                        points_loader=dict(\n                            type='LoadPointsFromFile',\n                            coord_type='LIDAR',\n                            load_dim=5,\n                            use_dim=[0, 1, 2, 3, 4],\n                            file_client_args=dict(backend='disk')))),\n                dict(\n                    type='GlobalRotScaleTrans',\n                    rot_range=[-0.785, 0.785],\n                    scale_ratio_range=[0.9, 1.1],\n                    translation_std=[0.5, 0.5, 0.5]),\n                dict(\n                    type='RandomFlip3D',\n                    sync_2d=False,\n                    flip_ratio_bev_horizontal=0.5,\n                    flip_ratio_bev_vertical=0.5),\n                dict(\n                    type='PointsRangeFilter',\n                    point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                dict(\n                    type='ObjectRangeFilter',\n                    point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                dict(\n                    type='ObjectNameFilter',\n                    classes=[\n                        'car', 'truck', 'construction_vehicle', 'bus',\n                        'trailer', 'barrier', 'motorcycle', 'bicycle',\n                        'pedestrian', 'traffic_cone'\n                    ]),\n                dict(type='PointShuffle'),\n                dict(\n                    type='DefaultFormatBundle3D',\n                    class_names=[\n                        'car', 'truck', 'construction_vehicle', 'bus',\n                        'trailer', 'barrier', 'motorcycle', 'bicycle',\n                        'pedestrian', 'traffic_cone'\n                    ]),\n                dict(\n                    type='Collect3D',\n                    keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n            ],\n            classes=[\n                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                'traffic_cone'\n            ],\n            test_mode=False,\n            use_valid_flag=True,\n            box_type_3d='LiDAR')),\n    val=dict(\n        type='NuScenesDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_val.pkl',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=9,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk'),\n                pad_empty_sweeps=True,\n                remove_close=True),\n            dict(\n                type='LoadAnnotations3D',\n                with_bbox_3d=True,\n                with_label_3d=True),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1333, 800),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='GlobalRotScaleTrans',\n                        rot_range=[0, 0],\n                        scale_ratio_range=[1.0, 1.0],\n                        translation_std=[0, 0, 0]),\n                    dict(type='RandomFlip3D'),\n                    dict(\n                        type='PointsRangeFilter',\n                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(\n                        type='Collect3D',\n                        keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=False,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=True,\n        box_type_3d='LiDAR'),\n    test=dict(\n        type='NuScenesDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_val.pkl',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=9,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk'),\n                pad_empty_sweeps=True,\n                remove_close=True),\n            dict(\n                type='LoadAnnotations3D',\n                with_bbox_3d=True,\n                with_label_3d=True),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1333, 800),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='GlobalRotScaleTrans',\n                        rot_range=[0, 0],\n                        scale_ratio_range=[1.0, 1.0],\n                        translation_std=[0, 0, 0]),\n                    dict(type='RandomFlip3D'),\n                    dict(\n                        type='PointsRangeFilter',\n                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(\n                        type='Collect3D',\n                        keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=False,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=True,\n        box_type_3d='LiDAR'))\nevaluation = dict(\n    interval=1,\n    pipeline=[\n        dict(\n            type='LoadPointsFromFile',\n            coord_type='LIDAR',\n            load_dim=5,\n            use_dim=5,\n            file_client_args=dict(backend='disk')),\n        dict(\n            type='LoadPointsFromMultiSweeps',\n            sweeps_num=10,\n            file_client_args=dict(backend='disk')),\n        dict(\n            type='DefaultFormatBundle3D',\n            class_names=[\n                'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                'barrier'\n            ],\n            with_label=False),\n        dict(type='Collect3D', keys=['points'])\n    ])\noptimizer = dict(type='AdamW', lr=2.5e-05, weight_decay=0.01)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='cyclic',\n    target_ratio=(10, 0.0001),\n    cyclic_times=1,\n    step_ratio_up=0.4)\nmomentum_config = dict(\n    policy='cyclic',\n    target_ratio=(0.8947368421052632, 1),\n    cyclic_times=1,\n    step_ratio_up=0.4)\nrunner = dict(type='EpochBasedRunner', max_epochs=20)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(\n    interval=50,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nwork_dir = './work_dirs/secondmambadss_split14_re/second\u589e\u5f3a'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nplugin = 'plugin/futr3d'\nvoxel_size = [0.075, 0.075, 0.2]\ncenter_head = dict(\n    type='CenterHead',\n    in_channels=512,\n    tasks=[\n        dict(num_class=1, class_names=['car']),\n        dict(num_class=2, class_names=['truck', 'construction_vehicle']),\n        dict(num_class=2, class_names=['bus', 'trailer']),\n        dict(num_class=1, class_names=['barrier']),\n        dict(num_class=2, class_names=['motorcycle', 'bicycle']),\n        dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])\n    ],\n    common_heads=dict(\n        reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),\n    share_conv_channel=64,\n    bbox_coder=dict(\n        type='CenterPointBBoxCoder',\n        pc_range=[-54, -54],\n        post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n        max_num=500,\n        score_threshold=0.1,\n        out_size_factor=8,\n        voxel_size=[0.075, 0.075],\n        code_size=9),\n    separate_head=dict(type='SeparateHead', init_bias=-2.19, final_kernel=3),\n    loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),\n    loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),\n    norm_bbox=True)\nmodel = dict(\n    type='FUTR3D',\n    aux_weight=0.5,\n    pts_voxel_layer=dict(\n        max_num_points=10,\n        voxel_size=[0.075, 0.075, 0.2],\n        max_voxels=(120000, 160000),\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    pts_voxel_encoder=dict(type='HardSimpleVFE', num_features=5),\n    pts_middle_encoder=dict(\n        type='SparseEncoder',\n        in_channels=5,\n        sparse_shape=[41, 1440, 1440],\n        output_channels=128,\n        order=('conv', 'norm', 'act'),\n        encoder_channels=((16, 16, 32), (32, 32, 64), (64, 64, 128), (128,\n                                                                      128)),\n        encoder_paddings=((0, 0, 1), (0, 0, 1), (0, 0, [0, 1, 1]), (0, 0)),\n        block_type='basicblock'),\n    pts_backbone=dict(type='SECONDMamba'),\n    pts_neck=dict(\n        type='FPN',\n        norm_cfg=dict(type='BN2d', eps=0.001, momentum=0.01),\n        act_cfg=dict(type='ReLU', inplace=False),\n        in_channels=[256, 256],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs=True,\n        num_outs=4,\n        relu_before_extra_convs=True),\n    pts_bbox_head=dict(\n        type='FUTR3DHead',\n        use_dab=True,\n        use_dss=True,\n        use_hybrid=False,\n        hybrid=None,\n        dss_batch_first=False,\n        dss_drop_prob=0.1,\n        dss_mamba_prenorm=False,\n        dss_mamba_cfg=dict(),\n        dss_mamba_version='DSSMamba_Tiny',\n        dss_num_layers=2,\n        dss_rope=False,\n        dss_morton_rearrange=True,\n        dss_conv_path=False,\n        dss_xy=True,\n        dss_deepseek_format=False,\n        use_mss=False,\n        anchor_size=3,\n        use_aux=True,\n        aux_head=dict(\n            type='CenterHead',\n            in_channels=512,\n            tasks=[\n                dict(num_class=1, class_names=['car']),\n                dict(\n                    num_class=2, class_names=['truck',\n                                              'construction_vehicle']),\n                dict(num_class=2, class_names=['bus', 'trailer']),\n                dict(num_class=1, class_names=['barrier']),\n                dict(num_class=2, class_names=['motorcycle', 'bicycle']),\n                dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])\n            ],\n            common_heads=dict(\n                reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),\n            share_conv_channel=64,\n            bbox_coder=dict(\n                type='CenterPointBBoxCoder',\n                pc_range=[-54, -54],\n                post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n                max_num=500,\n                score_threshold=0.1,\n                out_size_factor=8,\n                voxel_size=[0.075, 0.075],\n                code_size=9),\n            separate_head=dict(\n                type='SeparateHead', init_bias=-2.19, final_kernel=3),\n            loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),\n            loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),\n            norm_bbox=True),\n        mix_selection=False,\n        num_query=900,\n        num_classes=10,\n        in_channels=256,\n        pc_range=[-54, -54, -5.0, 54, 54, 3.0],\n        sync_cls_avg_factor=True,\n        with_box_refine=True,\n        as_two_stage=False,\n        code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],\n        transformer=dict(\n            type='FUTR3DTransformer',\n            use_dab=True,\n            decoder=dict(\n                type='FUTR3DTransformerDecoder',\n                num_layers=6,\n                use_dab=True,\n                anchor_size=3,\n                return_intermediate=True,\n                transformerlayers=dict(\n                    type='DetrTransformerDecoderLayer',\n                    attn_cfgs=[\n                        dict(\n                            type='MultiheadAttention',\n                            embed_dims=256,\n                            num_heads=8,\n                            dropout=0.1),\n                        dict(type='FUTR3DAttention', embed_dims=256)\n                    ],\n                    feedforward_channels=1024,\n                    ffn_dropout=0.1,\n                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',\n                                     'ffn', 'norm')))),\n        positional_encoding=dict(\n            type='SinePositionalEncoding',\n            num_feats=128,\n            normalize=True,\n            offset=-0.5),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=2.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=0.25),\n        loss_iou=dict(type='GIoULoss', loss_weight=0)),\n    train_cfg=dict(\n        pts=dict(\n            point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0],\n            pc_range=[-54, -54, -5.0, 54, 54, 3.0],\n            grid_size=[1440, 1440, 40],\n            voxel_size=[0.075, 0.075, 0.2],\n            out_size_factor=8,\n            dense_reg=1,\n            gaussian_overlap=0.1,\n            max_objs=500,\n            min_radius=2,\n            code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],\n            assigner=dict(\n                type='HungarianAssigner3D',\n                cls_cost=dict(type='FocalLossCost', weight=2.0),\n                reg_cost=dict(type='BBox3DL1Cost', weight=0.25),\n                iou_cost=dict(type='IoUCost', weight=0)))),\n    test_cfg=dict(\n        pts=dict(\n            pc_range=[-54, -54],\n            post_center_limit_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n            max_per_img=500,\n            max_pool_nms=False,\n            min_radius=[4, 12, 10, 1, 0.85, 0.175],\n            out_size_factor=8,\n            voxel_size=[0.075, 0.075],\n            nms_type='circle',\n            pre_max_size=1000,\n            post_max_size=83,\n            nms_thr=0.2,\n            max_num=300,\n            score_threshold=0,\n            post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0])))\ndb_sampler = dict(\n    data_root='data/nuscenes/',\n    info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',\n    rate=1.0,\n    prepare=dict(\n        filter_by_difficulty=[-1],\n        filter_by_min_points=dict(\n            car=5,\n            truck=5,\n            bus=5,\n            trailer=5,\n            construction_vehicle=5,\n            traffic_cone=5,\n            barrier=5,\n            motorcycle=5,\n            bicycle=5,\n            pedestrian=5)),\n    classes=[\n        'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n        'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n    ],\n    sample_groups=dict(\n        car=2,\n        truck=3,\n        construction_vehicle=7,\n        bus=4,\n        trailer=6,\n        barrier=2,\n        motorcycle=6,\n        bicycle=6,\n        pedestrian=2,\n        traffic_cone=2),\n    points_loader=dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk')))\nfind_unused_parameters = True\ncustom_hooks = [dict(type='FadeOjectSampleHook', num_last_epochs=5)]\ngpu_ids = range(0, 2)\n", "seed": 0, "exp_name": "secondmambadss_split14_re.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 3e-05, "memory": 19663, "data_time": 0.07643, "loss_cls": 1.33624, "loss_bbox": 2.252, "d0.loss_cls": 1.62866, "d0.loss_bbox": 4.43386, "d1.loss_cls": 1.48995, "d1.loss_bbox": 2.30014, "d2.loss_cls": 1.45079, "d2.loss_bbox": 2.28459, "d3.loss_cls": 1.40963, "d3.loss_bbox": 2.27267, "d4.loss_cls": 1.36493, "d4.loss_bbox": 2.2641, "aux_task0.loss_heatmap": 295.00884, "aux_task0.loss_bbox": 0.90797, "aux_task1.loss_heatmap": 754.38612, "aux_task1.loss_bbox": 1.04623, "aux_task2.loss_heatmap": 963.39577, "aux_task2.loss_bbox": 1.15159, "aux_task3.loss_heatmap": 855.21005, "aux_task3.loss_bbox": 0.78191, "aux_task4.loss_heatmap": 520.52122, "aux_task4.loss_bbox": 0.72, "aux_task5.loss_heatmap": 675.07479, "aux_task5.loss_bbox": 0.82347, "loss": 4093.5155, "grad_norm": 84746.08258, "time": 1.43086}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 3e-05, "memory": 19663, "data_time": 0.00821, "loss_cls": 1.17711, "loss_bbox": 2.01874, "d0.loss_cls": 1.19741, "d0.loss_bbox": 4.18016, "d1.loss_cls": 1.1888, "d1.loss_bbox": 2.15927, "d2.loss_cls": 1.18891, "d2.loss_bbox": 2.11802, "d3.loss_cls": 1.18422, "d3.loss_bbox": 2.08243, "d4.loss_cls": 1.1833, "d4.loss_bbox": 2.05273, "aux_task0.loss_heatmap": 282.42417, "aux_task0.loss_bbox": 0.87814, "aux_task1.loss_heatmap": 667.30088, "aux_task1.loss_bbox": 0.99703, "aux_task2.loss_heatmap": 895.49822, "aux_task2.loss_bbox": 1.12223, "aux_task3.loss_heatmap": 699.70124, "aux_task3.loss_bbox": 0.75511, "aux_task4.loss_heatmap": 477.12473, "aux_task4.loss_bbox": 0.68576, "aux_task5.loss_heatmap": 641.5115, "aux_task5.loss_bbox": 0.77134, "loss": 3690.50143, "grad_norm": 97155.45164, "time": 1.08915}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 3e-05, "memory": 19663, "data_time": 0.00817, "loss_cls": 1.16833, "loss_bbox": 1.90156, "d0.loss_cls": 1.17065, "d0.loss_bbox": 3.01746, "d1.loss_cls": 1.17666, "d1.loss_bbox": 1.85903, "d2.loss_cls": 1.17691, "d2.loss_bbox": 1.83412, "d3.loss_cls": 1.17375, "d3.loss_bbox": 1.84679, "d4.loss_cls": 1.17155, "d4.loss_bbox": 1.87371, "aux_task0.loss_heatmap": 266.35565, "aux_task0.loss_bbox": 0.86608, "aux_task1.loss_heatmap": 614.8337, "aux_task1.loss_bbox": 0.97614, "aux_task2.loss_heatmap": 832.70539, "aux_task2.loss_bbox": 1.10565, "aux_task3.loss_heatmap": 662.64578, "aux_task3.loss_bbox": 0.72853, "aux_task4.loss_heatmap": 445.94609, "aux_task4.loss_bbox": 0.67229, "aux_task5.loss_heatmap": 556.40402, "aux_task5.loss_bbox": 0.73214, "loss": 3403.34202, "grad_norm": 126177.19719, "time": 1.08367}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 3e-05, "memory": 19871, "data_time": 0.00985, "loss_cls": 1.14333, "loss_bbox": 1.93439, "d0.loss_cls": 1.17099, "d0.loss_bbox": 1.85028, "d1.loss_cls": 1.16725, "d1.loss_bbox": 1.78657, "d2.loss_cls": 1.15956, "d2.loss_bbox": 1.83642, "d3.loss_cls": 1.15068, "d3.loss_bbox": 1.87848, "d4.loss_cls": 1.14292, "d4.loss_bbox": 1.91132, "aux_task0.loss_heatmap": 240.94862, "aux_task0.loss_bbox": 0.85613, "aux_task1.loss_heatmap": 604.21463, "aux_task1.loss_bbox": 0.95747, "aux_task2.loss_heatmap": 840.43496, "aux_task2.loss_bbox": 1.0696, "aux_task3.loss_heatmap": 546.89243, "aux_task3.loss_bbox": 0.72801, "aux_task4.loss_heatmap": 409.75748, "aux_task4.loss_bbox": 0.64092, "aux_task5.loss_heatmap": 579.53928, "aux_task5.loss_bbox": 0.72629, "loss": 3244.89796, "grad_norm": 79558.30016, "time": 1.08369}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 3e-05, "memory": 19871, "data_time": 0.00823, "loss_cls": 1.13734, "loss_bbox": 1.77088, "d0.loss_cls": 1.17108, "d0.loss_bbox": 1.75068, "d1.loss_cls": 1.16267, "d1.loss_bbox": 1.75178, "d2.loss_cls": 1.15616, "d2.loss_bbox": 1.76845, "d3.loss_cls": 1.14686, "d3.loss_bbox": 1.77269, "d4.loss_cls": 1.13409, "d4.loss_bbox": 1.77581, "aux_task0.loss_heatmap": 218.53511, "aux_task0.loss_bbox": 0.80992, "aux_task1.loss_heatmap": 554.50952, "aux_task1.loss_bbox": 0.92941, "aux_task2.loss_heatmap": 763.41233, "aux_task2.loss_bbox": 1.04992, "aux_task3.loss_heatmap": 641.20612, "aux_task3.loss_bbox": 0.67723, "aux_task4.loss_heatmap": 375.84246, "aux_task4.loss_bbox": 0.62818, "aux_task5.loss_heatmap": 573.25049, "aux_task5.loss_bbox": 0.69718, "loss": 3149.04637, "grad_norm": 93519.59133, "time": 1.08208}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 3e-05, "memory": 19871, "data_time": 0.00752, "loss_cls": 1.14219, "loss_bbox": 1.75022, "d0.loss_cls": 1.17126, "d0.loss_bbox": 1.74719, "d1.loss_cls": 1.16144, "d1.loss_bbox": 1.74639, "d2.loss_cls": 1.15185, "d2.loss_bbox": 1.75587, "d3.loss_cls": 1.14846, "d3.loss_bbox": 1.75263, "d4.loss_cls": 1.13542, "d4.loss_bbox": 1.75232, "aux_task0.loss_heatmap": 182.90899, "aux_task0.loss_bbox": 0.78756, "aux_task1.loss_heatmap": 528.70613, "aux_task1.loss_bbox": 0.92381, "aux_task2.loss_heatmap": 674.09579, "aux_task2.loss_bbox": 1.0343, "aux_task3.loss_heatmap": 656.27231, "aux_task3.loss_bbox": 0.66619, "aux_task4.loss_heatmap": 337.06013, "aux_task4.loss_bbox": 0.60439, "aux_task5.loss_heatmap": 531.60724, "aux_task5.loss_bbox": 0.67245, "loss": 2932.75452, "grad_norm": 68519.58744, "time": 1.08096}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 3e-05, "memory": 19871, "data_time": 0.00808, "loss_cls": 1.12483, "loss_bbox": 1.72546, "d0.loss_cls": 1.17272, "d0.loss_bbox": 1.75394, "d1.loss_cls": 1.16191, "d1.loss_bbox": 1.74894, "d2.loss_cls": 1.15223, "d2.loss_bbox": 1.7515, "d3.loss_cls": 1.14488, "d3.loss_bbox": 1.74724, "d4.loss_cls": 1.11057, "d4.loss_bbox": 1.73093, "aux_task0.loss_heatmap": 173.10272, "aux_task0.loss_bbox": 0.74207, "aux_task1.loss_heatmap": 465.06752, "aux_task1.loss_bbox": 0.87749, "aux_task2.loss_heatmap": 563.79231, "aux_task2.loss_bbox": 0.99106, "aux_task3.loss_heatmap": 524.35837, "aux_task3.loss_bbox": 0.64313, "aux_task4.loss_heatmap": 279.62328, "aux_task4.loss_bbox": 0.57308, "aux_task5.loss_heatmap": 455.71517, "aux_task5.loss_bbox": 0.6442, "loss": 2483.45557, "grad_norm": 43061.04979, "time": 1.08301}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 3e-05, "memory": 19871, "data_time": 0.00804, "loss_cls": 1.08434, "loss_bbox": 1.70559, "d0.loss_cls": 1.16361, "d0.loss_bbox": 1.74353, "d1.loss_cls": 1.1429, "d1.loss_bbox": 1.73368, "d2.loss_cls": 1.12996, "d2.loss_bbox": 1.72963, "d3.loss_cls": 1.1173, "d3.loss_bbox": 1.71219, "d4.loss_cls": 1.07896, "d4.loss_bbox": 1.70893, "aux_task0.loss_heatmap": 134.94472, "aux_task0.loss_bbox": 0.69069, "aux_task1.loss_heatmap": 383.49956, "aux_task1.loss_bbox": 0.82108, "aux_task2.loss_heatmap": 453.03428, "aux_task2.loss_bbox": 0.94107, "aux_task3.loss_heatmap": 464.5642, "aux_task3.loss_bbox": 0.6163, "aux_task4.loss_heatmap": 229.4978, "aux_task4.loss_bbox": 0.53704, "aux_task5.loss_heatmap": 369.48038, "aux_task5.loss_bbox": 0.61126, "loss": 2056.28898, "grad_norm": 54170.95269, "time": 1.0883}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 3e-05, "memory": 19871, "data_time": 0.00814, "loss_cls": 1.06605, "loss_bbox": 1.70569, "d0.loss_cls": 1.15444, "d0.loss_bbox": 1.76189, "d1.loss_cls": 1.11701, "d1.loss_bbox": 1.74227, "d2.loss_cls": 1.08736, "d2.loss_bbox": 1.73425, "d3.loss_cls": 1.07901, "d3.loss_bbox": 1.72278, "d4.loss_cls": 1.05907, "d4.loss_bbox": 1.71324, "aux_task0.loss_heatmap": 116.11994, "aux_task0.loss_bbox": 0.65386, "aux_task1.loss_heatmap": 335.63828, "aux_task1.loss_bbox": 0.79937, "aux_task2.loss_heatmap": 374.98434, "aux_task2.loss_bbox": 0.9202, "aux_task3.loss_heatmap": 353.98323, "aux_task3.loss_bbox": 0.56608, "aux_task4.loss_heatmap": 190.11411, "aux_task4.loss_bbox": 0.5073, "aux_task5.loss_heatmap": 294.17744, "aux_task5.loss_bbox": 0.58259, "loss": 1685.98982, "grad_norm": 18529.08879, "time": 1.08824}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 3e-05, "memory": 19871, "data_time": 0.00752, "loss_cls": 1.07038, "loss_bbox": 1.69532, "d0.loss_cls": 1.15851, "d0.loss_bbox": 1.74236, "d1.loss_cls": 1.08774, "d1.loss_bbox": 1.70938, "d2.loss_cls": 1.07349, "d2.loss_bbox": 1.70768, "d3.loss_cls": 1.06972, "d3.loss_bbox": 1.69711, "d4.loss_cls": 1.06641, "d4.loss_bbox": 1.6837, "aux_task0.loss_heatmap": 86.07445, "aux_task0.loss_bbox": 0.60827, "aux_task1.loss_heatmap": 272.11766, "aux_task1.loss_bbox": 0.76268, "aux_task2.loss_heatmap": 276.73373, "aux_task2.loss_bbox": 0.87419, "aux_task3.loss_heatmap": 353.06977, "aux_task3.loss_bbox": 0.53533, "aux_task4.loss_heatmap": 150.00556, "aux_task4.loss_bbox": 0.4795, "aux_task5.loss_heatmap": 261.11328, "aux_task5.loss_bbox": 0.54463, "loss": 1419.68088, "grad_norm": 49182.04075, "time": 1.0819}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 3e-05, "memory": 19871, "data_time": 0.00812, "loss_cls": 1.05917, "loss_bbox": 1.67977, "d0.loss_cls": 1.15204, "d0.loss_bbox": 1.75311, "d1.loss_cls": 1.07054, "d1.loss_bbox": 1.69857, "d2.loss_cls": 1.05996, "d2.loss_bbox": 1.69127, "d3.loss_cls": 1.05772, "d3.loss_bbox": 1.68115, "d4.loss_cls": 1.0565, "d4.loss_bbox": 1.67755, "aux_task0.loss_heatmap": 36.94482, "aux_task0.loss_bbox": 0.56993, "aux_task1.loss_heatmap": 119.48598, "aux_task1.loss_bbox": 0.68243, "aux_task2.loss_heatmap": 108.21013, "aux_task2.loss_bbox": 0.78033, "aux_task3.loss_heatmap": 183.62378, "aux_task3.loss_bbox": 0.49767, "aux_task4.loss_heatmap": 62.15704, "aux_task4.loss_bbox": 0.47631, "aux_task5.loss_heatmap": 116.30131, "aux_task5.loss_bbox": 0.52479, "loss": 646.89187, "grad_norm": 56033.67121, "time": 1.0787}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 3e-05, "memory": 19871, "data_time": 0.00775, "loss_cls": 1.06458, "loss_bbox": 1.67424, "d0.loss_cls": 1.14802, "d0.loss_bbox": 1.75419, "d1.loss_cls": 1.06052, "d1.loss_bbox": 1.69345, "d2.loss_cls": 1.05455, "d2.loss_bbox": 1.68391, "d3.loss_cls": 1.05946, "d3.loss_bbox": 1.68197, "d4.loss_cls": 1.06383, "d4.loss_bbox": 1.67797, "aux_task0.loss_heatmap": 7.10353, "aux_task0.loss_bbox": 0.51353, "aux_task1.loss_heatmap": 23.2842, "aux_task1.loss_bbox": 0.57918, "aux_task2.loss_heatmap": 17.33561, "aux_task2.loss_bbox": 0.63023, "aux_task3.loss_heatmap": 32.08898, "aux_task3.loss_bbox": 0.45687, "aux_task4.loss_heatmap": 11.0077, "aux_task4.loss_bbox": 0.45362, "aux_task5.loss_heatmap": 23.85248, "aux_task5.loss_bbox": 0.50609, "loss": 134.4287, "grad_norm": 105912.93902, "time": 1.08706}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 3e-05, "memory": 19954, "data_time": 0.00804, "loss_cls": 1.05071, "loss_bbox": 1.68405, "d0.loss_cls": 1.13284, "d0.loss_bbox": 1.75424, "d1.loss_cls": 1.0407, "d1.loss_bbox": 1.68956, "d2.loss_cls": 1.04072, "d2.loss_bbox": 1.68958, "d3.loss_cls": 1.04857, "d3.loss_bbox": 1.68689, "d4.loss_cls": 1.04726, "d4.loss_bbox": 1.68618, "aux_task0.loss_heatmap": 2.34879, "aux_task0.loss_bbox": 0.45672, "aux_task1.loss_heatmap": 5.1022, "aux_task1.loss_bbox": 0.51911, "aux_task2.loss_heatmap": 4.00961, "aux_task2.loss_bbox": 0.54942, "aux_task3.loss_heatmap": 10.15616, "aux_task3.loss_bbox": 0.44221, "aux_task4.loss_heatmap": 3.01302, "aux_task4.loss_bbox": 0.44587, "aux_task5.loss_heatmap": 5.01485, "aux_task5.loss_bbox": 0.47958, "loss": 49.08887, "grad_norm": 152127.87539, "time": 1.08609}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 3e-05, "memory": 19954, "data_time": 0.00825, "loss_cls": 1.03895, "loss_bbox": 1.67522, "d0.loss_cls": 1.12992, "d0.loss_bbox": 1.74698, "d1.loss_cls": 1.03868, "d1.loss_bbox": 1.68051, "d2.loss_cls": 1.03539, "d2.loss_bbox": 1.67793, "d3.loss_cls": 1.03969, "d3.loss_bbox": 1.67987, "d4.loss_cls": 1.03883, "d4.loss_bbox": 1.68143, "aux_task0.loss_heatmap": 1.77865, "aux_task0.loss_bbox": 0.46394, "aux_task1.loss_heatmap": 2.34601, "aux_task1.loss_bbox": 0.51494, "aux_task2.loss_heatmap": 2.29025, "aux_task2.loss_bbox": 0.52211, "aux_task3.loss_heatmap": 3.47884, "aux_task3.loss_bbox": 0.43659, "aux_task4.loss_heatmap": 1.93101, "aux_task4.loss_bbox": 0.4367, "aux_task5.loss_heatmap": 2.47513, "aux_task5.loss_bbox": 0.48415, "loss": 33.62172, "grad_norm": 118556.3824, "time": 1.08683}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 3e-05, "memory": 19954, "data_time": 0.00771, "loss_cls": 1.03661, "loss_bbox": 1.64869, "d0.loss_cls": 1.11696, "d0.loss_bbox": 1.74128, "d1.loss_cls": 1.03333, "d1.loss_bbox": 1.66338, "d2.loss_cls": 1.03206, "d2.loss_bbox": 1.65729, "d3.loss_cls": 1.03666, "d3.loss_bbox": 1.65133, "d4.loss_cls": 1.03327, "d4.loss_bbox": 1.65439, "aux_task0.loss_heatmap": 1.58712, "aux_task0.loss_bbox": 0.4543, "aux_task1.loss_heatmap": 1.83574, "aux_task1.loss_bbox": 0.50635, "aux_task2.loss_heatmap": 1.90729, "aux_task2.loss_bbox": 0.50673, "aux_task3.loss_heatmap": 2.31671, "aux_task3.loss_bbox": 0.41658, "aux_task4.loss_heatmap": 1.70199, "aux_task4.loss_bbox": 0.43979, "aux_task5.loss_heatmap": 1.84811, "aux_task5.loss_bbox": 0.47037, "loss": 30.29631, "grad_norm": 623.85974, "time": 1.0879}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 3e-05, "memory": 19954, "data_time": 0.00776, "loss_cls": 1.04858, "loss_bbox": 1.65853, "d0.loss_cls": 1.12233, "d0.loss_bbox": 1.72808, "d1.loss_cls": 1.03826, "d1.loss_bbox": 1.66063, "d2.loss_cls": 1.0418, "d2.loss_bbox": 1.65797, "d3.loss_cls": 1.0437, "d3.loss_bbox": 1.65971, "d4.loss_cls": 1.04699, "d4.loss_bbox": 1.65673, "aux_task0.loss_heatmap": 1.558, "aux_task0.loss_bbox": 0.4503, "aux_task1.loss_heatmap": 1.76502, "aux_task1.loss_bbox": 0.50729, "aux_task2.loss_heatmap": 1.84437, "aux_task2.loss_bbox": 0.50633, "aux_task3.loss_heatmap": 2.18251, "aux_task3.loss_bbox": 0.43053, "aux_task4.loss_heatmap": 1.68869, "aux_task4.loss_bbox": 0.42882, "aux_task5.loss_heatmap": 1.77492, "aux_task5.loss_bbox": 0.47217, "loss": 29.97224, "grad_norm": 4344.63626, "time": 1.07847}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 3e-05, "memory": 19954, "data_time": 0.00771, "loss_cls": 1.03607, "loss_bbox": 1.63594, "d0.loss_cls": 1.10764, "d0.loss_bbox": 1.72749, "d1.loss_cls": 1.02665, "d1.loss_bbox": 1.64841, "d2.loss_cls": 1.03093, "d2.loss_bbox": 1.64209, "d3.loss_cls": 1.032, "d3.loss_bbox": 1.64208, "d4.loss_cls": 1.03434, "d4.loss_bbox": 1.6377, "aux_task0.loss_heatmap": 1.56207, "aux_task0.loss_bbox": 0.44822, "aux_task1.loss_heatmap": 1.74175, "aux_task1.loss_bbox": 0.50784, "aux_task2.loss_heatmap": 1.82054, "aux_task2.loss_bbox": 0.51007, "aux_task3.loss_heatmap": 1.86688, "aux_task3.loss_bbox": 0.41493, "aux_task4.loss_heatmap": 1.67383, "aux_task4.loss_bbox": 0.42908, "aux_task5.loss_heatmap": 1.7296, "aux_task5.loss_bbox": 0.46727, "loss": 29.37343, "grad_norm": 698.51347, "time": 1.0813}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 3e-05, "memory": 19954, "data_time": 0.00734, "loss_cls": 1.02806, "loss_bbox": 1.63003, "d0.loss_cls": 1.09571, "d0.loss_bbox": 1.71874, "d1.loss_cls": 1.02098, "d1.loss_bbox": 1.64172, "d2.loss_cls": 1.02423, "d2.loss_bbox": 1.63461, "d3.loss_cls": 1.02373, "d3.loss_bbox": 1.63353, "d4.loss_cls": 1.02555, "d4.loss_bbox": 1.6364, "aux_task0.loss_heatmap": 1.55515, "aux_task0.loss_bbox": 0.44444, "aux_task1.loss_heatmap": 1.73145, "aux_task1.loss_bbox": 0.50488, "aux_task2.loss_heatmap": 1.81107, "aux_task2.loss_bbox": 0.51882, "aux_task3.loss_heatmap": 1.80791, "aux_task3.loss_bbox": 0.41681, "aux_task4.loss_heatmap": 1.67906, "aux_task4.loss_bbox": 0.42636, "aux_task5.loss_heatmap": 1.70324, "aux_task5.loss_bbox": 0.46992, "loss": 29.18239, "grad_norm": 583.93329, "time": 1.08578}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 3e-05, "memory": 19954, "data_time": 0.0077, "loss_cls": 1.02817, "loss_bbox": 1.63646, "d0.loss_cls": 1.08969, "d0.loss_bbox": 1.73106, "d1.loss_cls": 1.02175, "d1.loss_bbox": 1.65248, "d2.loss_cls": 1.02311, "d2.loss_bbox": 1.64435, "d3.loss_cls": 1.02481, "d3.loss_bbox": 1.64124, "d4.loss_cls": 1.02723, "d4.loss_bbox": 1.64078, "aux_task0.loss_heatmap": 1.56483, "aux_task0.loss_bbox": 0.45595, "aux_task1.loss_heatmap": 1.74681, "aux_task1.loss_bbox": 0.50346, "aux_task2.loss_heatmap": 1.82653, "aux_task2.loss_bbox": 0.50387, "aux_task3.loss_heatmap": 1.74047, "aux_task3.loss_bbox": 0.41697, "aux_task4.loss_heatmap": 1.66761, "aux_task4.loss_bbox": 0.4304, "aux_task5.loss_heatmap": 1.68755, "aux_task5.loss_bbox": 0.46294, "loss": 29.16852, "grad_norm": 398.62883, "time": 1.08622}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 3e-05, "memory": 19954, "data_time": 0.00732, "loss_cls": 1.0307, "loss_bbox": 1.62375, "d0.loss_cls": 1.0864, "d0.loss_bbox": 1.72291, "d1.loss_cls": 1.02083, "d1.loss_bbox": 1.64284, "d2.loss_cls": 1.02189, "d2.loss_bbox": 1.63828, "d3.loss_cls": 1.02562, "d3.loss_bbox": 1.63242, "d4.loss_cls": 1.02758, "d4.loss_bbox": 1.62882, "aux_task0.loss_heatmap": 1.57392, "aux_task0.loss_bbox": 0.44916, "aux_task1.loss_heatmap": 1.73249, "aux_task1.loss_bbox": 0.50982, "aux_task2.loss_heatmap": 1.82067, "aux_task2.loss_bbox": 0.50904, "aux_task3.loss_heatmap": 1.72283, "aux_task3.loss_bbox": 0.4215, "aux_task4.loss_heatmap": 1.6694, "aux_task4.loss_bbox": 0.43024, "aux_task5.loss_heatmap": 1.68973, "aux_task5.loss_bbox": 0.4663, "loss": 29.09712, "grad_norm": 742.11921, "time": 1.0862}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 3e-05, "memory": 19954, "data_time": 0.01048, "loss_cls": 1.03279, "loss_bbox": 1.61279, "d0.loss_cls": 1.08299, "d0.loss_bbox": 1.71116, "d1.loss_cls": 1.02185, "d1.loss_bbox": 1.63145, "d2.loss_cls": 1.02283, "d2.loss_bbox": 1.62765, "d3.loss_cls": 1.02701, "d3.loss_bbox": 1.6194, "d4.loss_cls": 1.0295, "d4.loss_bbox": 1.61665, "aux_task0.loss_heatmap": 1.5811, "aux_task0.loss_bbox": 0.45073, "aux_task1.loss_heatmap": 1.73736, "aux_task1.loss_bbox": 0.51075, "aux_task2.loss_heatmap": 1.82254, "aux_task2.loss_bbox": 0.49832, "aux_task3.loss_heatmap": 1.74042, "aux_task3.loss_bbox": 0.4158, "aux_task4.loss_heatmap": 1.66706, "aux_task4.loss_bbox": 0.42933, "aux_task5.loss_heatmap": 1.68814, "aux_task5.loss_bbox": 0.46695, "loss": 29.04457, "grad_norm": 887.80541, "time": 1.08198}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 3e-05, "memory": 19954, "data_time": 0.00798, "loss_cls": 1.02409, "loss_bbox": 1.62087, "d0.loss_cls": 1.06933, "d0.loss_bbox": 1.7117, "d1.loss_cls": 1.01361, "d1.loss_bbox": 1.64205, "d2.loss_cls": 1.015, "d2.loss_bbox": 1.63425, "d3.loss_cls": 1.02074, "d3.loss_bbox": 1.62069, "d4.loss_cls": 1.02076, "d4.loss_bbox": 1.62135, "aux_task0.loss_heatmap": 1.56048, "aux_task0.loss_bbox": 0.4536, "aux_task1.loss_heatmap": 1.72843, "aux_task1.loss_bbox": 0.50411, "aux_task2.loss_heatmap": 1.81485, "aux_task2.loss_bbox": 0.50875, "aux_task3.loss_heatmap": 1.74661, "aux_task3.loss_bbox": 0.41753, "aux_task4.loss_heatmap": 1.66786, "aux_task4.loss_bbox": 0.43537, "aux_task5.loss_heatmap": 1.70907, "aux_task5.loss_bbox": 0.4604, "loss": 29.02149, "grad_norm": 178.86478, "time": 1.09225}
{"mode": "val", "epoch": 1, "iter": 3010, "lr": 3e-05, "pts_bbox_NuScenes/car_AP_dist_0.5": 0.0, "pts_bbox_NuScenes/car_AP_dist_1.0": 0.0, "pts_bbox_NuScenes/car_AP_dist_2.0": 0.0, "pts_bbox_NuScenes/car_AP_dist_4.0": 0.0, "pts_bbox_NuScenes/car_trans_err": 1.3192, "pts_bbox_NuScenes/car_scale_err": 0.2984, "pts_bbox_NuScenes/car_orient_err": 1.5401, "pts_bbox_NuScenes/car_vel_err": 2.15, "pts_bbox_NuScenes/car_attr_err": 0.5018, "pts_bbox_NuScenes/mATE": 1.0841, "pts_bbox_NuScenes/mASE": 0.8816, "pts_bbox_NuScenes/mAOE": 1.036, "pts_bbox_NuScenes/mAVE": 1.1438, "pts_bbox_NuScenes/mAAE": 0.9377, "pts_bbox_NuScenes/truck_AP_dist_0.5": 0.0, "pts_bbox_NuScenes/truck_AP_dist_1.0": 0.0, "pts_bbox_NuScenes/truck_AP_dist_2.0": 0.0, "pts_bbox_NuScenes/truck_AP_dist_4.0": 0.0, "pts_bbox_NuScenes/truck_trans_err": 1.0, "pts_bbox_NuScenes/truck_scale_err": 1.0, "pts_bbox_NuScenes/truck_orient_err": 1.0, "pts_bbox_NuScenes/truck_vel_err": 1.0, "pts_bbox_NuScenes/truck_attr_err": 1.0, "pts_bbox_NuScenes/construction_vehicle_AP_dist_0.5": 0.0, "pts_bbox_NuScenes/construction_vehicle_AP_dist_1.0": 0.0, "pts_bbox_NuScenes/construction_vehicle_AP_dist_2.0": 0.0, "pts_bbox_NuScenes/construction_vehicle_AP_dist_4.0": 0.0, "pts_bbox_NuScenes/construction_vehicle_trans_err": 1.0, "pts_bbox_NuScenes/construction_vehicle_scale_err": 1.0, "pts_bbox_NuScenes/construction_vehicle_orient_err": 1.0, "pts_bbox_NuScenes/construction_vehicle_vel_err": 1.0, "pts_bbox_NuScenes/construction_vehicle_attr_err": 1.0, "pts_bbox_NuScenes/bus_AP_dist_0.5": 0.0, "pts_bbox_NuScenes/bus_AP_dist_1.0": 0.0, "pts_bbox_NuScenes/bus_AP_dist_2.0": 0.0, "pts_bbox_NuScenes/bus_AP_dist_4.0": 0.0, "pts_bbox_NuScenes/bus_trans_err": 1.0, "pts_bbox_NuScenes/bus_scale_err": 1.0, "pts_bbox_NuScenes/bus_orient_err": 1.0, "pts_bbox_NuScenes/bus_vel_err": 1.0, "pts_bbox_NuScenes/bus_attr_err": 1.0, "pts_bbox_NuScenes/trailer_AP_dist_0.5": 0.0, "pts_bbox_NuScenes/trailer_AP_dist_1.0": 0.0, "pts_bbox_NuScenes/trailer_AP_dist_2.0": 0.0, "pts_bbox_NuScenes/trailer_AP_dist_4.0": 0.0, "pts_bbox_NuScenes/trailer_trans_err": 1.0, "pts_bbox_NuScenes/trailer_scale_err": 1.0, "pts_bbox_NuScenes/trailer_orient_err": 1.0, "pts_bbox_NuScenes/trailer_vel_err": 1.0, "pts_bbox_NuScenes/trailer_attr_err": 1.0, "pts_bbox_NuScenes/barrier_AP_dist_0.5": 0.0, "pts_bbox_NuScenes/barrier_AP_dist_1.0": 0.0, "pts_bbox_NuScenes/barrier_AP_dist_2.0": 0.0, "pts_bbox_NuScenes/barrier_AP_dist_4.0": 0.0, "pts_bbox_NuScenes/barrier_trans_err": 1.2561, "pts_bbox_NuScenes/barrier_scale_err": 0.7828, "pts_bbox_NuScenes/barrier_orient_err": 0.7843, "pts_bbox_NuScenes/barrier_vel_err": NaN, "pts_bbox_NuScenes/barrier_attr_err": NaN, "pts_bbox_NuScenes/motorcycle_AP_dist_0.5": 0.0, "pts_bbox_NuScenes/motorcycle_AP_dist_1.0": 0.0, "pts_bbox_NuScenes/motorcycle_AP_dist_2.0": 0.0, "pts_bbox_NuScenes/motorcycle_AP_dist_4.0": 0.0, "pts_bbox_NuScenes/motorcycle_trans_err": 1.0, "pts_bbox_NuScenes/motorcycle_scale_err": 1.0, "pts_bbox_NuScenes/motorcycle_orient_err": 1.0, "pts_bbox_NuScenes/motorcycle_vel_err": 1.0, "pts_bbox_NuScenes/motorcycle_attr_err": 1.0, "pts_bbox_NuScenes/bicycle_AP_dist_0.5": 0.0, "pts_bbox_NuScenes/bicycle_AP_dist_1.0": 0.0, "pts_bbox_NuScenes/bicycle_AP_dist_2.0": 0.0, "pts_bbox_NuScenes/bicycle_AP_dist_4.0": 0.0, "pts_bbox_NuScenes/bicycle_trans_err": 1.0, "pts_bbox_NuScenes/bicycle_scale_err": 1.0, "pts_bbox_NuScenes/bicycle_orient_err": 1.0, "pts_bbox_NuScenes/bicycle_vel_err": 1.0, "pts_bbox_NuScenes/bicycle_attr_err": 1.0, "pts_bbox_NuScenes/pedestrian_AP_dist_0.5": 0.0, "pts_bbox_NuScenes/pedestrian_AP_dist_1.0": 0.0, "pts_bbox_NuScenes/pedestrian_AP_dist_2.0": 0.0, "pts_bbox_NuScenes/pedestrian_AP_dist_4.0": 0.0, "pts_bbox_NuScenes/pedestrian_trans_err": 1.0, "pts_bbox_NuScenes/pedestrian_scale_err": 1.0, "pts_bbox_NuScenes/pedestrian_orient_err": 1.0, "pts_bbox_NuScenes/pedestrian_vel_err": 1.0, "pts_bbox_NuScenes/pedestrian_attr_err": 1.0, "pts_bbox_NuScenes/traffic_cone_AP_dist_0.5": 0.0, "pts_bbox_NuScenes/traffic_cone_AP_dist_1.0": 0.0, "pts_bbox_NuScenes/traffic_cone_AP_dist_2.0": 0.0, "pts_bbox_NuScenes/traffic_cone_AP_dist_4.0": 0.0, "pts_bbox_NuScenes/traffic_cone_trans_err": 1.2658, "pts_bbox_NuScenes/traffic_cone_scale_err": 0.7343, "pts_bbox_NuScenes/traffic_cone_orient_err": NaN, "pts_bbox_NuScenes/traffic_cone_vel_err": NaN, "pts_bbox_NuScenes/traffic_cone_attr_err": NaN, "pts_bbox_NuScenes/NDS": 0.01807, "pts_bbox_NuScenes/mAP": 0.0}
