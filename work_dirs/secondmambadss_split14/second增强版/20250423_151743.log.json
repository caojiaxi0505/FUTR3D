{"env_info": "sys.platform: linux\nPython: 3.8.20 | packaged by conda-forge | (default, Sep 30 2024, 17:52:49) [GCC 13.3.0]\nCUDA available: True\nGPU 0,1: NVIDIA GeForce RTX 4090 D\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.6, V11.6.55\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0\nPyTorch: 1.13.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2022.1-Product Build 20220311 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.6\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.14.0\nOpenCV: 4.11.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.4\nMMCV CUDA Compiler: 11.6\nMMDetection: 2.27.0\nMMSegmentation: 0.30.0\nMMDetection3D: 1.0.0rc6+637e2ea\nspconv2.0: True", "config": "point_cloud_range = [-54, -54, -5.0, 54, 54, 3.0]\nclass_names = [\n    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n]\ndataset_type = 'NuScenesDataset'\ndata_root = 'data/nuscenes/'\ninput_modality = dict(\n    use_lidar=True,\n    use_camera=False,\n    use_radar=False,\n    use_map=False,\n    use_external=False)\nfile_client_args = dict(backend='disk')\ntrain_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),\n    dict(\n        type='ObjectSample',\n        db_sampler=dict(\n            data_root='data/nuscenes/',\n            info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',\n            rate=1.0,\n            prepare=dict(\n                filter_by_difficulty=[-1],\n                filter_by_min_points=dict(\n                    car=5,\n                    truck=5,\n                    bus=5,\n                    trailer=5,\n                    construction_vehicle=5,\n                    traffic_cone=5,\n                    barrier=5,\n                    motorcycle=5,\n                    bicycle=5,\n                    pedestrian=5)),\n            classes=[\n                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                'traffic_cone'\n            ],\n            sample_groups=dict(\n                car=2,\n                truck=3,\n                construction_vehicle=7,\n                bus=4,\n                trailer=6,\n                barrier=2,\n                motorcycle=6,\n                bicycle=6,\n                pedestrian=2,\n                traffic_cone=2),\n            points_loader=dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk')))),\n    dict(\n        type='GlobalRotScaleTrans',\n        rot_range=[-0.785, 0.785],\n        scale_ratio_range=[0.9, 1.1],\n        translation_std=[0.5, 0.5, 0.5]),\n    dict(\n        type='RandomFlip3D',\n        sync_2d=False,\n        flip_ratio_bev_horizontal=0.5,\n        flip_ratio_bev_vertical=0.5),\n    dict(\n        type='PointsRangeFilter',\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    dict(\n        type='ObjectRangeFilter',\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    dict(\n        type='ObjectNameFilter',\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(type='PointShuffle'),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(type='Collect3D', keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n]\ntest_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),\n    dict(\n        type='MultiScaleFlipAug3D',\n        img_scale=(1333, 800),\n        pts_scale_ratio=1,\n        flip=False,\n        transforms=[\n            dict(\n                type='GlobalRotScaleTrans',\n                rot_range=[0, 0],\n                scale_ratio_range=[1.0, 1.0],\n                translation_std=[0, 0, 0]),\n            dict(type='RandomFlip3D'),\n            dict(\n                type='PointsRangeFilter',\n                point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ],\n                with_label=False),\n            dict(\n                type='Collect3D',\n                keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n        ])\n]\neval_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        with_label=False),\n    dict(type='Collect3D', keys=['points'])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=4,\n    train=dict(\n        type='CBGSDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_train.pkl',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=10,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadAnnotations3D',\n                with_bbox_3d=True,\n                with_label_3d=True),\n            dict(\n                type='GlobalRotScaleTrans',\n                rot_range=[-0.3925, 0.3925],\n                scale_ratio_range=[0.95, 1.05],\n                translation_std=[0, 0, 0]),\n            dict(type='RandomFlip3D', flip_ratio_bev_horizontal=0.5),\n            dict(\n                type='PointsRangeFilter',\n                point_cloud_range=[-50, -50, -5, 50, 50, 3]),\n            dict(\n                type='ObjectRangeFilter',\n                point_cloud_range=[-50, -50, -5, 50, 50, 3]),\n            dict(\n                type='ObjectNameFilter',\n                classes=[\n                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                    'barrier'\n                ]),\n            dict(type='PointShuffle'),\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                    'barrier'\n                ]),\n            dict(\n                type='Collect3D',\n                keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n        ],\n        classes=[\n            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=False,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=False,\n        box_type_3d='LiDAR',\n        split=14,\n        dataset=dict(\n            type='NuScenesDataset',\n            data_root='data/nuscenes/',\n            ann_file='data/nuscenes/nuscenes_infos_train.pkl',\n            pipeline=[\n                dict(\n                    type='LoadPointsFromFile',\n                    coord_type='LIDAR',\n                    load_dim=5,\n                    use_dim=5,\n                    file_client_args=dict(backend='disk')),\n                dict(\n                    type='LoadPointsFromMultiSweeps',\n                    sweeps_num=9,\n                    use_dim=[0, 1, 2, 3, 4],\n                    file_client_args=dict(backend='disk'),\n                    pad_empty_sweeps=True,\n                    remove_close=True),\n                dict(\n                    type='LoadAnnotations3D',\n                    with_bbox_3d=True,\n                    with_label_3d=True),\n                dict(\n                    type='ObjectSample',\n                    db_sampler=dict(\n                        data_root='data/nuscenes/',\n                        info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',\n                        rate=1.0,\n                        prepare=dict(\n                            filter_by_difficulty=[-1],\n                            filter_by_min_points=dict(\n                                car=5,\n                                truck=5,\n                                bus=5,\n                                trailer=5,\n                                construction_vehicle=5,\n                                traffic_cone=5,\n                                barrier=5,\n                                motorcycle=5,\n                                bicycle=5,\n                                pedestrian=5)),\n                        classes=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        sample_groups=dict(\n                            car=2,\n                            truck=3,\n                            construction_vehicle=7,\n                            bus=4,\n                            trailer=6,\n                            barrier=2,\n                            motorcycle=6,\n                            bicycle=6,\n                            pedestrian=2,\n                            traffic_cone=2),\n                        points_loader=dict(\n                            type='LoadPointsFromFile',\n                            coord_type='LIDAR',\n                            load_dim=5,\n                            use_dim=[0, 1, 2, 3, 4],\n                            file_client_args=dict(backend='disk')))),\n                dict(\n                    type='GlobalRotScaleTrans',\n                    rot_range=[-0.785, 0.785],\n                    scale_ratio_range=[0.9, 1.1],\n                    translation_std=[0.5, 0.5, 0.5]),\n                dict(\n                    type='RandomFlip3D',\n                    sync_2d=False,\n                    flip_ratio_bev_horizontal=0.5,\n                    flip_ratio_bev_vertical=0.5),\n                dict(\n                    type='PointsRangeFilter',\n                    point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                dict(\n                    type='ObjectRangeFilter',\n                    point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                dict(\n                    type='ObjectNameFilter',\n                    classes=[\n                        'car', 'truck', 'construction_vehicle', 'bus',\n                        'trailer', 'barrier', 'motorcycle', 'bicycle',\n                        'pedestrian', 'traffic_cone'\n                    ]),\n                dict(type='PointShuffle'),\n                dict(\n                    type='DefaultFormatBundle3D',\n                    class_names=[\n                        'car', 'truck', 'construction_vehicle', 'bus',\n                        'trailer', 'barrier', 'motorcycle', 'bicycle',\n                        'pedestrian', 'traffic_cone'\n                    ]),\n                dict(\n                    type='Collect3D',\n                    keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n            ],\n            classes=[\n                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                'traffic_cone'\n            ],\n            test_mode=False,\n            use_valid_flag=True,\n            box_type_3d='LiDAR')),\n    val=dict(\n        type='NuScenesDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_val.pkl',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=9,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk'),\n                pad_empty_sweeps=True,\n                remove_close=True),\n            dict(\n                type='LoadAnnotations3D',\n                with_bbox_3d=True,\n                with_label_3d=True),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1333, 800),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='GlobalRotScaleTrans',\n                        rot_range=[0, 0],\n                        scale_ratio_range=[1.0, 1.0],\n                        translation_std=[0, 0, 0]),\n                    dict(type='RandomFlip3D'),\n                    dict(\n                        type='PointsRangeFilter',\n                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(\n                        type='Collect3D',\n                        keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=False,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=True,\n        box_type_3d='LiDAR'),\n    test=dict(\n        type='NuScenesDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_val.pkl',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=9,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk'),\n                pad_empty_sweeps=True,\n                remove_close=True),\n            dict(\n                type='LoadAnnotations3D',\n                with_bbox_3d=True,\n                with_label_3d=True),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1333, 800),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='GlobalRotScaleTrans',\n                        rot_range=[0, 0],\n                        scale_ratio_range=[1.0, 1.0],\n                        translation_std=[0, 0, 0]),\n                    dict(type='RandomFlip3D'),\n                    dict(\n                        type='PointsRangeFilter',\n                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(\n                        type='Collect3D',\n                        keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=False,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=True,\n        box_type_3d='LiDAR'))\nevaluation = dict(\n    interval=1,\n    pipeline=[\n        dict(\n            type='LoadPointsFromFile',\n            coord_type='LIDAR',\n            load_dim=5,\n            use_dim=5,\n            file_client_args=dict(backend='disk')),\n        dict(\n            type='LoadPointsFromMultiSweeps',\n            sweeps_num=10,\n            file_client_args=dict(backend='disk')),\n        dict(\n            type='DefaultFormatBundle3D',\n            class_names=[\n                'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                'barrier'\n            ],\n            with_label=False),\n        dict(type='Collect3D', keys=['points'])\n    ])\noptimizer = dict(type='AdamW', lr=2.5e-05, weight_decay=0.01)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='cyclic',\n    target_ratio=(10, 0.0001),\n    cyclic_times=1,\n    step_ratio_up=0.4)\nmomentum_config = dict(\n    policy='cyclic',\n    target_ratio=(0.8947368421052632, 1),\n    cyclic_times=1,\n    step_ratio_up=0.4)\nrunner = dict(type='EpochBasedRunner', max_epochs=20)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(\n    interval=50,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nwork_dir = './work_dirs/secondmambadss_split14/second\u589e\u5f3a\u7248'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nplugin = 'plugin/futr3d'\nvoxel_size = [0.075, 0.075, 0.2]\ncenter_head = dict(\n    type='CenterHead',\n    in_channels=512,\n    tasks=[\n        dict(num_class=1, class_names=['car']),\n        dict(num_class=2, class_names=['truck', 'construction_vehicle']),\n        dict(num_class=2, class_names=['bus', 'trailer']),\n        dict(num_class=1, class_names=['barrier']),\n        dict(num_class=2, class_names=['motorcycle', 'bicycle']),\n        dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])\n    ],\n    common_heads=dict(\n        reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),\n    share_conv_channel=64,\n    bbox_coder=dict(\n        type='CenterPointBBoxCoder',\n        pc_range=[-54, -54],\n        post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n        max_num=500,\n        score_threshold=0.1,\n        out_size_factor=8,\n        voxel_size=[0.075, 0.075],\n        code_size=9),\n    separate_head=dict(type='SeparateHead', init_bias=-2.19, final_kernel=3),\n    loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),\n    loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),\n    norm_bbox=True)\nmodel = dict(\n    type='FUTR3D',\n    aux_weight=0.5,\n    pts_voxel_layer=dict(\n        max_num_points=10,\n        voxel_size=[0.075, 0.075, 0.2],\n        max_voxels=(120000, 160000),\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    pts_voxel_encoder=dict(type='HardSimpleVFE', num_features=5),\n    pts_middle_encoder=dict(\n        type='SparseEncoder',\n        in_channels=5,\n        sparse_shape=[41, 1440, 1440],\n        output_channels=128,\n        order=('conv', 'norm', 'act'),\n        encoder_channels=((16, 16, 32), (32, 32, 64), (64, 64, 128), (128,\n                                                                      128)),\n        encoder_paddings=((0, 0, 1), (0, 0, 1), (0, 0, [0, 1, 1]), (0, 0)),\n        block_type='basicblock'),\n    pts_backbone=dict(type='SECONDMamba'),\n    pts_neck=dict(\n        type='FPN',\n        norm_cfg=dict(type='BN2d', eps=0.001, momentum=0.01),\n        act_cfg=dict(type='ReLU', inplace=False),\n        in_channels=[128, 256],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs=True,\n        num_outs=4,\n        relu_before_extra_convs=True),\n    pts_bbox_head=dict(\n        type='FUTR3DHead',\n        use_dab=True,\n        use_dss=True,\n        use_hybrid=False,\n        hybrid=None,\n        dss_batch_first=False,\n        dss_drop_prob=0.1,\n        dss_mamba_prenorm=False,\n        dss_mamba_cfg=dict(),\n        dss_mamba_version='DSSMamba_Tiny',\n        dss_num_layers=2,\n        dss_rope=False,\n        dss_morton_rearrange=True,\n        dss_conv_path=False,\n        dss_xy=True,\n        dss_deepseek_format=False,\n        use_mss=False,\n        anchor_size=3,\n        use_aux=True,\n        aux_head=dict(\n            type='CenterHead',\n            in_channels=512,\n            tasks=[\n                dict(num_class=1, class_names=['car']),\n                dict(\n                    num_class=2, class_names=['truck',\n                                              'construction_vehicle']),\n                dict(num_class=2, class_names=['bus', 'trailer']),\n                dict(num_class=1, class_names=['barrier']),\n                dict(num_class=2, class_names=['motorcycle', 'bicycle']),\n                dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])\n            ],\n            common_heads=dict(\n                reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),\n            share_conv_channel=64,\n            bbox_coder=dict(\n                type='CenterPointBBoxCoder',\n                pc_range=[-54, -54],\n                post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n                max_num=500,\n                score_threshold=0.1,\n                out_size_factor=8,\n                voxel_size=[0.075, 0.075],\n                code_size=9),\n            separate_head=dict(\n                type='SeparateHead', init_bias=-2.19, final_kernel=3),\n            loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),\n            loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),\n            norm_bbox=True),\n        mix_selection=False,\n        num_query=900,\n        num_classes=10,\n        in_channels=256,\n        pc_range=[-54, -54, -5.0, 54, 54, 3.0],\n        sync_cls_avg_factor=True,\n        with_box_refine=True,\n        as_two_stage=False,\n        code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],\n        transformer=dict(\n            type='FUTR3DTransformer',\n            use_dab=True,\n            decoder=dict(\n                type='FUTR3DTransformerDecoder',\n                num_layers=6,\n                use_dab=True,\n                anchor_size=3,\n                return_intermediate=True,\n                transformerlayers=dict(\n                    type='DetrTransformerDecoderLayer',\n                    attn_cfgs=[\n                        dict(\n                            type='MultiheadAttention',\n                            embed_dims=256,\n                            num_heads=8,\n                            dropout=0.1),\n                        dict(type='FUTR3DAttention', embed_dims=256)\n                    ],\n                    feedforward_channels=1024,\n                    ffn_dropout=0.1,\n                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',\n                                     'ffn', 'norm')))),\n        positional_encoding=dict(\n            type='SinePositionalEncoding',\n            num_feats=128,\n            normalize=True,\n            offset=-0.5),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=2.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=0.25),\n        loss_iou=dict(type='GIoULoss', loss_weight=0)),\n    train_cfg=dict(\n        pts=dict(\n            point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0],\n            pc_range=[-54, -54, -5.0, 54, 54, 3.0],\n            grid_size=[1440, 1440, 40],\n            voxel_size=[0.075, 0.075, 0.2],\n            out_size_factor=8,\n            dense_reg=1,\n            gaussian_overlap=0.1,\n            max_objs=500,\n            min_radius=2,\n            code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],\n            assigner=dict(\n                type='HungarianAssigner3D',\n                cls_cost=dict(type='FocalLossCost', weight=2.0),\n                reg_cost=dict(type='BBox3DL1Cost', weight=0.25),\n                iou_cost=dict(type='IoUCost', weight=0)))),\n    test_cfg=dict(\n        pts=dict(\n            pc_range=[-54, -54],\n            post_center_limit_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n            max_per_img=500,\n            max_pool_nms=False,\n            min_radius=[4, 12, 10, 1, 0.85, 0.175],\n            out_size_factor=8,\n            voxel_size=[0.075, 0.075],\n            nms_type='circle',\n            pre_max_size=1000,\n            post_max_size=83,\n            nms_thr=0.2,\n            max_num=300,\n            score_threshold=0,\n            post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0])))\ndb_sampler = dict(\n    data_root='data/nuscenes/',\n    info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',\n    rate=1.0,\n    prepare=dict(\n        filter_by_difficulty=[-1],\n        filter_by_min_points=dict(\n            car=5,\n            truck=5,\n            bus=5,\n            trailer=5,\n            construction_vehicle=5,\n            traffic_cone=5,\n            barrier=5,\n            motorcycle=5,\n            bicycle=5,\n            pedestrian=5)),\n    classes=[\n        'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n        'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n    ],\n    sample_groups=dict(\n        car=2,\n        truck=3,\n        construction_vehicle=7,\n        bus=4,\n        trailer=6,\n        barrier=2,\n        motorcycle=6,\n        bicycle=6,\n        pedestrian=2,\n        traffic_cone=2),\n    points_loader=dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk')))\nfind_unused_parameters = True\ncustom_hooks = [dict(type='FadeOjectSampleHook', num_last_epochs=5)]\ngpu_ids = range(0, 2)\n", "seed": 0, "exp_name": "secondmambadss_split14.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 3e-05, "memory": 15961, "data_time": 0.08098, "loss_cls": 1.34552, "loss_bbox": 2.23548, "d0.loss_cls": 1.62515, "d0.loss_bbox": 4.41711, "d1.loss_cls": 1.41101, "d1.loss_bbox": 2.28204, "d2.loss_cls": 1.34162, "d2.loss_bbox": 2.26164, "d3.loss_cls": 1.34803, "d3.loss_bbox": 2.25143, "d4.loss_cls": 1.31673, "d4.loss_bbox": 2.24223, "aux_task0.loss_heatmap": 210.98087, "aux_task0.loss_bbox": 0.83101, "aux_task1.loss_heatmap": 677.49577, "aux_task1.loss_bbox": 0.93273, "aux_task2.loss_heatmap": 578.26409, "aux_task2.loss_bbox": 1.0363, "aux_task3.loss_heatmap": 678.53969, "aux_task3.loss_bbox": 0.75408, "aux_task4.loss_heatmap": 521.44111, "aux_task4.loss_bbox": 0.64055, "aux_task5.loss_heatmap": 500.31403, "aux_task5.loss_bbox": 0.73901, "loss": 3196.04715, "grad_norm": 22269.99648, "time": 1.35571}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 3e-05, "memory": 15961, "data_time": 0.00892, "loss_cls": 1.18325, "loss_bbox": 1.94894, "d0.loss_cls": 1.19881, "d0.loss_bbox": 4.01157, "d1.loss_cls": 1.17867, "d1.loss_bbox": 2.08825, "d2.loss_cls": 1.18354, "d2.loss_bbox": 2.02715, "d3.loss_cls": 1.18357, "d3.loss_bbox": 1.98785, "d4.loss_cls": 1.18095, "d4.loss_bbox": 1.96064, "aux_task0.loss_heatmap": 96.87264, "aux_task0.loss_bbox": 0.67531, "aux_task1.loss_heatmap": 318.87825, "aux_task1.loss_bbox": 0.78704, "aux_task2.loss_heatmap": 267.46605, "aux_task2.loss_bbox": 0.86892, "aux_task3.loss_heatmap": 276.045, "aux_task3.loss_bbox": 0.60713, "aux_task4.loss_heatmap": 263.3798, "aux_task4.loss_bbox": 0.52837, "aux_task5.loss_heatmap": 255.21788, "aux_task5.loss_bbox": 0.57633, "loss": 1503.03592, "grad_norm": 14527.47299, "time": 1.01409}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 3e-05, "memory": 15961, "data_time": 0.00804, "loss_cls": 1.17426, "loss_bbox": 1.99485, "d0.loss_cls": 1.17984, "d0.loss_bbox": 2.35123, "d1.loss_cls": 1.18006, "d1.loss_bbox": 1.80463, "d2.loss_cls": 1.17923, "d2.loss_bbox": 1.84639, "d3.loss_cls": 1.17635, "d3.loss_bbox": 1.90514, "d4.loss_cls": 1.17599, "d4.loss_bbox": 1.95784, "aux_task0.loss_heatmap": 45.09368, "aux_task0.loss_bbox": 0.58194, "aux_task1.loss_heatmap": 147.31166, "aux_task1.loss_bbox": 0.62584, "aux_task2.loss_heatmap": 120.84638, "aux_task2.loss_bbox": 0.7163, "aux_task3.loss_heatmap": 137.86325, "aux_task3.loss_bbox": 0.47852, "aux_task4.loss_heatmap": 126.23425, "aux_task4.loss_bbox": 0.45949, "aux_task5.loss_heatmap": 110.67198, "aux_task5.loss_bbox": 0.50281, "loss": 710.3119, "grad_norm": 9452.71774, "time": 1.0089}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 3e-05, "memory": 16167, "data_time": 0.00823, "loss_cls": 1.16117, "loss_bbox": 1.81947, "d0.loss_cls": 1.1743, "d0.loss_bbox": 1.76869, "d1.loss_cls": 1.17217, "d1.loss_bbox": 1.77858, "d2.loss_cls": 1.16659, "d2.loss_bbox": 1.80225, "d3.loss_cls": 1.15943, "d3.loss_bbox": 1.81574, "d4.loss_cls": 1.15996, "d4.loss_bbox": 1.81548, "aux_task0.loss_heatmap": 21.19794, "aux_task0.loss_bbox": 0.5253, "aux_task1.loss_heatmap": 77.17425, "aux_task1.loss_bbox": 0.54582, "aux_task2.loss_heatmap": 63.15439, "aux_task2.loss_bbox": 0.59471, "aux_task3.loss_heatmap": 64.59314, "aux_task3.loss_bbox": 0.4298, "aux_task4.loss_heatmap": 62.62253, "aux_task4.loss_bbox": 0.43858, "aux_task5.loss_heatmap": 60.05569, "aux_task5.loss_bbox": 0.47594, "loss": 369.60191, "grad_norm": 5263.62867, "time": 1.00501}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 3e-05, "memory": 16167, "data_time": 0.00786, "loss_cls": 1.14843, "loss_bbox": 1.74415, "d0.loss_cls": 1.17605, "d0.loss_bbox": 1.73577, "d1.loss_cls": 1.16548, "d1.loss_bbox": 1.73701, "d2.loss_cls": 1.15721, "d2.loss_bbox": 1.73843, "d3.loss_cls": 1.14414, "d3.loss_bbox": 1.74241, "d4.loss_cls": 1.14783, "d4.loss_bbox": 1.73681, "aux_task0.loss_heatmap": 11.07296, "aux_task0.loss_bbox": 0.464, "aux_task1.loss_heatmap": 37.76337, "aux_task1.loss_bbox": 0.52061, "aux_task2.loss_heatmap": 30.45941, "aux_task2.loss_bbox": 0.53418, "aux_task3.loss_heatmap": 43.7063, "aux_task3.loss_bbox": 0.42221, "aux_task4.loss_heatmap": 31.78431, "aux_task4.loss_bbox": 0.44108, "aux_task5.loss_heatmap": 29.97181, "aux_task5.loss_bbox": 0.47041, "loss": 204.98438, "grad_norm": 2803.41359, "time": 1.00664}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 3e-05, "memory": 16167, "data_time": 0.0075, "loss_cls": 1.10212, "loss_bbox": 1.71943, "d0.loss_cls": 1.17138, "d0.loss_bbox": 1.74063, "d1.loss_cls": 1.14748, "d1.loss_bbox": 1.74815, "d2.loss_cls": 1.126, "d2.loss_bbox": 1.73148, "d3.loss_cls": 1.10574, "d3.loss_bbox": 1.72558, "d4.loss_cls": 1.10996, "d4.loss_bbox": 1.71595, "aux_task0.loss_heatmap": 5.2549, "aux_task0.loss_bbox": 0.45045, "aux_task1.loss_heatmap": 17.97551, "aux_task1.loss_bbox": 0.50682, "aux_task2.loss_heatmap": 14.10638, "aux_task2.loss_bbox": 0.52497, "aux_task3.loss_heatmap": 23.6767, "aux_task3.loss_bbox": 0.41702, "aux_task4.loss_heatmap": 14.68984, "aux_task4.loss_bbox": 0.4274, "aux_task5.loss_heatmap": 13.97361, "aux_task5.loss_bbox": 0.47325, "loss": 109.62074, "grad_norm": 1487.82827, "time": 1.00724}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 3e-05, "memory": 16167, "data_time": 0.00758, "loss_cls": 1.07382, "loss_bbox": 1.7113, "d0.loss_cls": 1.16902, "d0.loss_bbox": 1.7483, "d1.loss_cls": 1.11298, "d1.loss_bbox": 1.72999, "d2.loss_cls": 1.08132, "d2.loss_bbox": 1.71309, "d3.loss_cls": 1.07192, "d3.loss_bbox": 1.71144, "d4.loss_cls": 1.07442, "d4.loss_bbox": 1.71163, "aux_task0.loss_heatmap": 3.28956, "aux_task0.loss_bbox": 0.45065, "aux_task1.loss_heatmap": 8.16781, "aux_task1.loss_bbox": 0.51824, "aux_task2.loss_heatmap": 6.88405, "aux_task2.loss_bbox": 0.51214, "aux_task3.loss_heatmap": 9.5578, "aux_task3.loss_bbox": 0.41471, "aux_task4.loss_heatmap": 6.78422, "aux_task4.loss_bbox": 0.43385, "aux_task5.loss_heatmap": 6.7758, "aux_task5.loss_bbox": 0.47461, "loss": 61.17264, "grad_norm": 751.32254, "time": 1.0076}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 3e-05, "memory": 16167, "data_time": 0.00764, "loss_cls": 1.059, "loss_bbox": 1.66875, "d0.loss_cls": 1.14767, "d0.loss_bbox": 1.73629, "d1.loss_cls": 1.06254, "d1.loss_bbox": 1.6958, "d2.loss_cls": 1.05603, "d2.loss_bbox": 1.68002, "d3.loss_cls": 1.05557, "d3.loss_bbox": 1.67696, "d4.loss_cls": 1.05638, "d4.loss_bbox": 1.66888, "aux_task0.loss_heatmap": 2.12252, "aux_task0.loss_bbox": 0.44607, "aux_task1.loss_heatmap": 3.98422, "aux_task1.loss_bbox": 0.5003, "aux_task2.loss_heatmap": 3.80437, "aux_task2.loss_bbox": 0.48964, "aux_task3.loss_heatmap": 4.80684, "aux_task3.loss_bbox": 0.41531, "aux_task4.loss_heatmap": 3.57438, "aux_task4.loss_bbox": 0.4312, "aux_task5.loss_heatmap": 3.58109, "aux_task5.loss_bbox": 0.46718, "loss": 41.18699, "grad_norm": 292.39011, "time": 1.01527}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 3e-05, "memory": 16167, "data_time": 0.00799, "loss_cls": 1.04991, "loss_bbox": 1.68828, "d0.loss_cls": 1.12681, "d0.loss_bbox": 1.74966, "d1.loss_cls": 1.04515, "d1.loss_bbox": 1.68838, "d2.loss_cls": 1.04829, "d2.loss_bbox": 1.67308, "d3.loss_cls": 1.04425, "d3.loss_bbox": 1.68771, "d4.loss_cls": 1.04725, "d4.loss_bbox": 1.69128, "aux_task0.loss_heatmap": 1.69286, "aux_task0.loss_bbox": 0.45212, "aux_task1.loss_heatmap": 2.32616, "aux_task1.loss_bbox": 0.50263, "aux_task2.loss_heatmap": 2.33601, "aux_task2.loss_bbox": 0.50839, "aux_task3.loss_heatmap": 2.44959, "aux_task3.loss_bbox": 0.40857, "aux_task4.loss_heatmap": 2.15763, "aux_task4.loss_bbox": 0.43183, "aux_task5.loss_heatmap": 2.11975, "aux_task5.loss_bbox": 0.4725, "loss": 32.39808, "grad_norm": 94.11255, "time": 1.01477}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 3e-05, "memory": 16167, "data_time": 0.00819, "loss_cls": 1.05214, "loss_bbox": 1.66839, "d0.loss_cls": 1.12107, "d0.loss_bbox": 1.74381, "d1.loss_cls": 1.04081, "d1.loss_bbox": 1.66639, "d2.loss_cls": 1.04519, "d2.loss_bbox": 1.66095, "d3.loss_cls": 1.04347, "d3.loss_bbox": 1.66383, "d4.loss_cls": 1.04921, "d4.loss_bbox": 1.66664, "aux_task0.loss_heatmap": 1.58766, "aux_task0.loss_bbox": 0.44388, "aux_task1.loss_heatmap": 1.89549, "aux_task1.loss_bbox": 0.50293, "aux_task2.loss_heatmap": 1.95324, "aux_task2.loss_bbox": 0.49781, "aux_task3.loss_heatmap": 2.11497, "aux_task3.loss_bbox": 0.40666, "aux_task4.loss_heatmap": 1.82577, "aux_task4.loss_bbox": 0.42318, "aux_task5.loss_heatmap": 1.86238, "aux_task5.loss_bbox": 0.4611, "loss": 30.39697, "grad_norm": 57.96214, "time": 1.01065}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 3e-05, "memory": 16167, "data_time": 0.00818, "loss_cls": 1.03543, "loss_bbox": 1.6515, "d0.loss_cls": 1.1032, "d0.loss_bbox": 1.73352, "d1.loss_cls": 1.02727, "d1.loss_bbox": 1.66116, "d2.loss_cls": 1.03178, "d2.loss_bbox": 1.65638, "d3.loss_cls": 1.03342, "d3.loss_bbox": 1.65098, "d4.loss_cls": 1.03433, "d4.loss_bbox": 1.65218, "aux_task0.loss_heatmap": 1.56985, "aux_task0.loss_bbox": 0.44208, "aux_task1.loss_heatmap": 1.77509, "aux_task1.loss_bbox": 0.50345, "aux_task2.loss_heatmap": 1.84643, "aux_task2.loss_bbox": 0.50951, "aux_task3.loss_heatmap": 1.8139, "aux_task3.loss_bbox": 0.41591, "aux_task4.loss_heatmap": 1.72649, "aux_task4.loss_bbox": 0.43047, "aux_task5.loss_heatmap": 1.7582, "aux_task5.loss_bbox": 0.46092, "loss": 29.52347, "grad_norm": 36.33186, "time": 1.00581}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 3e-05, "memory": 16167, "data_time": 0.00848, "loss_cls": 1.02846, "loss_bbox": 1.65521, "d0.loss_cls": 1.08735, "d0.loss_bbox": 1.74231, "d1.loss_cls": 1.02517, "d1.loss_bbox": 1.66214, "d2.loss_cls": 1.02801, "d2.loss_bbox": 1.65685, "d3.loss_cls": 1.02657, "d3.loss_bbox": 1.65449, "d4.loss_cls": 1.02764, "d4.loss_bbox": 1.65604, "aux_task0.loss_heatmap": 1.58498, "aux_task0.loss_bbox": 0.45989, "aux_task1.loss_heatmap": 1.75545, "aux_task1.loss_bbox": 0.50081, "aux_task2.loss_heatmap": 1.82942, "aux_task2.loss_bbox": 0.50429, "aux_task3.loss_heatmap": 1.74479, "aux_task3.loss_bbox": 0.41386, "aux_task4.loss_heatmap": 1.69003, "aux_task4.loss_bbox": 0.42811, "aux_task5.loss_heatmap": 1.73296, "aux_task5.loss_bbox": 0.46571, "loss": 29.36055, "grad_norm": 41.20261, "time": 1.01687}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 3e-05, "memory": 16253, "data_time": 0.00837, "loss_cls": 1.02052, "loss_bbox": 1.65605, "d0.loss_cls": 1.07099, "d0.loss_bbox": 1.73333, "d1.loss_cls": 1.01633, "d1.loss_bbox": 1.66452, "d2.loss_cls": 1.01617, "d2.loss_bbox": 1.65946, "d3.loss_cls": 1.01705, "d3.loss_bbox": 1.6615, "d4.loss_cls": 1.01933, "d4.loss_bbox": 1.6561, "aux_task0.loss_heatmap": 1.55582, "aux_task0.loss_bbox": 0.44381, "aux_task1.loss_heatmap": 1.75563, "aux_task1.loss_bbox": 0.49964, "aux_task2.loss_heatmap": 1.83193, "aux_task2.loss_bbox": 0.5154, "aux_task3.loss_heatmap": 1.77185, "aux_task3.loss_bbox": 0.4205, "aux_task4.loss_heatmap": 1.69028, "aux_task4.loss_bbox": 0.43419, "aux_task5.loss_heatmap": 1.72584, "aux_task5.loss_bbox": 0.46665, "loss": 29.30289, "grad_norm": 33.03508, "time": 1.01595}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 3e-05, "memory": 16253, "data_time": 0.00795, "loss_cls": 1.01714, "loss_bbox": 1.64625, "d0.loss_cls": 1.05714, "d0.loss_bbox": 1.71666, "d1.loss_cls": 1.01071, "d1.loss_bbox": 1.66062, "d2.loss_cls": 1.01252, "d2.loss_bbox": 1.65493, "d3.loss_cls": 1.01143, "d3.loss_bbox": 1.65097, "d4.loss_cls": 1.01491, "d4.loss_bbox": 1.65034, "aux_task0.loss_heatmap": 1.55583, "aux_task0.loss_bbox": 0.45392, "aux_task1.loss_heatmap": 1.73684, "aux_task1.loss_bbox": 0.49977, "aux_task2.loss_heatmap": 1.81882, "aux_task2.loss_bbox": 0.50618, "aux_task3.loss_heatmap": 1.70673, "aux_task3.loss_bbox": 0.41975, "aux_task4.loss_heatmap": 1.67381, "aux_task4.loss_bbox": 0.42803, "aux_task5.loss_heatmap": 1.70589, "aux_task5.loss_bbox": 0.46953, "loss": 29.07871, "grad_norm": 34.03413, "time": 1.01451}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 3e-05, "memory": 16253, "data_time": 0.0083, "loss_cls": 1.01286, "loss_bbox": 1.63611, "d0.loss_cls": 1.04927, "d0.loss_bbox": 1.69555, "d1.loss_cls": 1.00924, "d1.loss_bbox": 1.64787, "d2.loss_cls": 1.01098, "d2.loss_bbox": 1.64071, "d3.loss_cls": 1.00905, "d3.loss_bbox": 1.63737, "d4.loss_cls": 1.0135, "d4.loss_bbox": 1.63603, "aux_task0.loss_heatmap": 1.56194, "aux_task0.loss_bbox": 0.44623, "aux_task1.loss_heatmap": 1.73482, "aux_task1.loss_bbox": 0.49774, "aux_task2.loss_heatmap": 1.82227, "aux_task2.loss_bbox": 0.49776, "aux_task3.loss_heatmap": 1.70814, "aux_task3.loss_bbox": 0.40004, "aux_task4.loss_heatmap": 1.66307, "aux_task4.loss_bbox": 0.43339, "aux_task5.loss_heatmap": 1.69563, "aux_task5.loss_bbox": 0.46063, "loss": 28.92018, "grad_norm": 25.56457, "time": 1.01857}
