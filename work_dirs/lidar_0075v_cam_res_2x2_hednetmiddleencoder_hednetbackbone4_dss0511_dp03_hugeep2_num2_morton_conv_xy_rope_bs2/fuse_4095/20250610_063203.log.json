{"env_info": "sys.platform: linux\nPython: 3.8.20 (default, Oct  3 2024, 15:24:27) [GCC 11.2.0]\nCUDA available: True\nGPU 0,1: NVIDIA GeForce RTX 4090\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.8, V11.8.89\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0\nPyTorch: 1.13.0+cu116\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.6\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.14.0+cu116\nOpenCV: 4.11.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.6\nMMDetection: 2.27.0\nMMSegmentation: 0.30.0\nMMDetection3D: 1.0.0rc6+unknown\nspconv2.0: True", "config": "point_cloud_range = [-54, -54, -5.0, 54, 54, 3.0]\nclass_names = [\n    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n]\ndataset_type = 'NuScenesDataset'\ndata_root = 'data/nuscenes/'\ninput_modality = dict(\n    use_lidar=True,\n    use_camera=True,\n    use_radar=False,\n    use_map=False,\n    use_external=False)\nfile_client_args = dict(backend='disk')\ntrain_pipeline = [\n    dict(type='LoadMultiViewImageFromFiles', to_float32=True),\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(type='PhotoMetricDistortionMultiViewImage'),\n    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),\n    dict(\n        type='PointsRangeFilter',\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    dict(\n        type='ObjectRangeFilter',\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    dict(\n        type='ObjectNameFilter',\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(\n        type='NormalizeMultiviewImage',\n        mean=[103.53, 116.28, 123.675],\n        std=[1.0, 1.0, 1.0],\n        to_rgb=False),\n    dict(type='PadMultiViewImage', size_divisor=32),\n    dict(type='PointShuffle'),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(\n        type='Collect3D',\n        keys=['points', 'img', 'gt_bboxes_3d', 'gt_labels_3d'])\n]\ntest_pipeline = [\n    dict(type='LoadMultiViewImageFromFiles', to_float32=True),\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(\n        type='NormalizeMultiviewImage',\n        mean=[103.53, 116.28, 123.675],\n        std=[1.0, 1.0, 1.0],\n        to_rgb=False),\n    dict(type='PadMultiViewImage', size_divisor=32),\n    dict(\n        type='MultiScaleFlipAug3D',\n        img_scale=(1333, 800),\n        pts_scale_ratio=1,\n        flip=False,\n        transforms=[\n            dict(\n                type='GlobalRotScaleTrans',\n                rot_range=[0, 0],\n                scale_ratio_range=[1.0, 1.0],\n                translation_std=[0, 0, 0]),\n            dict(type='RandomFlip3D'),\n            dict(\n                type='PointsRangeFilter',\n                point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ],\n                with_label=False),\n            dict(type='Collect3D', keys=['points', 'img'])\n        ])\n]\neval_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        with_label=False),\n    dict(type='Collect3D', keys=['points'])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=4,\n    train=dict(\n        type='NuScenesDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_train.pkl',\n        pipeline=[\n            dict(type='LoadMultiViewImageFromFiles', to_float32=True),\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=9,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk'),\n                pad_empty_sweeps=True,\n                remove_close=True),\n            dict(type='PhotoMetricDistortionMultiViewImage'),\n            dict(\n                type='LoadAnnotations3D',\n                with_bbox_3d=True,\n                with_label_3d=True),\n            dict(\n                type='PointsRangeFilter',\n                point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n            dict(\n                type='ObjectRangeFilter',\n                point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n            dict(\n                type='ObjectNameFilter',\n                classes=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ]),\n            dict(\n                type='NormalizeMultiviewImage',\n                mean=[103.53, 116.28, 123.675],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='PadMultiViewImage', size_divisor=32),\n            dict(type='PointShuffle'),\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ]),\n            dict(\n                type='Collect3D',\n                keys=['points', 'img', 'gt_bboxes_3d', 'gt_labels_3d'])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=True,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=False,\n        box_type_3d='LiDAR',\n        use_valid_flag=True),\n    val=dict(\n        type='NuScenesDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_val.pkl',\n        pipeline=[\n            dict(type='LoadMultiViewImageFromFiles', to_float32=True),\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=9,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk'),\n                pad_empty_sweeps=True,\n                remove_close=True),\n            dict(\n                type='NormalizeMultiviewImage',\n                mean=[103.53, 116.28, 123.675],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='PadMultiViewImage', size_divisor=32),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1333, 800),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='GlobalRotScaleTrans',\n                        rot_range=[0, 0],\n                        scale_ratio_range=[1.0, 1.0],\n                        translation_std=[0, 0, 0]),\n                    dict(type='RandomFlip3D'),\n                    dict(\n                        type='PointsRangeFilter',\n                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(type='Collect3D', keys=['points', 'img'])\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=True,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=True,\n        box_type_3d='LiDAR'),\n    test=dict(\n        type='NuScenesDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_val.pkl',\n        pipeline=[\n            dict(type='LoadMultiViewImageFromFiles', to_float32=True),\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=9,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk'),\n                pad_empty_sweeps=True,\n                remove_close=True),\n            dict(\n                type='NormalizeMultiviewImage',\n                mean=[103.53, 116.28, 123.675],\n                std=[1.0, 1.0, 1.0],\n                to_rgb=False),\n            dict(type='PadMultiViewImage', size_divisor=32),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1333, 800),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='GlobalRotScaleTrans',\n                        rot_range=[0, 0],\n                        scale_ratio_range=[1.0, 1.0],\n                        translation_std=[0, 0, 0]),\n                    dict(type='RandomFlip3D'),\n                    dict(\n                        type='PointsRangeFilter',\n                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(type='Collect3D', keys=['points', 'img'])\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=True,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=True,\n        box_type_3d='LiDAR'))\nevaluation = dict(\n    interval=1,\n    pipeline=[\n        dict(\n            type='LoadPointsFromFile',\n            coord_type='LIDAR',\n            load_dim=5,\n            use_dim=5,\n            file_client_args=dict(backend='disk')),\n        dict(\n            type='LoadPointsFromMultiSweeps',\n            sweeps_num=10,\n            file_client_args=dict(backend='disk')),\n        dict(\n            type='DefaultFormatBundle3D',\n            class_names=[\n                'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                'barrier'\n            ],\n            with_label=False),\n        dict(type='Collect3D', keys=['points'])\n    ])\ncheckpoint_config = dict(interval=1, max_keep_ckpts=1)\nlog_config = dict(\n    interval=50,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nwork_dir = './work_dirs/lidar_0075v_cam_res_2x2_hednetmiddleencoder_hednetbackbone4_dss0511_dp03_hugeep2_num2_morton_conv_xy_rope_bs2/fuse_4095'\nload_from = 'pretrained/hedres_forced.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nplugin = 'plugin/futr3d'\nvoxel_size = [0.075, 0.075, 0.2]\nimg_norm_cfg = dict(\n    mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False)\ncenter_head = dict(\n    type='CenterHead',\n    in_channels=512,\n    tasks=[\n        dict(num_class=1, class_names=['car']),\n        dict(num_class=2, class_names=['truck', 'construction_vehicle']),\n        dict(num_class=2, class_names=['bus', 'trailer']),\n        dict(num_class=1, class_names=['barrier']),\n        dict(num_class=2, class_names=['motorcycle', 'bicycle']),\n        dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])\n    ],\n    common_heads=dict(\n        reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),\n    share_conv_channel=64,\n    bbox_coder=dict(\n        type='CenterPointBBoxCoder',\n        pc_range=[-54, -54],\n        post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n        max_num=500,\n        score_threshold=0.1,\n        out_size_factor=8,\n        voxel_size=[0.075, 0.075],\n        code_size=9),\n    separate_head=dict(type='SeparateHead', init_bias=-2.19, final_kernel=3),\n    loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),\n    loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),\n    norm_bbox=True)\nmodel = dict(\n    type='FUTR3D',\n    use_lidar=True,\n    use_camera=True,\n    use_radar=False,\n    use_grid_mask=True,\n    freeze_backbone=True,\n    img_backbone=dict(\n        type='ResNet',\n        depth=101,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN2d', requires_grad=False),\n        norm_eval=True,\n        style='caffe',\n        dcn=dict(type='DCNv2', deform_groups=1, fallback_on_stride=False),\n        stage_with_dcn=(False, False, True, True)),\n    img_neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        start_level=1,\n        add_extra_convs='on_output',\n        num_outs=4,\n        relu_before_extra_convs=True),\n    pts_voxel_layer=dict(\n        max_num_points=-1,\n        voxel_size=[0.075, 0.075, 0.2],\n        max_voxels=(-1, -1),\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    pts_voxel_encoder=dict(\n        type='DynamicVFE',\n        in_channels=5,\n        feat_channels=[64, 128],\n        with_distance=False,\n        with_cluster_center=True,\n        with_voxel_center=True,\n        voxel_size=[0.075, 0.075, 0.2],\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    pts_middle_encoder=dict(\n        type='HEDNet',\n        in_channels=128,\n        sparse_shape=[41, 1440, 1440],\n        model_cfg=dict(\n            FEATURE_DIM=128,\n            NUM_LAYERS=2,\n            NUM_SBB=[2, 1, 1],\n            DOWN_STRIDE=[1, 2, 2],\n            DOWN_KERNEL_SIZE=[3, 3, 3])),\n    pts_backbone=dict(\n        type='CascadeDEDBackbone',\n        in_channels=256,\n        model_cfg=dict(\n            USE_SECONDMAMBA=False,\n            FEATURE_DIM=256,\n            NUM_LAYERS=4,\n            NUM_SBB=[2, 1, 1],\n            DOWN_STRIDES=[1, 2, 2])),\n    pts_neck=dict(\n        type='FPN',\n        norm_cfg=dict(type='BN2d', eps=0.001, momentum=0.01),\n        act_cfg=dict(type='ReLU', inplace=False),\n        in_channels=[256],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs=True,\n        num_outs=4,\n        relu_before_extra_convs=True),\n    pts_bbox_head=dict(\n        type='FUTR3DHead',\n        use_dab=True,\n        use_dss=True,\n        use_hybrid=False,\n        dss_date_version='0511',\n        dss_drop_prob=0.3,\n        dss_mamba_version='DSSMamba_Huge_EP2',\n        dss_num_layers=2,\n        dss_use_morton=True,\n        dss_use_conv=True,\n        dss_use_xy=True,\n        dss_use_rope=True,\n        dss_stack=True,\n        dss_strong_cls=True,\n        anchor_size=3,\n        num_query=900,\n        num_classes=10,\n        in_channels=256,\n        pc_range=[-54, -54, -5.0, 54, 54, 3.0],\n        sync_cls_avg_factor=True,\n        with_box_refine=True,\n        as_two_stage=False,\n        code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],\n        transformer=dict(\n            type='FUTR3DTransformer',\n            use_dab=True,\n            decoder=dict(\n                type='FUTR3DTransformerDecoder',\n                num_layers=6,\n                use_dab=True,\n                anchor_size=3,\n                return_intermediate=True,\n                transformerlayers=dict(\n                    type='DetrTransformerDecoderLayer',\n                    attn_cfgs=[\n                        dict(\n                            type='MultiheadAttention',\n                            embed_dims=256,\n                            num_heads=8,\n                            dropout=0.1),\n                        dict(\n                            type='FUTR3DAttention',\n                            use_lidar=True,\n                            use_camera=True,\n                            use_radar=False,\n                            pc_range=[-54, -54, -5.0, 54, 54, 3.0],\n                            embed_dims=256)\n                    ],\n                    feedforward_channels=1024,\n                    ffn_dropout=0.1,\n                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',\n                                     'ffn', 'norm')))),\n        positional_encoding=dict(\n            type='SinePositionalEncoding',\n            num_feats=128,\n            normalize=True,\n            offset=-0.5),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=2.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=0.25),\n        loss_iou=dict(type='GIoULoss', loss_weight=0)),\n    train_cfg=dict(\n        pts=dict(\n            point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0],\n            pc_range=[-54, -54, -5.0, 54, 54, 3.0],\n            grid_size=[1440, 1440, 40],\n            voxel_size=[0.075, 0.075, 0.2],\n            out_size_factor=8,\n            dense_reg=1,\n            gaussian_overlap=0.1,\n            max_objs=500,\n            min_radius=2,\n            code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],\n            assigner=dict(\n                type='HungarianAssigner3D',\n                cls_cost=dict(type='FocalLossCost', weight=2.0),\n                reg_cost=dict(type='BBox3DL1Cost', weight=0.25),\n                iou_cost=dict(type='IoUCost', weight=0)))),\n    test_cfg=dict(\n        pts=dict(\n            pc_range=[-54, -54],\n            post_center_limit_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n            max_per_img=500,\n            max_pool_nms=False,\n            min_radius=[4, 12, 10, 1, 0.85, 0.175],\n            out_size_factor=8,\n            voxel_size=[0.075, 0.075],\n            nms_type='circle',\n            pre_max_size=1000,\n            post_max_size=83,\n            nms_thr=0.2,\n            max_num=300,\n            score_threshold=0,\n            post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0])))\ndb_sampler = dict(\n    data_root='data/nuscenes/',\n    info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',\n    rate=1.0,\n    prepare=dict(\n        filter_by_difficulty=[-1],\n        filter_by_min_points=dict(\n            car=5,\n            truck=5,\n            bus=5,\n            trailer=5,\n            construction_vehicle=5,\n            traffic_cone=5,\n            barrier=5,\n            motorcycle=5,\n            bicycle=5,\n            pedestrian=5)),\n    classes=[\n        'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n        'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n    ],\n    sample_groups=dict(\n        car=2,\n        truck=3,\n        construction_vehicle=7,\n        bus=4,\n        trailer=6,\n        barrier=2,\n        motorcycle=6,\n        bicycle=6,\n        pedestrian=2,\n        traffic_cone=2),\n    points_loader=dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk')))\nfind_unused_parameters = True\nrunner = dict(type='EpochBasedRunner', max_epochs=6)\noptimizer = dict(\n    type='AdamW',\n    lr=0.0001,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            img_backbone=dict(lr_mult=0.1),\n            img_neck=dict(lr_mult=0.1),\n            pts_middle_encoder=dict(lr_mult=0.1),\n            pts_backbone=dict(lr_mult=0.1),\n            pts_neck=dict(lr_mult=0.1))),\n    weight_decay=0.01)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='CosineAnnealing',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.3333333333333333,\n    min_lr_ratio=0.001)\ngpu_ids = range(0, 2)\n", "seed": 0, "exp_name": "lidar_0075v_cam_res_2x2_hednetmiddleencoder_hednetbackbone4_dss0511_dp03_hugeep2_num2_morton_conv_xy_rope_bs2.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 4e-05, "memory": 16756, "data_time": 0.11952, "loss_cls": 1.16879, "loss_bbox": 1.60207, "d0.loss_cls": 1.11994, "d0.loss_bbox": 1.6371, "d1.loss_cls": 1.19344, "d1.loss_bbox": 1.6043, "d2.loss_cls": 1.07605, "d2.loss_bbox": 1.56899, "d3.loss_cls": 1.02877, "d3.loss_bbox": 1.5984, "d4.loss_cls": 1.02947, "d4.loss_bbox": 1.55853, "loss": 16.18583, "grad_norm": 17.22739, "time": 1.39728}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 5e-05, "memory": 16901, "data_time": 0.03064, "loss_cls": 0.85985, "loss_bbox": 1.28153, "d0.loss_cls": 0.93638, "d0.loss_bbox": 1.38786, "d1.loss_cls": 0.92454, "d1.loss_bbox": 1.33354, "d2.loss_cls": 0.85653, "d2.loss_bbox": 1.29872, "d3.loss_cls": 0.84575, "d3.loss_bbox": 1.2989, "d4.loss_cls": 0.83171, "d4.loss_bbox": 1.26226, "loss": 13.11757, "grad_norm": 15.41824, "time": 1.14315}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 5e-05, "memory": 16901, "data_time": 0.03675, "loss_cls": 0.76295, "loss_bbox": 1.17441, "d0.loss_cls": 0.86807, "d0.loss_bbox": 1.32015, "d1.loss_cls": 0.79012, "d1.loss_bbox": 1.24899, "d2.loss_cls": 0.76483, "d2.loss_bbox": 1.20317, "d3.loss_cls": 0.75689, "d3.loss_bbox": 1.19837, "d4.loss_cls": 0.74371, "d4.loss_bbox": 1.1771, "loss": 12.00875, "grad_norm": 11.85808, "time": 1.16754}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 6e-05, "memory": 16901, "data_time": 0.02907, "loss_cls": 0.68966, "loss_bbox": 1.11987, "d0.loss_cls": 0.8066, "d0.loss_bbox": 1.27556, "d1.loss_cls": 0.73016, "d1.loss_bbox": 1.19739, "d2.loss_cls": 0.70903, "d2.loss_bbox": 1.15008, "d3.loss_cls": 0.69753, "d3.loss_bbox": 1.14766, "d4.loss_cls": 0.68315, "d4.loss_bbox": 1.12658, "loss": 11.33325, "grad_norm": 10.90029, "time": 1.14084}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 7e-05, "memory": 16901, "data_time": 0.03154, "loss_cls": 0.65294, "loss_bbox": 1.06987, "d0.loss_cls": 0.76623, "d0.loss_bbox": 1.23967, "d1.loss_cls": 0.68831, "d1.loss_bbox": 1.14565, "d2.loss_cls": 0.6829, "d2.loss_bbox": 1.10467, "d3.loss_cls": 0.67664, "d3.loss_bbox": 1.09382, "d4.loss_cls": 0.64811, "d4.loss_bbox": 1.08222, "loss": 10.85102, "grad_norm": 11.02283, "time": 1.15906}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 7e-05, "memory": 16901, "data_time": 0.06887, "loss_cls": 0.60998, "loss_bbox": 1.02617, "d0.loss_cls": 0.73415, "d0.loss_bbox": 1.20394, "d1.loss_cls": 0.65697, "d1.loss_bbox": 1.10283, "d2.loss_cls": 0.64574, "d2.loss_bbox": 1.06508, "d3.loss_cls": 0.63669, "d3.loss_bbox": 1.052, "d4.loss_cls": 0.60663, "d4.loss_bbox": 1.03952, "loss": 10.37971, "grad_norm": 10.62252, "time": 1.25708}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 8e-05, "memory": 16901, "data_time": 0.03075, "loss_cls": 0.56721, "loss_bbox": 1.0398, "d0.loss_cls": 0.70937, "d0.loss_bbox": 1.20599, "d1.loss_cls": 0.6212, "d1.loss_bbox": 1.1057, "d2.loss_cls": 0.61335, "d2.loss_bbox": 1.06609, "d3.loss_cls": 0.60374, "d3.loss_bbox": 1.05867, "d4.loss_cls": 0.56447, "d4.loss_bbox": 1.04846, "loss": 10.20403, "grad_norm": 10.88072, "time": 1.23703}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 9e-05, "memory": 16938, "data_time": 0.0287, "loss_cls": 0.51815, "loss_bbox": 1.01082, "d0.loss_cls": 0.6705, "d0.loss_bbox": 1.18629, "d1.loss_cls": 0.58791, "d1.loss_bbox": 1.0795, "d2.loss_cls": 0.57153, "d2.loss_bbox": 1.03816, "d3.loss_cls": 0.56079, "d3.loss_bbox": 1.02934, "d4.loss_cls": 0.51389, "d4.loss_bbox": 1.0205, "loss": 9.78737, "grad_norm": 9.60485, "time": 1.14147}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 9e-05, "memory": 16938, "data_time": 0.03124, "loss_cls": 0.50467, "loss_bbox": 0.98501, "d0.loss_cls": 0.64582, "d0.loss_bbox": 1.14204, "d1.loss_cls": 0.55645, "d1.loss_bbox": 1.04908, "d2.loss_cls": 0.55269, "d2.loss_bbox": 1.01478, "d3.loss_cls": 0.53967, "d3.loss_bbox": 1.00643, "d4.loss_cls": 0.49662, "d4.loss_bbox": 0.99696, "loss": 9.49022, "grad_norm": 9.92071, "time": 1.13779}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.0001, "memory": 16938, "data_time": 0.06402, "loss_cls": 0.46983, "loss_bbox": 0.97561, "d0.loss_cls": 0.64364, "d0.loss_bbox": 1.14237, "d1.loss_cls": 0.52899, "d1.loss_bbox": 1.04654, "d2.loss_cls": 0.51868, "d2.loss_bbox": 0.99764, "d3.loss_cls": 0.50918, "d3.loss_bbox": 0.99723, "d4.loss_cls": 0.46157, "d4.loss_bbox": 0.99005, "loss": 9.28131, "grad_norm": 10.57139, "time": 1.17701}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.0001, "memory": 16983, "data_time": 0.03363, "loss_cls": 0.45702, "loss_bbox": 0.94371, "d0.loss_cls": 0.60933, "d0.loss_bbox": 1.1241, "d1.loss_cls": 0.50223, "d1.loss_bbox": 1.01067, "d2.loss_cls": 0.49549, "d2.loss_bbox": 0.96962, "d3.loss_cls": 0.4901, "d3.loss_bbox": 0.96323, "d4.loss_cls": 0.45135, "d4.loss_bbox": 0.96004, "loss": 8.9769, "grad_norm": 10.13912, "time": 1.15024}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.0001, "memory": 17173, "data_time": 0.03355, "loss_cls": 0.41767, "loss_bbox": 0.93255, "d0.loss_cls": 0.57984, "d0.loss_bbox": 1.12057, "d1.loss_cls": 0.47375, "d1.loss_bbox": 1.00213, "d2.loss_cls": 0.46629, "d2.loss_bbox": 0.95929, "d3.loss_cls": 0.46124, "d3.loss_bbox": 0.94286, "d4.loss_cls": 0.41832, "d4.loss_bbox": 0.94015, "loss": 8.71466, "grad_norm": 9.88278, "time": 1.15892}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.0001, "memory": 17173, "data_time": 0.04279, "loss_cls": 0.41339, "loss_bbox": 0.92958, "d0.loss_cls": 0.56404, "d0.loss_bbox": 1.12319, "d1.loss_cls": 0.44804, "d1.loss_bbox": 1.00431, "d2.loss_cls": 0.44166, "d2.loss_bbox": 0.95591, "d3.loss_cls": 0.43382, "d3.loss_bbox": 0.94208, "d4.loss_cls": 0.40591, "d4.loss_bbox": 0.93528, "loss": 8.59722, "grad_norm": 10.91235, "time": 1.16617}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.0001, "memory": 17173, "data_time": 0.03251, "loss_cls": 0.41283, "loss_bbox": 0.89466, "d0.loss_cls": 0.55569, "d0.loss_bbox": 1.0966, "d1.loss_cls": 0.45298, "d1.loss_bbox": 0.96774, "d2.loss_cls": 0.44185, "d2.loss_bbox": 0.92581, "d3.loss_cls": 0.43603, "d3.loss_bbox": 0.90024, "d4.loss_cls": 0.41023, "d4.loss_bbox": 0.89614, "loss": 8.39078, "grad_norm": 10.28611, "time": 1.14802}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.0001, "memory": 17173, "data_time": 0.03089, "loss_cls": 0.38701, "loss_bbox": 0.90115, "d0.loss_cls": 0.56172, "d0.loss_bbox": 1.11881, "d1.loss_cls": 0.41296, "d1.loss_bbox": 0.98601, "d2.loss_cls": 0.40411, "d2.loss_bbox": 0.93525, "d3.loss_cls": 0.39888, "d3.loss_bbox": 0.90843, "d4.loss_cls": 0.3841, "d4.loss_bbox": 0.89966, "loss": 8.29809, "grad_norm": 11.29413, "time": 1.15299}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.0001, "memory": 17173, "data_time": 0.03519, "loss_cls": 0.3437, "loss_bbox": 0.87041, "d0.loss_cls": 0.5345, "d0.loss_bbox": 1.08457, "d1.loss_cls": 0.36816, "d1.loss_bbox": 0.94033, "d2.loss_cls": 0.34757, "d2.loss_bbox": 0.89075, "d3.loss_cls": 0.34503, "d3.loss_bbox": 0.87467, "d4.loss_cls": 0.33633, "d4.loss_bbox": 0.86032, "loss": 7.79634, "grad_norm": 11.83335, "time": 1.149}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.0001, "memory": 17173, "data_time": 0.03156, "loss_cls": 0.30838, "loss_bbox": 0.85187, "d0.loss_cls": 0.52805, "d0.loss_bbox": 1.08116, "d1.loss_cls": 0.32695, "d1.loss_bbox": 0.93257, "d2.loss_cls": 0.31065, "d2.loss_bbox": 0.86731, "d3.loss_cls": 0.30156, "d3.loss_bbox": 0.8507, "d4.loss_cls": 0.3005, "d4.loss_bbox": 0.84633, "loss": 7.50601, "grad_norm": 12.20075, "time": 1.1449}
