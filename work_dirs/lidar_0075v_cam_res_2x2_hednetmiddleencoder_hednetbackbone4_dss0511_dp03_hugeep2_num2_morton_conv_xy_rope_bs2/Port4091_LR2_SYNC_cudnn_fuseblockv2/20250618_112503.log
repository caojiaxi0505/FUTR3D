2025-06-18 11:25:04,004 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.20 (default, Oct  3 2024, 15:24:27) [GCC 11.2.0]
CUDA available: True
GPU 0,1: NVIDIA GeForce RTX 4090 D
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.8, V11.8.89
GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0
PyTorch: 1.13.0+cu116
PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.6
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.14.0+cu116
OpenCV: 4.11.0
MMCV: 1.7.0
MMCV Compiler: GCC 9.3
MMCV CUDA Compiler: 11.6
MMDetection: 2.27.0
MMSegmentation: 0.30.0
MMDetection3D: 1.0.0rc6+3056288
spconv2.0: True
------------------------------------------------------------

2025-06-18 11:25:04,542 - mmdet - INFO - 分布式训练: True
2025-06-18 11:25:05,070 - mmdet - INFO - 配置:
point_cloud_range = [-54, -54, -5.0, 54, 54, 3.0]
class_names = [
    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',
    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
]
dataset_type = 'NuScenesDataset'
data_root = 'data/nuscenes/'
input_modality = dict(
    use_lidar=True,
    use_camera=True,
    use_radar=False,
    use_map=False,
    use_external=False)
file_client_args = dict(backend='disk')
train_pipeline = [
    dict(type='LoadMultiViewImageFromFiles', to_float32=True),
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        file_client_args=dict(backend='disk')),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=9,
        use_dim=[0, 1, 2, 3, 4],
        file_client_args=dict(backend='disk'),
        pad_empty_sweeps=True,
        remove_close=True),
    dict(type='PhotoMetricDistortionMultiViewImage'),
    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),
    dict(
        type='PointsRangeFilter',
        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
    dict(
        type='ObjectRangeFilter',
        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
    dict(
        type='ObjectNameFilter',
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ]),
    dict(
        type='NormalizeMultiviewImage',
        mean=[103.53, 116.28, 123.675],
        std=[1.0, 1.0, 1.0],
        to_rgb=False),
    dict(type='PadMultiViewImage', size_divisor=32),
    dict(type='PointShuffle'),
    dict(
        type='DefaultFormatBundle3D',
        class_names=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ]),
    dict(
        type='Collect3D',
        keys=['points', 'img', 'gt_bboxes_3d', 'gt_labels_3d'])
]
test_pipeline = [
    dict(type='LoadMultiViewImageFromFiles', to_float32=True),
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        file_client_args=dict(backend='disk')),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=9,
        use_dim=[0, 1, 2, 3, 4],
        file_client_args=dict(backend='disk'),
        pad_empty_sweeps=True,
        remove_close=True),
    dict(
        type='NormalizeMultiviewImage',
        mean=[103.53, 116.28, 123.675],
        std=[1.0, 1.0, 1.0],
        to_rgb=False),
    dict(type='PadMultiViewImage', size_divisor=32),
    dict(
        type='MultiScaleFlipAug3D',
        img_scale=(1333, 800),
        pts_scale_ratio=1,
        flip=False,
        transforms=[
            dict(
                type='GlobalRotScaleTrans',
                rot_range=[0, 0],
                scale_ratio_range=[1.0, 1.0],
                translation_std=[0, 0, 0]),
            dict(type='RandomFlip3D'),
            dict(
                type='PointsRangeFilter',
                point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
            dict(
                type='DefaultFormatBundle3D',
                class_names=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ],
                with_label=False),
            dict(type='Collect3D', keys=['points', 'img'])
        ])
]
eval_pipeline = [
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        file_client_args=dict(backend='disk')),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=9,
        use_dim=[0, 1, 2, 3, 4],
        file_client_args=dict(backend='disk'),
        pad_empty_sweeps=True,
        remove_close=True),
    dict(
        type='DefaultFormatBundle3D',
        class_names=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        with_label=False),
    dict(type='Collect3D', keys=['points'])
]
data = dict(
    samples_per_gpu=2,
    workers_per_gpu=4,
    train=dict(
        type='NuScenesDataset',
        data_root='data/nuscenes/',
        ann_file='data/nuscenes/nuscenes_infos_train.pkl',
        pipeline=[
            dict(type='LoadMultiViewImageFromFiles', to_float32=True),
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                file_client_args=dict(backend='disk')),
            dict(
                type='LoadPointsFromMultiSweeps',
                sweeps_num=9,
                use_dim=[0, 1, 2, 3, 4],
                file_client_args=dict(backend='disk'),
                pad_empty_sweeps=True,
                remove_close=True),
            dict(type='PhotoMetricDistortionMultiViewImage'),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True),
            dict(
                type='PointsRangeFilter',
                point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
            dict(
                type='ObjectRangeFilter',
                point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
            dict(
                type='ObjectNameFilter',
                classes=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ]),
            dict(
                type='NormalizeMultiviewImage',
                mean=[103.53, 116.28, 123.675],
                std=[1.0, 1.0, 1.0],
                to_rgb=False),
            dict(type='PadMultiViewImage', size_divisor=32),
            dict(type='PointShuffle'),
            dict(
                type='DefaultFormatBundle3D',
                class_names=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ]),
            dict(
                type='Collect3D',
                keys=['points', 'img', 'gt_bboxes_3d', 'gt_labels_3d'])
        ],
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=False,
        box_type_3d='LiDAR',
        use_valid_flag=True),
    val=dict(
        type='NuScenesDataset',
        data_root='data/nuscenes/',
        ann_file='data/nuscenes/nuscenes_infos_val.pkl',
        pipeline=[
            dict(type='LoadMultiViewImageFromFiles', to_float32=True),
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                file_client_args=dict(backend='disk')),
            dict(
                type='LoadPointsFromMultiSweeps',
                sweeps_num=9,
                use_dim=[0, 1, 2, 3, 4],
                file_client_args=dict(backend='disk'),
                pad_empty_sweeps=True,
                remove_close=True),
            dict(
                type='NormalizeMultiviewImage',
                mean=[103.53, 116.28, 123.675],
                std=[1.0, 1.0, 1.0],
                to_rgb=False),
            dict(type='PadMultiViewImage', size_divisor=32),
            dict(
                type='MultiScaleFlipAug3D',
                img_scale=(1333, 800),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type='GlobalRotScaleTrans',
                        rot_range=[0, 0],
                        scale_ratio_range=[1.0, 1.0],
                        translation_std=[0, 0, 0]),
                    dict(type='RandomFlip3D'),
                    dict(
                        type='PointsRangeFilter',
                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
                    dict(
                        type='DefaultFormatBundle3D',
                        class_names=[
                            'car', 'truck', 'construction_vehicle', 'bus',
                            'trailer', 'barrier', 'motorcycle', 'bicycle',
                            'pedestrian', 'traffic_cone'
                        ],
                        with_label=False),
                    dict(type='Collect3D', keys=['points', 'img'])
                ])
        ],
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=True,
        box_type_3d='LiDAR'),
    test=dict(
        type='NuScenesDataset',
        data_root='data/nuscenes/',
        ann_file='data/nuscenes/nuscenes_infos_val.pkl',
        pipeline=[
            dict(type='LoadMultiViewImageFromFiles', to_float32=True),
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                file_client_args=dict(backend='disk')),
            dict(
                type='LoadPointsFromMultiSweeps',
                sweeps_num=9,
                use_dim=[0, 1, 2, 3, 4],
                file_client_args=dict(backend='disk'),
                pad_empty_sweeps=True,
                remove_close=True),
            dict(
                type='NormalizeMultiviewImage',
                mean=[103.53, 116.28, 123.675],
                std=[1.0, 1.0, 1.0],
                to_rgb=False),
            dict(type='PadMultiViewImage', size_divisor=32),
            dict(
                type='MultiScaleFlipAug3D',
                img_scale=(1333, 800),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type='GlobalRotScaleTrans',
                        rot_range=[0, 0],
                        scale_ratio_range=[1.0, 1.0],
                        translation_std=[0, 0, 0]),
                    dict(type='RandomFlip3D'),
                    dict(
                        type='PointsRangeFilter',
                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
                    dict(
                        type='DefaultFormatBundle3D',
                        class_names=[
                            'car', 'truck', 'construction_vehicle', 'bus',
                            'trailer', 'barrier', 'motorcycle', 'bicycle',
                            'pedestrian', 'traffic_cone'
                        ],
                        with_label=False),
                    dict(type='Collect3D', keys=['points', 'img'])
                ])
        ],
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=True,
        box_type_3d='LiDAR'))
evaluation = dict(
    interval=1,
    pipeline=[
        dict(
            type='LoadPointsFromFile',
            coord_type='LIDAR',
            load_dim=5,
            use_dim=5,
            file_client_args=dict(backend='disk')),
        dict(
            type='LoadPointsFromMultiSweeps',
            sweeps_num=10,
            file_client_args=dict(backend='disk')),
        dict(
            type='DefaultFormatBundle3D',
            class_names=[
                'car', 'truck', 'trailer', 'bus', 'construction_vehicle',
                'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',
                'barrier'
            ],
            with_label=False),
        dict(type='Collect3D', keys=['points'])
    ])
checkpoint_config = dict(interval=1, max_keep_ckpts=1)
log_config = dict(
    interval=50,
    hooks=[dict(type='TextLoggerHook'),
           dict(type='TensorboardLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
work_dir = './work_dirs/lidar_0075v_cam_res_2x2_hednetmiddleencoder_hednetbackbone4_dss0511_dp03_hugeep2_num2_morton_conv_xy_rope_bs2/Port4091_LR2_SYNC_cudnn_fuseblockv2'
load_from = 'pretrained/hedres_forced.pth'
resume_from = None
workflow = [('train', 1)]
opencv_num_threads = 0
mp_start_method = 'fork'
plugin = 'plugin/futr3d'
voxel_size = [0.075, 0.075, 0.2]
img_norm_cfg = dict(
    mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False)
center_head = dict(
    type='CenterHead',
    in_channels=512,
    tasks=[
        dict(num_class=1, class_names=['car']),
        dict(num_class=2, class_names=['truck', 'construction_vehicle']),
        dict(num_class=2, class_names=['bus', 'trailer']),
        dict(num_class=1, class_names=['barrier']),
        dict(num_class=2, class_names=['motorcycle', 'bicycle']),
        dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])
    ],
    common_heads=dict(
        reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),
    share_conv_channel=64,
    bbox_coder=dict(
        type='CenterPointBBoxCoder',
        pc_range=[-54, -54],
        post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],
        max_num=500,
        score_threshold=0.1,
        out_size_factor=8,
        voxel_size=[0.075, 0.075],
        code_size=9),
    separate_head=dict(type='SeparateHead', init_bias=-2.19, final_kernel=3),
    loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),
    loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),
    norm_bbox=True)
model = dict(
    type='FUTR3D',
    use_lidar=True,
    use_camera=True,
    use_radar=False,
    use_grid_mask=True,
    freeze_backbone=True,
    img_backbone=dict(
        type='ResNet',
        depth=101,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN2d', requires_grad=False),
        norm_eval=True,
        style='caffe',
        dcn=dict(type='DCNv2', deform_groups=1, fallback_on_stride=False),
        stage_with_dcn=(False, False, True, True)),
    img_neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        start_level=1,
        add_extra_convs='on_output',
        num_outs=4,
        relu_before_extra_convs=True),
    pts_voxel_layer=dict(
        max_num_points=-1,
        voxel_size=[0.075, 0.075, 0.2],
        max_voxels=(-1, -1),
        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
    pts_voxel_encoder=dict(
        type='DynamicVFE',
        in_channels=5,
        feat_channels=[64, 128],
        with_distance=False,
        with_cluster_center=True,
        with_voxel_center=True,
        voxel_size=[0.075, 0.075, 0.2],
        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
    pts_middle_encoder=dict(
        type='HEDNet',
        in_channels=128,
        sparse_shape=[41, 1440, 1440],
        model_cfg=dict(
            FEATURE_DIM=128,
            NUM_LAYERS=2,
            NUM_SBB=[2, 1, 1],
            DOWN_STRIDE=[1, 2, 2],
            DOWN_KERNEL_SIZE=[3, 3, 3])),
    pts_backbone=dict(
        type='CascadeDEDBackbone',
        in_channels=256,
        model_cfg=dict(
            USE_SECONDMAMBA=False,
            FEATURE_DIM=256,
            NUM_LAYERS=4,
            NUM_SBB=[2, 1, 1],
            DOWN_STRIDES=[1, 2, 2])),
    pts_neck=dict(
        type='FPN',
        norm_cfg=dict(type='BN2d', eps=0.001, momentum=0.01),
        act_cfg=dict(type='ReLU', inplace=False),
        in_channels=[256],
        out_channels=256,
        start_level=0,
        add_extra_convs=True,
        num_outs=4,
        relu_before_extra_convs=True),
    pts_bbox_head=dict(
        type='FUTR3DHead',
        use_dab=True,
        use_dss=True,
        use_hybrid=False,
        dss_date_version='0511',
        dss_drop_prob=0.3,
        dss_mamba_version='DSSMamba_Huge_EP2',
        dss_num_layers=2,
        dss_use_morton=True,
        dss_use_conv=True,
        dss_use_xy=True,
        dss_use_rope=True,
        dss_stack=True,
        dss_strong_cls=True,
        anchor_size=3,
        num_query=900,
        num_classes=10,
        in_channels=256,
        pc_range=[-54, -54, -5.0, 54, 54, 3.0],
        sync_cls_avg_factor=True,
        with_box_refine=True,
        as_two_stage=False,
        code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],
        transformer=dict(
            type='FUTR3DTransformer',
            use_dab=True,
            decoder=dict(
                type='FUTR3DTransformerDecoder',
                num_layers=6,
                use_dab=True,
                anchor_size=3,
                return_intermediate=True,
                transformerlayers=dict(
                    type='DetrTransformerDecoderLayer',
                    attn_cfgs=[
                        dict(
                            type='MultiheadAttention',
                            embed_dims=256,
                            num_heads=8,
                            dropout=0.1),
                        dict(
                            type='FUTR3DAttention',
                            use_lidar=True,
                            use_camera=True,
                            use_radar=False,
                            pc_range=[-54, -54, -5.0, 54, 54, 3.0],
                            embed_dims=256)
                    ],
                    feedforward_channels=1024,
                    ffn_dropout=0.1,
                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',
                                     'ffn', 'norm')))),
        positional_encoding=dict(
            type='SinePositionalEncoding',
            num_feats=128,
            normalize=True,
            offset=-0.5),
        loss_cls=dict(
            type='FocalLoss',
            use_sigmoid=True,
            gamma=2.0,
            alpha=0.25,
            loss_weight=2.0),
        loss_bbox=dict(type='L1Loss', loss_weight=0.25),
        loss_iou=dict(type='GIoULoss', loss_weight=0)),
    train_cfg=dict(
        pts=dict(
            point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0],
            pc_range=[-54, -54, -5.0, 54, 54, 3.0],
            grid_size=[1440, 1440, 40],
            voxel_size=[0.075, 0.075, 0.2],
            out_size_factor=8,
            dense_reg=1,
            gaussian_overlap=0.1,
            max_objs=500,
            min_radius=2,
            code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],
            assigner=dict(
                type='HungarianAssigner3D',
                cls_cost=dict(type='FocalLossCost', weight=2.0),
                reg_cost=dict(type='BBox3DL1Cost', weight=0.25),
                iou_cost=dict(type='IoUCost', weight=0)))),
    test_cfg=dict(
        pts=dict(
            pc_range=[-54, -54],
            post_center_limit_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],
            max_per_img=500,
            max_pool_nms=False,
            min_radius=[4, 12, 10, 1, 0.85, 0.175],
            out_size_factor=8,
            voxel_size=[0.075, 0.075],
            nms_type='circle',
            pre_max_size=1000,
            post_max_size=83,
            nms_thr=0.2,
            max_num=300,
            score_threshold=0,
            post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0])))
db_sampler = dict(
    data_root='data/nuscenes/',
    info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',
    rate=1.0,
    prepare=dict(
        filter_by_difficulty=[-1],
        filter_by_min_points=dict(
            car=5,
            truck=5,
            bus=5,
            trailer=5,
            construction_vehicle=5,
            traffic_cone=5,
            barrier=5,
            motorcycle=5,
            bicycle=5,
            pedestrian=5)),
    classes=[
        'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',
        'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
    ],
    sample_groups=dict(
        car=2,
        truck=3,
        construction_vehicle=7,
        bus=4,
        trailer=6,
        barrier=2,
        motorcycle=6,
        bicycle=6,
        pedestrian=2,
        traffic_cone=2),
    points_loader=dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=[0, 1, 2, 3, 4],
        file_client_args=dict(backend='disk')))
find_unused_parameters = True
runner = dict(type='EpochBasedRunner', max_epochs=6)
optimizer = dict(
    type='AdamW',
    lr=0.0002,
    paramwise_cfg=dict(
        custom_keys=dict(
            img_backbone=dict(lr_mult=0.1),
            img_neck=dict(lr_mult=0.1),
            pts_middle_encoder=dict(lr_mult=0.1),
            pts_backbone=dict(lr_mult=0.1),
            pts_neck=dict(lr_mult=0.1))),
    weight_decay=0.01)
optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))
lr_config = dict(
    policy='CosineAnnealing',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.3333333333333333,
    min_lr_ratio=0.001)
cudnn_benchmark = True
gpu_ids = range(0, 2)

2025-06-18 11:25:05,070 - mmdet - INFO - 设置随机种子为 0, deterministic: False
2025-06-18 11:25:06,354 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2025-06-18 11:25:06,613 - mmdet - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': 'Conv2d'}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2025-06-18 11:25:06,684 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-06-18 11:25:06,684 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-06-18 11:25:06,685 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-06-18 11:25:06,685 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-06-18 11:25:06,685 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-06-18 11:25:06,685 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-06-18 11:25:06,686 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-06-18 11:25:06,686 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-06-18 11:25:06,688 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-06-18 11:25:06,690 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-06-18 11:25:06,692 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-06-18 11:25:06,694 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-06-18 11:25:06,696 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-06-18 11:25:06,698 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-06-18 11:25:06,700 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-06-18 11:25:06,702 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-06-18 11:25:06,704 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-06-18 11:25:06,706 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-06-18 11:25:06,707 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-06-18 11:25:06,709 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-06-18 11:25:06,711 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-06-18 11:25:06,713 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-06-18 11:25:06,715 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-06-18 11:25:06,717 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-06-18 11:25:06,719 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-06-18 11:25:06,721 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-06-18 11:25:06,723 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-06-18 11:25:06,725 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-06-18 11:25:06,727 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-06-18 11:25:06,729 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-06-18 11:25:06,737 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-06-18 11:25:06,744 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-06-18 11:25:06,752 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2025-06-18 11:25:06,772 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
Name of parameter - Initialization information

pts_voxel_encoder.vfe_layers.0.0.weight - torch.Size([64, 11]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_voxel_encoder.vfe_layers.0.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_voxel_encoder.vfe_layers.0.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_voxel_encoder.vfe_layers.1.0.weight - torch.Size([128, 128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_voxel_encoder.vfe_layers.1.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_voxel_encoder.vfe_layers.1.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.0.0.weight - torch.Size([16, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv1.0.1.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.0.1.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.1.conv1.weight - torch.Size([16, 3, 3, 3, 16]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv1.1.conv1.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.1.bn1.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.1.bn1.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.1.conv2.weight - torch.Size([16, 3, 3, 3, 16]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv1.1.conv2.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.1.bn2.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.1.bn2.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.2.conv1.weight - torch.Size([16, 3, 3, 3, 16]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv1.2.conv1.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.2.bn1.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.2.bn1.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.2.conv2.weight - torch.Size([16, 3, 3, 3, 16]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv1.2.conv2.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.2.bn2.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.2.bn2.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.3.0.weight - torch.Size([32, 3, 3, 3, 16]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv1.3.1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.3.1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.0.blocks.1.conv1.weight - torch.Size([32, 3, 3, 3, 32]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv2.0.encoder.0.blocks.1.conv1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.0.blocks.1.bn1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.0.blocks.1.bn1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.0.blocks.1.conv2.weight - torch.Size([32, 3, 3, 3, 32]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv2.0.encoder.0.blocks.1.conv2.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.0.blocks.1.bn2.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.0.blocks.1.bn2.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.0.blocks.2.conv1.weight - torch.Size([32, 3, 3, 3, 32]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv2.0.encoder.0.blocks.2.conv1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.0.blocks.2.bn1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.0.blocks.2.bn1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.0.blocks.2.conv2.weight - torch.Size([32, 3, 3, 3, 32]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv2.0.encoder.0.blocks.2.conv2.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.0.blocks.2.bn2.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.0.blocks.2.bn2.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.1.blocks.0.0.weight - torch.Size([32, 3, 3, 3, 32]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv2.0.encoder.1.blocks.0.1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.1.blocks.0.1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.1.blocks.1.conv1.weight - torch.Size([32, 3, 3, 3, 32]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv2.0.encoder.1.blocks.1.conv1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.1.blocks.1.bn1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.1.blocks.1.bn1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.1.blocks.1.conv2.weight - torch.Size([32, 3, 3, 3, 32]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv2.0.encoder.1.blocks.1.conv2.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.1.blocks.1.bn2.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.1.blocks.1.bn2.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.2.blocks.0.0.weight - torch.Size([32, 3, 3, 3, 32]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv2.0.encoder.2.blocks.0.1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.2.blocks.0.1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.2.blocks.1.conv1.weight - torch.Size([32, 3, 3, 3, 32]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv2.0.encoder.2.blocks.1.conv1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.2.blocks.1.bn1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.2.blocks.1.bn1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.2.blocks.1.conv2.weight - torch.Size([32, 3, 3, 3, 32]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv2.0.encoder.2.blocks.1.conv2.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.2.blocks.1.bn2.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.2.blocks.1.bn2.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.decoder.0.0.weight - torch.Size([32, 3, 3, 3, 32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.decoder.0.1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.decoder.0.1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.decoder.1.0.weight - torch.Size([32, 3, 3, 3, 32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.decoder.1.1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.decoder.1.1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.decoder_norm.0.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.decoder_norm.0.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.decoder_norm.1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.decoder_norm.1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.1.0.weight - torch.Size([64, 3, 3, 3, 32]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv2.1.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.1.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.0.blocks.1.conv1.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv3.0.encoder.0.blocks.1.conv1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.0.blocks.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.0.blocks.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.0.blocks.1.conv2.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv3.0.encoder.0.blocks.1.conv2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.0.blocks.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.0.blocks.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.0.blocks.2.conv1.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv3.0.encoder.0.blocks.2.conv1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.0.blocks.2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.0.blocks.2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.0.blocks.2.conv2.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv3.0.encoder.0.blocks.2.conv2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.0.blocks.2.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.0.blocks.2.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.1.blocks.0.0.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv3.0.encoder.1.blocks.0.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.1.blocks.0.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.1.blocks.1.conv1.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv3.0.encoder.1.blocks.1.conv1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.1.blocks.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.1.blocks.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.1.blocks.1.conv2.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv3.0.encoder.1.blocks.1.conv2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.1.blocks.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.1.blocks.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.2.blocks.0.0.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv3.0.encoder.2.blocks.0.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.2.blocks.0.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.2.blocks.1.conv1.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv3.0.encoder.2.blocks.1.conv1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.2.blocks.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.2.blocks.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.2.blocks.1.conv2.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv3.0.encoder.2.blocks.1.conv2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.2.blocks.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.2.blocks.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.decoder.0.0.weight - torch.Size([64, 3, 3, 3, 64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.decoder.0.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.decoder.0.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.decoder.1.0.weight - torch.Size([64, 3, 3, 3, 64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.decoder.1.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.decoder.1.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.decoder_norm.0.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.decoder_norm.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.decoder_norm.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.decoder_norm.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.1.0.weight - torch.Size([128, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv3.1.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.1.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.0.blocks.1.conv1.weight - torch.Size([128, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.0.encoder.0.blocks.1.conv1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.0.blocks.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.0.blocks.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.0.blocks.1.conv2.weight - torch.Size([128, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.0.encoder.0.blocks.1.conv2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.0.blocks.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.0.blocks.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.0.blocks.2.conv1.weight - torch.Size([128, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.0.encoder.0.blocks.2.conv1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.0.blocks.2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.0.blocks.2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.0.blocks.2.conv2.weight - torch.Size([128, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.0.encoder.0.blocks.2.conv2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.0.blocks.2.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.0.blocks.2.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.1.blocks.0.0.weight - torch.Size([128, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.0.encoder.1.blocks.0.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.1.blocks.0.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.1.blocks.1.conv1.weight - torch.Size([128, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.0.encoder.1.blocks.1.conv1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.1.blocks.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.1.blocks.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.1.blocks.1.conv2.weight - torch.Size([128, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.0.encoder.1.blocks.1.conv2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.1.blocks.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.1.blocks.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.2.blocks.0.0.weight - torch.Size([128, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.0.encoder.2.blocks.0.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.2.blocks.0.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.2.blocks.1.conv1.weight - torch.Size([128, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.0.encoder.2.blocks.1.conv1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.2.blocks.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.2.blocks.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.2.blocks.1.conv2.weight - torch.Size([128, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.0.encoder.2.blocks.1.conv2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.2.blocks.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.2.blocks.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.decoder.0.0.weight - torch.Size([128, 3, 3, 3, 128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.decoder.0.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.decoder.0.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.decoder.1.0.weight - torch.Size([128, 3, 3, 3, 128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.decoder.1.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.decoder.1.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.decoder_norm.0.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.decoder_norm.0.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.decoder_norm.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.decoder_norm.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.0.blocks.1.conv1.weight - torch.Size([128, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.1.encoder.0.blocks.1.conv1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.0.blocks.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.0.blocks.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.0.blocks.1.conv2.weight - torch.Size([128, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.1.encoder.0.blocks.1.conv2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.0.blocks.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.0.blocks.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.0.blocks.2.conv1.weight - torch.Size([128, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.1.encoder.0.blocks.2.conv1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.0.blocks.2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.0.blocks.2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.0.blocks.2.conv2.weight - torch.Size([128, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.1.encoder.0.blocks.2.conv2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.0.blocks.2.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.0.blocks.2.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.1.blocks.0.0.weight - torch.Size([128, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.1.encoder.1.blocks.0.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.1.blocks.0.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.1.blocks.1.conv1.weight - torch.Size([128, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.1.encoder.1.blocks.1.conv1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.1.blocks.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.1.blocks.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.1.blocks.1.conv2.weight - torch.Size([128, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.1.encoder.1.blocks.1.conv2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.1.blocks.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.1.blocks.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.2.blocks.0.0.weight - torch.Size([128, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.1.encoder.2.blocks.0.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.2.blocks.0.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.2.blocks.1.conv1.weight - torch.Size([128, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.1.encoder.2.blocks.1.conv1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.2.blocks.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.2.blocks.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.2.blocks.1.conv2.weight - torch.Size([128, 3, 3, 3, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.1.encoder.2.blocks.1.conv2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.2.blocks.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.2.blocks.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.decoder.0.0.weight - torch.Size([128, 3, 3, 3, 128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.decoder.0.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.decoder.0.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.decoder.1.0.weight - torch.Size([128, 3, 3, 3, 128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.decoder.1.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.decoder.1.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.decoder_norm.0.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.decoder_norm.0.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.decoder_norm.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.decoder_norm.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv_out.0.weight - torch.Size([128, 3, 1, 1, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv_out.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv_out.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv_out.3.weight - torch.Size([128, 3, 1, 1, 128]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv_out.4.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv_out.4.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.0.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.downsample_layer.0.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.downsample_layer.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.downsample_layer.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.downsample_layer.0.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.downsample_layer.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.downsample_layer.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder.0.0.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder.0.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder.0.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder.1.0.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder.1.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder.1.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder_norm.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder_norm.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder_norm.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder_norm.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.0.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.downsample_layer.0.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.downsample_layer.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.downsample_layer.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.downsample_layer.0.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.downsample_layer.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.downsample_layer.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder.0.0.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder.0.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder.0.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder.1.0.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder.1.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder.1.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder_norm.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder_norm.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder_norm.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder_norm.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.0.0.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.0.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.0.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.0.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.0.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.0.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.0.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.0.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.0.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.0.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.0.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.0.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.0.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.0.downsample_layer.0.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.0.downsample_layer.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.0.downsample_layer.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.0.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.0.downsample_layer.0.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.0.downsample_layer.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.0.downsample_layer.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.decoder.0.0.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.decoder.0.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.decoder.0.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.decoder.1.0.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.decoder.1.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.decoder.1.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.decoder_norm.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.decoder_norm.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.decoder_norm.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.decoder_norm.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.0.0.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.0.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.0.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.0.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.0.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.0.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.0.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.0.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.0.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.0.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.0.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.0.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.0.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.0.downsample_layer.0.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.0.downsample_layer.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.0.downsample_layer.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.0.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.0.downsample_layer.0.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.0.downsample_layer.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.0.downsample_layer.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.decoder.0.0.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.decoder.0.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.decoder.0.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.decoder.1.0.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.decoder.1.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.decoder.1.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.decoder_norm.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.decoder_norm.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.decoder_norm.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.decoder_norm.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.lateral_convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.lateral_convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.fpn_convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.fpn_convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.fpn_convs.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.fpn_convs.3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.level_embeds - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.norm_before.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.A_log_f - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.A_log_b - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.D_f - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.D_b - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.A_log_f_xy - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.A_log_b_xy - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.D_f_xy - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.D_b_xy - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.in_proj.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.in_proj_xy.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.x_proj_f.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.x_proj_b.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.dt_proj_f.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.dt_proj_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.dt_proj_b.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.dt_proj_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.x_proj_f_xy.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.x_proj_b_xy.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.dt_proj_f_xy.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.dt_proj_f_xy.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.dt_proj_b_xy.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.dt_proj_b_xy.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.conv1d_x_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.conv1d_x_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.conv1d_z_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.conv1d_z_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.conv1d_x_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.conv1d_x_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.conv1d_z_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.conv1d_z_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.conv1d_x_xy_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.conv1d_x_xy_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.conv1d_z_xy_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.conv1d_z_xy_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.conv1d_x_xy_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.conv1d_x_xy_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.conv1d_z_xy_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.conv1d_z_xy_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.out_proj.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.global_proj.weight - torch.Size([2048, 2048]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mamba.global_proj.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mlp.gate_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mlp.up_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mlp.down_proj.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.0.mlp_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.norm_before.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.A_log_f - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.A_log_b - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.D_f - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.D_b - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.A_log_f_xy - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.A_log_b_xy - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.D_f_xy - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.D_b_xy - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.in_proj.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.in_proj_xy.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.x_proj_f.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.x_proj_b.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.dt_proj_f.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.dt_proj_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.dt_proj_b.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.dt_proj_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.x_proj_f_xy.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.x_proj_b_xy.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.dt_proj_f_xy.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.dt_proj_f_xy.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.dt_proj_b_xy.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.dt_proj_b_xy.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.conv1d_x_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.conv1d_x_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.conv1d_z_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.conv1d_z_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.conv1d_x_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.conv1d_x_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.conv1d_z_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.conv1d_z_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.conv1d_x_xy_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.conv1d_x_xy_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.conv1d_z_xy_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.conv1d_z_xy_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.conv1d_x_xy_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.conv1d_x_xy_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.conv1d_z_xy_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.conv1d_z_xy_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.out_proj.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.global_proj.weight - torch.Size([2048, 2048]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mamba.global_proj.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mlp.gate_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mlp.up_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.layers.1.mlp.down_proj.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.img_attention_weights.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.img_attention_weights.bias - torch.Size([24]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.img_output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.img_output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.position_encoder.0.weight - torch.Size([256, 3]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.position_encoder.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.position_encoder.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.position_encoder.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.position_encoder.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.position_encoder.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.position_encoder.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.position_encoder.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.modality_fusion_layer.0.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.modality_fusion_layer.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.modality_fusion_layer.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.modality_fusion_layer.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.modality_fusion_layer.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.modality_fusion_layer.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.modality_fusion_layer.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.modality_fusion_layer.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.0.A_log_h2t - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.0.D_h2t - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.0.A_log_t2h - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.0.D_t2h - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.0.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.0.conv1d_h2t.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.0.conv1d_h2t.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.0.x_proj_h2t.weight - torch.Size([48, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.0.dt_proj_h2t.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.0.dt_proj_h2t.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.0.conv1d_t2h.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.0.conv1d_t2h.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.0.x_proj_t2h.weight - torch.Size([48, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.0.dt_proj_t2h.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.0.dt_proj_t2h.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.0.lidar_guidance_proj.weight - torch.Size([512, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.0.lidar_guidance_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.0.out_proj.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.1.A_log_h2t - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.1.D_h2t - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.1.A_log_t2h - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.1.D_t2h - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.1.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.1.conv1d_h2t.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.1.conv1d_h2t.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.1.x_proj_h2t.weight - torch.Size([48, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.1.dt_proj_h2t.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.1.dt_proj_h2t.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.1.conv1d_t2h.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.1.conv1d_t2h.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.1.x_proj_t2h.weight - torch.Size([48, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.1.dt_proj_t2h.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.1.dt_proj_t2h.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.1.lidar_guidance_proj.weight - torch.Size([512, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.1.lidar_guidance_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.1.out_proj.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.norm.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.norm.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.norm.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.norm.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.norm_before.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.A_log_f - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.A_log_b - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.D_f - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.D_b - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.A_log_f_xy - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.A_log_b_xy - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.D_f_xy - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.D_b_xy - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.in_proj.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.in_proj_xy.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.x_proj_f.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.x_proj_b.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.dt_proj_f.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.dt_proj_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.dt_proj_b.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.dt_proj_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.x_proj_f_xy.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.x_proj_b_xy.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.dt_proj_f_xy.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.dt_proj_f_xy.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.dt_proj_b_xy.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.dt_proj_b_xy.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.conv1d_x_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.conv1d_x_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.conv1d_z_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.conv1d_z_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.conv1d_x_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.conv1d_x_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.conv1d_z_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.conv1d_z_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.conv1d_x_xy_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.conv1d_x_xy_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.conv1d_z_xy_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.conv1d_z_xy_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.conv1d_x_xy_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.conv1d_x_xy_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.conv1d_z_xy_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.conv1d_z_xy_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.out_proj.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.global_proj.weight - torch.Size([2048, 2048]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mamba.global_proj.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mlp.gate_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mlp.up_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mlp.down_proj.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.0.mlp_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.norm_before.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.A_log_f - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.A_log_b - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.D_f - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.D_b - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.A_log_f_xy - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.A_log_b_xy - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.D_f_xy - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.D_b_xy - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.in_proj.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.in_proj_xy.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.x_proj_f.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.x_proj_b.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.dt_proj_f.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.dt_proj_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.dt_proj_b.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.dt_proj_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.x_proj_f_xy.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.x_proj_b_xy.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.dt_proj_f_xy.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.dt_proj_f_xy.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.dt_proj_b_xy.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.dt_proj_b_xy.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.conv1d_x_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.conv1d_x_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.conv1d_z_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.conv1d_z_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.conv1d_x_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.conv1d_x_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.conv1d_z_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.conv1d_z_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.conv1d_x_xy_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.conv1d_x_xy_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.conv1d_z_xy_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.conv1d_z_xy_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.conv1d_x_xy_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.conv1d_x_xy_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.conv1d_z_xy_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.conv1d_z_xy_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.out_proj.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.global_proj.weight - torch.Size([2048, 2048]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mamba.global_proj.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mlp.gate_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mlp.up_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.layers.1.mlp.down_proj.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.img_attention_weights.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.img_attention_weights.bias - torch.Size([24]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.img_output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.img_output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.position_encoder.0.weight - torch.Size([256, 3]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.position_encoder.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.position_encoder.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.position_encoder.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.position_encoder.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.position_encoder.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.position_encoder.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.position_encoder.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.modality_fusion_layer.0.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.modality_fusion_layer.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.modality_fusion_layer.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.modality_fusion_layer.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.modality_fusion_layer.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.modality_fusion_layer.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.modality_fusion_layer.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.modality_fusion_layer.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.0.A_log_h2t - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.0.D_h2t - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.0.A_log_t2h - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.0.D_t2h - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.0.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.0.conv1d_h2t.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.0.conv1d_h2t.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.0.x_proj_h2t.weight - torch.Size([48, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.0.dt_proj_h2t.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.0.dt_proj_h2t.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.0.conv1d_t2h.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.0.conv1d_t2h.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.0.x_proj_t2h.weight - torch.Size([48, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.0.dt_proj_t2h.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.0.dt_proj_t2h.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.0.lidar_guidance_proj.weight - torch.Size([512, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.0.lidar_guidance_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.0.out_proj.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.1.A_log_h2t - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.1.D_h2t - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.1.A_log_t2h - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.1.D_t2h - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.1.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.1.conv1d_h2t.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.1.conv1d_h2t.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.1.x_proj_h2t.weight - torch.Size([48, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.1.dt_proj_h2t.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.1.dt_proj_h2t.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.1.conv1d_t2h.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.1.conv1d_t2h.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.1.x_proj_t2h.weight - torch.Size([48, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.1.dt_proj_t2h.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.1.dt_proj_t2h.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.1.lidar_guidance_proj.weight - torch.Size([512, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.1.lidar_guidance_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.1.out_proj.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.norm.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.norm.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.norm.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.norm.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.norm_before.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.A_log_f - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.A_log_b - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.D_f - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.D_b - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.A_log_f_xy - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.A_log_b_xy - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.D_f_xy - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.D_b_xy - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.in_proj.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.in_proj_xy.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.x_proj_f.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.x_proj_b.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.dt_proj_f.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.dt_proj_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.dt_proj_b.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.dt_proj_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.x_proj_f_xy.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.x_proj_b_xy.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.dt_proj_f_xy.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.dt_proj_f_xy.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.dt_proj_b_xy.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.dt_proj_b_xy.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.conv1d_x_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.conv1d_x_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.conv1d_z_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.conv1d_z_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.conv1d_x_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.conv1d_x_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.conv1d_z_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.conv1d_z_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.conv1d_x_xy_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.conv1d_x_xy_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.conv1d_z_xy_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.conv1d_z_xy_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.conv1d_x_xy_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.conv1d_x_xy_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.conv1d_z_xy_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.conv1d_z_xy_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.out_proj.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.global_proj.weight - torch.Size([2048, 2048]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mamba.global_proj.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mlp.gate_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mlp.up_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mlp.down_proj.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.0.mlp_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.norm_before.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.A_log_f - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.A_log_b - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.D_f - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.D_b - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.A_log_f_xy - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.A_log_b_xy - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.D_f_xy - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.D_b_xy - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.in_proj.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.in_proj_xy.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.x_proj_f.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.x_proj_b.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.dt_proj_f.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.dt_proj_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.dt_proj_b.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.dt_proj_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.x_proj_f_xy.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.x_proj_b_xy.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.dt_proj_f_xy.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.dt_proj_f_xy.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.dt_proj_b_xy.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.dt_proj_b_xy.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.conv1d_x_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.conv1d_x_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.conv1d_z_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.conv1d_z_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.conv1d_x_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.conv1d_x_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.conv1d_z_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.conv1d_z_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.conv1d_x_xy_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.conv1d_x_xy_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.conv1d_z_xy_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.conv1d_z_xy_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.conv1d_x_xy_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.conv1d_x_xy_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.conv1d_z_xy_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.conv1d_z_xy_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.out_proj.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.global_proj.weight - torch.Size([2048, 2048]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mamba.global_proj.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mlp.gate_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mlp.up_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.layers.1.mlp.down_proj.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.img_attention_weights.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.img_attention_weights.bias - torch.Size([24]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.img_output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.img_output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.position_encoder.0.weight - torch.Size([256, 3]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.position_encoder.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.position_encoder.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.position_encoder.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.position_encoder.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.position_encoder.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.position_encoder.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.position_encoder.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.modality_fusion_layer.0.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.modality_fusion_layer.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.modality_fusion_layer.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.modality_fusion_layer.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.modality_fusion_layer.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.modality_fusion_layer.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.modality_fusion_layer.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.modality_fusion_layer.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.0.A_log_h2t - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.0.D_h2t - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.0.A_log_t2h - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.0.D_t2h - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.0.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.0.conv1d_h2t.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.0.conv1d_h2t.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.0.x_proj_h2t.weight - torch.Size([48, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.0.dt_proj_h2t.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.0.dt_proj_h2t.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.0.conv1d_t2h.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.0.conv1d_t2h.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.0.x_proj_t2h.weight - torch.Size([48, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.0.dt_proj_t2h.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.0.dt_proj_t2h.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.0.lidar_guidance_proj.weight - torch.Size([512, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.0.lidar_guidance_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.0.out_proj.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.1.A_log_h2t - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.1.D_h2t - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.1.A_log_t2h - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.1.D_t2h - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.1.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.1.conv1d_h2t.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.1.conv1d_h2t.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.1.x_proj_h2t.weight - torch.Size([48, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.1.dt_proj_h2t.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.1.dt_proj_h2t.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.1.conv1d_t2h.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.1.conv1d_t2h.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.1.x_proj_t2h.weight - torch.Size([48, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.1.dt_proj_t2h.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.1.dt_proj_t2h.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.1.lidar_guidance_proj.weight - torch.Size([512, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.1.lidar_guidance_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.1.out_proj.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.norm.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.norm.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.norm.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.norm.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.norm_before.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.A_log_f - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.A_log_b - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.D_f - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.D_b - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.A_log_f_xy - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.A_log_b_xy - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.D_f_xy - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.D_b_xy - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.in_proj.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.in_proj_xy.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.x_proj_f.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.x_proj_b.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.dt_proj_f.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.dt_proj_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.dt_proj_b.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.dt_proj_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.x_proj_f_xy.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.x_proj_b_xy.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.dt_proj_f_xy.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.dt_proj_f_xy.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.dt_proj_b_xy.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.dt_proj_b_xy.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.conv1d_x_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.conv1d_x_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.conv1d_z_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.conv1d_z_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.conv1d_x_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.conv1d_x_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.conv1d_z_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.conv1d_z_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.conv1d_x_xy_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.conv1d_x_xy_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.conv1d_z_xy_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.conv1d_z_xy_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.conv1d_x_xy_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.conv1d_x_xy_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.conv1d_z_xy_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.conv1d_z_xy_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.out_proj.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.global_proj.weight - torch.Size([2048, 2048]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mamba.global_proj.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mlp.gate_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mlp.up_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mlp.down_proj.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.0.mlp_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.norm_before.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.A_log_f - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.A_log_b - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.D_f - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.D_b - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.A_log_f_xy - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.A_log_b_xy - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.D_f_xy - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.D_b_xy - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.in_proj.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.in_proj_xy.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.x_proj_f.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.x_proj_b.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.dt_proj_f.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.dt_proj_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.dt_proj_b.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.dt_proj_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.x_proj_f_xy.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.x_proj_b_xy.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.dt_proj_f_xy.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.dt_proj_f_xy.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.dt_proj_b_xy.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.dt_proj_b_xy.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.conv1d_x_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.conv1d_x_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.conv1d_z_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.conv1d_z_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.conv1d_x_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.conv1d_x_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.conv1d_z_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.conv1d_z_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.conv1d_x_xy_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.conv1d_x_xy_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.conv1d_z_xy_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.conv1d_z_xy_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.conv1d_x_xy_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.conv1d_x_xy_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.conv1d_z_xy_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.conv1d_z_xy_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.out_proj.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.global_proj.weight - torch.Size([2048, 2048]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mamba.global_proj.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mlp.gate_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mlp.up_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.layers.1.mlp.down_proj.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.img_attention_weights.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.img_attention_weights.bias - torch.Size([24]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.img_output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.img_output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.position_encoder.0.weight - torch.Size([256, 3]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.position_encoder.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.position_encoder.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.position_encoder.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.position_encoder.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.position_encoder.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.position_encoder.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.position_encoder.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.modality_fusion_layer.0.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.modality_fusion_layer.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.modality_fusion_layer.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.modality_fusion_layer.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.modality_fusion_layer.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.modality_fusion_layer.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.modality_fusion_layer.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.modality_fusion_layer.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.0.A_log_h2t - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.0.D_h2t - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.0.A_log_t2h - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.0.D_t2h - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.0.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.0.conv1d_h2t.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.0.conv1d_h2t.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.0.x_proj_h2t.weight - torch.Size([48, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.0.dt_proj_h2t.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.0.dt_proj_h2t.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.0.conv1d_t2h.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.0.conv1d_t2h.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.0.x_proj_t2h.weight - torch.Size([48, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.0.dt_proj_t2h.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.0.dt_proj_t2h.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.0.lidar_guidance_proj.weight - torch.Size([512, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.0.lidar_guidance_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.0.out_proj.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.1.A_log_h2t - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.1.D_h2t - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.1.A_log_t2h - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.1.D_t2h - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.1.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.1.conv1d_h2t.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.1.conv1d_h2t.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.1.x_proj_h2t.weight - torch.Size([48, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.1.dt_proj_h2t.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.1.dt_proj_h2t.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.1.conv1d_t2h.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.1.conv1d_t2h.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.1.x_proj_t2h.weight - torch.Size([48, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.1.dt_proj_t2h.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.1.dt_proj_t2h.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.1.lidar_guidance_proj.weight - torch.Size([512, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.1.lidar_guidance_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.1.out_proj.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.norm.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.norm.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.norm.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.norm.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.norm_before.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.A_log_f - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.A_log_b - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.D_f - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.D_b - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.A_log_f_xy - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.A_log_b_xy - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.D_f_xy - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.D_b_xy - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.in_proj.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.in_proj_xy.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.x_proj_f.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.x_proj_b.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.dt_proj_f.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.dt_proj_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.dt_proj_b.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.dt_proj_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.x_proj_f_xy.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.x_proj_b_xy.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.dt_proj_f_xy.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.dt_proj_f_xy.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.dt_proj_b_xy.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.dt_proj_b_xy.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.conv1d_x_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.conv1d_x_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.conv1d_z_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.conv1d_z_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.conv1d_x_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.conv1d_x_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.conv1d_z_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.conv1d_z_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.conv1d_x_xy_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.conv1d_x_xy_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.conv1d_z_xy_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.conv1d_z_xy_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.conv1d_x_xy_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.conv1d_x_xy_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.conv1d_z_xy_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.conv1d_z_xy_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.out_proj.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.global_proj.weight - torch.Size([2048, 2048]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mamba.global_proj.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mlp.gate_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mlp.up_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mlp.down_proj.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.0.mlp_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.norm_before.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.A_log_f - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.A_log_b - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.D_f - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.D_b - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.A_log_f_xy - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.A_log_b_xy - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.D_f_xy - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.D_b_xy - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.in_proj.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.in_proj_xy.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.x_proj_f.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.x_proj_b.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.dt_proj_f.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.dt_proj_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.dt_proj_b.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.dt_proj_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.x_proj_f_xy.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.x_proj_b_xy.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.dt_proj_f_xy.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.dt_proj_f_xy.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.dt_proj_b_xy.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.dt_proj_b_xy.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.conv1d_x_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.conv1d_x_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.conv1d_z_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.conv1d_z_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.conv1d_x_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.conv1d_x_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.conv1d_z_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.conv1d_z_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.conv1d_x_xy_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.conv1d_x_xy_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.conv1d_z_xy_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.conv1d_z_xy_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.conv1d_x_xy_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.conv1d_x_xy_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.conv1d_z_xy_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.conv1d_z_xy_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.out_proj.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.global_proj.weight - torch.Size([2048, 2048]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mamba.global_proj.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mlp.gate_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mlp.up_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.layers.1.mlp.down_proj.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.img_attention_weights.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.img_attention_weights.bias - torch.Size([24]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.img_output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.img_output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.position_encoder.0.weight - torch.Size([256, 3]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.position_encoder.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.position_encoder.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.position_encoder.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.position_encoder.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.position_encoder.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.position_encoder.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.position_encoder.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.modality_fusion_layer.0.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.modality_fusion_layer.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.modality_fusion_layer.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.modality_fusion_layer.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.modality_fusion_layer.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.modality_fusion_layer.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.modality_fusion_layer.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.modality_fusion_layer.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.0.A_log_h2t - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.0.D_h2t - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.0.A_log_t2h - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.0.D_t2h - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.0.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.0.conv1d_h2t.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.0.conv1d_h2t.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.0.x_proj_h2t.weight - torch.Size([48, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.0.dt_proj_h2t.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.0.dt_proj_h2t.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.0.conv1d_t2h.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.0.conv1d_t2h.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.0.x_proj_t2h.weight - torch.Size([48, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.0.dt_proj_t2h.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.0.dt_proj_t2h.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.0.lidar_guidance_proj.weight - torch.Size([512, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.0.lidar_guidance_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.0.out_proj.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.1.A_log_h2t - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.1.D_h2t - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.1.A_log_t2h - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.1.D_t2h - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.1.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.1.conv1d_h2t.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.1.conv1d_h2t.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.1.x_proj_h2t.weight - torch.Size([48, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.1.dt_proj_h2t.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.1.dt_proj_h2t.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.1.conv1d_t2h.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.1.conv1d_t2h.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.1.x_proj_t2h.weight - torch.Size([48, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.1.dt_proj_t2h.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.1.dt_proj_t2h.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.1.lidar_guidance_proj.weight - torch.Size([512, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.1.lidar_guidance_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.1.out_proj.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.norm.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.norm.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.norm.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.norm.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.norm_before.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.A_log_f - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.A_log_b - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.D_f - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.D_b - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.A_log_f_xy - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.A_log_b_xy - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.D_f_xy - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.D_b_xy - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.in_proj.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.in_proj_xy.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.x_proj_f.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.x_proj_b.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.dt_proj_f.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.dt_proj_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.dt_proj_b.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.dt_proj_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.x_proj_f_xy.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.x_proj_b_xy.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.dt_proj_f_xy.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.dt_proj_f_xy.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.dt_proj_b_xy.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.dt_proj_b_xy.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.conv1d_x_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.conv1d_x_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.conv1d_z_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.conv1d_z_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.conv1d_x_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.conv1d_x_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.conv1d_z_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.conv1d_z_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.conv1d_x_xy_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.conv1d_x_xy_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.conv1d_z_xy_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.conv1d_z_xy_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.conv1d_x_xy_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.conv1d_x_xy_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.conv1d_z_xy_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.conv1d_z_xy_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.out_proj.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.global_proj.weight - torch.Size([2048, 2048]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mamba.global_proj.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mlp.gate_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mlp.up_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mlp.down_proj.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.0.mlp_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.norm_before.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.A_log_f - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.A_log_b - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.D_f - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.D_b - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.A_log_f_xy - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.A_log_b_xy - torch.Size([512, 64]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.D_f_xy - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.D_b_xy - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.in_proj.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.in_proj_xy.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.x_proj_f.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.x_proj_b.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.dt_proj_f.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.dt_proj_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.dt_proj_b.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.dt_proj_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.x_proj_f_xy.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.x_proj_b_xy.weight - torch.Size([144, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.dt_proj_f_xy.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.dt_proj_f_xy.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.dt_proj_b_xy.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.dt_proj_b_xy.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.conv1d_x_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.conv1d_x_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.conv1d_z_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.conv1d_z_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.conv1d_x_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.conv1d_x_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.conv1d_z_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.conv1d_z_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.conv1d_x_xy_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.conv1d_x_xy_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.conv1d_z_xy_f.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.conv1d_z_xy_f.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.conv1d_x_xy_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.conv1d_x_xy_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.conv1d_z_xy_b.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.conv1d_z_xy_b.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.out_proj.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.global_proj.weight - torch.Size([2048, 2048]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mamba.global_proj.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mlp.gate_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mlp.up_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.layers.1.mlp.down_proj.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.img_attention_weights.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.img_attention_weights.bias - torch.Size([24]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.img_output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.img_output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.position_encoder.0.weight - torch.Size([256, 3]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.position_encoder.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.position_encoder.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.position_encoder.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.position_encoder.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.position_encoder.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.position_encoder.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.position_encoder.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.modality_fusion_layer.0.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.modality_fusion_layer.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.modality_fusion_layer.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.modality_fusion_layer.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.modality_fusion_layer.3.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.modality_fusion_layer.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.modality_fusion_layer.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.modality_fusion_layer.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.0.A_log_h2t - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.0.D_h2t - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.0.A_log_t2h - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.0.D_t2h - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.0.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.0.conv1d_h2t.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.0.conv1d_h2t.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.0.x_proj_h2t.weight - torch.Size([48, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.0.dt_proj_h2t.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.0.dt_proj_h2t.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.0.conv1d_t2h.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.0.conv1d_t2h.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.0.x_proj_t2h.weight - torch.Size([48, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.0.dt_proj_t2h.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.0.dt_proj_t2h.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.0.lidar_guidance_proj.weight - torch.Size([512, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.0.lidar_guidance_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.0.out_proj.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.1.A_log_h2t - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.1.D_h2t - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.1.A_log_t2h - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.1.D_t2h - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.1.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.1.conv1d_h2t.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.1.conv1d_h2t.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.1.x_proj_h2t.weight - torch.Size([48, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.1.dt_proj_h2t.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.1.dt_proj_h2t.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.1.conv1d_t2h.weight - torch.Size([512, 1, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.1.conv1d_t2h.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.1.x_proj_t2h.weight - torch.Size([48, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.1.dt_proj_t2h.weight - torch.Size([512, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.1.dt_proj_t2h.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.1.lidar_guidance_proj.weight - torch.Size([512, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.1.lidar_guidance_proj.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.1.out_proj.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.norm.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.norm.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.norm.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.norm.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.query_scale.layers.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.query_scale.layers.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.query_scale.layers.1.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.query_scale.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.ref_point_head.layers.0.weight - torch.Size([256, 384]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.ref_point_head.layers.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.ref_point_head.layers.1.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.ref_point_head.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.0.gate_proj.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.0.up_proj.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.0.down_proj.weight - torch.Size([10, 1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.0.down_proj.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.cls_branches.1.gate_proj.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.1.up_proj.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.1.down_proj.weight - torch.Size([10, 1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.1.down_proj.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.cls_branches.2.gate_proj.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.2.up_proj.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.2.down_proj.weight - torch.Size([10, 1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.2.down_proj.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.cls_branches.3.gate_proj.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.3.up_proj.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.3.down_proj.weight - torch.Size([10, 1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.3.down_proj.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.cls_branches.4.gate_proj.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.4.up_proj.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.4.down_proj.weight - torch.Size([10, 1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.4.down_proj.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.cls_branches.5.gate_proj.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.5.up_proj.weight - torch.Size([1024, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.5.down_proj.weight - torch.Size([10, 1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.5.down_proj.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.0.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.0.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.0.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.0.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.0.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.0.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.1.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.1.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.1.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.1.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.1.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.1.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.2.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.2.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.2.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.2.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.2.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.2.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.3.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.3.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.3.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.3.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.3.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.3.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.4.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.4.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.4.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.4.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.4.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.4.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.5.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.5.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.5.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.5.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.5.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.5.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.tgt_embed.weight - torch.Size([900, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.refpoint_embed.weight - torch.Size([900, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer1.0.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer1.0.bn3.weight - torch.Size([256]): 
ConstantInit: val=0, bias=0 

img_backbone.layer1.0.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer1.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer1.1.bn3.weight - torch.Size([256]): 
ConstantInit: val=0, bias=0 

img_backbone.layer1.1.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer1.2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer1.2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer1.2.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer1.2.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer1.2.bn3.weight - torch.Size([256]): 
ConstantInit: val=0, bias=0 

img_backbone.layer1.2.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer2.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer2.0.bn3.weight - torch.Size([512]): 
ConstantInit: val=0, bias=0 

img_backbone.layer2.0.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer2.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer2.1.bn3.weight - torch.Size([512]): 
ConstantInit: val=0, bias=0 

img_backbone.layer2.1.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer2.2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer2.2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer2.2.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer2.2.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer2.2.bn3.weight - torch.Size([512]): 
ConstantInit: val=0, bias=0 

img_backbone.layer2.2.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer2.3.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer2.3.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer2.3.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer2.3.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer2.3.bn3.weight - torch.Size([512]): 
ConstantInit: val=0, bias=0 

img_backbone.layer2.3.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.0.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.0.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.0.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.0.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.1.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.1.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.1.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.1.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.2.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.2.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.2.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.2.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.2.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.2.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.2.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.2.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.3.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.3.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.3.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.3.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.3.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.3.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.3.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.3.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.4.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.4.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.4.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.4.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.4.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.4.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.4.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.4.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.5.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.5.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.5.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.5.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.5.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.5.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.5.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.5.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.6.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.6.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.6.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.6.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.6.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.6.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.6.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.6.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.6.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.6.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.6.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.7.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.7.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.7.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.7.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.7.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.7.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.7.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.7.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.7.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.7.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.7.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.8.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.8.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.8.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.8.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.8.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.8.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.8.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.8.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.8.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.8.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.8.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.9.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.9.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.9.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.9.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.9.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.9.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.9.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.9.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.9.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.9.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.9.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.10.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.10.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.10.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.10.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.10.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.10.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.10.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.10.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.10.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.10.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.10.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.11.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.11.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.11.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.11.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.11.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.11.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.11.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.11.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.11.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.11.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.11.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.12.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.12.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.12.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.12.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.12.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.12.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.12.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.12.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.12.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.12.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.12.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.13.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.13.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.13.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.13.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.13.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.13.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.13.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.13.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.13.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.13.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.13.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.14.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.14.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.14.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.14.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.14.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.14.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.14.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.14.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.14.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.14.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.14.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.15.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.15.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.15.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.15.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.15.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.15.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.15.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.15.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.15.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.15.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.15.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.16.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.16.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.16.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.16.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.16.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.16.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.16.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.16.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.16.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.16.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.16.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.17.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.17.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.17.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.17.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.17.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.17.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.17.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.17.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.17.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.17.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.17.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.18.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.18.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.18.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.18.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.18.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.18.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.18.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.18.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.18.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.18.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.18.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.19.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.19.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.19.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.19.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.19.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.19.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.19.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.19.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.19.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.19.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.19.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.20.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.20.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.20.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.20.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.20.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.20.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.20.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.20.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.20.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.20.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.20.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.21.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.21.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.21.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.21.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.21.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.21.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.21.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.21.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.21.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.21.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.21.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.22.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.22.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.22.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.22.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.22.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.22.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.22.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.22.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer3.22.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.22.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.22.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer4.0.conv2.conv_offset.weight - torch.Size([27, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer4.0.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer4.0.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer4.0.bn3.weight - torch.Size([2048]): 
ConstantInit: val=0, bias=0 

img_backbone.layer4.0.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer4.1.conv2.conv_offset.weight - torch.Size([27, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer4.1.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer4.1.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer4.1.bn3.weight - torch.Size([2048]): 
ConstantInit: val=0, bias=0 

img_backbone.layer4.1.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer4.2.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer4.2.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer4.2.conv2.conv_offset.weight - torch.Size([27, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer4.2.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer4.2.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer4.2.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer4.2.bn3.weight - torch.Size([2048]): 
ConstantInit: val=0, bias=0 

img_backbone.layer4.2.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_neck.lateral_convs.0.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

img_neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_neck.lateral_convs.1.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

img_neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_neck.lateral_convs.2.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

img_neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

img_neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

img_neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

img_neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

img_neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

img_neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  
2025-06-18 11:25:06,786 - mmdet - INFO - 使用SyncBN
2025-06-18 11:25:06,800 - mmdet - INFO - Model:
FUTR3D(
  (grid_mask): GridMask()
  (pts_voxel_layer): Voxelization(voxel_size=[0.075, 0.075, 0.2], point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0], max_num_points=-1, max_voxels=(-1, -1), deterministic=True)
  (pts_voxel_encoder): DynamicVFE(
    (scatter): DynamicScatter(voxel_size=[0.075, 0.075, 0.2], point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0], average_points=True)
    (vfe_layers): ModuleList(
      (0): Sequential(
        (0): Linear(in_features=11, out_features=64, bias=False)
        (1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Sequential(
        (0): Linear(in_features=128, out_features=128, bias=False)
        (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (vfe_scatter): DynamicScatter(voxel_size=[0.075, 0.075, 0.2], point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0], average_points=False)
    (cluster_scatter): DynamicScatter(voxel_size=[0.075, 0.075, 0.2], point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0], average_points=True)
  )
  (pts_middle_encoder): HEDNet(
    (conv1): SparseSequential(
      (0): SparseSequential(
        (0): SubMConv3d(128, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): SyncBatchNorm(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (1): SparseBasicBlock(
        (conv1): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn1): SyncBatchNorm(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (relu): ReLU()
        (conv2): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn2): SyncBatchNorm(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      )
      (2): SparseBasicBlock(
        (conv1): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn1): SyncBatchNorm(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (relu): ReLU()
        (conv2): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn2): SyncBatchNorm(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      )
      (3): SparseSequential(
        (0): SparseConv3d(16, 32, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
    (conv2): SparseSequential(
      (0): SEDLayer(
        (encoder): ModuleList(
          (0): SEDBlock(
            (blocks): SparseSequential(
              (0): Identity()
              (1): SparseBasicBlock(
                (conv1): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
              (2): SparseBasicBlock(
                (conv1): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
          (1): SEDBlock(
            (blocks): SparseSequential(
              (0): SparseSequential(
                (0): SparseConv3d(32, 32, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (1): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (1): SparseBasicBlock(
                (conv1): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
          (2): SEDBlock(
            (blocks): SparseSequential(
              (0): SparseSequential(
                (0): SparseConv3d(32, 32, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (1): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (1): SparseBasicBlock(
                (conv1): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
        (decoder): ModuleList(
          (0): SparseSequential(
            (0): SparseInverseConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (1): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (1): SparseSequential(
            (0): SparseInverseConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (1): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
        )
        (decoder_norm): ModuleList(
          (0): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (1): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (1): SparseSequential(
        (0): SparseConv3d(32, 64, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
    (conv3): SparseSequential(
      (0): SEDLayer(
        (encoder): ModuleList(
          (0): SEDBlock(
            (blocks): SparseSequential(
              (0): Identity()
              (1): SparseBasicBlock(
                (conv1): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
              (2): SparseBasicBlock(
                (conv1): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
          (1): SEDBlock(
            (blocks): SparseSequential(
              (0): SparseSequential(
                (0): SparseConv3d(64, 64, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (1): SparseBasicBlock(
                (conv1): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
          (2): SEDBlock(
            (blocks): SparseSequential(
              (0): SparseSequential(
                (0): SparseConv3d(64, 64, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (1): SparseBasicBlock(
                (conv1): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
        (decoder): ModuleList(
          (0): SparseSequential(
            (0): SparseInverseConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (1): SparseSequential(
            (0): SparseInverseConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
        )
        (decoder_norm): ModuleList(
          (0): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (1): SparseSequential(
        (0): SparseConv3d(64, 128, kernel_size=[3, 3, 3], stride=[1, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
    (layers): ModuleList(
      (0): SEDLayer(
        (encoder): ModuleList(
          (0): SEDBlock(
            (blocks): SparseSequential(
              (0): Identity()
              (1): SparseBasicBlock(
                (conv1): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
              (2): SparseBasicBlock(
                (conv1): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
          (1): SEDBlock(
            (blocks): SparseSequential(
              (0): SparseSequential(
                (0): SparseConv3d(128, 128, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (1): SparseBasicBlock(
                (conv1): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
          (2): SEDBlock(
            (blocks): SparseSequential(
              (0): SparseSequential(
                (0): SparseConv3d(128, 128, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (1): SparseBasicBlock(
                (conv1): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
        (decoder): ModuleList(
          (0): SparseSequential(
            (0): SparseInverseConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (1): SparseSequential(
            (0): SparseInverseConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
        )
        (decoder_norm): ModuleList(
          (0): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (1): SEDLayer(
        (encoder): ModuleList(
          (0): SEDBlock(
            (blocks): SparseSequential(
              (0): Identity()
              (1): SparseBasicBlock(
                (conv1): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
              (2): SparseBasicBlock(
                (conv1): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
          (1): SEDBlock(
            (blocks): SparseSequential(
              (0): SparseSequential(
                (0): SparseConv3d(128, 128, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (1): SparseBasicBlock(
                (conv1): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
          (2): SEDBlock(
            (blocks): SparseSequential(
              (0): SparseSequential(
                (0): SparseConv3d(128, 128, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (1): SparseBasicBlock(
                (conv1): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
        (decoder): ModuleList(
          (0): SparseSequential(
            (0): SparseInverseConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (1): SparseSequential(
            (0): SparseInverseConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
        )
        (decoder_norm): ModuleList(
          (0): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
    )
    (conv_out): SparseSequential(
      (0): SparseConv3d(128, 128, kernel_size=[3, 1, 1], stride=[2, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
      (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
      (3): SparseConv3d(128, 128, kernel_size=[3, 1, 1], stride=[2, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
      (4): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (5): ReLU()
    )
  )
  (pts_backbone): CascadeDEDBackbone(
    (layers): ModuleList(
      (0): DEDBackbone(
        (encoder): ModuleList(
          (0): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
            (1): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
          (1): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
              (downsample_layer): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
            (1): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
          (2): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
              (downsample_layer): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
            (1): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
        )
        (decoder): ModuleList(
          (0): Sequential(
            (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (1): Sequential(
            (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
        )
        (decoder_norm): ModuleList(
          (0): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (1): DEDBackbone(
        (encoder): ModuleList(
          (0): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
            (1): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
          (1): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
              (downsample_layer): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
            (1): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
          (2): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
              (downsample_layer): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
            (1): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
        )
        (decoder): ModuleList(
          (0): Sequential(
            (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (1): Sequential(
            (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
        )
        (decoder_norm): ModuleList(
          (0): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (2): DEDBackbone(
        (encoder): ModuleList(
          (0): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
            (1): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
          (1): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
              (downsample_layer): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
            (1): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
          (2): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
              (downsample_layer): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
            (1): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
        )
        (decoder): ModuleList(
          (0): Sequential(
            (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (1): Sequential(
            (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
        )
        (decoder_norm): ModuleList(
          (0): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (3): DEDBackbone(
        (encoder): ModuleList(
          (0): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
            (1): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
          (1): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
              (downsample_layer): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
            (1): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
          (2): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
              (downsample_layer): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
            (1): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
        )
        (decoder): ModuleList(
          (0): Sequential(
            (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (1): Sequential(
            (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
        )
        (decoder_norm): ModuleList(
          (0): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (pts_neck): FPN(
    (lateral_convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
    )
    (fpn_convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
      (1): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
      (2): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
      (3): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
    )
  )
  init_cfg={'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
  (pts_bbox_head): FUTR3DHead(
    (loss_cls): FocalLoss()
    (loss_bbox): L1Loss()
    (loss_iou): GIoULoss()
    (activate): ReLU(inplace=True)
    (positional_encoding): SinePositionalEncoding(num_feats=128, temperature=10000, normalize=True, scale=6.283185307179586, eps=1e-06)
    (transformer): FUTR3DTransformer(
      (decoder): FUTR3DTransformerDecoder(
        (layers): ModuleList(
          (0): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): ModuleList(
                (0): MultiheadAttention(
                  (attn): MultiheadAttention(
                    (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                  )
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (dropout_layer): Dropout(p=0.1, inplace=False)
                )
                (1): RMSNorm()
                (2): DSS(
                  (layers): ModuleList(
                    (0): ModuleDict(
                      (norm_before): RMSNorm()
                      (mamba): DSSMamba(
                        (in_proj): Linear(in_features=256, out_features=2048, bias=False)
                        (in_proj_xy): Linear(in_features=256, out_features=2048, bias=False)
                        (act): SiLU()
                        (x_proj_f): Linear(in_features=512, out_features=144, bias=False)
                        (x_proj_b): Linear(in_features=512, out_features=144, bias=False)
                        (dt_proj_f): Linear(in_features=16, out_features=512, bias=True)
                        (dt_proj_b): Linear(in_features=16, out_features=512, bias=True)
                        (act_xy): SiLU()
                        (x_proj_f_xy): Linear(in_features=512, out_features=144, bias=False)
                        (x_proj_b_xy): Linear(in_features=512, out_features=144, bias=False)
                        (dt_proj_f_xy): Linear(in_features=16, out_features=512, bias=True)
                        (dt_proj_b_xy): Linear(in_features=16, out_features=512, bias=True)
                        (conv1d_x_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_x_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_x_xy_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_xy_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_x_xy_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_xy_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (out_proj): Linear(in_features=2048, out_features=256, bias=False)
                        (global_proj): Linear(in_features=2048, out_features=2048, bias=True)
                      )
                      (dropout): Identity()
                      (norm): RMSNorm()
                      (mlp): MLP(
                        (gate_proj): Linear(in_features=256, out_features=1024, bias=False)
                        (up_proj): Linear(in_features=256, out_features=1024, bias=False)
                        (down_proj): Linear(in_features=1024, out_features=256, bias=False)
                        (act_fn): SiLU()
                      )
                      (mlp_norm): RMSNorm()
                    )
                    (1): ModuleDict(
                      (norm_before): RMSNorm()
                      (mamba): DSSMamba(
                        (in_proj): Linear(in_features=256, out_features=2048, bias=False)
                        (in_proj_xy): Linear(in_features=256, out_features=2048, bias=False)
                        (act): SiLU()
                        (x_proj_f): Linear(in_features=512, out_features=144, bias=False)
                        (x_proj_b): Linear(in_features=512, out_features=144, bias=False)
                        (dt_proj_f): Linear(in_features=16, out_features=512, bias=True)
                        (dt_proj_b): Linear(in_features=16, out_features=512, bias=True)
                        (act_xy): SiLU()
                        (x_proj_f_xy): Linear(in_features=512, out_features=144, bias=False)
                        (x_proj_b_xy): Linear(in_features=512, out_features=144, bias=False)
                        (dt_proj_f_xy): Linear(in_features=16, out_features=512, bias=True)
                        (dt_proj_b_xy): Linear(in_features=16, out_features=512, bias=True)
                        (conv1d_x_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_x_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_x_xy_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_xy_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_x_xy_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_xy_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (out_proj): Linear(in_features=2048, out_features=256, bias=False)
                        (global_proj): Linear(in_features=2048, out_features=2048, bias=True)
                      )
                      (dropout): DropPath(drop_prob=0.300)
                      (norm): RMSNorm()
                      (mlp): MLP(
                        (gate_proj): Linear(in_features=256, out_features=1024, bias=False)
                        (up_proj): Linear(in_features=256, out_features=1024, bias=False)
                        (down_proj): Linear(in_features=1024, out_features=256, bias=False)
                        (act_fn): SiLU()
                      )
                      (mlp_norm): Identity()
                    )
                  )
                  (rope): RotaryEmbedding()
                )
                (3): DropPath(drop_prob=0.100)
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
                (img_attention_weights): Linear(in_features=256, out_features=24, bias=True)
                (img_output_proj): Linear(in_features=256, out_features=256, bias=True)
                (position_encoder): Sequential(
                  (0): Linear(in_features=3, out_features=256, bias=True)
                  (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  (2): ReLU(inplace=True)
                  (3): Linear(in_features=256, out_features=256, bias=True)
                  (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  (5): ReLU(inplace=True)
                )
                (weight_dropout): Dropout(p=0.0, inplace=False)
                (modality_fusion_layer): Sequential(
                  (0): Linear(in_features=512, out_features=256, bias=True)
                  (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  (2): ReLU()
                  (3): Linear(in_features=256, out_features=256, bias=True)
                  (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                )
                (camera_mixer): LidarCameraFusionMambaBlock(
                  (layers): ModuleList(
                    (0): LidarCameraFusionMambaV2(
                      (activation_fn): SiLU()
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (conv1d_h2t): Conv1d(512, 512, kernel_size=(4,), stride=(1,), padding=(3,), groups=512)
                      (x_proj_h2t): Linear(in_features=512, out_features=48, bias=False)
                      (dt_proj_h2t): Linear(in_features=16, out_features=512, bias=True)
                      (conv1d_t2h): Conv1d(512, 512, kernel_size=(4,), stride=(1,), padding=(3,), groups=512)
                      (x_proj_t2h): Linear(in_features=512, out_features=48, bias=False)
                      (dt_proj_t2h): Linear(in_features=16, out_features=512, bias=True)
                      (lidar_guidance_proj): Linear(in_features=512, out_features=512, bias=True)
                      (out_proj): Linear(in_features=512, out_features=256, bias=False)
                    )
                    (1): LidarCameraFusionMambaV2(
                      (activation_fn): SiLU()
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (conv1d_h2t): Conv1d(512, 512, kernel_size=(4,), stride=(1,), padding=(3,), groups=512)
                      (x_proj_h2t): Linear(in_features=512, out_features=48, bias=False)
                      (dt_proj_h2t): Linear(in_features=16, out_features=512, bias=True)
                      (conv1d_t2h): Conv1d(512, 512, kernel_size=(4,), stride=(1,), padding=(3,), groups=512)
                      (x_proj_t2h): Linear(in_features=512, out_features=48, bias=False)
                      (dt_proj_t2h): Linear(in_features=16, out_features=512, bias=True)
                      (lidar_guidance_proj): Linear(in_features=512, out_features=512, bias=True)
                      (out_proj): Linear(in_features=512, out_features=256, bias=False)
                    )
                  )
                  (norm): ModuleList(
                    (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                    (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  )
                  (dropout): ModuleList(
                    (0): DropPath(drop_prob=0.100)
                    (1): DropPath(drop_prob=0.100)
                  )
                )
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (1): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): ModuleList(
                (0): MultiheadAttention(
                  (attn): MultiheadAttention(
                    (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                  )
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (dropout_layer): Dropout(p=0.1, inplace=False)
                )
                (1): RMSNorm()
                (2): DSS(
                  (layers): ModuleList(
                    (0): ModuleDict(
                      (norm_before): RMSNorm()
                      (mamba): DSSMamba(
                        (in_proj): Linear(in_features=256, out_features=2048, bias=False)
                        (in_proj_xy): Linear(in_features=256, out_features=2048, bias=False)
                        (act): SiLU()
                        (x_proj_f): Linear(in_features=512, out_features=144, bias=False)
                        (x_proj_b): Linear(in_features=512, out_features=144, bias=False)
                        (dt_proj_f): Linear(in_features=16, out_features=512, bias=True)
                        (dt_proj_b): Linear(in_features=16, out_features=512, bias=True)
                        (act_xy): SiLU()
                        (x_proj_f_xy): Linear(in_features=512, out_features=144, bias=False)
                        (x_proj_b_xy): Linear(in_features=512, out_features=144, bias=False)
                        (dt_proj_f_xy): Linear(in_features=16, out_features=512, bias=True)
                        (dt_proj_b_xy): Linear(in_features=16, out_features=512, bias=True)
                        (conv1d_x_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_x_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_x_xy_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_xy_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_x_xy_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_xy_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (out_proj): Linear(in_features=2048, out_features=256, bias=False)
                        (global_proj): Linear(in_features=2048, out_features=2048, bias=True)
                      )
                      (dropout): Identity()
                      (norm): RMSNorm()
                      (mlp): MLP(
                        (gate_proj): Linear(in_features=256, out_features=1024, bias=False)
                        (up_proj): Linear(in_features=256, out_features=1024, bias=False)
                        (down_proj): Linear(in_features=1024, out_features=256, bias=False)
                        (act_fn): SiLU()
                      )
                      (mlp_norm): RMSNorm()
                    )
                    (1): ModuleDict(
                      (norm_before): RMSNorm()
                      (mamba): DSSMamba(
                        (in_proj): Linear(in_features=256, out_features=2048, bias=False)
                        (in_proj_xy): Linear(in_features=256, out_features=2048, bias=False)
                        (act): SiLU()
                        (x_proj_f): Linear(in_features=512, out_features=144, bias=False)
                        (x_proj_b): Linear(in_features=512, out_features=144, bias=False)
                        (dt_proj_f): Linear(in_features=16, out_features=512, bias=True)
                        (dt_proj_b): Linear(in_features=16, out_features=512, bias=True)
                        (act_xy): SiLU()
                        (x_proj_f_xy): Linear(in_features=512, out_features=144, bias=False)
                        (x_proj_b_xy): Linear(in_features=512, out_features=144, bias=False)
                        (dt_proj_f_xy): Linear(in_features=16, out_features=512, bias=True)
                        (dt_proj_b_xy): Linear(in_features=16, out_features=512, bias=True)
                        (conv1d_x_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_x_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_x_xy_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_xy_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_x_xy_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_xy_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (out_proj): Linear(in_features=2048, out_features=256, bias=False)
                        (global_proj): Linear(in_features=2048, out_features=2048, bias=True)
                      )
                      (dropout): DropPath(drop_prob=0.300)
                      (norm): RMSNorm()
                      (mlp): MLP(
                        (gate_proj): Linear(in_features=256, out_features=1024, bias=False)
                        (up_proj): Linear(in_features=256, out_features=1024, bias=False)
                        (down_proj): Linear(in_features=1024, out_features=256, bias=False)
                        (act_fn): SiLU()
                      )
                      (mlp_norm): Identity()
                    )
                  )
                  (rope): RotaryEmbedding()
                )
                (3): DropPath(drop_prob=0.100)
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
                (img_attention_weights): Linear(in_features=256, out_features=24, bias=True)
                (img_output_proj): Linear(in_features=256, out_features=256, bias=True)
                (position_encoder): Sequential(
                  (0): Linear(in_features=3, out_features=256, bias=True)
                  (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  (2): ReLU(inplace=True)
                  (3): Linear(in_features=256, out_features=256, bias=True)
                  (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  (5): ReLU(inplace=True)
                )
                (weight_dropout): Dropout(p=0.0, inplace=False)
                (modality_fusion_layer): Sequential(
                  (0): Linear(in_features=512, out_features=256, bias=True)
                  (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  (2): ReLU()
                  (3): Linear(in_features=256, out_features=256, bias=True)
                  (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                )
                (camera_mixer): LidarCameraFusionMambaBlock(
                  (layers): ModuleList(
                    (0): LidarCameraFusionMambaV2(
                      (activation_fn): SiLU()
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (conv1d_h2t): Conv1d(512, 512, kernel_size=(4,), stride=(1,), padding=(3,), groups=512)
                      (x_proj_h2t): Linear(in_features=512, out_features=48, bias=False)
                      (dt_proj_h2t): Linear(in_features=16, out_features=512, bias=True)
                      (conv1d_t2h): Conv1d(512, 512, kernel_size=(4,), stride=(1,), padding=(3,), groups=512)
                      (x_proj_t2h): Linear(in_features=512, out_features=48, bias=False)
                      (dt_proj_t2h): Linear(in_features=16, out_features=512, bias=True)
                      (lidar_guidance_proj): Linear(in_features=512, out_features=512, bias=True)
                      (out_proj): Linear(in_features=512, out_features=256, bias=False)
                    )
                    (1): LidarCameraFusionMambaV2(
                      (activation_fn): SiLU()
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (conv1d_h2t): Conv1d(512, 512, kernel_size=(4,), stride=(1,), padding=(3,), groups=512)
                      (x_proj_h2t): Linear(in_features=512, out_features=48, bias=False)
                      (dt_proj_h2t): Linear(in_features=16, out_features=512, bias=True)
                      (conv1d_t2h): Conv1d(512, 512, kernel_size=(4,), stride=(1,), padding=(3,), groups=512)
                      (x_proj_t2h): Linear(in_features=512, out_features=48, bias=False)
                      (dt_proj_t2h): Linear(in_features=16, out_features=512, bias=True)
                      (lidar_guidance_proj): Linear(in_features=512, out_features=512, bias=True)
                      (out_proj): Linear(in_features=512, out_features=256, bias=False)
                    )
                  )
                  (norm): ModuleList(
                    (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                    (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  )
                  (dropout): ModuleList(
                    (0): DropPath(drop_prob=0.100)
                    (1): DropPath(drop_prob=0.100)
                  )
                )
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (2): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): ModuleList(
                (0): MultiheadAttention(
                  (attn): MultiheadAttention(
                    (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                  )
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (dropout_layer): Dropout(p=0.1, inplace=False)
                )
                (1): RMSNorm()
                (2): DSS(
                  (layers): ModuleList(
                    (0): ModuleDict(
                      (norm_before): RMSNorm()
                      (mamba): DSSMamba(
                        (in_proj): Linear(in_features=256, out_features=2048, bias=False)
                        (in_proj_xy): Linear(in_features=256, out_features=2048, bias=False)
                        (act): SiLU()
                        (x_proj_f): Linear(in_features=512, out_features=144, bias=False)
                        (x_proj_b): Linear(in_features=512, out_features=144, bias=False)
                        (dt_proj_f): Linear(in_features=16, out_features=512, bias=True)
                        (dt_proj_b): Linear(in_features=16, out_features=512, bias=True)
                        (act_xy): SiLU()
                        (x_proj_f_xy): Linear(in_features=512, out_features=144, bias=False)
                        (x_proj_b_xy): Linear(in_features=512, out_features=144, bias=False)
                        (dt_proj_f_xy): Linear(in_features=16, out_features=512, bias=True)
                        (dt_proj_b_xy): Linear(in_features=16, out_features=512, bias=True)
                        (conv1d_x_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_x_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_x_xy_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_xy_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_x_xy_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_xy_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (out_proj): Linear(in_features=2048, out_features=256, bias=False)
                        (global_proj): Linear(in_features=2048, out_features=2048, bias=True)
                      )
                      (dropout): Identity()
                      (norm): RMSNorm()
                      (mlp): MLP(
                        (gate_proj): Linear(in_features=256, out_features=1024, bias=False)
                        (up_proj): Linear(in_features=256, out_features=1024, bias=False)
                        (down_proj): Linear(in_features=1024, out_features=256, bias=False)
                        (act_fn): SiLU()
                      )
                      (mlp_norm): RMSNorm()
                    )
                    (1): ModuleDict(
                      (norm_before): RMSNorm()
                      (mamba): DSSMamba(
                        (in_proj): Linear(in_features=256, out_features=2048, bias=False)
                        (in_proj_xy): Linear(in_features=256, out_features=2048, bias=False)
                        (act): SiLU()
                        (x_proj_f): Linear(in_features=512, out_features=144, bias=False)
                        (x_proj_b): Linear(in_features=512, out_features=144, bias=False)
                        (dt_proj_f): Linear(in_features=16, out_features=512, bias=True)
                        (dt_proj_b): Linear(in_features=16, out_features=512, bias=True)
                        (act_xy): SiLU()
                        (x_proj_f_xy): Linear(in_features=512, out_features=144, bias=False)
                        (x_proj_b_xy): Linear(in_features=512, out_features=144, bias=False)
                        (dt_proj_f_xy): Linear(in_features=16, out_features=512, bias=True)
                        (dt_proj_b_xy): Linear(in_features=16, out_features=512, bias=True)
                        (conv1d_x_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_x_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_x_xy_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_xy_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_x_xy_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_xy_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (out_proj): Linear(in_features=2048, out_features=256, bias=False)
                        (global_proj): Linear(in_features=2048, out_features=2048, bias=True)
                      )
                      (dropout): DropPath(drop_prob=0.300)
                      (norm): RMSNorm()
                      (mlp): MLP(
                        (gate_proj): Linear(in_features=256, out_features=1024, bias=False)
                        (up_proj): Linear(in_features=256, out_features=1024, bias=False)
                        (down_proj): Linear(in_features=1024, out_features=256, bias=False)
                        (act_fn): SiLU()
                      )
                      (mlp_norm): Identity()
                    )
                  )
                  (rope): RotaryEmbedding()
                )
                (3): DropPath(drop_prob=0.100)
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
                (img_attention_weights): Linear(in_features=256, out_features=24, bias=True)
                (img_output_proj): Linear(in_features=256, out_features=256, bias=True)
                (position_encoder): Sequential(
                  (0): Linear(in_features=3, out_features=256, bias=True)
                  (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  (2): ReLU(inplace=True)
                  (3): Linear(in_features=256, out_features=256, bias=True)
                  (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  (5): ReLU(inplace=True)
                )
                (weight_dropout): Dropout(p=0.0, inplace=False)
                (modality_fusion_layer): Sequential(
                  (0): Linear(in_features=512, out_features=256, bias=True)
                  (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  (2): ReLU()
                  (3): Linear(in_features=256, out_features=256, bias=True)
                  (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                )
                (camera_mixer): LidarCameraFusionMambaBlock(
                  (layers): ModuleList(
                    (0): LidarCameraFusionMambaV2(
                      (activation_fn): SiLU()
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (conv1d_h2t): Conv1d(512, 512, kernel_size=(4,), stride=(1,), padding=(3,), groups=512)
                      (x_proj_h2t): Linear(in_features=512, out_features=48, bias=False)
                      (dt_proj_h2t): Linear(in_features=16, out_features=512, bias=True)
                      (conv1d_t2h): Conv1d(512, 512, kernel_size=(4,), stride=(1,), padding=(3,), groups=512)
                      (x_proj_t2h): Linear(in_features=512, out_features=48, bias=False)
                      (dt_proj_t2h): Linear(in_features=16, out_features=512, bias=True)
                      (lidar_guidance_proj): Linear(in_features=512, out_features=512, bias=True)
                      (out_proj): Linear(in_features=512, out_features=256, bias=False)
                    )
                    (1): LidarCameraFusionMambaV2(
                      (activation_fn): SiLU()
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (conv1d_h2t): Conv1d(512, 512, kernel_size=(4,), stride=(1,), padding=(3,), groups=512)
                      (x_proj_h2t): Linear(in_features=512, out_features=48, bias=False)
                      (dt_proj_h2t): Linear(in_features=16, out_features=512, bias=True)
                      (conv1d_t2h): Conv1d(512, 512, kernel_size=(4,), stride=(1,), padding=(3,), groups=512)
                      (x_proj_t2h): Linear(in_features=512, out_features=48, bias=False)
                      (dt_proj_t2h): Linear(in_features=16, out_features=512, bias=True)
                      (lidar_guidance_proj): Linear(in_features=512, out_features=512, bias=True)
                      (out_proj): Linear(in_features=512, out_features=256, bias=False)
                    )
                  )
                  (norm): ModuleList(
                    (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                    (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  )
                  (dropout): ModuleList(
                    (0): DropPath(drop_prob=0.100)
                    (1): DropPath(drop_prob=0.100)
                  )
                )
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (3): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): ModuleList(
                (0): MultiheadAttention(
                  (attn): MultiheadAttention(
                    (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                  )
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (dropout_layer): Dropout(p=0.1, inplace=False)
                )
                (1): RMSNorm()
                (2): DSS(
                  (layers): ModuleList(
                    (0): ModuleDict(
                      (norm_before): RMSNorm()
                      (mamba): DSSMamba(
                        (in_proj): Linear(in_features=256, out_features=2048, bias=False)
                        (in_proj_xy): Linear(in_features=256, out_features=2048, bias=False)
                        (act): SiLU()
                        (x_proj_f): Linear(in_features=512, out_features=144, bias=False)
                        (x_proj_b): Linear(in_features=512, out_features=144, bias=False)
                        (dt_proj_f): Linear(in_features=16, out_features=512, bias=True)
                        (dt_proj_b): Linear(in_features=16, out_features=512, bias=True)
                        (act_xy): SiLU()
                        (x_proj_f_xy): Linear(in_features=512, out_features=144, bias=False)
                        (x_proj_b_xy): Linear(in_features=512, out_features=144, bias=False)
                        (dt_proj_f_xy): Linear(in_features=16, out_features=512, bias=True)
                        (dt_proj_b_xy): Linear(in_features=16, out_features=512, bias=True)
                        (conv1d_x_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_x_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_x_xy_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_xy_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_x_xy_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_xy_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (out_proj): Linear(in_features=2048, out_features=256, bias=False)
                        (global_proj): Linear(in_features=2048, out_features=2048, bias=True)
                      )
                      (dropout): Identity()
                      (norm): RMSNorm()
                      (mlp): MLP(
                        (gate_proj): Linear(in_features=256, out_features=1024, bias=False)
                        (up_proj): Linear(in_features=256, out_features=1024, bias=False)
                        (down_proj): Linear(in_features=1024, out_features=256, bias=False)
                        (act_fn): SiLU()
                      )
                      (mlp_norm): RMSNorm()
                    )
                    (1): ModuleDict(
                      (norm_before): RMSNorm()
                      (mamba): DSSMamba(
                        (in_proj): Linear(in_features=256, out_features=2048, bias=False)
                        (in_proj_xy): Linear(in_features=256, out_features=2048, bias=False)
                        (act): SiLU()
                        (x_proj_f): Linear(in_features=512, out_features=144, bias=False)
                        (x_proj_b): Linear(in_features=512, out_features=144, bias=False)
                        (dt_proj_f): Linear(in_features=16, out_features=512, bias=True)
                        (dt_proj_b): Linear(in_features=16, out_features=512, bias=True)
                        (act_xy): SiLU()
                        (x_proj_f_xy): Linear(in_features=512, out_features=144, bias=False)
                        (x_proj_b_xy): Linear(in_features=512, out_features=144, bias=False)
                        (dt_proj_f_xy): Linear(in_features=16, out_features=512, bias=True)
                        (dt_proj_b_xy): Linear(in_features=16, out_features=512, bias=True)
                        (conv1d_x_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_x_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_x_xy_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_xy_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_x_xy_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_xy_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (out_proj): Linear(in_features=2048, out_features=256, bias=False)
                        (global_proj): Linear(in_features=2048, out_features=2048, bias=True)
                      )
                      (dropout): DropPath(drop_prob=0.300)
                      (norm): RMSNorm()
                      (mlp): MLP(
                        (gate_proj): Linear(in_features=256, out_features=1024, bias=False)
                        (up_proj): Linear(in_features=256, out_features=1024, bias=False)
                        (down_proj): Linear(in_features=1024, out_features=256, bias=False)
                        (act_fn): SiLU()
                      )
                      (mlp_norm): Identity()
                    )
                  )
                  (rope): RotaryEmbedding()
                )
                (3): DropPath(drop_prob=0.100)
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
                (img_attention_weights): Linear(in_features=256, out_features=24, bias=True)
                (img_output_proj): Linear(in_features=256, out_features=256, bias=True)
                (position_encoder): Sequential(
                  (0): Linear(in_features=3, out_features=256, bias=True)
                  (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  (2): ReLU(inplace=True)
                  (3): Linear(in_features=256, out_features=256, bias=True)
                  (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  (5): ReLU(inplace=True)
                )
                (weight_dropout): Dropout(p=0.0, inplace=False)
                (modality_fusion_layer): Sequential(
                  (0): Linear(in_features=512, out_features=256, bias=True)
                  (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  (2): ReLU()
                  (3): Linear(in_features=256, out_features=256, bias=True)
                  (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                )
                (camera_mixer): LidarCameraFusionMambaBlock(
                  (layers): ModuleList(
                    (0): LidarCameraFusionMambaV2(
                      (activation_fn): SiLU()
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (conv1d_h2t): Conv1d(512, 512, kernel_size=(4,), stride=(1,), padding=(3,), groups=512)
                      (x_proj_h2t): Linear(in_features=512, out_features=48, bias=False)
                      (dt_proj_h2t): Linear(in_features=16, out_features=512, bias=True)
                      (conv1d_t2h): Conv1d(512, 512, kernel_size=(4,), stride=(1,), padding=(3,), groups=512)
                      (x_proj_t2h): Linear(in_features=512, out_features=48, bias=False)
                      (dt_proj_t2h): Linear(in_features=16, out_features=512, bias=True)
                      (lidar_guidance_proj): Linear(in_features=512, out_features=512, bias=True)
                      (out_proj): Linear(in_features=512, out_features=256, bias=False)
                    )
                    (1): LidarCameraFusionMambaV2(
                      (activation_fn): SiLU()
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (conv1d_h2t): Conv1d(512, 512, kernel_size=(4,), stride=(1,), padding=(3,), groups=512)
                      (x_proj_h2t): Linear(in_features=512, out_features=48, bias=False)
                      (dt_proj_h2t): Linear(in_features=16, out_features=512, bias=True)
                      (conv1d_t2h): Conv1d(512, 512, kernel_size=(4,), stride=(1,), padding=(3,), groups=512)
                      (x_proj_t2h): Linear(in_features=512, out_features=48, bias=False)
                      (dt_proj_t2h): Linear(in_features=16, out_features=512, bias=True)
                      (lidar_guidance_proj): Linear(in_features=512, out_features=512, bias=True)
                      (out_proj): Linear(in_features=512, out_features=256, bias=False)
                    )
                  )
                  (norm): ModuleList(
                    (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                    (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  )
                  (dropout): ModuleList(
                    (0): DropPath(drop_prob=0.100)
                    (1): DropPath(drop_prob=0.100)
                  )
                )
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (4): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): ModuleList(
                (0): MultiheadAttention(
                  (attn): MultiheadAttention(
                    (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                  )
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (dropout_layer): Dropout(p=0.1, inplace=False)
                )
                (1): RMSNorm()
                (2): DSS(
                  (layers): ModuleList(
                    (0): ModuleDict(
                      (norm_before): RMSNorm()
                      (mamba): DSSMamba(
                        (in_proj): Linear(in_features=256, out_features=2048, bias=False)
                        (in_proj_xy): Linear(in_features=256, out_features=2048, bias=False)
                        (act): SiLU()
                        (x_proj_f): Linear(in_features=512, out_features=144, bias=False)
                        (x_proj_b): Linear(in_features=512, out_features=144, bias=False)
                        (dt_proj_f): Linear(in_features=16, out_features=512, bias=True)
                        (dt_proj_b): Linear(in_features=16, out_features=512, bias=True)
                        (act_xy): SiLU()
                        (x_proj_f_xy): Linear(in_features=512, out_features=144, bias=False)
                        (x_proj_b_xy): Linear(in_features=512, out_features=144, bias=False)
                        (dt_proj_f_xy): Linear(in_features=16, out_features=512, bias=True)
                        (dt_proj_b_xy): Linear(in_features=16, out_features=512, bias=True)
                        (conv1d_x_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_x_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_x_xy_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_xy_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_x_xy_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_xy_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (out_proj): Linear(in_features=2048, out_features=256, bias=False)
                        (global_proj): Linear(in_features=2048, out_features=2048, bias=True)
                      )
                      (dropout): Identity()
                      (norm): RMSNorm()
                      (mlp): MLP(
                        (gate_proj): Linear(in_features=256, out_features=1024, bias=False)
                        (up_proj): Linear(in_features=256, out_features=1024, bias=False)
                        (down_proj): Linear(in_features=1024, out_features=256, bias=False)
                        (act_fn): SiLU()
                      )
                      (mlp_norm): RMSNorm()
                    )
                    (1): ModuleDict(
                      (norm_before): RMSNorm()
                      (mamba): DSSMamba(
                        (in_proj): Linear(in_features=256, out_features=2048, bias=False)
                        (in_proj_xy): Linear(in_features=256, out_features=2048, bias=False)
                        (act): SiLU()
                        (x_proj_f): Linear(in_features=512, out_features=144, bias=False)
                        (x_proj_b): Linear(in_features=512, out_features=144, bias=False)
                        (dt_proj_f): Linear(in_features=16, out_features=512, bias=True)
                        (dt_proj_b): Linear(in_features=16, out_features=512, bias=True)
                        (act_xy): SiLU()
                        (x_proj_f_xy): Linear(in_features=512, out_features=144, bias=False)
                        (x_proj_b_xy): Linear(in_features=512, out_features=144, bias=False)
                        (dt_proj_f_xy): Linear(in_features=16, out_features=512, bias=True)
                        (dt_proj_b_xy): Linear(in_features=16, out_features=512, bias=True)
                        (conv1d_x_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_x_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_x_xy_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_xy_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_x_xy_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_xy_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (out_proj): Linear(in_features=2048, out_features=256, bias=False)
                        (global_proj): Linear(in_features=2048, out_features=2048, bias=True)
                      )
                      (dropout): DropPath(drop_prob=0.300)
                      (norm): RMSNorm()
                      (mlp): MLP(
                        (gate_proj): Linear(in_features=256, out_features=1024, bias=False)
                        (up_proj): Linear(in_features=256, out_features=1024, bias=False)
                        (down_proj): Linear(in_features=1024, out_features=256, bias=False)
                        (act_fn): SiLU()
                      )
                      (mlp_norm): Identity()
                    )
                  )
                  (rope): RotaryEmbedding()
                )
                (3): DropPath(drop_prob=0.100)
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
                (img_attention_weights): Linear(in_features=256, out_features=24, bias=True)
                (img_output_proj): Linear(in_features=256, out_features=256, bias=True)
                (position_encoder): Sequential(
                  (0): Linear(in_features=3, out_features=256, bias=True)
                  (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  (2): ReLU(inplace=True)
                  (3): Linear(in_features=256, out_features=256, bias=True)
                  (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  (5): ReLU(inplace=True)
                )
                (weight_dropout): Dropout(p=0.0, inplace=False)
                (modality_fusion_layer): Sequential(
                  (0): Linear(in_features=512, out_features=256, bias=True)
                  (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  (2): ReLU()
                  (3): Linear(in_features=256, out_features=256, bias=True)
                  (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                )
                (camera_mixer): LidarCameraFusionMambaBlock(
                  (layers): ModuleList(
                    (0): LidarCameraFusionMambaV2(
                      (activation_fn): SiLU()
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (conv1d_h2t): Conv1d(512, 512, kernel_size=(4,), stride=(1,), padding=(3,), groups=512)
                      (x_proj_h2t): Linear(in_features=512, out_features=48, bias=False)
                      (dt_proj_h2t): Linear(in_features=16, out_features=512, bias=True)
                      (conv1d_t2h): Conv1d(512, 512, kernel_size=(4,), stride=(1,), padding=(3,), groups=512)
                      (x_proj_t2h): Linear(in_features=512, out_features=48, bias=False)
                      (dt_proj_t2h): Linear(in_features=16, out_features=512, bias=True)
                      (lidar_guidance_proj): Linear(in_features=512, out_features=512, bias=True)
                      (out_proj): Linear(in_features=512, out_features=256, bias=False)
                    )
                    (1): LidarCameraFusionMambaV2(
                      (activation_fn): SiLU()
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (conv1d_h2t): Conv1d(512, 512, kernel_size=(4,), stride=(1,), padding=(3,), groups=512)
                      (x_proj_h2t): Linear(in_features=512, out_features=48, bias=False)
                      (dt_proj_h2t): Linear(in_features=16, out_features=512, bias=True)
                      (conv1d_t2h): Conv1d(512, 512, kernel_size=(4,), stride=(1,), padding=(3,), groups=512)
                      (x_proj_t2h): Linear(in_features=512, out_features=48, bias=False)
                      (dt_proj_t2h): Linear(in_features=16, out_features=512, bias=True)
                      (lidar_guidance_proj): Linear(in_features=512, out_features=512, bias=True)
                      (out_proj): Linear(in_features=512, out_features=256, bias=False)
                    )
                  )
                  (norm): ModuleList(
                    (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                    (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  )
                  (dropout): ModuleList(
                    (0): DropPath(drop_prob=0.100)
                    (1): DropPath(drop_prob=0.100)
                  )
                )
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (5): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): ModuleList(
                (0): MultiheadAttention(
                  (attn): MultiheadAttention(
                    (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                  )
                  (proj_drop): Dropout(p=0.0, inplace=False)
                  (dropout_layer): Dropout(p=0.1, inplace=False)
                )
                (1): RMSNorm()
                (2): DSS(
                  (layers): ModuleList(
                    (0): ModuleDict(
                      (norm_before): RMSNorm()
                      (mamba): DSSMamba(
                        (in_proj): Linear(in_features=256, out_features=2048, bias=False)
                        (in_proj_xy): Linear(in_features=256, out_features=2048, bias=False)
                        (act): SiLU()
                        (x_proj_f): Linear(in_features=512, out_features=144, bias=False)
                        (x_proj_b): Linear(in_features=512, out_features=144, bias=False)
                        (dt_proj_f): Linear(in_features=16, out_features=512, bias=True)
                        (dt_proj_b): Linear(in_features=16, out_features=512, bias=True)
                        (act_xy): SiLU()
                        (x_proj_f_xy): Linear(in_features=512, out_features=144, bias=False)
                        (x_proj_b_xy): Linear(in_features=512, out_features=144, bias=False)
                        (dt_proj_f_xy): Linear(in_features=16, out_features=512, bias=True)
                        (dt_proj_b_xy): Linear(in_features=16, out_features=512, bias=True)
                        (conv1d_x_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_x_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_x_xy_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_xy_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_x_xy_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_xy_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (out_proj): Linear(in_features=2048, out_features=256, bias=False)
                        (global_proj): Linear(in_features=2048, out_features=2048, bias=True)
                      )
                      (dropout): Identity()
                      (norm): RMSNorm()
                      (mlp): MLP(
                        (gate_proj): Linear(in_features=256, out_features=1024, bias=False)
                        (up_proj): Linear(in_features=256, out_features=1024, bias=False)
                        (down_proj): Linear(in_features=1024, out_features=256, bias=False)
                        (act_fn): SiLU()
                      )
                      (mlp_norm): RMSNorm()
                    )
                    (1): ModuleDict(
                      (norm_before): RMSNorm()
                      (mamba): DSSMamba(
                        (in_proj): Linear(in_features=256, out_features=2048, bias=False)
                        (in_proj_xy): Linear(in_features=256, out_features=2048, bias=False)
                        (act): SiLU()
                        (x_proj_f): Linear(in_features=512, out_features=144, bias=False)
                        (x_proj_b): Linear(in_features=512, out_features=144, bias=False)
                        (dt_proj_f): Linear(in_features=16, out_features=512, bias=True)
                        (dt_proj_b): Linear(in_features=16, out_features=512, bias=True)
                        (act_xy): SiLU()
                        (x_proj_f_xy): Linear(in_features=512, out_features=144, bias=False)
                        (x_proj_b_xy): Linear(in_features=512, out_features=144, bias=False)
                        (dt_proj_f_xy): Linear(in_features=16, out_features=512, bias=True)
                        (dt_proj_b_xy): Linear(in_features=16, out_features=512, bias=True)
                        (conv1d_x_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_x_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_x_xy_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_xy_f): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_x_xy_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (conv1d_z_xy_b): Conv1d(512, 512, kernel_size=(4,), stride=(1,), groups=512)
                        (out_proj): Linear(in_features=2048, out_features=256, bias=False)
                        (global_proj): Linear(in_features=2048, out_features=2048, bias=True)
                      )
                      (dropout): DropPath(drop_prob=0.300)
                      (norm): RMSNorm()
                      (mlp): MLP(
                        (gate_proj): Linear(in_features=256, out_features=1024, bias=False)
                        (up_proj): Linear(in_features=256, out_features=1024, bias=False)
                        (down_proj): Linear(in_features=1024, out_features=256, bias=False)
                        (act_fn): SiLU()
                      )
                      (mlp_norm): Identity()
                    )
                  )
                  (rope): RotaryEmbedding()
                )
                (3): DropPath(drop_prob=0.100)
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
                (img_attention_weights): Linear(in_features=256, out_features=24, bias=True)
                (img_output_proj): Linear(in_features=256, out_features=256, bias=True)
                (position_encoder): Sequential(
                  (0): Linear(in_features=3, out_features=256, bias=True)
                  (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  (2): ReLU(inplace=True)
                  (3): Linear(in_features=256, out_features=256, bias=True)
                  (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  (5): ReLU(inplace=True)
                )
                (weight_dropout): Dropout(p=0.0, inplace=False)
                (modality_fusion_layer): Sequential(
                  (0): Linear(in_features=512, out_features=256, bias=True)
                  (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  (2): ReLU()
                  (3): Linear(in_features=256, out_features=256, bias=True)
                  (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                )
                (camera_mixer): LidarCameraFusionMambaBlock(
                  (layers): ModuleList(
                    (0): LidarCameraFusionMambaV2(
                      (activation_fn): SiLU()
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (conv1d_h2t): Conv1d(512, 512, kernel_size=(4,), stride=(1,), padding=(3,), groups=512)
                      (x_proj_h2t): Linear(in_features=512, out_features=48, bias=False)
                      (dt_proj_h2t): Linear(in_features=16, out_features=512, bias=True)
                      (conv1d_t2h): Conv1d(512, 512, kernel_size=(4,), stride=(1,), padding=(3,), groups=512)
                      (x_proj_t2h): Linear(in_features=512, out_features=48, bias=False)
                      (dt_proj_t2h): Linear(in_features=16, out_features=512, bias=True)
                      (lidar_guidance_proj): Linear(in_features=512, out_features=512, bias=True)
                      (out_proj): Linear(in_features=512, out_features=256, bias=False)
                    )
                    (1): LidarCameraFusionMambaV2(
                      (activation_fn): SiLU()
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (conv1d_h2t): Conv1d(512, 512, kernel_size=(4,), stride=(1,), padding=(3,), groups=512)
                      (x_proj_h2t): Linear(in_features=512, out_features=48, bias=False)
                      (dt_proj_h2t): Linear(in_features=16, out_features=512, bias=True)
                      (conv1d_t2h): Conv1d(512, 512, kernel_size=(4,), stride=(1,), padding=(3,), groups=512)
                      (x_proj_t2h): Linear(in_features=512, out_features=48, bias=False)
                      (dt_proj_t2h): Linear(in_features=16, out_features=512, bias=True)
                      (lidar_guidance_proj): Linear(in_features=512, out_features=512, bias=True)
                      (out_proj): Linear(in_features=512, out_features=256, bias=False)
                    )
                  )
                  (norm): ModuleList(
                    (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                    (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  )
                  (dropout): ModuleList(
                    (0): DropPath(drop_prob=0.100)
                    (1): DropPath(drop_prob=0.100)
                  )
                )
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
        (query_scale): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=256, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
          )
        )
        (ref_point_head): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=384, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
          )
        )
      )
    )
    (cls_branches): ModuleList(
      (0): MLP(
        (gate_proj): Linear(in_features=256, out_features=1024, bias=False)
        (up_proj): Linear(in_features=256, out_features=1024, bias=False)
        (act_fn): SiLU()
        (down_proj): Linear(in_features=1024, out_features=10, bias=True)
      )
      (1): MLP(
        (gate_proj): Linear(in_features=256, out_features=1024, bias=False)
        (up_proj): Linear(in_features=256, out_features=1024, bias=False)
        (act_fn): SiLU()
        (down_proj): Linear(in_features=1024, out_features=10, bias=True)
      )
      (2): MLP(
        (gate_proj): Linear(in_features=256, out_features=1024, bias=False)
        (up_proj): Linear(in_features=256, out_features=1024, bias=False)
        (act_fn): SiLU()
        (down_proj): Linear(in_features=1024, out_features=10, bias=True)
      )
      (3): MLP(
        (gate_proj): Linear(in_features=256, out_features=1024, bias=False)
        (up_proj): Linear(in_features=256, out_features=1024, bias=False)
        (act_fn): SiLU()
        (down_proj): Linear(in_features=1024, out_features=10, bias=True)
      )
      (4): MLP(
        (gate_proj): Linear(in_features=256, out_features=1024, bias=False)
        (up_proj): Linear(in_features=256, out_features=1024, bias=False)
        (act_fn): SiLU()
        (down_proj): Linear(in_features=1024, out_features=10, bias=True)
      )
      (5): MLP(
        (gate_proj): Linear(in_features=256, out_features=1024, bias=False)
        (up_proj): Linear(in_features=256, out_features=1024, bias=False)
        (act_fn): SiLU()
        (down_proj): Linear(in_features=1024, out_features=10, bias=True)
      )
    )
    (reg_branches): ModuleList(
      (0): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (1): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (2): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (3): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (4): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (5): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
    )
    (tgt_embed): Embedding(900, 256)
    (refpoint_embed): Embedding(900, 3)
  )
  (img_backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
    )
    (layer2): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): SyncBatchNorm(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
    )
    (layer3): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (6): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (7): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (8): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (9): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (10): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (11): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (12): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (13): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (14): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (15): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (16): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (17): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (18): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (19): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (20): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (21): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (22): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): SyncBatchNorm(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
    )
    (layer4): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn1): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(512, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(512, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(512, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): SyncBatchNorm(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): SyncBatchNorm(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
    )
  )
  init_cfg=[{'type': 'Kaiming', 'layer': 'Conv2d'}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
  (img_neck): FPN(
    (lateral_convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): ConvModule(
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): ConvModule(
        (conv): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (fpn_convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (1): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (2): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (3): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
    )
  )
  init_cfg={'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
)
2025-06-18 11:25:41,288 - mmdet - INFO - load checkpoint from local path: pretrained/hedres_forced.pth
2025-06-18 11:26:02,009 - mmdet - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: pts_bbox_head.code_weights, pts_bbox_head.query_embedding.weight, pts_bbox_head.aux_head.shared_conv.conv.weight, pts_bbox_head.aux_head.shared_conv.bn.weight, pts_bbox_head.aux_head.shared_conv.bn.bias, pts_bbox_head.aux_head.shared_conv.bn.running_mean, pts_bbox_head.aux_head.shared_conv.bn.running_var, pts_bbox_head.aux_head.shared_conv.bn.num_batches_tracked, pts_bbox_head.aux_head.task_heads.0.reg.0.conv.weight, pts_bbox_head.aux_head.task_heads.0.reg.0.bn.weight, pts_bbox_head.aux_head.task_heads.0.reg.0.bn.bias, pts_bbox_head.aux_head.task_heads.0.reg.0.bn.running_mean, pts_bbox_head.aux_head.task_heads.0.reg.0.bn.running_var, pts_bbox_head.aux_head.task_heads.0.reg.0.bn.num_batches_tracked, pts_bbox_head.aux_head.task_heads.0.reg.1.weight, pts_bbox_head.aux_head.task_heads.0.reg.1.bias, pts_bbox_head.aux_head.task_heads.0.height.0.conv.weight, pts_bbox_head.aux_head.task_heads.0.height.0.bn.weight, pts_bbox_head.aux_head.task_heads.0.height.0.bn.bias, pts_bbox_head.aux_head.task_heads.0.height.0.bn.running_mean, pts_bbox_head.aux_head.task_heads.0.height.0.bn.running_var, pts_bbox_head.aux_head.task_heads.0.height.0.bn.num_batches_tracked, pts_bbox_head.aux_head.task_heads.0.height.1.weight, pts_bbox_head.aux_head.task_heads.0.height.1.bias, pts_bbox_head.aux_head.task_heads.0.dim.0.conv.weight, pts_bbox_head.aux_head.task_heads.0.dim.0.bn.weight, pts_bbox_head.aux_head.task_heads.0.dim.0.bn.bias, pts_bbox_head.aux_head.task_heads.0.dim.0.bn.running_mean, pts_bbox_head.aux_head.task_heads.0.dim.0.bn.running_var, pts_bbox_head.aux_head.task_heads.0.dim.0.bn.num_batches_tracked, pts_bbox_head.aux_head.task_heads.0.dim.1.weight, pts_bbox_head.aux_head.task_heads.0.dim.1.bias, pts_bbox_head.aux_head.task_heads.0.rot.0.conv.weight, pts_bbox_head.aux_head.task_heads.0.rot.0.bn.weight, pts_bbox_head.aux_head.task_heads.0.rot.0.bn.bias, pts_bbox_head.aux_head.task_heads.0.rot.0.bn.running_mean, pts_bbox_head.aux_head.task_heads.0.rot.0.bn.running_var, pts_bbox_head.aux_head.task_heads.0.rot.0.bn.num_batches_tracked, pts_bbox_head.aux_head.task_heads.0.rot.1.weight, pts_bbox_head.aux_head.task_heads.0.rot.1.bias, pts_bbox_head.aux_head.task_heads.0.vel.0.conv.weight, pts_bbox_head.aux_head.task_heads.0.vel.0.bn.weight, pts_bbox_head.aux_head.task_heads.0.vel.0.bn.bias, pts_bbox_head.aux_head.task_heads.0.vel.0.bn.running_mean, pts_bbox_head.aux_head.task_heads.0.vel.0.bn.running_var, pts_bbox_head.aux_head.task_heads.0.vel.0.bn.num_batches_tracked, pts_bbox_head.aux_head.task_heads.0.vel.1.weight, pts_bbox_head.aux_head.task_heads.0.vel.1.bias, pts_bbox_head.aux_head.task_heads.0.heatmap.0.conv.weight, pts_bbox_head.aux_head.task_heads.0.heatmap.0.bn.weight, pts_bbox_head.aux_head.task_heads.0.heatmap.0.bn.bias, pts_bbox_head.aux_head.task_heads.0.heatmap.0.bn.running_mean, pts_bbox_head.aux_head.task_heads.0.heatmap.0.bn.running_var, pts_bbox_head.aux_head.task_heads.0.heatmap.0.bn.num_batches_tracked, pts_bbox_head.aux_head.task_heads.0.heatmap.1.weight, pts_bbox_head.aux_head.task_heads.0.heatmap.1.bias, pts_bbox_head.aux_head.task_heads.1.reg.0.conv.weight, pts_bbox_head.aux_head.task_heads.1.reg.0.bn.weight, pts_bbox_head.aux_head.task_heads.1.reg.0.bn.bias, pts_bbox_head.aux_head.task_heads.1.reg.0.bn.running_mean, pts_bbox_head.aux_head.task_heads.1.reg.0.bn.running_var, pts_bbox_head.aux_head.task_heads.1.reg.0.bn.num_batches_tracked, pts_bbox_head.aux_head.task_heads.1.reg.1.weight, pts_bbox_head.aux_head.task_heads.1.reg.1.bias, pts_bbox_head.aux_head.task_heads.1.height.0.conv.weight, pts_bbox_head.aux_head.task_heads.1.height.0.bn.weight, pts_bbox_head.aux_head.task_heads.1.height.0.bn.bias, pts_bbox_head.aux_head.task_heads.1.height.0.bn.running_mean, pts_bbox_head.aux_head.task_heads.1.height.0.bn.running_var, pts_bbox_head.aux_head.task_heads.1.height.0.bn.num_batches_tracked, pts_bbox_head.aux_head.task_heads.1.height.1.weight, pts_bbox_head.aux_head.task_heads.1.height.1.bias, pts_bbox_head.aux_head.task_heads.1.dim.0.conv.weight, pts_bbox_head.aux_head.task_heads.1.dim.0.bn.weight, pts_bbox_head.aux_head.task_heads.1.dim.0.bn.bias, pts_bbox_head.aux_head.task_heads.1.dim.0.bn.running_mean, pts_bbox_head.aux_head.task_heads.1.dim.0.bn.running_var, pts_bbox_head.aux_head.task_heads.1.dim.0.bn.num_batches_tracked, pts_bbox_head.aux_head.task_heads.1.dim.1.weight, pts_bbox_head.aux_head.task_heads.1.dim.1.bias, pts_bbox_head.aux_head.task_heads.1.rot.0.conv.weight, pts_bbox_head.aux_head.task_heads.1.rot.0.bn.weight, pts_bbox_head.aux_head.task_heads.1.rot.0.bn.bias, pts_bbox_head.aux_head.task_heads.1.rot.0.bn.running_mean, pts_bbox_head.aux_head.task_heads.1.rot.0.bn.running_var, pts_bbox_head.aux_head.task_heads.1.rot.0.bn.num_batches_tracked, pts_bbox_head.aux_head.task_heads.1.rot.1.weight, pts_bbox_head.aux_head.task_heads.1.rot.1.bias, pts_bbox_head.aux_head.task_heads.1.vel.0.conv.weight, pts_bbox_head.aux_head.task_heads.1.vel.0.bn.weight, pts_bbox_head.aux_head.task_heads.1.vel.0.bn.bias, pts_bbox_head.aux_head.task_heads.1.vel.0.bn.running_mean, pts_bbox_head.aux_head.task_heads.1.vel.0.bn.running_var, pts_bbox_head.aux_head.task_heads.1.vel.0.bn.num_batches_tracked, pts_bbox_head.aux_head.task_heads.1.vel.1.weight, pts_bbox_head.aux_head.task_heads.1.vel.1.bias, pts_bbox_head.aux_head.task_heads.1.heatmap.0.conv.weight, pts_bbox_head.aux_head.task_heads.1.heatmap.0.bn.weight, pts_bbox_head.aux_head.task_heads.1.heatmap.0.bn.bias, pts_bbox_head.aux_head.task_heads.1.heatmap.0.bn.running_mean, pts_bbox_head.aux_head.task_heads.1.heatmap.0.bn.running_var, pts_bbox_head.aux_head.task_heads.1.heatmap.0.bn.num_batches_tracked, pts_bbox_head.aux_head.task_heads.1.heatmap.1.weight, pts_bbox_head.aux_head.task_heads.1.heatmap.1.bias, pts_bbox_head.aux_head.task_heads.2.reg.0.conv.weight, pts_bbox_head.aux_head.task_heads.2.reg.0.bn.weight, pts_bbox_head.aux_head.task_heads.2.reg.0.bn.bias, pts_bbox_head.aux_head.task_heads.2.reg.0.bn.running_mean, pts_bbox_head.aux_head.task_heads.2.reg.0.bn.running_var, pts_bbox_head.aux_head.task_heads.2.reg.0.bn.num_batches_tracked, pts_bbox_head.aux_head.task_heads.2.reg.1.weight, pts_bbox_head.aux_head.task_heads.2.reg.1.bias, pts_bbox_head.aux_head.task_heads.2.height.0.conv.weight, pts_bbox_head.aux_head.task_heads.2.height.0.bn.weight, pts_bbox_head.aux_head.task_heads.2.height.0.bn.bias, pts_bbox_head.aux_head.task_heads.2.height.0.bn.running_mean, pts_bbox_head.aux_head.task_heads.2.height.0.bn.running_var, pts_bbox_head.aux_head.task_heads.2.height.0.bn.num_batches_tracked, pts_bbox_head.aux_head.task_heads.2.height.1.weight, pts_bbox_head.aux_head.task_heads.2.height.1.bias, pts_bbox_head.aux_head.task_heads.2.dim.0.conv.weight, pts_bbox_head.aux_head.task_heads.2.dim.0.bn.weight, pts_bbox_head.aux_head.task_heads.2.dim.0.bn.bias, pts_bbox_head.aux_head.task_heads.2.dim.0.bn.running_mean, pts_bbox_head.aux_head.task_heads.2.dim.0.bn.running_var, pts_bbox_head.aux_head.task_heads.2.dim.0.bn.num_batches_tracked, pts_bbox_head.aux_head.task_heads.2.dim.1.weight, pts_bbox_head.aux_head.task_heads.2.dim.1.bias, pts_bbox_head.aux_head.task_heads.2.rot.0.conv.weight, pts_bbox_head.aux_head.task_heads.2.rot.0.bn.weight, pts_bbox_head.aux_head.task_heads.2.rot.0.bn.bias, pts_bbox_head.aux_head.task_heads.2.rot.0.bn.running_mean, pts_bbox_head.aux_head.task_heads.2.rot.0.bn.running_var, pts_bbox_head.aux_head.task_heads.2.rot.0.bn.num_batches_tracked, pts_bbox_head.aux_head.task_heads.2.rot.1.weight, pts_bbox_head.aux_head.task_heads.2.rot.1.bias, pts_bbox_head.aux_head.task_heads.2.vel.0.conv.weight, pts_bbox_head.aux_head.task_heads.2.vel.0.bn.weight, pts_bbox_head.aux_head.task_heads.2.vel.0.bn.bias, pts_bbox_head.aux_head.task_heads.2.vel.0.bn.running_mean, pts_bbox_head.aux_head.task_heads.2.vel.0.bn.running_var, pts_bbox_head.aux_head.task_heads.2.vel.0.bn.num_batches_tracked, pts_bbox_head.aux_head.task_heads.2.vel.1.weight, pts_bbox_head.aux_head.task_heads.2.vel.1.bias, pts_bbox_head.aux_head.task_heads.2.heatmap.0.conv.weight, pts_bbox_head.aux_head.task_heads.2.heatmap.0.bn.weight, pts_bbox_head.aux_head.task_heads.2.heatmap.0.bn.bias, pts_bbox_head.aux_head.task_heads.2.heatmap.0.bn.running_mean, pts_bbox_head.aux_head.task_heads.2.heatmap.0.bn.running_var, pts_bbox_head.aux_head.task_heads.2.heatmap.0.bn.num_batches_tracked, pts_bbox_head.aux_head.task_heads.2.heatmap.1.weight, pts_bbox_head.aux_head.task_heads.2.heatmap.1.bias, pts_bbox_head.aux_head.task_heads.3.reg.0.conv.weight, pts_bbox_head.aux_head.task_heads.3.reg.0.bn.weight, pts_bbox_head.aux_head.task_heads.3.reg.0.bn.bias, pts_bbox_head.aux_head.task_heads.3.reg.0.bn.running_mean, pts_bbox_head.aux_head.task_heads.3.reg.0.bn.running_var, pts_bbox_head.aux_head.task_heads.3.reg.0.bn.num_batches_tracked, pts_bbox_head.aux_head.task_heads.3.reg.1.weight, pts_bbox_head.aux_head.task_heads.3.reg.1.bias, pts_bbox_head.aux_head.task_heads.3.height.0.conv.weight, pts_bbox_head.aux_head.task_heads.3.height.0.bn.weight, pts_bbox_head.aux_head.task_heads.3.height.0.bn.bias, pts_bbox_head.aux_head.task_heads.3.height.0.bn.running_mean, pts_bbox_head.aux_head.task_heads.3.height.0.bn.running_var, pts_bbox_head.aux_head.task_heads.3.height.0.bn.num_batches_tracked, pts_bbox_head.aux_head.task_heads.3.height.1.weight, pts_bbox_head.aux_head.task_heads.3.height.1.bias, pts_bbox_head.aux_head.task_heads.3.dim.0.conv.weight, pts_bbox_head.aux_head.task_heads.3.dim.0.bn.weight, pts_bbox_head.aux_head.task_heads.3.dim.0.bn.bias, pts_bbox_head.aux_head.task_heads.3.dim.0.bn.running_mean, pts_bbox_head.aux_head.task_heads.3.dim.0.bn.running_var, pts_bbox_head.aux_head.task_heads.3.dim.0.bn.num_batches_tracked, pts_bbox_head.aux_head.task_heads.3.dim.1.weight, pts_bbox_head.aux_head.task_heads.3.dim.1.bias, pts_bbox_head.aux_head.task_heads.3.rot.0.conv.weight, pts_bbox_head.aux_head.task_heads.3.rot.0.bn.weight, pts_bbox_head.aux_head.task_heads.3.rot.0.bn.bias, pts_bbox_head.aux_head.task_heads.3.rot.0.bn.running_mean, pts_bbox_head.aux_head.task_heads.3.rot.0.bn.running_var, pts_bbox_head.aux_head.task_heads.3.rot.0.bn.num_batches_tracked, pts_bbox_head.aux_head.task_heads.3.rot.1.weight, pts_bbox_head.aux_head.task_heads.3.rot.1.bias, pts_bbox_head.aux_head.task_heads.3.vel.0.conv.weight, pts_bbox_head.aux_head.task_heads.3.vel.0.bn.weight, pts_bbox_head.aux_head.task_heads.3.vel.0.bn.bias, pts_bbox_head.aux_head.task_heads.3.vel.0.bn.running_mean, pts_bbox_head.aux_head.task_heads.3.vel.0.bn.running_var, pts_bbox_head.aux_head.task_heads.3.vel.0.bn.num_batches_tracked, pts_bbox_head.aux_head.task_heads.3.vel.1.weight, pts_bbox_head.aux_head.task_heads.3.vel.1.bias, pts_bbox_head.aux_head.task_heads.3.heatmap.0.conv.weight, pts_bbox_head.aux_head.task_heads.3.heatmap.0.bn.weight, pts_bbox_head.aux_head.task_heads.3.heatmap.0.bn.bias, pts_bbox_head.aux_head.task_heads.3.heatmap.0.bn.running_mean, pts_bbox_head.aux_head.task_heads.3.heatmap.0.bn.running_var, pts_bbox_head.aux_head.task_heads.3.heatmap.0.bn.num_batches_tracked, pts_bbox_head.aux_head.task_heads.3.heatmap.1.weight, pts_bbox_head.aux_head.task_heads.3.heatmap.1.bias, pts_bbox_head.aux_head.task_heads.4.reg.0.conv.weight, pts_bbox_head.aux_head.task_heads.4.reg.0.bn.weight, pts_bbox_head.aux_head.task_heads.4.reg.0.bn.bias, pts_bbox_head.aux_head.task_heads.4.reg.0.bn.running_mean, pts_bbox_head.aux_head.task_heads.4.reg.0.bn.running_var, pts_bbox_head.aux_head.task_heads.4.reg.0.bn.num_batches_tracked, pts_bbox_head.aux_head.task_heads.4.reg.1.weight, pts_bbox_head.aux_head.task_heads.4.reg.1.bias, pts_bbox_head.aux_head.task_heads.4.height.0.conv.weight, pts_bbox_head.aux_head.task_heads.4.height.0.bn.weight, pts_bbox_head.aux_head.task_heads.4.height.0.bn.bias, pts_bbox_head.aux_head.task_heads.4.height.0.bn.running_mean, pts_bbox_head.aux_head.task_heads.4.height.0.bn.running_var, pts_bbox_head.aux_head.task_heads.4.height.0.bn.num_batches_tracked, pts_bbox_head.aux_head.task_heads.4.height.1.weight, pts_bbox_head.aux_head.task_heads.4.height.1.bias, pts_bbox_head.aux_head.task_heads.4.dim.0.conv.weight, pts_bbox_head.aux_head.task_heads.4.dim.0.bn.weight, pts_bbox_head.aux_head.task_heads.4.dim.0.bn.bias, pts_bbox_head.aux_head.task_heads.4.dim.0.bn.running_mean, pts_bbox_head.aux_head.task_heads.4.dim.0.bn.running_var, pts_bbox_head.aux_head.task_heads.4.dim.0.bn.num_batches_tracked, pts_bbox_head.aux_head.task_heads.4.dim.1.weight, pts_bbox_head.aux_head.task_heads.4.dim.1.bias, pts_bbox_head.aux_head.task_heads.4.rot.0.conv.weight, pts_bbox_head.aux_head.task_heads.4.rot.0.bn.weight, pts_bbox_head.aux_head.task_heads.4.rot.0.bn.bias, pts_bbox_head.aux_head.task_heads.4.rot.0.bn.running_mean, pts_bbox_head.aux_head.task_heads.4.rot.0.bn.running_var, pts_bbox_head.aux_head.task_heads.4.rot.0.bn.num_batches_tracked, pts_bbox_head.aux_head.task_heads.4.rot.1.weight, pts_bbox_head.aux_head.task_heads.4.rot.1.bias, pts_bbox_head.aux_head.task_heads.4.vel.0.conv.weight, pts_bbox_head.aux_head.task_heads.4.vel.0.bn.weight, pts_bbox_head.aux_head.task_heads.4.vel.0.bn.bias, pts_bbox_head.aux_head.task_heads.4.vel.0.bn.running_mean, pts_bbox_head.aux_head.task_heads.4.vel.0.bn.running_var, pts_bbox_head.aux_head.task_heads.4.vel.0.bn.num_batches_tracked, pts_bbox_head.aux_head.task_heads.4.vel.1.weight, pts_bbox_head.aux_head.task_heads.4.vel.1.bias, pts_bbox_head.aux_head.task_heads.4.heatmap.0.conv.weight, pts_bbox_head.aux_head.task_heads.4.heatmap.0.bn.weight, pts_bbox_head.aux_head.task_heads.4.heatmap.0.bn.bias, pts_bbox_head.aux_head.task_heads.4.heatmap.0.bn.running_mean, pts_bbox_head.aux_head.task_heads.4.heatmap.0.bn.running_var, pts_bbox_head.aux_head.task_heads.4.heatmap.0.bn.num_batches_tracked, pts_bbox_head.aux_head.task_heads.4.heatmap.1.weight, pts_bbox_head.aux_head.task_heads.4.heatmap.1.bias, pts_bbox_head.aux_head.task_heads.5.reg.0.conv.weight, pts_bbox_head.aux_head.task_heads.5.reg.0.bn.weight, pts_bbox_head.aux_head.task_heads.5.reg.0.bn.bias, pts_bbox_head.aux_head.task_heads.5.reg.0.bn.running_mean, pts_bbox_head.aux_head.task_heads.5.reg.0.bn.running_var, pts_bbox_head.aux_head.task_heads.5.reg.0.bn.num_batches_tracked, pts_bbox_head.aux_head.task_heads.5.reg.1.weight, pts_bbox_head.aux_head.task_heads.5.reg.1.bias, pts_bbox_head.aux_head.task_heads.5.height.0.conv.weight, pts_bbox_head.aux_head.task_heads.5.height.0.bn.weight, pts_bbox_head.aux_head.task_heads.5.height.0.bn.bias, pts_bbox_head.aux_head.task_heads.5.height.0.bn.running_mean, pts_bbox_head.aux_head.task_heads.5.height.0.bn.running_var, pts_bbox_head.aux_head.task_heads.5.height.0.bn.num_batches_tracked, pts_bbox_head.aux_head.task_heads.5.height.1.weight, pts_bbox_head.aux_head.task_heads.5.height.1.bias, pts_bbox_head.aux_head.task_heads.5.dim.0.conv.weight, pts_bbox_head.aux_head.task_heads.5.dim.0.bn.weight, pts_bbox_head.aux_head.task_heads.5.dim.0.bn.bias, pts_bbox_head.aux_head.task_heads.5.dim.0.bn.running_mean, pts_bbox_head.aux_head.task_heads.5.dim.0.bn.running_var, pts_bbox_head.aux_head.task_heads.5.dim.0.bn.num_batches_tracked, pts_bbox_head.aux_head.task_heads.5.dim.1.weight, pts_bbox_head.aux_head.task_heads.5.dim.1.bias, pts_bbox_head.aux_head.task_heads.5.rot.0.conv.weight, pts_bbox_head.aux_head.task_heads.5.rot.0.bn.weight, pts_bbox_head.aux_head.task_heads.5.rot.0.bn.bias, pts_bbox_head.aux_head.task_heads.5.rot.0.bn.running_mean, pts_bbox_head.aux_head.task_heads.5.rot.0.bn.running_var, pts_bbox_head.aux_head.task_heads.5.rot.0.bn.num_batches_tracked, pts_bbox_head.aux_head.task_heads.5.rot.1.weight, pts_bbox_head.aux_head.task_heads.5.rot.1.bias, pts_bbox_head.aux_head.task_heads.5.vel.0.conv.weight, pts_bbox_head.aux_head.task_heads.5.vel.0.bn.weight, pts_bbox_head.aux_head.task_heads.5.vel.0.bn.bias, pts_bbox_head.aux_head.task_heads.5.vel.0.bn.running_mean, pts_bbox_head.aux_head.task_heads.5.vel.0.bn.running_var, pts_bbox_head.aux_head.task_heads.5.vel.0.bn.num_batches_tracked, pts_bbox_head.aux_head.task_heads.5.vel.1.weight, pts_bbox_head.aux_head.task_heads.5.vel.1.bias, pts_bbox_head.aux_head.task_heads.5.heatmap.0.conv.weight, pts_bbox_head.aux_head.task_heads.5.heatmap.0.bn.weight, pts_bbox_head.aux_head.task_heads.5.heatmap.0.bn.bias, pts_bbox_head.aux_head.task_heads.5.heatmap.0.bn.running_mean, pts_bbox_head.aux_head.task_heads.5.heatmap.0.bn.running_var, pts_bbox_head.aux_head.task_heads.5.heatmap.0.bn.num_batches_tracked, pts_bbox_head.aux_head.task_heads.5.heatmap.1.weight, pts_bbox_head.aux_head.task_heads.5.heatmap.1.bias, pts_bbox_head.transformer.reference_points.weight, pts_bbox_head.transformer.reference_points.bias, pts_bbox_head.transformer.decoder.layers.0.attentions.0.attn.in_proj_weight, pts_bbox_head.transformer.decoder.layers.0.attentions.0.attn.in_proj_bias, pts_bbox_head.transformer.decoder.layers.0.attentions.0.attn.out_proj.weight, pts_bbox_head.transformer.decoder.layers.0.attentions.0.attn.out_proj.bias, pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.rope.inv_freq, pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.rope.cos_cached, pts_bbox_head.transformer.decoder.layers.0.attentions.0.2.rope.sin_cached, pts_bbox_head.transformer.decoder.layers.1.attentions.0.attn.in_proj_weight, pts_bbox_head.transformer.decoder.layers.1.attentions.0.attn.in_proj_bias, pts_bbox_head.transformer.decoder.layers.1.attentions.0.attn.out_proj.weight, pts_bbox_head.transformer.decoder.layers.1.attentions.0.attn.out_proj.bias, pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.rope.inv_freq, pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.rope.cos_cached, pts_bbox_head.transformer.decoder.layers.1.attentions.0.2.rope.sin_cached, pts_bbox_head.transformer.decoder.layers.2.attentions.0.attn.in_proj_weight, pts_bbox_head.transformer.decoder.layers.2.attentions.0.attn.in_proj_bias, pts_bbox_head.transformer.decoder.layers.2.attentions.0.attn.out_proj.weight, pts_bbox_head.transformer.decoder.layers.2.attentions.0.attn.out_proj.bias, pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.rope.inv_freq, pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.rope.cos_cached, pts_bbox_head.transformer.decoder.layers.2.attentions.0.2.rope.sin_cached, pts_bbox_head.transformer.decoder.layers.3.attentions.0.attn.in_proj_weight, pts_bbox_head.transformer.decoder.layers.3.attentions.0.attn.in_proj_bias, pts_bbox_head.transformer.decoder.layers.3.attentions.0.attn.out_proj.weight, pts_bbox_head.transformer.decoder.layers.3.attentions.0.attn.out_proj.bias, pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.rope.inv_freq, pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.rope.cos_cached, pts_bbox_head.transformer.decoder.layers.3.attentions.0.2.rope.sin_cached, pts_bbox_head.transformer.decoder.layers.4.attentions.0.attn.in_proj_weight, pts_bbox_head.transformer.decoder.layers.4.attentions.0.attn.in_proj_bias, pts_bbox_head.transformer.decoder.layers.4.attentions.0.attn.out_proj.weight, pts_bbox_head.transformer.decoder.layers.4.attentions.0.attn.out_proj.bias, pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.rope.inv_freq, pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.rope.cos_cached, pts_bbox_head.transformer.decoder.layers.4.attentions.0.2.rope.sin_cached, pts_bbox_head.transformer.decoder.layers.5.attentions.0.attn.in_proj_weight, pts_bbox_head.transformer.decoder.layers.5.attentions.0.attn.in_proj_bias, pts_bbox_head.transformer.decoder.layers.5.attentions.0.attn.out_proj.weight, pts_bbox_head.transformer.decoder.layers.5.attentions.0.attn.out_proj.bias, pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.rope.inv_freq, pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.rope.cos_cached, pts_bbox_head.transformer.decoder.layers.5.attentions.0.2.rope.sin_cached, pts_bbox_head.cls_branches.0.0.weight, pts_bbox_head.cls_branches.0.0.bias, pts_bbox_head.cls_branches.0.1.weight, pts_bbox_head.cls_branches.0.1.bias, pts_bbox_head.cls_branches.0.3.weight, pts_bbox_head.cls_branches.0.3.bias, pts_bbox_head.cls_branches.0.4.weight, pts_bbox_head.cls_branches.0.4.bias, pts_bbox_head.cls_branches.0.6.weight, pts_bbox_head.cls_branches.0.6.bias, pts_bbox_head.cls_branches.1.0.weight, pts_bbox_head.cls_branches.1.0.bias, pts_bbox_head.cls_branches.1.1.weight, pts_bbox_head.cls_branches.1.1.bias, pts_bbox_head.cls_branches.1.3.weight, pts_bbox_head.cls_branches.1.3.bias, pts_bbox_head.cls_branches.1.4.weight, pts_bbox_head.cls_branches.1.4.bias, pts_bbox_head.cls_branches.1.6.weight, pts_bbox_head.cls_branches.1.6.bias, pts_bbox_head.cls_branches.2.0.weight, pts_bbox_head.cls_branches.2.0.bias, pts_bbox_head.cls_branches.2.1.weight, pts_bbox_head.cls_branches.2.1.bias, pts_bbox_head.cls_branches.2.3.weight, pts_bbox_head.cls_branches.2.3.bias, pts_bbox_head.cls_branches.2.4.weight, pts_bbox_head.cls_branches.2.4.bias, pts_bbox_head.cls_branches.2.6.weight, pts_bbox_head.cls_branches.2.6.bias, pts_bbox_head.cls_branches.3.0.weight, pts_bbox_head.cls_branches.3.0.bias, pts_bbox_head.cls_branches.3.1.weight, pts_bbox_head.cls_branches.3.1.bias, pts_bbox_head.cls_branches.3.3.weight, pts_bbox_head.cls_branches.3.3.bias, pts_bbox_head.cls_branches.3.4.weight, pts_bbox_head.cls_branches.3.4.bias, pts_bbox_head.cls_branches.3.6.weight, pts_bbox_head.cls_branches.3.6.bias, pts_bbox_head.cls_branches.4.0.weight, pts_bbox_head.cls_branches.4.0.bias, pts_bbox_head.cls_branches.4.1.weight, pts_bbox_head.cls_branches.4.1.bias, pts_bbox_head.cls_branches.4.3.weight, pts_bbox_head.cls_branches.4.3.bias, pts_bbox_head.cls_branches.4.4.weight, pts_bbox_head.cls_branches.4.4.bias, pts_bbox_head.cls_branches.4.6.weight, pts_bbox_head.cls_branches.4.6.bias, pts_bbox_head.cls_branches.5.0.weight, pts_bbox_head.cls_branches.5.0.bias, pts_bbox_head.cls_branches.5.1.weight, pts_bbox_head.cls_branches.5.1.bias, pts_bbox_head.cls_branches.5.3.weight, pts_bbox_head.cls_branches.5.3.bias, pts_bbox_head.cls_branches.5.4.weight, pts_bbox_head.cls_branches.5.4.bias, pts_bbox_head.cls_branches.5.6.weight, pts_bbox_head.cls_branches.5.6.bias

missing keys in source state_dict: pts_bbox_head.transformer.decoder.layers.0.attentions.1.img_attention_weights.weight, pts_bbox_head.transformer.decoder.layers.0.attentions.1.img_attention_weights.bias, pts_bbox_head.transformer.decoder.layers.0.attentions.1.img_output_proj.weight, pts_bbox_head.transformer.decoder.layers.0.attentions.1.img_output_proj.bias, pts_bbox_head.transformer.decoder.layers.0.attentions.1.modality_fusion_layer.0.weight, pts_bbox_head.transformer.decoder.layers.0.attentions.1.modality_fusion_layer.0.bias, pts_bbox_head.transformer.decoder.layers.0.attentions.1.modality_fusion_layer.1.weight, pts_bbox_head.transformer.decoder.layers.0.attentions.1.modality_fusion_layer.1.bias, pts_bbox_head.transformer.decoder.layers.0.attentions.1.modality_fusion_layer.3.weight, pts_bbox_head.transformer.decoder.layers.0.attentions.1.modality_fusion_layer.3.bias, pts_bbox_head.transformer.decoder.layers.0.attentions.1.modality_fusion_layer.4.weight, pts_bbox_head.transformer.decoder.layers.0.attentions.1.modality_fusion_layer.4.bias, pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.0.A_log_h2t, pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.0.D_h2t, pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.0.A_log_t2h, pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.0.D_t2h, pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.0.in_proj.weight, pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.0.conv1d_h2t.weight, pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.0.conv1d_h2t.bias, pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.0.x_proj_h2t.weight, pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.0.dt_proj_h2t.weight, pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.0.dt_proj_h2t.bias, pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.0.conv1d_t2h.weight, pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.0.conv1d_t2h.bias, pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.0.x_proj_t2h.weight, pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.0.dt_proj_t2h.weight, pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.0.dt_proj_t2h.bias, pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.0.lidar_guidance_proj.weight, pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.0.lidar_guidance_proj.bias, pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.0.out_proj.weight, pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.1.A_log_h2t, pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.1.D_h2t, pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.1.A_log_t2h, pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.1.D_t2h, pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.1.in_proj.weight, pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.1.conv1d_h2t.weight, pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.1.conv1d_h2t.bias, pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.1.x_proj_h2t.weight, pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.1.dt_proj_h2t.weight, pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.1.dt_proj_h2t.bias, pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.1.conv1d_t2h.weight, pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.1.conv1d_t2h.bias, pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.1.x_proj_t2h.weight, pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.1.dt_proj_t2h.weight, pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.1.dt_proj_t2h.bias, pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.1.lidar_guidance_proj.weight, pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.1.lidar_guidance_proj.bias, pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.layers.1.out_proj.weight, pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.norm.0.weight, pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.norm.0.bias, pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.norm.1.weight, pts_bbox_head.transformer.decoder.layers.0.attentions.1.camera_mixer.norm.1.bias, pts_bbox_head.transformer.decoder.layers.1.attentions.1.img_attention_weights.weight, pts_bbox_head.transformer.decoder.layers.1.attentions.1.img_attention_weights.bias, pts_bbox_head.transformer.decoder.layers.1.attentions.1.img_output_proj.weight, pts_bbox_head.transformer.decoder.layers.1.attentions.1.img_output_proj.bias, pts_bbox_head.transformer.decoder.layers.1.attentions.1.modality_fusion_layer.0.weight, pts_bbox_head.transformer.decoder.layers.1.attentions.1.modality_fusion_layer.0.bias, pts_bbox_head.transformer.decoder.layers.1.attentions.1.modality_fusion_layer.1.weight, pts_bbox_head.transformer.decoder.layers.1.attentions.1.modality_fusion_layer.1.bias, pts_bbox_head.transformer.decoder.layers.1.attentions.1.modality_fusion_layer.3.weight, pts_bbox_head.transformer.decoder.layers.1.attentions.1.modality_fusion_layer.3.bias, pts_bbox_head.transformer.decoder.layers.1.attentions.1.modality_fusion_layer.4.weight, pts_bbox_head.transformer.decoder.layers.1.attentions.1.modality_fusion_layer.4.bias, pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.0.A_log_h2t, pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.0.D_h2t, pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.0.A_log_t2h, pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.0.D_t2h, pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.0.in_proj.weight, pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.0.conv1d_h2t.weight, pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.0.conv1d_h2t.bias, pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.0.x_proj_h2t.weight, pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.0.dt_proj_h2t.weight, pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.0.dt_proj_h2t.bias, pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.0.conv1d_t2h.weight, pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.0.conv1d_t2h.bias, pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.0.x_proj_t2h.weight, pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.0.dt_proj_t2h.weight, pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.0.dt_proj_t2h.bias, pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.0.lidar_guidance_proj.weight, pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.0.lidar_guidance_proj.bias, pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.0.out_proj.weight, pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.1.A_log_h2t, pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.1.D_h2t, pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.1.A_log_t2h, pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.1.D_t2h, pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.1.in_proj.weight, pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.1.conv1d_h2t.weight, pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.1.conv1d_h2t.bias, pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.1.x_proj_h2t.weight, pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.1.dt_proj_h2t.weight, pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.1.dt_proj_h2t.bias, pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.1.conv1d_t2h.weight, pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.1.conv1d_t2h.bias, pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.1.x_proj_t2h.weight, pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.1.dt_proj_t2h.weight, pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.1.dt_proj_t2h.bias, pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.1.lidar_guidance_proj.weight, pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.1.lidar_guidance_proj.bias, pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.layers.1.out_proj.weight, pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.norm.0.weight, pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.norm.0.bias, pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.norm.1.weight, pts_bbox_head.transformer.decoder.layers.1.attentions.1.camera_mixer.norm.1.bias, pts_bbox_head.transformer.decoder.layers.2.attentions.1.img_attention_weights.weight, pts_bbox_head.transformer.decoder.layers.2.attentions.1.img_attention_weights.bias, pts_bbox_head.transformer.decoder.layers.2.attentions.1.img_output_proj.weight, pts_bbox_head.transformer.decoder.layers.2.attentions.1.img_output_proj.bias, pts_bbox_head.transformer.decoder.layers.2.attentions.1.modality_fusion_layer.0.weight, pts_bbox_head.transformer.decoder.layers.2.attentions.1.modality_fusion_layer.0.bias, pts_bbox_head.transformer.decoder.layers.2.attentions.1.modality_fusion_layer.1.weight, pts_bbox_head.transformer.decoder.layers.2.attentions.1.modality_fusion_layer.1.bias, pts_bbox_head.transformer.decoder.layers.2.attentions.1.modality_fusion_layer.3.weight, pts_bbox_head.transformer.decoder.layers.2.attentions.1.modality_fusion_layer.3.bias, pts_bbox_head.transformer.decoder.layers.2.attentions.1.modality_fusion_layer.4.weight, pts_bbox_head.transformer.decoder.layers.2.attentions.1.modality_fusion_layer.4.bias, pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.0.A_log_h2t, pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.0.D_h2t, pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.0.A_log_t2h, pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.0.D_t2h, pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.0.in_proj.weight, pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.0.conv1d_h2t.weight, pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.0.conv1d_h2t.bias, pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.0.x_proj_h2t.weight, pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.0.dt_proj_h2t.weight, pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.0.dt_proj_h2t.bias, pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.0.conv1d_t2h.weight, pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.0.conv1d_t2h.bias, pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.0.x_proj_t2h.weight, pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.0.dt_proj_t2h.weight, pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.0.dt_proj_t2h.bias, pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.0.lidar_guidance_proj.weight, pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.0.lidar_guidance_proj.bias, pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.0.out_proj.weight, pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.1.A_log_h2t, pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.1.D_h2t, pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.1.A_log_t2h, pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.1.D_t2h, pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.1.in_proj.weight, pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.1.conv1d_h2t.weight, pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.1.conv1d_h2t.bias, pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.1.x_proj_h2t.weight, pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.1.dt_proj_h2t.weight, pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.1.dt_proj_h2t.bias, pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.1.conv1d_t2h.weight, pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.1.conv1d_t2h.bias, pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.1.x_proj_t2h.weight, pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.1.dt_proj_t2h.weight, pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.1.dt_proj_t2h.bias, pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.1.lidar_guidance_proj.weight, pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.1.lidar_guidance_proj.bias, pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.layers.1.out_proj.weight, pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.norm.0.weight, pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.norm.0.bias, pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.norm.1.weight, pts_bbox_head.transformer.decoder.layers.2.attentions.1.camera_mixer.norm.1.bias, pts_bbox_head.transformer.decoder.layers.3.attentions.1.img_attention_weights.weight, pts_bbox_head.transformer.decoder.layers.3.attentions.1.img_attention_weights.bias, pts_bbox_head.transformer.decoder.layers.3.attentions.1.img_output_proj.weight, pts_bbox_head.transformer.decoder.layers.3.attentions.1.img_output_proj.bias, pts_bbox_head.transformer.decoder.layers.3.attentions.1.modality_fusion_layer.0.weight, pts_bbox_head.transformer.decoder.layers.3.attentions.1.modality_fusion_layer.0.bias, pts_bbox_head.transformer.decoder.layers.3.attentions.1.modality_fusion_layer.1.weight, pts_bbox_head.transformer.decoder.layers.3.attentions.1.modality_fusion_layer.1.bias, pts_bbox_head.transformer.decoder.layers.3.attentions.1.modality_fusion_layer.3.weight, pts_bbox_head.transformer.decoder.layers.3.attentions.1.modality_fusion_layer.3.bias, pts_bbox_head.transformer.decoder.layers.3.attentions.1.modality_fusion_layer.4.weight, pts_bbox_head.transformer.decoder.layers.3.attentions.1.modality_fusion_layer.4.bias, pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.0.A_log_h2t, pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.0.D_h2t, pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.0.A_log_t2h, pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.0.D_t2h, pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.0.in_proj.weight, pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.0.conv1d_h2t.weight, pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.0.conv1d_h2t.bias, pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.0.x_proj_h2t.weight, pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.0.dt_proj_h2t.weight, pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.0.dt_proj_h2t.bias, pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.0.conv1d_t2h.weight, pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.0.conv1d_t2h.bias, pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.0.x_proj_t2h.weight, pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.0.dt_proj_t2h.weight, pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.0.dt_proj_t2h.bias, pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.0.lidar_guidance_proj.weight, pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.0.lidar_guidance_proj.bias, pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.0.out_proj.weight, pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.1.A_log_h2t, pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.1.D_h2t, pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.1.A_log_t2h, pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.1.D_t2h, pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.1.in_proj.weight, pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.1.conv1d_h2t.weight, pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.1.conv1d_h2t.bias, pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.1.x_proj_h2t.weight, pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.1.dt_proj_h2t.weight, pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.1.dt_proj_h2t.bias, pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.1.conv1d_t2h.weight, pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.1.conv1d_t2h.bias, pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.1.x_proj_t2h.weight, pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.1.dt_proj_t2h.weight, pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.1.dt_proj_t2h.bias, pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.1.lidar_guidance_proj.weight, pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.1.lidar_guidance_proj.bias, pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.layers.1.out_proj.weight, pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.norm.0.weight, pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.norm.0.bias, pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.norm.1.weight, pts_bbox_head.transformer.decoder.layers.3.attentions.1.camera_mixer.norm.1.bias, pts_bbox_head.transformer.decoder.layers.4.attentions.1.img_attention_weights.weight, pts_bbox_head.transformer.decoder.layers.4.attentions.1.img_attention_weights.bias, pts_bbox_head.transformer.decoder.layers.4.attentions.1.img_output_proj.weight, pts_bbox_head.transformer.decoder.layers.4.attentions.1.img_output_proj.bias, pts_bbox_head.transformer.decoder.layers.4.attentions.1.modality_fusion_layer.0.weight, pts_bbox_head.transformer.decoder.layers.4.attentions.1.modality_fusion_layer.0.bias, pts_bbox_head.transformer.decoder.layers.4.attentions.1.modality_fusion_layer.1.weight, pts_bbox_head.transformer.decoder.layers.4.attentions.1.modality_fusion_layer.1.bias, pts_bbox_head.transformer.decoder.layers.4.attentions.1.modality_fusion_layer.3.weight, pts_bbox_head.transformer.decoder.layers.4.attentions.1.modality_fusion_layer.3.bias, pts_bbox_head.transformer.decoder.layers.4.attentions.1.modality_fusion_layer.4.weight, pts_bbox_head.transformer.decoder.layers.4.attentions.1.modality_fusion_layer.4.bias, pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.0.A_log_h2t, pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.0.D_h2t, pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.0.A_log_t2h, pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.0.D_t2h, pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.0.in_proj.weight, pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.0.conv1d_h2t.weight, pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.0.conv1d_h2t.bias, pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.0.x_proj_h2t.weight, pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.0.dt_proj_h2t.weight, pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.0.dt_proj_h2t.bias, pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.0.conv1d_t2h.weight, pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.0.conv1d_t2h.bias, pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.0.x_proj_t2h.weight, pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.0.dt_proj_t2h.weight, pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.0.dt_proj_t2h.bias, pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.0.lidar_guidance_proj.weight, pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.0.lidar_guidance_proj.bias, pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.0.out_proj.weight, pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.1.A_log_h2t, pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.1.D_h2t, pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.1.A_log_t2h, pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.1.D_t2h, pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.1.in_proj.weight, pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.1.conv1d_h2t.weight, pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.1.conv1d_h2t.bias, pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.1.x_proj_h2t.weight, pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.1.dt_proj_h2t.weight, pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.1.dt_proj_h2t.bias, pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.1.conv1d_t2h.weight, pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.1.conv1d_t2h.bias, pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.1.x_proj_t2h.weight, pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.1.dt_proj_t2h.weight, pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.1.dt_proj_t2h.bias, pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.1.lidar_guidance_proj.weight, pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.1.lidar_guidance_proj.bias, pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.layers.1.out_proj.weight, pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.norm.0.weight, pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.norm.0.bias, pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.norm.1.weight, pts_bbox_head.transformer.decoder.layers.4.attentions.1.camera_mixer.norm.1.bias, pts_bbox_head.transformer.decoder.layers.5.attentions.1.img_attention_weights.weight, pts_bbox_head.transformer.decoder.layers.5.attentions.1.img_attention_weights.bias, pts_bbox_head.transformer.decoder.layers.5.attentions.1.img_output_proj.weight, pts_bbox_head.transformer.decoder.layers.5.attentions.1.img_output_proj.bias, pts_bbox_head.transformer.decoder.layers.5.attentions.1.modality_fusion_layer.0.weight, pts_bbox_head.transformer.decoder.layers.5.attentions.1.modality_fusion_layer.0.bias, pts_bbox_head.transformer.decoder.layers.5.attentions.1.modality_fusion_layer.1.weight, pts_bbox_head.transformer.decoder.layers.5.attentions.1.modality_fusion_layer.1.bias, pts_bbox_head.transformer.decoder.layers.5.attentions.1.modality_fusion_layer.3.weight, pts_bbox_head.transformer.decoder.layers.5.attentions.1.modality_fusion_layer.3.bias, pts_bbox_head.transformer.decoder.layers.5.attentions.1.modality_fusion_layer.4.weight, pts_bbox_head.transformer.decoder.layers.5.attentions.1.modality_fusion_layer.4.bias, pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.0.A_log_h2t, pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.0.D_h2t, pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.0.A_log_t2h, pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.0.D_t2h, pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.0.in_proj.weight, pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.0.conv1d_h2t.weight, pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.0.conv1d_h2t.bias, pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.0.x_proj_h2t.weight, pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.0.dt_proj_h2t.weight, pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.0.dt_proj_h2t.bias, pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.0.conv1d_t2h.weight, pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.0.conv1d_t2h.bias, pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.0.x_proj_t2h.weight, pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.0.dt_proj_t2h.weight, pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.0.dt_proj_t2h.bias, pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.0.lidar_guidance_proj.weight, pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.0.lidar_guidance_proj.bias, pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.0.out_proj.weight, pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.1.A_log_h2t, pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.1.D_h2t, pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.1.A_log_t2h, pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.1.D_t2h, pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.1.in_proj.weight, pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.1.conv1d_h2t.weight, pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.1.conv1d_h2t.bias, pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.1.x_proj_h2t.weight, pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.1.dt_proj_h2t.weight, pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.1.dt_proj_h2t.bias, pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.1.conv1d_t2h.weight, pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.1.conv1d_t2h.bias, pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.1.x_proj_t2h.weight, pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.1.dt_proj_t2h.weight, pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.1.dt_proj_t2h.bias, pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.1.lidar_guidance_proj.weight, pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.1.lidar_guidance_proj.bias, pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.layers.1.out_proj.weight, pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.norm.0.weight, pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.norm.0.bias, pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.norm.1.weight, pts_bbox_head.transformer.decoder.layers.5.attentions.1.camera_mixer.norm.1.bias

2025-06-18 11:26:02,023 - mmdet - INFO - Start running, host: ubuntu@ubuntu, work_dir: /mnt/sdc/FUTR3D/work_dirs/lidar_0075v_cam_res_2x2_hednetmiddleencoder_hednetbackbone4_dss0511_dp03_hugeep2_num2_morton_conv_xy_rope_bs2/Port4091_LR2_SYNC_cudnn_fuseblockv2
2025-06-18 11:26:02,023 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_epoch:
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
2025-06-18 11:26:02,024 - mmdet - INFO - workflow: [('train', 1)], max: 6 epochs
2025-06-18 11:26:02,025 - mmdet - INFO - Checkpoints will be saved to /mnt/sdc/FUTR3D/work_dirs/lidar_0075v_cam_res_2x2_hednetmiddleencoder_hednetbackbone4_dss0511_dp03_hugeep2_num2_morton_conv_xy_rope_bs2/Port4091_LR2_SYNC_cudnn_fuseblockv2 by HardDiskBackend.
2025-06-18 11:27:40,892 - mmdet - INFO - Epoch [1][50/7033]	lr: 7.973e-05, eta: 22:59:00, time: 1.963, data_time: 0.133, memory: 18022, loss_cls: 1.0404, loss_bbox: 1.4324, d0.loss_cls: 0.9981, d0.loss_bbox: 1.6124, d1.loss_cls: 0.9085, d1.loss_bbox: 1.4271, d2.loss_cls: 0.9452, d2.loss_bbox: 1.4496, d3.loss_cls: 0.9493, d3.loss_bbox: 1.4100, d4.loss_cls: 0.9731, d4.loss_bbox: 1.4109, loss: 14.5571, grad_norm: 465.0256
2025-06-18 11:28:53,603 - mmdet - INFO - Epoch [1][100/7033]	lr: 9.307e-05, eta: 19:58:51, time: 1.454, data_time: 0.026, memory: 18022, loss_cls: 0.5382, loss_bbox: 0.9088, d0.loss_cls: 0.5889, d0.loss_bbox: 1.2065, d1.loss_cls: 0.4829, d1.loss_bbox: 1.0128, d2.loss_cls: 0.4906, d2.loss_bbox: 1.0011, d3.loss_cls: 0.4832, d3.loss_bbox: 0.9532, d4.loss_cls: 0.4959, d4.loss_bbox: 0.9134, loss: 9.0754, grad_norm: 40.0832
2025-06-18 11:30:06,612 - mmdet - INFO - Epoch [1][150/7033]	lr: 1.064e-04, eta: 18:59:22, time: 1.460, data_time: 0.026, memory: 18022, loss_cls: 0.3112, loss_bbox: 0.7217, d0.loss_cls: 0.4117, d0.loss_bbox: 0.9911, d1.loss_cls: 0.3322, d1.loss_bbox: 0.7745, d2.loss_cls: 0.3147, d2.loss_bbox: 0.7625, d3.loss_cls: 0.3000, d3.loss_bbox: 0.7447, d4.loss_cls: 0.2950, d4.loss_bbox: 0.7117, loss: 6.6709, grad_norm: 33.1244
2025-06-18 11:31:19,584 - mmdet - INFO - Epoch [1][200/7033]	lr: 1.197e-04, eta: 18:28:53, time: 1.459, data_time: 0.027, memory: 18022, loss_cls: 0.2274, loss_bbox: 0.5616, d0.loss_cls: 0.3328, d0.loss_bbox: 0.8945, d1.loss_cls: 0.2666, d1.loss_bbox: 0.6244, d2.loss_cls: 0.2368, d2.loss_bbox: 0.5934, d3.loss_cls: 0.2284, d3.loss_bbox: 0.5831, d4.loss_cls: 0.2221, d4.loss_bbox: 0.5539, loss: 5.3249, grad_norm: 30.3379
2025-06-18 11:32:35,312 - mmdet - INFO - Epoch [1][250/7033]	lr: 1.331e-04, eta: 18:17:49, time: 1.515, data_time: 0.026, memory: 18022, loss_cls: 0.1954, loss_bbox: 0.4566, d0.loss_cls: 0.2796, d0.loss_bbox: 0.8418, d1.loss_cls: 0.2382, d1.loss_bbox: 0.5271, d2.loss_cls: 0.2025, d2.loss_bbox: 0.4807, d3.loss_cls: 0.1926, d3.loss_bbox: 0.4719, d4.loss_cls: 0.1930, d4.loss_bbox: 0.4532, loss: 4.5326, grad_norm: 28.7308
2025-06-18 11:33:47,917 - mmdet - INFO - Epoch [1][300/7033]	lr: 1.464e-04, eta: 18:02:46, time: 1.452, data_time: 0.026, memory: 18022, loss_cls: 0.1872, loss_bbox: 0.3989, d0.loss_cls: 0.2654, d0.loss_bbox: 0.7698, d1.loss_cls: 0.2191, d1.loss_bbox: 0.4606, d2.loss_cls: 0.1893, d2.loss_bbox: 0.4244, d3.loss_cls: 0.1842, d3.loss_bbox: 0.4079, d4.loss_cls: 0.1817, d4.loss_bbox: 0.3979, loss: 4.0861, grad_norm: 43.1904
2025-06-18 11:35:03,158 - mmdet - INFO - Epoch [1][350/7033]	lr: 1.597e-04, eta: 17:56:55, time: 1.505, data_time: 0.030, memory: 18022, loss_cls: 0.1690, loss_bbox: 0.3880, d0.loss_cls: 0.2521, d0.loss_bbox: 0.7492, d1.loss_cls: 0.2132, d1.loss_bbox: 0.4510, d2.loss_cls: 0.1783, d2.loss_bbox: 0.4196, d3.loss_cls: 0.1700, d3.loss_bbox: 0.3913, d4.loss_cls: 0.1643, d4.loss_bbox: 0.3889, loss: 3.9349, grad_norm: 70.6555
2025-06-18 11:36:16,033 - mmdet - INFO - Epoch [1][400/7033]	lr: 1.731e-04, eta: 17:48:05, time: 1.457, data_time: 0.030, memory: 18022, loss_cls: 0.1633, loss_bbox: 0.3379, d0.loss_cls: 0.2417, d0.loss_bbox: 0.6651, d1.loss_cls: 0.2012, d1.loss_bbox: 0.4084, d2.loss_cls: 0.1748, d2.loss_bbox: 0.3737, d3.loss_cls: 0.1598, d3.loss_bbox: 0.3455, d4.loss_cls: 0.1544, d4.loss_bbox: 0.3402, loss: 3.5661, grad_norm: 40.8291
2025-06-18 11:37:28,829 - mmdet - INFO - Epoch [1][450/7033]	lr: 1.864e-04, eta: 17:40:50, time: 1.456, data_time: 0.030, memory: 18022, loss_cls: 0.1536, loss_bbox: 0.3383, d0.loss_cls: 0.2280, d0.loss_bbox: 0.5970, d1.loss_cls: 0.1982, d1.loss_bbox: 0.3912, d2.loss_cls: 0.1748, d2.loss_bbox: 0.3541, d3.loss_cls: 0.1643, d3.loss_bbox: 0.3422, d4.loss_cls: 0.1566, d4.loss_bbox: 0.3381, loss: 3.4364, grad_norm: 34.2063
2025-06-18 11:38:41,668 - mmdet - INFO - Epoch [1][500/7033]	lr: 1.997e-04, eta: 17:34:51, time: 1.457, data_time: 0.030, memory: 18022, loss_cls: 0.1555, loss_bbox: 0.3446, d0.loss_cls: 0.2332, d0.loss_bbox: 0.5829, d1.loss_cls: 0.1933, d1.loss_bbox: 0.3956, d2.loss_cls: 0.1676, d2.loss_bbox: 0.3594, d3.loss_cls: 0.1598, d3.loss_bbox: 0.3462, d4.loss_cls: 0.1532, d4.loss_bbox: 0.3446, loss: 3.4359, grad_norm: 34.4622
2025-06-18 11:39:54,330 - mmdet - INFO - Epoch [1][550/7033]	lr: 2.000e-04, eta: 17:29:30, time: 1.453, data_time: 0.026, memory: 18022, loss_cls: 0.1390, loss_bbox: 0.3241, d0.loss_cls: 0.2090, d0.loss_bbox: 0.5216, d1.loss_cls: 0.1693, d1.loss_bbox: 0.3715, d2.loss_cls: 0.1544, d2.loss_bbox: 0.3378, d3.loss_cls: 0.1393, d3.loss_bbox: 0.3276, d4.loss_cls: 0.1329, d4.loss_bbox: 0.3244, loss: 3.1511, grad_norm: 31.7254
2025-06-18 11:41:07,419 - mmdet - INFO - Epoch [1][600/7033]	lr: 2.000e-04, eta: 17:25:20, time: 1.462, data_time: 0.029, memory: 18183, loss_cls: 0.1422, loss_bbox: 0.3155, d0.loss_cls: 0.2130, d0.loss_bbox: 0.5082, d1.loss_cls: 0.1719, d1.loss_bbox: 0.3602, d2.loss_cls: 0.1593, d2.loss_bbox: 0.3311, d3.loss_cls: 0.1480, d3.loss_bbox: 0.3191, d4.loss_cls: 0.1429, d4.loss_bbox: 0.3180, loss: 3.1293, grad_norm: 490.1142
2025-06-18 11:42:20,357 - mmdet - INFO - Epoch [1][650/7033]	lr: 2.000e-04, eta: 17:21:28, time: 1.459, data_time: 0.028, memory: 18183, loss_cls: 0.1335, loss_bbox: 0.3083, d0.loss_cls: 0.2024, d0.loss_bbox: 0.5147, d1.loss_cls: 0.1668, d1.loss_bbox: 0.3553, d2.loss_cls: 0.1452, d2.loss_bbox: 0.3259, d3.loss_cls: 0.1357, d3.loss_bbox: 0.3142, d4.loss_cls: 0.1322, d4.loss_bbox: 0.3109, loss: 3.0451, grad_norm: 52.0068
2025-06-18 11:43:33,620 - mmdet - INFO - Epoch [1][700/7033]	lr: 2.000e-04, eta: 17:18:18, time: 1.465, data_time: 0.036, memory: 18183, loss_cls: 0.1378, loss_bbox: 0.3007, d0.loss_cls: 0.2082, d0.loss_bbox: 0.4852, d1.loss_cls: 0.1660, d1.loss_bbox: 0.3412, d2.loss_cls: 0.1514, d2.loss_bbox: 0.3139, d3.loss_cls: 0.1380, d3.loss_bbox: 0.3084, d4.loss_cls: 0.1357, d4.loss_bbox: 0.3024, loss: 2.9888, grad_norm: 34.7237
2025-06-18 11:44:46,545 - mmdet - INFO - Epoch [1][750/7033]	lr: 2.000e-04, eta: 17:15:05, time: 1.458, data_time: 0.026, memory: 18183, loss_cls: 0.1290, loss_bbox: 0.3031, d0.loss_cls: 0.2075, d0.loss_bbox: 0.4926, d1.loss_cls: 0.1625, d1.loss_bbox: 0.3435, d2.loss_cls: 0.1465, d2.loss_bbox: 0.3195, d3.loss_cls: 0.1338, d3.loss_bbox: 0.3105, d4.loss_cls: 0.1282, d4.loss_bbox: 0.3043, loss: 2.9811, grad_norm: 30.6623
2025-06-18 11:45:59,456 - mmdet - INFO - Epoch [1][800/7033]	lr: 2.000e-04, eta: 17:12:06, time: 1.458, data_time: 0.026, memory: 18183, loss_cls: 0.1302, loss_bbox: 0.2951, d0.loss_cls: 0.2131, d0.loss_bbox: 0.4795, d1.loss_cls: 0.1713, d1.loss_bbox: 0.3369, d2.loss_cls: 0.1507, d2.loss_bbox: 0.3105, d3.loss_cls: 0.1338, d3.loss_bbox: 0.3008, d4.loss_cls: 0.1290, d4.loss_bbox: 0.2971, loss: 2.9479, grad_norm: 80.2513
2025-06-18 11:47:12,093 - mmdet - INFO - Epoch [1][850/7033]	lr: 2.000e-04, eta: 17:09:06, time: 1.453, data_time: 0.026, memory: 18183, loss_cls: 0.1268, loss_bbox: 0.2906, d0.loss_cls: 0.1996, d0.loss_bbox: 0.4718, d1.loss_cls: 0.1680, d1.loss_bbox: 0.3346, d2.loss_cls: 0.1469, d2.loss_bbox: 0.3118, d3.loss_cls: 0.1295, d3.loss_bbox: 0.3009, d4.loss_cls: 0.1278, d4.loss_bbox: 0.2912, loss: 2.8997, grad_norm: 36.1839
2025-06-18 11:48:25,103 - mmdet - INFO - Epoch [1][900/7033]	lr: 2.000e-04, eta: 17:06:36, time: 1.460, data_time: 0.029, memory: 18183, loss_cls: 0.1283, loss_bbox: 0.2948, d0.loss_cls: 0.2089, d0.loss_bbox: 0.4668, d1.loss_cls: 0.1700, d1.loss_bbox: 0.3431, d2.loss_cls: 0.1542, d2.loss_bbox: 0.3135, d3.loss_cls: 0.1317, d3.loss_bbox: 0.3072, d4.loss_cls: 0.1306, d4.loss_bbox: 0.2988, loss: 2.9479, grad_norm: 34.7618
2025-06-18 11:49:37,922 - mmdet - INFO - Epoch [1][950/7033]	lr: 2.000e-04, eta: 17:04:05, time: 1.456, data_time: 0.030, memory: 18183, loss_cls: 0.1155, loss_bbox: 0.2925, d0.loss_cls: 0.1967, d0.loss_bbox: 0.4536, d1.loss_cls: 0.1565, d1.loss_bbox: 0.3332, d2.loss_cls: 0.1384, d2.loss_bbox: 0.3124, d3.loss_cls: 0.1212, d3.loss_bbox: 0.3029, d4.loss_cls: 0.1145, d4.loss_bbox: 0.2954, loss: 2.8328, grad_norm: 33.8828
2025-06-18 11:50:50,728 - mmdet - INFO - Exp name: lidar_0075v_cam_res_2x2_hednetmiddleencoder_hednetbackbone4_dss0511_dp03_hugeep2_num2_morton_conv_xy_rope_bs2.py
2025-06-18 11:50:50,728 - mmdet - INFO - Epoch [1][1000/7033]	lr: 2.000e-04, eta: 17:01:41, time: 1.456, data_time: 0.026, memory: 18183, loss_cls: 0.1158, loss_bbox: 0.2784, d0.loss_cls: 0.1957, d0.loss_bbox: 0.4235, d1.loss_cls: 0.1612, d1.loss_bbox: 0.3252, d2.loss_cls: 0.1422, d2.loss_bbox: 0.3020, d3.loss_cls: 0.1280, d3.loss_bbox: 0.2889, d4.loss_cls: 0.1161, d4.loss_bbox: 0.2803, loss: 2.7573, grad_norm: 49.7998
2025-06-18 11:52:03,400 - mmdet - INFO - Epoch [1][1050/7033]	lr: 2.000e-04, eta: 16:59:19, time: 1.453, data_time: 0.024, memory: 18183, loss_cls: 0.1323, loss_bbox: 0.2929, d0.loss_cls: 0.2128, d0.loss_bbox: 0.4589, d1.loss_cls: 0.1676, d1.loss_bbox: 0.3437, d2.loss_cls: 0.1566, d2.loss_bbox: 0.3146, d3.loss_cls: 0.1370, d3.loss_bbox: 0.3038, d4.loss_cls: 0.1322, d4.loss_bbox: 0.2946, loss: 2.9471, grad_norm: 48.8122
2025-06-18 11:53:15,939 - mmdet - INFO - Epoch [1][1100/7033]	lr: 2.000e-04, eta: 16:56:58, time: 1.451, data_time: 0.024, memory: 18183, loss_cls: 0.1198, loss_bbox: 0.2815, d0.loss_cls: 0.2062, d0.loss_bbox: 0.4367, d1.loss_cls: 0.1612, d1.loss_bbox: 0.3238, d2.loss_cls: 0.1428, d2.loss_bbox: 0.3015, d3.loss_cls: 0.1242, d3.loss_bbox: 0.2901, d4.loss_cls: 0.1198, d4.loss_bbox: 0.2825, loss: 2.7901, grad_norm: 36.4574
2025-06-18 11:54:29,996 - mmdet - INFO - Epoch [1][1150/7033]	lr: 2.000e-04, eta: 16:55:38, time: 1.481, data_time: 0.048, memory: 18183, loss_cls: 0.1251, loss_bbox: 0.2746, d0.loss_cls: 0.2070, d0.loss_bbox: 0.4159, d1.loss_cls: 0.1595, d1.loss_bbox: 0.3134, d2.loss_cls: 0.1439, d2.loss_bbox: 0.2934, d3.loss_cls: 0.1265, d3.loss_bbox: 0.2846, d4.loss_cls: 0.1191, d4.loss_bbox: 0.2791, loss: 2.7421, grad_norm: 50.1504
2025-06-18 11:55:42,682 - mmdet - INFO - Epoch [1][1200/7033]	lr: 2.000e-04, eta: 16:53:31, time: 1.454, data_time: 0.026, memory: 18183, loss_cls: 0.1214, loss_bbox: 0.2882, d0.loss_cls: 0.1974, d0.loss_bbox: 0.4359, d1.loss_cls: 0.1604, d1.loss_bbox: 0.3297, d2.loss_cls: 0.1423, d2.loss_bbox: 0.3068, d3.loss_cls: 0.1284, d3.loss_bbox: 0.2972, d4.loss_cls: 0.1222, d4.loss_bbox: 0.2895, loss: 2.8193, grad_norm: 66.6220
2025-06-18 11:56:55,610 - mmdet - INFO - Epoch [1][1250/7033]	lr: 2.000e-04, eta: 16:51:36, time: 1.459, data_time: 0.026, memory: 18183, loss_cls: 0.1211, loss_bbox: 0.2841, d0.loss_cls: 0.1992, d0.loss_bbox: 0.4141, d1.loss_cls: 0.1584, d1.loss_bbox: 0.3210, d2.loss_cls: 0.1430, d2.loss_bbox: 0.3006, d3.loss_cls: 0.1221, d3.loss_bbox: 0.2933, d4.loss_cls: 0.1198, d4.loss_bbox: 0.2867, loss: 2.7632, grad_norm: 23.3708
2025-06-18 11:58:08,436 - mmdet - INFO - Epoch [1][1300/7033]	lr: 2.000e-04, eta: 16:49:42, time: 1.456, data_time: 0.029, memory: 18183, loss_cls: 0.1115, loss_bbox: 0.2760, d0.loss_cls: 0.1875, d0.loss_bbox: 0.3967, d1.loss_cls: 0.1474, d1.loss_bbox: 0.3101, d2.loss_cls: 0.1321, d2.loss_bbox: 0.2937, d3.loss_cls: 0.1164, d3.loss_bbox: 0.2835, d4.loss_cls: 0.1140, d4.loss_bbox: 0.2758, loss: 2.6447, grad_norm: 31.4700
2025-06-18 11:59:20,776 - mmdet - INFO - Epoch [1][1350/7033]	lr: 2.000e-04, eta: 16:47:35, time: 1.447, data_time: 0.026, memory: 18183, loss_cls: 0.1059, loss_bbox: 0.2712, d0.loss_cls: 0.1878, d0.loss_bbox: 0.3977, d1.loss_cls: 0.1436, d1.loss_bbox: 0.3071, d2.loss_cls: 0.1271, d2.loss_bbox: 0.2873, d3.loss_cls: 0.1090, d3.loss_bbox: 0.2787, d4.loss_cls: 0.1049, d4.loss_bbox: 0.2718, loss: 2.5919, grad_norm: 67.5061
2025-06-18 12:00:34,008 - mmdet - INFO - Epoch [1][1400/7033]	lr: 2.000e-04, eta: 16:45:59, time: 1.465, data_time: 0.032, memory: 18183, loss_cls: 0.1139, loss_bbox: 0.2637, d0.loss_cls: 0.2008, d0.loss_bbox: 0.3916, d1.loss_cls: 0.1556, d1.loss_bbox: 0.3027, d2.loss_cls: 0.1328, d2.loss_bbox: 0.2833, d3.loss_cls: 0.1187, d3.loss_bbox: 0.2738, d4.loss_cls: 0.1133, d4.loss_bbox: 0.2668, loss: 2.6169, grad_norm: 32.3415
2025-06-18 12:01:46,847 - mmdet - INFO - Epoch [1][1450/7033]	lr: 2.000e-04, eta: 16:44:13, time: 1.457, data_time: 0.027, memory: 18183, loss_cls: 0.1164, loss_bbox: 0.2705, d0.loss_cls: 0.1918, d0.loss_bbox: 0.3975, d1.loss_cls: 0.1558, d1.loss_bbox: 0.3121, d2.loss_cls: 0.1403, d2.loss_bbox: 0.2882, d3.loss_cls: 0.1226, d3.loss_bbox: 0.2803, d4.loss_cls: 0.1185, d4.loss_bbox: 0.2728, loss: 2.6667, grad_norm: 46.1627
2025-06-18 12:02:59,511 - mmdet - INFO - Epoch [1][1500/7033]	lr: 2.000e-04, eta: 16:42:25, time: 1.453, data_time: 0.029, memory: 18183, loss_cls: 0.1094, loss_bbox: 0.2703, d0.loss_cls: 0.1967, d0.loss_bbox: 0.3943, d1.loss_cls: 0.1508, d1.loss_bbox: 0.3127, d2.loss_cls: 0.1331, d2.loss_bbox: 0.2910, d3.loss_cls: 0.1132, d3.loss_bbox: 0.2803, d4.loss_cls: 0.1078, d4.loss_bbox: 0.2715, loss: 2.6310, grad_norm: 26.3516
2025-06-18 12:04:12,229 - mmdet - INFO - Epoch [1][1550/7033]	lr: 2.000e-04, eta: 16:40:40, time: 1.454, data_time: 0.029, memory: 18183, loss_cls: 0.1168, loss_bbox: 0.2644, d0.loss_cls: 0.1994, d0.loss_bbox: 0.3897, d1.loss_cls: 0.1534, d1.loss_bbox: 0.3006, d2.loss_cls: 0.1355, d2.loss_bbox: 0.2842, d3.loss_cls: 0.1186, d3.loss_bbox: 0.2755, d4.loss_cls: 0.1153, d4.loss_bbox: 0.2667, loss: 2.6203, grad_norm: 50.5303
2025-06-18 12:05:25,141 - mmdet - INFO - Epoch [1][1600/7033]	lr: 2.000e-04, eta: 16:39:02, time: 1.458, data_time: 0.030, memory: 18183, loss_cls: 0.1206, loss_bbox: 0.2732, d0.loss_cls: 0.1967, d0.loss_bbox: 0.4057, d1.loss_cls: 0.1541, d1.loss_bbox: 0.3142, d2.loss_cls: 0.1401, d2.loss_bbox: 0.2888, d3.loss_cls: 0.1253, d3.loss_bbox: 0.2810, d4.loss_cls: 0.1205, d4.loss_bbox: 0.2727, loss: 2.6928, grad_norm: 70.3132
2025-06-18 12:06:37,841 - mmdet - INFO - Epoch [1][1650/7033]	lr: 2.000e-04, eta: 16:37:21, time: 1.454, data_time: 0.031, memory: 18183, loss_cls: 0.1050, loss_bbox: 0.2540, d0.loss_cls: 0.1911, d0.loss_bbox: 0.3870, d1.loss_cls: 0.1528, d1.loss_bbox: 0.2935, d2.loss_cls: 0.1311, d2.loss_bbox: 0.2712, d3.loss_cls: 0.1112, d3.loss_bbox: 0.2629, d4.loss_cls: 0.1064, d4.loss_bbox: 0.2542, loss: 2.5203, grad_norm: 27.4372
2025-06-18 12:07:50,643 - mmdet - INFO - Epoch [1][1700/7033]	lr: 2.000e-04, eta: 16:35:43, time: 1.456, data_time: 0.030, memory: 18183, loss_cls: 0.1103, loss_bbox: 0.2748, d0.loss_cls: 0.2005, d0.loss_bbox: 0.4103, d1.loss_cls: 0.1490, d1.loss_bbox: 0.3159, d2.loss_cls: 0.1310, d2.loss_bbox: 0.2956, d3.loss_cls: 0.1131, d3.loss_bbox: 0.2853, d4.loss_cls: 0.1100, d4.loss_bbox: 0.2753, loss: 2.6710, grad_norm: 33.8937
2025-06-18 12:09:05,648 - mmdet - INFO - Epoch [1][1750/7033]	lr: 2.000e-04, eta: 16:34:58, time: 1.500, data_time: 0.036, memory: 18201, loss_cls: 0.1063, loss_bbox: 0.2608, d0.loss_cls: 0.1919, d0.loss_bbox: 0.3849, d1.loss_cls: 0.1423, d1.loss_bbox: 0.2990, d2.loss_cls: 0.1278, d2.loss_bbox: 0.2780, d3.loss_cls: 0.1112, d3.loss_bbox: 0.2717, d4.loss_cls: 0.1045, d4.loss_bbox: 0.2627, loss: 2.5413, grad_norm: 45.3084
2025-06-18 12:10:18,224 - mmdet - INFO - Epoch [1][1800/7033]	lr: 2.000e-04, eta: 16:33:17, time: 1.452, data_time: 0.029, memory: 18201, loss_cls: 0.1105, loss_bbox: 0.2704, d0.loss_cls: 0.1947, d0.loss_bbox: 0.4035, d1.loss_cls: 0.1480, d1.loss_bbox: 0.3107, d2.loss_cls: 0.1318, d2.loss_bbox: 0.2922, d3.loss_cls: 0.1132, d3.loss_bbox: 0.2825, d4.loss_cls: 0.1097, d4.loss_bbox: 0.2708, loss: 2.6380, grad_norm: 39.3362
2025-06-18 12:11:30,835 - mmdet - INFO - Epoch [1][1850/7033]	lr: 2.000e-04, eta: 16:31:38, time: 1.452, data_time: 0.026, memory: 18201, loss_cls: 0.1037, loss_bbox: 0.2586, d0.loss_cls: 0.2009, d0.loss_bbox: 0.3849, d1.loss_cls: 0.1514, d1.loss_bbox: 0.2959, d2.loss_cls: 0.1253, d2.loss_bbox: 0.2771, d3.loss_cls: 0.1095, d3.loss_bbox: 0.2708, d4.loss_cls: 0.1061, d4.loss_bbox: 0.2591, loss: 2.5433, grad_norm: 37.4409
2025-06-18 12:12:43,650 - mmdet - INFO - Epoch [1][1900/7033]	lr: 2.000e-04, eta: 16:30:05, time: 1.456, data_time: 0.030, memory: 18201, loss_cls: 0.1036, loss_bbox: 0.2547, d0.loss_cls: 0.1963, d0.loss_bbox: 0.3795, d1.loss_cls: 0.1489, d1.loss_bbox: 0.2888, d2.loss_cls: 0.1248, d2.loss_bbox: 0.2694, d3.loss_cls: 0.1092, d3.loss_bbox: 0.2594, d4.loss_cls: 0.1032, d4.loss_bbox: 0.2549, loss: 2.4927, grad_norm: 44.3138
2025-06-18 12:13:58,487 - mmdet - INFO - Epoch [1][1950/7033]	lr: 2.000e-04, eta: 16:29:15, time: 1.497, data_time: 0.029, memory: 18201, loss_cls: 0.1014, loss_bbox: 0.2610, d0.loss_cls: 0.1922, d0.loss_bbox: 0.3934, d1.loss_cls: 0.1378, d1.loss_bbox: 0.2992, d2.loss_cls: 0.1221, d2.loss_bbox: 0.2786, d3.loss_cls: 0.1070, d3.loss_bbox: 0.2671, d4.loss_cls: 0.1017, d4.loss_bbox: 0.2592, loss: 2.5208, grad_norm: 21.9442
2025-06-18 12:15:11,520 - mmdet - INFO - Exp name: lidar_0075v_cam_res_2x2_hednetmiddleencoder_hednetbackbone4_dss0511_dp03_hugeep2_num2_morton_conv_xy_rope_bs2.py
2025-06-18 12:15:11,520 - mmdet - INFO - Epoch [1][2000/7033]	lr: 2.000e-04, eta: 16:27:47, time: 1.461, data_time: 0.030, memory: 18201, loss_cls: 0.1218, loss_bbox: 0.2779, d0.loss_cls: 0.2098, d0.loss_bbox: 0.4080, d1.loss_cls: 0.1624, d1.loss_bbox: 0.3160, d2.loss_cls: 0.1435, d2.loss_bbox: 0.2939, d3.loss_cls: 0.1268, d3.loss_bbox: 0.2868, d4.loss_cls: 0.1189, d4.loss_bbox: 0.2778, loss: 2.7434, grad_norm: 39.0140
2025-06-18 12:16:24,221 - mmdet - INFO - Epoch [1][2050/7033]	lr: 2.000e-04, eta: 16:26:13, time: 1.454, data_time: 0.029, memory: 18201, loss_cls: 0.1069, loss_bbox: 0.2719, d0.loss_cls: 0.1906, d0.loss_bbox: 0.3901, d1.loss_cls: 0.1463, d1.loss_bbox: 0.3077, d2.loss_cls: 0.1274, d2.loss_bbox: 0.2848, d3.loss_cls: 0.1121, d3.loss_bbox: 0.2780, d4.loss_cls: 0.1066, d4.loss_bbox: 0.2701, loss: 2.5925, grad_norm: 202.5622
2025-06-18 12:17:37,107 - mmdet - INFO - Epoch [1][2100/7033]	lr: 2.000e-04, eta: 16:24:44, time: 1.458, data_time: 0.028, memory: 18201, loss_cls: 0.1073, loss_bbox: 0.2688, d0.loss_cls: 0.1930, d0.loss_bbox: 0.3879, d1.loss_cls: 0.1589, d1.loss_bbox: 0.3063, d2.loss_cls: 0.1278, d2.loss_bbox: 0.2838, d3.loss_cls: 0.1095, d3.loss_bbox: 0.2791, d4.loss_cls: 0.1086, d4.loss_bbox: 0.2686, loss: 2.5997, grad_norm: 27.4101
2025-06-18 12:18:49,897 - mmdet - INFO - Epoch [1][2150/7033]	lr: 2.000e-04, eta: 16:23:14, time: 1.456, data_time: 0.029, memory: 18201, loss_cls: 0.1071, loss_bbox: 0.2593, d0.loss_cls: 0.1948, d0.loss_bbox: 0.3845, d1.loss_cls: 0.1532, d1.loss_bbox: 0.3003, d2.loss_cls: 0.1279, d2.loss_bbox: 0.2791, d3.loss_cls: 0.1124, d3.loss_bbox: 0.2704, d4.loss_cls: 0.1090, d4.loss_bbox: 0.2600, loss: 2.5579, grad_norm: 39.9076
2025-06-18 12:20:02,695 - mmdet - INFO - Epoch [1][2200/7033]	lr: 2.000e-04, eta: 16:21:45, time: 1.456, data_time: 0.029, memory: 18201, loss_cls: 0.1090, loss_bbox: 0.2607, d0.loss_cls: 0.1882, d0.loss_bbox: 0.3835, d1.loss_cls: 0.1490, d1.loss_bbox: 0.3069, d2.loss_cls: 0.1305, d2.loss_bbox: 0.2821, d3.loss_cls: 0.1120, d3.loss_bbox: 0.2770, d4.loss_cls: 0.1094, d4.loss_bbox: 0.2633, loss: 2.5715, grad_norm: 35.5908
2025-06-18 12:21:15,522 - mmdet - INFO - Epoch [1][2250/7033]	lr: 2.000e-04, eta: 16:20:17, time: 1.457, data_time: 0.028, memory: 18201, loss_cls: 0.1028, loss_bbox: 0.2616, d0.loss_cls: 0.1954, d0.loss_bbox: 0.3878, d1.loss_cls: 0.1452, d1.loss_bbox: 0.3008, d2.loss_cls: 0.1269, d2.loss_bbox: 0.2821, d3.loss_cls: 0.1104, d3.loss_bbox: 0.2743, d4.loss_cls: 0.1040, d4.loss_bbox: 0.2633, loss: 2.5545, grad_norm: 37.2667
2025-06-18 12:22:29,360 - mmdet - INFO - Epoch [1][2300/7033]	lr: 2.000e-04, eta: 16:19:07, time: 1.477, data_time: 0.049, memory: 18201, loss_cls: 0.1039, loss_bbox: 0.2562, d0.loss_cls: 0.1918, d0.loss_bbox: 0.3784, d1.loss_cls: 0.1428, d1.loss_bbox: 0.2914, d2.loss_cls: 0.1256, d2.loss_bbox: 0.2760, d3.loss_cls: 0.1096, d3.loss_bbox: 0.2679, d4.loss_cls: 0.1057, d4.loss_bbox: 0.2574, loss: 2.5067, grad_norm: 36.3480
2025-06-18 12:23:42,508 - mmdet - INFO - Epoch [1][2350/7033]	lr: 2.000e-04, eta: 16:17:45, time: 1.463, data_time: 0.030, memory: 18289, loss_cls: 0.1033, loss_bbox: 0.2629, d0.loss_cls: 0.1959, d0.loss_bbox: 0.3926, d1.loss_cls: 0.1458, d1.loss_bbox: 0.3004, d2.loss_cls: 0.1292, d2.loss_bbox: 0.2787, d3.loss_cls: 0.1122, d3.loss_bbox: 0.2682, d4.loss_cls: 0.1046, d4.loss_bbox: 0.2625, loss: 2.5565, grad_norm: 33.2437
2025-06-18 12:24:55,636 - mmdet - INFO - Epoch [1][2400/7033]	lr: 2.000e-04, eta: 16:16:23, time: 1.463, data_time: 0.033, memory: 18289, loss_cls: 0.1051, loss_bbox: 0.2590, d0.loss_cls: 0.2002, d0.loss_bbox: 0.3964, d1.loss_cls: 0.1500, d1.loss_bbox: 0.2992, d2.loss_cls: 0.1268, d2.loss_bbox: 0.2761, d3.loss_cls: 0.1091, d3.loss_bbox: 0.2670, d4.loss_cls: 0.1034, d4.loss_bbox: 0.2571, loss: 2.5494, grad_norm: 26.2950
2025-06-18 12:26:10,278 - mmdet - INFO - Epoch [1][2450/7033]	lr: 2.000e-04, eta: 16:15:27, time: 1.493, data_time: 0.030, memory: 18289, loss_cls: 0.1095, loss_bbox: 0.2582, d0.loss_cls: 0.2056, d0.loss_bbox: 0.3967, d1.loss_cls: 0.1523, d1.loss_bbox: 0.3019, d2.loss_cls: 0.1315, d2.loss_bbox: 0.2787, d3.loss_cls: 0.1146, d3.loss_bbox: 0.2714, d4.loss_cls: 0.1123, d4.loss_bbox: 0.2586, loss: 2.5914, grad_norm: 26.5977
2025-06-18 12:27:22,758 - mmdet - INFO - Epoch [1][2500/7033]	lr: 2.000e-04, eta: 16:13:55, time: 1.450, data_time: 0.025, memory: 18289, loss_cls: 0.1032, loss_bbox: 0.2607, d0.loss_cls: 0.1974, d0.loss_bbox: 0.3921, d1.loss_cls: 0.1439, d1.loss_bbox: 0.3008, d2.loss_cls: 0.1265, d2.loss_bbox: 0.2814, d3.loss_cls: 0.1094, d3.loss_bbox: 0.2704, d4.loss_cls: 0.1044, d4.loss_bbox: 0.2627, loss: 2.5529, grad_norm: 47.9120
2025-06-18 12:28:35,295 - mmdet - INFO - Epoch [1][2550/7033]	lr: 2.000e-04, eta: 16:12:25, time: 1.451, data_time: 0.029, memory: 18289, loss_cls: 0.1038, loss_bbox: 0.2552, d0.loss_cls: 0.1912, d0.loss_bbox: 0.3766, d1.loss_cls: 0.1399, d1.loss_bbox: 0.2882, d2.loss_cls: 0.1242, d2.loss_bbox: 0.2702, d3.loss_cls: 0.1073, d3.loss_bbox: 0.2627, d4.loss_cls: 0.1044, d4.loss_bbox: 0.2571, loss: 2.4808, grad_norm: 37.0826
2025-06-18 12:29:48,214 - mmdet - INFO - Epoch [1][2600/7033]	lr: 2.000e-04, eta: 16:11:01, time: 1.458, data_time: 0.029, memory: 18289, loss_cls: 0.1112, loss_bbox: 0.2579, d0.loss_cls: 0.1972, d0.loss_bbox: 0.3858, d1.loss_cls: 0.1496, d1.loss_bbox: 0.3048, d2.loss_cls: 0.1340, d2.loss_bbox: 0.2821, d3.loss_cls: 0.1170, d3.loss_bbox: 0.2698, d4.loss_cls: 0.1134, d4.loss_bbox: 0.2586, loss: 2.5814, grad_norm: 30.2045
2025-06-18 12:31:01,191 - mmdet - INFO - Epoch [1][2650/7033]	lr: 2.000e-04, eta: 16:09:39, time: 1.460, data_time: 0.029, memory: 18289, loss_cls: 0.1064, loss_bbox: 0.2802, d0.loss_cls: 0.1923, d0.loss_bbox: 0.3944, d1.loss_cls: 0.1457, d1.loss_bbox: 0.3253, d2.loss_cls: 0.1284, d2.loss_bbox: 0.3005, d3.loss_cls: 0.1143, d3.loss_bbox: 0.2884, d4.loss_cls: 0.1086, d4.loss_bbox: 0.2790, loss: 2.6637, grad_norm: 37.8557
2025-06-18 12:32:13,939 - mmdet - INFO - Epoch [1][2700/7033]	lr: 2.000e-04, eta: 16:08:13, time: 1.455, data_time: 0.030, memory: 18289, loss_cls: 0.1079, loss_bbox: 0.2612, d0.loss_cls: 0.1949, d0.loss_bbox: 0.3821, d1.loss_cls: 0.1526, d1.loss_bbox: 0.3022, d2.loss_cls: 0.1281, d2.loss_bbox: 0.2768, d3.loss_cls: 0.1117, d3.loss_bbox: 0.2680, d4.loss_cls: 0.1080, d4.loss_bbox: 0.2581, loss: 2.5517, grad_norm: 28.5740
2025-06-18 12:33:26,619 - mmdet - INFO - Epoch [1][2750/7033]	lr: 2.000e-04, eta: 16:06:48, time: 1.454, data_time: 0.029, memory: 18289, loss_cls: 0.1097, loss_bbox: 0.2685, d0.loss_cls: 0.2099, d0.loss_bbox: 0.4139, d1.loss_cls: 0.1609, d1.loss_bbox: 0.3188, d2.loss_cls: 0.1361, d2.loss_bbox: 0.2923, d3.loss_cls: 0.1157, d3.loss_bbox: 0.2819, d4.loss_cls: 0.1093, d4.loss_bbox: 0.2707, loss: 2.6876, grad_norm: 54.7667
2025-06-18 12:34:39,619 - mmdet - INFO - Epoch [1][2800/7033]	lr: 2.000e-04, eta: 16:05:27, time: 1.460, data_time: 0.030, memory: 18289, loss_cls: 0.1008, loss_bbox: 0.2527, d0.loss_cls: 0.1967, d0.loss_bbox: 0.3969, d1.loss_cls: 0.1533, d1.loss_bbox: 0.3013, d2.loss_cls: 0.1240, d2.loss_bbox: 0.2780, d3.loss_cls: 0.1068, d3.loss_bbox: 0.2652, d4.loss_cls: 0.1010, d4.loss_bbox: 0.2539, loss: 2.5305, grad_norm: 29.4359
2025-06-18 12:35:52,786 - mmdet - INFO - Epoch [1][2850/7033]	lr: 2.000e-04, eta: 16:04:08, time: 1.463, data_time: 0.030, memory: 18289, loss_cls: 0.0950, loss_bbox: 0.2507, d0.loss_cls: 0.1885, d0.loss_bbox: 0.3809, d1.loss_cls: 0.1369, d1.loss_bbox: 0.2963, d2.loss_cls: 0.1115, d2.loss_bbox: 0.2737, d3.loss_cls: 0.0972, d3.loss_bbox: 0.2650, d4.loss_cls: 0.0936, d4.loss_bbox: 0.2539, loss: 2.4431, grad_norm: 32.0815
2025-06-18 12:37:05,721 - mmdet - INFO - Epoch [1][2900/7033]	lr: 2.000e-04, eta: 16:02:47, time: 1.459, data_time: 0.030, memory: 18289, loss_cls: 0.0918, loss_bbox: 0.2385, d0.loss_cls: 0.1819, d0.loss_bbox: 0.3556, d1.loss_cls: 0.1290, d1.loss_bbox: 0.2767, d2.loss_cls: 0.1114, d2.loss_bbox: 0.2566, d3.loss_cls: 0.0939, d3.loss_bbox: 0.2516, d4.loss_cls: 0.0906, d4.loss_bbox: 0.2409, loss: 2.3185, grad_norm: 29.9573
2025-06-18 12:38:18,443 - mmdet - INFO - Epoch [1][2950/7033]	lr: 2.000e-04, eta: 16:01:23, time: 1.454, data_time: 0.029, memory: 18289, loss_cls: 0.1052, loss_bbox: 0.2627, d0.loss_cls: 0.1974, d0.loss_bbox: 0.3781, d1.loss_cls: 0.1422, d1.loss_bbox: 0.3013, d2.loss_cls: 0.1227, d2.loss_bbox: 0.2812, d3.loss_cls: 0.1119, d3.loss_bbox: 0.2732, d4.loss_cls: 0.1048, d4.loss_bbox: 0.2645, loss: 2.5452, grad_norm: 27.8718
2025-06-18 12:39:31,172 - mmdet - INFO - Exp name: lidar_0075v_cam_res_2x2_hednetmiddleencoder_hednetbackbone4_dss0511_dp03_hugeep2_num2_morton_conv_xy_rope_bs2.py
2025-06-18 12:39:31,172 - mmdet - INFO - Epoch [1][3000/7033]	lr: 2.000e-04, eta: 16:00:00, time: 1.455, data_time: 0.028, memory: 18289, loss_cls: 0.1076, loss_bbox: 0.2584, d0.loss_cls: 0.1956, d0.loss_bbox: 0.3814, d1.loss_cls: 0.1471, d1.loss_bbox: 0.3014, d2.loss_cls: 0.1276, d2.loss_bbox: 0.2841, d3.loss_cls: 0.1169, d3.loss_bbox: 0.2720, d4.loss_cls: 0.1107, d4.loss_bbox: 0.2616, loss: 2.5643, grad_norm: 26.0178
2025-06-18 12:40:45,584 - mmdet - INFO - Epoch [1][3050/7033]	lr: 2.000e-04, eta: 15:58:58, time: 1.488, data_time: 0.028, memory: 18289, loss_cls: 0.1019, loss_bbox: 0.2710, d0.loss_cls: 0.1946, d0.loss_bbox: 0.3872, d1.loss_cls: 0.1437, d1.loss_bbox: 0.3023, d2.loss_cls: 0.1262, d2.loss_bbox: 0.2855, d3.loss_cls: 0.1129, d3.loss_bbox: 0.2720, d4.loss_cls: 0.1023, d4.loss_bbox: 0.2701, loss: 2.5697, grad_norm: 36.0952
2025-06-18 12:41:58,482 - mmdet - INFO - Epoch [1][3100/7033]	lr: 2.000e-04, eta: 15:57:37, time: 1.458, data_time: 0.029, memory: 18289, loss_cls: 0.0953, loss_bbox: 0.2568, d0.loss_cls: 0.1910, d0.loss_bbox: 0.3713, d1.loss_cls: 0.1359, d1.loss_bbox: 0.3039, d2.loss_cls: 0.1143, d2.loss_bbox: 0.2755, d3.loss_cls: 0.1026, d3.loss_bbox: 0.2655, d4.loss_cls: 0.0964, d4.loss_bbox: 0.2601, loss: 2.4687, grad_norm: 31.2132
2025-06-18 12:43:11,535 - mmdet - INFO - Epoch [1][3150/7033]	lr: 2.000e-04, eta: 15:56:19, time: 1.461, data_time: 0.029, memory: 18289, loss_cls: 0.1048, loss_bbox: 0.2671, d0.loss_cls: 0.1947, d0.loss_bbox: 0.3959, d1.loss_cls: 0.1467, d1.loss_bbox: 0.3171, d2.loss_cls: 0.1258, d2.loss_bbox: 0.2907, d3.loss_cls: 0.1116, d3.loss_bbox: 0.2768, d4.loss_cls: 0.1054, d4.loss_bbox: 0.2683, loss: 2.6049, grad_norm: 37.1535
2025-06-18 12:44:24,349 - mmdet - INFO - Epoch [1][3200/7033]	lr: 2.000e-04, eta: 15:54:57, time: 1.456, data_time: 0.027, memory: 18289, loss_cls: 0.1037, loss_bbox: 0.2543, d0.loss_cls: 0.1955, d0.loss_bbox: 0.3878, d1.loss_cls: 0.1431, d1.loss_bbox: 0.3041, d2.loss_cls: 0.1234, d2.loss_bbox: 0.2785, d3.loss_cls: 0.1091, d3.loss_bbox: 0.2704, d4.loss_cls: 0.1045, d4.loss_bbox: 0.2586, loss: 2.5331, grad_norm: 45.1273
2025-06-18 12:45:36,912 - mmdet - INFO - Epoch [1][3250/7033]	lr: 2.000e-04, eta: 15:53:33, time: 1.451, data_time: 0.026, memory: 18289, loss_cls: 0.0939, loss_bbox: 0.2525, d0.loss_cls: 0.1809, d0.loss_bbox: 0.3733, d1.loss_cls: 0.1307, d1.loss_bbox: 0.2908, d2.loss_cls: 0.1089, d2.loss_bbox: 0.2698, d3.loss_cls: 0.0999, d3.loss_bbox: 0.2611, d4.loss_cls: 0.0956, d4.loss_bbox: 0.2529, loss: 2.4103, grad_norm: 27.9117
2025-06-18 12:46:49,897 - mmdet - INFO - Epoch [1][3300/7033]	lr: 2.000e-04, eta: 15:52:14, time: 1.460, data_time: 0.030, memory: 18289, loss_cls: 0.1015, loss_bbox: 0.2653, d0.loss_cls: 0.1874, d0.loss_bbox: 0.3930, d1.loss_cls: 0.1346, d1.loss_bbox: 0.3091, d2.loss_cls: 0.1176, d2.loss_bbox: 0.2859, d3.loss_cls: 0.1077, d3.loss_bbox: 0.2732, d4.loss_cls: 0.1033, d4.loss_bbox: 0.2641, loss: 2.5426, grad_norm: 36.5435
2025-06-18 12:48:02,616 - mmdet - INFO - Epoch [1][3350/7033]	lr: 2.000e-04, eta: 15:50:52, time: 1.454, data_time: 0.030, memory: 18289, loss_cls: 0.0985, loss_bbox: 0.2612, d0.loss_cls: 0.1910, d0.loss_bbox: 0.3915, d1.loss_cls: 0.1355, d1.loss_bbox: 0.3015, d2.loss_cls: 0.1175, d2.loss_bbox: 0.2823, d3.loss_cls: 0.1080, d3.loss_bbox: 0.2725, d4.loss_cls: 0.1010, d4.loss_bbox: 0.2621, loss: 2.5226, grad_norm: 37.4572
2025-06-18 12:49:15,548 - mmdet - INFO - Epoch [1][3400/7033]	lr: 2.000e-04, eta: 15:49:33, time: 1.459, data_time: 0.029, memory: 18289, loss_cls: 0.1028, loss_bbox: 0.2650, d0.loss_cls: 0.1904, d0.loss_bbox: 0.3918, d1.loss_cls: 0.1392, d1.loss_bbox: 0.3054, d2.loss_cls: 0.1194, d2.loss_bbox: 0.2847, d3.loss_cls: 0.1054, d3.loss_bbox: 0.2768, d4.loss_cls: 0.1035, d4.loss_bbox: 0.2676, loss: 2.5520, grad_norm: 93.8313
2025-06-18 12:50:28,397 - mmdet - INFO - Epoch [1][3450/7033]	lr: 2.000e-04, eta: 15:48:13, time: 1.457, data_time: 0.027, memory: 18289, loss_cls: 0.0953, loss_bbox: 0.2422, d0.loss_cls: 0.1859, d0.loss_bbox: 0.3734, d1.loss_cls: 0.1339, d1.loss_bbox: 0.2863, d2.loss_cls: 0.1133, d2.loss_bbox: 0.2638, d3.loss_cls: 0.1012, d3.loss_bbox: 0.2530, d4.loss_cls: 0.0958, d4.loss_bbox: 0.2461, loss: 2.3899, grad_norm: 75.5758
2025-06-18 12:51:41,176 - mmdet - INFO - Epoch [1][3500/7033]	lr: 2.000e-04, eta: 15:46:53, time: 1.456, data_time: 0.029, memory: 18289, loss_cls: 0.0996, loss_bbox: 0.2493, d0.loss_cls: 0.1921, d0.loss_bbox: 0.3698, d1.loss_cls: 0.1378, d1.loss_bbox: 0.2857, d2.loss_cls: 0.1200, d2.loss_bbox: 0.2650, d3.loss_cls: 0.1048, d3.loss_bbox: 0.2594, d4.loss_cls: 0.1004, d4.loss_bbox: 0.2503, loss: 2.4341, grad_norm: 37.0405
2025-06-18 12:52:53,897 - mmdet - INFO - Epoch [1][3550/7033]	lr: 2.000e-04, eta: 15:45:32, time: 1.454, data_time: 0.029, memory: 18289, loss_cls: 0.0983, loss_bbox: 0.2437, d0.loss_cls: 0.1878, d0.loss_bbox: 0.3651, d1.loss_cls: 0.1353, d1.loss_bbox: 0.2836, d2.loss_cls: 0.1159, d2.loss_bbox: 0.2632, d3.loss_cls: 0.1023, d3.loss_bbox: 0.2551, d4.loss_cls: 0.1011, d4.loss_bbox: 0.2453, loss: 2.3965, grad_norm: 34.2339
2025-06-18 12:54:06,983 - mmdet - INFO - Epoch [1][3600/7033]	lr: 2.000e-04, eta: 15:44:15, time: 1.462, data_time: 0.033, memory: 18289, loss_cls: 0.0891, loss_bbox: 0.2475, d0.loss_cls: 0.1808, d0.loss_bbox: 0.3652, d1.loss_cls: 0.1235, d1.loss_bbox: 0.2844, d2.loss_cls: 0.1068, d2.loss_bbox: 0.2667, d3.loss_cls: 0.0947, d3.loss_bbox: 0.2576, d4.loss_cls: 0.0909, d4.loss_bbox: 0.2499, loss: 2.3569, grad_norm: 40.4895
2025-06-18 12:55:21,343 - mmdet - INFO - Epoch [1][3650/7033]	lr: 2.000e-04, eta: 15:43:12, time: 1.487, data_time: 0.030, memory: 18289, loss_cls: 0.0965, loss_bbox: 0.2506, d0.loss_cls: 0.1861, d0.loss_bbox: 0.3774, d1.loss_cls: 0.1386, d1.loss_bbox: 0.2970, d2.loss_cls: 0.1213, d2.loss_bbox: 0.2751, d3.loss_cls: 0.1063, d3.loss_bbox: 0.2641, d4.loss_cls: 0.0985, d4.loss_bbox: 0.2548, loss: 2.4663, grad_norm: 38.0129
2025-06-18 12:56:33,973 - mmdet - INFO - Epoch [1][3700/7033]	lr: 2.000e-04, eta: 15:41:51, time: 1.453, data_time: 0.026, memory: 18289, loss_cls: 0.0947, loss_bbox: 0.2570, d0.loss_cls: 0.1908, d0.loss_bbox: 0.3859, d1.loss_cls: 0.1288, d1.loss_bbox: 0.3034, d2.loss_cls: 0.1135, d2.loss_bbox: 0.2826, d3.loss_cls: 0.1012, d3.loss_bbox: 0.2735, d4.loss_cls: 0.0954, d4.loss_bbox: 0.2611, loss: 2.4878, grad_norm: 38.5572
2025-06-18 12:57:46,680 - mmdet - INFO - Epoch [1][3750/7033]	lr: 2.000e-04, eta: 15:40:30, time: 1.454, data_time: 0.030, memory: 18289, loss_cls: 0.0983, loss_bbox: 0.2568, d0.loss_cls: 0.1857, d0.loss_bbox: 0.3702, d1.loss_cls: 0.1286, d1.loss_bbox: 0.2937, d2.loss_cls: 0.1148, d2.loss_bbox: 0.2724, d3.loss_cls: 0.1045, d3.loss_bbox: 0.2607, d4.loss_cls: 0.0983, d4.loss_bbox: 0.2578, loss: 2.4417, grad_norm: 30.5656
2025-06-18 12:58:59,873 - mmdet - INFO - Epoch [1][3800/7033]	lr: 2.000e-04, eta: 15:39:15, time: 1.464, data_time: 0.031, memory: 18289, loss_cls: 0.1003, loss_bbox: 0.2573, d0.loss_cls: 0.1973, d0.loss_bbox: 0.3674, d1.loss_cls: 0.1378, d1.loss_bbox: 0.2852, d2.loss_cls: 0.1185, d2.loss_bbox: 0.2709, d3.loss_cls: 0.1071, d3.loss_bbox: 0.2607, d4.loss_cls: 0.1009, d4.loss_bbox: 0.2539, loss: 2.4574, grad_norm: 36.7421
2025-06-18 13:00:12,919 - mmdet - INFO - Epoch [1][3850/7033]	lr: 2.000e-04, eta: 15:37:58, time: 1.461, data_time: 0.030, memory: 18289, loss_cls: 0.0949, loss_bbox: 0.2576, d0.loss_cls: 0.1854, d0.loss_bbox: 0.3725, d1.loss_cls: 0.1301, d1.loss_bbox: 0.2930, d2.loss_cls: 0.1110, d2.loss_bbox: 0.2720, d3.loss_cls: 0.1015, d3.loss_bbox: 0.2633, d4.loss_cls: 0.0970, d4.loss_bbox: 0.2581, loss: 2.4365, grad_norm: 30.9602
2025-06-18 13:01:25,681 - mmdet - INFO - Epoch [1][3900/7033]	lr: 2.000e-04, eta: 15:36:39, time: 1.455, data_time: 0.028, memory: 18289, loss_cls: 0.0942, loss_bbox: 0.2516, d0.loss_cls: 0.1830, d0.loss_bbox: 0.3609, d1.loss_cls: 0.1295, d1.loss_bbox: 0.2824, d2.loss_cls: 0.1117, d2.loss_bbox: 0.2677, d3.loss_cls: 0.0998, d3.loss_bbox: 0.2557, d4.loss_cls: 0.0935, d4.loss_bbox: 0.2507, loss: 2.3806, grad_norm: 26.8072
2025-06-18 13:02:38,675 - mmdet - INFO - Epoch [1][3950/7033]	lr: 2.000e-04, eta: 15:35:22, time: 1.460, data_time: 0.029, memory: 18289, loss_cls: 0.0911, loss_bbox: 0.2550, d0.loss_cls: 0.1905, d0.loss_bbox: 0.3850, d1.loss_cls: 0.1273, d1.loss_bbox: 0.2992, d2.loss_cls: 0.1074, d2.loss_bbox: 0.2785, d3.loss_cls: 0.0947, d3.loss_bbox: 0.2664, d4.loss_cls: 0.0908, d4.loss_bbox: 0.2564, loss: 2.4423, grad_norm: 29.3671
2025-06-18 13:03:53,096 - mmdet - INFO - Exp name: lidar_0075v_cam_res_2x2_hednetmiddleencoder_hednetbackbone4_dss0511_dp03_hugeep2_num2_morton_conv_xy_rope_bs2.py
2025-06-18 13:03:53,096 - mmdet - INFO - Epoch [1][4000/7033]	lr: 2.000e-04, eta: 15:34:18, time: 1.488, data_time: 0.029, memory: 18289, loss_cls: 0.1035, loss_bbox: 0.2501, d0.loss_cls: 0.2090, d0.loss_bbox: 0.3695, d1.loss_cls: 0.1726, d1.loss_bbox: 0.2970, d2.loss_cls: 0.1423, d2.loss_bbox: 0.2722, d3.loss_cls: 0.1172, d3.loss_bbox: 0.2658, d4.loss_cls: 0.1081, d4.loss_bbox: 0.2507, loss: 2.5580, grad_norm: 47.0395
2025-06-18 13:05:05,705 - mmdet - INFO - Epoch [1][4050/7033]	lr: 2.000e-04, eta: 15:32:58, time: 1.452, data_time: 0.028, memory: 18289, loss_cls: 0.1106, loss_bbox: 0.2544, d0.loss_cls: 0.2047, d0.loss_bbox: 0.3940, d1.loss_cls: 0.1757, d1.loss_bbox: 0.3313, d2.loss_cls: 0.1472, d2.loss_bbox: 0.2876, d3.loss_cls: 0.1233, d3.loss_bbox: 0.2698, d4.loss_cls: 0.1109, d4.loss_bbox: 0.2590, loss: 2.6685, grad_norm: 34.8580
2025-06-18 13:06:18,612 - mmdet - INFO - Epoch [1][4100/7033]	lr: 2.000e-04, eta: 15:31:40, time: 1.458, data_time: 0.028, memory: 18289, loss_cls: 0.0977, loss_bbox: 0.2585, d0.loss_cls: 0.1962, d0.loss_bbox: 0.3847, d1.loss_cls: 0.1440, d1.loss_bbox: 0.3148, d2.loss_cls: 0.1294, d2.loss_bbox: 0.2857, d3.loss_cls: 0.1098, d3.loss_bbox: 0.2708, d4.loss_cls: 0.1004, d4.loss_bbox: 0.2599, loss: 2.5520, grad_norm: 35.7670
2025-06-18 13:07:31,442 - mmdet - INFO - Epoch [1][4150/7033]	lr: 2.000e-04, eta: 15:30:22, time: 1.457, data_time: 0.026, memory: 18289, loss_cls: 0.0937, loss_bbox: 0.2490, d0.loss_cls: 0.1843, d0.loss_bbox: 0.3714, d1.loss_cls: 0.1402, d1.loss_bbox: 0.2980, d2.loss_cls: 0.1156, d2.loss_bbox: 0.2709, d3.loss_cls: 0.0999, d3.loss_bbox: 0.2612, d4.loss_cls: 0.0949, d4.loss_bbox: 0.2503, loss: 2.4293, grad_norm: 32.4686
2025-06-18 13:08:44,097 - mmdet - INFO - Epoch [1][4200/7033]	lr: 2.000e-04, eta: 15:29:02, time: 1.453, data_time: 0.025, memory: 18289, loss_cls: 0.0993, loss_bbox: 0.2661, d0.loss_cls: 0.1908, d0.loss_bbox: 0.3777, d1.loss_cls: 0.1353, d1.loss_bbox: 0.3054, d2.loss_cls: 0.1219, d2.loss_bbox: 0.2796, d3.loss_cls: 0.1049, d3.loss_bbox: 0.2710, d4.loss_cls: 0.1001, d4.loss_bbox: 0.2652, loss: 2.5172, grad_norm: 36.1852
2025-06-18 13:09:57,005 - mmdet - INFO - Epoch [1][4250/7033]	lr: 2.000e-04, eta: 15:27:45, time: 1.458, data_time: 0.029, memory: 18289, loss_cls: 0.0916, loss_bbox: 0.2380, d0.loss_cls: 0.1796, d0.loss_bbox: 0.3513, d1.loss_cls: 0.1309, d1.loss_bbox: 0.2783, d2.loss_cls: 0.1119, d2.loss_bbox: 0.2557, d3.loss_cls: 0.0981, d3.loss_bbox: 0.2474, d4.loss_cls: 0.0951, d4.loss_bbox: 0.2390, loss: 2.3168, grad_norm: 32.2822
2025-06-18 13:11:09,748 - mmdet - INFO - Epoch [1][4300/7033]	lr: 2.000e-04, eta: 15:26:26, time: 1.455, data_time: 0.025, memory: 18289, loss_cls: 0.0967, loss_bbox: 0.2590, d0.loss_cls: 0.1880, d0.loss_bbox: 0.3832, d1.loss_cls: 0.1328, d1.loss_bbox: 0.3061, d2.loss_cls: 0.1152, d2.loss_bbox: 0.2819, d3.loss_cls: 0.1032, d3.loss_bbox: 0.2726, d4.loss_cls: 0.0978, d4.loss_bbox: 0.2617, loss: 2.4982, grad_norm: 26.1723
2025-06-18 13:12:22,827 - mmdet - INFO - Epoch [1][4350/7033]	lr: 2.000e-04, eta: 15:25:10, time: 1.462, data_time: 0.028, memory: 18289, loss_cls: 0.0899, loss_bbox: 0.2437, d0.loss_cls: 0.1820, d0.loss_bbox: 0.3638, d1.loss_cls: 0.1214, d1.loss_bbox: 0.2833, d2.loss_cls: 0.1046, d2.loss_bbox: 0.2657, d3.loss_cls: 0.0923, d3.loss_bbox: 0.2578, d4.loss_cls: 0.0897, d4.loss_bbox: 0.2496, loss: 2.3438, grad_norm: 59.1720
2025-06-18 13:13:35,928 - mmdet - INFO - Epoch [1][4400/7033]	lr: 2.000e-04, eta: 15:23:55, time: 1.462, data_time: 0.029, memory: 18289, loss_cls: 0.0940, loss_bbox: 0.2474, d0.loss_cls: 0.1914, d0.loss_bbox: 0.3787, d1.loss_cls: 0.1299, d1.loss_bbox: 0.2952, d2.loss_cls: 0.1129, d2.loss_bbox: 0.2716, d3.loss_cls: 0.0995, d3.loss_bbox: 0.2589, d4.loss_cls: 0.0971, d4.loss_bbox: 0.2504, loss: 2.4270, grad_norm: 44.8504
2025-06-18 13:14:48,580 - mmdet - INFO - Epoch [1][4450/7033]	lr: 2.000e-04, eta: 15:22:36, time: 1.453, data_time: 0.028, memory: 18289, loss_cls: 0.0930, loss_bbox: 0.2452, d0.loss_cls: 0.1837, d0.loss_bbox: 0.3699, d1.loss_cls: 0.1249, d1.loss_bbox: 0.2857, d2.loss_cls: 0.1115, d2.loss_bbox: 0.2653, d3.loss_cls: 0.0970, d3.loss_bbox: 0.2552, d4.loss_cls: 0.0941, d4.loss_bbox: 0.2454, loss: 2.3709, grad_norm: 31.4329
2025-06-18 13:16:01,589 - mmdet - INFO - Epoch [1][4500/7033]	lr: 2.000e-04, eta: 15:21:20, time: 1.460, data_time: 0.029, memory: 18289, loss_cls: 0.0914, loss_bbox: 0.2390, d0.loss_cls: 0.1848, d0.loss_bbox: 0.3577, d1.loss_cls: 0.1251, d1.loss_bbox: 0.2776, d2.loss_cls: 0.1065, d2.loss_bbox: 0.2548, d3.loss_cls: 0.0944, d3.loss_bbox: 0.2480, d4.loss_cls: 0.0899, d4.loss_bbox: 0.2412, loss: 2.3104, grad_norm: 39.9049
2025-06-18 13:17:14,459 - mmdet - INFO - Epoch [1][4550/7033]	lr: 2.000e-04, eta: 15:20:03, time: 1.457, data_time: 0.026, memory: 18289, loss_cls: 0.0990, loss_bbox: 0.2515, d0.loss_cls: 0.1981, d0.loss_bbox: 0.3777, d1.loss_cls: 0.1408, d1.loss_bbox: 0.2941, d2.loss_cls: 0.1202, d2.loss_bbox: 0.2675, d3.loss_cls: 0.1032, d3.loss_bbox: 0.2621, d4.loss_cls: 0.0983, d4.loss_bbox: 0.2542, loss: 2.4669, grad_norm: 43.3638
2025-06-18 13:18:27,344 - mmdet - INFO - Epoch [1][4600/7033]	lr: 2.000e-04, eta: 15:18:46, time: 1.458, data_time: 0.027, memory: 18289, loss_cls: 0.0994, loss_bbox: 0.2536, d0.loss_cls: 0.1916, d0.loss_bbox: 0.3738, d1.loss_cls: 0.1362, d1.loss_bbox: 0.2948, d2.loss_cls: 0.1164, d2.loss_bbox: 0.2706, d3.loss_cls: 0.1059, d3.loss_bbox: 0.2634, d4.loss_cls: 0.1022, d4.loss_bbox: 0.2549, loss: 2.4629, grad_norm: 33.1923
2025-06-18 13:19:40,077 - mmdet - INFO - Epoch [1][4650/7033]	lr: 2.000e-04, eta: 15:17:28, time: 1.455, data_time: 0.025, memory: 18289, loss_cls: 0.0970, loss_bbox: 0.2404, d0.loss_cls: 0.1936, d0.loss_bbox: 0.3678, d1.loss_cls: 0.1316, d1.loss_bbox: 0.2841, d2.loss_cls: 0.1115, d2.loss_bbox: 0.2624, d3.loss_cls: 0.1014, d3.loss_bbox: 0.2549, d4.loss_cls: 0.0967, d4.loss_bbox: 0.2431, loss: 2.3844, grad_norm: 40.4300
2025-06-18 13:20:54,639 - mmdet - INFO - Epoch [1][4700/7033]	lr: 2.000e-04, eta: 15:16:25, time: 1.491, data_time: 0.028, memory: 18289, loss_cls: 0.0911, loss_bbox: 0.2502, d0.loss_cls: 0.1846, d0.loss_bbox: 0.3709, d1.loss_cls: 0.1283, d1.loss_bbox: 0.2881, d2.loss_cls: 0.1090, d2.loss_bbox: 0.2649, d3.loss_cls: 0.0936, d3.loss_bbox: 0.2637, d4.loss_cls: 0.0915, d4.loss_bbox: 0.2584, loss: 2.3944, grad_norm: 44.5041
2025-06-18 13:22:07,165 - mmdet - INFO - Epoch [1][4750/7033]	lr: 2.000e-04, eta: 15:15:05, time: 1.451, data_time: 0.028, memory: 18289, loss_cls: 0.0889, loss_bbox: 0.2360, d0.loss_cls: 0.1800, d0.loss_bbox: 0.3504, d1.loss_cls: 0.1271, d1.loss_bbox: 0.2743, d2.loss_cls: 0.1038, d2.loss_bbox: 0.2540, d3.loss_cls: 0.0916, d3.loss_bbox: 0.2437, d4.loss_cls: 0.0882, d4.loss_bbox: 0.2355, loss: 2.2736, grad_norm: 68.7938
2025-06-18 13:23:19,956 - mmdet - INFO - Epoch [1][4800/7033]	lr: 2.000e-04, eta: 15:13:48, time: 1.456, data_time: 0.025, memory: 18289, loss_cls: 0.0896, loss_bbox: 0.2329, d0.loss_cls: 0.1866, d0.loss_bbox: 0.3553, d1.loss_cls: 0.1319, d1.loss_bbox: 0.2779, d2.loss_cls: 0.1045, d2.loss_bbox: 0.2542, d3.loss_cls: 0.0922, d3.loss_bbox: 0.2453, d4.loss_cls: 0.0900, d4.loss_bbox: 0.2373, loss: 2.2976, grad_norm: 31.4987
2025-06-18 13:24:33,002 - mmdet - INFO - Epoch [1][4850/7033]	lr: 2.000e-04, eta: 15:12:33, time: 1.461, data_time: 0.028, memory: 18289, loss_cls: 0.0971, loss_bbox: 0.2438, d0.loss_cls: 0.2017, d0.loss_bbox: 0.3713, d1.loss_cls: 0.1432, d1.loss_bbox: 0.2898, d2.loss_cls: 0.1181, d2.loss_bbox: 0.2666, d3.loss_cls: 0.1048, d3.loss_bbox: 0.2560, d4.loss_cls: 0.1001, d4.loss_bbox: 0.2458, loss: 2.4383, grad_norm: 343.7918
2025-06-18 13:25:45,834 - mmdet - INFO - Epoch [1][4900/7033]	lr: 2.000e-04, eta: 15:11:16, time: 1.457, data_time: 0.028, memory: 18289, loss_cls: 0.1040, loss_bbox: 0.2513, d0.loss_cls: 0.1910, d0.loss_bbox: 0.3788, d1.loss_cls: 0.1378, d1.loss_bbox: 0.2945, d2.loss_cls: 0.1181, d2.loss_bbox: 0.2740, d3.loss_cls: 0.1085, d3.loss_bbox: 0.2627, d4.loss_cls: 0.1035, d4.loss_bbox: 0.2523, loss: 2.4764, grad_norm: 40.9762
2025-06-18 13:26:58,769 - mmdet - INFO - Epoch [1][4950/7033]	lr: 2.000e-04, eta: 15:10:00, time: 1.459, data_time: 0.028, memory: 18289, loss_cls: 0.0975, loss_bbox: 0.2496, d0.loss_cls: 0.1916, d0.loss_bbox: 0.3774, d1.loss_cls: 0.1367, d1.loss_bbox: 0.2930, d2.loss_cls: 0.1189, d2.loss_bbox: 0.2709, d3.loss_cls: 0.1043, d3.loss_bbox: 0.2621, d4.loss_cls: 0.0982, d4.loss_bbox: 0.2522, loss: 2.4525, grad_norm: 52.4132
2025-06-18 13:28:11,469 - mmdet - INFO - Exp name: lidar_0075v_cam_res_2x2_hednetmiddleencoder_hednetbackbone4_dss0511_dp03_hugeep2_num2_morton_conv_xy_rope_bs2.py
2025-06-18 13:28:11,469 - mmdet - INFO - Epoch [1][5000/7033]	lr: 2.000e-04, eta: 15:08:42, time: 1.454, data_time: 0.027, memory: 18289, loss_cls: 0.0866, loss_bbox: 0.2427, d0.loss_cls: 0.1766, d0.loss_bbox: 0.3547, d1.loss_cls: 0.1187, d1.loss_bbox: 0.2769, d2.loss_cls: 0.1012, d2.loss_bbox: 0.2590, d3.loss_cls: 0.0897, d3.loss_bbox: 0.2532, d4.loss_cls: 0.0876, d4.loss_bbox: 0.2449, loss: 2.2918, grad_norm: 50.1659
2025-06-18 13:29:24,202 - mmdet - INFO - Epoch [1][5050/7033]	lr: 2.000e-04, eta: 15:07:25, time: 1.455, data_time: 0.025, memory: 18289, loss_cls: 0.0946, loss_bbox: 0.2433, d0.loss_cls: 0.1854, d0.loss_bbox: 0.3696, d1.loss_cls: 0.1310, d1.loss_bbox: 0.2896, d2.loss_cls: 0.1116, d2.loss_bbox: 0.2605, d3.loss_cls: 0.1017, d3.loss_bbox: 0.2534, d4.loss_cls: 0.0971, d4.loss_bbox: 0.2442, loss: 2.3820, grad_norm: 61.7486
2025-06-18 13:30:36,763 - mmdet - INFO - Epoch [1][5100/7033]	lr: 2.000e-04, eta: 15:06:06, time: 1.451, data_time: 0.025, memory: 18289, loss_cls: 0.0938, loss_bbox: 0.2520, d0.loss_cls: 0.1859, d0.loss_bbox: 0.3682, d1.loss_cls: 0.1284, d1.loss_bbox: 0.2939, d2.loss_cls: 0.1097, d2.loss_bbox: 0.2716, d3.loss_cls: 0.0960, d3.loss_bbox: 0.2625, d4.loss_cls: 0.0944, d4.loss_bbox: 0.2534, loss: 2.4097, grad_norm: 35.7297
2025-06-18 13:31:49,750 - mmdet - INFO - Epoch [1][5150/7033]	lr: 2.000e-04, eta: 15:04:51, time: 1.460, data_time: 0.030, memory: 18289, loss_cls: 0.1029, loss_bbox: 0.2497, d0.loss_cls: 0.1929, d0.loss_bbox: 0.3686, d1.loss_cls: 0.1366, d1.loss_bbox: 0.2899, d2.loss_cls: 0.1190, d2.loss_bbox: 0.2716, d3.loss_cls: 0.1066, d3.loss_bbox: 0.2598, d4.loss_cls: 0.1043, d4.loss_bbox: 0.2520, loss: 2.4538, grad_norm: 29.0567
2025-06-18 13:33:04,354 - mmdet - INFO - Epoch [1][5200/7033]	lr: 2.000e-04, eta: 15:03:47, time: 1.492, data_time: 0.028, memory: 18289, loss_cls: 0.0953, loss_bbox: 0.2455, d0.loss_cls: 0.1855, d0.loss_bbox: 0.3685, d1.loss_cls: 0.1267, d1.loss_bbox: 0.2872, d2.loss_cls: 0.1076, d2.loss_bbox: 0.2646, d3.loss_cls: 0.0977, d3.loss_bbox: 0.2563, d4.loss_cls: 0.0940, d4.loss_bbox: 0.2492, loss: 2.3781, grad_norm: 27.1321
2025-06-18 13:34:16,939 - mmdet - INFO - Epoch [1][5250/7033]	lr: 2.000e-04, eta: 15:02:29, time: 1.452, data_time: 0.025, memory: 18289, loss_cls: 0.0927, loss_bbox: 0.2401, d0.loss_cls: 0.1900, d0.loss_bbox: 0.3649, d1.loss_cls: 0.1289, d1.loss_bbox: 0.2799, d2.loss_cls: 0.1091, d2.loss_bbox: 0.2603, d3.loss_cls: 0.0965, d3.loss_bbox: 0.2533, d4.loss_cls: 0.0936, d4.loss_bbox: 0.2408, loss: 2.3500, grad_norm: 36.9420
2025-06-18 13:35:29,584 - mmdet - INFO - Epoch [1][5300/7033]	lr: 2.000e-04, eta: 15:01:11, time: 1.453, data_time: 0.028, memory: 18289, loss_cls: 0.0860, loss_bbox: 0.2341, d0.loss_cls: 0.1875, d0.loss_bbox: 0.3663, d1.loss_cls: 0.1260, d1.loss_bbox: 0.2779, d2.loss_cls: 0.1069, d2.loss_bbox: 0.2539, d3.loss_cls: 0.0910, d3.loss_bbox: 0.2495, d4.loss_cls: 0.0875, d4.loss_bbox: 0.2379, loss: 2.3045, grad_norm: 47.3478
2025-06-18 13:36:42,371 - mmdet - INFO - Epoch [1][5350/7033]	lr: 2.000e-04, eta: 14:59:55, time: 1.456, data_time: 0.025, memory: 18289, loss_cls: 0.1017, loss_bbox: 0.2564, d0.loss_cls: 0.2055, d0.loss_bbox: 0.3868, d1.loss_cls: 0.1388, d1.loss_bbox: 0.3005, d2.loss_cls: 0.1194, d2.loss_bbox: 0.2795, d3.loss_cls: 0.1068, d3.loss_bbox: 0.2696, d4.loss_cls: 0.1034, d4.loss_bbox: 0.2595, loss: 2.5281, grad_norm: 48.7461
2025-06-18 13:37:55,333 - mmdet - INFO - Epoch [1][5400/7033]	lr: 2.000e-04, eta: 14:58:39, time: 1.459, data_time: 0.028, memory: 18289, loss_cls: 0.0960, loss_bbox: 0.2430, d0.loss_cls: 0.2025, d0.loss_bbox: 0.3792, d1.loss_cls: 0.1433, d1.loss_bbox: 0.2928, d2.loss_cls: 0.1211, d2.loss_bbox: 0.2683, d3.loss_cls: 0.1032, d3.loss_bbox: 0.2605, d4.loss_cls: 0.0974, d4.loss_bbox: 0.2460, loss: 2.4534, grad_norm: 245.2022
2025-06-18 13:39:08,083 - mmdet - INFO - Epoch [1][5450/7033]	lr: 2.000e-04, eta: 14:57:22, time: 1.455, data_time: 0.028, memory: 18289, loss_cls: 0.0953, loss_bbox: 0.2556, d0.loss_cls: 0.1942, d0.loss_bbox: 0.3772, d1.loss_cls: 0.1368, d1.loss_bbox: 0.2951, d2.loss_cls: 0.1179, d2.loss_bbox: 0.2675, d3.loss_cls: 0.1008, d3.loss_bbox: 0.2566, d4.loss_cls: 0.0980, d4.loss_bbox: 0.2531, loss: 2.4480, grad_norm: 30.8965
2025-06-18 13:40:20,715 - mmdet - INFO - Epoch [1][5500/7033]	lr: 2.000e-04, eta: 14:56:05, time: 1.453, data_time: 0.025, memory: 18289, loss_cls: 0.0974, loss_bbox: 0.2381, d0.loss_cls: 0.1880, d0.loss_bbox: 0.3570, d1.loss_cls: 0.1332, d1.loss_bbox: 0.2775, d2.loss_cls: 0.1100, d2.loss_bbox: 0.2581, d3.loss_cls: 0.0993, d3.loss_bbox: 0.2479, d4.loss_cls: 0.0963, d4.loss_bbox: 0.2420, loss: 2.3449, grad_norm: 38.6483
2025-06-18 13:41:33,439 - mmdet - INFO - Epoch [1][5550/7033]	lr: 2.000e-04, eta: 14:54:48, time: 1.455, data_time: 0.028, memory: 18289, loss_cls: 0.0917, loss_bbox: 0.2419, d0.loss_cls: 0.1963, d0.loss_bbox: 0.3689, d1.loss_cls: 0.1336, d1.loss_bbox: 0.2880, d2.loss_cls: 0.1089, d2.loss_bbox: 0.2636, d3.loss_cls: 0.0966, d3.loss_bbox: 0.2529, d4.loss_cls: 0.0920, d4.loss_bbox: 0.2435, loss: 2.3779, grad_norm: 43.8876
2025-06-18 13:42:45,990 - mmdet - INFO - Epoch [1][5600/7033]	lr: 2.000e-04, eta: 14:53:30, time: 1.451, data_time: 0.025, memory: 18289, loss_cls: 0.0916, loss_bbox: 0.2442, d0.loss_cls: 0.1812, d0.loss_bbox: 0.3767, d1.loss_cls: 0.1241, d1.loss_bbox: 0.2910, d2.loss_cls: 0.1038, d2.loss_bbox: 0.2662, d3.loss_cls: 0.0940, d3.loss_bbox: 0.2579, d4.loss_cls: 0.0919, d4.loss_bbox: 0.2454, loss: 2.3679, grad_norm: 60.8901
2025-06-18 13:43:58,603 - mmdet - INFO - Epoch [1][5650/7033]	lr: 2.000e-04, eta: 14:52:13, time: 1.452, data_time: 0.025, memory: 18289, loss_cls: 0.0936, loss_bbox: 0.2514, d0.loss_cls: 0.1932, d0.loss_bbox: 0.3804, d1.loss_cls: 0.1393, d1.loss_bbox: 0.2929, d2.loss_cls: 0.1108, d2.loss_bbox: 0.2727, d3.loss_cls: 0.1002, d3.loss_bbox: 0.2624, d4.loss_cls: 0.0957, d4.loss_bbox: 0.2502, loss: 2.4428, grad_norm: 24.1176
2025-06-18 13:45:12,203 - mmdet - INFO - Epoch [1][5700/7033]	lr: 2.000e-04, eta: 14:51:02, time: 1.472, data_time: 0.047, memory: 18289, loss_cls: 0.0890, loss_bbox: 0.2410, d0.loss_cls: 0.1814, d0.loss_bbox: 0.3608, d1.loss_cls: 0.1252, d1.loss_bbox: 0.2791, d2.loss_cls: 0.1052, d2.loss_bbox: 0.2590, d3.loss_cls: 0.0937, d3.loss_bbox: 0.2486, d4.loss_cls: 0.0904, d4.loss_bbox: 0.2403, loss: 2.3137, grad_norm: 51.3499
2025-06-18 13:46:25,006 - mmdet - INFO - Epoch [1][5750/7033]	lr: 2.000e-04, eta: 14:49:46, time: 1.456, data_time: 0.028, memory: 18289, loss_cls: 0.0879, loss_bbox: 0.2392, d0.loss_cls: 0.1854, d0.loss_bbox: 0.3629, d1.loss_cls: 0.1290, d1.loss_bbox: 0.2799, d2.loss_cls: 0.1075, d2.loss_bbox: 0.2591, d3.loss_cls: 0.0977, d3.loss_bbox: 0.2480, d4.loss_cls: 0.0933, d4.loss_bbox: 0.2374, loss: 2.3272, grad_norm: 75.4594
2025-06-18 13:47:37,893 - mmdet - INFO - Epoch [1][5800/7033]	lr: 2.000e-04, eta: 14:48:31, time: 1.458, data_time: 0.029, memory: 18289, loss_cls: 0.0888, loss_bbox: 0.2339, d0.loss_cls: 0.1842, d0.loss_bbox: 0.3614, d1.loss_cls: 0.1257, d1.loss_bbox: 0.2737, d2.loss_cls: 0.1061, d2.loss_bbox: 0.2524, d3.loss_cls: 0.0921, d3.loss_bbox: 0.2452, d4.loss_cls: 0.0897, d4.loss_bbox: 0.2367, loss: 2.2899, grad_norm: 21.0251
2025-06-18 13:48:50,374 - mmdet - INFO - Epoch [1][5850/7033]	lr: 2.000e-04, eta: 14:47:13, time: 1.450, data_time: 0.024, memory: 18289, loss_cls: 0.0942, loss_bbox: 0.2385, d0.loss_cls: 0.1970, d0.loss_bbox: 0.3680, d1.loss_cls: 0.1323, d1.loss_bbox: 0.2843, d2.loss_cls: 0.1097, d2.loss_bbox: 0.2638, d3.loss_cls: 0.0974, d3.loss_bbox: 0.2509, d4.loss_cls: 0.0956, d4.loss_bbox: 0.2409, loss: 2.3726, grad_norm: 45.4821
2025-06-18 13:50:05,108 - mmdet - INFO - Epoch [1][5900/7033]	lr: 2.000e-04, eta: 14:46:09, time: 1.495, data_time: 0.029, memory: 18289, loss_cls: 0.0925, loss_bbox: 0.2365, d0.loss_cls: 0.1911, d0.loss_bbox: 0.3640, d1.loss_cls: 0.1337, d1.loss_bbox: 0.2841, d2.loss_cls: 0.1099, d2.loss_bbox: 0.2604, d3.loss_cls: 0.0946, d3.loss_bbox: 0.2511, d4.loss_cls: 0.0936, d4.loss_bbox: 0.2389, loss: 2.3503, grad_norm: 34.5498
2025-06-18 13:51:17,676 - mmdet - INFO - Epoch [1][5950/7033]	lr: 2.000e-04, eta: 14:44:52, time: 1.451, data_time: 0.028, memory: 18289, loss_cls: 0.0946, loss_bbox: 0.2402, d0.loss_cls: 0.1845, d0.loss_bbox: 0.3711, d1.loss_cls: 0.1311, d1.loss_bbox: 0.2896, d2.loss_cls: 0.1155, d2.loss_bbox: 0.2619, d3.loss_cls: 0.1004, d3.loss_bbox: 0.2505, d4.loss_cls: 0.0970, d4.loss_bbox: 0.2420, loss: 2.3783, grad_norm: 28.5798
2025-06-18 13:52:30,718 - mmdet - INFO - Exp name: lidar_0075v_cam_res_2x2_hednetmiddleencoder_hednetbackbone4_dss0511_dp03_hugeep2_num2_morton_conv_xy_rope_bs2.py
2025-06-18 13:52:30,719 - mmdet - INFO - Epoch [1][6000/7033]	lr: 2.000e-04, eta: 14:43:37, time: 1.461, data_time: 0.028, memory: 18614, loss_cls: 0.0938, loss_bbox: 0.2403, d0.loss_cls: 0.1874, d0.loss_bbox: 0.3681, d1.loss_cls: 0.1303, d1.loss_bbox: 0.2876, d2.loss_cls: 0.1121, d2.loss_bbox: 0.2664, d3.loss_cls: 0.1000, d3.loss_bbox: 0.2544, d4.loss_cls: 0.0956, d4.loss_bbox: 0.2438, loss: 2.3798, grad_norm: 35.6699
2025-06-18 13:53:43,569 - mmdet - INFO - Epoch [1][6050/7033]	lr: 2.000e-04, eta: 14:42:22, time: 1.457, data_time: 0.029, memory: 18614, loss_cls: 0.0910, loss_bbox: 0.2329, d0.loss_cls: 0.1879, d0.loss_bbox: 0.3735, d1.loss_cls: 0.1346, d1.loss_bbox: 0.2901, d2.loss_cls: 0.1122, d2.loss_bbox: 0.2576, d3.loss_cls: 0.1007, d3.loss_bbox: 0.2466, d4.loss_cls: 0.0925, d4.loss_bbox: 0.2363, loss: 2.3559, grad_norm: 36.6458
2025-06-18 13:54:56,317 - mmdet - INFO - Epoch [1][6100/7033]	lr: 2.000e-04, eta: 14:41:06, time: 1.455, data_time: 0.027, memory: 18614, loss_cls: 0.1011, loss_bbox: 0.2362, d0.loss_cls: 0.1962, d0.loss_bbox: 0.3786, d1.loss_cls: 0.1385, d1.loss_bbox: 0.2954, d2.loss_cls: 0.1222, d2.loss_bbox: 0.2629, d3.loss_cls: 0.1111, d3.loss_bbox: 0.2523, d4.loss_cls: 0.1039, d4.loss_bbox: 0.2393, loss: 2.4377, grad_norm: 38.8180
2025-06-18 13:56:09,430 - mmdet - INFO - Epoch [1][6150/7033]	lr: 2.000e-04, eta: 14:39:52, time: 1.462, data_time: 0.028, memory: 18614, loss_cls: 0.0964, loss_bbox: 0.2430, d0.loss_cls: 0.1804, d0.loss_bbox: 0.3605, d1.loss_cls: 0.1245, d1.loss_bbox: 0.2883, d2.loss_cls: 0.1070, d2.loss_bbox: 0.2644, d3.loss_cls: 0.0996, d3.loss_bbox: 0.2562, d4.loss_cls: 0.0977, d4.loss_bbox: 0.2439, loss: 2.3620, grad_norm: 29.6817
2025-06-18 13:57:23,964 - mmdet - INFO - Epoch [1][6200/7033]	lr: 2.000e-04, eta: 14:38:46, time: 1.491, data_time: 0.028, memory: 18614, loss_cls: 0.0817, loss_bbox: 0.2326, d0.loss_cls: 0.1829, d0.loss_bbox: 0.3498, d1.loss_cls: 0.1183, d1.loss_bbox: 0.2767, d2.loss_cls: 0.0960, d2.loss_bbox: 0.2549, d3.loss_cls: 0.0858, d3.loss_bbox: 0.2431, d4.loss_cls: 0.0823, d4.loss_bbox: 0.2331, loss: 2.2374, grad_norm: 40.8916
2025-06-18 13:58:36,937 - mmdet - INFO - Epoch [1][6250/7033]	lr: 2.000e-04, eta: 14:37:31, time: 1.459, data_time: 0.034, memory: 18614, loss_cls: 0.0933, loss_bbox: 0.2398, d0.loss_cls: 0.1892, d0.loss_bbox: 0.3706, d1.loss_cls: 0.1277, d1.loss_bbox: 0.2857, d2.loss_cls: 0.1077, d2.loss_bbox: 0.2583, d3.loss_cls: 0.0982, d3.loss_bbox: 0.2515, d4.loss_cls: 0.0934, d4.loss_bbox: 0.2428, loss: 2.3580, grad_norm: 361.2265
2025-06-18 13:59:49,834 - mmdet - INFO - Epoch [1][6300/7033]	lr: 2.000e-04, eta: 14:36:16, time: 1.458, data_time: 0.025, memory: 18614, loss_cls: 0.0894, loss_bbox: 0.2523, d0.loss_cls: 0.1822, d0.loss_bbox: 0.3741, d1.loss_cls: 0.1255, d1.loss_bbox: 0.2980, d2.loss_cls: 0.1070, d2.loss_bbox: 0.2709, d3.loss_cls: 0.0943, d3.loss_bbox: 0.2629, d4.loss_cls: 0.0896, d4.loss_bbox: 0.2517, loss: 2.3979, grad_norm: 22.5876
2025-06-18 14:01:02,366 - mmdet - INFO - Epoch [1][6350/7033]	lr: 2.000e-04, eta: 14:34:59, time: 1.451, data_time: 0.025, memory: 18614, loss_cls: 0.0938, loss_bbox: 0.2431, d0.loss_cls: 0.1923, d0.loss_bbox: 0.3645, d1.loss_cls: 0.1294, d1.loss_bbox: 0.2896, d2.loss_cls: 0.1097, d2.loss_bbox: 0.2643, d3.loss_cls: 0.0984, d3.loss_bbox: 0.2543, d4.loss_cls: 0.0958, d4.loss_bbox: 0.2436, loss: 2.3788, grad_norm: 25.5074
2025-06-18 14:02:15,300 - mmdet - INFO - Epoch [1][6400/7033]	lr: 2.000e-04, eta: 14:33:44, time: 1.459, data_time: 0.030, memory: 18614, loss_cls: 0.0958, loss_bbox: 0.2452, d0.loss_cls: 0.1958, d0.loss_bbox: 0.3737, d1.loss_cls: 0.1315, d1.loss_bbox: 0.2868, d2.loss_cls: 0.1124, d2.loss_bbox: 0.2703, d3.loss_cls: 0.1004, d3.loss_bbox: 0.2601, d4.loss_cls: 0.0965, d4.loss_bbox: 0.2472, loss: 2.4156, grad_norm: 31.1268
2025-06-18 14:03:28,008 - mmdet - INFO - Epoch [1][6450/7033]	lr: 2.000e-04, eta: 14:32:28, time: 1.454, data_time: 0.026, memory: 18614, loss_cls: 0.0911, loss_bbox: 0.2363, d0.loss_cls: 0.1863, d0.loss_bbox: 0.3534, d1.loss_cls: 0.1264, d1.loss_bbox: 0.2745, d2.loss_cls: 0.1049, d2.loss_bbox: 0.2557, d3.loss_cls: 0.0929, d3.loss_bbox: 0.2498, d4.loss_cls: 0.0899, d4.loss_bbox: 0.2400, loss: 2.3013, grad_norm: 52.5329
2025-06-18 14:04:40,658 - mmdet - INFO - Epoch [1][6500/7033]	lr: 2.000e-04, eta: 14:31:12, time: 1.453, data_time: 0.028, memory: 18614, loss_cls: 0.1011, loss_bbox: 0.2442, d0.loss_cls: 0.2028, d0.loss_bbox: 0.3657, d1.loss_cls: 0.1429, d1.loss_bbox: 0.2922, d2.loss_cls: 0.1219, d2.loss_bbox: 0.2696, d3.loss_cls: 0.1075, d3.loss_bbox: 0.2569, d4.loss_cls: 0.1033, d4.loss_bbox: 0.2466, loss: 2.4546, grad_norm: 28.4936
2025-06-18 14:05:53,253 - mmdet - INFO - Epoch [1][6550/7033]	lr: 2.000e-04, eta: 14:29:55, time: 1.452, data_time: 0.026, memory: 18614, loss_cls: 0.1014, loss_bbox: 0.2391, d0.loss_cls: 0.1954, d0.loss_bbox: 0.3660, d1.loss_cls: 0.1384, d1.loss_bbox: 0.2894, d2.loss_cls: 0.1172, d2.loss_bbox: 0.2635, d3.loss_cls: 0.1037, d3.loss_bbox: 0.2519, d4.loss_cls: 0.1021, d4.loss_bbox: 0.2432, loss: 2.4114, grad_norm: 41.9905
2025-06-18 14:07:05,831 - mmdet - INFO - Epoch [1][6600/7033]	lr: 2.000e-04, eta: 14:28:39, time: 1.452, data_time: 0.028, memory: 18614, loss_cls: 0.0857, loss_bbox: 0.2338, d0.loss_cls: 0.1867, d0.loss_bbox: 0.3571, d1.loss_cls: 0.1232, d1.loss_bbox: 0.2812, d2.loss_cls: 0.1050, d2.loss_bbox: 0.2562, d3.loss_cls: 0.0902, d3.loss_bbox: 0.2449, d4.loss_cls: 0.0858, d4.loss_bbox: 0.2356, loss: 2.2853, grad_norm: 27.8938
2025-06-18 14:08:18,781 - mmdet - INFO - Epoch [1][6650/7033]	lr: 2.000e-04, eta: 14:27:24, time: 1.459, data_time: 0.029, memory: 18614, loss_cls: 0.0903, loss_bbox: 0.2460, d0.loss_cls: 0.1859, d0.loss_bbox: 0.3597, d1.loss_cls: 0.1289, d1.loss_bbox: 0.2906, d2.loss_cls: 0.1133, d2.loss_bbox: 0.2666, d3.loss_cls: 0.0995, d3.loss_bbox: 0.2547, d4.loss_cls: 0.0930, d4.loss_bbox: 0.2457, loss: 2.3743, grad_norm: 27.6895
2025-06-18 14:09:31,403 - mmdet - INFO - Epoch [1][6700/7033]	lr: 2.000e-04, eta: 14:26:08, time: 1.452, data_time: 0.025, memory: 18614, loss_cls: 0.0900, loss_bbox: 0.2321, d0.loss_cls: 0.1892, d0.loss_bbox: 0.3536, d1.loss_cls: 0.1352, d1.loss_bbox: 0.2875, d2.loss_cls: 0.1185, d2.loss_bbox: 0.2602, d3.loss_cls: 0.0983, d3.loss_bbox: 0.2459, d4.loss_cls: 0.0917, d4.loss_bbox: 0.2356, loss: 2.3379, grad_norm: 34.4646
2025-06-18 14:10:44,487 - mmdet - INFO - Epoch [1][6750/7033]	lr: 2.000e-04, eta: 14:24:54, time: 1.462, data_time: 0.031, memory: 18614, loss_cls: 0.0888, loss_bbox: 0.2397, d0.loss_cls: 0.1909, d0.loss_bbox: 0.3636, d1.loss_cls: 0.1299, d1.loss_bbox: 0.2921, d2.loss_cls: 0.1071, d2.loss_bbox: 0.2630, d3.loss_cls: 0.0952, d3.loss_bbox: 0.2528, d4.loss_cls: 0.0907, d4.loss_bbox: 0.2424, loss: 2.3563, grad_norm: 33.2044
2025-06-18 14:11:57,281 - mmdet - INFO - Epoch [1][6800/7033]	lr: 2.000e-04, eta: 14:23:39, time: 1.456, data_time: 0.029, memory: 18614, loss_cls: 0.0988, loss_bbox: 0.2450, d0.loss_cls: 0.1986, d0.loss_bbox: 0.3688, d1.loss_cls: 0.1384, d1.loss_bbox: 0.2936, d2.loss_cls: 0.1166, d2.loss_bbox: 0.2672, d3.loss_cls: 0.1044, d3.loss_bbox: 0.2568, d4.loss_cls: 0.1012, d4.loss_bbox: 0.2475, loss: 2.4369, grad_norm: 42.7276
2025-06-18 14:13:10,972 - mmdet - INFO - Epoch [1][6850/7033]	lr: 2.000e-04, eta: 14:22:28, time: 1.474, data_time: 0.048, memory: 18614, loss_cls: 0.0859, loss_bbox: 0.2385, d0.loss_cls: 0.1793, d0.loss_bbox: 0.3634, d1.loss_cls: 0.1218, d1.loss_bbox: 0.2852, d2.loss_cls: 0.1021, d2.loss_bbox: 0.2581, d3.loss_cls: 0.0888, d3.loss_bbox: 0.2471, d4.loss_cls: 0.0885, d4.loss_bbox: 0.2366, loss: 2.2955, grad_norm: 147.6610
2025-06-18 14:14:25,157 - mmdet - INFO - Epoch [1][6900/7033]	lr: 2.000e-04, eta: 14:21:20, time: 1.484, data_time: 0.025, memory: 18614, loss_cls: 0.0884, loss_bbox: 0.2361, d0.loss_cls: 0.1836, d0.loss_bbox: 0.3578, d1.loss_cls: 0.1190, d1.loss_bbox: 0.2858, d2.loss_cls: 0.1065, d2.loss_bbox: 0.2619, d3.loss_cls: 0.0961, d3.loss_bbox: 0.2540, d4.loss_cls: 0.0893, d4.loss_bbox: 0.2409, loss: 2.3196, grad_norm: 81.6935
2025-06-18 14:15:37,750 - mmdet - INFO - Epoch [1][6950/7033]	lr: 2.000e-04, eta: 14:20:03, time: 1.452, data_time: 0.026, memory: 18614, loss_cls: 0.0849, loss_bbox: 0.2366, d0.loss_cls: 0.1810, d0.loss_bbox: 0.3581, d1.loss_cls: 0.1195, d1.loss_bbox: 0.2776, d2.loss_cls: 0.1001, d2.loss_bbox: 0.2569, d3.loss_cls: 0.0900, d3.loss_bbox: 0.2464, d4.loss_cls: 0.0841, d4.loss_bbox: 0.2384, loss: 2.2738, grad_norm: 25.3155
2025-06-18 14:16:50,556 - mmdet - INFO - Exp name: lidar_0075v_cam_res_2x2_hednetmiddleencoder_hednetbackbone4_dss0511_dp03_hugeep2_num2_morton_conv_xy_rope_bs2.py
2025-06-18 14:16:50,556 - mmdet - INFO - Epoch [1][7000/7033]	lr: 2.000e-04, eta: 14:18:48, time: 1.456, data_time: 0.028, memory: 18614, loss_cls: 0.0885, loss_bbox: 0.2398, d0.loss_cls: 0.1960, d0.loss_bbox: 0.3708, d1.loss_cls: 0.1271, d1.loss_bbox: 0.2855, d2.loss_cls: 0.1065, d2.loss_bbox: 0.2612, d3.loss_cls: 0.0921, d3.loss_bbox: 0.2526, d4.loss_cls: 0.0887, d4.loss_bbox: 0.2423, loss: 2.3510, grad_norm: 44.9778
2025-06-18 14:17:38,586 - mmdet - INFO - Saving checkpoint at 1 epochs
2025-06-18 14:40:06,887 - mmdet - INFO - Exp name: lidar_0075v_cam_res_2x2_hednetmiddleencoder_hednetbackbone4_dss0511_dp03_hugeep2_num2_morton_conv_xy_rope_bs2.py
2025-06-18 14:40:06,887 - mmdet - INFO - Epoch(val) [1][3010]	pts_bbox_NuScenes/car_AP_dist_0.5: 0.7907, pts_bbox_NuScenes/car_AP_dist_1.0: 0.8838, pts_bbox_NuScenes/car_AP_dist_2.0: 0.9125, pts_bbox_NuScenes/car_AP_dist_4.0: 0.9257, pts_bbox_NuScenes/car_trans_err: 0.1831, pts_bbox_NuScenes/car_scale_err: 0.1548, pts_bbox_NuScenes/car_orient_err: 0.0536, pts_bbox_NuScenes/car_vel_err: 0.3068, pts_bbox_NuScenes/car_attr_err: 0.1780, pts_bbox_NuScenes/mATE: 0.2910, pts_bbox_NuScenes/mASE: 0.2615, pts_bbox_NuScenes/mAOE: 0.2731, pts_bbox_NuScenes/mAVE: 0.2702, pts_bbox_NuScenes/mAAE: 0.1861, pts_bbox_NuScenes/truck_AP_dist_0.5: 0.4235, pts_bbox_NuScenes/truck_AP_dist_1.0: 0.6187, pts_bbox_NuScenes/truck_AP_dist_2.0: 0.7225, pts_bbox_NuScenes/truck_AP_dist_4.0: 0.7603, pts_bbox_NuScenes/truck_trans_err: 0.3409, pts_bbox_NuScenes/truck_scale_err: 0.1883, pts_bbox_NuScenes/truck_orient_err: 0.0741, pts_bbox_NuScenes/truck_vel_err: 0.2347, pts_bbox_NuScenes/truck_attr_err: 0.2174, pts_bbox_NuScenes/construction_vehicle_AP_dist_0.5: 0.0705, pts_bbox_NuScenes/construction_vehicle_AP_dist_1.0: 0.2168, pts_bbox_NuScenes/construction_vehicle_AP_dist_2.0: 0.4318, pts_bbox_NuScenes/construction_vehicle_AP_dist_4.0: 0.5083, pts_bbox_NuScenes/construction_vehicle_trans_err: 0.6552, pts_bbox_NuScenes/construction_vehicle_scale_err: 0.4389, pts_bbox_NuScenes/construction_vehicle_orient_err: 0.8580, pts_bbox_NuScenes/construction_vehicle_vel_err: 0.1176, pts_bbox_NuScenes/construction_vehicle_attr_err: 0.3063, pts_bbox_NuScenes/bus_AP_dist_0.5: 0.4907, pts_bbox_NuScenes/bus_AP_dist_1.0: 0.7328, pts_bbox_NuScenes/bus_AP_dist_2.0: 0.9036, pts_bbox_NuScenes/bus_AP_dist_4.0: 0.9301, pts_bbox_NuScenes/bus_trans_err: 0.3690, pts_bbox_NuScenes/bus_scale_err: 0.1843, pts_bbox_NuScenes/bus_orient_err: 0.0508, pts_bbox_NuScenes/bus_vel_err: 0.5232, pts_bbox_NuScenes/bus_attr_err: 0.2217, pts_bbox_NuScenes/trailer_AP_dist_0.5: 0.1789, pts_bbox_NuScenes/trailer_AP_dist_1.0: 0.4341, pts_bbox_NuScenes/trailer_AP_dist_2.0: 0.5999, pts_bbox_NuScenes/trailer_AP_dist_4.0: 0.6885, pts_bbox_NuScenes/trailer_trans_err: 0.4806, pts_bbox_NuScenes/trailer_scale_err: 0.2194, pts_bbox_NuScenes/trailer_orient_err: 0.5097, pts_bbox_NuScenes/trailer_vel_err: 0.1990, pts_bbox_NuScenes/trailer_attr_err: 0.1831, pts_bbox_NuScenes/barrier_AP_dist_0.5: 0.5802, pts_bbox_NuScenes/barrier_AP_dist_1.0: 0.6811, pts_bbox_NuScenes/barrier_AP_dist_2.0: 0.7259, pts_bbox_NuScenes/barrier_AP_dist_4.0: 0.7388, pts_bbox_NuScenes/barrier_trans_err: 0.2277, pts_bbox_NuScenes/barrier_scale_err: 0.3014, pts_bbox_NuScenes/barrier_orient_err: 0.0527, pts_bbox_NuScenes/barrier_vel_err: nan, pts_bbox_NuScenes/barrier_attr_err: nan, pts_bbox_NuScenes/motorcycle_AP_dist_0.5: 0.6595, pts_bbox_NuScenes/motorcycle_AP_dist_1.0: 0.7842, pts_bbox_NuScenes/motorcycle_AP_dist_2.0: 0.8070, pts_bbox_NuScenes/motorcycle_AP_dist_4.0: 0.8135, pts_bbox_NuScenes/motorcycle_trans_err: 0.2047, pts_bbox_NuScenes/motorcycle_scale_err: 0.2431, pts_bbox_NuScenes/motorcycle_orient_err: 0.2027, pts_bbox_NuScenes/motorcycle_vel_err: 0.3974, pts_bbox_NuScenes/motorcycle_attr_err: 0.2606, pts_bbox_NuScenes/bicycle_AP_dist_0.5: 0.5811, pts_bbox_NuScenes/bicycle_AP_dist_1.0: 0.6267, pts_bbox_NuScenes/bicycle_AP_dist_2.0: 0.6371, pts_bbox_NuScenes/bicycle_AP_dist_4.0: 0.6454, pts_bbox_NuScenes/bicycle_trans_err: 0.1686, pts_bbox_NuScenes/bicycle_scale_err: 0.2578, pts_bbox_NuScenes/bicycle_orient_err: 0.3180, pts_bbox_NuScenes/bicycle_vel_err: 0.1727, pts_bbox_NuScenes/bicycle_attr_err: 0.0113, pts_bbox_NuScenes/pedestrian_AP_dist_0.5: 0.8180, pts_bbox_NuScenes/pedestrian_AP_dist_1.0: 0.8623, pts_bbox_NuScenes/pedestrian_AP_dist_2.0: 0.8837, pts_bbox_NuScenes/pedestrian_AP_dist_4.0: 0.8968, pts_bbox_NuScenes/pedestrian_trans_err: 0.1471, pts_bbox_NuScenes/pedestrian_scale_err: 0.2929, pts_bbox_NuScenes/pedestrian_orient_err: 0.3388, pts_bbox_NuScenes/pedestrian_vel_err: 0.2103, pts_bbox_NuScenes/pedestrian_attr_err: 0.1108, pts_bbox_NuScenes/traffic_cone_AP_dist_0.5: 0.7393, pts_bbox_NuScenes/traffic_cone_AP_dist_1.0: 0.7745, pts_bbox_NuScenes/traffic_cone_AP_dist_2.0: 0.7977, pts_bbox_NuScenes/traffic_cone_AP_dist_4.0: 0.8218, pts_bbox_NuScenes/traffic_cone_trans_err: 0.1332, pts_bbox_NuScenes/traffic_cone_scale_err: 0.3345, pts_bbox_NuScenes/traffic_cone_orient_err: nan, pts_bbox_NuScenes/traffic_cone_vel_err: nan, pts_bbox_NuScenes/traffic_cone_attr_err: nan, pts_bbox_NuScenes/NDS: 0.7105, pts_bbox_NuScenes/mAP: 0.6775
2025-06-18 14:41:28,156 - mmdet - INFO - Epoch [2][50/7033]	lr: 1.866e-04, eta: 14:13:08, time: 1.549, data_time: 0.108, memory: 18614, loss_cls: 0.0895, loss_bbox: 0.2315, d0.loss_cls: 0.1848, d0.loss_bbox: 0.3661, d1.loss_cls: 0.1325, d1.loss_bbox: 0.2781, d2.loss_cls: 0.1077, d2.loss_bbox: 0.2565, d3.loss_cls: 0.0937, d3.loss_bbox: 0.2464, d4.loss_cls: 0.0909, d4.loss_bbox: 0.2350, loss: 2.3125, grad_norm: 51.5949
2025-06-18 14:42:41,041 - mmdet - INFO - Epoch [2][100/7033]	lr: 1.866e-04, eta: 14:11:55, time: 1.458, data_time: 0.026, memory: 18614, loss_cls: 0.0946, loss_bbox: 0.2376, d0.loss_cls: 0.1937, d0.loss_bbox: 0.3730, d1.loss_cls: 0.1389, d1.loss_bbox: 0.2867, d2.loss_cls: 0.1136, d2.loss_bbox: 0.2637, d3.loss_cls: 0.1016, d3.loss_bbox: 0.2526, d4.loss_cls: 0.0967, d4.loss_bbox: 0.2383, loss: 2.3909, grad_norm: 258.2511
2025-06-18 14:43:54,344 - mmdet - INFO - Epoch [2][150/7033]	lr: 1.866e-04, eta: 14:10:45, time: 1.466, data_time: 0.032, memory: 18614, loss_cls: 0.0787, loss_bbox: 0.2242, d0.loss_cls: 0.1777, d0.loss_bbox: 0.3446, d1.loss_cls: 0.1182, d1.loss_bbox: 0.2664, d2.loss_cls: 0.0986, d2.loss_bbox: 0.2448, d3.loss_cls: 0.0856, d3.loss_bbox: 0.2369, d4.loss_cls: 0.0802, d4.loss_bbox: 0.2285, loss: 2.1845, grad_norm: 34.2932
2025-06-18 14:45:07,764 - mmdet - INFO - Epoch [2][200/7033]	lr: 1.866e-04, eta: 14:09:34, time: 1.468, data_time: 0.039, memory: 18614, loss_cls: 0.0933, loss_bbox: 0.2320, d0.loss_cls: 0.1858, d0.loss_bbox: 0.3693, d1.loss_cls: 0.1256, d1.loss_bbox: 0.2851, d2.loss_cls: 0.1095, d2.loss_bbox: 0.2573, d3.loss_cls: 0.0993, d3.loss_bbox: 0.2454, d4.loss_cls: 0.0939, d4.loss_bbox: 0.2354, loss: 2.3319, grad_norm: 33.3927
2025-06-18 14:46:20,760 - mmdet - INFO - Epoch [2][250/7033]	lr: 1.866e-04, eta: 14:08:22, time: 1.460, data_time: 0.033, memory: 18614, loss_cls: 0.0831, loss_bbox: 0.2280, d0.loss_cls: 0.1806, d0.loss_bbox: 0.3394, d1.loss_cls: 0.1234, d1.loss_bbox: 0.2642, d2.loss_cls: 0.1002, d2.loss_bbox: 0.2443, d3.loss_cls: 0.0902, d3.loss_bbox: 0.2369, d4.loss_cls: 0.0855, d4.loss_bbox: 0.2310, loss: 2.2069, grad_norm: 23.3990
2025-06-18 14:47:34,983 - mmdet - INFO - Epoch [2][300/7033]	lr: 1.866e-04, eta: 14:07:15, time: 1.484, data_time: 0.057, memory: 18614, loss_cls: 0.0775, loss_bbox: 0.2356, d0.loss_cls: 0.1724, d0.loss_bbox: 0.3547, d1.loss_cls: 0.1166, d1.loss_bbox: 0.2729, d2.loss_cls: 0.0955, d2.loss_bbox: 0.2511, d3.loss_cls: 0.0854, d3.loss_bbox: 0.2428, d4.loss_cls: 0.0795, d4.loss_bbox: 0.2353, loss: 2.2192, grad_norm: 79.6674
2025-06-18 14:48:49,292 - mmdet - INFO - Epoch [2][350/7033]	lr: 1.866e-04, eta: 14:06:09, time: 1.486, data_time: 0.056, memory: 18614, loss_cls: 0.0953, loss_bbox: 0.2351, d0.loss_cls: 0.1881, d0.loss_bbox: 0.3703, d1.loss_cls: 0.1318, d1.loss_bbox: 0.2823, d2.loss_cls: 0.1089, d2.loss_bbox: 0.2606, d3.loss_cls: 0.0995, d3.loss_bbox: 0.2482, d4.loss_cls: 0.0954, d4.loss_bbox: 0.2386, loss: 2.3542, grad_norm: 19.0038
2025-06-18 14:50:03,016 - mmdet - INFO - Epoch [2][400/7033]	lr: 1.866e-04, eta: 14:05:00, time: 1.474, data_time: 0.046, memory: 18614, loss_cls: 0.0823, loss_bbox: 0.2228, d0.loss_cls: 0.1805, d0.loss_bbox: 0.3502, d1.loss_cls: 0.1187, d1.loss_bbox: 0.2695, d2.loss_cls: 0.0988, d2.loss_bbox: 0.2521, d3.loss_cls: 0.0887, d3.loss_bbox: 0.2401, d4.loss_cls: 0.0851, d4.loss_bbox: 0.2260, loss: 2.2148, grad_norm: 34.4464
2025-06-18 14:51:23,884 - mmdet - INFO - Epoch [2][450/7033]	lr: 1.866e-04, eta: 14:04:24, time: 1.617, data_time: 0.049, memory: 18614, loss_cls: 0.0852, loss_bbox: 0.2405, d0.loss_cls: 0.1958, d0.loss_bbox: 0.3798, d1.loss_cls: 0.1274, d1.loss_bbox: 0.2857, d2.loss_cls: 0.1052, d2.loss_bbox: 0.2618, d3.loss_cls: 0.0917, d3.loss_bbox: 0.2518, d4.loss_cls: 0.0862, d4.loss_bbox: 0.2425, loss: 2.3535, grad_norm: 37.7532
2025-06-18 14:52:36,617 - mmdet - INFO - Epoch [2][500/7033]	lr: 1.866e-04, eta: 14:03:10, time: 1.455, data_time: 0.025, memory: 18614, loss_cls: 0.0928, loss_bbox: 0.2320, d0.loss_cls: 0.2087, d0.loss_bbox: 0.3949, d1.loss_cls: 0.1456, d1.loss_bbox: 0.2918, d2.loss_cls: 0.1193, d2.loss_bbox: 0.2610, d3.loss_cls: 0.1032, d3.loss_bbox: 0.2457, d4.loss_cls: 0.0947, d4.loss_bbox: 0.2372, loss: 2.4269, grad_norm: 106.7407
2025-06-18 14:53:49,249 - mmdet - INFO - Epoch [2][550/7033]	lr: 1.866e-04, eta: 14:01:55, time: 1.453, data_time: 0.027, memory: 18614, loss_cls: 0.1020, loss_bbox: 0.2491, d0.loss_cls: 0.2231, d0.loss_bbox: 0.4123, d1.loss_cls: 0.1516, d1.loss_bbox: 0.3086, d2.loss_cls: 0.1279, d2.loss_bbox: 0.2789, d3.loss_cls: 0.1097, d3.loss_bbox: 0.2666, d4.loss_cls: 0.1029, d4.loss_bbox: 0.2564, loss: 2.5891, grad_norm: 34.9504
2025-06-18 14:55:02,205 - mmdet - INFO - Epoch [2][600/7033]	lr: 1.866e-04, eta: 14:00:42, time: 1.459, data_time: 0.028, memory: 18614, loss_cls: 0.0929, loss_bbox: 0.2434, d0.loss_cls: 0.2051, d0.loss_bbox: 0.3883, d1.loss_cls: 0.1342, d1.loss_bbox: 0.2946, d2.loss_cls: 0.1120, d2.loss_bbox: 0.2731, d3.loss_cls: 0.0997, d3.loss_bbox: 0.2587, d4.loss_cls: 0.0952, d4.loss_bbox: 0.2449, loss: 2.4419, grad_norm: 38.1737
2025-06-18 14:56:15,024 - mmdet - INFO - Epoch [2][650/7033]	lr: 1.866e-04, eta: 13:59:29, time: 1.456, data_time: 0.027, memory: 18614, loss_cls: 0.0919, loss_bbox: 0.2465, d0.loss_cls: 0.1960, d0.loss_bbox: 0.3820, d1.loss_cls: 0.1345, d1.loss_bbox: 0.2880, d2.loss_cls: 0.1105, d2.loss_bbox: 0.2692, d3.loss_cls: 0.0984, d3.loss_bbox: 0.2545, d4.loss_cls: 0.0929, d4.loss_bbox: 0.2492, loss: 2.4137, grad_norm: 31.5175
2025-06-18 14:57:28,125 - mmdet - INFO - Epoch [2][700/7033]	lr: 1.866e-04, eta: 13:58:16, time: 1.462, data_time: 0.028, memory: 18614, loss_cls: 0.0971, loss_bbox: 0.2462, d0.loss_cls: 0.2167, d0.loss_bbox: 0.3936, d1.loss_cls: 0.1494, d1.loss_bbox: 0.2980, d2.loss_cls: 0.1217, d2.loss_bbox: 0.2705, d3.loss_cls: 0.1062, d3.loss_bbox: 0.2583, d4.loss_cls: 0.0986, d4.loss_bbox: 0.2494, loss: 2.5057, grad_norm: 54.0250
2025-06-18 14:58:42,557 - mmdet - INFO - Epoch [2][750/7033]	lr: 1.866e-04, eta: 13:57:10, time: 1.489, data_time: 0.026, memory: 18614, loss_cls: 0.0929, loss_bbox: 0.2420, d0.loss_cls: 0.2138, d0.loss_bbox: 0.4026, d1.loss_cls: 0.1531, d1.loss_bbox: 0.2859, d2.loss_cls: 0.1204, d2.loss_bbox: 0.2646, d3.loss_cls: 0.1021, d3.loss_bbox: 0.2542, d4.loss_cls: 0.0962, d4.loss_bbox: 0.2424, loss: 2.4701, grad_norm: 44.7072
2025-06-18 14:59:55,480 - mmdet - INFO - Epoch [2][800/7033]	lr: 1.866e-04, eta: 13:55:56, time: 1.458, data_time: 0.029, memory: 18614, loss_cls: 0.0976, loss_bbox: 0.2311, d0.loss_cls: 0.2096, d0.loss_bbox: 0.3837, d1.loss_cls: 0.1442, d1.loss_bbox: 0.2820, d2.loss_cls: 0.1208, d2.loss_bbox: 0.2528, d3.loss_cls: 0.1017, d3.loss_bbox: 0.2443, d4.loss_cls: 0.0987, d4.loss_bbox: 0.2343, loss: 2.4009, grad_norm: 26.2395
2025-06-18 15:01:08,171 - mmdet - INFO - Epoch [2][850/7033]	lr: 1.866e-04, eta: 13:54:42, time: 1.454, data_time: 0.028, memory: 18614, loss_cls: 0.0868, loss_bbox: 0.2250, d0.loss_cls: 0.1937, d0.loss_bbox: 0.3566, d1.loss_cls: 0.1267, d1.loss_bbox: 0.2713, d2.loss_cls: 0.1057, d2.loss_bbox: 0.2498, d3.loss_cls: 0.0942, d3.loss_bbox: 0.2412, d4.loss_cls: 0.0905, d4.loss_bbox: 0.2286, loss: 2.2701, grad_norm: 57.8080
2025-06-18 15:02:20,932 - mmdet - INFO - Epoch [2][900/7033]	lr: 1.866e-04, eta: 13:53:28, time: 1.455, data_time: 0.028, memory: 18614, loss_cls: 0.0851, loss_bbox: 0.2322, d0.loss_cls: 0.1891, d0.loss_bbox: 0.3522, d1.loss_cls: 0.1222, d1.loss_bbox: 0.2727, d2.loss_cls: 0.1014, d2.loss_bbox: 0.2523, d3.loss_cls: 0.0907, d3.loss_bbox: 0.2442, d4.loss_cls: 0.0857, d4.loss_bbox: 0.2344, loss: 2.2622, grad_norm: 175.6173
2025-06-18 15:03:34,189 - mmdet - INFO - Epoch [2][950/7033]	lr: 1.866e-04, eta: 13:52:17, time: 1.465, data_time: 0.033, memory: 18614, loss_cls: 0.0842, loss_bbox: 0.2267, d0.loss_cls: 0.1910, d0.loss_bbox: 0.3460, d1.loss_cls: 0.1249, d1.loss_bbox: 0.2633, d2.loss_cls: 0.1012, d2.loss_bbox: 0.2409, d3.loss_cls: 0.0910, d3.loss_bbox: 0.2352, d4.loss_cls: 0.0862, d4.loss_bbox: 0.2263, loss: 2.2169, grad_norm: 114.1760
2025-06-18 15:04:47,001 - mmdet - INFO - Epoch [2][1000/7033]	lr: 1.866e-04, eta: 13:51:03, time: 1.456, data_time: 0.026, memory: 18614, loss_cls: 0.0805, loss_bbox: 0.2321, d0.loss_cls: 0.1855, d0.loss_bbox: 0.3555, d1.loss_cls: 0.1214, d1.loss_bbox: 0.2728, d2.loss_cls: 0.0978, d2.loss_bbox: 0.2468, d3.loss_cls: 0.0876, d3.loss_bbox: 0.2376, d4.loss_cls: 0.0839, d4.loss_bbox: 0.2309, loss: 2.2324, grad_norm: 26.8267
2025-06-18 15:05:59,838 - mmdet - INFO - Epoch [2][1050/7033]	lr: 1.866e-04, eta: 13:49:49, time: 1.457, data_time: 0.027, memory: 18614, loss_cls: 0.0845, loss_bbox: 0.2336, d0.loss_cls: 0.1865, d0.loss_bbox: 0.3603, d1.loss_cls: 0.1218, d1.loss_bbox: 0.2782, d2.loss_cls: 0.1025, d2.loss_bbox: 0.2572, d3.loss_cls: 0.0893, d3.loss_bbox: 0.2472, d4.loss_cls: 0.0853, d4.loss_bbox: 0.2373, loss: 2.2838, grad_norm: 21.5582
2025-06-18 15:07:12,681 - mmdet - INFO - Epoch [2][1100/7033]	lr: 1.866e-04, eta: 13:48:36, time: 1.457, data_time: 0.028, memory: 18614, loss_cls: 0.0883, loss_bbox: 0.2285, d0.loss_cls: 0.1904, d0.loss_bbox: 0.3475, d1.loss_cls: 0.1286, d1.loss_bbox: 0.2692, d2.loss_cls: 0.1041, d2.loss_bbox: 0.2511, d3.loss_cls: 0.0932, d3.loss_bbox: 0.2422, d4.loss_cls: 0.0893, d4.loss_bbox: 0.2299, loss: 2.2624, grad_norm: 28.3957
2025-06-18 15:08:25,529 - mmdet - INFO - Epoch [2][1150/7033]	lr: 1.866e-04, eta: 13:47:22, time: 1.457, data_time: 0.029, memory: 18614, loss_cls: 0.0806, loss_bbox: 0.2211, d0.loss_cls: 0.1794, d0.loss_bbox: 0.3387, d1.loss_cls: 0.1144, d1.loss_bbox: 0.2606, d2.loss_cls: 0.0972, d2.loss_bbox: 0.2403, d3.loss_cls: 0.0868, d3.loss_bbox: 0.2331, d4.loss_cls: 0.0814, d4.loss_bbox: 0.2221, loss: 2.1557, grad_norm: 22.6380
2025-06-18 15:09:38,136 - mmdet - INFO - Epoch [2][1200/7033]	lr: 1.866e-04, eta: 13:46:08, time: 1.452, data_time: 0.026, memory: 18614, loss_cls: 0.0864, loss_bbox: 0.2210, d0.loss_cls: 0.1798, d0.loss_bbox: 0.3474, d1.loss_cls: 0.1204, d1.loss_bbox: 0.2662, d2.loss_cls: 0.1020, d2.loss_bbox: 0.2440, d3.loss_cls: 0.0910, d3.loss_bbox: 0.2364, d4.loss_cls: 0.0873, d4.loss_bbox: 0.2264, loss: 2.2083, grad_norm: 37.1181
2025-06-18 15:10:51,336 - mmdet - INFO - Epoch [2][1250/7033]	lr: 1.866e-04, eta: 13:44:56, time: 1.464, data_time: 0.026, memory: 18614, loss_cls: 0.0805, loss_bbox: 0.2363, d0.loss_cls: 0.1868, d0.loss_bbox: 0.3601, d1.loss_cls: 0.1145, d1.loss_bbox: 0.2769, d2.loss_cls: 0.0962, d2.loss_bbox: 0.2565, d3.loss_cls: 0.0860, d3.loss_bbox: 0.2465, d4.loss_cls: 0.0817, d4.loss_bbox: 0.2396, loss: 2.2615, grad_norm: 36.8579
2025-06-18 15:12:04,897 - mmdet - INFO - Epoch [2][1300/7033]	lr: 1.866e-04, eta: 13:43:45, time: 1.471, data_time: 0.036, memory: 18614, loss_cls: 0.0825, loss_bbox: 0.2218, d0.loss_cls: 0.1895, d0.loss_bbox: 0.3399, d1.loss_cls: 0.1206, d1.loss_bbox: 0.2658, d2.loss_cls: 0.0978, d2.loss_bbox: 0.2466, d3.loss_cls: 0.0845, d3.loss_bbox: 0.2390, d4.loss_cls: 0.0815, d4.loss_bbox: 0.2279, loss: 2.1974, grad_norm: 23.5872
2025-06-18 15:13:18,236 - mmdet - INFO - Epoch [2][1350/7033]	lr: 1.866e-04, eta: 13:42:34, time: 1.467, data_time: 0.036, memory: 18614, loss_cls: 0.0836, loss_bbox: 0.2247, d0.loss_cls: 0.1881, d0.loss_bbox: 0.3470, d1.loss_cls: 0.1197, d1.loss_bbox: 0.2639, d2.loss_cls: 0.0999, d2.loss_bbox: 0.2447, d3.loss_cls: 0.0898, d3.loss_bbox: 0.2372, d4.loss_cls: 0.0846, d4.loss_bbox: 0.2281, loss: 2.2113, grad_norm: 40.4073
2025-06-18 15:14:31,374 - mmdet - INFO - Epoch [2][1400/7033]	lr: 1.866e-04, eta: 13:41:21, time: 1.463, data_time: 0.033, memory: 18614, loss_cls: 0.0910, loss_bbox: 0.2238, d0.loss_cls: 0.1911, d0.loss_bbox: 0.3467, d1.loss_cls: 0.1261, d1.loss_bbox: 0.2699, d2.loss_cls: 0.1089, d2.loss_bbox: 0.2467, d3.loss_cls: 0.0961, d3.loss_bbox: 0.2348, d4.loss_cls: 0.0895, d4.loss_bbox: 0.2283, loss: 2.2529, grad_norm: 56.7781
2025-06-18 15:15:44,497 - mmdet - INFO - Epoch [2][1450/7033]	lr: 1.866e-04, eta: 13:40:09, time: 1.462, data_time: 0.033, memory: 18614, loss_cls: 0.0889, loss_bbox: 0.2186, d0.loss_cls: 0.1819, d0.loss_bbox: 0.3459, d1.loss_cls: 0.1240, d1.loss_bbox: 0.2670, d2.loss_cls: 0.1059, d2.loss_bbox: 0.2425, d3.loss_cls: 0.0931, d3.loss_bbox: 0.2336, d4.loss_cls: 0.0873, d4.loss_bbox: 0.2242, loss: 2.2129, grad_norm: 36.6211
2025-06-18 15:16:57,939 - mmdet - INFO - Epoch [2][1500/7033]	lr: 1.866e-04, eta: 13:38:58, time: 1.469, data_time: 0.036, memory: 18614, loss_cls: 0.0830, loss_bbox: 0.2224, d0.loss_cls: 0.1834, d0.loss_bbox: 0.3497, d1.loss_cls: 0.1166, d1.loss_bbox: 0.2662, d2.loss_cls: 0.1032, d2.loss_bbox: 0.2436, d3.loss_cls: 0.0889, d3.loss_bbox: 0.2333, d4.loss_cls: 0.0843, d4.loss_bbox: 0.2253, loss: 2.2001, grad_norm: 32.9417
2025-06-18 15:18:10,508 - mmdet - INFO - Epoch [2][1550/7033]	lr: 1.866e-04, eta: 13:37:43, time: 1.451, data_time: 0.029, memory: 18614, loss_cls: 0.0904, loss_bbox: 0.2237, d0.loss_cls: 0.1840, d0.loss_bbox: 0.3470, d1.loss_cls: 0.1244, d1.loss_bbox: 0.2635, d2.loss_cls: 0.1049, d2.loss_bbox: 0.2442, d3.loss_cls: 0.0948, d3.loss_bbox: 0.2349, d4.loss_cls: 0.0922, d4.loss_bbox: 0.2259, loss: 2.2301, grad_norm: 27.5618
2025-06-18 15:19:23,219 - mmdet - INFO - Epoch [2][1600/7033]	lr: 1.866e-04, eta: 13:36:29, time: 1.454, data_time: 0.031, memory: 18614, loss_cls: 0.0826, loss_bbox: 0.2222, d0.loss_cls: 0.1785, d0.loss_bbox: 0.3410, d1.loss_cls: 0.1218, d1.loss_bbox: 0.2628, d2.loss_cls: 0.0987, d2.loss_bbox: 0.2442, d3.loss_cls: 0.0891, d3.loss_bbox: 0.2362, d4.loss_cls: 0.0840, d4.loss_bbox: 0.2250, loss: 2.1861, grad_norm: 23.3996
2025-06-18 15:20:36,253 - mmdet - INFO - Epoch [2][1650/7033]	lr: 1.866e-04, eta: 13:35:16, time: 1.461, data_time: 0.030, memory: 18614, loss_cls: 0.0896, loss_bbox: 0.2334, d0.loss_cls: 0.1959, d0.loss_bbox: 0.3623, d1.loss_cls: 0.1288, d1.loss_bbox: 0.2767, d2.loss_cls: 0.1080, d2.loss_bbox: 0.2546, d3.loss_cls: 0.0961, d3.loss_bbox: 0.2471, d4.loss_cls: 0.0899, d4.loss_bbox: 0.2354, loss: 2.3178, grad_norm: 48.4265
2025-06-18 15:21:49,234 - mmdet - INFO - Epoch [2][1700/7033]	lr: 1.866e-04, eta: 13:34:04, time: 1.460, data_time: 0.029, memory: 18614, loss_cls: 0.0833, loss_bbox: 0.2281, d0.loss_cls: 0.1889, d0.loss_bbox: 0.3568, d1.loss_cls: 0.1334, d1.loss_bbox: 0.2733, d2.loss_cls: 0.1085, d2.loss_bbox: 0.2496, d3.loss_cls: 0.0947, d3.loss_bbox: 0.2409, d4.loss_cls: 0.0851, d4.loss_bbox: 0.2299, loss: 2.2726, grad_norm: 56.5001
2025-06-18 15:23:02,304 - mmdet - INFO - Epoch [2][1750/7033]	lr: 1.866e-04, eta: 13:32:51, time: 1.461, data_time: 0.030, memory: 18614, loss_cls: 0.0852, loss_bbox: 0.2238, d0.loss_cls: 0.1852, d0.loss_bbox: 0.3558, d1.loss_cls: 0.1242, d1.loss_bbox: 0.2738, d2.loss_cls: 0.1023, d2.loss_bbox: 0.2490, d3.loss_cls: 0.0930, d3.loss_bbox: 0.2377, d4.loss_cls: 0.0867, d4.loss_bbox: 0.2256, loss: 2.2423, grad_norm: 36.7604
2025-06-18 15:24:15,288 - mmdet - INFO - Epoch [2][1800/7033]	lr: 1.866e-04, eta: 13:31:38, time: 1.460, data_time: 0.029, memory: 18614, loss_cls: 0.0831, loss_bbox: 0.2192, d0.loss_cls: 0.1821, d0.loss_bbox: 0.3502, d1.loss_cls: 0.1161, d1.loss_bbox: 0.2684, d2.loss_cls: 0.1002, d2.loss_bbox: 0.2451, d3.loss_cls: 0.0897, d3.loss_bbox: 0.2347, d4.loss_cls: 0.0849, d4.loss_bbox: 0.2237, loss: 2.1974, grad_norm: 27.9139
2025-06-18 15:25:28,317 - mmdet - INFO - Epoch [2][1850/7033]	lr: 1.866e-04, eta: 13:30:25, time: 1.461, data_time: 0.029, memory: 18614, loss_cls: 0.0844, loss_bbox: 0.2187, d0.loss_cls: 0.1820, d0.loss_bbox: 0.3442, d1.loss_cls: 0.1212, d1.loss_bbox: 0.2646, d2.loss_cls: 0.1053, d2.loss_bbox: 0.2428, d3.loss_cls: 0.0934, d3.loss_bbox: 0.2306, d4.loss_cls: 0.0874, d4.loss_bbox: 0.2205, loss: 2.1952, grad_norm: 38.1540
2025-06-18 15:26:41,311 - mmdet - INFO - Epoch [2][1900/7033]	lr: 1.866e-04, eta: 13:29:12, time: 1.460, data_time: 0.030, memory: 18614, loss_cls: 0.0875, loss_bbox: 0.2251, d0.loss_cls: 0.1854, d0.loss_bbox: 0.3446, d1.loss_cls: 0.1267, d1.loss_bbox: 0.2656, d2.loss_cls: 0.1049, d2.loss_bbox: 0.2474, d3.loss_cls: 0.0934, d3.loss_bbox: 0.2406, d4.loss_cls: 0.0897, d4.loss_bbox: 0.2273, loss: 2.2380, grad_norm: 23.4338
2025-06-18 15:27:53,800 - mmdet - INFO - Epoch [2][1950/7033]	lr: 1.866e-04, eta: 13:27:57, time: 1.450, data_time: 0.025, memory: 18614, loss_cls: 0.0855, loss_bbox: 0.2278, d0.loss_cls: 0.1852, d0.loss_bbox: 0.3435, d1.loss_cls: 0.1198, d1.loss_bbox: 0.2612, d2.loss_cls: 0.1020, d2.loss_bbox: 0.2446, d3.loss_cls: 0.0914, d3.loss_bbox: 0.2363, d4.loss_cls: 0.0880, d4.loss_bbox: 0.2280, loss: 2.2134, grad_norm: 44.6361
2025-06-18 15:29:06,909 - mmdet - INFO - Epoch [2][2000/7033]	lr: 1.866e-04, eta: 13:26:45, time: 1.462, data_time: 0.030, memory: 18614, loss_cls: 0.0800, loss_bbox: 0.2257, d0.loss_cls: 0.1860, d0.loss_bbox: 0.3458, d1.loss_cls: 0.1185, d1.loss_bbox: 0.2672, d2.loss_cls: 0.0980, d2.loss_bbox: 0.2465, d3.loss_cls: 0.0884, d3.loss_bbox: 0.2353, d4.loss_cls: 0.0821, d4.loss_bbox: 0.2278, loss: 2.2010, grad_norm: 28.3613
2025-06-18 15:30:21,867 - mmdet - INFO - Epoch [2][2050/7033]	lr: 1.866e-04, eta: 13:25:39, time: 1.499, data_time: 0.028, memory: 18614, loss_cls: 0.0818, loss_bbox: 0.2235, d0.loss_cls: 0.1872, d0.loss_bbox: 0.3523, d1.loss_cls: 0.1179, d1.loss_bbox: 0.2669, d2.loss_cls: 0.0986, d2.loss_bbox: 0.2461, d3.loss_cls: 0.0863, d3.loss_bbox: 0.2404, d4.loss_cls: 0.0830, d4.loss_bbox: 0.2278, loss: 2.2118, grad_norm: 21.5213
2025-06-18 15:31:34,879 - mmdet - INFO - Epoch [2][2100/7033]	lr: 1.866e-04, eta: 13:24:26, time: 1.460, data_time: 0.030, memory: 18614, loss_cls: 0.0832, loss_bbox: 0.2206, d0.loss_cls: 0.1846, d0.loss_bbox: 0.3447, d1.loss_cls: 0.1204, d1.loss_bbox: 0.2610, d2.loss_cls: 0.1046, d2.loss_bbox: 0.2421, d3.loss_cls: 0.0895, d3.loss_bbox: 0.2343, d4.loss_cls: 0.0848, d4.loss_bbox: 0.2252, loss: 2.1949, grad_norm: 597.9932
2025-06-18 15:32:47,804 - mmdet - INFO - Epoch [2][2150/7033]	lr: 1.866e-04, eta: 13:23:13, time: 1.458, data_time: 0.025, memory: 18614, loss_cls: 0.0850, loss_bbox: 0.2273, d0.loss_cls: 0.1841, d0.loss_bbox: 0.3449, d1.loss_cls: 0.1267, d1.loss_bbox: 0.2720, d2.loss_cls: 0.1059, d2.loss_bbox: 0.2509, d3.loss_cls: 0.0912, d3.loss_bbox: 0.2412, d4.loss_cls: 0.0874, d4.loss_bbox: 0.2315, loss: 2.2481, grad_norm: 50.3589
2025-06-18 15:34:00,433 - mmdet - INFO - Epoch [2][2200/7033]	lr: 1.866e-04, eta: 13:21:59, time: 1.453, data_time: 0.026, memory: 18614, loss_cls: 0.0830, loss_bbox: 0.2259, d0.loss_cls: 0.1864, d0.loss_bbox: 0.3390, d1.loss_cls: 0.1213, d1.loss_bbox: 0.2631, d2.loss_cls: 0.1002, d2.loss_bbox: 0.2462, d3.loss_cls: 0.0890, d3.loss_bbox: 0.2376, d4.loss_cls: 0.0859, d4.loss_bbox: 0.2283, loss: 2.2058, grad_norm: 20.6965
2025-06-18 15:35:13,292 - mmdet - INFO - Epoch [2][2250/7033]	lr: 1.866e-04, eta: 13:20:45, time: 1.457, data_time: 0.029, memory: 18614, loss_cls: 0.0830, loss_bbox: 0.2337, d0.loss_cls: 0.1762, d0.loss_bbox: 0.3583, d1.loss_cls: 0.1181, d1.loss_bbox: 0.2818, d2.loss_cls: 0.0996, d2.loss_bbox: 0.2586, d3.loss_cls: 0.0903, d3.loss_bbox: 0.2475, d4.loss_cls: 0.0845, d4.loss_bbox: 0.2364, loss: 2.2682, grad_norm: 32.0899
2025-06-18 15:36:26,012 - mmdet - INFO - Epoch [2][2300/7033]	lr: 1.866e-04, eta: 13:19:31, time: 1.454, data_time: 0.029, memory: 18614, loss_cls: 0.0888, loss_bbox: 0.2331, d0.loss_cls: 0.1915, d0.loss_bbox: 0.3530, d1.loss_cls: 0.1261, d1.loss_bbox: 0.2768, d2.loss_cls: 0.1103, d2.loss_bbox: 0.2528, d3.loss_cls: 0.0980, d3.loss_bbox: 0.2417, d4.loss_cls: 0.0922, d4.loss_bbox: 0.2348, loss: 2.2991, grad_norm: 99.3294
2025-06-18 15:37:40,514 - mmdet - INFO - Epoch [2][2350/7033]	lr: 1.866e-04, eta: 13:18:24, time: 1.490, data_time: 0.028, memory: 18614, loss_cls: 0.0892, loss_bbox: 0.2239, d0.loss_cls: 0.1867, d0.loss_bbox: 0.3406, d1.loss_cls: 0.1310, d1.loss_bbox: 0.2632, d2.loss_cls: 0.1070, d2.loss_bbox: 0.2431, d3.loss_cls: 0.0934, d3.loss_bbox: 0.2348, d4.loss_cls: 0.0914, d4.loss_bbox: 0.2240, loss: 2.2285, grad_norm: 35.9288
2025-06-18 15:38:53,278 - mmdet - INFO - Epoch [2][2400/7033]	lr: 1.866e-04, eta: 13:17:10, time: 1.455, data_time: 0.025, memory: 18614, loss_cls: 0.0910, loss_bbox: 0.2275, d0.loss_cls: 0.1929, d0.loss_bbox: 0.3654, d1.loss_cls: 0.1340, d1.loss_bbox: 0.2766, d2.loss_cls: 0.1111, d2.loss_bbox: 0.2509, d3.loss_cls: 0.0969, d3.loss_bbox: 0.2398, d4.loss_cls: 0.0925, d4.loss_bbox: 0.2289, loss: 2.3076, grad_norm: 31.0351
2025-06-18 15:40:06,022 - mmdet - INFO - Epoch [2][2450/7033]	lr: 1.866e-04, eta: 13:15:56, time: 1.455, data_time: 0.026, memory: 18614, loss_cls: 0.0880, loss_bbox: 0.2186, d0.loss_cls: 0.1860, d0.loss_bbox: 0.3529, d1.loss_cls: 0.1259, d1.loss_bbox: 0.2686, d2.loss_cls: 0.1058, d2.loss_bbox: 0.2455, d3.loss_cls: 0.0930, d3.loss_bbox: 0.2359, d4.loss_cls: 0.0885, d4.loss_bbox: 0.2216, loss: 2.2303, grad_norm: 40.1184
2025-06-18 15:41:18,874 - mmdet - INFO - Epoch [2][2500/7033]	lr: 1.866e-04, eta: 13:14:43, time: 1.457, data_time: 0.029, memory: 18614, loss_cls: 0.0827, loss_bbox: 0.2253, d0.loss_cls: 0.1781, d0.loss_bbox: 0.3482, d1.loss_cls: 0.1201, d1.loss_bbox: 0.2724, d2.loss_cls: 0.1044, d2.loss_bbox: 0.2486, d3.loss_cls: 0.0897, d3.loss_bbox: 0.2387, d4.loss_cls: 0.0858, d4.loss_bbox: 0.2292, loss: 2.2233, grad_norm: 31.1914
2025-06-18 15:42:31,972 - mmdet - INFO - Epoch [2][2550/7033]	lr: 1.866e-04, eta: 13:13:30, time: 1.462, data_time: 0.034, memory: 18614, loss_cls: 0.0868, loss_bbox: 0.2293, d0.loss_cls: 0.1803, d0.loss_bbox: 0.3640, d1.loss_cls: 0.1226, d1.loss_bbox: 0.2765, d2.loss_cls: 0.1051, d2.loss_bbox: 0.2549, d3.loss_cls: 0.0930, d3.loss_bbox: 0.2458, d4.loss_cls: 0.0900, d4.loss_bbox: 0.2333, loss: 2.2815, grad_norm: 91.4134
2025-06-18 15:43:45,417 - mmdet - INFO - Epoch [2][2600/7033]	lr: 1.866e-04, eta: 13:12:19, time: 1.469, data_time: 0.036, memory: 18614, loss_cls: 0.0943, loss_bbox: 0.2352, d0.loss_cls: 0.1906, d0.loss_bbox: 0.3647, d1.loss_cls: 0.1257, d1.loss_bbox: 0.2824, d2.loss_cls: 0.1102, d2.loss_bbox: 0.2593, d3.loss_cls: 0.1038, d3.loss_bbox: 0.2465, d4.loss_cls: 0.0980, d4.loss_bbox: 0.2360, loss: 2.3467, grad_norm: 38.9341
2025-06-18 15:44:58,442 - mmdet - INFO - Epoch [2][2650/7033]	lr: 1.866e-04, eta: 13:11:06, time: 1.460, data_time: 0.032, memory: 18614, loss_cls: 0.0856, loss_bbox: 0.2256, d0.loss_cls: 0.1886, d0.loss_bbox: 0.3491, d1.loss_cls: 0.1249, d1.loss_bbox: 0.2687, d2.loss_cls: 0.1038, d2.loss_bbox: 0.2482, d3.loss_cls: 0.0904, d3.loss_bbox: 0.2396, d4.loss_cls: 0.0857, d4.loss_bbox: 0.2294, loss: 2.2397, grad_norm: 28.8888
2025-06-18 15:46:11,502 - mmdet - INFO - Epoch [2][2700/7033]	lr: 1.866e-04, eta: 13:09:53, time: 1.461, data_time: 0.036, memory: 18614, loss_cls: 0.0899, loss_bbox: 0.2360, d0.loss_cls: 0.1905, d0.loss_bbox: 0.3527, d1.loss_cls: 0.1271, d1.loss_bbox: 0.2760, d2.loss_cls: 0.1069, d2.loss_bbox: 0.2524, d3.loss_cls: 0.0968, d3.loss_bbox: 0.2451, d4.loss_cls: 0.0914, d4.loss_bbox: 0.2369, loss: 2.3016, grad_norm: 39.7055
2025-06-18 15:47:24,742 - mmdet - INFO - Epoch [2][2750/7033]	lr: 1.866e-04, eta: 13:08:41, time: 1.465, data_time: 0.036, memory: 18614, loss_cls: 0.0852, loss_bbox: 0.2277, d0.loss_cls: 0.1835, d0.loss_bbox: 0.3515, d1.loss_cls: 0.1218, d1.loss_bbox: 0.2679, d2.loss_cls: 0.1046, d2.loss_bbox: 0.2433, d3.loss_cls: 0.0907, d3.loss_bbox: 0.2356, d4.loss_cls: 0.0877, d4.loss_bbox: 0.2287, loss: 2.2281, grad_norm: 25.1261
2025-06-18 15:48:37,616 - mmdet - INFO - Epoch [2][2800/7033]	lr: 1.866e-04, eta: 13:07:27, time: 1.457, data_time: 0.029, memory: 18614, loss_cls: 0.0812, loss_bbox: 0.2295, d0.loss_cls: 0.1782, d0.loss_bbox: 0.3489, d1.loss_cls: 0.1162, d1.loss_bbox: 0.2722, d2.loss_cls: 0.0983, d2.loss_bbox: 0.2502, d3.loss_cls: 0.0867, d3.loss_bbox: 0.2430, d4.loss_cls: 0.0836, d4.loss_bbox: 0.2325, loss: 2.2204, grad_norm: 39.8235
2025-06-18 15:49:50,618 - mmdet - INFO - Epoch [2][2850/7033]	lr: 1.866e-04, eta: 13:06:14, time: 1.460, data_time: 0.026, memory: 18614, loss_cls: 0.0888, loss_bbox: 0.2313, d0.loss_cls: 0.1865, d0.loss_bbox: 0.3536, d1.loss_cls: 0.1224, d1.loss_bbox: 0.2710, d2.loss_cls: 0.1034, d2.loss_bbox: 0.2514, d3.loss_cls: 0.0947, d3.loss_bbox: 0.2428, d4.loss_cls: 0.0907, d4.loss_bbox: 0.2313, loss: 2.2679, grad_norm: 23.9148
2025-06-18 15:51:03,297 - mmdet - INFO - Epoch [2][2900/7033]	lr: 1.866e-04, eta: 13:05:00, time: 1.454, data_time: 0.028, memory: 18614, loss_cls: 0.0854, loss_bbox: 0.2240, d0.loss_cls: 0.1851, d0.loss_bbox: 0.3452, d1.loss_cls: 0.1180, d1.loss_bbox: 0.2648, d2.loss_cls: 0.1004, d2.loss_bbox: 0.2456, d3.loss_cls: 0.0895, d3.loss_bbox: 0.2403, d4.loss_cls: 0.0873, d4.loss_bbox: 0.2259, loss: 2.2113, grad_norm: 28.9525
2025-06-18 15:52:15,958 - mmdet - INFO - Epoch [2][2950/7033]	lr: 1.866e-04, eta: 13:03:46, time: 1.453, data_time: 0.026, memory: 18614, loss_cls: 0.0819, loss_bbox: 0.2153, d0.loss_cls: 0.1739, d0.loss_bbox: 0.3369, d1.loss_cls: 0.1157, d1.loss_bbox: 0.2581, d2.loss_cls: 0.0987, d2.loss_bbox: 0.2348, d3.loss_cls: 0.0880, d3.loss_bbox: 0.2287, d4.loss_cls: 0.0836, d4.loss_bbox: 0.2170, loss: 2.1326, grad_norm: 36.7271
2025-06-18 15:53:29,057 - mmdet - INFO - Epoch [2][3000/7033]	lr: 1.866e-04, eta: 13:02:34, time: 1.462, data_time: 0.035, memory: 18614, loss_cls: 0.0751, loss_bbox: 0.2157, d0.loss_cls: 0.1766, d0.loss_bbox: 0.3406, d1.loss_cls: 0.1118, d1.loss_bbox: 0.2581, d2.loss_cls: 0.0937, d2.loss_bbox: 0.2367, d3.loss_cls: 0.0790, d3.loss_bbox: 0.2292, d4.loss_cls: 0.0782, d4.loss_bbox: 0.2173, loss: 2.1122, grad_norm: 43.2612
2025-06-18 15:54:42,248 - mmdet - INFO - Epoch [2][3050/7033]	lr: 1.866e-04, eta: 13:01:21, time: 1.464, data_time: 0.035, memory: 18614, loss_cls: 0.0863, loss_bbox: 0.2286, d0.loss_cls: 0.1780, d0.loss_bbox: 0.3533, d1.loss_cls: 0.1181, d1.loss_bbox: 0.2744, d2.loss_cls: 0.1048, d2.loss_bbox: 0.2507, d3.loss_cls: 0.0929, d3.loss_bbox: 0.2409, d4.loss_cls: 0.0882, d4.loss_bbox: 0.2333, loss: 2.2495, grad_norm: 21.9035
2025-06-18 15:55:55,642 - mmdet - INFO - Epoch [2][3100/7033]	lr: 1.866e-04, eta: 13:00:10, time: 1.468, data_time: 0.034, memory: 18614, loss_cls: 0.0844, loss_bbox: 0.2352, d0.loss_cls: 0.1879, d0.loss_bbox: 0.3639, d1.loss_cls: 0.1215, d1.loss_bbox: 0.2829, d2.loss_cls: 0.1032, d2.loss_bbox: 0.2554, d3.loss_cls: 0.0910, d3.loss_bbox: 0.2490, d4.loss_cls: 0.0857, d4.loss_bbox: 0.2387, loss: 2.2989, grad_norm: 34.5840
2025-06-18 15:57:08,259 - mmdet - INFO - Epoch [2][3150/7033]	lr: 1.866e-04, eta: 12:58:56, time: 1.452, data_time: 0.025, memory: 18614, loss_cls: 0.0849, loss_bbox: 0.2329, d0.loss_cls: 0.1818, d0.loss_bbox: 0.3577, d1.loss_cls: 0.1176, d1.loss_bbox: 0.2752, d2.loss_cls: 0.1019, d2.loss_bbox: 0.2494, d3.loss_cls: 0.0882, d3.loss_bbox: 0.2423, d4.loss_cls: 0.0860, d4.loss_bbox: 0.2330, loss: 2.2508, grad_norm: 18.8384
2025-06-18 15:58:22,699 - mmdet - INFO - Epoch [2][3200/7033]	lr: 1.866e-04, eta: 12:57:47, time: 1.489, data_time: 0.027, memory: 18614, loss_cls: 0.0981, loss_bbox: 0.2472, d0.loss_cls: 0.1898, d0.loss_bbox: 0.3629, d1.loss_cls: 0.1297, d1.loss_bbox: 0.2811, d2.loss_cls: 0.1113, d2.loss_bbox: 0.2593, d3.loss_cls: 0.1005, d3.loss_bbox: 0.2508, d4.loss_cls: 0.0985, d4.loss_bbox: 0.2474, loss: 2.3768, grad_norm: 26.7998
2025-06-18 15:59:35,420 - mmdet - INFO - Epoch [2][3250/7033]	lr: 1.866e-04, eta: 12:56:33, time: 1.454, data_time: 0.028, memory: 18614, loss_cls: 0.0830, loss_bbox: 0.2373, d0.loss_cls: 0.1808, d0.loss_bbox: 0.3536, d1.loss_cls: 0.1144, d1.loss_bbox: 0.2766, d2.loss_cls: 0.0980, d2.loss_bbox: 0.2506, d3.loss_cls: 0.0867, d3.loss_bbox: 0.2448, d4.loss_cls: 0.0852, d4.loss_bbox: 0.2361, loss: 2.2471, grad_norm: 34.1016
2025-06-18 16:00:48,519 - mmdet - INFO - Epoch [2][3300/7033]	lr: 1.866e-04, eta: 12:55:21, time: 1.462, data_time: 0.030, memory: 18614, loss_cls: 0.0800, loss_bbox: 0.2219, d0.loss_cls: 0.1724, d0.loss_bbox: 0.3389, d1.loss_cls: 0.1091, d1.loss_bbox: 0.2652, d2.loss_cls: 0.0943, d2.loss_bbox: 0.2418, d3.loss_cls: 0.0854, d3.loss_bbox: 0.2315, d4.loss_cls: 0.0805, d4.loss_bbox: 0.2246, loss: 2.1457, grad_norm: 39.3476
2025-06-18 16:02:01,306 - mmdet - INFO - Epoch [2][3350/7033]	lr: 1.866e-04, eta: 12:54:07, time: 1.456, data_time: 0.030, memory: 18614, loss_cls: 0.0762, loss_bbox: 0.2208, d0.loss_cls: 0.1777, d0.loss_bbox: 0.3392, d1.loss_cls: 0.1112, d1.loss_bbox: 0.2607, d2.loss_cls: 0.0927, d2.loss_bbox: 0.2422, d3.loss_cls: 0.0797, d3.loss_bbox: 0.2353, d4.loss_cls: 0.0762, d4.loss_bbox: 0.2237, loss: 2.1356, grad_norm: 42.5824
2025-06-18 16:03:13,915 - mmdet - INFO - Epoch [2][3400/7033]	lr: 1.866e-04, eta: 12:52:53, time: 1.452, data_time: 0.025, memory: 18614, loss_cls: 0.0844, loss_bbox: 0.2355, d0.loss_cls: 0.1926, d0.loss_bbox: 0.3707, d1.loss_cls: 0.1204, d1.loss_bbox: 0.2806, d2.loss_cls: 0.1033, d2.loss_bbox: 0.2554, d3.loss_cls: 0.0924, d3.loss_bbox: 0.2469, d4.loss_cls: 0.0865, d4.loss_bbox: 0.2382, loss: 2.3069, grad_norm: 17.8323
2025-06-18 16:04:28,081 - mmdet - INFO - Epoch [2][3450/7033]	lr: 1.866e-04, eta: 12:51:43, time: 1.483, data_time: 0.026, memory: 18614, loss_cls: 0.0914, loss_bbox: 0.2226, d0.loss_cls: 0.1959, d0.loss_bbox: 0.3504, d1.loss_cls: 0.1318, d1.loss_bbox: 0.2684, d2.loss_cls: 0.1113, d2.loss_bbox: 0.2425, d3.loss_cls: 0.0962, d3.loss_bbox: 0.2337, d4.loss_cls: 0.0928, d4.loss_bbox: 0.2253, loss: 2.2622, grad_norm: 35.9401
2025-06-18 16:05:40,973 - mmdet - INFO - Epoch [2][3500/7033]	lr: 1.866e-04, eta: 12:50:30, time: 1.458, data_time: 0.030, memory: 18614, loss_cls: 0.0881, loss_bbox: 0.2302, d0.loss_cls: 0.1973, d0.loss_bbox: 0.3542, d1.loss_cls: 0.1377, d1.loss_bbox: 0.2757, d2.loss_cls: 0.1099, d2.loss_bbox: 0.2544, d3.loss_cls: 0.0941, d3.loss_bbox: 0.2415, d4.loss_cls: 0.0890, d4.loss_bbox: 0.2324, loss: 2.3045, grad_norm: 23.2298
2025-06-18 16:06:53,822 - mmdet - INFO - Epoch [2][3550/7033]	lr: 1.866e-04, eta: 12:49:17, time: 1.457, data_time: 0.025, memory: 18614, loss_cls: 0.0829, loss_bbox: 0.2308, d0.loss_cls: 0.1889, d0.loss_bbox: 0.3544, d1.loss_cls: 0.1254, d1.loss_bbox: 0.2737, d2.loss_cls: 0.1048, d2.loss_bbox: 0.2503, d3.loss_cls: 0.0892, d3.loss_bbox: 0.2417, d4.loss_cls: 0.0834, d4.loss_bbox: 0.2343, loss: 2.2596, grad_norm: 83.9090
2025-06-18 16:08:06,747 - mmdet - INFO - Epoch [2][3600/7033]	lr: 1.866e-04, eta: 12:48:03, time: 1.459, data_time: 0.030, memory: 18614, loss_cls: 0.0899, loss_bbox: 0.2301, d0.loss_cls: 0.1928, d0.loss_bbox: 0.3656, d1.loss_cls: 0.1286, d1.loss_bbox: 0.2820, d2.loss_cls: 0.1125, d2.loss_bbox: 0.2501, d3.loss_cls: 0.0974, d3.loss_bbox: 0.2457, d4.loss_cls: 0.0919, d4.loss_bbox: 0.2380, loss: 2.3247, grad_norm: 36.0381
2025-06-18 16:09:19,750 - mmdet - INFO - Epoch [2][3650/7033]	lr: 1.866e-04, eta: 12:46:50, time: 1.460, data_time: 0.025, memory: 18614, loss_cls: 0.0831, loss_bbox: 0.2359, d0.loss_cls: 0.1851, d0.loss_bbox: 0.3551, d1.loss_cls: 0.1191, d1.loss_bbox: 0.2789, d2.loss_cls: 0.1049, d2.loss_bbox: 0.2478, d3.loss_cls: 0.0918, d3.loss_bbox: 0.2418, d4.loss_cls: 0.0842, d4.loss_bbox: 0.2349, loss: 2.2626, grad_norm: 39.6036
2025-06-18 16:10:32,625 - mmdet - INFO - Epoch [2][3700/7033]	lr: 1.866e-04, eta: 12:45:37, time: 1.457, data_time: 0.029, memory: 18614, loss_cls: 0.0916, loss_bbox: 0.2290, d0.loss_cls: 0.1840, d0.loss_bbox: 0.3530, d1.loss_cls: 0.1224, d1.loss_bbox: 0.2729, d2.loss_cls: 0.1084, d2.loss_bbox: 0.2466, d3.loss_cls: 0.0946, d3.loss_bbox: 0.2380, d4.loss_cls: 0.0921, d4.loss_bbox: 0.2315, loss: 2.2640, grad_norm: 35.1063
2025-06-18 16:11:45,258 - mmdet - INFO - Epoch [2][3750/7033]	lr: 1.866e-04, eta: 12:44:23, time: 1.453, data_time: 0.027, memory: 18614, loss_cls: 0.0794, loss_bbox: 0.2208, d0.loss_cls: 0.1791, d0.loss_bbox: 0.3450, d1.loss_cls: 0.1178, d1.loss_bbox: 0.2644, d2.loss_cls: 0.1010, d2.loss_bbox: 0.2403, d3.loss_cls: 0.0876, d3.loss_bbox: 0.2312, d4.loss_cls: 0.0818, d4.loss_bbox: 0.2241, loss: 2.1725, grad_norm: 31.8081
2025-06-18 16:12:59,586 - mmdet - INFO - Epoch [2][3800/7033]	lr: 1.866e-04, eta: 12:43:14, time: 1.487, data_time: 0.025, memory: 18614, loss_cls: 0.0811, loss_bbox: 0.2299, d0.loss_cls: 0.1806, d0.loss_bbox: 0.3564, d1.loss_cls: 0.1154, d1.loss_bbox: 0.2804, d2.loss_cls: 0.0981, d2.loss_bbox: 0.2561, d3.loss_cls: 0.0866, d3.loss_bbox: 0.2431, d4.loss_cls: 0.0838, d4.loss_bbox: 0.2333, loss: 2.2448, grad_norm: 35.3021
2025-06-18 16:14:12,696 - mmdet - INFO - Epoch [2][3850/7033]	lr: 1.866e-04, eta: 12:42:01, time: 1.462, data_time: 0.029, memory: 18614, loss_cls: 0.0839, loss_bbox: 0.2320, d0.loss_cls: 0.1809, d0.loss_bbox: 0.3501, d1.loss_cls: 0.1147, d1.loss_bbox: 0.2742, d2.loss_cls: 0.1007, d2.loss_bbox: 0.2495, d3.loss_cls: 0.0900, d3.loss_bbox: 0.2438, d4.loss_cls: 0.0855, d4.loss_bbox: 0.2353, loss: 2.2406, grad_norm: 41.5494
2025-06-18 16:15:26,204 - mmdet - INFO - Epoch [2][3900/7033]	lr: 1.866e-04, eta: 12:40:49, time: 1.470, data_time: 0.034, memory: 18614, loss_cls: 0.0808, loss_bbox: 0.2265, d0.loss_cls: 0.1817, d0.loss_bbox: 0.3441, d1.loss_cls: 0.1139, d1.loss_bbox: 0.2694, d2.loss_cls: 0.0949, d2.loss_bbox: 0.2472, d3.loss_cls: 0.0835, d3.loss_bbox: 0.2408, d4.loss_cls: 0.0828, d4.loss_bbox: 0.2301, loss: 2.1957, grad_norm: 51.0985
2025-06-18 16:16:38,834 - mmdet - INFO - Epoch [2][3950/7033]	lr: 1.866e-04, eta: 12:39:35, time: 1.453, data_time: 0.026, memory: 18614, loss_cls: 0.0868, loss_bbox: 0.2300, d0.loss_cls: 0.1849, d0.loss_bbox: 0.3518, d1.loss_cls: 0.1240, d1.loss_bbox: 0.2742, d2.loss_cls: 0.1047, d2.loss_bbox: 0.2524, d3.loss_cls: 0.0933, d3.loss_bbox: 0.2436, d4.loss_cls: 0.0878, d4.loss_bbox: 0.2338, loss: 2.2673, grad_norm: 46.0559
2025-06-18 16:17:51,809 - mmdet - INFO - Epoch [2][4000/7033]	lr: 1.866e-04, eta: 12:38:22, time: 1.460, data_time: 0.026, memory: 18614, loss_cls: 0.0889, loss_bbox: 0.2359, d0.loss_cls: 0.1907, d0.loss_bbox: 0.3684, d1.loss_cls: 0.1264, d1.loss_bbox: 0.2784, d2.loss_cls: 0.1078, d2.loss_bbox: 0.2555, d3.loss_cls: 0.0965, d3.loss_bbox: 0.2471, d4.loss_cls: 0.0903, d4.loss_bbox: 0.2402, loss: 2.3261, grad_norm: 44.9706
2025-06-18 16:19:06,366 - mmdet - INFO - Epoch [2][4050/7033]	lr: 1.866e-04, eta: 12:37:14, time: 1.491, data_time: 0.025, memory: 18614, loss_cls: 0.0845, loss_bbox: 0.2313, d0.loss_cls: 0.1838, d0.loss_bbox: 0.3641, d1.loss_cls: 0.1180, d1.loss_bbox: 0.2812, d2.loss_cls: 0.0992, d2.loss_bbox: 0.2541, d3.loss_cls: 0.0896, d3.loss_bbox: 0.2447, d4.loss_cls: 0.0863, d4.loss_bbox: 0.2355, loss: 2.2722, grad_norm: 41.0299
2025-06-18 16:20:19,342 - mmdet - INFO - Epoch [2][4100/7033]	lr: 1.866e-04, eta: 12:36:01, time: 1.460, data_time: 0.030, memory: 18614, loss_cls: 0.0833, loss_bbox: 0.2344, d0.loss_cls: 0.1730, d0.loss_bbox: 0.3610, d1.loss_cls: 0.1169, d1.loss_bbox: 0.2787, d2.loss_cls: 0.1008, d2.loss_bbox: 0.2542, d3.loss_cls: 0.0888, d3.loss_bbox: 0.2465, d4.loss_cls: 0.0852, d4.loss_bbox: 0.2350, loss: 2.2579, grad_norm: 80.4992
2025-06-18 16:21:31,915 - mmdet - INFO - Epoch [2][4150/7033]	lr: 1.866e-04, eta: 12:34:46, time: 1.451, data_time: 0.025, memory: 18614, loss_cls: 0.0851, loss_bbox: 0.2254, d0.loss_cls: 0.1876, d0.loss_bbox: 0.3514, d1.loss_cls: 0.1210, d1.loss_bbox: 0.2757, d2.loss_cls: 0.1050, d2.loss_bbox: 0.2491, d3.loss_cls: 0.0924, d3.loss_bbox: 0.2390, d4.loss_cls: 0.0877, d4.loss_bbox: 0.2269, loss: 2.2464, grad_norm: 81.6161
2025-06-18 16:22:44,985 - mmdet - INFO - Epoch [2][4200/7033]	lr: 1.866e-04, eta: 12:33:34, time: 1.461, data_time: 0.030, memory: 18614, loss_cls: 0.0843, loss_bbox: 0.2282, d0.loss_cls: 0.1920, d0.loss_bbox: 0.3510, d1.loss_cls: 0.1215, d1.loss_bbox: 0.2766, d2.loss_cls: 0.1034, d2.loss_bbox: 0.2520, d3.loss_cls: 0.0904, d3.loss_bbox: 0.2418, d4.loss_cls: 0.0866, d4.loss_bbox: 0.2301, loss: 2.2581, grad_norm: 26.6262
2025-06-18 16:23:57,607 - mmdet - INFO - Epoch [2][4250/7033]	lr: 1.866e-04, eta: 12:32:19, time: 1.452, data_time: 0.026, memory: 18614, loss_cls: 0.0864, loss_bbox: 0.2273, d0.loss_cls: 0.1756, d0.loss_bbox: 0.3459, d1.loss_cls: 0.1186, d1.loss_bbox: 0.2689, d2.loss_cls: 0.1023, d2.loss_bbox: 0.2486, d3.loss_cls: 0.0908, d3.loss_bbox: 0.2392, d4.loss_cls: 0.0878, d4.loss_bbox: 0.2281, loss: 2.2197, grad_norm: 24.0261
2025-06-18 16:25:10,084 - mmdet - INFO - Epoch [2][4300/7033]	lr: 1.866e-04, eta: 12:31:05, time: 1.450, data_time: 0.029, memory: 18614, loss_cls: 0.0859, loss_bbox: 0.2319, d0.loss_cls: 0.1768, d0.loss_bbox: 0.3519, d1.loss_cls: 0.1175, d1.loss_bbox: 0.2702, d2.loss_cls: 0.1000, d2.loss_bbox: 0.2489, d3.loss_cls: 0.0901, d3.loss_bbox: 0.2394, d4.loss_cls: 0.0872, d4.loss_bbox: 0.2327, loss: 2.2324, grad_norm: 42.8299
2025-06-18 16:26:23,315 - mmdet - INFO - Epoch [2][4350/7033]	lr: 1.866e-04, eta: 12:29:53, time: 1.465, data_time: 0.033, memory: 18614, loss_cls: 0.0899, loss_bbox: 0.2337, d0.loss_cls: 0.1837, d0.loss_bbox: 0.3544, d1.loss_cls: 0.1210, d1.loss_bbox: 0.2710, d2.loss_cls: 0.1051, d2.loss_bbox: 0.2499, d3.loss_cls: 0.0928, d3.loss_bbox: 0.2399, d4.loss_cls: 0.0901, d4.loss_bbox: 0.2326, loss: 2.2639, grad_norm: 25.6340
2025-06-18 16:27:36,192 - mmdet - INFO - Epoch [2][4400/7033]	lr: 1.866e-04, eta: 12:28:39, time: 1.458, data_time: 0.025, memory: 18614, loss_cls: 0.0757, loss_bbox: 0.2163, d0.loss_cls: 0.1661, d0.loss_bbox: 0.3387, d1.loss_cls: 0.1038, d1.loss_bbox: 0.2571, d2.loss_cls: 0.0891, d2.loss_bbox: 0.2359, d3.loss_cls: 0.0800, d3.loss_bbox: 0.2320, d4.loss_cls: 0.0768, d4.loss_bbox: 0.2195, loss: 2.0910, grad_norm: 21.6113
2025-06-18 16:28:48,915 - mmdet - INFO - Epoch [2][4450/7033]	lr: 1.866e-04, eta: 12:27:26, time: 1.454, data_time: 0.026, memory: 18614, loss_cls: 0.0881, loss_bbox: 0.2260, d0.loss_cls: 0.1827, d0.loss_bbox: 0.3503, d1.loss_cls: 0.1214, d1.loss_bbox: 0.2696, d2.loss_cls: 0.1047, d2.loss_bbox: 0.2435, d3.loss_cls: 0.0916, d3.loss_bbox: 0.2365, d4.loss_cls: 0.0893, d4.loss_bbox: 0.2306, loss: 2.2343, grad_norm: 33.0466
2025-06-18 16:30:01,419 - mmdet - INFO - Epoch [2][4500/7033]	lr: 1.866e-04, eta: 12:26:11, time: 1.450, data_time: 0.025, memory: 18614, loss_cls: 0.0815, loss_bbox: 0.2278, d0.loss_cls: 0.1818, d0.loss_bbox: 0.3469, d1.loss_cls: 0.1171, d1.loss_bbox: 0.2739, d2.loss_cls: 0.0997, d2.loss_bbox: 0.2446, d3.loss_cls: 0.0877, d3.loss_bbox: 0.2379, d4.loss_cls: 0.0833, d4.loss_bbox: 0.2291, loss: 2.2114, grad_norm: 32.7649
2025-06-18 16:31:14,346 - mmdet - INFO - Epoch [2][4550/7033]	lr: 1.866e-04, eta: 12:24:58, time: 1.459, data_time: 0.028, memory: 18614, loss_cls: 0.0809, loss_bbox: 0.2208, d0.loss_cls: 0.1822, d0.loss_bbox: 0.3545, d1.loss_cls: 0.1164, d1.loss_bbox: 0.2698, d2.loss_cls: 0.0988, d2.loss_bbox: 0.2409, d3.loss_cls: 0.0850, d3.loss_bbox: 0.2326, d4.loss_cls: 0.0828, d4.loss_bbox: 0.2236, loss: 2.1883, grad_norm: 55.7085
2025-06-18 16:32:27,393 - mmdet - INFO - Epoch [2][4600/7033]	lr: 1.866e-04, eta: 12:23:45, time: 1.461, data_time: 0.030, memory: 18614, loss_cls: 0.0888, loss_bbox: 0.2230, d0.loss_cls: 0.1824, d0.loss_bbox: 0.3518, d1.loss_cls: 0.1235, d1.loss_bbox: 0.2681, d2.loss_cls: 0.1044, d2.loss_bbox: 0.2443, d3.loss_cls: 0.0934, d3.loss_bbox: 0.2344, d4.loss_cls: 0.0878, d4.loss_bbox: 0.2262, loss: 2.2281, grad_norm: 33.5636
2025-06-18 16:33:40,077 - mmdet - INFO - Epoch [2][4650/7033]	lr: 1.866e-04, eta: 12:22:31, time: 1.454, data_time: 0.028, memory: 18614, loss_cls: 0.0832, loss_bbox: 0.2278, d0.loss_cls: 0.1843, d0.loss_bbox: 0.3609, d1.loss_cls: 0.1217, d1.loss_bbox: 0.2695, d2.loss_cls: 0.1019, d2.loss_bbox: 0.2464, d3.loss_cls: 0.0891, d3.loss_bbox: 0.2377, d4.loss_cls: 0.0856, d4.loss_bbox: 0.2304, loss: 2.2385, grad_norm: 46.3728
2025-06-18 16:34:53,056 - mmdet - INFO - Epoch [2][4700/7033]	lr: 1.866e-04, eta: 12:21:18, time: 1.460, data_time: 0.028, memory: 18614, loss_cls: 0.0827, loss_bbox: 0.2293, d0.loss_cls: 0.1882, d0.loss_bbox: 0.3512, d1.loss_cls: 0.1224, d1.loss_bbox: 0.2643, d2.loss_cls: 0.0986, d2.loss_bbox: 0.2454, d3.loss_cls: 0.0862, d3.loss_bbox: 0.2369, d4.loss_cls: 0.0834, d4.loss_bbox: 0.2322, loss: 2.2210, grad_norm: 26.0156
2025-06-18 16:36:05,864 - mmdet - INFO - Epoch [2][4750/7033]	lr: 1.866e-04, eta: 12:20:05, time: 1.456, data_time: 0.026, memory: 18614, loss_cls: 0.0771, loss_bbox: 0.2295, d0.loss_cls: 0.1709, d0.loss_bbox: 0.3536, d1.loss_cls: 0.1142, d1.loss_bbox: 0.2679, d2.loss_cls: 0.0956, d2.loss_bbox: 0.2441, d3.loss_cls: 0.0834, d3.loss_bbox: 0.2377, d4.loss_cls: 0.0782, d4.loss_bbox: 0.2324, loss: 2.1844, grad_norm: 21.0325
2025-06-18 16:37:19,161 - mmdet - INFO - Epoch [2][4800/7033]	lr: 1.866e-04, eta: 12:18:52, time: 1.466, data_time: 0.034, memory: 18614, loss_cls: 0.0814, loss_bbox: 0.2260, d0.loss_cls: 0.1782, d0.loss_bbox: 0.3442, d1.loss_cls: 0.1121, d1.loss_bbox: 0.2640, d2.loss_cls: 0.0991, d2.loss_bbox: 0.2441, d3.loss_cls: 0.0874, d3.loss_bbox: 0.2370, d4.loss_cls: 0.0828, d4.loss_bbox: 0.2285, loss: 2.1849, grad_norm: 44.4765
2025-06-18 16:38:31,834 - mmdet - INFO - Epoch [2][4850/7033]	lr: 1.866e-04, eta: 12:17:39, time: 1.453, data_time: 0.026, memory: 18614, loss_cls: 0.0756, loss_bbox: 0.2145, d0.loss_cls: 0.1746, d0.loss_bbox: 0.3366, d1.loss_cls: 0.1114, d1.loss_bbox: 0.2584, d2.loss_cls: 0.0941, d2.loss_bbox: 0.2357, d3.loss_cls: 0.0821, d3.loss_bbox: 0.2258, d4.loss_cls: 0.0767, d4.loss_bbox: 0.2187, loss: 2.1043, grad_norm: 26.8141
2025-06-18 16:39:44,966 - mmdet - INFO - Epoch [2][4900/7033]	lr: 1.866e-04, eta: 12:16:26, time: 1.463, data_time: 0.030, memory: 18614, loss_cls: 0.0874, loss_bbox: 0.2303, d0.loss_cls: 0.1842, d0.loss_bbox: 0.3476, d1.loss_cls: 0.1230, d1.loss_bbox: 0.2722, d2.loss_cls: 0.1014, d2.loss_bbox: 0.2490, d3.loss_cls: 0.0902, d3.loss_bbox: 0.2441, d4.loss_cls: 0.0879, d4.loss_bbox: 0.2342, loss: 2.2516, grad_norm: 36.6972
2025-06-18 16:40:58,017 - mmdet - INFO - Epoch [2][4950/7033]	lr: 1.866e-04, eta: 12:15:13, time: 1.461, data_time: 0.028, memory: 18614, loss_cls: 0.0849, loss_bbox: 0.2272, d0.loss_cls: 0.1880, d0.loss_bbox: 0.3493, d1.loss_cls: 0.1250, d1.loss_bbox: 0.2726, d2.loss_cls: 0.1021, d2.loss_bbox: 0.2487, d3.loss_cls: 0.0897, d3.loss_bbox: 0.2401, d4.loss_cls: 0.0859, d4.loss_bbox: 0.2315, loss: 2.2449, grad_norm: 253.3824
2025-06-18 16:42:10,785 - mmdet - INFO - Epoch [2][5000/7033]	lr: 1.866e-04, eta: 12:14:00, time: 1.455, data_time: 0.026, memory: 18614, loss_cls: 0.0824, loss_bbox: 0.2212, d0.loss_cls: 0.1750, d0.loss_bbox: 0.3471, d1.loss_cls: 0.1205, d1.loss_bbox: 0.2668, d2.loss_cls: 0.1017, d2.loss_bbox: 0.2408, d3.loss_cls: 0.0887, d3.loss_bbox: 0.2316, d4.loss_cls: 0.0842, d4.loss_bbox: 0.2249, loss: 2.1848, grad_norm: 22.3052
2025-06-18 16:43:23,753 - mmdet - INFO - Epoch [2][5050/7033]	lr: 1.866e-04, eta: 12:12:46, time: 1.459, data_time: 0.029, memory: 18614, loss_cls: 0.0884, loss_bbox: 0.2293, d0.loss_cls: 0.1861, d0.loss_bbox: 0.3484, d1.loss_cls: 0.1219, d1.loss_bbox: 0.2668, d2.loss_cls: 0.1050, d2.loss_bbox: 0.2448, d3.loss_cls: 0.0935, d3.loss_bbox: 0.2362, d4.loss_cls: 0.0889, d4.loss_bbox: 0.2291, loss: 2.2386, grad_norm: 28.9957
2025-06-18 16:44:36,784 - mmdet - INFO - Epoch [2][5100/7033]	lr: 1.866e-04, eta: 12:11:34, time: 1.461, data_time: 0.028, memory: 18614, loss_cls: 0.0795, loss_bbox: 0.2200, d0.loss_cls: 0.1777, d0.loss_bbox: 0.3397, d1.loss_cls: 0.1149, d1.loss_bbox: 0.2622, d2.loss_cls: 0.0957, d2.loss_bbox: 0.2386, d3.loss_cls: 0.0842, d3.loss_bbox: 0.2307, d4.loss_cls: 0.0793, d4.loss_bbox: 0.2255, loss: 2.1480, grad_norm: 24.9422
2025-06-18 16:45:49,405 - mmdet - INFO - Epoch [2][5150/7033]	lr: 1.866e-04, eta: 12:10:20, time: 1.452, data_time: 0.028, memory: 18614, loss_cls: 0.0849, loss_bbox: 0.2293, d0.loss_cls: 0.1838, d0.loss_bbox: 0.3540, d1.loss_cls: 0.1146, d1.loss_bbox: 0.2739, d2.loss_cls: 0.0987, d2.loss_bbox: 0.2530, d3.loss_cls: 0.0880, d3.loss_bbox: 0.2427, d4.loss_cls: 0.0847, d4.loss_bbox: 0.2323, loss: 2.2400, grad_norm: 26.1474
2025-06-18 16:47:01,846 - mmdet - INFO - Epoch [2][5200/7033]	lr: 1.866e-04, eta: 12:09:05, time: 1.449, data_time: 0.025, memory: 18614, loss_cls: 0.0902, loss_bbox: 0.2232, d0.loss_cls: 0.1811, d0.loss_bbox: 0.3501, d1.loss_cls: 0.1192, d1.loss_bbox: 0.2672, d2.loss_cls: 0.1010, d2.loss_bbox: 0.2451, d3.loss_cls: 0.0924, d3.loss_bbox: 0.2391, d4.loss_cls: 0.0900, d4.loss_bbox: 0.2275, loss: 2.2260, grad_norm: 21.2963
2025-06-18 16:48:15,113 - mmdet - INFO - Epoch [2][5250/7033]	lr: 1.866e-04, eta: 12:07:53, time: 1.465, data_time: 0.034, memory: 18614, loss_cls: 0.0871, loss_bbox: 0.2258, d0.loss_cls: 0.1869, d0.loss_bbox: 0.3533, d1.loss_cls: 0.1247, d1.loss_bbox: 0.2690, d2.loss_cls: 0.1067, d2.loss_bbox: 0.2473, d3.loss_cls: 0.0938, d3.loss_bbox: 0.2357, d4.loss_cls: 0.0892, d4.loss_bbox: 0.2278, loss: 2.2474, grad_norm: 29.4681
2025-06-18 16:49:28,060 - mmdet - INFO - Epoch [2][5300/7033]	lr: 1.866e-04, eta: 12:06:40, time: 1.459, data_time: 0.027, memory: 18614, loss_cls: 0.0858, loss_bbox: 0.2392, d0.loss_cls: 0.1838, d0.loss_bbox: 0.3577, d1.loss_cls: 0.1173, d1.loss_bbox: 0.2768, d2.loss_cls: 0.1004, d2.loss_bbox: 0.2538, d3.loss_cls: 0.0884, d3.loss_bbox: 0.2483, d4.loss_cls: 0.0875, d4.loss_bbox: 0.2383, loss: 2.2775, grad_norm: 47.7412
2025-06-18 16:50:42,530 - mmdet - INFO - Epoch [2][5350/7033]	lr: 1.866e-04, eta: 12:05:30, time: 1.489, data_time: 0.027, memory: 18614, loss_cls: 0.0824, loss_bbox: 0.2214, d0.loss_cls: 0.1817, d0.loss_bbox: 0.3451, d1.loss_cls: 0.1186, d1.loss_bbox: 0.2638, d2.loss_cls: 0.1009, d2.loss_bbox: 0.2413, d3.loss_cls: 0.0876, d3.loss_bbox: 0.2337, d4.loss_cls: 0.0846, d4.loss_bbox: 0.2230, loss: 2.1841, grad_norm: 57.8009
2025-06-18 16:51:55,394 - mmdet - INFO - Epoch [2][5400/7033]	lr: 1.866e-04, eta: 12:04:17, time: 1.457, data_time: 0.029, memory: 18614, loss_cls: 0.0784, loss_bbox: 0.2165, d0.loss_cls: 0.1766, d0.loss_bbox: 0.3464, d1.loss_cls: 0.1144, d1.loss_bbox: 0.2640, d2.loss_cls: 0.0950, d2.loss_bbox: 0.2364, d3.loss_cls: 0.0843, d3.loss_bbox: 0.2273, d4.loss_cls: 0.0789, d4.loss_bbox: 0.2203, loss: 2.1386, grad_norm: 40.8520
2025-06-18 16:53:08,363 - mmdet - INFO - Epoch [2][5450/7033]	lr: 1.866e-04, eta: 12:03:04, time: 1.459, data_time: 0.026, memory: 18614, loss_cls: 0.0738, loss_bbox: 0.2302, d0.loss_cls: 0.1776, d0.loss_bbox: 0.3673, d1.loss_cls: 0.1155, d1.loss_bbox: 0.2742, d2.loss_cls: 0.0945, d2.loss_bbox: 0.2502, d3.loss_cls: 0.0817, d3.loss_bbox: 0.2414, d4.loss_cls: 0.0763, d4.loss_bbox: 0.2327, loss: 2.2155, grad_norm: 20.7959
2025-06-18 16:54:21,127 - mmdet - INFO - Epoch [2][5500/7033]	lr: 1.866e-04, eta: 12:01:50, time: 1.455, data_time: 0.025, memory: 18614, loss_cls: 0.0819, loss_bbox: 0.2350, d0.loss_cls: 0.1839, d0.loss_bbox: 0.3554, d1.loss_cls: 0.1256, d1.loss_bbox: 0.2761, d2.loss_cls: 0.1046, d2.loss_bbox: 0.2536, d3.loss_cls: 0.0911, d3.loss_bbox: 0.2471, d4.loss_cls: 0.0845, d4.loss_bbox: 0.2372, loss: 2.2758, grad_norm: 50.2972
2025-06-18 16:55:34,024 - mmdet - INFO - Epoch [2][5550/7033]	lr: 1.866e-04, eta: 12:00:37, time: 1.458, data_time: 0.030, memory: 18614, loss_cls: 0.0864, loss_bbox: 0.2363, d0.loss_cls: 0.1795, d0.loss_bbox: 0.3591, d1.loss_cls: 0.1209, d1.loss_bbox: 0.2764, d2.loss_cls: 0.1038, d2.loss_bbox: 0.2508, d3.loss_cls: 0.0920, d3.loss_bbox: 0.2421, d4.loss_cls: 0.0873, d4.loss_bbox: 0.2357, loss: 2.2704, grad_norm: 31.5492
2025-06-18 16:56:48,383 - mmdet - INFO - Epoch [2][5600/7033]	lr: 1.866e-04, eta: 11:59:27, time: 1.487, data_time: 0.027, memory: 18614, loss_cls: 0.0840, loss_bbox: 0.2220, d0.loss_cls: 0.1774, d0.loss_bbox: 0.3460, d1.loss_cls: 0.1154, d1.loss_bbox: 0.2659, d2.loss_cls: 0.0985, d2.loss_bbox: 0.2436, d3.loss_cls: 0.0882, d3.loss_bbox: 0.2319, d4.loss_cls: 0.0848, d4.loss_bbox: 0.2249, loss: 2.1827, grad_norm: 31.9355
2025-06-18 16:58:01,258 - mmdet - INFO - Epoch [2][5650/7033]	lr: 1.866e-04, eta: 11:58:14, time: 1.457, data_time: 0.028, memory: 18614, loss_cls: 0.0775, loss_bbox: 0.2327, d0.loss_cls: 0.1804, d0.loss_bbox: 0.3598, d1.loss_cls: 0.1154, d1.loss_bbox: 0.2793, d2.loss_cls: 0.0962, d2.loss_bbox: 0.2560, d3.loss_cls: 0.0815, d3.loss_bbox: 0.2455, d4.loss_cls: 0.0795, d4.loss_bbox: 0.2347, loss: 2.2387, grad_norm: 48.3862
2025-06-18 16:59:13,975 - mmdet - INFO - Epoch [2][5700/7033]	lr: 1.866e-04, eta: 11:57:00, time: 1.454, data_time: 0.027, memory: 18614, loss_cls: 0.0724, loss_bbox: 0.2175, d0.loss_cls: 0.1688, d0.loss_bbox: 0.3400, d1.loss_cls: 0.1050, d1.loss_bbox: 0.2630, d2.loss_cls: 0.0880, d2.loss_bbox: 0.2380, d3.loss_cls: 0.0777, d3.loss_bbox: 0.2290, d4.loss_cls: 0.0736, d4.loss_bbox: 0.2217, loss: 2.0949, grad_norm: 25.1992
2025-06-18 17:00:27,075 - mmdet - INFO - Epoch [2][5750/7033]	lr: 1.866e-04, eta: 11:55:48, time: 1.462, data_time: 0.029, memory: 18614, loss_cls: 0.0895, loss_bbox: 0.2238, d0.loss_cls: 0.1845, d0.loss_bbox: 0.3482, d1.loss_cls: 0.1183, d1.loss_bbox: 0.2680, d2.loss_cls: 0.1001, d2.loss_bbox: 0.2420, d3.loss_cls: 0.0942, d3.loss_bbox: 0.2349, d4.loss_cls: 0.0914, d4.loss_bbox: 0.2252, loss: 2.2203, grad_norm: 31.1590
2025-06-18 17:01:40,061 - mmdet - INFO - Epoch [2][5800/7033]	lr: 1.866e-04, eta: 11:54:35, time: 1.460, data_time: 0.031, memory: 18614, loss_cls: 0.0806, loss_bbox: 0.2140, d0.loss_cls: 0.1772, d0.loss_bbox: 0.3390, d1.loss_cls: 0.1127, d1.loss_bbox: 0.2552, d2.loss_cls: 0.0956, d2.loss_bbox: 0.2346, d3.loss_cls: 0.0843, d3.loss_bbox: 0.2266, d4.loss_cls: 0.0817, d4.loss_bbox: 0.2183, loss: 2.1198, grad_norm: 46.7827
2025-06-18 17:02:53,009 - mmdet - INFO - Epoch [2][5850/7033]	lr: 1.866e-04, eta: 11:53:21, time: 1.459, data_time: 0.027, memory: 18614, loss_cls: 0.0866, loss_bbox: 0.2249, d0.loss_cls: 0.1804, d0.loss_bbox: 0.3531, d1.loss_cls: 0.1197, d1.loss_bbox: 0.2664, d2.loss_cls: 0.0986, d2.loss_bbox: 0.2454, d3.loss_cls: 0.0899, d3.loss_bbox: 0.2374, d4.loss_cls: 0.0867, d4.loss_bbox: 0.2298, loss: 2.2189, grad_norm: 113.5317
2025-06-18 17:04:06,419 - mmdet - INFO - Epoch [2][5900/7033]	lr: 1.866e-04, eta: 11:52:09, time: 1.468, data_time: 0.034, memory: 18614, loss_cls: 0.0833, loss_bbox: 0.2203, d0.loss_cls: 0.1800, d0.loss_bbox: 0.3537, d1.loss_cls: 0.1156, d1.loss_bbox: 0.2642, d2.loss_cls: 0.0930, d2.loss_bbox: 0.2412, d3.loss_cls: 0.0870, d3.loss_bbox: 0.2318, d4.loss_cls: 0.0851, d4.loss_bbox: 0.2218, loss: 2.1768, grad_norm: 35.3342
2025-06-18 17:05:19,414 - mmdet - INFO - Epoch [2][5950/7033]	lr: 1.866e-04, eta: 11:50:56, time: 1.460, data_time: 0.030, memory: 18614, loss_cls: 0.0817, loss_bbox: 0.2303, d0.loss_cls: 0.1881, d0.loss_bbox: 0.3648, d1.loss_cls: 0.1200, d1.loss_bbox: 0.2761, d2.loss_cls: 0.0993, d2.loss_bbox: 0.2511, d3.loss_cls: 0.0856, d3.loss_bbox: 0.2414, d4.loss_cls: 0.0823, d4.loss_bbox: 0.2317, loss: 2.2526, grad_norm: 20.2828
2025-06-18 17:06:32,770 - mmdet - INFO - Epoch [2][6000/7033]	lr: 1.866e-04, eta: 11:49:44, time: 1.467, data_time: 0.034, memory: 18614, loss_cls: 0.0752, loss_bbox: 0.2161, d0.loss_cls: 0.1734, d0.loss_bbox: 0.3448, d1.loss_cls: 0.1124, d1.loss_bbox: 0.2600, d2.loss_cls: 0.0939, d2.loss_bbox: 0.2334, d3.loss_cls: 0.0823, d3.loss_bbox: 0.2283, d4.loss_cls: 0.0782, d4.loss_bbox: 0.2196, loss: 2.1177, grad_norm: 66.1089
2025-06-18 17:07:47,380 - mmdet - INFO - Epoch [2][6050/7033]	lr: 1.866e-04, eta: 11:48:35, time: 1.492, data_time: 0.031, memory: 18614, loss_cls: 0.0842, loss_bbox: 0.2318, d0.loss_cls: 0.1866, d0.loss_bbox: 0.3628, d1.loss_cls: 0.1230, d1.loss_bbox: 0.2775, d2.loss_cls: 0.1011, d2.loss_bbox: 0.2540, d3.loss_cls: 0.0886, d3.loss_bbox: 0.2434, d4.loss_cls: 0.0864, d4.loss_bbox: 0.2344, loss: 2.2738, grad_norm: 29.9010
2025-06-18 17:09:00,402 - mmdet - INFO - Epoch [2][6100/7033]	lr: 1.866e-04, eta: 11:47:22, time: 1.460, data_time: 0.029, memory: 18614, loss_cls: 0.0761, loss_bbox: 0.2160, d0.loss_cls: 0.1832, d0.loss_bbox: 0.3413, d1.loss_cls: 0.1142, d1.loss_bbox: 0.2593, d2.loss_cls: 0.0919, d2.loss_bbox: 0.2355, d3.loss_cls: 0.0794, d3.loss_bbox: 0.2286, d4.loss_cls: 0.0768, d4.loss_bbox: 0.2204, loss: 2.1227, grad_norm: 31.2122
2025-06-18 17:10:13,063 - mmdet - INFO - Epoch [2][6150/7033]	lr: 1.866e-04, eta: 11:46:08, time: 1.453, data_time: 0.025, memory: 18614, loss_cls: 0.0827, loss_bbox: 0.2210, d0.loss_cls: 0.1836, d0.loss_bbox: 0.3500, d1.loss_cls: 0.1225, d1.loss_bbox: 0.2669, d2.loss_cls: 0.1008, d2.loss_bbox: 0.2442, d3.loss_cls: 0.0892, d3.loss_bbox: 0.2353, d4.loss_cls: 0.0830, d4.loss_bbox: 0.2259, loss: 2.2051, grad_norm: 44.4320
2025-06-18 17:11:27,077 - mmdet - INFO - Epoch [2][6200/7033]	lr: 1.866e-04, eta: 11:44:57, time: 1.480, data_time: 0.050, memory: 18614, loss_cls: 0.0748, loss_bbox: 0.2225, d0.loss_cls: 0.1770, d0.loss_bbox: 0.3554, d1.loss_cls: 0.1125, d1.loss_bbox: 0.2707, d2.loss_cls: 0.0923, d2.loss_bbox: 0.2467, d3.loss_cls: 0.0780, d3.loss_bbox: 0.2372, d4.loss_cls: 0.0755, d4.loss_bbox: 0.2262, loss: 2.1688, grad_norm: 66.9013
2025-06-18 17:12:40,679 - mmdet - INFO - Epoch [2][6250/7033]	lr: 1.866e-04, eta: 11:43:45, time: 1.472, data_time: 0.039, memory: 18614, loss_cls: 0.0856, loss_bbox: 0.2211, d0.loss_cls: 0.1753, d0.loss_bbox: 0.3554, d1.loss_cls: 0.1185, d1.loss_bbox: 0.2683, d2.loss_cls: 0.1028, d2.loss_bbox: 0.2410, d3.loss_cls: 0.0922, d3.loss_bbox: 0.2332, d4.loss_cls: 0.0873, d4.loss_bbox: 0.2244, loss: 2.2053, grad_norm: 26.0467
2025-06-18 17:13:55,972 - mmdet - INFO - Epoch [2][6300/7033]	lr: 1.866e-04, eta: 11:42:37, time: 1.506, data_time: 0.043, memory: 18614, loss_cls: 0.0852, loss_bbox: 0.2316, d0.loss_cls: 0.1738, d0.loss_bbox: 0.3650, d1.loss_cls: 0.1216, d1.loss_bbox: 0.2776, d2.loss_cls: 0.1037, d2.loss_bbox: 0.2513, d3.loss_cls: 0.0921, d3.loss_bbox: 0.2427, d4.loss_cls: 0.0872, d4.loss_bbox: 0.2358, loss: 2.2676, grad_norm: 33.4294
2025-06-18 17:15:09,943 - mmdet - INFO - Epoch [2][6350/7033]	lr: 1.866e-04, eta: 11:41:26, time: 1.479, data_time: 0.051, memory: 18614, loss_cls: 0.0881, loss_bbox: 0.2278, d0.loss_cls: 0.1812, d0.loss_bbox: 0.3670, d1.loss_cls: 0.1271, d1.loss_bbox: 0.2718, d2.loss_cls: 0.1068, d2.loss_bbox: 0.2446, d3.loss_cls: 0.0957, d3.loss_bbox: 0.2366, d4.loss_cls: 0.0916, d4.loss_bbox: 0.2290, loss: 2.2672, grad_norm: 24.2520
2025-06-18 17:16:22,944 - mmdet - INFO - Epoch [2][6400/7033]	lr: 1.866e-04, eta: 11:40:13, time: 1.460, data_time: 0.026, memory: 18614, loss_cls: 0.0842, loss_bbox: 0.2221, d0.loss_cls: 0.1802, d0.loss_bbox: 0.3489, d1.loss_cls: 0.1181, d1.loss_bbox: 0.2644, d2.loss_cls: 0.0985, d2.loss_bbox: 0.2414, d3.loss_cls: 0.0888, d3.loss_bbox: 0.2293, d4.loss_cls: 0.0860, d4.loss_bbox: 0.2238, loss: 2.1858, grad_norm: 67.3818
2025-06-18 17:17:38,040 - mmdet - INFO - Epoch [2][6450/7033]	lr: 1.866e-04, eta: 11:39:04, time: 1.502, data_time: 0.074, memory: 18614, loss_cls: 0.0813, loss_bbox: 0.2225, d0.loss_cls: 0.1744, d0.loss_bbox: 0.3575, d1.loss_cls: 0.1229, d1.loss_bbox: 0.2738, d2.loss_cls: 0.1016, d2.loss_bbox: 0.2472, d3.loss_cls: 0.0876, d3.loss_bbox: 0.2354, d4.loss_cls: 0.0824, d4.loss_bbox: 0.2277, loss: 2.2143, grad_norm: 83.7620
2025-06-18 17:18:51,431 - mmdet - INFO - Epoch [2][6500/7033]	lr: 1.866e-04, eta: 11:37:52, time: 1.468, data_time: 0.036, memory: 18614, loss_cls: 0.0797, loss_bbox: 0.2192, d0.loss_cls: 0.1825, d0.loss_bbox: 0.3429, d1.loss_cls: 0.1236, d1.loss_bbox: 0.2609, d2.loss_cls: 0.1018, d2.loss_bbox: 0.2400, d3.loss_cls: 0.0880, d3.loss_bbox: 0.2319, d4.loss_cls: 0.0803, d4.loss_bbox: 0.2239, loss: 2.1748, grad_norm: 48.9784
2025-06-18 17:20:04,416 - mmdet - INFO - Epoch [2][6550/7033]	lr: 1.866e-04, eta: 11:36:39, time: 1.460, data_time: 0.029, memory: 18614, loss_cls: 0.0809, loss_bbox: 0.2182, d0.loss_cls: 0.1725, d0.loss_bbox: 0.3423, d1.loss_cls: 0.1206, d1.loss_bbox: 0.2564, d2.loss_cls: 0.0983, d2.loss_bbox: 0.2332, d3.loss_cls: 0.0865, d3.loss_bbox: 0.2264, d4.loss_cls: 0.0814, d4.loss_bbox: 0.2217, loss: 2.1384, grad_norm: 27.1150
2025-06-18 17:21:17,192 - mmdet - INFO - Epoch [2][6600/7033]	lr: 1.866e-04, eta: 11:35:25, time: 1.455, data_time: 0.026, memory: 18614, loss_cls: 0.0833, loss_bbox: 0.2191, d0.loss_cls: 0.1812, d0.loss_bbox: 0.3551, d1.loss_cls: 0.1267, d1.loss_bbox: 0.2681, d2.loss_cls: 0.1073, d2.loss_bbox: 0.2399, d3.loss_cls: 0.0901, d3.loss_bbox: 0.2305, d4.loss_cls: 0.0848, d4.loss_bbox: 0.2223, loss: 2.2085, grad_norm: 28.2303
2025-06-18 17:22:30,346 - mmdet - INFO - Epoch [2][6650/7033]	lr: 1.866e-04, eta: 11:34:13, time: 1.463, data_time: 0.037, memory: 18614, loss_cls: 0.0905, loss_bbox: 0.2205, d0.loss_cls: 0.1793, d0.loss_bbox: 0.3546, d1.loss_cls: 0.1239, d1.loss_bbox: 0.2699, d2.loss_cls: 0.1047, d2.loss_bbox: 0.2457, d3.loss_cls: 0.0943, d3.loss_bbox: 0.2351, d4.loss_cls: 0.0915, d4.loss_bbox: 0.2254, loss: 2.2354, grad_norm: 32.9774
2025-06-18 17:23:43,374 - mmdet - INFO - Epoch [2][6700/7033]	lr: 1.866e-04, eta: 11:33:00, time: 1.461, data_time: 0.033, memory: 18614, loss_cls: 0.0847, loss_bbox: 0.2278, d0.loss_cls: 0.1755, d0.loss_bbox: 0.3576, d1.loss_cls: 0.1182, d1.loss_bbox: 0.2737, d2.loss_cls: 0.1004, d2.loss_bbox: 0.2483, d3.loss_cls: 0.0912, d3.loss_bbox: 0.2398, d4.loss_cls: 0.0865, d4.loss_bbox: 0.2323, loss: 2.2360, grad_norm: 47.5543
2025-06-18 17:24:56,328 - mmdet - INFO - Epoch [2][6750/7033]	lr: 1.866e-04, eta: 11:31:46, time: 1.459, data_time: 0.028, memory: 18614, loss_cls: 0.0850, loss_bbox: 0.2357, d0.loss_cls: 0.1790, d0.loss_bbox: 0.3549, d1.loss_cls: 0.1275, d1.loss_bbox: 0.2749, d2.loss_cls: 0.1073, d2.loss_bbox: 0.2565, d3.loss_cls: 0.0908, d3.loss_bbox: 0.2479, d4.loss_cls: 0.0872, d4.loss_bbox: 0.2390, loss: 2.2857, grad_norm: 34.3203
2025-06-18 17:26:08,858 - mmdet - INFO - Epoch [2][6800/7033]	lr: 1.866e-04, eta: 11:30:32, time: 1.451, data_time: 0.026, memory: 18614, loss_cls: 0.0837, loss_bbox: 0.2342, d0.loss_cls: 0.1737, d0.loss_bbox: 0.3694, d1.loss_cls: 0.1245, d1.loss_bbox: 0.2826, d2.loss_cls: 0.0995, d2.loss_bbox: 0.2593, d3.loss_cls: 0.0901, d3.loss_bbox: 0.2490, d4.loss_cls: 0.0860, d4.loss_bbox: 0.2393, loss: 2.2913, grad_norm: 34.7807
2025-06-18 17:27:21,689 - mmdet - INFO - Epoch [2][6850/7033]	lr: 1.866e-04, eta: 11:29:19, time: 1.457, data_time: 0.026, memory: 18614, loss_cls: 0.0851, loss_bbox: 0.2388, d0.loss_cls: 0.1844, d0.loss_bbox: 0.3679, d1.loss_cls: 0.1277, d1.loss_bbox: 0.2819, d2.loss_cls: 0.1094, d2.loss_bbox: 0.2533, d3.loss_cls: 0.0945, d3.loss_bbox: 0.2431, d4.loss_cls: 0.0883, d4.loss_bbox: 0.2384, loss: 2.3129, grad_norm: 26.1135
2025-06-18 17:28:34,769 - mmdet - INFO - Epoch [2][6900/7033]	lr: 1.866e-04, eta: 11:28:06, time: 1.462, data_time: 0.033, memory: 18614, loss_cls: 0.0929, loss_bbox: 0.2809, d0.loss_cls: 0.1837, d0.loss_bbox: 0.4083, d1.loss_cls: 0.1359, d1.loss_bbox: 0.3251, d2.loss_cls: 0.1122, d2.loss_bbox: 0.2972, d3.loss_cls: 0.0985, d3.loss_bbox: 0.2895, d4.loss_cls: 0.0923, d4.loss_bbox: 0.2845, loss: 2.6012, grad_norm: 32.9809
2025-06-18 17:29:47,667 - mmdet - INFO - Epoch [2][6950/7033]	lr: 1.866e-04, eta: 11:26:53, time: 1.458, data_time: 0.029, memory: 18614, loss_cls: 0.0839, loss_bbox: 0.2370, d0.loss_cls: 0.1884, d0.loss_bbox: 0.3651, d1.loss_cls: 0.1308, d1.loss_bbox: 0.2721, d2.loss_cls: 0.1073, d2.loss_bbox: 0.2430, d3.loss_cls: 0.0917, d3.loss_bbox: 0.2353, d4.loss_cls: 0.0862, d4.loss_bbox: 0.2339, loss: 2.2749, grad_norm: 30.0700
2025-06-18 17:31:00,307 - mmdet - INFO - Epoch [2][7000/7033]	lr: 1.866e-04, eta: 11:25:39, time: 1.453, data_time: 0.025, memory: 18614, loss_cls: 0.0903, loss_bbox: 0.2264, d0.loss_cls: 0.2044, d0.loss_bbox: 0.3673, d1.loss_cls: 0.1354, d1.loss_bbox: 0.2757, d2.loss_cls: 0.1143, d2.loss_bbox: 0.2467, d3.loss_cls: 0.0939, d3.loss_bbox: 0.2388, d4.loss_cls: 0.0916, d4.loss_bbox: 0.2294, loss: 2.3143, grad_norm: 30.8305
2025-06-18 17:31:48,896 - mmdet - INFO - Saving checkpoint at 2 epochs
2025-06-18 17:54:01,174 - mmdet - INFO - Exp name: lidar_0075v_cam_res_2x2_hednetmiddleencoder_hednetbackbone4_dss0511_dp03_hugeep2_num2_morton_conv_xy_rope_bs2.py
2025-06-18 17:54:01,174 - mmdet - INFO - Epoch(val) [2][3010]	pts_bbox_NuScenes/car_AP_dist_0.5: 0.7873, pts_bbox_NuScenes/car_AP_dist_1.0: 0.8804, pts_bbox_NuScenes/car_AP_dist_2.0: 0.9080, pts_bbox_NuScenes/car_AP_dist_4.0: 0.9225, pts_bbox_NuScenes/car_trans_err: 0.1966, pts_bbox_NuScenes/car_scale_err: 0.1514, pts_bbox_NuScenes/car_orient_err: 0.0444, pts_bbox_NuScenes/car_vel_err: 0.2892, pts_bbox_NuScenes/car_attr_err: 0.1649, pts_bbox_NuScenes/mATE: 0.3119, pts_bbox_NuScenes/mASE: 0.2657, pts_bbox_NuScenes/mAOE: 0.2626, pts_bbox_NuScenes/mAVE: 0.2601, pts_bbox_NuScenes/mAAE: 0.1851, pts_bbox_NuScenes/truck_AP_dist_0.5: 0.4321, pts_bbox_NuScenes/truck_AP_dist_1.0: 0.6213, pts_bbox_NuScenes/truck_AP_dist_2.0: 0.7181, pts_bbox_NuScenes/truck_AP_dist_4.0: 0.7639, pts_bbox_NuScenes/truck_trans_err: 0.3343, pts_bbox_NuScenes/truck_scale_err: 0.1928, pts_bbox_NuScenes/truck_orient_err: 0.0480, pts_bbox_NuScenes/truck_vel_err: 0.2356, pts_bbox_NuScenes/truck_attr_err: 0.1997, pts_bbox_NuScenes/construction_vehicle_AP_dist_0.5: 0.0554, pts_bbox_NuScenes/construction_vehicle_AP_dist_1.0: 0.2077, pts_bbox_NuScenes/construction_vehicle_AP_dist_2.0: 0.4010, pts_bbox_NuScenes/construction_vehicle_AP_dist_4.0: 0.4737, pts_bbox_NuScenes/construction_vehicle_trans_err: 0.6702, pts_bbox_NuScenes/construction_vehicle_scale_err: 0.4396, pts_bbox_NuScenes/construction_vehicle_orient_err: 0.7676, pts_bbox_NuScenes/construction_vehicle_vel_err: 0.1098, pts_bbox_NuScenes/construction_vehicle_attr_err: 0.2917, pts_bbox_NuScenes/bus_AP_dist_0.5: 0.4718, pts_bbox_NuScenes/bus_AP_dist_1.0: 0.7272, pts_bbox_NuScenes/bus_AP_dist_2.0: 0.9008, pts_bbox_NuScenes/bus_AP_dist_4.0: 0.9224, pts_bbox_NuScenes/bus_trans_err: 0.3874, pts_bbox_NuScenes/bus_scale_err: 0.2033, pts_bbox_NuScenes/bus_orient_err: 0.0349, pts_bbox_NuScenes/bus_vel_err: 0.4822, pts_bbox_NuScenes/bus_attr_err: 0.2599, pts_bbox_NuScenes/trailer_AP_dist_0.5: 0.1538, pts_bbox_NuScenes/trailer_AP_dist_1.0: 0.3987, pts_bbox_NuScenes/trailer_AP_dist_2.0: 0.5786, pts_bbox_NuScenes/trailer_AP_dist_4.0: 0.6652, pts_bbox_NuScenes/trailer_trans_err: 0.5197, pts_bbox_NuScenes/trailer_scale_err: 0.2267, pts_bbox_NuScenes/trailer_orient_err: 0.6184, pts_bbox_NuScenes/trailer_vel_err: 0.2074, pts_bbox_NuScenes/trailer_attr_err: 0.1657, pts_bbox_NuScenes/barrier_AP_dist_0.5: 0.6041, pts_bbox_NuScenes/barrier_AP_dist_1.0: 0.7002, pts_bbox_NuScenes/barrier_AP_dist_2.0: 0.7504, pts_bbox_NuScenes/barrier_AP_dist_4.0: 0.7656, pts_bbox_NuScenes/barrier_trans_err: 0.2298, pts_bbox_NuScenes/barrier_scale_err: 0.2934, pts_bbox_NuScenes/barrier_orient_err: 0.0484, pts_bbox_NuScenes/barrier_vel_err: nan, pts_bbox_NuScenes/barrier_attr_err: nan, pts_bbox_NuScenes/motorcycle_AP_dist_0.5: 0.6310, pts_bbox_NuScenes/motorcycle_AP_dist_1.0: 0.7692, pts_bbox_NuScenes/motorcycle_AP_dist_2.0: 0.7969, pts_bbox_NuScenes/motorcycle_AP_dist_4.0: 0.8029, pts_bbox_NuScenes/motorcycle_trans_err: 0.2327, pts_bbox_NuScenes/motorcycle_scale_err: 0.2451, pts_bbox_NuScenes/motorcycle_orient_err: 0.2122, pts_bbox_NuScenes/motorcycle_vel_err: 0.3495, pts_bbox_NuScenes/motorcycle_attr_err: 0.2831, pts_bbox_NuScenes/bicycle_AP_dist_0.5: 0.5425, pts_bbox_NuScenes/bicycle_AP_dist_1.0: 0.5934, pts_bbox_NuScenes/bicycle_AP_dist_2.0: 0.6022, pts_bbox_NuScenes/bicycle_AP_dist_4.0: 0.6085, pts_bbox_NuScenes/bicycle_trans_err: 0.2006, pts_bbox_NuScenes/bicycle_scale_err: 0.2763, pts_bbox_NuScenes/bicycle_orient_err: 0.2702, pts_bbox_NuScenes/bicycle_vel_err: 0.1983, pts_bbox_NuScenes/bicycle_attr_err: 0.0113, pts_bbox_NuScenes/pedestrian_AP_dist_0.5: 0.8150, pts_bbox_NuScenes/pedestrian_AP_dist_1.0: 0.8634, pts_bbox_NuScenes/pedestrian_AP_dist_2.0: 0.8853, pts_bbox_NuScenes/pedestrian_AP_dist_4.0: 0.8972, pts_bbox_NuScenes/pedestrian_trans_err: 0.1837, pts_bbox_NuScenes/pedestrian_scale_err: 0.2942, pts_bbox_NuScenes/pedestrian_orient_err: 0.3190, pts_bbox_NuScenes/pedestrian_vel_err: 0.2083, pts_bbox_NuScenes/pedestrian_attr_err: 0.1045, pts_bbox_NuScenes/traffic_cone_AP_dist_0.5: 0.7245, pts_bbox_NuScenes/traffic_cone_AP_dist_1.0: 0.7591, pts_bbox_NuScenes/traffic_cone_AP_dist_2.0: 0.7830, pts_bbox_NuScenes/traffic_cone_AP_dist_4.0: 0.8088, pts_bbox_NuScenes/traffic_cone_trans_err: 0.1644, pts_bbox_NuScenes/traffic_cone_scale_err: 0.3345, pts_bbox_NuScenes/traffic_cone_orient_err: nan, pts_bbox_NuScenes/traffic_cone_vel_err: nan, pts_bbox_NuScenes/traffic_cone_attr_err: nan, pts_bbox_NuScenes/NDS: 0.7051, pts_bbox_NuScenes/mAP: 0.6673
2025-06-18 17:55:22,124 - mmdet - INFO - Epoch [3][50/7033]	lr: 1.501e-04, eta: 11:22:10, time: 1.544, data_time: 0.116, memory: 18614, loss_cls: 0.0827, loss_bbox: 0.2152, d0.loss_cls: 0.1915, d0.loss_bbox: 0.3514, d1.loss_cls: 0.1229, d1.loss_bbox: 0.2653, d2.loss_cls: 0.1042, d2.loss_bbox: 0.2379, d3.loss_cls: 0.0900, d3.loss_bbox: 0.2269, d4.loss_cls: 0.0858, d4.loss_bbox: 0.2171, loss: 2.1908, grad_norm: 35.7982
2025-06-18 17:56:35,463 - mmdet - INFO - Epoch [3][100/7033]	lr: 1.501e-04, eta: 11:20:58, time: 1.467, data_time: 0.035, memory: 18614, loss_cls: 0.0813, loss_bbox: 0.2177, d0.loss_cls: 0.1923, d0.loss_bbox: 0.3476, d1.loss_cls: 0.1246, d1.loss_bbox: 0.2665, d2.loss_cls: 0.1070, d2.loss_bbox: 0.2388, d3.loss_cls: 0.0878, d3.loss_bbox: 0.2302, d4.loss_cls: 0.0833, d4.loss_bbox: 0.2208, loss: 2.1979, grad_norm: 34.2989
2025-06-18 17:57:48,127 - mmdet - INFO - Epoch [3][150/7033]	lr: 1.501e-04, eta: 11:19:45, time: 1.453, data_time: 0.027, memory: 18614, loss_cls: 0.0700, loss_bbox: 0.2054, d0.loss_cls: 0.1805, d0.loss_bbox: 0.3377, d1.loss_cls: 0.1166, d1.loss_bbox: 0.2547, d2.loss_cls: 0.0914, d2.loss_bbox: 0.2270, d3.loss_cls: 0.0764, d3.loss_bbox: 0.2191, d4.loss_cls: 0.0717, d4.loss_bbox: 0.2103, loss: 2.0607, grad_norm: 29.3829
2025-06-18 17:59:01,407 - mmdet - INFO - Epoch [3][200/7033]	lr: 1.501e-04, eta: 11:18:33, time: 1.466, data_time: 0.036, memory: 18614, loss_cls: 0.0823, loss_bbox: 0.2160, d0.loss_cls: 0.1822, d0.loss_bbox: 0.3548, d1.loss_cls: 0.1223, d1.loss_bbox: 0.2687, d2.loss_cls: 0.1042, d2.loss_bbox: 0.2406, d3.loss_cls: 0.0872, d3.loss_bbox: 0.2318, d4.loss_cls: 0.0835, d4.loss_bbox: 0.2210, loss: 2.1947, grad_norm: 26.3898
2025-06-18 18:00:14,323 - mmdet - INFO - Epoch [3][250/7033]	lr: 1.501e-04, eta: 11:17:20, time: 1.458, data_time: 0.028, memory: 18614, loss_cls: 0.0758, loss_bbox: 0.2149, d0.loss_cls: 0.1736, d0.loss_bbox: 0.3317, d1.loss_cls: 0.1143, d1.loss_bbox: 0.2534, d2.loss_cls: 0.0934, d2.loss_bbox: 0.2331, d3.loss_cls: 0.0825, d3.loss_bbox: 0.2252, d4.loss_cls: 0.0764, d4.loss_bbox: 0.2179, loss: 2.0922, grad_norm: 34.8281
2025-06-18 18:01:27,312 - mmdet - INFO - Epoch [3][300/7033]	lr: 1.501e-04, eta: 11:16:07, time: 1.460, data_time: 0.030, memory: 18614, loss_cls: 0.0778, loss_bbox: 0.2147, d0.loss_cls: 0.1780, d0.loss_bbox: 0.3408, d1.loss_cls: 0.1150, d1.loss_bbox: 0.2602, d2.loss_cls: 0.0963, d2.loss_bbox: 0.2339, d3.loss_cls: 0.0829, d3.loss_bbox: 0.2267, d4.loss_cls: 0.0777, d4.loss_bbox: 0.2188, loss: 2.1227, grad_norm: 79.2602
2025-06-18 18:02:40,253 - mmdet - INFO - Epoch [3][350/7033]	lr: 1.501e-04, eta: 11:14:54, time: 1.459, data_time: 0.031, memory: 18614, loss_cls: 0.0785, loss_bbox: 0.2200, d0.loss_cls: 0.1790, d0.loss_bbox: 0.3425, d1.loss_cls: 0.1194, d1.loss_bbox: 0.2612, d2.loss_cls: 0.0992, d2.loss_bbox: 0.2374, d3.loss_cls: 0.0839, d3.loss_bbox: 0.2312, d4.loss_cls: 0.0800, d4.loss_bbox: 0.2221, loss: 2.1545, grad_norm: 35.1701
2025-06-18 18:03:53,052 - mmdet - INFO - Epoch [3][400/7033]	lr: 1.501e-04, eta: 11:13:41, time: 1.456, data_time: 0.028, memory: 18614, loss_cls: 0.0791, loss_bbox: 0.2060, d0.loss_cls: 0.1856, d0.loss_bbox: 0.3267, d1.loss_cls: 0.1226, d1.loss_bbox: 0.2501, d2.loss_cls: 0.1001, d2.loss_bbox: 0.2255, d3.loss_cls: 0.0842, d3.loss_bbox: 0.2175, d4.loss_cls: 0.0798, d4.loss_bbox: 0.2106, loss: 2.0878, grad_norm: 30.6702
2025-06-18 18:05:05,952 - mmdet - INFO - Epoch [3][450/7033]	lr: 1.501e-04, eta: 11:12:29, time: 1.458, data_time: 0.036, memory: 18614, loss_cls: 0.0813, loss_bbox: 0.2058, d0.loss_cls: 0.1769, d0.loss_bbox: 0.3317, d1.loss_cls: 0.1191, d1.loss_bbox: 0.2549, d2.loss_cls: 0.0992, d2.loss_bbox: 0.2308, d3.loss_cls: 0.0866, d3.loss_bbox: 0.2199, d4.loss_cls: 0.0828, d4.loss_bbox: 0.2102, loss: 2.0990, grad_norm: 42.0205
2025-06-18 18:06:20,700 - mmdet - INFO - Epoch [3][500/7033]	lr: 1.501e-04, eta: 11:11:19, time: 1.495, data_time: 0.026, memory: 18614, loss_cls: 0.0808, loss_bbox: 0.2098, d0.loss_cls: 0.1818, d0.loss_bbox: 0.3318, d1.loss_cls: 0.1204, d1.loss_bbox: 0.2538, d2.loss_cls: 0.1040, d2.loss_bbox: 0.2284, d3.loss_cls: 0.0872, d3.loss_bbox: 0.2215, d4.loss_cls: 0.0823, d4.loss_bbox: 0.2130, loss: 2.1147, grad_norm: 72.7275
2025-06-18 18:07:33,739 - mmdet - INFO - Epoch [3][550/7033]	lr: 1.501e-04, eta: 11:10:07, time: 1.461, data_time: 0.036, memory: 18614, loss_cls: 0.0716, loss_bbox: 0.2083, d0.loss_cls: 0.1752, d0.loss_bbox: 0.3384, d1.loss_cls: 0.1083, d1.loss_bbox: 0.2545, d2.loss_cls: 0.0886, d2.loss_bbox: 0.2291, d3.loss_cls: 0.0773, d3.loss_bbox: 0.2201, d4.loss_cls: 0.0722, d4.loss_bbox: 0.2111, loss: 2.0547, grad_norm: 52.0033
2025-06-18 18:08:46,677 - mmdet - INFO - Epoch [3][600/7033]	lr: 1.501e-04, eta: 11:08:54, time: 1.459, data_time: 0.028, memory: 18614, loss_cls: 0.0840, loss_bbox: 0.2174, d0.loss_cls: 0.1815, d0.loss_bbox: 0.3388, d1.loss_cls: 0.1201, d1.loss_bbox: 0.2628, d2.loss_cls: 0.1001, d2.loss_bbox: 0.2371, d3.loss_cls: 0.0887, d3.loss_bbox: 0.2304, d4.loss_cls: 0.0853, d4.loss_bbox: 0.2204, loss: 2.1665, grad_norm: 494.5701
2025-06-18 18:09:59,484 - mmdet - INFO - Epoch [3][650/7033]	lr: 1.501e-04, eta: 11:07:41, time: 1.456, data_time: 0.030, memory: 18614, loss_cls: 0.0764, loss_bbox: 0.2095, d0.loss_cls: 0.1703, d0.loss_bbox: 0.3289, d1.loss_cls: 0.1059, d1.loss_bbox: 0.2534, d2.loss_cls: 0.0912, d2.loss_bbox: 0.2295, d3.loss_cls: 0.0808, d3.loss_bbox: 0.2219, d4.loss_cls: 0.0769, d4.loss_bbox: 0.2116, loss: 2.0564, grad_norm: 115.5758
2025-06-18 18:11:12,223 - mmdet - INFO - Epoch [3][700/7033]	lr: 1.501e-04, eta: 11:06:28, time: 1.455, data_time: 0.024, memory: 18614, loss_cls: 0.0843, loss_bbox: 0.2187, d0.loss_cls: 0.1824, d0.loss_bbox: 0.3419, d1.loss_cls: 0.1218, d1.loss_bbox: 0.2593, d2.loss_cls: 0.1018, d2.loss_bbox: 0.2345, d3.loss_cls: 0.0917, d3.loss_bbox: 0.2261, d4.loss_cls: 0.0877, d4.loss_bbox: 0.2184, loss: 2.1687, grad_norm: 22.9416
2025-06-18 18:12:24,979 - mmdet - INFO - Epoch [3][750/7033]	lr: 1.501e-04, eta: 11:05:14, time: 1.455, data_time: 0.025, memory: 18614, loss_cls: 0.0784, loss_bbox: 0.2157, d0.loss_cls: 0.1824, d0.loss_bbox: 0.3449, d1.loss_cls: 0.1181, d1.loss_bbox: 0.2616, d2.loss_cls: 0.0976, d2.loss_bbox: 0.2355, d3.loss_cls: 0.0822, d3.loss_bbox: 0.2277, d4.loss_cls: 0.0798, d4.loss_bbox: 0.2176, loss: 2.1417, grad_norm: 56.0121
2025-06-18 18:13:37,862 - mmdet - INFO - Epoch [3][800/7033]	lr: 1.501e-04, eta: 11:04:02, time: 1.458, data_time: 0.028, memory: 18614, loss_cls: 0.0816, loss_bbox: 0.2114, d0.loss_cls: 0.1799, d0.loss_bbox: 0.3436, d1.loss_cls: 0.1150, d1.loss_bbox: 0.2546, d2.loss_cls: 0.0981, d2.loss_bbox: 0.2307, d3.loss_cls: 0.0858, d3.loss_bbox: 0.2230, d4.loss_cls: 0.0837, d4.loss_bbox: 0.2152, loss: 2.1227, grad_norm: 36.6219
2025-06-18 18:14:50,774 - mmdet - INFO - Epoch [3][850/7033]	lr: 1.501e-04, eta: 11:02:49, time: 1.458, data_time: 0.028, memory: 18614, loss_cls: 0.0690, loss_bbox: 0.2106, d0.loss_cls: 0.1668, d0.loss_bbox: 0.3297, d1.loss_cls: 0.1038, d1.loss_bbox: 0.2523, d2.loss_cls: 0.0850, d2.loss_bbox: 0.2283, d3.loss_cls: 0.0770, d3.loss_bbox: 0.2208, d4.loss_cls: 0.0724, d4.loss_bbox: 0.2137, loss: 2.0295, grad_norm: 52.9469
2025-06-18 18:16:03,947 - mmdet - INFO - Epoch [3][900/7033]	lr: 1.501e-04, eta: 11:01:36, time: 1.463, data_time: 0.029, memory: 18614, loss_cls: 0.0771, loss_bbox: 0.2174, d0.loss_cls: 0.1881, d0.loss_bbox: 0.3494, d1.loss_cls: 0.1146, d1.loss_bbox: 0.2638, d2.loss_cls: 0.0955, d2.loss_bbox: 0.2384, d3.loss_cls: 0.0831, d3.loss_bbox: 0.2287, d4.loss_cls: 0.0788, d4.loss_bbox: 0.2211, loss: 2.1562, grad_norm: 34.3780
2025-06-18 18:17:16,648 - mmdet - INFO - Epoch [3][950/7033]	lr: 1.501e-04, eta: 11:00:23, time: 1.454, data_time: 0.024, memory: 18614, loss_cls: 0.0750, loss_bbox: 0.2101, d0.loss_cls: 0.1763, d0.loss_bbox: 0.3362, d1.loss_cls: 0.1110, d1.loss_bbox: 0.2570, d2.loss_cls: 0.0946, d2.loss_bbox: 0.2283, d3.loss_cls: 0.0805, d3.loss_bbox: 0.2208, d4.loss_cls: 0.0760, d4.loss_bbox: 0.2136, loss: 2.0794, grad_norm: 27.1259
2025-06-18 18:18:29,653 - mmdet - INFO - Epoch [3][1000/7033]	lr: 1.501e-04, eta: 10:59:10, time: 1.460, data_time: 0.026, memory: 18614, loss_cls: 0.0749, loss_bbox: 0.2080, d0.loss_cls: 0.1793, d0.loss_bbox: 0.3326, d1.loss_cls: 0.1109, d1.loss_bbox: 0.2503, d2.loss_cls: 0.0930, d2.loss_bbox: 0.2250, d3.loss_cls: 0.0812, d3.loss_bbox: 0.2175, d4.loss_cls: 0.0767, d4.loss_bbox: 0.2104, loss: 2.0598, grad_norm: 62.6367
2025-06-18 18:19:42,590 - mmdet - INFO - Epoch [3][1050/7033]	lr: 1.501e-04, eta: 10:57:58, time: 1.459, data_time: 0.029, memory: 18614, loss_cls: 0.0714, loss_bbox: 0.2101, d0.loss_cls: 0.1755, d0.loss_bbox: 0.3261, d1.loss_cls: 0.1047, d1.loss_bbox: 0.2545, d2.loss_cls: 0.0869, d2.loss_bbox: 0.2275, d3.loss_cls: 0.0769, d3.loss_bbox: 0.2211, d4.loss_cls: 0.0720, d4.loss_bbox: 0.2132, loss: 2.0400, grad_norm: 22.8909
2025-06-18 18:20:57,242 - mmdet - INFO - Epoch [3][1100/7033]	lr: 1.501e-04, eta: 10:56:48, time: 1.493, data_time: 0.028, memory: 18614, loss_cls: 0.0727, loss_bbox: 0.2084, d0.loss_cls: 0.1711, d0.loss_bbox: 0.3375, d1.loss_cls: 0.1089, d1.loss_bbox: 0.2516, d2.loss_cls: 0.0924, d2.loss_bbox: 0.2301, d3.loss_cls: 0.0806, d3.loss_bbox: 0.2225, d4.loss_cls: 0.0741, d4.loss_bbox: 0.2135, loss: 2.0634, grad_norm: 44.9693
2025-06-18 18:22:10,074 - mmdet - INFO - Epoch [3][1150/7033]	lr: 1.501e-04, eta: 10:55:35, time: 1.457, data_time: 0.029, memory: 18614, loss_cls: 0.0815, loss_bbox: 0.2279, d0.loss_cls: 0.1788, d0.loss_bbox: 0.3510, d1.loss_cls: 0.1155, d1.loss_bbox: 0.2711, d2.loss_cls: 0.0973, d2.loss_bbox: 0.2443, d3.loss_cls: 0.0872, d3.loss_bbox: 0.2376, d4.loss_cls: 0.0827, d4.loss_bbox: 0.2321, loss: 2.2070, grad_norm: 34.1524
2025-06-18 18:23:22,962 - mmdet - INFO - Epoch [3][1200/7033]	lr: 1.501e-04, eta: 10:54:22, time: 1.458, data_time: 0.025, memory: 18614, loss_cls: 0.0759, loss_bbox: 0.2106, d0.loss_cls: 0.1756, d0.loss_bbox: 0.3364, d1.loss_cls: 0.1115, d1.loss_bbox: 0.2582, d2.loss_cls: 0.0925, d2.loss_bbox: 0.2325, d3.loss_cls: 0.0813, d3.loss_bbox: 0.2227, d4.loss_cls: 0.0762, d4.loss_bbox: 0.2150, loss: 2.0884, grad_norm: 21.0609
2025-06-18 18:24:35,962 - mmdet - INFO - Epoch [3][1250/7033]	lr: 1.501e-04, eta: 10:53:09, time: 1.460, data_time: 0.026, memory: 18614, loss_cls: 0.0767, loss_bbox: 0.2176, d0.loss_cls: 0.1863, d0.loss_bbox: 0.3507, d1.loss_cls: 0.1196, d1.loss_bbox: 0.2647, d2.loss_cls: 0.0992, d2.loss_bbox: 0.2382, d3.loss_cls: 0.0857, d3.loss_bbox: 0.2296, d4.loss_cls: 0.0793, d4.loss_bbox: 0.2197, loss: 2.1672, grad_norm: 40.5439
2025-06-18 18:25:49,024 - mmdet - INFO - Epoch [3][1300/7033]	lr: 1.501e-04, eta: 10:51:57, time: 1.461, data_time: 0.032, memory: 18614, loss_cls: 0.0772, loss_bbox: 0.2169, d0.loss_cls: 0.1800, d0.loss_bbox: 0.3437, d1.loss_cls: 0.1158, d1.loss_bbox: 0.2579, d2.loss_cls: 0.0965, d2.loss_bbox: 0.2368, d3.loss_cls: 0.0809, d3.loss_bbox: 0.2282, d4.loss_cls: 0.0781, d4.loss_bbox: 0.2215, loss: 2.1335, grad_norm: 41.0383
2025-06-18 18:27:01,869 - mmdet - INFO - Epoch [3][1350/7033]	lr: 1.501e-04, eta: 10:50:44, time: 1.457, data_time: 0.027, memory: 18614, loss_cls: 0.0830, loss_bbox: 0.2092, d0.loss_cls: 0.1766, d0.loss_bbox: 0.3319, d1.loss_cls: 0.1158, d1.loss_bbox: 0.2534, d2.loss_cls: 0.0969, d2.loss_bbox: 0.2281, d3.loss_cls: 0.0876, d3.loss_bbox: 0.2207, d4.loss_cls: 0.0835, d4.loss_bbox: 0.2130, loss: 2.0996, grad_norm: 21.0654
2025-06-18 18:28:15,338 - mmdet - INFO - Epoch [3][1400/7033]	lr: 1.501e-04, eta: 10:49:32, time: 1.469, data_time: 0.036, memory: 18614, loss_cls: 0.0816, loss_bbox: 0.2167, d0.loss_cls: 0.1774, d0.loss_bbox: 0.3430, d1.loss_cls: 0.1178, d1.loss_bbox: 0.2628, d2.loss_cls: 0.0991, d2.loss_bbox: 0.2375, d3.loss_cls: 0.0877, d3.loss_bbox: 0.2287, d4.loss_cls: 0.0825, d4.loss_bbox: 0.2200, loss: 2.1549, grad_norm: 36.3696
2025-06-18 18:29:28,319 - mmdet - INFO - Epoch [3][1450/7033]	lr: 1.501e-04, eta: 10:48:19, time: 1.460, data_time: 0.026, memory: 18614, loss_cls: 0.0837, loss_bbox: 0.2266, d0.loss_cls: 0.1713, d0.loss_bbox: 0.3589, d1.loss_cls: 0.1172, d1.loss_bbox: 0.2743, d2.loss_cls: 0.1012, d2.loss_bbox: 0.2470, d3.loss_cls: 0.0890, d3.loss_bbox: 0.2387, d4.loss_cls: 0.0852, d4.loss_bbox: 0.2290, loss: 2.2220, grad_norm: 20.3141
2025-06-18 18:30:41,059 - mmdet - INFO - Epoch [3][1500/7033]	lr: 1.501e-04, eta: 10:47:06, time: 1.455, data_time: 0.025, memory: 18614, loss_cls: 0.0811, loss_bbox: 0.2166, d0.loss_cls: 0.1773, d0.loss_bbox: 0.3330, d1.loss_cls: 0.1178, d1.loss_bbox: 0.2608, d2.loss_cls: 0.0975, d2.loss_bbox: 0.2347, d3.loss_cls: 0.0855, d3.loss_bbox: 0.2275, d4.loss_cls: 0.0823, d4.loss_bbox: 0.2204, loss: 2.1345, grad_norm: 19.5697
2025-06-18 18:31:53,804 - mmdet - INFO - Epoch [3][1550/7033]	lr: 1.501e-04, eta: 10:45:53, time: 1.455, data_time: 0.025, memory: 18614, loss_cls: 0.0792, loss_bbox: 0.2128, d0.loss_cls: 0.1745, d0.loss_bbox: 0.3358, d1.loss_cls: 0.1101, d1.loss_bbox: 0.2566, d2.loss_cls: 0.0891, d2.loss_bbox: 0.2321, d3.loss_cls: 0.0813, d3.loss_bbox: 0.2237, d4.loss_cls: 0.0796, d4.loss_bbox: 0.2160, loss: 2.0907, grad_norm: 28.5767
2025-06-18 18:33:06,826 - mmdet - INFO - Epoch [3][1600/7033]	lr: 1.501e-04, eta: 10:44:40, time: 1.460, data_time: 0.029, memory: 18614, loss_cls: 0.0741, loss_bbox: 0.2159, d0.loss_cls: 0.1793, d0.loss_bbox: 0.3387, d1.loss_cls: 0.1125, d1.loss_bbox: 0.2598, d2.loss_cls: 0.0931, d2.loss_bbox: 0.2340, d3.loss_cls: 0.0807, d3.loss_bbox: 0.2247, d4.loss_cls: 0.0773, d4.loss_bbox: 0.2189, loss: 2.1090, grad_norm: 38.5538
2025-06-18 18:34:19,999 - mmdet - INFO - Epoch [3][1650/7033]	lr: 1.501e-04, eta: 10:43:28, time: 1.463, data_time: 0.028, memory: 18614, loss_cls: 0.0781, loss_bbox: 0.2180, d0.loss_cls: 0.1767, d0.loss_bbox: 0.3428, d1.loss_cls: 0.1189, d1.loss_bbox: 0.2593, d2.loss_cls: 0.0978, d2.loss_bbox: 0.2390, d3.loss_cls: 0.0840, d3.loss_bbox: 0.2296, d4.loss_cls: 0.0805, d4.loss_bbox: 0.2228, loss: 2.1474, grad_norm: 39.3827
2025-06-18 18:35:32,791 - mmdet - INFO - Epoch [3][1700/7033]	lr: 1.501e-04, eta: 10:42:15, time: 1.456, data_time: 0.026, memory: 18614, loss_cls: 0.0707, loss_bbox: 0.2045, d0.loss_cls: 0.1666, d0.loss_bbox: 0.3242, d1.loss_cls: 0.1087, d1.loss_bbox: 0.2475, d2.loss_cls: 0.0874, d2.loss_bbox: 0.2254, d3.loss_cls: 0.0759, d3.loss_bbox: 0.2157, d4.loss_cls: 0.0715, d4.loss_bbox: 0.2065, loss: 2.0048, grad_norm: 47.5672
2025-06-18 18:36:45,605 - mmdet - INFO - Epoch [3][1750/7033]	lr: 1.501e-04, eta: 10:41:02, time: 1.456, data_time: 0.025, memory: 18614, loss_cls: 0.0737, loss_bbox: 0.2076, d0.loss_cls: 0.1673, d0.loss_bbox: 0.3259, d1.loss_cls: 0.1051, d1.loss_bbox: 0.2503, d2.loss_cls: 0.0864, d2.loss_bbox: 0.2261, d3.loss_cls: 0.0768, d3.loss_bbox: 0.2188, d4.loss_cls: 0.0741, d4.loss_bbox: 0.2107, loss: 2.0228, grad_norm: 41.2930
2025-06-18 18:37:58,419 - mmdet - INFO - Epoch [3][1800/7033]	lr: 1.501e-04, eta: 10:39:49, time: 1.456, data_time: 0.026, memory: 18614, loss_cls: 0.0755, loss_bbox: 0.2120, d0.loss_cls: 0.1757, d0.loss_bbox: 0.3343, d1.loss_cls: 0.1119, d1.loss_bbox: 0.2564, d2.loss_cls: 0.0951, d2.loss_bbox: 0.2322, d3.loss_cls: 0.0819, d3.loss_bbox: 0.2242, d4.loss_cls: 0.0764, d4.loss_bbox: 0.2164, loss: 2.0920, grad_norm: 42.1570
2025-06-18 18:39:11,426 - mmdet - INFO - Epoch [3][1850/7033]	lr: 1.501e-04, eta: 10:38:36, time: 1.460, data_time: 0.029, memory: 18614, loss_cls: 0.0751, loss_bbox: 0.2116, d0.loss_cls: 0.1721, d0.loss_bbox: 0.3319, d1.loss_cls: 0.1094, d1.loss_bbox: 0.2536, d2.loss_cls: 0.0900, d2.loss_bbox: 0.2326, d3.loss_cls: 0.0807, d3.loss_bbox: 0.2240, d4.loss_cls: 0.0765, d4.loss_bbox: 0.2145, loss: 2.0722, grad_norm: 52.5414
2025-06-18 18:40:23,987 - mmdet - INFO - Epoch [3][1900/7033]	lr: 1.501e-04, eta: 10:37:22, time: 1.451, data_time: 0.024, memory: 18614, loss_cls: 0.0775, loss_bbox: 0.2184, d0.loss_cls: 0.1747, d0.loss_bbox: 0.3413, d1.loss_cls: 0.1126, d1.loss_bbox: 0.2629, d2.loss_cls: 0.0962, d2.loss_bbox: 0.2398, d3.loss_cls: 0.0863, d3.loss_bbox: 0.2315, d4.loss_cls: 0.0804, d4.loss_bbox: 0.2230, loss: 2.1446, grad_norm: 44.4112
2025-06-18 18:41:36,793 - mmdet - INFO - Epoch [3][1950/7033]	lr: 1.501e-04, eta: 10:36:09, time: 1.456, data_time: 0.027, memory: 18614, loss_cls: 0.0746, loss_bbox: 0.2178, d0.loss_cls: 0.1766, d0.loss_bbox: 0.3411, d1.loss_cls: 0.1119, d1.loss_bbox: 0.2541, d2.loss_cls: 0.0921, d2.loss_bbox: 0.2330, d3.loss_cls: 0.0836, d3.loss_bbox: 0.2279, d4.loss_cls: 0.0777, d4.loss_bbox: 0.2202, loss: 2.1106, grad_norm: 42.1671
2025-06-18 18:42:49,479 - mmdet - INFO - Epoch [3][2000/7033]	lr: 1.501e-04, eta: 10:34:56, time: 1.454, data_time: 0.029, memory: 18614, loss_cls: 0.0776, loss_bbox: 0.2096, d0.loss_cls: 0.1705, d0.loss_bbox: 0.3302, d1.loss_cls: 0.1124, d1.loss_bbox: 0.2492, d2.loss_cls: 0.0990, d2.loss_bbox: 0.2278, d3.loss_cls: 0.0834, d3.loss_bbox: 0.2214, d4.loss_cls: 0.0780, d4.loss_bbox: 0.2121, loss: 2.0710, grad_norm: 29.0195
2025-06-18 18:44:02,216 - mmdet - INFO - Epoch [3][2050/7033]	lr: 1.501e-04, eta: 10:33:43, time: 1.455, data_time: 0.025, memory: 18614, loss_cls: 0.0704, loss_bbox: 0.2103, d0.loss_cls: 0.1715, d0.loss_bbox: 0.3291, d1.loss_cls: 0.1063, d1.loss_bbox: 0.2506, d2.loss_cls: 0.0923, d2.loss_bbox: 0.2265, d3.loss_cls: 0.0791, d3.loss_bbox: 0.2198, d4.loss_cls: 0.0732, d4.loss_bbox: 0.2118, loss: 2.0406, grad_norm: 38.6433
2025-06-18 18:45:15,008 - mmdet - INFO - Epoch [3][2100/7033]	lr: 1.501e-04, eta: 10:32:30, time: 1.456, data_time: 0.030, memory: 18614, loss_cls: 0.0843, loss_bbox: 0.2208, d0.loss_cls: 0.1864, d0.loss_bbox: 0.3520, d1.loss_cls: 0.1169, d1.loss_bbox: 0.2708, d2.loss_cls: 0.1007, d2.loss_bbox: 0.2427, d3.loss_cls: 0.0889, d3.loss_bbox: 0.2323, d4.loss_cls: 0.0846, d4.loss_bbox: 0.2240, loss: 2.2044, grad_norm: 60.3147
2025-06-18 18:46:28,972 - mmdet - INFO - Epoch [3][2150/7033]	lr: 1.501e-04, eta: 10:31:19, time: 1.479, data_time: 0.036, memory: 18614, loss_cls: 0.0745, loss_bbox: 0.2055, d0.loss_cls: 0.1713, d0.loss_bbox: 0.3380, d1.loss_cls: 0.1139, d1.loss_bbox: 0.2547, d2.loss_cls: 0.0938, d2.loss_bbox: 0.2285, d3.loss_cls: 0.0809, d3.loss_bbox: 0.2186, d4.loss_cls: 0.0759, d4.loss_bbox: 0.2101, loss: 2.0656, grad_norm: 33.7505
2025-06-18 18:47:50,345 - mmdet - INFO - Epoch [3][2200/7033]	lr: 1.501e-04, eta: 10:30:19, time: 1.627, data_time: 0.035, memory: 18614, loss_cls: 0.0771, loss_bbox: 0.2071, d0.loss_cls: 0.1727, d0.loss_bbox: 0.3318, d1.loss_cls: 0.1167, d1.loss_bbox: 0.2495, d2.loss_cls: 0.0953, d2.loss_bbox: 0.2256, d3.loss_cls: 0.0811, d3.loss_bbox: 0.2180, d4.loss_cls: 0.0792, d4.loss_bbox: 0.2092, loss: 2.0632, grad_norm: 22.8840
2025-06-18 18:49:03,542 - mmdet - INFO - Epoch [3][2250/7033]	lr: 1.501e-04, eta: 10:29:07, time: 1.464, data_time: 0.033, memory: 18614, loss_cls: 0.0749, loss_bbox: 0.2135, d0.loss_cls: 0.1706, d0.loss_bbox: 0.3381, d1.loss_cls: 0.1093, d1.loss_bbox: 0.2567, d2.loss_cls: 0.0911, d2.loss_bbox: 0.2313, d3.loss_cls: 0.0788, d3.loss_bbox: 0.2224, d4.loss_cls: 0.0756, d4.loss_bbox: 0.2178, loss: 2.0800, grad_norm: 30.9574
2025-06-18 18:50:16,348 - mmdet - INFO - Epoch [3][2300/7033]	lr: 1.501e-04, eta: 10:27:54, time: 1.456, data_time: 0.030, memory: 18614, loss_cls: 0.0793, loss_bbox: 0.2140, d0.loss_cls: 0.1773, d0.loss_bbox: 0.3348, d1.loss_cls: 0.1162, d1.loss_bbox: 0.2542, d2.loss_cls: 0.0973, d2.loss_bbox: 0.2320, d3.loss_cls: 0.0836, d3.loss_bbox: 0.2242, d4.loss_cls: 0.0812, d4.loss_bbox: 0.2173, loss: 2.1114, grad_norm: 21.4808
2025-06-18 18:51:29,114 - mmdet - INFO - Epoch [3][2350/7033]	lr: 1.501e-04, eta: 10:26:41, time: 1.455, data_time: 0.028, memory: 18614, loss_cls: 0.0816, loss_bbox: 0.2254, d0.loss_cls: 0.1900, d0.loss_bbox: 0.3476, d1.loss_cls: 0.1195, d1.loss_bbox: 0.2679, d2.loss_cls: 0.0994, d2.loss_bbox: 0.2398, d3.loss_cls: 0.0866, d3.loss_bbox: 0.2361, d4.loss_cls: 0.0825, d4.loss_bbox: 0.2274, loss: 2.2036, grad_norm: 26.5036
2025-06-18 18:52:41,809 - mmdet - INFO - Epoch [3][2400/7033]	lr: 1.501e-04, eta: 10:25:27, time: 1.454, data_time: 0.023, memory: 18614, loss_cls: 0.0770, loss_bbox: 0.2181, d0.loss_cls: 0.1793, d0.loss_bbox: 0.3347, d1.loss_cls: 0.1081, d1.loss_bbox: 0.2588, d2.loss_cls: 0.0913, d2.loss_bbox: 0.2356, d3.loss_cls: 0.0798, d3.loss_bbox: 0.2283, d4.loss_cls: 0.0761, d4.loss_bbox: 0.2212, loss: 2.1083, grad_norm: 25.8397
2025-06-18 18:53:54,567 - mmdet - INFO - Epoch [3][2450/7033]	lr: 1.501e-04, eta: 10:24:14, time: 1.455, data_time: 0.027, memory: 18614, loss_cls: 0.0722, loss_bbox: 0.2094, d0.loss_cls: 0.1739, d0.loss_bbox: 0.3295, d1.loss_cls: 0.1073, d1.loss_bbox: 0.2493, d2.loss_cls: 0.0868, d2.loss_bbox: 0.2265, d3.loss_cls: 0.0768, d3.loss_bbox: 0.2204, d4.loss_cls: 0.0746, d4.loss_bbox: 0.2118, loss: 2.0386, grad_norm: 25.9056
2025-06-18 18:55:13,793 - mmdet - INFO - Epoch [3][2500/7033]	lr: 1.501e-04, eta: 10:23:11, time: 1.585, data_time: 0.026, memory: 18614, loss_cls: 0.0763, loss_bbox: 0.2090, d0.loss_cls: 0.1708, d0.loss_bbox: 0.3312, d1.loss_cls: 0.1047, d1.loss_bbox: 0.2542, d2.loss_cls: 0.0918, d2.loss_bbox: 0.2282, d3.loss_cls: 0.0790, d3.loss_bbox: 0.2216, d4.loss_cls: 0.0762, d4.loss_bbox: 0.2146, loss: 2.0575, grad_norm: 22.0048
2025-06-18 18:56:26,613 - mmdet - INFO - Epoch [3][2550/7033]	lr: 1.501e-04, eta: 10:21:58, time: 1.456, data_time: 0.028, memory: 18614, loss_cls: 0.0730, loss_bbox: 0.2141, d0.loss_cls: 0.1704, d0.loss_bbox: 0.3335, d1.loss_cls: 0.1060, d1.loss_bbox: 0.2550, d2.loss_cls: 0.0896, d2.loss_bbox: 0.2320, d3.loss_cls: 0.0790, d3.loss_bbox: 0.2256, d4.loss_cls: 0.0735, d4.loss_bbox: 0.2165, loss: 2.0682, grad_norm: 24.4873
2025-06-18 18:57:39,580 - mmdet - INFO - Epoch [3][2600/7033]	lr: 1.501e-04, eta: 10:20:45, time: 1.459, data_time: 0.031, memory: 18614, loss_cls: 0.0814, loss_bbox: 0.2172, d0.loss_cls: 0.1728, d0.loss_bbox: 0.3351, d1.loss_cls: 0.1102, d1.loss_bbox: 0.2543, d2.loss_cls: 0.0957, d2.loss_bbox: 0.2326, d3.loss_cls: 0.0863, d3.loss_bbox: 0.2276, d4.loss_cls: 0.0828, d4.loss_bbox: 0.2213, loss: 2.1173, grad_norm: 35.6793
2025-06-18 18:58:52,354 - mmdet - INFO - Epoch [3][2650/7033]	lr: 1.501e-04, eta: 10:19:32, time: 1.455, data_time: 0.025, memory: 18614, loss_cls: 0.0735, loss_bbox: 0.2136, d0.loss_cls: 0.1683, d0.loss_bbox: 0.3294, d1.loss_cls: 0.1089, d1.loss_bbox: 0.2491, d2.loss_cls: 0.0907, d2.loss_bbox: 0.2301, d3.loss_cls: 0.0793, d3.loss_bbox: 0.2207, d4.loss_cls: 0.0748, d4.loss_bbox: 0.2138, loss: 2.0521, grad_norm: 24.3116
2025-06-18 19:00:05,306 - mmdet - INFO - Epoch [3][2700/7033]	lr: 1.501e-04, eta: 10:18:19, time: 1.459, data_time: 0.027, memory: 18614, loss_cls: 0.0822, loss_bbox: 0.2183, d0.loss_cls: 0.1796, d0.loss_bbox: 0.3436, d1.loss_cls: 0.1165, d1.loss_bbox: 0.2634, d2.loss_cls: 0.0987, d2.loss_bbox: 0.2388, d3.loss_cls: 0.0860, d3.loss_bbox: 0.2285, d4.loss_cls: 0.0836, d4.loss_bbox: 0.2218, loss: 2.1610, grad_norm: 24.2846
2025-06-18 19:01:18,139 - mmdet - INFO - Epoch [3][2750/7033]	lr: 1.501e-04, eta: 10:17:06, time: 1.457, data_time: 0.028, memory: 18614, loss_cls: 0.0791, loss_bbox: 0.2071, d0.loss_cls: 0.1814, d0.loss_bbox: 0.3343, d1.loss_cls: 0.1132, d1.loss_bbox: 0.2481, d2.loss_cls: 0.0960, d2.loss_bbox: 0.2287, d3.loss_cls: 0.0860, d3.loss_bbox: 0.2179, d4.loss_cls: 0.0814, d4.loss_bbox: 0.2105, loss: 2.0836, grad_norm: 29.2668
2025-06-18 19:02:32,822 - mmdet - INFO - Epoch [3][2800/7033]	lr: 1.501e-04, eta: 10:15:56, time: 1.494, data_time: 0.028, memory: 18614, loss_cls: 0.0797, loss_bbox: 0.2201, d0.loss_cls: 0.1709, d0.loss_bbox: 0.3460, d1.loss_cls: 0.1170, d1.loss_bbox: 0.2596, d2.loss_cls: 0.0958, d2.loss_bbox: 0.2373, d3.loss_cls: 0.0844, d3.loss_bbox: 0.2311, d4.loss_cls: 0.0807, d4.loss_bbox: 0.2245, loss: 2.1474, grad_norm: 186.2731
2025-06-18 19:03:45,479 - mmdet - INFO - Epoch [3][2850/7033]	lr: 1.501e-04, eta: 10:14:42, time: 1.453, data_time: 0.028, memory: 18614, loss_cls: 0.0796, loss_bbox: 0.2175, d0.loss_cls: 0.1750, d0.loss_bbox: 0.3490, d1.loss_cls: 0.1130, d1.loss_bbox: 0.2641, d2.loss_cls: 0.0953, d2.loss_bbox: 0.2399, d3.loss_cls: 0.0854, d3.loss_bbox: 0.2298, d4.loss_cls: 0.0797, d4.loss_bbox: 0.2219, loss: 2.1502, grad_norm: 33.6412
2025-06-18 19:04:59,372 - mmdet - INFO - Epoch [3][2900/7033]	lr: 1.501e-04, eta: 10:13:31, time: 1.478, data_time: 0.033, memory: 18614, loss_cls: 0.0751, loss_bbox: 0.2081, d0.loss_cls: 0.1717, d0.loss_bbox: 0.3221, d1.loss_cls: 0.1130, d1.loss_bbox: 0.2475, d2.loss_cls: 0.0964, d2.loss_bbox: 0.2269, d3.loss_cls: 0.0838, d3.loss_bbox: 0.2185, d4.loss_cls: 0.0790, d4.loss_bbox: 0.2113, loss: 2.0534, grad_norm: 46.7264
2025-06-18 19:06:12,466 - mmdet - INFO - Epoch [3][2950/7033]	lr: 1.501e-04, eta: 10:12:18, time: 1.462, data_time: 0.029, memory: 18614, loss_cls: 0.0730, loss_bbox: 0.2097, d0.loss_cls: 0.1654, d0.loss_bbox: 0.3265, d1.loss_cls: 0.1010, d1.loss_bbox: 0.2499, d2.loss_cls: 0.0858, d2.loss_bbox: 0.2268, d3.loss_cls: 0.0777, d3.loss_bbox: 0.2195, d4.loss_cls: 0.0743, d4.loss_bbox: 0.2098, loss: 2.0194, grad_norm: 26.9602
2025-06-18 19:07:25,718 - mmdet - INFO - Epoch [3][3000/7033]	lr: 1.501e-04, eta: 10:11:05, time: 1.465, data_time: 0.034, memory: 18614, loss_cls: 0.0727, loss_bbox: 0.2055, d0.loss_cls: 0.1741, d0.loss_bbox: 0.3362, d1.loss_cls: 0.1108, d1.loss_bbox: 0.2499, d2.loss_cls: 0.0911, d2.loss_bbox: 0.2276, d3.loss_cls: 0.0800, d3.loss_bbox: 0.2183, d4.loss_cls: 0.0747, d4.loss_bbox: 0.2097, loss: 2.0507, grad_norm: 41.4101
2025-06-18 19:08:39,982 - mmdet - INFO - Epoch [3][3050/7033]	lr: 1.501e-04, eta: 10:09:54, time: 1.485, data_time: 0.028, memory: 18614, loss_cls: 0.0794, loss_bbox: 0.2146, d0.loss_cls: 0.1789, d0.loss_bbox: 0.3449, d1.loss_cls: 0.1135, d1.loss_bbox: 0.2587, d2.loss_cls: 0.0967, d2.loss_bbox: 0.2329, d3.loss_cls: 0.0838, d3.loss_bbox: 0.2256, d4.loss_cls: 0.0818, d4.loss_bbox: 0.2183, loss: 2.1291, grad_norm: 26.2041
2025-06-18 19:09:53,112 - mmdet - INFO - Epoch [3][3100/7033]	lr: 1.501e-04, eta: 10:08:42, time: 1.463, data_time: 0.026, memory: 18614, loss_cls: 0.0773, loss_bbox: 0.2057, d0.loss_cls: 0.1730, d0.loss_bbox: 0.3413, d1.loss_cls: 0.1125, d1.loss_bbox: 0.2531, d2.loss_cls: 0.0933, d2.loss_bbox: 0.2289, d3.loss_cls: 0.0827, d3.loss_bbox: 0.2184, d4.loss_cls: 0.0785, d4.loss_bbox: 0.2114, loss: 2.0760, grad_norm: 21.9243
2025-06-18 19:11:07,671 - mmdet - INFO - Epoch [3][3150/7033]	lr: 1.501e-04, eta: 10:07:31, time: 1.491, data_time: 0.030, memory: 18614, loss_cls: 0.0730, loss_bbox: 0.2033, d0.loss_cls: 0.1685, d0.loss_bbox: 0.3307, d1.loss_cls: 0.1081, d1.loss_bbox: 0.2448, d2.loss_cls: 0.0890, d2.loss_bbox: 0.2222, d3.loss_cls: 0.0787, d3.loss_bbox: 0.2149, d4.loss_cls: 0.0739, d4.loss_bbox: 0.2068, loss: 2.0141, grad_norm: 23.3225
2025-06-18 19:12:20,340 - mmdet - INFO - Epoch [3][3200/7033]	lr: 1.501e-04, eta: 10:06:18, time: 1.453, data_time: 0.027, memory: 18614, loss_cls: 0.0786, loss_bbox: 0.2088, d0.loss_cls: 0.1760, d0.loss_bbox: 0.3415, d1.loss_cls: 0.1123, d1.loss_bbox: 0.2536, d2.loss_cls: 0.0937, d2.loss_bbox: 0.2287, d3.loss_cls: 0.0830, d3.loss_bbox: 0.2186, d4.loss_cls: 0.0803, d4.loss_bbox: 0.2110, loss: 2.0861, grad_norm: 36.5260
2025-06-18 19:13:33,910 - mmdet - INFO - Epoch [3][3250/7033]	lr: 1.501e-04, eta: 10:05:06, time: 1.471, data_time: 0.029, memory: 18614, loss_cls: 0.0754, loss_bbox: 0.2051, d0.loss_cls: 0.1775, d0.loss_bbox: 0.3265, d1.loss_cls: 0.1173, d1.loss_bbox: 0.2497, d2.loss_cls: 0.0978, d2.loss_bbox: 0.2258, d3.loss_cls: 0.0815, d3.loss_bbox: 0.2178, d4.loss_cls: 0.0773, d4.loss_bbox: 0.2082, loss: 2.0598, grad_norm: 37.1150
2025-06-18 19:14:46,994 - mmdet - INFO - Epoch [3][3300/7033]	lr: 1.501e-04, eta: 10:03:53, time: 1.462, data_time: 0.026, memory: 18614, loss_cls: 0.0826, loss_bbox: 0.2179, d0.loss_cls: 0.1792, d0.loss_bbox: 0.3428, d1.loss_cls: 0.1196, d1.loss_bbox: 0.2600, d2.loss_cls: 0.1048, d2.loss_bbox: 0.2371, d3.loss_cls: 0.0916, d3.loss_bbox: 0.2271, d4.loss_cls: 0.0877, d4.loss_bbox: 0.2196, loss: 2.1700, grad_norm: 29.2718
2025-06-18 19:16:00,212 - mmdet - INFO - Epoch [3][3350/7033]	lr: 1.501e-04, eta: 10:02:40, time: 1.464, data_time: 0.034, memory: 18614, loss_cls: 0.0742, loss_bbox: 0.2160, d0.loss_cls: 0.1689, d0.loss_bbox: 0.3498, d1.loss_cls: 0.1098, d1.loss_bbox: 0.2612, d2.loss_cls: 0.0937, d2.loss_bbox: 0.2360, d3.loss_cls: 0.0808, d3.loss_bbox: 0.2268, d4.loss_cls: 0.0767, d4.loss_bbox: 0.2181, loss: 2.1120, grad_norm: 62.5610
2025-06-18 19:17:13,201 - mmdet - INFO - Epoch [3][3400/7033]	lr: 1.501e-04, eta: 10:01:27, time: 1.460, data_time: 0.028, memory: 18614, loss_cls: 0.0769, loss_bbox: 0.2107, d0.loss_cls: 0.1729, d0.loss_bbox: 0.3416, d1.loss_cls: 0.1127, d1.loss_bbox: 0.2552, d2.loss_cls: 0.0925, d2.loss_bbox: 0.2310, d3.loss_cls: 0.0830, d3.loss_bbox: 0.2216, d4.loss_cls: 0.0782, d4.loss_bbox: 0.2122, loss: 2.0886, grad_norm: 79.5097
2025-06-18 19:18:26,344 - mmdet - INFO - Epoch [3][3450/7033]	lr: 1.501e-04, eta: 10:00:15, time: 1.463, data_time: 0.029, memory: 18614, loss_cls: 0.0765, loss_bbox: 0.2139, d0.loss_cls: 0.1735, d0.loss_bbox: 0.3462, d1.loss_cls: 0.1086, d1.loss_bbox: 0.2608, d2.loss_cls: 0.0922, d2.loss_bbox: 0.2349, d3.loss_cls: 0.0808, d3.loss_bbox: 0.2249, d4.loss_cls: 0.0779, d4.loss_bbox: 0.2159, loss: 2.1061, grad_norm: 30.5770
2025-06-18 19:19:39,314 - mmdet - INFO - Epoch [3][3500/7033]	lr: 1.501e-04, eta: 9:59:02, time: 1.459, data_time: 0.026, memory: 18614, loss_cls: 0.0740, loss_bbox: 0.2133, d0.loss_cls: 0.1628, d0.loss_bbox: 0.3300, d1.loss_cls: 0.1070, d1.loss_bbox: 0.2557, d2.loss_cls: 0.0889, d2.loss_bbox: 0.2279, d3.loss_cls: 0.0801, d3.loss_bbox: 0.2217, d4.loss_cls: 0.0750, d4.loss_bbox: 0.2173, loss: 2.0537, grad_norm: 20.4339
2025-06-18 19:20:51,934 - mmdet - INFO - Epoch [3][3550/7033]	lr: 1.501e-04, eta: 9:57:48, time: 1.452, data_time: 0.025, memory: 18614, loss_cls: 0.0700, loss_bbox: 0.2152, d0.loss_cls: 0.1701, d0.loss_bbox: 0.3245, d1.loss_cls: 0.1104, d1.loss_bbox: 0.2441, d2.loss_cls: 0.0920, d2.loss_bbox: 0.2227, d3.loss_cls: 0.0780, d3.loss_bbox: 0.2174, d4.loss_cls: 0.0731, d4.loss_bbox: 0.2115, loss: 2.0290, grad_norm: 30.0821
2025-06-18 19:22:04,912 - mmdet - INFO - Epoch [3][3600/7033]	lr: 1.501e-04, eta: 9:56:35, time: 1.460, data_time: 0.031, memory: 18614, loss_cls: 0.0786, loss_bbox: 0.2071, d0.loss_cls: 0.1721, d0.loss_bbox: 0.3328, d1.loss_cls: 0.1067, d1.loss_bbox: 0.2534, d2.loss_cls: 0.0910, d2.loss_bbox: 0.2298, d3.loss_cls: 0.0827, d3.loss_bbox: 0.2206, d4.loss_cls: 0.0788, d4.loss_bbox: 0.2127, loss: 2.0662, grad_norm: 38.0950
2025-06-18 19:23:17,640 - mmdet - INFO - Epoch [3][3650/7033]	lr: 1.501e-04, eta: 9:55:22, time: 1.455, data_time: 0.030, memory: 18614, loss_cls: 0.0743, loss_bbox: 0.2124, d0.loss_cls: 0.1718, d0.loss_bbox: 0.3422, d1.loss_cls: 0.1126, d1.loss_bbox: 0.2563, d2.loss_cls: 0.0923, d2.loss_bbox: 0.2344, d3.loss_cls: 0.0808, d3.loss_bbox: 0.2243, d4.loss_cls: 0.0759, d4.loss_bbox: 0.2165, loss: 2.0938, grad_norm: 27.7840
2025-06-18 19:24:30,981 - mmdet - INFO - Epoch [3][3700/7033]	lr: 1.501e-04, eta: 9:54:10, time: 1.467, data_time: 0.030, memory: 18614, loss_cls: 0.0927, loss_bbox: 0.2131, d0.loss_cls: 0.1902, d0.loss_bbox: 0.3367, d1.loss_cls: 0.1240, d1.loss_bbox: 0.2552, d2.loss_cls: 0.1084, d2.loss_bbox: 0.2312, d3.loss_cls: 0.0972, d3.loss_bbox: 0.2275, d4.loss_cls: 0.0924, d4.loss_bbox: 0.2159, loss: 2.1844, grad_norm: 21.5673
2025-06-18 19:25:43,693 - mmdet - INFO - Epoch [3][3750/7033]	lr: 1.501e-04, eta: 9:52:56, time: 1.454, data_time: 0.024, memory: 18614, loss_cls: 0.0816, loss_bbox: 0.2168, d0.loss_cls: 0.1791, d0.loss_bbox: 0.3465, d1.loss_cls: 0.1192, d1.loss_bbox: 0.2573, d2.loss_cls: 0.1024, d2.loss_bbox: 0.2352, d3.loss_cls: 0.0886, d3.loss_bbox: 0.2295, d4.loss_cls: 0.0840, d4.loss_bbox: 0.2204, loss: 2.1606, grad_norm: 31.5653
2025-06-18 19:26:56,659 - mmdet - INFO - Epoch [3][3800/7033]	lr: 1.501e-04, eta: 9:51:43, time: 1.459, data_time: 0.024, memory: 18614, loss_cls: 0.0741, loss_bbox: 0.2126, d0.loss_cls: 0.1704, d0.loss_bbox: 0.3355, d1.loss_cls: 0.1096, d1.loss_bbox: 0.2553, d2.loss_cls: 0.0913, d2.loss_bbox: 0.2320, d3.loss_cls: 0.0783, d3.loss_bbox: 0.2257, d4.loss_cls: 0.0757, d4.loss_bbox: 0.2183, loss: 2.0787, grad_norm: 36.5848
2025-06-18 19:28:09,326 - mmdet - INFO - Epoch [3][3850/7033]	lr: 1.501e-04, eta: 9:50:30, time: 1.453, data_time: 0.024, memory: 18614, loss_cls: 0.0835, loss_bbox: 0.2198, d0.loss_cls: 0.1787, d0.loss_bbox: 0.3406, d1.loss_cls: 0.1202, d1.loss_bbox: 0.2610, d2.loss_cls: 0.1016, d2.loss_bbox: 0.2377, d3.loss_cls: 0.0892, d3.loss_bbox: 0.2314, d4.loss_cls: 0.0843, d4.loss_bbox: 0.2246, loss: 2.1726, grad_norm: 25.1800
2025-06-18 19:29:22,103 - mmdet - INFO - Epoch [3][3900/7033]	lr: 1.501e-04, eta: 9:49:17, time: 1.456, data_time: 0.028, memory: 18614, loss_cls: 0.0770, loss_bbox: 0.2140, d0.loss_cls: 0.1795, d0.loss_bbox: 0.3316, d1.loss_cls: 0.1126, d1.loss_bbox: 0.2519, d2.loss_cls: 0.0945, d2.loss_bbox: 0.2299, d3.loss_cls: 0.0835, d3.loss_bbox: 0.2254, d4.loss_cls: 0.0774, d4.loss_bbox: 0.2182, loss: 2.0957, grad_norm: 51.4435
2025-06-18 19:30:34,935 - mmdet - INFO - Epoch [3][3950/7033]	lr: 1.501e-04, eta: 9:48:04, time: 1.457, data_time: 0.027, memory: 18614, loss_cls: 0.0766, loss_bbox: 0.2122, d0.loss_cls: 0.1747, d0.loss_bbox: 0.3405, d1.loss_cls: 0.1072, d1.loss_bbox: 0.2570, d2.loss_cls: 0.0887, d2.loss_bbox: 0.2308, d3.loss_cls: 0.0803, d3.loss_bbox: 0.2235, d4.loss_cls: 0.0774, d4.loss_bbox: 0.2170, loss: 2.0858, grad_norm: 28.4462
2025-06-18 19:31:47,571 - mmdet - INFO - Epoch [3][4000/7033]	lr: 1.501e-04, eta: 9:46:50, time: 1.453, data_time: 0.025, memory: 18614, loss_cls: 0.0755, loss_bbox: 0.2145, d0.loss_cls: 0.1628, d0.loss_bbox: 0.3338, d1.loss_cls: 0.1122, d1.loss_bbox: 0.2500, d2.loss_cls: 0.0946, d2.loss_bbox: 0.2284, d3.loss_cls: 0.0791, d3.loss_bbox: 0.2238, d4.loss_cls: 0.0770, d4.loss_bbox: 0.2169, loss: 2.0687, grad_norm: 65.8397
2025-06-18 19:33:00,606 - mmdet - INFO - Epoch [3][4050/7033]	lr: 1.501e-04, eta: 9:45:37, time: 1.461, data_time: 0.032, memory: 18614, loss_cls: 0.0705, loss_bbox: 0.2048, d0.loss_cls: 0.1733, d0.loss_bbox: 0.3185, d1.loss_cls: 0.1033, d1.loss_bbox: 0.2391, d2.loss_cls: 0.0851, d2.loss_bbox: 0.2180, d3.loss_cls: 0.0736, d3.loss_bbox: 0.2131, d4.loss_cls: 0.0718, d4.loss_bbox: 0.2076, loss: 1.9785, grad_norm: 26.2465
2025-06-18 19:34:13,521 - mmdet - INFO - Epoch [3][4100/7033]	lr: 1.501e-04, eta: 9:44:24, time: 1.458, data_time: 0.025, memory: 18614, loss_cls: 0.0763, loss_bbox: 0.2208, d0.loss_cls: 0.1709, d0.loss_bbox: 0.3379, d1.loss_cls: 0.1121, d1.loss_bbox: 0.2576, d2.loss_cls: 0.0947, d2.loss_bbox: 0.2338, d3.loss_cls: 0.0831, d3.loss_bbox: 0.2272, d4.loss_cls: 0.0799, d4.loss_bbox: 0.2216, loss: 2.1158, grad_norm: 23.6351
2025-06-18 19:35:26,432 - mmdet - INFO - Epoch [3][4150/7033]	lr: 1.501e-04, eta: 9:43:11, time: 1.458, data_time: 0.028, memory: 18614, loss_cls: 0.0710, loss_bbox: 0.2110, d0.loss_cls: 0.1676, d0.loss_bbox: 0.3271, d1.loss_cls: 0.0978, d1.loss_bbox: 0.2513, d2.loss_cls: 0.0841, d2.loss_bbox: 0.2239, d3.loss_cls: 0.0751, d3.loss_bbox: 0.2186, d4.loss_cls: 0.0727, d4.loss_bbox: 0.2100, loss: 2.0103, grad_norm: 26.6528
2025-06-18 19:36:39,310 - mmdet - INFO - Epoch [3][4200/7033]	lr: 1.501e-04, eta: 9:41:58, time: 1.458, data_time: 0.029, memory: 18614, loss_cls: 0.0758, loss_bbox: 0.2062, d0.loss_cls: 0.1741, d0.loss_bbox: 0.3304, d1.loss_cls: 0.1082, d1.loss_bbox: 0.2510, d2.loss_cls: 0.0924, d2.loss_bbox: 0.2288, d3.loss_cls: 0.0803, d3.loss_bbox: 0.2198, d4.loss_cls: 0.0774, d4.loss_bbox: 0.2122, loss: 2.0567, grad_norm: 38.6469
2025-06-18 19:37:52,214 - mmdet - INFO - Epoch [3][4250/7033]	lr: 1.501e-04, eta: 9:40:45, time: 1.458, data_time: 0.028, memory: 18614, loss_cls: 0.0799, loss_bbox: 0.2172, d0.loss_cls: 0.1788, d0.loss_bbox: 0.3409, d1.loss_cls: 0.1163, d1.loss_bbox: 0.2586, d2.loss_cls: 0.0970, d2.loss_bbox: 0.2359, d3.loss_cls: 0.0873, d3.loss_bbox: 0.2295, d4.loss_cls: 0.0830, d4.loss_bbox: 0.2207, loss: 2.1451, grad_norm: 28.4125
2025-06-18 19:39:06,859 - mmdet - INFO - Epoch [3][4300/7033]	lr: 1.501e-04, eta: 9:39:35, time: 1.493, data_time: 0.029, memory: 18614, loss_cls: 0.0808, loss_bbox: 0.2203, d0.loss_cls: 0.1756, d0.loss_bbox: 0.3586, d1.loss_cls: 0.1156, d1.loss_bbox: 0.2664, d2.loss_cls: 0.0988, d2.loss_bbox: 0.2387, d3.loss_cls: 0.0889, d3.loss_bbox: 0.2320, d4.loss_cls: 0.0822, d4.loss_bbox: 0.2241, loss: 2.1821, grad_norm: 20.6349
2025-06-18 19:40:19,689 - mmdet - INFO - Epoch [3][4350/7033]	lr: 1.501e-04, eta: 9:38:22, time: 1.457, data_time: 0.027, memory: 18614, loss_cls: 0.0775, loss_bbox: 0.2115, d0.loss_cls: 0.1831, d0.loss_bbox: 0.3336, d1.loss_cls: 0.1129, d1.loss_bbox: 0.2529, d2.loss_cls: 0.0957, d2.loss_bbox: 0.2309, d3.loss_cls: 0.0847, d3.loss_bbox: 0.2230, d4.loss_cls: 0.0801, d4.loss_bbox: 0.2152, loss: 2.1011, grad_norm: 47.3291
2025-06-18 19:41:32,599 - mmdet - INFO - Epoch [3][4400/7033]	lr: 1.501e-04, eta: 9:37:08, time: 1.458, data_time: 0.027, memory: 18614, loss_cls: 0.0768, loss_bbox: 0.2079, d0.loss_cls: 0.1738, d0.loss_bbox: 0.3290, d1.loss_cls: 0.1120, d1.loss_bbox: 0.2482, d2.loss_cls: 0.0949, d2.loss_bbox: 0.2249, d3.loss_cls: 0.0813, d3.loss_bbox: 0.2189, d4.loss_cls: 0.0788, d4.loss_bbox: 0.2107, loss: 2.0572, grad_norm: 25.6726
2025-06-18 19:42:45,513 - mmdet - INFO - Epoch [3][4450/7033]	lr: 1.501e-04, eta: 9:35:55, time: 1.458, data_time: 0.028, memory: 18614, loss_cls: 0.0729, loss_bbox: 0.2055, d0.loss_cls: 0.1622, d0.loss_bbox: 0.3215, d1.loss_cls: 0.1082, d1.loss_bbox: 0.2440, d2.loss_cls: 0.0885, d2.loss_bbox: 0.2247, d3.loss_cls: 0.0780, d3.loss_bbox: 0.2172, d4.loss_cls: 0.0755, d4.loss_bbox: 0.2085, loss: 2.0067, grad_norm: 24.8792
2025-06-18 19:43:58,134 - mmdet - INFO - Epoch [3][4500/7033]	lr: 1.501e-04, eta: 9:34:42, time: 1.452, data_time: 0.027, memory: 18614, loss_cls: 0.0729, loss_bbox: 0.2036, d0.loss_cls: 0.1731, d0.loss_bbox: 0.3359, d1.loss_cls: 0.1092, d1.loss_bbox: 0.2488, d2.loss_cls: 0.0946, d2.loss_bbox: 0.2239, d3.loss_cls: 0.0802, d3.loss_bbox: 0.2162, d4.loss_cls: 0.0750, d4.loss_bbox: 0.2075, loss: 2.0409, grad_norm: 24.0214
2025-06-18 19:45:11,043 - mmdet - INFO - Epoch [3][4550/7033]	lr: 1.501e-04, eta: 9:33:29, time: 1.458, data_time: 0.030, memory: 18614, loss_cls: 0.0766, loss_bbox: 0.2171, d0.loss_cls: 0.1742, d0.loss_bbox: 0.3434, d1.loss_cls: 0.1116, d1.loss_bbox: 0.2657, d2.loss_cls: 0.0945, d2.loss_bbox: 0.2401, d3.loss_cls: 0.0838, d3.loss_bbox: 0.2309, d4.loss_cls: 0.0799, d4.loss_bbox: 0.2215, loss: 2.1393, grad_norm: 34.1376
2025-06-18 19:46:23,867 - mmdet - INFO - Epoch [3][4600/7033]	lr: 1.501e-04, eta: 9:32:16, time: 1.456, data_time: 0.027, memory: 18614, loss_cls: 0.0715, loss_bbox: 0.2102, d0.loss_cls: 0.1700, d0.loss_bbox: 0.3344, d1.loss_cls: 0.1054, d1.loss_bbox: 0.2532, d2.loss_cls: 0.0928, d2.loss_bbox: 0.2280, d3.loss_cls: 0.0793, d3.loss_bbox: 0.2203, d4.loss_cls: 0.0740, d4.loss_bbox: 0.2133, loss: 2.0524, grad_norm: 46.1901
2025-06-18 19:47:38,363 - mmdet - INFO - Epoch [3][4650/7033]	lr: 1.501e-04, eta: 9:31:05, time: 1.490, data_time: 0.026, memory: 18614, loss_cls: 0.0797, loss_bbox: 0.2095, d0.loss_cls: 0.1717, d0.loss_bbox: 0.3355, d1.loss_cls: 0.1155, d1.loss_bbox: 0.2550, d2.loss_cls: 0.0972, d2.loss_bbox: 0.2300, d3.loss_cls: 0.0848, d3.loss_bbox: 0.2218, d4.loss_cls: 0.0804, d4.loss_bbox: 0.2144, loss: 2.0955, grad_norm: 110.7383
2025-06-18 19:48:51,352 - mmdet - INFO - Epoch [3][4700/7033]	lr: 1.501e-04, eta: 9:29:52, time: 1.460, data_time: 0.029, memory: 18614, loss_cls: 0.0760, loss_bbox: 0.2161, d0.loss_cls: 0.1638, d0.loss_bbox: 0.3377, d1.loss_cls: 0.1104, d1.loss_bbox: 0.2583, d2.loss_cls: 0.0936, d2.loss_bbox: 0.2357, d3.loss_cls: 0.0826, d3.loss_bbox: 0.2297, d4.loss_cls: 0.0779, d4.loss_bbox: 0.2205, loss: 2.1025, grad_norm: 42.2047
2025-06-18 19:50:04,063 - mmdet - INFO - Epoch [3][4750/7033]	lr: 1.501e-04, eta: 9:28:39, time: 1.454, data_time: 0.027, memory: 18614, loss_cls: 0.0739, loss_bbox: 0.2040, d0.loss_cls: 0.1749, d0.loss_bbox: 0.3278, d1.loss_cls: 0.1060, d1.loss_bbox: 0.2448, d2.loss_cls: 0.0903, d2.loss_bbox: 0.2240, d3.loss_cls: 0.0782, d3.loss_bbox: 0.2174, d4.loss_cls: 0.0752, d4.loss_bbox: 0.2067, loss: 2.0232, grad_norm: 17.2505
2025-06-18 19:51:16,868 - mmdet - INFO - Epoch [3][4800/7033]	lr: 1.501e-04, eta: 9:27:26, time: 1.456, data_time: 0.028, memory: 18614, loss_cls: 0.0780, loss_bbox: 0.2087, d0.loss_cls: 0.1758, d0.loss_bbox: 0.3345, d1.loss_cls: 0.1123, d1.loss_bbox: 0.2499, d2.loss_cls: 0.0985, d2.loss_bbox: 0.2255, d3.loss_cls: 0.0843, d3.loss_bbox: 0.2190, d4.loss_cls: 0.0792, d4.loss_bbox: 0.2124, loss: 2.0781, grad_norm: 28.3390
2025-06-18 19:52:29,508 - mmdet - INFO - Epoch [3][4850/7033]	lr: 1.501e-04, eta: 9:26:12, time: 1.453, data_time: 0.029, memory: 18614, loss_cls: 0.0722, loss_bbox: 0.1998, d0.loss_cls: 0.1711, d0.loss_bbox: 0.3211, d1.loss_cls: 0.1076, d1.loss_bbox: 0.2418, d2.loss_cls: 0.0910, d2.loss_bbox: 0.2180, d3.loss_cls: 0.0767, d3.loss_bbox: 0.2105, d4.loss_cls: 0.0748, d4.loss_bbox: 0.2025, loss: 1.9872, grad_norm: 33.9674
2025-06-18 19:53:42,386 - mmdet - INFO - Epoch [3][4900/7033]	lr: 1.501e-04, eta: 9:24:59, time: 1.458, data_time: 0.027, memory: 18614, loss_cls: 0.0702, loss_bbox: 0.2032, d0.loss_cls: 0.1750, d0.loss_bbox: 0.3250, d1.loss_cls: 0.1063, d1.loss_bbox: 0.2440, d2.loss_cls: 0.0875, d2.loss_bbox: 0.2215, d3.loss_cls: 0.0764, d3.loss_bbox: 0.2137, d4.loss_cls: 0.0730, d4.loss_bbox: 0.2043, loss: 2.0001, grad_norm: 63.7849
2025-06-18 19:54:55,198 - mmdet - INFO - Epoch [3][4950/7033]	lr: 1.501e-04, eta: 9:23:46, time: 1.456, data_time: 0.029, memory: 18614, loss_cls: 0.0698, loss_bbox: 0.1984, d0.loss_cls: 0.1675, d0.loss_bbox: 0.3250, d1.loss_cls: 0.1039, d1.loss_bbox: 0.2397, d2.loss_cls: 0.0849, d2.loss_bbox: 0.2175, d3.loss_cls: 0.0728, d3.loss_bbox: 0.2115, d4.loss_cls: 0.0707, d4.loss_bbox: 0.2008, loss: 1.9624, grad_norm: 25.9249
2025-06-18 19:56:08,102 - mmdet - INFO - Epoch [3][5000/7033]	lr: 1.501e-04, eta: 9:22:33, time: 1.458, data_time: 0.028, memory: 18614, loss_cls: 0.0786, loss_bbox: 0.2098, d0.loss_cls: 0.1817, d0.loss_bbox: 0.3368, d1.loss_cls: 0.1115, d1.loss_bbox: 0.2505, d2.loss_cls: 0.0952, d2.loss_bbox: 0.2291, d3.loss_cls: 0.0831, d3.loss_bbox: 0.2204, d4.loss_cls: 0.0795, d4.loss_bbox: 0.2124, loss: 2.0884, grad_norm: 70.2648
2025-06-18 19:57:22,635 - mmdet - INFO - Epoch [3][5050/7033]	lr: 1.501e-04, eta: 9:21:22, time: 1.491, data_time: 0.028, memory: 18614, loss_cls: 0.0857, loss_bbox: 0.2117, d0.loss_cls: 0.1839, d0.loss_bbox: 0.3371, d1.loss_cls: 0.1191, d1.loss_bbox: 0.2544, d2.loss_cls: 0.1010, d2.loss_bbox: 0.2310, d3.loss_cls: 0.0911, d3.loss_bbox: 0.2223, d4.loss_cls: 0.0867, d4.loss_bbox: 0.2154, loss: 2.1395, grad_norm: 54.3161
2025-06-18 19:58:35,375 - mmdet - INFO - Epoch [3][5100/7033]	lr: 1.501e-04, eta: 9:20:09, time: 1.455, data_time: 0.027, memory: 18614, loss_cls: 0.0662, loss_bbox: 0.1965, d0.loss_cls: 0.1681, d0.loss_bbox: 0.3311, d1.loss_cls: 0.1038, d1.loss_bbox: 0.2408, d2.loss_cls: 0.0845, d2.loss_bbox: 0.2144, d3.loss_cls: 0.0694, d3.loss_bbox: 0.2089, d4.loss_cls: 0.0671, d4.loss_bbox: 0.2003, loss: 1.9510, grad_norm: 41.9148
2025-06-18 19:59:47,957 - mmdet - INFO - Epoch [3][5150/7033]	lr: 1.501e-04, eta: 9:18:55, time: 1.452, data_time: 0.025, memory: 18614, loss_cls: 0.0720, loss_bbox: 0.2039, d0.loss_cls: 0.1738, d0.loss_bbox: 0.3395, d1.loss_cls: 0.1162, d1.loss_bbox: 0.2494, d2.loss_cls: 0.0909, d2.loss_bbox: 0.2245, d3.loss_cls: 0.0782, d3.loss_bbox: 0.2163, d4.loss_cls: 0.0749, d4.loss_bbox: 0.2071, loss: 2.0467, grad_norm: 34.5614
2025-06-18 20:01:00,709 - mmdet - INFO - Epoch [3][5200/7033]	lr: 1.501e-04, eta: 9:17:42, time: 1.455, data_time: 0.027, memory: 18614, loss_cls: 0.0760, loss_bbox: 0.2055, d0.loss_cls: 0.1805, d0.loss_bbox: 0.3334, d1.loss_cls: 0.1096, d1.loss_bbox: 0.2508, d2.loss_cls: 0.0923, d2.loss_bbox: 0.2246, d3.loss_cls: 0.0791, d3.loss_bbox: 0.2186, d4.loss_cls: 0.0776, d4.loss_bbox: 0.2081, loss: 2.0561, grad_norm: 395.5098
2025-06-18 20:02:13,373 - mmdet - INFO - Epoch [3][5250/7033]	lr: 1.501e-04, eta: 9:16:29, time: 1.453, data_time: 0.026, memory: 18614, loss_cls: 0.0758, loss_bbox: 0.2096, d0.loss_cls: 0.1798, d0.loss_bbox: 0.3338, d1.loss_cls: 0.1171, d1.loss_bbox: 0.2488, d2.loss_cls: 0.0968, d2.loss_bbox: 0.2269, d3.loss_cls: 0.0841, d3.loss_bbox: 0.2190, d4.loss_cls: 0.0785, d4.loss_bbox: 0.2111, loss: 2.0812, grad_norm: 29.5223
2025-06-18 20:03:26,081 - mmdet - INFO - Epoch [3][5300/7033]	lr: 1.501e-04, eta: 9:15:16, time: 1.454, data_time: 0.027, memory: 18614, loss_cls: 0.0715, loss_bbox: 0.2251, d0.loss_cls: 0.1813, d0.loss_bbox: 0.3459, d1.loss_cls: 0.1230, d1.loss_bbox: 0.2551, d2.loss_cls: 0.0934, d2.loss_bbox: 0.2331, d3.loss_cls: 0.0775, d3.loss_bbox: 0.2282, d4.loss_cls: 0.0733, d4.loss_bbox: 0.2239, loss: 2.1312, grad_norm: 27.3616
2025-06-18 20:04:38,969 - mmdet - INFO - Epoch [3][5350/7033]	lr: 1.501e-04, eta: 9:14:02, time: 1.458, data_time: 0.028, memory: 18614, loss_cls: 0.0731, loss_bbox: 0.2109, d0.loss_cls: 0.1775, d0.loss_bbox: 0.3306, d1.loss_cls: 0.1115, d1.loss_bbox: 0.2441, d2.loss_cls: 0.0897, d2.loss_bbox: 0.2220, d3.loss_cls: 0.0781, d3.loss_bbox: 0.2159, d4.loss_cls: 0.0751, d4.loss_bbox: 0.2087, loss: 2.0371, grad_norm: 22.8928
2025-06-18 20:05:53,348 - mmdet - INFO - Epoch [3][5400/7033]	lr: 1.501e-04, eta: 9:12:51, time: 1.488, data_time: 0.025, memory: 18614, loss_cls: 0.0825, loss_bbox: 0.2186, d0.loss_cls: 0.1892, d0.loss_bbox: 0.3406, d1.loss_cls: 0.1227, d1.loss_bbox: 0.2563, d2.loss_cls: 0.1014, d2.loss_bbox: 0.2320, d3.loss_cls: 0.0893, d3.loss_bbox: 0.2244, d4.loss_cls: 0.0819, d4.loss_bbox: 0.2190, loss: 2.1577, grad_norm: 29.3645
2025-06-18 20:07:06,477 - mmdet - INFO - Epoch [3][5450/7033]	lr: 1.501e-04, eta: 9:11:38, time: 1.463, data_time: 0.034, memory: 18614, loss_cls: 0.0882, loss_bbox: 0.2137, d0.loss_cls: 0.1923, d0.loss_bbox: 0.3423, d1.loss_cls: 0.1265, d1.loss_bbox: 0.2531, d2.loss_cls: 0.1032, d2.loss_bbox: 0.2310, d3.loss_cls: 0.0957, d3.loss_bbox: 0.2230, d4.loss_cls: 0.0892, d4.loss_bbox: 0.2167, loss: 2.1751, grad_norm: 267.5505
2025-06-18 20:08:19,224 - mmdet - INFO - Epoch [3][5500/7033]	lr: 1.501e-04, eta: 9:10:25, time: 1.455, data_time: 0.029, memory: 18614, loss_cls: 0.0729, loss_bbox: 0.2072, d0.loss_cls: 0.1815, d0.loss_bbox: 0.3386, d1.loss_cls: 0.1161, d1.loss_bbox: 0.2463, d2.loss_cls: 0.0949, d2.loss_bbox: 0.2252, d3.loss_cls: 0.0805, d3.loss_bbox: 0.2174, d4.loss_cls: 0.0765, d4.loss_bbox: 0.2091, loss: 2.0662, grad_norm: 25.8935
2025-06-18 20:09:32,037 - mmdet - INFO - Epoch [3][5550/7033]	lr: 1.501e-04, eta: 9:09:12, time: 1.456, data_time: 0.028, memory: 18614, loss_cls: 0.0688, loss_bbox: 0.2015, d0.loss_cls: 0.1699, d0.loss_bbox: 0.3211, d1.loss_cls: 0.1092, d1.loss_bbox: 0.2398, d2.loss_cls: 0.0886, d2.loss_bbox: 0.2198, d3.loss_cls: 0.0731, d3.loss_bbox: 0.2147, d4.loss_cls: 0.0684, d4.loss_bbox: 0.2044, loss: 1.9795, grad_norm: 20.4610
2025-06-18 20:10:44,979 - mmdet - INFO - Epoch [3][5600/7033]	lr: 1.501e-04, eta: 9:07:59, time: 1.459, data_time: 0.029, memory: 18614, loss_cls: 0.0719, loss_bbox: 0.2032, d0.loss_cls: 0.1770, d0.loss_bbox: 0.3381, d1.loss_cls: 0.1110, d1.loss_bbox: 0.2507, d2.loss_cls: 0.0892, d2.loss_bbox: 0.2248, d3.loss_cls: 0.0772, d3.loss_bbox: 0.2182, d4.loss_cls: 0.0724, d4.loss_bbox: 0.2081, loss: 2.0417, grad_norm: 100.8911
2025-06-18 20:11:57,629 - mmdet - INFO - Epoch [3][5650/7033]	lr: 1.501e-04, eta: 9:06:46, time: 1.453, data_time: 0.025, memory: 18614, loss_cls: 0.0705, loss_bbox: 0.2008, d0.loss_cls: 0.1682, d0.loss_bbox: 0.3429, d1.loss_cls: 0.1117, d1.loss_bbox: 0.2477, d2.loss_cls: 0.0893, d2.loss_bbox: 0.2219, d3.loss_cls: 0.0757, d3.loss_bbox: 0.2115, d4.loss_cls: 0.0724, d4.loss_bbox: 0.2039, loss: 2.0163, grad_norm: 30.7216
2025-06-18 20:13:10,419 - mmdet - INFO - Epoch [3][5700/7033]	lr: 1.501e-04, eta: 9:05:33, time: 1.456, data_time: 0.028, memory: 18614, loss_cls: 0.0713, loss_bbox: 0.2060, d0.loss_cls: 0.1730, d0.loss_bbox: 0.3344, d1.loss_cls: 0.1131, d1.loss_bbox: 0.2536, d2.loss_cls: 0.0895, d2.loss_bbox: 0.2275, d3.loss_cls: 0.0771, d3.loss_bbox: 0.2193, d4.loss_cls: 0.0728, d4.loss_bbox: 0.2094, loss: 2.0472, grad_norm: 18.1215
2025-06-18 20:14:23,151 - mmdet - INFO - Epoch [3][5750/7033]	lr: 1.501e-04, eta: 9:04:19, time: 1.455, data_time: 0.026, memory: 18614, loss_cls: 0.0786, loss_bbox: 0.2047, d0.loss_cls: 0.1785, d0.loss_bbox: 0.3488, d1.loss_cls: 0.1145, d1.loss_bbox: 0.2538, d2.loss_cls: 0.0987, d2.loss_bbox: 0.2268, d3.loss_cls: 0.0844, d3.loss_bbox: 0.2167, d4.loss_cls: 0.0781, d4.loss_bbox: 0.2096, loss: 2.0932, grad_norm: 85.8442
2025-06-18 20:15:35,899 - mmdet - INFO - Epoch [3][5800/7033]	lr: 1.501e-04, eta: 9:03:06, time: 1.455, data_time: 0.027, memory: 18614, loss_cls: 0.0761, loss_bbox: 0.2077, d0.loss_cls: 0.1769, d0.loss_bbox: 0.3445, d1.loss_cls: 0.1169, d1.loss_bbox: 0.2541, d2.loss_cls: 0.0975, d2.loss_bbox: 0.2285, d3.loss_cls: 0.0829, d3.loss_bbox: 0.2202, d4.loss_cls: 0.0785, d4.loss_bbox: 0.2113, loss: 2.0951, grad_norm: 406.2002
2025-06-18 20:16:48,836 - mmdet - INFO - Epoch [3][5850/7033]	lr: 1.501e-04, eta: 9:01:53, time: 1.459, data_time: 0.028, memory: 18614, loss_cls: 0.0771, loss_bbox: 0.2096, d0.loss_cls: 0.1838, d0.loss_bbox: 0.3500, d1.loss_cls: 0.1242, d1.loss_bbox: 0.2624, d2.loss_cls: 0.1004, d2.loss_bbox: 0.2338, d3.loss_cls: 0.0841, d3.loss_bbox: 0.2253, d4.loss_cls: 0.0774, d4.loss_bbox: 0.2156, loss: 2.1438, grad_norm: 23.0114
2025-06-18 20:18:01,653 - mmdet - INFO - Epoch [3][5900/7033]	lr: 1.501e-04, eta: 9:00:40, time: 1.456, data_time: 0.028, memory: 18614, loss_cls: 0.0799, loss_bbox: 0.2143, d0.loss_cls: 0.1875, d0.loss_bbox: 0.3538, d1.loss_cls: 0.1179, d1.loss_bbox: 0.2648, d2.loss_cls: 0.1003, d2.loss_bbox: 0.2394, d3.loss_cls: 0.0871, d3.loss_bbox: 0.2287, d4.loss_cls: 0.0807, d4.loss_bbox: 0.2183, loss: 2.1725, grad_norm: 29.7805
2025-06-18 20:19:14,317 - mmdet - INFO - Epoch [3][5950/7033]	lr: 1.501e-04, eta: 8:59:27, time: 1.453, data_time: 0.025, memory: 18614, loss_cls: 0.0827, loss_bbox: 0.2060, d0.loss_cls: 0.1813, d0.loss_bbox: 0.3488, d1.loss_cls: 0.1229, d1.loss_bbox: 0.2578, d2.loss_cls: 0.1052, d2.loss_bbox: 0.2320, d3.loss_cls: 0.0888, d3.loss_bbox: 0.2232, d4.loss_cls: 0.0839, d4.loss_bbox: 0.2105, loss: 2.1431, grad_norm: 60.2180
2025-06-18 20:20:27,207 - mmdet - INFO - Epoch [3][6000/7033]	lr: 1.501e-04, eta: 8:58:14, time: 1.458, data_time: 0.027, memory: 18614, loss_cls: 0.0819, loss_bbox: 0.2115, d0.loss_cls: 0.1904, d0.loss_bbox: 0.3572, d1.loss_cls: 0.1322, d1.loss_bbox: 0.2629, d2.loss_cls: 0.1051, d2.loss_bbox: 0.2331, d3.loss_cls: 0.0888, d3.loss_bbox: 0.2263, d4.loss_cls: 0.0835, d4.loss_bbox: 0.2162, loss: 2.1892, grad_norm: 28.3723
2025-06-18 20:21:40,035 - mmdet - INFO - Epoch [3][6050/7033]	lr: 1.501e-04, eta: 8:57:01, time: 1.457, data_time: 0.028, memory: 18614, loss_cls: 0.0797, loss_bbox: 0.2030, d0.loss_cls: 0.1835, d0.loss_bbox: 0.3430, d1.loss_cls: 0.1225, d1.loss_bbox: 0.2502, d2.loss_cls: 0.0996, d2.loss_bbox: 0.2234, d3.loss_cls: 0.0865, d3.loss_bbox: 0.2151, d4.loss_cls: 0.0802, d4.loss_bbox: 0.2064, loss: 2.0931, grad_norm: 20.6910
2025-06-18 20:22:52,904 - mmdet - INFO - Epoch [3][6100/7033]	lr: 1.501e-04, eta: 8:55:48, time: 1.457, data_time: 0.027, memory: 18614, loss_cls: 0.0779, loss_bbox: 0.2055, d0.loss_cls: 0.1848, d0.loss_bbox: 0.3414, d1.loss_cls: 0.1276, d1.loss_bbox: 0.2506, d2.loss_cls: 0.1012, d2.loss_bbox: 0.2210, d3.loss_cls: 0.0858, d3.loss_bbox: 0.2143, d4.loss_cls: 0.0801, d4.loss_bbox: 0.2071, loss: 2.0973, grad_norm: 38.9974
2025-06-18 20:24:05,589 - mmdet - INFO - Epoch [3][6150/7033]	lr: 1.501e-04, eta: 8:54:34, time: 1.454, data_time: 0.028, memory: 18614, loss_cls: 0.0843, loss_bbox: 0.2143, d0.loss_cls: 0.1869, d0.loss_bbox: 0.3477, d1.loss_cls: 0.1229, d1.loss_bbox: 0.2628, d2.loss_cls: 0.1042, d2.loss_bbox: 0.2372, d3.loss_cls: 0.0917, d3.loss_bbox: 0.2279, d4.loss_cls: 0.0867, d4.loss_bbox: 0.2183, loss: 2.1849, grad_norm: 35.8330
2025-06-18 20:25:18,181 - mmdet - INFO - Epoch [3][6200/7033]	lr: 1.501e-04, eta: 8:53:21, time: 1.452, data_time: 0.025, memory: 18614, loss_cls: 0.0778, loss_bbox: 0.2096, d0.loss_cls: 0.1913, d0.loss_bbox: 0.3478, d1.loss_cls: 0.1225, d1.loss_bbox: 0.2570, d2.loss_cls: 0.0994, d2.loss_bbox: 0.2302, d3.loss_cls: 0.0836, d3.loss_bbox: 0.2228, d4.loss_cls: 0.0800, d4.loss_bbox: 0.2132, loss: 2.1352, grad_norm: 26.8351
2025-06-18 20:26:30,996 - mmdet - INFO - Epoch [3][6250/7033]	lr: 1.501e-04, eta: 8:52:08, time: 1.456, data_time: 0.027, memory: 18614, loss_cls: 0.0819, loss_bbox: 0.2166, d0.loss_cls: 0.1921, d0.loss_bbox: 0.3495, d1.loss_cls: 0.1300, d1.loss_bbox: 0.2611, d2.loss_cls: 0.1040, d2.loss_bbox: 0.2376, d3.loss_cls: 0.0849, d3.loss_bbox: 0.2318, d4.loss_cls: 0.0825, d4.loss_bbox: 0.2204, loss: 2.1924, grad_norm: 56.6772
2025-06-18 20:27:44,035 - mmdet - INFO - Epoch [3][6300/7033]	lr: 1.501e-04, eta: 8:50:55, time: 1.461, data_time: 0.035, memory: 18614, loss_cls: 0.0731, loss_bbox: 0.2149, d0.loss_cls: 0.1756, d0.loss_bbox: 0.3402, d1.loss_cls: 0.1199, d1.loss_bbox: 0.2567, d2.loss_cls: 0.0970, d2.loss_bbox: 0.2301, d3.loss_cls: 0.0787, d3.loss_bbox: 0.2232, d4.loss_cls: 0.0748, d4.loss_bbox: 0.2149, loss: 2.0992, grad_norm: 36.8220
2025-06-18 20:28:56,721 - mmdet - INFO - Epoch [3][6350/7033]	lr: 1.501e-04, eta: 8:49:42, time: 1.454, data_time: 0.026, memory: 18614, loss_cls: 0.0813, loss_bbox: 0.2238, d0.loss_cls: 0.2015, d0.loss_bbox: 0.3648, d1.loss_cls: 0.1318, d1.loss_bbox: 0.2691, d2.loss_cls: 0.1049, d2.loss_bbox: 0.2417, d3.loss_cls: 0.0868, d3.loss_bbox: 0.2340, d4.loss_cls: 0.0828, d4.loss_bbox: 0.2257, loss: 2.2483, grad_norm: 60.1542
2025-06-18 20:30:09,706 - mmdet - INFO - Epoch [3][6400/7033]	lr: 1.501e-04, eta: 8:48:29, time: 1.460, data_time: 0.029, memory: 18614, loss_cls: 0.0752, loss_bbox: 0.2089, d0.loss_cls: 0.1837, d0.loss_bbox: 0.3446, d1.loss_cls: 0.1225, d1.loss_bbox: 0.2568, d2.loss_cls: 0.0993, d2.loss_bbox: 0.2296, d3.loss_cls: 0.0826, d3.loss_bbox: 0.2227, d4.loss_cls: 0.0765, d4.loss_bbox: 0.2122, loss: 2.1145, grad_norm: 33.4092
2025-06-18 20:31:22,492 - mmdet - INFO - Epoch [3][6450/7033]	lr: 1.501e-04, eta: 8:47:16, time: 1.456, data_time: 0.025, memory: 18614, loss_cls: 0.0839, loss_bbox: 0.2130, d0.loss_cls: 0.1893, d0.loss_bbox: 0.3586, d1.loss_cls: 0.1306, d1.loss_bbox: 0.2642, d2.loss_cls: 0.1071, d2.loss_bbox: 0.2370, d3.loss_cls: 0.0916, d3.loss_bbox: 0.2283, d4.loss_cls: 0.0860, d4.loss_bbox: 0.2179, loss: 2.2076, grad_norm: 26.9850
2025-06-18 20:32:35,279 - mmdet - INFO - Epoch [3][6500/7033]	lr: 1.501e-04, eta: 8:46:03, time: 1.456, data_time: 0.030, memory: 18614, loss_cls: 0.0806, loss_bbox: 0.2173, d0.loss_cls: 0.1848, d0.loss_bbox: 0.3611, d1.loss_cls: 0.1314, d1.loss_bbox: 0.2696, d2.loss_cls: 0.1079, d2.loss_bbox: 0.2421, d3.loss_cls: 0.0887, d3.loss_bbox: 0.2331, d4.loss_cls: 0.0831, d4.loss_bbox: 0.2221, loss: 2.2216, grad_norm: 25.8905
2025-06-18 20:33:49,801 - mmdet - INFO - Epoch [3][6550/7033]	lr: 1.501e-04, eta: 8:44:51, time: 1.490, data_time: 0.029, memory: 18614, loss_cls: 0.0804, loss_bbox: 0.2150, d0.loss_cls: 0.1854, d0.loss_bbox: 0.3588, d1.loss_cls: 0.1270, d1.loss_bbox: 0.2653, d2.loss_cls: 0.1039, d2.loss_bbox: 0.2401, d3.loss_cls: 0.0875, d3.loss_bbox: 0.2302, d4.loss_cls: 0.0839, d4.loss_bbox: 0.2190, loss: 2.1965, grad_norm: 19.2060
2025-06-18 20:35:02,473 - mmdet - INFO - Epoch [3][6600/7033]	lr: 1.501e-04, eta: 8:43:38, time: 1.453, data_time: 0.026, memory: 18614, loss_cls: 0.0755, loss_bbox: 0.2152, d0.loss_cls: 0.1834, d0.loss_bbox: 0.3501, d1.loss_cls: 0.1185, d1.loss_bbox: 0.2616, d2.loss_cls: 0.1008, d2.loss_bbox: 0.2369, d3.loss_cls: 0.0852, d3.loss_bbox: 0.2297, d4.loss_cls: 0.0792, d4.loss_bbox: 0.2180, loss: 2.1539, grad_norm: 38.9276
2025-06-18 20:36:15,325 - mmdet - INFO - Epoch [3][6650/7033]	lr: 1.501e-04, eta: 8:42:25, time: 1.457, data_time: 0.028, memory: 18614, loss_cls: 0.0734, loss_bbox: 0.2015, d0.loss_cls: 0.1772, d0.loss_bbox: 0.3557, d1.loss_cls: 0.1194, d1.loss_bbox: 0.2550, d2.loss_cls: 0.0988, d2.loss_bbox: 0.2242, d3.loss_cls: 0.0791, d3.loss_bbox: 0.2161, d4.loss_cls: 0.0751, d4.loss_bbox: 0.2060, loss: 2.0816, grad_norm: 21.5572
2025-06-18 20:37:28,030 - mmdet - INFO - Epoch [3][6700/7033]	lr: 1.501e-04, eta: 8:41:12, time: 1.454, data_time: 0.025, memory: 18614, loss_cls: 0.0720, loss_bbox: 0.2055, d0.loss_cls: 0.1694, d0.loss_bbox: 0.3406, d1.loss_cls: 0.1105, d1.loss_bbox: 0.2504, d2.loss_cls: 0.0947, d2.loss_bbox: 0.2272, d3.loss_cls: 0.0807, d3.loss_bbox: 0.2175, d4.loss_cls: 0.0733, d4.loss_bbox: 0.2100, loss: 2.0517, grad_norm: 34.5657
2025-06-18 20:38:40,618 - mmdet - INFO - Epoch [3][6750/7033]	lr: 1.501e-04, eta: 8:39:58, time: 1.452, data_time: 0.028, memory: 18614, loss_cls: 0.0781, loss_bbox: 0.2079, d0.loss_cls: 0.1882, d0.loss_bbox: 0.3500, d1.loss_cls: 0.1204, d1.loss_bbox: 0.2578, d2.loss_cls: 0.1012, d2.loss_bbox: 0.2280, d3.loss_cls: 0.0873, d3.loss_bbox: 0.2192, d4.loss_cls: 0.0808, d4.loss_bbox: 0.2101, loss: 2.1291, grad_norm: 49.5010
2025-06-18 20:39:53,487 - mmdet - INFO - Epoch [3][6800/7033]	lr: 1.501e-04, eta: 8:38:45, time: 1.457, data_time: 0.028, memory: 18614, loss_cls: 0.0830, loss_bbox: 0.2098, d0.loss_cls: 0.1779, d0.loss_bbox: 0.3412, d1.loss_cls: 0.1248, d1.loss_bbox: 0.2535, d2.loss_cls: 0.1082, d2.loss_bbox: 0.2293, d3.loss_cls: 0.0893, d3.loss_bbox: 0.2206, d4.loss_cls: 0.0847, d4.loss_bbox: 0.2130, loss: 2.1352, grad_norm: 28.6698
2025-06-18 20:41:06,268 - mmdet - INFO - Epoch [3][6850/7033]	lr: 1.501e-04, eta: 8:37:32, time: 1.456, data_time: 0.026, memory: 18614, loss_cls: 0.0865, loss_bbox: 0.2190, d0.loss_cls: 0.1844, d0.loss_bbox: 0.3554, d1.loss_cls: 0.1251, d1.loss_bbox: 0.2634, d2.loss_cls: 0.1103, d2.loss_bbox: 0.2408, d3.loss_cls: 0.0940, d3.loss_bbox: 0.2332, d4.loss_cls: 0.0870, d4.loss_bbox: 0.2247, loss: 2.2239, grad_norm: 31.6203
2025-06-18 20:42:21,039 - mmdet - INFO - Epoch [3][6900/7033]	lr: 1.501e-04, eta: 8:36:21, time: 1.495, data_time: 0.028, memory: 18614, loss_cls: 0.0818, loss_bbox: 0.2170, d0.loss_cls: 0.1871, d0.loss_bbox: 0.3447, d1.loss_cls: 0.1210, d1.loss_bbox: 0.2598, d2.loss_cls: 0.1010, d2.loss_bbox: 0.2378, d3.loss_cls: 0.0892, d3.loss_bbox: 0.2282, d4.loss_cls: 0.0820, d4.loss_bbox: 0.2202, loss: 2.1697, grad_norm: 22.9959
2025-06-18 20:43:33,708 - mmdet - INFO - Epoch [3][6950/7033]	lr: 1.501e-04, eta: 8:35:08, time: 1.453, data_time: 0.025, memory: 18614, loss_cls: 0.0759, loss_bbox: 0.2100, d0.loss_cls: 0.1799, d0.loss_bbox: 0.3424, d1.loss_cls: 0.1137, d1.loss_bbox: 0.2535, d2.loss_cls: 0.0970, d2.loss_bbox: 0.2297, d3.loss_cls: 0.0854, d3.loss_bbox: 0.2228, d4.loss_cls: 0.0785, d4.loss_bbox: 0.2139, loss: 2.1028, grad_norm: 71.7429
2025-06-18 20:44:46,545 - mmdet - INFO - Epoch [3][7000/7033]	lr: 1.501e-04, eta: 8:33:55, time: 1.457, data_time: 0.028, memory: 18614, loss_cls: 0.0705, loss_bbox: 0.2069, d0.loss_cls: 0.1789, d0.loss_bbox: 0.3364, d1.loss_cls: 0.1136, d1.loss_bbox: 0.2485, d2.loss_cls: 0.0985, d2.loss_bbox: 0.2238, d3.loss_cls: 0.0835, d3.loss_bbox: 0.2160, d4.loss_cls: 0.0752, d4.loss_bbox: 0.2080, loss: 2.0598, grad_norm: 38.4289
2025-06-18 20:45:35,022 - mmdet - INFO - Saving checkpoint at 3 epochs
2025-06-18 21:07:32,652 - mmdet - INFO - Exp name: lidar_0075v_cam_res_2x2_hednetmiddleencoder_hednetbackbone4_dss0511_dp03_hugeep2_num2_morton_conv_xy_rope_bs2.py
2025-06-18 21:07:32,652 - mmdet - INFO - Epoch(val) [3][3010]	pts_bbox_NuScenes/car_AP_dist_0.5: 0.7971, pts_bbox_NuScenes/car_AP_dist_1.0: 0.8843, pts_bbox_NuScenes/car_AP_dist_2.0: 0.9104, pts_bbox_NuScenes/car_AP_dist_4.0: 0.9240, pts_bbox_NuScenes/car_trans_err: 0.1767, pts_bbox_NuScenes/car_scale_err: 0.1621, pts_bbox_NuScenes/car_orient_err: 0.0466, pts_bbox_NuScenes/car_vel_err: 0.2733, pts_bbox_NuScenes/car_attr_err: 0.1805, pts_bbox_NuScenes/mATE: 0.2912, pts_bbox_NuScenes/mASE: 0.2690, pts_bbox_NuScenes/mAOE: 0.2541, pts_bbox_NuScenes/mAVE: 0.2627, pts_bbox_NuScenes/mAAE: 0.1922, pts_bbox_NuScenes/truck_AP_dist_0.5: 0.4383, pts_bbox_NuScenes/truck_AP_dist_1.0: 0.6223, pts_bbox_NuScenes/truck_AP_dist_2.0: 0.7281, pts_bbox_NuScenes/truck_AP_dist_4.0: 0.7638, pts_bbox_NuScenes/truck_trans_err: 0.3333, pts_bbox_NuScenes/truck_scale_err: 0.2019, pts_bbox_NuScenes/truck_orient_err: 0.0587, pts_bbox_NuScenes/truck_vel_err: 0.2414, pts_bbox_NuScenes/truck_attr_err: 0.2087, pts_bbox_NuScenes/construction_vehicle_AP_dist_0.5: 0.0654, pts_bbox_NuScenes/construction_vehicle_AP_dist_1.0: 0.2191, pts_bbox_NuScenes/construction_vehicle_AP_dist_2.0: 0.4070, pts_bbox_NuScenes/construction_vehicle_AP_dist_4.0: 0.4772, pts_bbox_NuScenes/construction_vehicle_trans_err: 0.6421, pts_bbox_NuScenes/construction_vehicle_scale_err: 0.4265, pts_bbox_NuScenes/construction_vehicle_orient_err: 0.7745, pts_bbox_NuScenes/construction_vehicle_vel_err: 0.1182, pts_bbox_NuScenes/construction_vehicle_attr_err: 0.2973, pts_bbox_NuScenes/bus_AP_dist_0.5: 0.5026, pts_bbox_NuScenes/bus_AP_dist_1.0: 0.7487, pts_bbox_NuScenes/bus_AP_dist_2.0: 0.8982, pts_bbox_NuScenes/bus_AP_dist_4.0: 0.9225, pts_bbox_NuScenes/bus_trans_err: 0.3538, pts_bbox_NuScenes/bus_scale_err: 0.2218, pts_bbox_NuScenes/bus_orient_err: 0.0456, pts_bbox_NuScenes/bus_vel_err: 0.4818, pts_bbox_NuScenes/bus_attr_err: 0.2896, pts_bbox_NuScenes/trailer_AP_dist_0.5: 0.1785, pts_bbox_NuScenes/trailer_AP_dist_1.0: 0.4379, pts_bbox_NuScenes/trailer_AP_dist_2.0: 0.6007, pts_bbox_NuScenes/trailer_AP_dist_4.0: 0.6810, pts_bbox_NuScenes/trailer_trans_err: 0.4828, pts_bbox_NuScenes/trailer_scale_err: 0.2345, pts_bbox_NuScenes/trailer_orient_err: 0.4862, pts_bbox_NuScenes/trailer_vel_err: 0.2222, pts_bbox_NuScenes/trailer_attr_err: 0.1773, pts_bbox_NuScenes/barrier_AP_dist_0.5: 0.5892, pts_bbox_NuScenes/barrier_AP_dist_1.0: 0.6891, pts_bbox_NuScenes/barrier_AP_dist_2.0: 0.7422, pts_bbox_NuScenes/barrier_AP_dist_4.0: 0.7601, pts_bbox_NuScenes/barrier_trans_err: 0.2323, pts_bbox_NuScenes/barrier_scale_err: 0.2918, pts_bbox_NuScenes/barrier_orient_err: 0.0443, pts_bbox_NuScenes/barrier_vel_err: nan, pts_bbox_NuScenes/barrier_attr_err: nan, pts_bbox_NuScenes/motorcycle_AP_dist_0.5: 0.6640, pts_bbox_NuScenes/motorcycle_AP_dist_1.0: 0.7928, pts_bbox_NuScenes/motorcycle_AP_dist_2.0: 0.8149, pts_bbox_NuScenes/motorcycle_AP_dist_4.0: 0.8187, pts_bbox_NuScenes/motorcycle_trans_err: 0.2053, pts_bbox_NuScenes/motorcycle_scale_err: 0.2492, pts_bbox_NuScenes/motorcycle_orient_err: 0.2029, pts_bbox_NuScenes/motorcycle_vel_err: 0.3569, pts_bbox_NuScenes/motorcycle_attr_err: 0.2665, pts_bbox_NuScenes/bicycle_AP_dist_0.5: 0.5523, pts_bbox_NuScenes/bicycle_AP_dist_1.0: 0.6045, pts_bbox_NuScenes/bicycle_AP_dist_2.0: 0.6134, pts_bbox_NuScenes/bicycle_AP_dist_4.0: 0.6234, pts_bbox_NuScenes/bicycle_trans_err: 0.1800, pts_bbox_NuScenes/bicycle_scale_err: 0.2747, pts_bbox_NuScenes/bicycle_orient_err: 0.3141, pts_bbox_NuScenes/bicycle_vel_err: 0.1984, pts_bbox_NuScenes/bicycle_attr_err: 0.0096, pts_bbox_NuScenes/pedestrian_AP_dist_0.5: 0.8081, pts_bbox_NuScenes/pedestrian_AP_dist_1.0: 0.8521, pts_bbox_NuScenes/pedestrian_AP_dist_2.0: 0.8768, pts_bbox_NuScenes/pedestrian_AP_dist_4.0: 0.8899, pts_bbox_NuScenes/pedestrian_trans_err: 0.1529, pts_bbox_NuScenes/pedestrian_scale_err: 0.2963, pts_bbox_NuScenes/pedestrian_orient_err: 0.3140, pts_bbox_NuScenes/pedestrian_vel_err: 0.2094, pts_bbox_NuScenes/pedestrian_attr_err: 0.1078, pts_bbox_NuScenes/traffic_cone_AP_dist_0.5: 0.7324, pts_bbox_NuScenes/traffic_cone_AP_dist_1.0: 0.7653, pts_bbox_NuScenes/traffic_cone_AP_dist_2.0: 0.7926, pts_bbox_NuScenes/traffic_cone_AP_dist_4.0: 0.8159, pts_bbox_NuScenes/traffic_cone_trans_err: 0.1529, pts_bbox_NuScenes/traffic_cone_scale_err: 0.3314, pts_bbox_NuScenes/traffic_cone_orient_err: nan, pts_bbox_NuScenes/traffic_cone_vel_err: nan, pts_bbox_NuScenes/traffic_cone_attr_err: nan, pts_bbox_NuScenes/NDS: 0.7106, pts_bbox_NuScenes/mAP: 0.6751
2025-06-18 21:08:54,708 - mmdet - INFO - Epoch [4][50/7033]	lr: 1.001e-04, eta: 8:31:11, time: 1.555, data_time: 0.127, memory: 18614, loss_cls: 0.0786, loss_bbox: 0.2045, d0.loss_cls: 0.1741, d0.loss_bbox: 0.3442, d1.loss_cls: 0.1129, d1.loss_bbox: 0.2522, d2.loss_cls: 0.0982, d2.loss_bbox: 0.2256, d3.loss_cls: 0.0846, d3.loss_bbox: 0.2190, d4.loss_cls: 0.0801, d4.loss_bbox: 0.2090, loss: 2.0832, grad_norm: 45.9937
2025-06-18 21:10:07,364 - mmdet - INFO - Epoch [4][100/7033]	lr: 1.001e-04, eta: 8:29:57, time: 1.453, data_time: 0.027, memory: 18614, loss_cls: 0.0712, loss_bbox: 0.1998, d0.loss_cls: 0.1744, d0.loss_bbox: 0.3246, d1.loss_cls: 0.1114, d1.loss_bbox: 0.2422, d2.loss_cls: 0.0892, d2.loss_bbox: 0.2177, d3.loss_cls: 0.0762, d3.loss_bbox: 0.2103, d4.loss_cls: 0.0720, d4.loss_bbox: 0.2017, loss: 1.9907, grad_norm: 25.8332
2025-06-18 21:11:20,011 - mmdet - INFO - Epoch [4][150/7033]	lr: 1.001e-04, eta: 8:28:44, time: 1.453, data_time: 0.027, memory: 18614, loss_cls: 0.0646, loss_bbox: 0.1993, d0.loss_cls: 0.1737, d0.loss_bbox: 0.3285, d1.loss_cls: 0.1068, d1.loss_bbox: 0.2389, d2.loss_cls: 0.0914, d2.loss_bbox: 0.2191, d3.loss_cls: 0.0726, d3.loss_bbox: 0.2118, d4.loss_cls: 0.0668, d4.loss_bbox: 0.2015, loss: 1.9750, grad_norm: 24.1661
2025-06-18 21:12:32,803 - mmdet - INFO - Epoch [4][200/7033]	lr: 1.001e-04, eta: 8:27:31, time: 1.456, data_time: 0.028, memory: 18614, loss_cls: 0.0704, loss_bbox: 0.2039, d0.loss_cls: 0.1776, d0.loss_bbox: 0.3322, d1.loss_cls: 0.1096, d1.loss_bbox: 0.2472, d2.loss_cls: 0.0880, d2.loss_bbox: 0.2269, d3.loss_cls: 0.0768, d3.loss_bbox: 0.2194, d4.loss_cls: 0.0707, d4.loss_bbox: 0.2095, loss: 2.0325, grad_norm: 56.4993
2025-06-18 21:13:45,719 - mmdet - INFO - Epoch [4][250/7033]	lr: 1.001e-04, eta: 8:26:19, time: 1.458, data_time: 0.029, memory: 18614, loss_cls: 0.0704, loss_bbox: 0.1953, d0.loss_cls: 0.1745, d0.loss_bbox: 0.3258, d1.loss_cls: 0.1108, d1.loss_bbox: 0.2364, d2.loss_cls: 0.0879, d2.loss_bbox: 0.2169, d3.loss_cls: 0.0774, d3.loss_bbox: 0.2080, d4.loss_cls: 0.0723, d4.loss_bbox: 0.1987, loss: 1.9744, grad_norm: 25.3691
2025-06-18 21:14:58,639 - mmdet - INFO - Epoch [4][300/7033]	lr: 1.001e-04, eta: 8:25:06, time: 1.458, data_time: 0.028, memory: 18614, loss_cls: 0.0711, loss_bbox: 0.1972, d0.loss_cls: 0.1730, d0.loss_bbox: 0.3368, d1.loss_cls: 0.1110, d1.loss_bbox: 0.2455, d2.loss_cls: 0.0904, d2.loss_bbox: 0.2188, d3.loss_cls: 0.0792, d3.loss_bbox: 0.2100, d4.loss_cls: 0.0721, d4.loss_bbox: 0.2016, loss: 2.0067, grad_norm: 163.3129
2025-06-18 21:16:11,415 - mmdet - INFO - Epoch [4][350/7033]	lr: 1.001e-04, eta: 8:23:53, time: 1.456, data_time: 0.028, memory: 18614, loss_cls: 0.0747, loss_bbox: 0.2050, d0.loss_cls: 0.1766, d0.loss_bbox: 0.3282, d1.loss_cls: 0.1127, d1.loss_bbox: 0.2479, d2.loss_cls: 0.0956, d2.loss_bbox: 0.2275, d3.loss_cls: 0.0819, d3.loss_bbox: 0.2183, d4.loss_cls: 0.0763, d4.loss_bbox: 0.2093, loss: 2.0538, grad_norm: 31.7844
2025-06-18 21:17:26,205 - mmdet - INFO - Epoch [4][400/7033]	lr: 1.001e-04, eta: 8:22:42, time: 1.496, data_time: 0.027, memory: 18614, loss_cls: 0.0763, loss_bbox: 0.2003, d0.loss_cls: 0.1813, d0.loss_bbox: 0.3448, d1.loss_cls: 0.1194, d1.loss_bbox: 0.2482, d2.loss_cls: 0.0980, d2.loss_bbox: 0.2219, d3.loss_cls: 0.0835, d3.loss_bbox: 0.2129, d4.loss_cls: 0.0771, d4.loss_bbox: 0.2049, loss: 2.0686, grad_norm: 106.7382
2025-06-18 21:18:39,306 - mmdet - INFO - Epoch [4][450/7033]	lr: 1.001e-04, eta: 8:21:29, time: 1.462, data_time: 0.028, memory: 18614, loss_cls: 0.0671, loss_bbox: 0.2005, d0.loss_cls: 0.1758, d0.loss_bbox: 0.3277, d1.loss_cls: 0.1061, d1.loss_bbox: 0.2448, d2.loss_cls: 0.0853, d2.loss_bbox: 0.2192, d3.loss_cls: 0.0739, d3.loss_bbox: 0.2122, d4.loss_cls: 0.0688, d4.loss_bbox: 0.2035, loss: 1.9850, grad_norm: 31.5007
2025-06-18 21:19:52,312 - mmdet - INFO - Epoch [4][500/7033]	lr: 1.001e-04, eta: 8:20:17, time: 1.460, data_time: 0.025, memory: 18614, loss_cls: 0.0766, loss_bbox: 0.2027, d0.loss_cls: 0.1823, d0.loss_bbox: 0.3386, d1.loss_cls: 0.1160, d1.loss_bbox: 0.2454, d2.loss_cls: 0.0965, d2.loss_bbox: 0.2247, d3.loss_cls: 0.0826, d3.loss_bbox: 0.2157, d4.loss_cls: 0.0782, d4.loss_bbox: 0.2053, loss: 2.0646, grad_norm: 181.4395
2025-06-18 21:21:04,884 - mmdet - INFO - Epoch [4][550/7033]	lr: 1.001e-04, eta: 8:19:03, time: 1.451, data_time: 0.027, memory: 18614, loss_cls: 0.0727, loss_bbox: 0.2057, d0.loss_cls: 0.1765, d0.loss_bbox: 0.3417, d1.loss_cls: 0.1123, d1.loss_bbox: 0.2511, d2.loss_cls: 0.0923, d2.loss_bbox: 0.2268, d3.loss_cls: 0.0795, d3.loss_bbox: 0.2190, d4.loss_cls: 0.0746, d4.loss_bbox: 0.2086, loss: 2.0608, grad_norm: 20.5587
2025-06-18 21:22:17,653 - mmdet - INFO - Epoch [4][600/7033]	lr: 1.001e-04, eta: 8:17:51, time: 1.455, data_time: 0.028, memory: 18614, loss_cls: 0.0752, loss_bbox: 0.1941, d0.loss_cls: 0.1798, d0.loss_bbox: 0.3267, d1.loss_cls: 0.1132, d1.loss_bbox: 0.2352, d2.loss_cls: 0.0925, d2.loss_bbox: 0.2129, d3.loss_cls: 0.0810, d3.loss_bbox: 0.2032, d4.loss_cls: 0.0760, d4.loss_bbox: 0.1979, loss: 1.9878, grad_norm: 18.3206
2025-06-18 21:23:30,603 - mmdet - INFO - Epoch [4][650/7033]	lr: 1.001e-04, eta: 8:16:38, time: 1.459, data_time: 0.027, memory: 18614, loss_cls: 0.0766, loss_bbox: 0.2052, d0.loss_cls: 0.1800, d0.loss_bbox: 0.3449, d1.loss_cls: 0.1115, d1.loss_bbox: 0.2514, d2.loss_cls: 0.0958, d2.loss_bbox: 0.2267, d3.loss_cls: 0.0820, d3.loss_bbox: 0.2185, d4.loss_cls: 0.0783, d4.loss_bbox: 0.2081, loss: 2.0790, grad_norm: 25.8961
2025-06-18 21:24:43,413 - mmdet - INFO - Epoch [4][700/7033]	lr: 1.001e-04, eta: 8:15:25, time: 1.456, data_time: 0.024, memory: 18614, loss_cls: 0.0754, loss_bbox: 0.2011, d0.loss_cls: 0.1845, d0.loss_bbox: 0.3492, d1.loss_cls: 0.1180, d1.loss_bbox: 0.2524, d2.loss_cls: 0.0966, d2.loss_bbox: 0.2229, d3.loss_cls: 0.0827, d3.loss_bbox: 0.2154, d4.loss_cls: 0.0778, d4.loss_bbox: 0.2065, loss: 2.0827, grad_norm: 26.2419
2025-06-18 21:25:56,134 - mmdet - INFO - Epoch [4][750/7033]	lr: 1.001e-04, eta: 8:14:12, time: 1.454, data_time: 0.026, memory: 18614, loss_cls: 0.0751, loss_bbox: 0.1963, d0.loss_cls: 0.1766, d0.loss_bbox: 0.3457, d1.loss_cls: 0.1208, d1.loss_bbox: 0.2433, d2.loss_cls: 0.0982, d2.loss_bbox: 0.2203, d3.loss_cls: 0.0833, d3.loss_bbox: 0.2113, d4.loss_cls: 0.0788, d4.loss_bbox: 0.1998, loss: 2.0496, grad_norm: 31.8782
2025-06-18 21:27:09,064 - mmdet - INFO - Epoch [4][800/7033]	lr: 1.001e-04, eta: 8:12:59, time: 1.459, data_time: 0.027, memory: 18614, loss_cls: 0.0765, loss_bbox: 0.2033, d0.loss_cls: 0.1846, d0.loss_bbox: 0.3589, d1.loss_cls: 0.1198, d1.loss_bbox: 0.2523, d2.loss_cls: 0.0981, d2.loss_bbox: 0.2266, d3.loss_cls: 0.0834, d3.loss_bbox: 0.2178, d4.loss_cls: 0.0800, d4.loss_bbox: 0.2056, loss: 2.1070, grad_norm: 25.4675
2025-06-18 21:28:23,103 - mmdet - INFO - Epoch [4][850/7033]	lr: 1.001e-04, eta: 8:11:47, time: 1.481, data_time: 0.049, memory: 18614, loss_cls: 0.0733, loss_bbox: 0.2079, d0.loss_cls: 0.1860, d0.loss_bbox: 0.3538, d1.loss_cls: 0.1180, d1.loss_bbox: 0.2577, d2.loss_cls: 0.0950, d2.loss_bbox: 0.2314, d3.loss_cls: 0.0810, d3.loss_bbox: 0.2236, d4.loss_cls: 0.0755, d4.loss_bbox: 0.2124, loss: 2.1156, grad_norm: 28.3178
2025-06-18 21:29:36,073 - mmdet - INFO - Epoch [4][900/7033]	lr: 1.001e-04, eta: 8:10:35, time: 1.459, data_time: 0.028, memory: 18614, loss_cls: 0.0701, loss_bbox: 0.2022, d0.loss_cls: 0.1829, d0.loss_bbox: 0.3457, d1.loss_cls: 0.1112, d1.loss_bbox: 0.2516, d2.loss_cls: 0.0915, d2.loss_bbox: 0.2231, d3.loss_cls: 0.0782, d3.loss_bbox: 0.2120, d4.loss_cls: 0.0737, d4.loss_bbox: 0.2040, loss: 2.0462, grad_norm: 794.2006
2025-06-18 21:30:48,866 - mmdet - INFO - Epoch [4][950/7033]	lr: 1.001e-04, eta: 8:09:22, time: 1.456, data_time: 0.029, memory: 18614, loss_cls: 0.0770, loss_bbox: 0.2063, d0.loss_cls: 0.1849, d0.loss_bbox: 0.3521, d1.loss_cls: 0.1169, d1.loss_bbox: 0.2522, d2.loss_cls: 0.0954, d2.loss_bbox: 0.2290, d3.loss_cls: 0.0818, d3.loss_bbox: 0.2193, d4.loss_cls: 0.0781, d4.loss_bbox: 0.2093, loss: 2.1022, grad_norm: 48.9848
2025-06-18 21:32:01,396 - mmdet - INFO - Epoch [4][1000/7033]	lr: 1.001e-04, eta: 8:08:08, time: 1.451, data_time: 0.026, memory: 18614, loss_cls: 0.0739, loss_bbox: 0.2025, d0.loss_cls: 0.1778, d0.loss_bbox: 0.3309, d1.loss_cls: 0.1113, d1.loss_bbox: 0.2432, d2.loss_cls: 0.0930, d2.loss_bbox: 0.2218, d3.loss_cls: 0.0797, d3.loss_bbox: 0.2141, d4.loss_cls: 0.0755, d4.loss_bbox: 0.2049, loss: 2.0286, grad_norm: 53.1181
2025-06-18 21:33:14,075 - mmdet - INFO - Epoch [4][1050/7033]	lr: 1.001e-04, eta: 8:06:55, time: 1.454, data_time: 0.027, memory: 18614, loss_cls: 0.0591, loss_bbox: 0.1935, d0.loss_cls: 0.1677, d0.loss_bbox: 0.3311, d1.loss_cls: 0.1041, d1.loss_bbox: 0.2391, d2.loss_cls: 0.0819, d2.loss_bbox: 0.2141, d3.loss_cls: 0.0662, d3.loss_bbox: 0.2060, d4.loss_cls: 0.0613, d4.loss_bbox: 0.1958, loss: 1.9200, grad_norm: 27.9237
2025-06-18 21:34:27,065 - mmdet - INFO - Epoch [4][1100/7033]	lr: 1.001e-04, eta: 8:05:43, time: 1.460, data_time: 0.027, memory: 18614, loss_cls: 0.0695, loss_bbox: 0.2082, d0.loss_cls: 0.1781, d0.loss_bbox: 0.3448, d1.loss_cls: 0.1106, d1.loss_bbox: 0.2516, d2.loss_cls: 0.0919, d2.loss_bbox: 0.2278, d3.loss_cls: 0.0784, d3.loss_bbox: 0.2203, d4.loss_cls: 0.0728, d4.loss_bbox: 0.2108, loss: 2.0648, grad_norm: 71.0046
2025-06-18 21:35:39,923 - mmdet - INFO - Epoch [4][1150/7033]	lr: 1.001e-04, eta: 8:04:30, time: 1.457, data_time: 0.028, memory: 18614, loss_cls: 0.0724, loss_bbox: 0.2024, d0.loss_cls: 0.1747, d0.loss_bbox: 0.3437, d1.loss_cls: 0.1160, d1.loss_bbox: 0.2466, d2.loss_cls: 0.0934, d2.loss_bbox: 0.2231, d3.loss_cls: 0.0784, d3.loss_bbox: 0.2142, d4.loss_cls: 0.0745, d4.loss_bbox: 0.2043, loss: 2.0436, grad_norm: 24.1612
2025-06-18 21:36:52,774 - mmdet - INFO - Epoch [4][1200/7033]	lr: 1.001e-04, eta: 8:03:17, time: 1.457, data_time: 0.027, memory: 18614, loss_cls: 0.0700, loss_bbox: 0.1955, d0.loss_cls: 0.1724, d0.loss_bbox: 0.3470, d1.loss_cls: 0.1113, d1.loss_bbox: 0.2445, d2.loss_cls: 0.0906, d2.loss_bbox: 0.2169, d3.loss_cls: 0.0761, d3.loss_bbox: 0.2090, d4.loss_cls: 0.0726, d4.loss_bbox: 0.1981, loss: 2.0040, grad_norm: 81.0147
2025-06-18 21:38:05,697 - mmdet - INFO - Epoch [4][1250/7033]	lr: 1.001e-04, eta: 8:02:04, time: 1.458, data_time: 0.031, memory: 18614, loss_cls: 0.0782, loss_bbox: 0.2077, d0.loss_cls: 0.1825, d0.loss_bbox: 0.3501, d1.loss_cls: 0.1154, d1.loss_bbox: 0.2545, d2.loss_cls: 0.0978, d2.loss_bbox: 0.2259, d3.loss_cls: 0.0855, d3.loss_bbox: 0.2177, d4.loss_cls: 0.0801, d4.loss_bbox: 0.2116, loss: 2.1070, grad_norm: 20.5947
2025-06-18 21:39:18,718 - mmdet - INFO - Epoch [4][1300/7033]	lr: 1.001e-04, eta: 8:00:51, time: 1.460, data_time: 0.031, memory: 18614, loss_cls: 0.0756, loss_bbox: 0.2037, d0.loss_cls: 0.1755, d0.loss_bbox: 0.3428, d1.loss_cls: 0.1106, d1.loss_bbox: 0.2470, d2.loss_cls: 0.0925, d2.loss_bbox: 0.2226, d3.loss_cls: 0.0827, d3.loss_bbox: 0.2169, d4.loss_cls: 0.0769, d4.loss_bbox: 0.2067, loss: 2.0536, grad_norm: 20.9400
2025-06-18 21:40:31,828 - mmdet - INFO - Epoch [4][1350/7033]	lr: 1.001e-04, eta: 7:59:39, time: 1.462, data_time: 0.034, memory: 18614, loss_cls: 0.0704, loss_bbox: 0.1982, d0.loss_cls: 0.1747, d0.loss_bbox: 0.3379, d1.loss_cls: 0.1108, d1.loss_bbox: 0.2412, d2.loss_cls: 0.0912, d2.loss_bbox: 0.2197, d3.loss_cls: 0.0787, d3.loss_bbox: 0.2102, d4.loss_cls: 0.0717, d4.loss_bbox: 0.2006, loss: 2.0054, grad_norm: 53.2773
2025-06-18 21:41:44,972 - mmdet - INFO - Epoch [4][1400/7033]	lr: 1.001e-04, eta: 7:58:26, time: 1.463, data_time: 0.035, memory: 18614, loss_cls: 0.0672, loss_bbox: 0.2006, d0.loss_cls: 0.1762, d0.loss_bbox: 0.3329, d1.loss_cls: 0.1057, d1.loss_bbox: 0.2414, d2.loss_cls: 0.0881, d2.loss_bbox: 0.2183, d3.loss_cls: 0.0744, d3.loss_bbox: 0.2116, d4.loss_cls: 0.0687, d4.loss_bbox: 0.2040, loss: 1.9891, grad_norm: 35.7563
2025-06-18 21:42:57,699 - mmdet - INFO - Epoch [4][1450/7033]	lr: 1.001e-04, eta: 7:57:13, time: 1.455, data_time: 0.027, memory: 18614, loss_cls: 0.0730, loss_bbox: 0.1961, d0.loss_cls: 0.1826, d0.loss_bbox: 0.3418, d1.loss_cls: 0.1099, d1.loss_bbox: 0.2431, d2.loss_cls: 0.0921, d2.loss_bbox: 0.2195, d3.loss_cls: 0.0783, d3.loss_bbox: 0.2105, d4.loss_cls: 0.0737, d4.loss_bbox: 0.1998, loss: 2.0204, grad_norm: 23.8197
2025-06-18 21:44:12,076 - mmdet - INFO - Epoch [4][1500/7033]	lr: 1.001e-04, eta: 7:56:02, time: 1.488, data_time: 0.027, memory: 18614, loss_cls: 0.0705, loss_bbox: 0.2016, d0.loss_cls: 0.1703, d0.loss_bbox: 0.3416, d1.loss_cls: 0.1096, d1.loss_bbox: 0.2471, d2.loss_cls: 0.0906, d2.loss_bbox: 0.2220, d3.loss_cls: 0.0751, d3.loss_bbox: 0.2162, d4.loss_cls: 0.0727, d4.loss_bbox: 0.2042, loss: 2.0214, grad_norm: 52.7771
2025-06-18 21:45:25,281 - mmdet - INFO - Epoch [4][1550/7033]	lr: 1.001e-04, eta: 7:54:49, time: 1.464, data_time: 0.032, memory: 18614, loss_cls: 0.0693, loss_bbox: 0.2010, d0.loss_cls: 0.1698, d0.loss_bbox: 0.3257, d1.loss_cls: 0.1074, d1.loss_bbox: 0.2412, d2.loss_cls: 0.0893, d2.loss_bbox: 0.2191, d3.loss_cls: 0.0761, d3.loss_bbox: 0.2109, d4.loss_cls: 0.0709, d4.loss_bbox: 0.2037, loss: 1.9845, grad_norm: 27.4022
2025-06-18 21:46:38,030 - mmdet - INFO - Epoch [4][1600/7033]	lr: 1.001e-04, eta: 7:53:36, time: 1.455, data_time: 0.027, memory: 18614, loss_cls: 0.0694, loss_bbox: 0.1986, d0.loss_cls: 0.1720, d0.loss_bbox: 0.3354, d1.loss_cls: 0.1086, d1.loss_bbox: 0.2439, d2.loss_cls: 0.0888, d2.loss_bbox: 0.2204, d3.loss_cls: 0.0764, d3.loss_bbox: 0.2112, d4.loss_cls: 0.0715, d4.loss_bbox: 0.2022, loss: 1.9985, grad_norm: 25.0860
2025-06-18 21:47:50,801 - mmdet - INFO - Epoch [4][1650/7033]	lr: 1.001e-04, eta: 7:52:23, time: 1.455, data_time: 0.027, memory: 18614, loss_cls: 0.0713, loss_bbox: 0.1981, d0.loss_cls: 0.1706, d0.loss_bbox: 0.3388, d1.loss_cls: 0.1077, d1.loss_bbox: 0.2460, d2.loss_cls: 0.0911, d2.loss_bbox: 0.2201, d3.loss_cls: 0.0775, d3.loss_bbox: 0.2113, d4.loss_cls: 0.0729, d4.loss_bbox: 0.2019, loss: 2.0073, grad_norm: 71.8786
2025-06-18 21:49:03,372 - mmdet - INFO - Epoch [4][1700/7033]	lr: 1.001e-04, eta: 7:51:10, time: 1.451, data_time: 0.026, memory: 18614, loss_cls: 0.0695, loss_bbox: 0.2046, d0.loss_cls: 0.1785, d0.loss_bbox: 0.3350, d1.loss_cls: 0.1122, d1.loss_bbox: 0.2505, d2.loss_cls: 0.0909, d2.loss_bbox: 0.2258, d3.loss_cls: 0.0776, d3.loss_bbox: 0.2160, d4.loss_cls: 0.0724, d4.loss_bbox: 0.2068, loss: 2.0397, grad_norm: 35.0813
2025-06-18 21:50:16,355 - mmdet - INFO - Epoch [4][1750/7033]	lr: 1.001e-04, eta: 7:49:57, time: 1.460, data_time: 0.030, memory: 18614, loss_cls: 0.0721, loss_bbox: 0.1978, d0.loss_cls: 0.1740, d0.loss_bbox: 0.3253, d1.loss_cls: 0.1082, d1.loss_bbox: 0.2417, d2.loss_cls: 0.0910, d2.loss_bbox: 0.2186, d3.loss_cls: 0.0788, d3.loss_bbox: 0.2094, d4.loss_cls: 0.0743, d4.loss_bbox: 0.2009, loss: 1.9920, grad_norm: 39.0336
2025-06-18 21:51:28,933 - mmdet - INFO - Epoch [4][1800/7033]	lr: 1.001e-04, eta: 7:48:44, time: 1.452, data_time: 0.028, memory: 18614, loss_cls: 0.0667, loss_bbox: 0.1953, d0.loss_cls: 0.1807, d0.loss_bbox: 0.3267, d1.loss_cls: 0.1062, d1.loss_bbox: 0.2385, d2.loss_cls: 0.0876, d2.loss_bbox: 0.2150, d3.loss_cls: 0.0722, d3.loss_bbox: 0.2057, d4.loss_cls: 0.0697, d4.loss_bbox: 0.1972, loss: 1.9614, grad_norm: 29.4776
2025-06-18 21:52:41,627 - mmdet - INFO - Epoch [4][1850/7033]	lr: 1.001e-04, eta: 7:47:31, time: 1.454, data_time: 0.028, memory: 18614, loss_cls: 0.0715, loss_bbox: 0.1960, d0.loss_cls: 0.1711, d0.loss_bbox: 0.3254, d1.loss_cls: 0.1126, d1.loss_bbox: 0.2402, d2.loss_cls: 0.0907, d2.loss_bbox: 0.2186, d3.loss_cls: 0.0769, d3.loss_bbox: 0.2114, d4.loss_cls: 0.0734, d4.loss_bbox: 0.1997, loss: 1.9876, grad_norm: 28.6184
2025-06-18 21:54:01,747 - mmdet - INFO - Epoch [4][1900/7033]	lr: 1.001e-04, eta: 7:46:24, time: 1.602, data_time: 0.035, memory: 18614, loss_cls: 0.0739, loss_bbox: 0.2046, d0.loss_cls: 0.1723, d0.loss_bbox: 0.3289, d1.loss_cls: 0.1088, d1.loss_bbox: 0.2430, d2.loss_cls: 0.0904, d2.loss_bbox: 0.2239, d3.loss_cls: 0.0799, d3.loss_bbox: 0.2157, d4.loss_cls: 0.0760, d4.loss_bbox: 0.2068, loss: 2.0243, grad_norm: 29.5178
2025-06-18 21:55:14,330 - mmdet - INFO - Epoch [4][1950/7033]	lr: 1.001e-04, eta: 7:45:11, time: 1.452, data_time: 0.028, memory: 18614, loss_cls: 0.0735, loss_bbox: 0.2018, d0.loss_cls: 0.1777, d0.loss_bbox: 0.3364, d1.loss_cls: 0.1123, d1.loss_bbox: 0.2433, d2.loss_cls: 0.0962, d2.loss_bbox: 0.2183, d3.loss_cls: 0.0815, d3.loss_bbox: 0.2122, d4.loss_cls: 0.0765, d4.loss_bbox: 0.2046, loss: 2.0342, grad_norm: 38.0441
2025-06-18 21:56:27,065 - mmdet - INFO - Epoch [4][2000/7033]	lr: 1.001e-04, eta: 7:43:58, time: 1.455, data_time: 0.026, memory: 18614, loss_cls: 0.0712, loss_bbox: 0.2018, d0.loss_cls: 0.1748, d0.loss_bbox: 0.3407, d1.loss_cls: 0.1102, d1.loss_bbox: 0.2492, d2.loss_cls: 0.0902, d2.loss_bbox: 0.2246, d3.loss_cls: 0.0764, d3.loss_bbox: 0.2180, d4.loss_cls: 0.0722, d4.loss_bbox: 0.2074, loss: 2.0366, grad_norm: 26.3395
2025-06-18 21:57:39,530 - mmdet - INFO - Epoch [4][2050/7033]	lr: 1.001e-04, eta: 7:42:45, time: 1.449, data_time: 0.027, memory: 18614, loss_cls: 0.0680, loss_bbox: 0.2003, d0.loss_cls: 0.1757, d0.loss_bbox: 0.3342, d1.loss_cls: 0.1074, d1.loss_bbox: 0.2428, d2.loss_cls: 0.0877, d2.loss_bbox: 0.2207, d3.loss_cls: 0.0727, d3.loss_bbox: 0.2125, d4.loss_cls: 0.0692, d4.loss_bbox: 0.2041, loss: 1.9953, grad_norm: 31.7311
2025-06-18 21:58:54,059 - mmdet - INFO - Epoch [4][2100/7033]	lr: 1.001e-04, eta: 7:41:33, time: 1.491, data_time: 0.028, memory: 18614, loss_cls: 0.0707, loss_bbox: 0.1936, d0.loss_cls: 0.1659, d0.loss_bbox: 0.3282, d1.loss_cls: 0.1061, d1.loss_bbox: 0.2394, d2.loss_cls: 0.0882, d2.loss_bbox: 0.2157, d3.loss_cls: 0.0775, d3.loss_bbox: 0.2063, d4.loss_cls: 0.0720, d4.loss_bbox: 0.1970, loss: 1.9605, grad_norm: 18.5544
2025-06-18 22:00:06,588 - mmdet - INFO - Epoch [4][2150/7033]	lr: 1.001e-04, eta: 7:40:20, time: 1.451, data_time: 0.026, memory: 18614, loss_cls: 0.0757, loss_bbox: 0.2002, d0.loss_cls: 0.1788, d0.loss_bbox: 0.3208, d1.loss_cls: 0.1136, d1.loss_bbox: 0.2413, d2.loss_cls: 0.0958, d2.loss_bbox: 0.2203, d3.loss_cls: 0.0817, d3.loss_bbox: 0.2132, d4.loss_cls: 0.0769, d4.loss_bbox: 0.2036, loss: 2.0219, grad_norm: 19.6153
2025-06-18 22:01:19,405 - mmdet - INFO - Epoch [4][2200/7033]	lr: 1.001e-04, eta: 7:39:07, time: 1.456, data_time: 0.027, memory: 18614, loss_cls: 0.0694, loss_bbox: 0.1988, d0.loss_cls: 0.1739, d0.loss_bbox: 0.3367, d1.loss_cls: 0.1081, d1.loss_bbox: 0.2454, d2.loss_cls: 0.0871, d2.loss_bbox: 0.2204, d3.loss_cls: 0.0769, d3.loss_bbox: 0.2110, d4.loss_cls: 0.0713, d4.loss_bbox: 0.2016, loss: 2.0006, grad_norm: 56.0795
2025-06-18 22:02:32,189 - mmdet - INFO - Epoch [4][2250/7033]	lr: 1.001e-04, eta: 7:37:54, time: 1.456, data_time: 0.028, memory: 18614, loss_cls: 0.0667, loss_bbox: 0.1912, d0.loss_cls: 0.1734, d0.loss_bbox: 0.3162, d1.loss_cls: 0.1004, d1.loss_bbox: 0.2332, d2.loss_cls: 0.0823, d2.loss_bbox: 0.2100, d3.loss_cls: 0.0708, d3.loss_bbox: 0.2023, d4.loss_cls: 0.0682, d4.loss_bbox: 0.1946, loss: 1.9092, grad_norm: 98.1779
2025-06-18 22:03:45,131 - mmdet - INFO - Epoch [4][2300/7033]	lr: 1.001e-04, eta: 7:36:42, time: 1.459, data_time: 0.030, memory: 18614, loss_cls: 0.0719, loss_bbox: 0.2063, d0.loss_cls: 0.1808, d0.loss_bbox: 0.3304, d1.loss_cls: 0.1125, d1.loss_bbox: 0.2465, d2.loss_cls: 0.0914, d2.loss_bbox: 0.2204, d3.loss_cls: 0.0789, d3.loss_bbox: 0.2147, d4.loss_cls: 0.0742, d4.loss_bbox: 0.2082, loss: 2.0363, grad_norm: 91.9407
2025-06-18 22:04:57,825 - mmdet - INFO - Epoch [4][2350/7033]	lr: 1.001e-04, eta: 7:35:28, time: 1.454, data_time: 0.028, memory: 18614, loss_cls: 0.0677, loss_bbox: 0.1989, d0.loss_cls: 0.1702, d0.loss_bbox: 0.3237, d1.loss_cls: 0.1047, d1.loss_bbox: 0.2370, d2.loss_cls: 0.0892, d2.loss_bbox: 0.2159, d3.loss_cls: 0.0739, d3.loss_bbox: 0.2061, d4.loss_cls: 0.0693, d4.loss_bbox: 0.1989, loss: 1.9554, grad_norm: 40.7724
2025-06-18 22:06:10,460 - mmdet - INFO - Epoch [4][2400/7033]	lr: 1.001e-04, eta: 7:34:15, time: 1.453, data_time: 0.025, memory: 18614, loss_cls: 0.0722, loss_bbox: 0.2063, d0.loss_cls: 0.1746, d0.loss_bbox: 0.3340, d1.loss_cls: 0.1110, d1.loss_bbox: 0.2476, d2.loss_cls: 0.0939, d2.loss_bbox: 0.2235, d3.loss_cls: 0.0788, d3.loss_bbox: 0.2163, d4.loss_cls: 0.0732, d4.loss_bbox: 0.2089, loss: 2.0403, grad_norm: 36.1706
2025-06-18 22:07:23,141 - mmdet - INFO - Epoch [4][2450/7033]	lr: 1.001e-04, eta: 7:33:02, time: 1.454, data_time: 0.026, memory: 18614, loss_cls: 0.0704, loss_bbox: 0.2057, d0.loss_cls: 0.1713, d0.loss_bbox: 0.3308, d1.loss_cls: 0.1093, d1.loss_bbox: 0.2442, d2.loss_cls: 0.0898, d2.loss_bbox: 0.2219, d3.loss_cls: 0.0766, d3.loss_bbox: 0.2151, d4.loss_cls: 0.0722, d4.loss_bbox: 0.2074, loss: 2.0145, grad_norm: 486.5486
2025-06-18 22:08:36,506 - mmdet - INFO - Epoch [4][2500/7033]	lr: 1.001e-04, eta: 7:31:50, time: 1.467, data_time: 0.036, memory: 18614, loss_cls: 0.0733, loss_bbox: 0.2075, d0.loss_cls: 0.1790, d0.loss_bbox: 0.3396, d1.loss_cls: 0.1084, d1.loss_bbox: 0.2483, d2.loss_cls: 0.0906, d2.loss_bbox: 0.2262, d3.loss_cls: 0.0766, d3.loss_bbox: 0.2194, d4.loss_cls: 0.0742, d4.loss_bbox: 0.2103, loss: 2.0535, grad_norm: 32.1771
2025-06-18 22:09:49,228 - mmdet - INFO - Epoch [4][2550/7033]	lr: 1.001e-04, eta: 7:30:37, time: 1.454, data_time: 0.029, memory: 18614, loss_cls: 0.0737, loss_bbox: 0.2035, d0.loss_cls: 0.1759, d0.loss_bbox: 0.3325, d1.loss_cls: 0.1101, d1.loss_bbox: 0.2512, d2.loss_cls: 0.0947, d2.loss_bbox: 0.2246, d3.loss_cls: 0.0800, d3.loss_bbox: 0.2184, d4.loss_cls: 0.0764, d4.loss_bbox: 0.2080, loss: 2.0490, grad_norm: 22.8837
2025-06-18 22:11:01,783 - mmdet - INFO - Epoch [4][2600/7033]	lr: 1.001e-04, eta: 7:29:24, time: 1.451, data_time: 0.028, memory: 18614, loss_cls: 0.0711, loss_bbox: 0.2039, d0.loss_cls: 0.1764, d0.loss_bbox: 0.3293, d1.loss_cls: 0.1117, d1.loss_bbox: 0.2463, d2.loss_cls: 0.0900, d2.loss_bbox: 0.2254, d3.loss_cls: 0.0769, d3.loss_bbox: 0.2188, d4.loss_cls: 0.0731, d4.loss_bbox: 0.2086, loss: 2.0315, grad_norm: 23.7473
2025-06-18 22:12:14,383 - mmdet - INFO - Epoch [4][2650/7033]	lr: 1.001e-04, eta: 7:28:11, time: 1.452, data_time: 0.025, memory: 18614, loss_cls: 0.0692, loss_bbox: 0.2006, d0.loss_cls: 0.1790, d0.loss_bbox: 0.3238, d1.loss_cls: 0.1072, d1.loss_bbox: 0.2412, d2.loss_cls: 0.0864, d2.loss_bbox: 0.2207, d3.loss_cls: 0.0734, d3.loss_bbox: 0.2126, d4.loss_cls: 0.0701, d4.loss_bbox: 0.2053, loss: 1.9896, grad_norm: 20.4978
2025-06-18 22:13:27,350 - mmdet - INFO - Epoch [4][2700/7033]	lr: 1.001e-04, eta: 7:26:58, time: 1.459, data_time: 0.029, memory: 18614, loss_cls: 0.0689, loss_bbox: 0.1999, d0.loss_cls: 0.1660, d0.loss_bbox: 0.3268, d1.loss_cls: 0.1043, d1.loss_bbox: 0.2420, d2.loss_cls: 0.0857, d2.loss_bbox: 0.2186, d3.loss_cls: 0.0749, d3.loss_bbox: 0.2108, d4.loss_cls: 0.0705, d4.loss_bbox: 0.2035, loss: 1.9719, grad_norm: 44.2865
2025-06-18 22:14:40,433 - mmdet - INFO - Epoch [4][2750/7033]	lr: 1.001e-04, eta: 7:25:45, time: 1.462, data_time: 0.033, memory: 18614, loss_cls: 0.0686, loss_bbox: 0.1986, d0.loss_cls: 0.1739, d0.loss_bbox: 0.3286, d1.loss_cls: 0.1068, d1.loss_bbox: 0.2414, d2.loss_cls: 0.0883, d2.loss_bbox: 0.2184, d3.loss_cls: 0.0754, d3.loss_bbox: 0.2113, d4.loss_cls: 0.0705, d4.loss_bbox: 0.2018, loss: 1.9835, grad_norm: 68.6609
2025-06-18 22:15:53,296 - mmdet - INFO - Epoch [4][2800/7033]	lr: 1.001e-04, eta: 7:24:32, time: 1.457, data_time: 0.029, memory: 18614, loss_cls: 0.0678, loss_bbox: 0.1961, d0.loss_cls: 0.1718, d0.loss_bbox: 0.3254, d1.loss_cls: 0.1078, d1.loss_bbox: 0.2390, d2.loss_cls: 0.0881, d2.loss_bbox: 0.2173, d3.loss_cls: 0.0748, d3.loss_bbox: 0.2090, d4.loss_cls: 0.0700, d4.loss_bbox: 0.2002, loss: 1.9671, grad_norm: 45.4669
2025-06-18 22:17:06,459 - mmdet - INFO - Epoch [4][2850/7033]	lr: 1.001e-04, eta: 7:23:20, time: 1.463, data_time: 0.028, memory: 18614, loss_cls: 0.0731, loss_bbox: 0.2022, d0.loss_cls: 0.1713, d0.loss_bbox: 0.3382, d1.loss_cls: 0.1048, d1.loss_bbox: 0.2506, d2.loss_cls: 0.0881, d2.loss_bbox: 0.2258, d3.loss_cls: 0.0769, d3.loss_bbox: 0.2170, d4.loss_cls: 0.0732, d4.loss_bbox: 0.2067, loss: 2.0279, grad_norm: 34.5721
2025-06-18 22:18:19,142 - mmdet - INFO - Epoch [4][2900/7033]	lr: 1.001e-04, eta: 7:22:06, time: 1.454, data_time: 0.025, memory: 18614, loss_cls: 0.0660, loss_bbox: 0.1977, d0.loss_cls: 0.1646, d0.loss_bbox: 0.3326, d1.loss_cls: 0.1034, d1.loss_bbox: 0.2419, d2.loss_cls: 0.0835, d2.loss_bbox: 0.2179, d3.loss_cls: 0.0712, d3.loss_bbox: 0.2100, d4.loss_cls: 0.0664, d4.loss_bbox: 0.2010, loss: 1.9563, grad_norm: 21.0184
2025-06-18 22:19:32,012 - mmdet - INFO - Epoch [4][2950/7033]	lr: 1.001e-04, eta: 7:20:54, time: 1.457, data_time: 0.029, memory: 18614, loss_cls: 0.0658, loss_bbox: 0.1968, d0.loss_cls: 0.1718, d0.loss_bbox: 0.3250, d1.loss_cls: 0.1014, d1.loss_bbox: 0.2387, d2.loss_cls: 0.0820, d2.loss_bbox: 0.2160, d3.loss_cls: 0.0720, d3.loss_bbox: 0.2088, d4.loss_cls: 0.0678, d4.loss_bbox: 0.2008, loss: 1.9471, grad_norm: 37.8142
2025-06-18 22:20:44,717 - mmdet - INFO - Epoch [4][3000/7033]	lr: 1.001e-04, eta: 7:19:41, time: 1.454, data_time: 0.028, memory: 18614, loss_cls: 0.0728, loss_bbox: 0.2025, d0.loss_cls: 0.1762, d0.loss_bbox: 0.3384, d1.loss_cls: 0.1109, d1.loss_bbox: 0.2480, d2.loss_cls: 0.0924, d2.loss_bbox: 0.2258, d3.loss_cls: 0.0788, d3.loss_bbox: 0.2180, d4.loss_cls: 0.0745, d4.loss_bbox: 0.2068, loss: 2.0451, grad_norm: 19.4350
2025-06-18 22:21:57,465 - mmdet - INFO - Epoch [4][3050/7033]	lr: 1.001e-04, eta: 7:18:28, time: 1.455, data_time: 0.028, memory: 18614, loss_cls: 0.0730, loss_bbox: 0.2043, d0.loss_cls: 0.1800, d0.loss_bbox: 0.3336, d1.loss_cls: 0.1165, d1.loss_bbox: 0.2473, d2.loss_cls: 0.0950, d2.loss_bbox: 0.2242, d3.loss_cls: 0.0824, d3.loss_bbox: 0.2166, d4.loss_cls: 0.0771, d4.loss_bbox: 0.2065, loss: 2.0566, grad_norm: 22.3604
2025-06-18 22:23:09,921 - mmdet - INFO - Epoch [4][3100/7033]	lr: 1.001e-04, eta: 7:17:14, time: 1.449, data_time: 0.026, memory: 18614, loss_cls: 0.0699, loss_bbox: 0.2011, d0.loss_cls: 0.1795, d0.loss_bbox: 0.3314, d1.loss_cls: 0.1082, d1.loss_bbox: 0.2421, d2.loss_cls: 0.0876, d2.loss_bbox: 0.2197, d3.loss_cls: 0.0747, d3.loss_bbox: 0.2114, d4.loss_cls: 0.0713, d4.loss_bbox: 0.2043, loss: 2.0013, grad_norm: 154.8124
2025-06-18 22:24:22,864 - mmdet - INFO - Epoch [4][3150/7033]	lr: 1.001e-04, eta: 7:16:02, time: 1.459, data_time: 0.029, memory: 18614, loss_cls: 0.0735, loss_bbox: 0.1972, d0.loss_cls: 0.1710, d0.loss_bbox: 0.3298, d1.loss_cls: 0.1109, d1.loss_bbox: 0.2395, d2.loss_cls: 0.0901, d2.loss_bbox: 0.2162, d3.loss_cls: 0.0777, d3.loss_bbox: 0.2091, d4.loss_cls: 0.0748, d4.loss_bbox: 0.2003, loss: 1.9900, grad_norm: 19.6198
2025-06-18 22:25:35,691 - mmdet - INFO - Epoch [4][3200/7033]	lr: 1.001e-04, eta: 7:14:49, time: 1.457, data_time: 0.029, memory: 18614, loss_cls: 0.0704, loss_bbox: 0.1969, d0.loss_cls: 0.1702, d0.loss_bbox: 0.3266, d1.loss_cls: 0.1021, d1.loss_bbox: 0.2395, d2.loss_cls: 0.0850, d2.loss_bbox: 0.2189, d3.loss_cls: 0.0748, d3.loss_bbox: 0.2117, d4.loss_cls: 0.0715, d4.loss_bbox: 0.2017, loss: 1.9694, grad_norm: 37.6467
2025-06-18 22:26:48,681 - mmdet - INFO - Epoch [4][3250/7033]	lr: 1.001e-04, eta: 7:13:36, time: 1.460, data_time: 0.028, memory: 18614, loss_cls: 0.0683, loss_bbox: 0.2030, d0.loss_cls: 0.1778, d0.loss_bbox: 0.3406, d1.loss_cls: 0.1054, d1.loss_bbox: 0.2485, d2.loss_cls: 0.0872, d2.loss_bbox: 0.2227, d3.loss_cls: 0.0727, d3.loss_bbox: 0.2165, d4.loss_cls: 0.0691, d4.loss_bbox: 0.2068, loss: 2.0187, grad_norm: 19.7099
2025-06-18 22:28:01,302 - mmdet - INFO - Epoch [4][3300/7033]	lr: 1.001e-04, eta: 7:12:23, time: 1.452, data_time: 0.028, memory: 18614, loss_cls: 0.0656, loss_bbox: 0.1928, d0.loss_cls: 0.1701, d0.loss_bbox: 0.3196, d1.loss_cls: 0.1023, d1.loss_bbox: 0.2345, d2.loss_cls: 0.0840, d2.loss_bbox: 0.2105, d3.loss_cls: 0.0723, d3.loss_bbox: 0.2037, d4.loss_cls: 0.0682, d4.loss_bbox: 0.1953, loss: 1.9188, grad_norm: 43.0997
2025-06-18 22:29:14,003 - mmdet - INFO - Epoch [4][3350/7033]	lr: 1.001e-04, eta: 7:11:10, time: 1.454, data_time: 0.025, memory: 18614, loss_cls: 0.0767, loss_bbox: 0.2040, d0.loss_cls: 0.1810, d0.loss_bbox: 0.3295, d1.loss_cls: 0.1113, d1.loss_bbox: 0.2411, d2.loss_cls: 0.0944, d2.loss_bbox: 0.2220, d3.loss_cls: 0.0816, d3.loss_bbox: 0.2166, d4.loss_cls: 0.0778, d4.loss_bbox: 0.2077, loss: 2.0435, grad_norm: 37.4852
2025-06-18 22:30:26,848 - mmdet - INFO - Epoch [4][3400/7033]	lr: 1.001e-04, eta: 7:09:57, time: 1.457, data_time: 0.028, memory: 18614, loss_cls: 0.0645, loss_bbox: 0.2026, d0.loss_cls: 0.1708, d0.loss_bbox: 0.3316, d1.loss_cls: 0.1048, d1.loss_bbox: 0.2446, d2.loss_cls: 0.0837, d2.loss_bbox: 0.2196, d3.loss_cls: 0.0704, d3.loss_bbox: 0.2124, d4.loss_cls: 0.0659, d4.loss_bbox: 0.2059, loss: 1.9769, grad_norm: 29.6136
2025-06-18 22:31:41,436 - mmdet - INFO - Epoch [4][3450/7033]	lr: 1.001e-04, eta: 7:08:45, time: 1.492, data_time: 0.030, memory: 18614, loss_cls: 0.0736, loss_bbox: 0.2029, d0.loss_cls: 0.1755, d0.loss_bbox: 0.3342, d1.loss_cls: 0.1094, d1.loss_bbox: 0.2460, d2.loss_cls: 0.0912, d2.loss_bbox: 0.2253, d3.loss_cls: 0.0784, d3.loss_bbox: 0.2182, d4.loss_cls: 0.0747, d4.loss_bbox: 0.2065, loss: 2.0358, grad_norm: 25.8787
2025-06-18 22:32:54,343 - mmdet - INFO - Epoch [4][3500/7033]	lr: 1.001e-04, eta: 7:07:32, time: 1.458, data_time: 0.030, memory: 18614, loss_cls: 0.0721, loss_bbox: 0.1981, d0.loss_cls: 0.1765, d0.loss_bbox: 0.3251, d1.loss_cls: 0.1090, d1.loss_bbox: 0.2412, d2.loss_cls: 0.0901, d2.loss_bbox: 0.2182, d3.loss_cls: 0.0761, d3.loss_bbox: 0.2102, d4.loss_cls: 0.0724, d4.loss_bbox: 0.2020, loss: 1.9909, grad_norm: 35.3694
2025-06-18 22:34:07,335 - mmdet - INFO - Epoch [4][3550/7033]	lr: 1.001e-04, eta: 7:06:20, time: 1.460, data_time: 0.030, memory: 18614, loss_cls: 0.0782, loss_bbox: 0.2026, d0.loss_cls: 0.1779, d0.loss_bbox: 0.3377, d1.loss_cls: 0.1144, d1.loss_bbox: 0.2484, d2.loss_cls: 0.0949, d2.loss_bbox: 0.2226, d3.loss_cls: 0.0838, d3.loss_bbox: 0.2148, d4.loss_cls: 0.0792, d4.loss_bbox: 0.2066, loss: 2.0611, grad_norm: 30.1775
2025-06-18 22:35:21,694 - mmdet - INFO - Epoch [4][3600/7033]	lr: 1.001e-04, eta: 7:05:08, time: 1.487, data_time: 0.026, memory: 18614, loss_cls: 0.0784, loss_bbox: 0.2061, d0.loss_cls: 0.1806, d0.loss_bbox: 0.3289, d1.loss_cls: 0.1189, d1.loss_bbox: 0.2496, d2.loss_cls: 0.0993, d2.loss_bbox: 0.2259, d3.loss_cls: 0.0871, d3.loss_bbox: 0.2172, d4.loss_cls: 0.0800, d4.loss_bbox: 0.2094, loss: 2.0814, grad_norm: 28.9247
2025-06-18 22:36:34,452 - mmdet - INFO - Epoch [4][3650/7033]	lr: 1.001e-04, eta: 7:03:55, time: 1.455, data_time: 0.026, memory: 18614, loss_cls: 0.0706, loss_bbox: 0.2001, d0.loss_cls: 0.1770, d0.loss_bbox: 0.3256, d1.loss_cls: 0.1077, d1.loss_bbox: 0.2394, d2.loss_cls: 0.0870, d2.loss_bbox: 0.2179, d3.loss_cls: 0.0755, d3.loss_bbox: 0.2108, d4.loss_cls: 0.0724, d4.loss_bbox: 0.2018, loss: 1.9859, grad_norm: 22.3783
2025-06-18 22:37:47,193 - mmdet - INFO - Epoch [4][3700/7033]	lr: 1.001e-04, eta: 7:02:42, time: 1.455, data_time: 0.028, memory: 18614, loss_cls: 0.0695, loss_bbox: 0.2009, d0.loss_cls: 0.1743, d0.loss_bbox: 0.3258, d1.loss_cls: 0.1062, d1.loss_bbox: 0.2396, d2.loss_cls: 0.0868, d2.loss_bbox: 0.2200, d3.loss_cls: 0.0736, d3.loss_bbox: 0.2141, d4.loss_cls: 0.0707, d4.loss_bbox: 0.2034, loss: 1.9849, grad_norm: 48.0376
2025-06-18 22:38:59,702 - mmdet - INFO - Epoch [4][3750/7033]	lr: 1.001e-04, eta: 7:01:29, time: 1.450, data_time: 0.027, memory: 18614, loss_cls: 0.0669, loss_bbox: 0.1966, d0.loss_cls: 0.1719, d0.loss_bbox: 0.3190, d1.loss_cls: 0.1057, d1.loss_bbox: 0.2369, d2.loss_cls: 0.0850, d2.loss_bbox: 0.2166, d3.loss_cls: 0.0732, d3.loss_bbox: 0.2067, d4.loss_cls: 0.0690, d4.loss_bbox: 0.2003, loss: 1.9479, grad_norm: 21.4909
2025-06-18 22:40:12,537 - mmdet - INFO - Epoch [4][3800/7033]	lr: 1.001e-04, eta: 7:00:16, time: 1.457, data_time: 0.029, memory: 18614, loss_cls: 0.0733, loss_bbox: 0.1988, d0.loss_cls: 0.1729, d0.loss_bbox: 0.3212, d1.loss_cls: 0.1069, d1.loss_bbox: 0.2414, d2.loss_cls: 0.0878, d2.loss_bbox: 0.2196, d3.loss_cls: 0.0789, d3.loss_bbox: 0.2116, d4.loss_cls: 0.0751, d4.loss_bbox: 0.2026, loss: 1.9901, grad_norm: 47.6825
2025-06-18 22:41:25,271 - mmdet - INFO - Epoch [4][3850/7033]	lr: 1.001e-04, eta: 6:59:03, time: 1.455, data_time: 0.026, memory: 18614, loss_cls: 0.0641, loss_bbox: 0.1923, d0.loss_cls: 0.1655, d0.loss_bbox: 0.3112, d1.loss_cls: 0.0987, d1.loss_bbox: 0.2287, d2.loss_cls: 0.0800, d2.loss_bbox: 0.2124, d3.loss_cls: 0.0719, d3.loss_bbox: 0.2037, d4.loss_cls: 0.0673, d4.loss_bbox: 0.1933, loss: 1.8890, grad_norm: 28.0827
2025-06-18 22:42:38,353 - mmdet - INFO - Epoch [4][3900/7033]	lr: 1.001e-04, eta: 6:57:50, time: 1.462, data_time: 0.028, memory: 18614, loss_cls: 0.0648, loss_bbox: 0.1939, d0.loss_cls: 0.1720, d0.loss_bbox: 0.3236, d1.loss_cls: 0.1044, d1.loss_bbox: 0.2355, d2.loss_cls: 0.0838, d2.loss_bbox: 0.2109, d3.loss_cls: 0.0713, d3.loss_bbox: 0.2028, d4.loss_cls: 0.0665, d4.loss_bbox: 0.1956, loss: 1.9250, grad_norm: 90.2982
2025-06-18 22:43:51,623 - mmdet - INFO - Epoch [4][3950/7033]	lr: 1.001e-04, eta: 6:56:37, time: 1.465, data_time: 0.035, memory: 18614, loss_cls: 0.0710, loss_bbox: 0.1998, d0.loss_cls: 0.1687, d0.loss_bbox: 0.3237, d1.loss_cls: 0.1069, d1.loss_bbox: 0.2426, d2.loss_cls: 0.0857, d2.loss_bbox: 0.2207, d3.loss_cls: 0.0754, d3.loss_bbox: 0.2121, d4.loss_cls: 0.0718, d4.loss_bbox: 0.2029, loss: 1.9813, grad_norm: 19.9466
2025-06-18 22:45:04,400 - mmdet - INFO - Epoch [4][4000/7033]	lr: 1.001e-04, eta: 6:55:24, time: 1.456, data_time: 0.027, memory: 18614, loss_cls: 0.0738, loss_bbox: 0.1988, d0.loss_cls: 0.1776, d0.loss_bbox: 0.3365, d1.loss_cls: 0.1093, d1.loss_bbox: 0.2469, d2.loss_cls: 0.0895, d2.loss_bbox: 0.2233, d3.loss_cls: 0.0781, d3.loss_bbox: 0.2129, d4.loss_cls: 0.0742, d4.loss_bbox: 0.2026, loss: 2.0235, grad_norm: 36.7045
2025-06-18 22:46:17,136 - mmdet - INFO - Epoch [4][4050/7033]	lr: 1.001e-04, eta: 6:54:11, time: 1.455, data_time: 0.029, memory: 18614, loss_cls: 0.0660, loss_bbox: 0.1974, d0.loss_cls: 0.1685, d0.loss_bbox: 0.3327, d1.loss_cls: 0.1051, d1.loss_bbox: 0.2392, d2.loss_cls: 0.0868, d2.loss_bbox: 0.2157, d3.loss_cls: 0.0711, d3.loss_bbox: 0.2079, d4.loss_cls: 0.0656, d4.loss_bbox: 0.2010, loss: 1.9568, grad_norm: 57.3161
2025-06-18 22:47:29,768 - mmdet - INFO - Epoch [4][4100/7033]	lr: 1.001e-04, eta: 6:52:58, time: 1.453, data_time: 0.027, memory: 18614, loss_cls: 0.0686, loss_bbox: 0.2017, d0.loss_cls: 0.1794, d0.loss_bbox: 0.3298, d1.loss_cls: 0.1091, d1.loss_bbox: 0.2419, d2.loss_cls: 0.0873, d2.loss_bbox: 0.2198, d3.loss_cls: 0.0756, d3.loss_bbox: 0.2120, d4.loss_cls: 0.0701, d4.loss_bbox: 0.2046, loss: 1.9999, grad_norm: 20.2009
2025-06-18 22:48:42,821 - mmdet - INFO - Epoch [4][4150/7033]	lr: 1.001e-04, eta: 6:51:46, time: 1.461, data_time: 0.028, memory: 18614, loss_cls: 0.0676, loss_bbox: 0.1988, d0.loss_cls: 0.1765, d0.loss_bbox: 0.3178, d1.loss_cls: 0.1065, d1.loss_bbox: 0.2303, d2.loss_cls: 0.0864, d2.loss_bbox: 0.2130, d3.loss_cls: 0.0753, d3.loss_bbox: 0.2078, d4.loss_cls: 0.0709, d4.loss_bbox: 0.2002, loss: 1.9509, grad_norm: 33.4062
2025-06-18 22:49:57,523 - mmdet - INFO - Epoch [4][4200/7033]	lr: 1.001e-04, eta: 6:50:34, time: 1.494, data_time: 0.034, memory: 18614, loss_cls: 0.0651, loss_bbox: 0.2057, d0.loss_cls: 0.1641, d0.loss_bbox: 0.3297, d1.loss_cls: 0.1015, d1.loss_bbox: 0.2450, d2.loss_cls: 0.0832, d2.loss_bbox: 0.2242, d3.loss_cls: 0.0721, d3.loss_bbox: 0.2147, d4.loss_cls: 0.0671, d4.loss_bbox: 0.2083, loss: 1.9807, grad_norm: 97.7385
2025-06-18 22:51:26,562 - mmdet - INFO - Epoch [4][4250/7033]	lr: 1.001e-04, eta: 6:49:32, time: 1.781, data_time: 0.330, memory: 18614, loss_cls: 0.0716, loss_bbox: 0.2008, d0.loss_cls: 0.1800, d0.loss_bbox: 0.3233, d1.loss_cls: 0.1092, d1.loss_bbox: 0.2368, d2.loss_cls: 0.0909, d2.loss_bbox: 0.2155, d3.loss_cls: 0.0775, d3.loss_bbox: 0.2089, d4.loss_cls: 0.0740, d4.loss_bbox: 0.2009, loss: 1.9895, grad_norm: 21.3333
2025-06-18 22:52:41,709 - mmdet - INFO - Epoch [4][4300/7033]	lr: 1.001e-04, eta: 6:48:20, time: 1.503, data_time: 0.032, memory: 18614, loss_cls: 0.0768, loss_bbox: 0.2048, d0.loss_cls: 0.1776, d0.loss_bbox: 0.3310, d1.loss_cls: 0.1155, d1.loss_bbox: 0.2475, d2.loss_cls: 0.0951, d2.loss_bbox: 0.2238, d3.loss_cls: 0.0831, d3.loss_bbox: 0.2148, d4.loss_cls: 0.0783, d4.loss_bbox: 0.2079, loss: 2.0562, grad_norm: 39.4925
2025-06-18 22:53:54,787 - mmdet - INFO - Epoch [4][4350/7033]	lr: 1.001e-04, eta: 6:47:08, time: 1.462, data_time: 0.030, memory: 18614, loss_cls: 0.0706, loss_bbox: 0.2057, d0.loss_cls: 0.1744, d0.loss_bbox: 0.3281, d1.loss_cls: 0.1076, d1.loss_bbox: 0.2467, d2.loss_cls: 0.0893, d2.loss_bbox: 0.2229, d3.loss_cls: 0.0784, d3.loss_bbox: 0.2145, d4.loss_cls: 0.0737, d4.loss_bbox: 0.2081, loss: 2.0201, grad_norm: 34.8894
2025-06-18 22:55:07,976 - mmdet - INFO - Epoch [4][4400/7033]	lr: 1.001e-04, eta: 6:45:55, time: 1.464, data_time: 0.030, memory: 18614, loss_cls: 0.0747, loss_bbox: 0.2065, d0.loss_cls: 0.1783, d0.loss_bbox: 0.3394, d1.loss_cls: 0.1105, d1.loss_bbox: 0.2522, d2.loss_cls: 0.0930, d2.loss_bbox: 0.2274, d3.loss_cls: 0.0800, d3.loss_bbox: 0.2182, d4.loss_cls: 0.0773, d4.loss_bbox: 0.2090, loss: 2.0666, grad_norm: 24.9300
2025-06-18 22:56:20,608 - mmdet - INFO - Epoch [4][4450/7033]	lr: 1.001e-04, eta: 6:44:42, time: 1.453, data_time: 0.028, memory: 18614, loss_cls: 0.0637, loss_bbox: 0.1913, d0.loss_cls: 0.1619, d0.loss_bbox: 0.3123, d1.loss_cls: 0.1000, d1.loss_bbox: 0.2306, d2.loss_cls: 0.0824, d2.loss_bbox: 0.2102, d3.loss_cls: 0.0703, d3.loss_bbox: 0.2023, d4.loss_cls: 0.0666, d4.loss_bbox: 0.1933, loss: 1.8848, grad_norm: 25.4127
2025-06-18 22:57:33,256 - mmdet - INFO - Epoch [4][4500/7033]	lr: 1.001e-04, eta: 6:43:29, time: 1.453, data_time: 0.024, memory: 18614, loss_cls: 0.0643, loss_bbox: 0.1979, d0.loss_cls: 0.1639, d0.loss_bbox: 0.3229, d1.loss_cls: 0.0999, d1.loss_bbox: 0.2327, d2.loss_cls: 0.0837, d2.loss_bbox: 0.2142, d3.loss_cls: 0.0703, d3.loss_bbox: 0.2068, d4.loss_cls: 0.0666, d4.loss_bbox: 0.2006, loss: 1.9238, grad_norm: 55.2322
2025-06-18 22:58:45,945 - mmdet - INFO - Epoch [4][4550/7033]	lr: 1.001e-04, eta: 6:42:15, time: 1.454, data_time: 0.027, memory: 18614, loss_cls: 0.0657, loss_bbox: 0.2008, d0.loss_cls: 0.1735, d0.loss_bbox: 0.3291, d1.loss_cls: 0.1031, d1.loss_bbox: 0.2437, d2.loss_cls: 0.0849, d2.loss_bbox: 0.2198, d3.loss_cls: 0.0738, d3.loss_bbox: 0.2114, d4.loss_cls: 0.0685, d4.loss_bbox: 0.2037, loss: 1.9779, grad_norm: 62.9220
2025-06-18 22:59:58,650 - mmdet - INFO - Epoch [4][4600/7033]	lr: 1.001e-04, eta: 6:41:02, time: 1.454, data_time: 0.027, memory: 18614, loss_cls: 0.0712, loss_bbox: 0.2101, d0.loss_cls: 0.1714, d0.loss_bbox: 0.3422, d1.loss_cls: 0.1080, d1.loss_bbox: 0.2517, d2.loss_cls: 0.0892, d2.loss_bbox: 0.2309, d3.loss_cls: 0.0780, d3.loss_bbox: 0.2231, d4.loss_cls: 0.0730, d4.loss_bbox: 0.2139, loss: 2.0627, grad_norm: 26.3946
2025-06-18 23:01:11,310 - mmdet - INFO - Epoch [4][4650/7033]	lr: 1.001e-04, eta: 6:39:49, time: 1.453, data_time: 0.029, memory: 18614, loss_cls: 0.0688, loss_bbox: 0.1977, d0.loss_cls: 0.1678, d0.loss_bbox: 0.3234, d1.loss_cls: 0.1047, d1.loss_bbox: 0.2429, d2.loss_cls: 0.0843, d2.loss_bbox: 0.2213, d3.loss_cls: 0.0739, d3.loss_bbox: 0.2135, d4.loss_cls: 0.0699, d4.loss_bbox: 0.2022, loss: 1.9704, grad_norm: 54.5482
2025-06-18 23:02:24,121 - mmdet - INFO - Epoch [4][4700/7033]	lr: 1.001e-04, eta: 6:38:36, time: 1.456, data_time: 0.027, memory: 18614, loss_cls: 0.0713, loss_bbox: 0.2037, d0.loss_cls: 0.1794, d0.loss_bbox: 0.3345, d1.loss_cls: 0.1086, d1.loss_bbox: 0.2481, d2.loss_cls: 0.0910, d2.loss_bbox: 0.2259, d3.loss_cls: 0.0792, d3.loss_bbox: 0.2158, d4.loss_cls: 0.0732, d4.loss_bbox: 0.2066, loss: 2.0374, grad_norm: 35.5764
2025-06-18 23:03:37,122 - mmdet - INFO - Epoch [4][4750/7033]	lr: 1.001e-04, eta: 6:37:23, time: 1.460, data_time: 0.034, memory: 18614, loss_cls: 0.0742, loss_bbox: 0.2032, d0.loss_cls: 0.1789, d0.loss_bbox: 0.3329, d1.loss_cls: 0.1141, d1.loss_bbox: 0.2439, d2.loss_cls: 0.0921, d2.loss_bbox: 0.2257, d3.loss_cls: 0.0815, d3.loss_bbox: 0.2158, d4.loss_cls: 0.0760, d4.loss_bbox: 0.2067, loss: 2.0448, grad_norm: 35.2871
2025-06-18 23:04:50,120 - mmdet - INFO - Epoch [4][4800/7033]	lr: 1.001e-04, eta: 6:36:11, time: 1.460, data_time: 0.030, memory: 18614, loss_cls: 0.0686, loss_bbox: 0.2074, d0.loss_cls: 0.1759, d0.loss_bbox: 0.3240, d1.loss_cls: 0.1105, d1.loss_bbox: 0.2407, d2.loss_cls: 0.0873, d2.loss_bbox: 0.2220, d3.loss_cls: 0.0759, d3.loss_bbox: 0.2157, d4.loss_cls: 0.0709, d4.loss_bbox: 0.2091, loss: 2.0080, grad_norm: 42.6835
2025-06-18 23:06:02,864 - mmdet - INFO - Epoch [4][4850/7033]	lr: 1.001e-04, eta: 6:34:58, time: 1.455, data_time: 0.027, memory: 18614, loss_cls: 0.0660, loss_bbox: 0.1978, d0.loss_cls: 0.1645, d0.loss_bbox: 0.3208, d1.loss_cls: 0.1012, d1.loss_bbox: 0.2357, d2.loss_cls: 0.0837, d2.loss_bbox: 0.2153, d3.loss_cls: 0.0729, d3.loss_bbox: 0.2076, d4.loss_cls: 0.0673, d4.loss_bbox: 0.2015, loss: 1.9342, grad_norm: 46.4927
2025-06-18 23:07:15,520 - mmdet - INFO - Epoch [4][4900/7033]	lr: 1.001e-04, eta: 6:33:44, time: 1.453, data_time: 0.026, memory: 18614, loss_cls: 0.0795, loss_bbox: 0.2072, d0.loss_cls: 0.1778, d0.loss_bbox: 0.3342, d1.loss_cls: 0.1129, d1.loss_bbox: 0.2503, d2.loss_cls: 0.0947, d2.loss_bbox: 0.2269, d3.loss_cls: 0.0843, d3.loss_bbox: 0.2194, d4.loss_cls: 0.0806, d4.loss_bbox: 0.2110, loss: 2.0790, grad_norm: 28.3444
2025-06-18 23:08:28,304 - mmdet - INFO - Epoch [4][4950/7033]	lr: 1.001e-04, eta: 6:32:31, time: 1.456, data_time: 0.026, memory: 18614, loss_cls: 0.0626, loss_bbox: 0.1995, d0.loss_cls: 0.1726, d0.loss_bbox: 0.3380, d1.loss_cls: 0.1067, d1.loss_bbox: 0.2433, d2.loss_cls: 0.0838, d2.loss_bbox: 0.2191, d3.loss_cls: 0.0680, d3.loss_bbox: 0.2107, d4.loss_cls: 0.0645, d4.loss_bbox: 0.2017, loss: 1.9707, grad_norm: 32.6269
2025-06-18 23:09:40,841 - mmdet - INFO - Epoch [4][5000/7033]	lr: 1.001e-04, eta: 6:31:18, time: 1.451, data_time: 0.026, memory: 18614, loss_cls: 0.0760, loss_bbox: 0.2073, d0.loss_cls: 0.1796, d0.loss_bbox: 0.3348, d1.loss_cls: 0.1144, d1.loss_bbox: 0.2456, d2.loss_cls: 0.0950, d2.loss_bbox: 0.2252, d3.loss_cls: 0.0820, d3.loss_bbox: 0.2179, d4.loss_cls: 0.0770, d4.loss_bbox: 0.2107, loss: 2.0656, grad_norm: 29.5510
2025-06-18 23:10:53,720 - mmdet - INFO - Epoch [4][5050/7033]	lr: 1.001e-04, eta: 6:30:05, time: 1.458, data_time: 0.029, memory: 18614, loss_cls: 0.0684, loss_bbox: 0.1971, d0.loss_cls: 0.1652, d0.loss_bbox: 0.3163, d1.loss_cls: 0.1047, d1.loss_bbox: 0.2385, d2.loss_cls: 0.0882, d2.loss_bbox: 0.2181, d3.loss_cls: 0.0756, d3.loss_bbox: 0.2096, d4.loss_cls: 0.0707, d4.loss_bbox: 0.2007, loss: 1.9532, grad_norm: 20.9351
2025-06-18 23:12:06,715 - mmdet - INFO - Epoch [4][5100/7033]	lr: 1.001e-04, eta: 6:28:52, time: 1.460, data_time: 0.027, memory: 18614, loss_cls: 0.0845, loss_bbox: 0.2086, d0.loss_cls: 0.1856, d0.loss_bbox: 0.3451, d1.loss_cls: 0.1204, d1.loss_bbox: 0.2613, d2.loss_cls: 0.1020, d2.loss_bbox: 0.2333, d3.loss_cls: 0.0894, d3.loss_bbox: 0.2240, d4.loss_cls: 0.0875, d4.loss_bbox: 0.2127, loss: 2.1544, grad_norm: 54.2249
2025-06-18 23:13:19,676 - mmdet - INFO - Epoch [4][5150/7033]	lr: 1.001e-04, eta: 6:27:40, time: 1.459, data_time: 0.032, memory: 18614, loss_cls: 0.0671, loss_bbox: 0.1960, d0.loss_cls: 0.1737, d0.loss_bbox: 0.3225, d1.loss_cls: 0.1052, d1.loss_bbox: 0.2380, d2.loss_cls: 0.0862, d2.loss_bbox: 0.2154, d3.loss_cls: 0.0724, d3.loss_bbox: 0.2079, d4.loss_cls: 0.0685, d4.loss_bbox: 0.1992, loss: 1.9521, grad_norm: 18.8660
2025-06-18 23:14:32,087 - mmdet - INFO - Epoch [4][5200/7033]	lr: 1.001e-04, eta: 6:26:26, time: 1.448, data_time: 0.024, memory: 18614, loss_cls: 0.0653, loss_bbox: 0.1953, d0.loss_cls: 0.1753, d0.loss_bbox: 0.3184, d1.loss_cls: 0.1041, d1.loss_bbox: 0.2358, d2.loss_cls: 0.0846, d2.loss_bbox: 0.2147, d3.loss_cls: 0.0719, d3.loss_bbox: 0.2062, d4.loss_cls: 0.0665, d4.loss_bbox: 0.1981, loss: 1.9360, grad_norm: 39.3307
2025-06-18 23:15:44,695 - mmdet - INFO - Epoch [4][5250/7033]	lr: 1.001e-04, eta: 6:25:13, time: 1.452, data_time: 0.027, memory: 18614, loss_cls: 0.0702, loss_bbox: 0.1943, d0.loss_cls: 0.1680, d0.loss_bbox: 0.3067, d1.loss_cls: 0.1084, d1.loss_bbox: 0.2294, d2.loss_cls: 0.0885, d2.loss_bbox: 0.2107, d3.loss_cls: 0.0772, d3.loss_bbox: 0.2046, d4.loss_cls: 0.0716, d4.loss_bbox: 0.1965, loss: 1.9260, grad_norm: 171.5078
2025-06-18 23:16:57,546 - mmdet - INFO - Epoch [4][5300/7033]	lr: 1.001e-04, eta: 6:24:00, time: 1.457, data_time: 0.027, memory: 18614, loss_cls: 0.0754, loss_bbox: 0.1967, d0.loss_cls: 0.1669, d0.loss_bbox: 0.3213, d1.loss_cls: 0.1085, d1.loss_bbox: 0.2362, d2.loss_cls: 0.0927, d2.loss_bbox: 0.2154, d3.loss_cls: 0.0803, d3.loss_bbox: 0.2094, d4.loss_cls: 0.0763, d4.loss_bbox: 0.1996, loss: 1.9787, grad_norm: 25.2312
2025-06-18 23:18:10,193 - mmdet - INFO - Epoch [4][5350/7033]	lr: 1.001e-04, eta: 6:22:47, time: 1.453, data_time: 0.027, memory: 18614, loss_cls: 0.0665, loss_bbox: 0.1944, d0.loss_cls: 0.1657, d0.loss_bbox: 0.3205, d1.loss_cls: 0.1021, d1.loss_bbox: 0.2343, d2.loss_cls: 0.0845, d2.loss_bbox: 0.2144, d3.loss_cls: 0.0724, d3.loss_bbox: 0.2059, d4.loss_cls: 0.0671, d4.loss_bbox: 0.1978, loss: 1.9258, grad_norm: 52.3577
2025-06-18 23:19:22,782 - mmdet - INFO - Epoch [4][5400/7033]	lr: 1.001e-04, eta: 6:21:34, time: 1.452, data_time: 0.025, memory: 18614, loss_cls: 0.0718, loss_bbox: 0.1967, d0.loss_cls: 0.1680, d0.loss_bbox: 0.3205, d1.loss_cls: 0.1080, d1.loss_bbox: 0.2385, d2.loss_cls: 0.0877, d2.loss_bbox: 0.2171, d3.loss_cls: 0.0770, d3.loss_bbox: 0.2097, d4.loss_cls: 0.0723, d4.loss_bbox: 0.2004, loss: 1.9677, grad_norm: 29.9650
2025-06-18 23:20:35,499 - mmdet - INFO - Epoch [4][5450/7033]	lr: 1.001e-04, eta: 6:20:21, time: 1.454, data_time: 0.025, memory: 18614, loss_cls: 0.0675, loss_bbox: 0.1860, d0.loss_cls: 0.1638, d0.loss_bbox: 0.3136, d1.loss_cls: 0.0988, d1.loss_bbox: 0.2269, d2.loss_cls: 0.0802, d2.loss_bbox: 0.2058, d3.loss_cls: 0.0713, d3.loss_bbox: 0.1985, d4.loss_cls: 0.0683, d4.loss_bbox: 0.1897, loss: 1.8704, grad_norm: 44.9111
2025-06-18 23:21:48,321 - mmdet - INFO - Epoch [4][5500/7033]	lr: 1.001e-04, eta: 6:19:08, time: 1.456, data_time: 0.027, memory: 18614, loss_cls: 0.0692, loss_bbox: 0.1959, d0.loss_cls: 0.1637, d0.loss_bbox: 0.3183, d1.loss_cls: 0.1031, d1.loss_bbox: 0.2352, d2.loss_cls: 0.0844, d2.loss_bbox: 0.2160, d3.loss_cls: 0.0752, d3.loss_bbox: 0.2055, d4.loss_cls: 0.0713, d4.loss_bbox: 0.1985, loss: 1.9362, grad_norm: 36.3218
2025-06-18 23:23:01,259 - mmdet - INFO - Epoch [4][5550/7033]	lr: 1.001e-04, eta: 6:17:55, time: 1.459, data_time: 0.035, memory: 18614, loss_cls: 0.0694, loss_bbox: 0.1932, d0.loss_cls: 0.1650, d0.loss_bbox: 0.3258, d1.loss_cls: 0.1054, d1.loss_bbox: 0.2342, d2.loss_cls: 0.0874, d2.loss_bbox: 0.2150, d3.loss_cls: 0.0755, d3.loss_bbox: 0.2065, d4.loss_cls: 0.0694, d4.loss_bbox: 0.1968, loss: 1.9436, grad_norm: 33.8677
2025-06-18 23:24:14,061 - mmdet - INFO - Epoch [4][5600/7033]	lr: 1.001e-04, eta: 6:16:42, time: 1.456, data_time: 0.028, memory: 18614, loss_cls: 0.0647, loss_bbox: 0.1913, d0.loss_cls: 0.1612, d0.loss_bbox: 0.3178, d1.loss_cls: 0.1005, d1.loss_bbox: 0.2322, d2.loss_cls: 0.0812, d2.loss_bbox: 0.2123, d3.loss_cls: 0.0681, d3.loss_bbox: 0.2038, d4.loss_cls: 0.0660, d4.loss_bbox: 0.1953, loss: 1.8945, grad_norm: 28.8384
2025-06-18 23:25:27,026 - mmdet - INFO - Epoch [4][5650/7033]	lr: 1.001e-04, eta: 6:15:29, time: 1.459, data_time: 0.028, memory: 18614, loss_cls: 0.0755, loss_bbox: 0.2069, d0.loss_cls: 0.1752, d0.loss_bbox: 0.3352, d1.loss_cls: 0.1106, d1.loss_bbox: 0.2498, d2.loss_cls: 0.0960, d2.loss_bbox: 0.2259, d3.loss_cls: 0.0831, d3.loss_bbox: 0.2184, d4.loss_cls: 0.0770, d4.loss_bbox: 0.2105, loss: 2.0641, grad_norm: 222.2251
2025-06-18 23:26:39,734 - mmdet - INFO - Epoch [4][5700/7033]	lr: 1.001e-04, eta: 6:14:16, time: 1.454, data_time: 0.026, memory: 18614, loss_cls: 0.0731, loss_bbox: 0.2010, d0.loss_cls: 0.1757, d0.loss_bbox: 0.3339, d1.loss_cls: 0.1127, d1.loss_bbox: 0.2463, d2.loss_cls: 0.0900, d2.loss_bbox: 0.2245, d3.loss_cls: 0.0806, d3.loss_bbox: 0.2135, d4.loss_cls: 0.0758, d4.loss_bbox: 0.2039, loss: 2.0308, grad_norm: 18.1146
2025-06-18 23:27:52,518 - mmdet - INFO - Epoch [4][5750/7033]	lr: 1.001e-04, eta: 6:13:03, time: 1.456, data_time: 0.027, memory: 18614, loss_cls: 0.0690, loss_bbox: 0.2060, d0.loss_cls: 0.1682, d0.loss_bbox: 0.3318, d1.loss_cls: 0.1044, d1.loss_bbox: 0.2454, d2.loss_cls: 0.0866, d2.loss_bbox: 0.2240, d3.loss_cls: 0.0751, d3.loss_bbox: 0.2174, d4.loss_cls: 0.0710, d4.loss_bbox: 0.2088, loss: 2.0077, grad_norm: 25.2560
2025-06-18 23:29:06,967 - mmdet - INFO - Epoch [4][5800/7033]	lr: 1.001e-04, eta: 6:11:51, time: 1.489, data_time: 0.028, memory: 18614, loss_cls: 0.0711, loss_bbox: 0.1935, d0.loss_cls: 0.1699, d0.loss_bbox: 0.3166, d1.loss_cls: 0.1086, d1.loss_bbox: 0.2328, d2.loss_cls: 0.0886, d2.loss_bbox: 0.2149, d3.loss_cls: 0.0765, d3.loss_bbox: 0.2070, d4.loss_cls: 0.0714, d4.loss_bbox: 0.1987, loss: 1.9497, grad_norm: 20.1808
2025-06-18 23:30:21,582 - mmdet - INFO - Epoch [4][5850/7033]	lr: 1.001e-04, eta: 6:10:39, time: 1.492, data_time: 0.028, memory: 18614, loss_cls: 0.0729, loss_bbox: 0.2046, d0.loss_cls: 0.1736, d0.loss_bbox: 0.3303, d1.loss_cls: 0.1037, d1.loss_bbox: 0.2507, d2.loss_cls: 0.0887, d2.loss_bbox: 0.2284, d3.loss_cls: 0.0788, d3.loss_bbox: 0.2167, d4.loss_cls: 0.0742, d4.loss_bbox: 0.2076, loss: 2.0300, grad_norm: 34.9213
2025-06-18 23:31:34,287 - mmdet - INFO - Epoch [4][5900/7033]	lr: 1.001e-04, eta: 6:09:26, time: 1.454, data_time: 0.026, memory: 18614, loss_cls: 0.0711, loss_bbox: 0.1982, d0.loss_cls: 0.1702, d0.loss_bbox: 0.3205, d1.loss_cls: 0.1086, d1.loss_bbox: 0.2362, d2.loss_cls: 0.0904, d2.loss_bbox: 0.2129, d3.loss_cls: 0.0773, d3.loss_bbox: 0.2083, d4.loss_cls: 0.0720, d4.loss_bbox: 0.2014, loss: 1.9669, grad_norm: 34.2981
2025-06-18 23:32:47,326 - mmdet - INFO - Epoch [4][5950/7033]	lr: 1.001e-04, eta: 6:08:13, time: 1.461, data_time: 0.033, memory: 18614, loss_cls: 0.0686, loss_bbox: 0.1914, d0.loss_cls: 0.1646, d0.loss_bbox: 0.3249, d1.loss_cls: 0.1047, d1.loss_bbox: 0.2364, d2.loss_cls: 0.0881, d2.loss_bbox: 0.2128, d3.loss_cls: 0.0744, d3.loss_bbox: 0.2021, d4.loss_cls: 0.0688, d4.loss_bbox: 0.1947, loss: 1.9314, grad_norm: 34.3033
2025-06-18 23:34:00,279 - mmdet - INFO - Epoch [4][6000/7033]	lr: 1.001e-04, eta: 6:07:00, time: 1.459, data_time: 0.029, memory: 18614, loss_cls: 0.0668, loss_bbox: 0.1960, d0.loss_cls: 0.1776, d0.loss_bbox: 0.3218, d1.loss_cls: 0.1010, d1.loss_bbox: 0.2417, d2.loss_cls: 0.0836, d2.loss_bbox: 0.2160, d3.loss_cls: 0.0724, d3.loss_bbox: 0.2085, d4.loss_cls: 0.0678, d4.loss_bbox: 0.1995, loss: 1.9526, grad_norm: 30.9386
2025-06-18 23:35:12,984 - mmdet - INFO - Epoch [4][6050/7033]	lr: 1.001e-04, eta: 6:05:47, time: 1.454, data_time: 0.027, memory: 18614, loss_cls: 0.0649, loss_bbox: 0.1941, d0.loss_cls: 0.1648, d0.loss_bbox: 0.3228, d1.loss_cls: 0.1028, d1.loss_bbox: 0.2402, d2.loss_cls: 0.0852, d2.loss_bbox: 0.2148, d3.loss_cls: 0.0728, d3.loss_bbox: 0.2060, d4.loss_cls: 0.0661, d4.loss_bbox: 0.1987, loss: 1.9332, grad_norm: 24.0527
2025-06-18 23:36:26,047 - mmdet - INFO - Epoch [4][6100/7033]	lr: 1.001e-04, eta: 6:04:35, time: 1.461, data_time: 0.028, memory: 18614, loss_cls: 0.0651, loss_bbox: 0.1925, d0.loss_cls: 0.1570, d0.loss_bbox: 0.3152, d1.loss_cls: 0.0971, d1.loss_bbox: 0.2370, d2.loss_cls: 0.0831, d2.loss_bbox: 0.2130, d3.loss_cls: 0.0701, d3.loss_bbox: 0.2037, d4.loss_cls: 0.0669, d4.loss_bbox: 0.1952, loss: 1.8959, grad_norm: 28.2017
2025-06-18 23:37:38,699 - mmdet - INFO - Epoch [4][6150/7033]	lr: 1.001e-04, eta: 6:03:22, time: 1.453, data_time: 0.026, memory: 18614, loss_cls: 0.0697, loss_bbox: 0.2067, d0.loss_cls: 0.1710, d0.loss_bbox: 0.3271, d1.loss_cls: 0.1062, d1.loss_bbox: 0.2466, d2.loss_cls: 0.0911, d2.loss_bbox: 0.2233, d3.loss_cls: 0.0779, d3.loss_bbox: 0.2164, d4.loss_cls: 0.0723, d4.loss_bbox: 0.2081, loss: 2.0162, grad_norm: 22.2721
2025-06-18 23:38:51,840 - mmdet - INFO - Epoch [4][6200/7033]	lr: 1.001e-04, eta: 6:02:09, time: 1.463, data_time: 0.031, memory: 18614, loss_cls: 0.0703, loss_bbox: 0.1960, d0.loss_cls: 0.1658, d0.loss_bbox: 0.3244, d1.loss_cls: 0.1059, d1.loss_bbox: 0.2378, d2.loss_cls: 0.0891, d2.loss_bbox: 0.2169, d3.loss_cls: 0.0762, d3.loss_bbox: 0.2086, d4.loss_cls: 0.0707, d4.loss_bbox: 0.2000, loss: 1.9619, grad_norm: 19.1104
2025-06-18 23:40:04,654 - mmdet - INFO - Epoch [4][6250/7033]	lr: 1.001e-04, eta: 6:00:56, time: 1.456, data_time: 0.028, memory: 18614, loss_cls: 0.0700, loss_bbox: 0.1988, d0.loss_cls: 0.1704, d0.loss_bbox: 0.3267, d1.loss_cls: 0.1085, d1.loss_bbox: 0.2450, d2.loss_cls: 0.0890, d2.loss_bbox: 0.2182, d3.loss_cls: 0.0778, d3.loss_bbox: 0.2108, d4.loss_cls: 0.0722, d4.loss_bbox: 0.2025, loss: 1.9899, grad_norm: 100.2011
2025-06-18 23:41:17,364 - mmdet - INFO - Epoch [4][6300/7033]	lr: 1.001e-04, eta: 5:59:43, time: 1.454, data_time: 0.029, memory: 18614, loss_cls: 0.0726, loss_bbox: 0.2016, d0.loss_cls: 0.1700, d0.loss_bbox: 0.3305, d1.loss_cls: 0.1086, d1.loss_bbox: 0.2459, d2.loss_cls: 0.0904, d2.loss_bbox: 0.2211, d3.loss_cls: 0.0782, d3.loss_bbox: 0.2131, d4.loss_cls: 0.0738, d4.loss_bbox: 0.2044, loss: 2.0101, grad_norm: 19.8399
2025-06-18 23:42:30,353 - mmdet - INFO - Epoch [4][6350/7033]	lr: 1.001e-04, eta: 5:58:30, time: 1.460, data_time: 0.025, memory: 18614, loss_cls: 0.0682, loss_bbox: 0.2046, d0.loss_cls: 0.1671, d0.loss_bbox: 0.3262, d1.loss_cls: 0.1042, d1.loss_bbox: 0.2454, d2.loss_cls: 0.0855, d2.loss_bbox: 0.2239, d3.loss_cls: 0.0759, d3.loss_bbox: 0.2156, d4.loss_cls: 0.0712, d4.loss_bbox: 0.2071, loss: 1.9949, grad_norm: 23.5490
2025-06-18 23:43:43,394 - mmdet - INFO - Epoch [4][6400/7033]	lr: 1.001e-04, eta: 5:57:17, time: 1.461, data_time: 0.027, memory: 18614, loss_cls: 0.0717, loss_bbox: 0.1935, d0.loss_cls: 0.1723, d0.loss_bbox: 0.3151, d1.loss_cls: 0.1094, d1.loss_bbox: 0.2345, d2.loss_cls: 0.0903, d2.loss_bbox: 0.2109, d3.loss_cls: 0.0782, d3.loss_bbox: 0.2048, d4.loss_cls: 0.0729, d4.loss_bbox: 0.1969, loss: 1.9505, grad_norm: 42.8061
2025-06-18 23:44:56,206 - mmdet - INFO - Epoch [4][6450/7033]	lr: 1.001e-04, eta: 5:56:04, time: 1.456, data_time: 0.028, memory: 18614, loss_cls: 0.0694, loss_bbox: 0.1976, d0.loss_cls: 0.1681, d0.loss_bbox: 0.3240, d1.loss_cls: 0.1037, d1.loss_bbox: 0.2389, d2.loss_cls: 0.0843, d2.loss_bbox: 0.2195, d3.loss_cls: 0.0744, d3.loss_bbox: 0.2087, d4.loss_cls: 0.0715, d4.loss_bbox: 0.2015, loss: 1.9614, grad_norm: 29.1788
2025-06-18 23:46:08,955 - mmdet - INFO - Epoch [4][6500/7033]	lr: 1.001e-04, eta: 5:54:51, time: 1.455, data_time: 0.027, memory: 18614, loss_cls: 0.0728, loss_bbox: 0.2025, d0.loss_cls: 0.1759, d0.loss_bbox: 0.3339, d1.loss_cls: 0.1098, d1.loss_bbox: 0.2449, d2.loss_cls: 0.0920, d2.loss_bbox: 0.2217, d3.loss_cls: 0.0795, d3.loss_bbox: 0.2160, d4.loss_cls: 0.0752, d4.loss_bbox: 0.2062, loss: 2.0308, grad_norm: 99.2545
2025-06-18 23:47:23,480 - mmdet - INFO - Epoch [4][6550/7033]	lr: 1.001e-04, eta: 5:53:39, time: 1.490, data_time: 0.025, memory: 18614, loss_cls: 0.0677, loss_bbox: 0.1993, d0.loss_cls: 0.1592, d0.loss_bbox: 0.3154, d1.loss_cls: 0.0976, d1.loss_bbox: 0.2384, d2.loss_cls: 0.0845, d2.loss_bbox: 0.2187, d3.loss_cls: 0.0763, d3.loss_bbox: 0.2117, d4.loss_cls: 0.0694, d4.loss_bbox: 0.2030, loss: 1.9411, grad_norm: 34.0749
2025-06-18 23:48:36,568 - mmdet - INFO - Epoch [4][6600/7033]	lr: 1.001e-04, eta: 5:52:26, time: 1.462, data_time: 0.032, memory: 18614, loss_cls: 0.0742, loss_bbox: 0.2034, d0.loss_cls: 0.1615, d0.loss_bbox: 0.3149, d1.loss_cls: 0.1062, d1.loss_bbox: 0.2413, d2.loss_cls: 0.0911, d2.loss_bbox: 0.2214, d3.loss_cls: 0.0802, d3.loss_bbox: 0.2133, d4.loss_cls: 0.0764, d4.loss_bbox: 0.2061, loss: 1.9900, grad_norm: 20.6785
2025-06-18 23:49:49,671 - mmdet - INFO - Epoch [4][6650/7033]	lr: 1.001e-04, eta: 5:51:13, time: 1.462, data_time: 0.028, memory: 18614, loss_cls: 0.0683, loss_bbox: 0.1996, d0.loss_cls: 0.1613, d0.loss_bbox: 0.3247, d1.loss_cls: 0.0992, d1.loss_bbox: 0.2383, d2.loss_cls: 0.0842, d2.loss_bbox: 0.2180, d3.loss_cls: 0.0733, d3.loss_bbox: 0.2089, d4.loss_cls: 0.0693, d4.loss_bbox: 0.2019, loss: 1.9470, grad_norm: 29.8893
2025-06-18 23:51:02,283 - mmdet - INFO - Epoch [4][6700/7033]	lr: 1.001e-04, eta: 5:50:00, time: 1.452, data_time: 0.028, memory: 18614, loss_cls: 0.0807, loss_bbox: 0.2039, d0.loss_cls: 0.1774, d0.loss_bbox: 0.3232, d1.loss_cls: 0.1171, d1.loss_bbox: 0.2415, d2.loss_cls: 0.1037, d2.loss_bbox: 0.2196, d3.loss_cls: 0.0890, d3.loss_bbox: 0.2146, d4.loss_cls: 0.0837, d4.loss_bbox: 0.2047, loss: 2.0591, grad_norm: 51.3157
2025-06-18 23:52:15,093 - mmdet - INFO - Epoch [4][6750/7033]	lr: 1.001e-04, eta: 5:48:47, time: 1.456, data_time: 0.029, memory: 18614, loss_cls: 0.0793, loss_bbox: 0.2076, d0.loss_cls: 0.1785, d0.loss_bbox: 0.3359, d1.loss_cls: 0.1139, d1.loss_bbox: 0.2521, d2.loss_cls: 0.0965, d2.loss_bbox: 0.2289, d3.loss_cls: 0.0847, d3.loss_bbox: 0.2209, d4.loss_cls: 0.0798, d4.loss_bbox: 0.2116, loss: 2.0897, grad_norm: 1013.3603
2025-06-18 23:53:27,809 - mmdet - INFO - Epoch [4][6800/7033]	lr: 1.001e-04, eta: 5:47:34, time: 1.454, data_time: 0.027, memory: 18614, loss_cls: 0.0680, loss_bbox: 0.1955, d0.loss_cls: 0.1673, d0.loss_bbox: 0.3264, d1.loss_cls: 0.1013, d1.loss_bbox: 0.2416, d2.loss_cls: 0.0861, d2.loss_bbox: 0.2157, d3.loss_cls: 0.0732, d3.loss_bbox: 0.2080, d4.loss_cls: 0.0698, d4.loss_bbox: 0.1994, loss: 1.9522, grad_norm: 31.3459
2025-06-18 23:54:40,265 - mmdet - INFO - Epoch [4][6850/7033]	lr: 1.001e-04, eta: 5:46:21, time: 1.449, data_time: 0.026, memory: 18614, loss_cls: 0.0627, loss_bbox: 0.1939, d0.loss_cls: 0.1594, d0.loss_bbox: 0.3192, d1.loss_cls: 0.0928, d1.loss_bbox: 0.2357, d2.loss_cls: 0.0767, d2.loss_bbox: 0.2147, d3.loss_cls: 0.0678, d3.loss_bbox: 0.2054, d4.loss_cls: 0.0636, d4.loss_bbox: 0.1972, loss: 1.8891, grad_norm: 26.7650
2025-06-18 23:55:53,047 - mmdet - INFO - Epoch [4][6900/7033]	lr: 1.001e-04, eta: 5:45:08, time: 1.456, data_time: 0.028, memory: 18614, loss_cls: 0.0689, loss_bbox: 0.2022, d0.loss_cls: 0.1660, d0.loss_bbox: 0.3323, d1.loss_cls: 0.1039, d1.loss_bbox: 0.2439, d2.loss_cls: 0.0889, d2.loss_bbox: 0.2215, d3.loss_cls: 0.0745, d3.loss_bbox: 0.2133, d4.loss_cls: 0.0698, d4.loss_bbox: 0.2053, loss: 1.9905, grad_norm: 23.5844
2025-06-18 23:57:07,419 - mmdet - INFO - Epoch [4][6950/7033]	lr: 1.001e-04, eta: 5:43:56, time: 1.487, data_time: 0.029, memory: 18614, loss_cls: 0.0694, loss_bbox: 0.2012, d0.loss_cls: 0.1644, d0.loss_bbox: 0.3202, d1.loss_cls: 0.1037, d1.loss_bbox: 0.2434, d2.loss_cls: 0.0860, d2.loss_bbox: 0.2199, d3.loss_cls: 0.0748, d3.loss_bbox: 0.2120, d4.loss_cls: 0.0706, d4.loss_bbox: 0.2039, loss: 1.9693, grad_norm: 63.8354
2025-06-18 23:58:20,844 - mmdet - INFO - Epoch [4][7000/7033]	lr: 1.001e-04, eta: 5:42:43, time: 1.468, data_time: 0.034, memory: 18614, loss_cls: 0.0669, loss_bbox: 0.1938, d0.loss_cls: 0.1656, d0.loss_bbox: 0.3197, d1.loss_cls: 0.1004, d1.loss_bbox: 0.2357, d2.loss_cls: 0.0845, d2.loss_bbox: 0.2139, d3.loss_cls: 0.0738, d3.loss_bbox: 0.2037, d4.loss_cls: 0.0684, d4.loss_bbox: 0.1961, loss: 1.9224, grad_norm: 20.8623
2025-06-18 23:59:09,150 - mmdet - INFO - Saving checkpoint at 4 epochs
2025-06-19 00:22:14,795 - mmdet - INFO - Exp name: lidar_0075v_cam_res_2x2_hednetmiddleencoder_hednetbackbone4_dss0511_dp03_hugeep2_num2_morton_conv_xy_rope_bs2.py
2025-06-19 00:22:14,795 - mmdet - INFO - Epoch(val) [4][3010]	pts_bbox_NuScenes/car_AP_dist_0.5: 0.7992, pts_bbox_NuScenes/car_AP_dist_1.0: 0.8889, pts_bbox_NuScenes/car_AP_dist_2.0: 0.9152, pts_bbox_NuScenes/car_AP_dist_4.0: 0.9267, pts_bbox_NuScenes/car_trans_err: 0.1777, pts_bbox_NuScenes/car_scale_err: 0.1541, pts_bbox_NuScenes/car_orient_err: 0.0410, pts_bbox_NuScenes/car_vel_err: 0.2605, pts_bbox_NuScenes/car_attr_err: 0.1923, pts_bbox_NuScenes/mATE: 0.2854, pts_bbox_NuScenes/mASE: 0.2630, pts_bbox_NuScenes/mAOE: 0.2435, pts_bbox_NuScenes/mAVE: 0.2604, pts_bbox_NuScenes/mAAE: 0.1958, pts_bbox_NuScenes/truck_AP_dist_0.5: 0.4278, pts_bbox_NuScenes/truck_AP_dist_1.0: 0.6292, pts_bbox_NuScenes/truck_AP_dist_2.0: 0.7334, pts_bbox_NuScenes/truck_AP_dist_4.0: 0.7680, pts_bbox_NuScenes/truck_trans_err: 0.3449, pts_bbox_NuScenes/truck_scale_err: 0.1997, pts_bbox_NuScenes/truck_orient_err: 0.0394, pts_bbox_NuScenes/truck_vel_err: 0.2559, pts_bbox_NuScenes/truck_attr_err: 0.2068, pts_bbox_NuScenes/construction_vehicle_AP_dist_0.5: 0.0690, pts_bbox_NuScenes/construction_vehicle_AP_dist_1.0: 0.2284, pts_bbox_NuScenes/construction_vehicle_AP_dist_2.0: 0.4104, pts_bbox_NuScenes/construction_vehicle_AP_dist_4.0: 0.4827, pts_bbox_NuScenes/construction_vehicle_trans_err: 0.6328, pts_bbox_NuScenes/construction_vehicle_scale_err: 0.4346, pts_bbox_NuScenes/construction_vehicle_orient_err: 0.7960, pts_bbox_NuScenes/construction_vehicle_vel_err: 0.1086, pts_bbox_NuScenes/construction_vehicle_attr_err: 0.3126, pts_bbox_NuScenes/bus_AP_dist_0.5: 0.5180, pts_bbox_NuScenes/bus_AP_dist_1.0: 0.7464, pts_bbox_NuScenes/bus_AP_dist_2.0: 0.9107, pts_bbox_NuScenes/bus_AP_dist_4.0: 0.9312, pts_bbox_NuScenes/bus_trans_err: 0.3439, pts_bbox_NuScenes/bus_scale_err: 0.1960, pts_bbox_NuScenes/bus_orient_err: 0.0379, pts_bbox_NuScenes/bus_vel_err: 0.5000, pts_bbox_NuScenes/bus_attr_err: 0.3081, pts_bbox_NuScenes/trailer_AP_dist_0.5: 0.1717, pts_bbox_NuScenes/trailer_AP_dist_1.0: 0.4433, pts_bbox_NuScenes/trailer_AP_dist_2.0: 0.6091, pts_bbox_NuScenes/trailer_AP_dist_4.0: 0.6937, pts_bbox_NuScenes/trailer_trans_err: 0.4803, pts_bbox_NuScenes/trailer_scale_err: 0.2211, pts_bbox_NuScenes/trailer_orient_err: 0.4447, pts_bbox_NuScenes/trailer_vel_err: 0.2300, pts_bbox_NuScenes/trailer_attr_err: 0.1705, pts_bbox_NuScenes/barrier_AP_dist_0.5: 0.5924, pts_bbox_NuScenes/barrier_AP_dist_1.0: 0.6928, pts_bbox_NuScenes/barrier_AP_dist_2.0: 0.7385, pts_bbox_NuScenes/barrier_AP_dist_4.0: 0.7530, pts_bbox_NuScenes/barrier_trans_err: 0.2238, pts_bbox_NuScenes/barrier_scale_err: 0.2847, pts_bbox_NuScenes/barrier_orient_err: 0.0431, pts_bbox_NuScenes/barrier_vel_err: nan, pts_bbox_NuScenes/barrier_attr_err: nan, pts_bbox_NuScenes/motorcycle_AP_dist_0.5: 0.6539, pts_bbox_NuScenes/motorcycle_AP_dist_1.0: 0.7788, pts_bbox_NuScenes/motorcycle_AP_dist_2.0: 0.8006, pts_bbox_NuScenes/motorcycle_AP_dist_4.0: 0.8056, pts_bbox_NuScenes/motorcycle_trans_err: 0.2038, pts_bbox_NuScenes/motorcycle_scale_err: 0.2432, pts_bbox_NuScenes/motorcycle_orient_err: 0.1861, pts_bbox_NuScenes/motorcycle_vel_err: 0.3455, pts_bbox_NuScenes/motorcycle_attr_err: 0.2581, pts_bbox_NuScenes/bicycle_AP_dist_0.5: 0.5493, pts_bbox_NuScenes/bicycle_AP_dist_1.0: 0.5965, pts_bbox_NuScenes/bicycle_AP_dist_2.0: 0.6046, pts_bbox_NuScenes/bicycle_AP_dist_4.0: 0.6153, pts_bbox_NuScenes/bicycle_trans_err: 0.1691, pts_bbox_NuScenes/bicycle_scale_err: 0.2721, pts_bbox_NuScenes/bicycle_orient_err: 0.2762, pts_bbox_NuScenes/bicycle_vel_err: 0.1758, pts_bbox_NuScenes/bicycle_attr_err: 0.0063, pts_bbox_NuScenes/pedestrian_AP_dist_0.5: 0.8269, pts_bbox_NuScenes/pedestrian_AP_dist_1.0: 0.8635, pts_bbox_NuScenes/pedestrian_AP_dist_2.0: 0.8830, pts_bbox_NuScenes/pedestrian_AP_dist_4.0: 0.8933, pts_bbox_NuScenes/pedestrian_trans_err: 0.1449, pts_bbox_NuScenes/pedestrian_scale_err: 0.2938, pts_bbox_NuScenes/pedestrian_orient_err: 0.3274, pts_bbox_NuScenes/pedestrian_vel_err: 0.2067, pts_bbox_NuScenes/pedestrian_attr_err: 0.1114, pts_bbox_NuScenes/traffic_cone_AP_dist_0.5: 0.7404, pts_bbox_NuScenes/traffic_cone_AP_dist_1.0: 0.7744, pts_bbox_NuScenes/traffic_cone_AP_dist_2.0: 0.7998, pts_bbox_NuScenes/traffic_cone_AP_dist_4.0: 0.8223, pts_bbox_NuScenes/traffic_cone_trans_err: 0.1325, pts_bbox_NuScenes/traffic_cone_scale_err: 0.3303, pts_bbox_NuScenes/traffic_cone_orient_err: nan, pts_bbox_NuScenes/traffic_cone_vel_err: nan, pts_bbox_NuScenes/traffic_cone_attr_err: nan, pts_bbox_NuScenes/NDS: 0.7138, pts_bbox_NuScenes/mAP: 0.6772
2025-06-19 00:23:35,999 - mmdet - INFO - Epoch [5][50/7033]	lr: 5.015e-05, eta: 5:40:20, time: 1.540, data_time: 0.111, memory: 18614, loss_cls: 0.0685, loss_bbox: 0.1992, d0.loss_cls: 0.1709, d0.loss_bbox: 0.3324, d1.loss_cls: 0.1052, d1.loss_bbox: 0.2443, d2.loss_cls: 0.0880, d2.loss_bbox: 0.2193, d3.loss_cls: 0.0757, d3.loss_bbox: 0.2100, d4.loss_cls: 0.0715, d4.loss_bbox: 0.2006, loss: 1.9855, grad_norm: 18.9960
2025-06-19 00:24:48,751 - mmdet - INFO - Epoch [5][100/7033]	lr: 5.015e-05, eta: 5:39:07, time: 1.455, data_time: 0.025, memory: 18614, loss_cls: 0.0651, loss_bbox: 0.1918, d0.loss_cls: 0.1665, d0.loss_bbox: 0.3151, d1.loss_cls: 0.0968, d1.loss_bbox: 0.2346, d2.loss_cls: 0.0827, d2.loss_bbox: 0.2135, d3.loss_cls: 0.0723, d3.loss_bbox: 0.2020, d4.loss_cls: 0.0670, d4.loss_bbox: 0.1944, loss: 1.9019, grad_norm: 17.5000
2025-06-19 00:26:01,642 - mmdet - INFO - Epoch [5][150/7033]	lr: 5.015e-05, eta: 5:37:54, time: 1.458, data_time: 0.027, memory: 18614, loss_cls: 0.0725, loss_bbox: 0.1999, d0.loss_cls: 0.1740, d0.loss_bbox: 0.3280, d1.loss_cls: 0.1094, d1.loss_bbox: 0.2448, d2.loss_cls: 0.0917, d2.loss_bbox: 0.2213, d3.loss_cls: 0.0781, d3.loss_bbox: 0.2133, d4.loss_cls: 0.0751, d4.loss_bbox: 0.2021, loss: 2.0102, grad_norm: 27.1751
2025-06-19 00:27:14,991 - mmdet - INFO - Epoch [5][200/7033]	lr: 5.015e-05, eta: 5:36:42, time: 1.467, data_time: 0.037, memory: 18614, loss_cls: 0.0692, loss_bbox: 0.1968, d0.loss_cls: 0.1607, d0.loss_bbox: 0.3143, d1.loss_cls: 0.0992, d1.loss_bbox: 0.2386, d2.loss_cls: 0.0843, d2.loss_bbox: 0.2162, d3.loss_cls: 0.0748, d3.loss_bbox: 0.2077, d4.loss_cls: 0.0699, d4.loss_bbox: 0.2012, loss: 1.9326, grad_norm: 18.3579
2025-06-19 00:28:27,528 - mmdet - INFO - Epoch [5][250/7033]	lr: 5.015e-05, eta: 5:35:29, time: 1.451, data_time: 0.027, memory: 18614, loss_cls: 0.0676, loss_bbox: 0.1923, d0.loss_cls: 0.1635, d0.loss_bbox: 0.3106, d1.loss_cls: 0.1000, d1.loss_bbox: 0.2335, d2.loss_cls: 0.0824, d2.loss_bbox: 0.2142, d3.loss_cls: 0.0725, d3.loss_bbox: 0.2059, d4.loss_cls: 0.0676, d4.loss_bbox: 0.1976, loss: 1.9077, grad_norm: 58.5597
2025-06-19 00:29:40,209 - mmdet - INFO - Epoch [5][300/7033]	lr: 5.015e-05, eta: 5:34:16, time: 1.454, data_time: 0.026, memory: 18614, loss_cls: 0.0701, loss_bbox: 0.1960, d0.loss_cls: 0.1696, d0.loss_bbox: 0.3150, d1.loss_cls: 0.1015, d1.loss_bbox: 0.2376, d2.loss_cls: 0.0871, d2.loss_bbox: 0.2167, d3.loss_cls: 0.0756, d3.loss_bbox: 0.2088, d4.loss_cls: 0.0718, d4.loss_bbox: 0.1985, loss: 1.9483, grad_norm: 13332.5933
2025-06-19 00:30:52,892 - mmdet - INFO - Epoch [5][350/7033]	lr: 5.015e-05, eta: 5:33:03, time: 1.454, data_time: 0.026, memory: 18614, loss_cls: 0.0614, loss_bbox: 0.1925, d0.loss_cls: 0.1710, d0.loss_bbox: 0.3200, d1.loss_cls: 0.1003, d1.loss_bbox: 0.2351, d2.loss_cls: 0.0811, d2.loss_bbox: 0.2124, d3.loss_cls: 0.0689, d3.loss_bbox: 0.2054, d4.loss_cls: 0.0619, d4.loss_bbox: 0.1964, loss: 1.9065, grad_norm: 23.5126
2025-06-19 00:32:05,925 - mmdet - INFO - Epoch [5][400/7033]	lr: 5.015e-05, eta: 5:31:50, time: 1.461, data_time: 0.028, memory: 18614, loss_cls: 0.0553, loss_bbox: 0.1850, d0.loss_cls: 0.1575, d0.loss_bbox: 0.3124, d1.loss_cls: 0.0943, d1.loss_bbox: 0.2294, d2.loss_cls: 0.0744, d2.loss_bbox: 0.2064, d3.loss_cls: 0.0637, d3.loss_bbox: 0.1959, d4.loss_cls: 0.0580, d4.loss_bbox: 0.1878, loss: 1.8202, grad_norm: 42.1946
2025-06-19 00:33:18,910 - mmdet - INFO - Epoch [5][450/7033]	lr: 5.015e-05, eta: 5:30:37, time: 1.460, data_time: 0.029, memory: 18614, loss_cls: 0.0696, loss_bbox: 0.1953, d0.loss_cls: 0.1627, d0.loss_bbox: 0.3145, d1.loss_cls: 0.1072, d1.loss_bbox: 0.2353, d2.loss_cls: 0.0877, d2.loss_bbox: 0.2173, d3.loss_cls: 0.0759, d3.loss_bbox: 0.2085, d4.loss_cls: 0.0712, d4.loss_bbox: 0.1987, loss: 1.9439, grad_norm: 45.4062
2025-06-19 00:34:31,616 - mmdet - INFO - Epoch [5][500/7033]	lr: 5.015e-05, eta: 5:29:24, time: 1.454, data_time: 0.025, memory: 18614, loss_cls: 0.0728, loss_bbox: 0.1976, d0.loss_cls: 0.1833, d0.loss_bbox: 0.3263, d1.loss_cls: 0.1099, d1.loss_bbox: 0.2431, d2.loss_cls: 0.0925, d2.loss_bbox: 0.2199, d3.loss_cls: 0.0797, d3.loss_bbox: 0.2096, d4.loss_cls: 0.0734, d4.loss_bbox: 0.2014, loss: 2.0095, grad_norm: 26.5210
2025-06-19 00:35:46,262 - mmdet - INFO - Epoch [5][550/7033]	lr: 5.015e-05, eta: 5:28:12, time: 1.493, data_time: 0.026, memory: 18614, loss_cls: 0.0672, loss_bbox: 0.1895, d0.loss_cls: 0.1647, d0.loss_bbox: 0.3074, d1.loss_cls: 0.1004, d1.loss_bbox: 0.2297, d2.loss_cls: 0.0819, d2.loss_bbox: 0.2088, d3.loss_cls: 0.0736, d3.loss_bbox: 0.2011, d4.loss_cls: 0.0680, d4.loss_bbox: 0.1932, loss: 1.8856, grad_norm: 55.7899
2025-06-19 00:36:58,957 - mmdet - INFO - Epoch [5][600/7033]	lr: 5.015e-05, eta: 5:27:00, time: 1.454, data_time: 0.027, memory: 18614, loss_cls: 0.0657, loss_bbox: 0.1913, d0.loss_cls: 0.1659, d0.loss_bbox: 0.3183, d1.loss_cls: 0.1046, d1.loss_bbox: 0.2348, d2.loss_cls: 0.0859, d2.loss_bbox: 0.2121, d3.loss_cls: 0.0743, d3.loss_bbox: 0.2025, d4.loss_cls: 0.0698, d4.loss_bbox: 0.1930, loss: 1.9182, grad_norm: 45.7741
2025-06-19 00:38:11,832 - mmdet - INFO - Epoch [5][650/7033]	lr: 5.015e-05, eta: 5:25:47, time: 1.457, data_time: 0.026, memory: 18614, loss_cls: 0.0672, loss_bbox: 0.1956, d0.loss_cls: 0.1619, d0.loss_bbox: 0.3126, d1.loss_cls: 0.0982, d1.loss_bbox: 0.2357, d2.loss_cls: 0.0835, d2.loss_bbox: 0.2152, d3.loss_cls: 0.0744, d3.loss_bbox: 0.2053, d4.loss_cls: 0.0702, d4.loss_bbox: 0.1973, loss: 1.9171, grad_norm: 18.0048
2025-06-19 00:39:24,751 - mmdet - INFO - Epoch [5][700/7033]	lr: 5.015e-05, eta: 5:24:34, time: 1.458, data_time: 0.027, memory: 18614, loss_cls: 0.0609, loss_bbox: 0.1858, d0.loss_cls: 0.1597, d0.loss_bbox: 0.3172, d1.loss_cls: 0.0941, d1.loss_bbox: 0.2314, d2.loss_cls: 0.0811, d2.loss_bbox: 0.2106, d3.loss_cls: 0.0674, d3.loss_bbox: 0.2016, d4.loss_cls: 0.0621, d4.loss_bbox: 0.1903, loss: 1.8623, grad_norm: 28.8309
2025-06-19 00:40:37,435 - mmdet - INFO - Epoch [5][750/7033]	lr: 5.015e-05, eta: 5:23:21, time: 1.454, data_time: 0.027, memory: 18614, loss_cls: 0.0659, loss_bbox: 0.1850, d0.loss_cls: 0.1659, d0.loss_bbox: 0.3142, d1.loss_cls: 0.1027, d1.loss_bbox: 0.2329, d2.loss_cls: 0.0838, d2.loss_bbox: 0.2072, d3.loss_cls: 0.0715, d3.loss_bbox: 0.1979, d4.loss_cls: 0.0665, d4.loss_bbox: 0.1890, loss: 1.8825, grad_norm: 19.9037
2025-06-19 00:41:50,618 - mmdet - INFO - Epoch [5][800/7033]	lr: 5.015e-05, eta: 5:22:08, time: 1.464, data_time: 0.033, memory: 18614, loss_cls: 0.0627, loss_bbox: 0.1920, d0.loss_cls: 0.1643, d0.loss_bbox: 0.3160, d1.loss_cls: 0.0996, d1.loss_bbox: 0.2331, d2.loss_cls: 0.0807, d2.loss_bbox: 0.2127, d3.loss_cls: 0.0691, d3.loss_bbox: 0.2053, d4.loss_cls: 0.0643, d4.loss_bbox: 0.1962, loss: 1.8960, grad_norm: 26.3301
2025-06-19 00:43:03,288 - mmdet - INFO - Epoch [5][850/7033]	lr: 5.015e-05, eta: 5:20:55, time: 1.453, data_time: 0.027, memory: 18614, loss_cls: 0.0649, loss_bbox: 0.1925, d0.loss_cls: 0.1607, d0.loss_bbox: 0.3219, d1.loss_cls: 0.0969, d1.loss_bbox: 0.2384, d2.loss_cls: 0.0806, d2.loss_bbox: 0.2179, d3.loss_cls: 0.0716, d3.loss_bbox: 0.2072, d4.loss_cls: 0.0673, d4.loss_bbox: 0.1967, loss: 1.9165, grad_norm: 29.1348
2025-06-19 00:44:16,054 - mmdet - INFO - Epoch [5][900/7033]	lr: 5.015e-05, eta: 5:19:42, time: 1.455, data_time: 0.028, memory: 18614, loss_cls: 0.0622, loss_bbox: 0.1918, d0.loss_cls: 0.1646, d0.loss_bbox: 0.3106, d1.loss_cls: 0.0982, d1.loss_bbox: 0.2313, d2.loss_cls: 0.0791, d2.loss_bbox: 0.2095, d3.loss_cls: 0.0670, d3.loss_bbox: 0.2020, d4.loss_cls: 0.0627, d4.loss_bbox: 0.1947, loss: 1.8736, grad_norm: 45.2946
2025-06-19 00:45:28,769 - mmdet - INFO - Epoch [5][950/7033]	lr: 5.015e-05, eta: 5:18:30, time: 1.454, data_time: 0.028, memory: 18614, loss_cls: 0.0533, loss_bbox: 0.1828, d0.loss_cls: 0.1543, d0.loss_bbox: 0.3071, d1.loss_cls: 0.0865, d1.loss_bbox: 0.2247, d2.loss_cls: 0.0696, d2.loss_bbox: 0.2026, d3.loss_cls: 0.0579, d3.loss_bbox: 0.1952, d4.loss_cls: 0.0548, d4.loss_bbox: 0.1849, loss: 1.7738, grad_norm: 32.6083
2025-06-19 00:46:41,343 - mmdet - INFO - Epoch [5][1000/7033]	lr: 5.015e-05, eta: 5:17:17, time: 1.451, data_time: 0.025, memory: 18614, loss_cls: 0.0687, loss_bbox: 0.1932, d0.loss_cls: 0.1619, d0.loss_bbox: 0.3151, d1.loss_cls: 0.1017, d1.loss_bbox: 0.2352, d2.loss_cls: 0.0815, d2.loss_bbox: 0.2173, d3.loss_cls: 0.0737, d3.loss_bbox: 0.2069, d4.loss_cls: 0.0707, d4.loss_bbox: 0.1962, loss: 1.9222, grad_norm: 25.2494
2025-06-19 00:47:53,980 - mmdet - INFO - Epoch [5][1050/7033]	lr: 5.015e-05, eta: 5:16:04, time: 1.453, data_time: 0.027, memory: 18614, loss_cls: 0.0628, loss_bbox: 0.1913, d0.loss_cls: 0.1650, d0.loss_bbox: 0.3153, d1.loss_cls: 0.1005, d1.loss_bbox: 0.2367, d2.loss_cls: 0.0806, d2.loss_bbox: 0.2118, d3.loss_cls: 0.0706, d3.loss_bbox: 0.2027, d4.loss_cls: 0.0652, d4.loss_bbox: 0.1950, loss: 1.8975, grad_norm: 22.4854
2025-06-19 00:49:06,923 - mmdet - INFO - Epoch [5][1100/7033]	lr: 5.015e-05, eta: 5:14:51, time: 1.459, data_time: 0.028, memory: 18614, loss_cls: 0.0595, loss_bbox: 0.1926, d0.loss_cls: 0.1608, d0.loss_bbox: 0.3126, d1.loss_cls: 0.0967, d1.loss_bbox: 0.2333, d2.loss_cls: 0.0788, d2.loss_bbox: 0.2133, d3.loss_cls: 0.0661, d3.loss_bbox: 0.2048, d4.loss_cls: 0.0607, d4.loss_bbox: 0.1950, loss: 1.8742, grad_norm: 22.5936
2025-06-19 00:50:20,036 - mmdet - INFO - Epoch [5][1150/7033]	lr: 5.015e-05, eta: 5:13:38, time: 1.462, data_time: 0.029, memory: 18614, loss_cls: 0.0612, loss_bbox: 0.1841, d0.loss_cls: 0.1502, d0.loss_bbox: 0.2999, d1.loss_cls: 0.0956, d1.loss_bbox: 0.2236, d2.loss_cls: 0.0782, d2.loss_bbox: 0.2044, d3.loss_cls: 0.0681, d3.loss_bbox: 0.1969, d4.loss_cls: 0.0633, d4.loss_bbox: 0.1877, loss: 1.8132, grad_norm: 19.5383
2025-06-19 00:51:32,770 - mmdet - INFO - Epoch [5][1200/7033]	lr: 5.015e-05, eta: 5:12:25, time: 1.455, data_time: 0.029, memory: 18614, loss_cls: 0.0609, loss_bbox: 0.1880, d0.loss_cls: 0.1593, d0.loss_bbox: 0.3069, d1.loss_cls: 0.0963, d1.loss_bbox: 0.2296, d2.loss_cls: 0.0787, d2.loss_bbox: 0.2073, d3.loss_cls: 0.0657, d3.loss_bbox: 0.1996, d4.loss_cls: 0.0620, d4.loss_bbox: 0.1916, loss: 1.8459, grad_norm: 18.3222
2025-06-19 00:52:45,541 - mmdet - INFO - Epoch [5][1250/7033]	lr: 5.015e-05, eta: 5:11:12, time: 1.455, data_time: 0.029, memory: 18614, loss_cls: 0.0619, loss_bbox: 0.1892, d0.loss_cls: 0.1641, d0.loss_bbox: 0.3112, d1.loss_cls: 0.0932, d1.loss_bbox: 0.2322, d2.loss_cls: 0.0765, d2.loss_bbox: 0.2108, d3.loss_cls: 0.0676, d3.loss_bbox: 0.2022, d4.loss_cls: 0.0631, d4.loss_bbox: 0.1934, loss: 1.8651, grad_norm: 24.9032
2025-06-19 00:53:58,308 - mmdet - INFO - Epoch [5][1300/7033]	lr: 5.015e-05, eta: 5:09:59, time: 1.455, data_time: 0.028, memory: 18614, loss_cls: 0.0621, loss_bbox: 0.1855, d0.loss_cls: 0.1597, d0.loss_bbox: 0.3059, d1.loss_cls: 0.0968, d1.loss_bbox: 0.2278, d2.loss_cls: 0.0785, d2.loss_bbox: 0.2059, d3.loss_cls: 0.0673, d3.loss_bbox: 0.1977, d4.loss_cls: 0.0627, d4.loss_bbox: 0.1885, loss: 1.8386, grad_norm: 27.0196
2025-06-19 00:55:11,008 - mmdet - INFO - Epoch [5][1350/7033]	lr: 5.015e-05, eta: 5:08:47, time: 1.454, data_time: 0.026, memory: 18614, loss_cls: 0.0710, loss_bbox: 0.1935, d0.loss_cls: 0.1654, d0.loss_bbox: 0.3236, d1.loss_cls: 0.1096, d1.loss_bbox: 0.2352, d2.loss_cls: 0.0885, d2.loss_bbox: 0.2173, d3.loss_cls: 0.0775, d3.loss_bbox: 0.2078, d4.loss_cls: 0.0727, d4.loss_bbox: 0.1975, loss: 1.9597, grad_norm: 23.7853
2025-06-19 00:56:23,685 - mmdet - INFO - Epoch [5][1400/7033]	lr: 5.015e-05, eta: 5:07:34, time: 1.454, data_time: 0.025, memory: 18614, loss_cls: 0.0590, loss_bbox: 0.1807, d0.loss_cls: 0.1596, d0.loss_bbox: 0.3024, d1.loss_cls: 0.0942, d1.loss_bbox: 0.2231, d2.loss_cls: 0.0752, d2.loss_bbox: 0.2009, d3.loss_cls: 0.0638, d3.loss_bbox: 0.1930, d4.loss_cls: 0.0603, d4.loss_bbox: 0.1836, loss: 1.7958, grad_norm: 31.4362
2025-06-19 00:57:36,409 - mmdet - INFO - Epoch [5][1450/7033]	lr: 5.015e-05, eta: 5:06:21, time: 1.454, data_time: 0.026, memory: 18614, loss_cls: 0.0690, loss_bbox: 0.1981, d0.loss_cls: 0.1679, d0.loss_bbox: 0.3212, d1.loss_cls: 0.1014, d1.loss_bbox: 0.2423, d2.loss_cls: 0.0847, d2.loss_bbox: 0.2203, d3.loss_cls: 0.0749, d3.loss_bbox: 0.2109, d4.loss_cls: 0.0700, d4.loss_bbox: 0.2025, loss: 1.9631, grad_norm: 20.3604
2025-06-19 00:58:49,128 - mmdet - INFO - Epoch [5][1500/7033]	lr: 5.015e-05, eta: 5:05:08, time: 1.454, data_time: 0.028, memory: 18614, loss_cls: 0.0666, loss_bbox: 0.1904, d0.loss_cls: 0.1625, d0.loss_bbox: 0.3063, d1.loss_cls: 0.0995, d1.loss_bbox: 0.2299, d2.loss_cls: 0.0827, d2.loss_bbox: 0.2101, d3.loss_cls: 0.0740, d3.loss_bbox: 0.2033, d4.loss_cls: 0.0686, d4.loss_bbox: 0.1937, loss: 1.8876, grad_norm: 45.8140
2025-06-19 01:00:01,892 - mmdet - INFO - Epoch [5][1550/7033]	lr: 5.015e-05, eta: 5:03:55, time: 1.455, data_time: 0.026, memory: 18614, loss_cls: 0.0648, loss_bbox: 0.1972, d0.loss_cls: 0.1670, d0.loss_bbox: 0.3149, d1.loss_cls: 0.1020, d1.loss_bbox: 0.2385, d2.loss_cls: 0.0824, d2.loss_bbox: 0.2164, d3.loss_cls: 0.0712, d3.loss_bbox: 0.2099, d4.loss_cls: 0.0662, d4.loss_bbox: 0.2007, loss: 1.9310, grad_norm: 57.8490
2025-06-19 01:01:14,703 - mmdet - INFO - Epoch [5][1600/7033]	lr: 5.015e-05, eta: 5:02:42, time: 1.456, data_time: 0.028, memory: 18614, loss_cls: 0.0669, loss_bbox: 0.1920, d0.loss_cls: 0.1662, d0.loss_bbox: 0.3084, d1.loss_cls: 0.1017, d1.loss_bbox: 0.2315, d2.loss_cls: 0.0838, d2.loss_bbox: 0.2109, d3.loss_cls: 0.0725, d3.loss_bbox: 0.2023, d4.loss_cls: 0.0696, d4.loss_bbox: 0.1933, loss: 1.8990, grad_norm: 19.9646
2025-06-19 01:02:27,734 - mmdet - INFO - Epoch [5][1650/7033]	lr: 5.015e-05, eta: 5:01:29, time: 1.461, data_time: 0.031, memory: 18614, loss_cls: 0.0638, loss_bbox: 0.1966, d0.loss_cls: 0.1676, d0.loss_bbox: 0.3177, d1.loss_cls: 0.1014, d1.loss_bbox: 0.2353, d2.loss_cls: 0.0825, d2.loss_bbox: 0.2174, d3.loss_cls: 0.0703, d3.loss_bbox: 0.2092, d4.loss_cls: 0.0656, d4.loss_bbox: 0.2000, loss: 1.9274, grad_norm: 23.0447
2025-06-19 01:03:40,351 - mmdet - INFO - Epoch [5][1700/7033]	lr: 5.015e-05, eta: 5:00:16, time: 1.452, data_time: 0.026, memory: 18614, loss_cls: 0.0664, loss_bbox: 0.1871, d0.loss_cls: 0.1637, d0.loss_bbox: 0.3092, d1.loss_cls: 0.0987, d1.loss_bbox: 0.2287, d2.loss_cls: 0.0818, d2.loss_bbox: 0.2114, d3.loss_cls: 0.0721, d3.loss_bbox: 0.2020, d4.loss_cls: 0.0677, d4.loss_bbox: 0.1909, loss: 1.8797, grad_norm: 22.2889
2025-06-19 01:04:53,061 - mmdet - INFO - Epoch [5][1750/7033]	lr: 5.015e-05, eta: 4:59:03, time: 1.454, data_time: 0.026, memory: 18614, loss_cls: 0.0686, loss_bbox: 0.1877, d0.loss_cls: 0.1684, d0.loss_bbox: 0.3021, d1.loss_cls: 0.0997, d1.loss_bbox: 0.2284, d2.loss_cls: 0.0842, d2.loss_bbox: 0.2068, d3.loss_cls: 0.0729, d3.loss_bbox: 0.1993, d4.loss_cls: 0.0690, d4.loss_bbox: 0.1912, loss: 1.8785, grad_norm: 52.9971
2025-06-19 01:06:06,076 - mmdet - INFO - Epoch [5][1800/7033]	lr: 5.015e-05, eta: 4:57:51, time: 1.460, data_time: 0.027, memory: 18614, loss_cls: 0.0643, loss_bbox: 0.1923, d0.loss_cls: 0.1633, d0.loss_bbox: 0.3136, d1.loss_cls: 0.1015, d1.loss_bbox: 0.2345, d2.loss_cls: 0.0811, d2.loss_bbox: 0.2134, d3.loss_cls: 0.0713, d3.loss_bbox: 0.2047, d4.loss_cls: 0.0657, d4.loss_bbox: 0.1950, loss: 1.9008, grad_norm: 19.9834
2025-06-19 01:07:18,918 - mmdet - INFO - Epoch [5][1850/7033]	lr: 5.015e-05, eta: 4:56:38, time: 1.457, data_time: 0.029, memory: 18614, loss_cls: 0.0594, loss_bbox: 0.1873, d0.loss_cls: 0.1559, d0.loss_bbox: 0.3062, d1.loss_cls: 0.0925, d1.loss_bbox: 0.2283, d2.loss_cls: 0.0747, d2.loss_bbox: 0.2101, d3.loss_cls: 0.0656, d3.loss_bbox: 0.1999, d4.loss_cls: 0.0603, d4.loss_bbox: 0.1916, loss: 1.8316, grad_norm: 19.4426
2025-06-19 01:08:31,702 - mmdet - INFO - Epoch [5][1900/7033]	lr: 5.015e-05, eta: 4:55:25, time: 1.456, data_time: 0.026, memory: 18614, loss_cls: 0.0654, loss_bbox: 0.1995, d0.loss_cls: 0.1600, d0.loss_bbox: 0.3178, d1.loss_cls: 0.0949, d1.loss_bbox: 0.2425, d2.loss_cls: 0.0820, d2.loss_bbox: 0.2202, d3.loss_cls: 0.0739, d3.loss_bbox: 0.2105, d4.loss_cls: 0.0679, d4.loss_bbox: 0.2008, loss: 1.9356, grad_norm: 41.5169
2025-06-19 01:09:44,629 - mmdet - INFO - Epoch [5][1950/7033]	lr: 5.015e-05, eta: 4:54:12, time: 1.459, data_time: 0.025, memory: 18614, loss_cls: 0.0649, loss_bbox: 0.1968, d0.loss_cls: 0.1637, d0.loss_bbox: 0.3167, d1.loss_cls: 0.0993, d1.loss_bbox: 0.2373, d2.loss_cls: 0.0822, d2.loss_bbox: 0.2179, d3.loss_cls: 0.0727, d3.loss_bbox: 0.2084, d4.loss_cls: 0.0675, d4.loss_bbox: 0.1995, loss: 1.9269, grad_norm: 23.6427
2025-06-19 01:10:57,698 - mmdet - INFO - Epoch [5][2000/7033]	lr: 5.015e-05, eta: 4:52:59, time: 1.461, data_time: 0.027, memory: 18614, loss_cls: 0.0617, loss_bbox: 0.1917, d0.loss_cls: 0.1628, d0.loss_bbox: 0.3146, d1.loss_cls: 0.0936, d1.loss_bbox: 0.2306, d2.loss_cls: 0.0750, d2.loss_bbox: 0.2126, d3.loss_cls: 0.0669, d3.loss_bbox: 0.2040, d4.loss_cls: 0.0620, d4.loss_bbox: 0.1958, loss: 1.8714, grad_norm: 37.1343
2025-06-19 01:12:10,619 - mmdet - INFO - Epoch [5][2050/7033]	lr: 5.015e-05, eta: 4:51:47, time: 1.458, data_time: 0.028, memory: 18614, loss_cls: 0.0649, loss_bbox: 0.1915, d0.loss_cls: 0.1606, d0.loss_bbox: 0.3098, d1.loss_cls: 0.0948, d1.loss_bbox: 0.2361, d2.loss_cls: 0.0808, d2.loss_bbox: 0.2147, d3.loss_cls: 0.0714, d3.loss_bbox: 0.2052, d4.loss_cls: 0.0664, d4.loss_bbox: 0.1959, loss: 1.8920, grad_norm: 19.1136
2025-06-19 01:13:23,322 - mmdet - INFO - Epoch [5][2100/7033]	lr: 5.015e-05, eta: 4:50:34, time: 1.454, data_time: 0.028, memory: 18614, loss_cls: 0.0673, loss_bbox: 0.1889, d0.loss_cls: 0.1634, d0.loss_bbox: 0.3246, d1.loss_cls: 0.1020, d1.loss_bbox: 0.2358, d2.loss_cls: 0.0861, d2.loss_bbox: 0.2101, d3.loss_cls: 0.0738, d3.loss_bbox: 0.2024, d4.loss_cls: 0.0694, d4.loss_bbox: 0.1928, loss: 1.9165, grad_norm: 27.0516
2025-06-19 01:14:37,927 - mmdet - INFO - Epoch [5][2150/7033]	lr: 5.015e-05, eta: 4:49:21, time: 1.492, data_time: 0.028, memory: 18614, loss_cls: 0.0651, loss_bbox: 0.1940, d0.loss_cls: 0.1617, d0.loss_bbox: 0.3194, d1.loss_cls: 0.0960, d1.loss_bbox: 0.2374, d2.loss_cls: 0.0823, d2.loss_bbox: 0.2168, d3.loss_cls: 0.0727, d3.loss_bbox: 0.2056, d4.loss_cls: 0.0670, d4.loss_bbox: 0.1975, loss: 1.9154, grad_norm: 65.4104
2025-06-19 01:15:50,660 - mmdet - INFO - Epoch [5][2200/7033]	lr: 5.015e-05, eta: 4:48:09, time: 1.455, data_time: 0.026, memory: 18614, loss_cls: 0.0625, loss_bbox: 0.1847, d0.loss_cls: 0.1617, d0.loss_bbox: 0.3024, d1.loss_cls: 0.0987, d1.loss_bbox: 0.2281, d2.loss_cls: 0.0802, d2.loss_bbox: 0.2081, d3.loss_cls: 0.0707, d3.loss_bbox: 0.1980, d4.loss_cls: 0.0636, d4.loss_bbox: 0.1883, loss: 1.8471, grad_norm: 25.4346
2025-06-19 01:17:04,087 - mmdet - INFO - Epoch [5][2250/7033]	lr: 5.015e-05, eta: 4:46:56, time: 1.469, data_time: 0.033, memory: 18614, loss_cls: 0.0635, loss_bbox: 0.1933, d0.loss_cls: 0.1564, d0.loss_bbox: 0.3105, d1.loss_cls: 0.0947, d1.loss_bbox: 0.2317, d2.loss_cls: 0.0758, d2.loss_bbox: 0.2136, d3.loss_cls: 0.0691, d3.loss_bbox: 0.2046, d4.loss_cls: 0.0649, d4.loss_bbox: 0.1968, loss: 1.8749, grad_norm: 26.7582
2025-06-19 01:18:17,126 - mmdet - INFO - Epoch [5][2300/7033]	lr: 5.015e-05, eta: 4:45:43, time: 1.461, data_time: 0.028, memory: 18614, loss_cls: 0.0669, loss_bbox: 0.1904, d0.loss_cls: 0.1555, d0.loss_bbox: 0.3184, d1.loss_cls: 0.0963, d1.loss_bbox: 0.2363, d2.loss_cls: 0.0812, d2.loss_bbox: 0.2127, d3.loss_cls: 0.0718, d3.loss_bbox: 0.2036, d4.loss_cls: 0.0678, d4.loss_bbox: 0.1946, loss: 1.8956, grad_norm: 28.8488
2025-06-19 01:19:30,297 - mmdet - INFO - Epoch [5][2350/7033]	lr: 5.015e-05, eta: 4:44:30, time: 1.463, data_time: 0.030, memory: 18614, loss_cls: 0.0637, loss_bbox: 0.1893, d0.loss_cls: 0.1598, d0.loss_bbox: 0.3081, d1.loss_cls: 0.0940, d1.loss_bbox: 0.2316, d2.loss_cls: 0.0796, d2.loss_bbox: 0.2081, d3.loss_cls: 0.0697, d3.loss_bbox: 0.1989, d4.loss_cls: 0.0649, d4.loss_bbox: 0.1920, loss: 1.8597, grad_norm: 38.1968
2025-06-19 01:20:43,120 - mmdet - INFO - Epoch [5][2400/7033]	lr: 5.015e-05, eta: 4:43:18, time: 1.456, data_time: 0.026, memory: 18614, loss_cls: 0.0631, loss_bbox: 0.1872, d0.loss_cls: 0.1554, d0.loss_bbox: 0.3144, d1.loss_cls: 0.0935, d1.loss_bbox: 0.2312, d2.loss_cls: 0.0793, d2.loss_bbox: 0.2080, d3.loss_cls: 0.0693, d3.loss_bbox: 0.1998, d4.loss_cls: 0.0643, d4.loss_bbox: 0.1906, loss: 1.8559, grad_norm: 21.2640
2025-06-19 01:21:55,832 - mmdet - INFO - Epoch [5][2450/7033]	lr: 5.015e-05, eta: 4:42:05, time: 1.454, data_time: 0.025, memory: 18614, loss_cls: 0.0672, loss_bbox: 0.1947, d0.loss_cls: 0.1675, d0.loss_bbox: 0.3193, d1.loss_cls: 0.1020, d1.loss_bbox: 0.2383, d2.loss_cls: 0.0847, d2.loss_bbox: 0.2146, d3.loss_cls: 0.0720, d3.loss_bbox: 0.2055, d4.loss_cls: 0.0698, d4.loss_bbox: 0.1970, loss: 1.9328, grad_norm: 22.9557
2025-06-19 01:23:08,982 - mmdet - INFO - Epoch [5][2500/7033]	lr: 5.015e-05, eta: 4:40:52, time: 1.463, data_time: 0.027, memory: 18614, loss_cls: 0.0580, loss_bbox: 0.1839, d0.loss_cls: 0.1480, d0.loss_bbox: 0.3007, d1.loss_cls: 0.0940, d1.loss_bbox: 0.2205, d2.loss_cls: 0.0758, d2.loss_bbox: 0.2012, d3.loss_cls: 0.0648, d3.loss_bbox: 0.1951, d4.loss_cls: 0.0599, d4.loss_bbox: 0.1879, loss: 1.7898, grad_norm: 20.4304
2025-06-19 01:24:21,437 - mmdet - INFO - Epoch [5][2550/7033]	lr: 5.015e-05, eta: 4:39:39, time: 1.449, data_time: 0.028, memory: 18614, loss_cls: 0.0627, loss_bbox: 0.1855, d0.loss_cls: 0.1595, d0.loss_bbox: 0.3090, d1.loss_cls: 0.0988, d1.loss_bbox: 0.2268, d2.loss_cls: 0.0804, d2.loss_bbox: 0.2060, d3.loss_cls: 0.0690, d3.loss_bbox: 0.1983, d4.loss_cls: 0.0638, d4.loss_bbox: 0.1893, loss: 1.8492, grad_norm: 20.8952
2025-06-19 01:25:34,517 - mmdet - INFO - Epoch [5][2600/7033]	lr: 5.015e-05, eta: 4:38:26, time: 1.462, data_time: 0.027, memory: 18614, loss_cls: 0.0723, loss_bbox: 0.1955, d0.loss_cls: 0.1674, d0.loss_bbox: 0.3207, d1.loss_cls: 0.1073, d1.loss_bbox: 0.2364, d2.loss_cls: 0.0914, d2.loss_bbox: 0.2149, d3.loss_cls: 0.0789, d3.loss_bbox: 0.2070, d4.loss_cls: 0.0730, d4.loss_bbox: 0.1995, loss: 1.9642, grad_norm: 38.9171
2025-06-19 01:26:47,220 - mmdet - INFO - Epoch [5][2650/7033]	lr: 5.015e-05, eta: 4:37:13, time: 1.454, data_time: 0.025, memory: 18614, loss_cls: 0.0635, loss_bbox: 0.1913, d0.loss_cls: 0.1585, d0.loss_bbox: 0.3150, d1.loss_cls: 0.0976, d1.loss_bbox: 0.2351, d2.loss_cls: 0.0806, d2.loss_bbox: 0.2103, d3.loss_cls: 0.0697, d3.loss_bbox: 0.2024, d4.loss_cls: 0.0647, d4.loss_bbox: 0.1949, loss: 1.8834, grad_norm: 21.7617
2025-06-19 01:28:07,007 - mmdet - INFO - Epoch [5][2700/7033]	lr: 5.015e-05, eta: 4:36:03, time: 1.596, data_time: 0.029, memory: 18614, loss_cls: 0.0648, loss_bbox: 0.1886, d0.loss_cls: 0.1616, d0.loss_bbox: 0.3094, d1.loss_cls: 0.0977, d1.loss_bbox: 0.2277, d2.loss_cls: 0.0821, d2.loss_bbox: 0.2081, d3.loss_cls: 0.0699, d3.loss_bbox: 0.2005, d4.loss_cls: 0.0668, d4.loss_bbox: 0.1917, loss: 1.8689, grad_norm: 20.7252
2025-06-19 01:29:19,793 - mmdet - INFO - Epoch [5][2750/7033]	lr: 5.015e-05, eta: 4:34:50, time: 1.456, data_time: 0.028, memory: 18614, loss_cls: 0.0664, loss_bbox: 0.1939, d0.loss_cls: 0.1636, d0.loss_bbox: 0.3135, d1.loss_cls: 0.1000, d1.loss_bbox: 0.2364, d2.loss_cls: 0.0823, d2.loss_bbox: 0.2146, d3.loss_cls: 0.0724, d3.loss_bbox: 0.2070, d4.loss_cls: 0.0668, d4.loss_bbox: 0.1985, loss: 1.9156, grad_norm: 16.4198
2025-06-19 01:30:32,474 - mmdet - INFO - Epoch [5][2800/7033]	lr: 5.015e-05, eta: 4:33:37, time: 1.454, data_time: 0.027, memory: 18614, loss_cls: 0.0638, loss_bbox: 0.1949, d0.loss_cls: 0.1600, d0.loss_bbox: 0.3143, d1.loss_cls: 0.0987, d1.loss_bbox: 0.2357, d2.loss_cls: 0.0801, d2.loss_bbox: 0.2148, d3.loss_cls: 0.0695, d3.loss_bbox: 0.2075, d4.loss_cls: 0.0641, d4.loss_bbox: 0.1977, loss: 1.9011, grad_norm: 27.3102
2025-06-19 01:31:45,187 - mmdet - INFO - Epoch [5][2850/7033]	lr: 5.015e-05, eta: 4:32:24, time: 1.454, data_time: 0.026, memory: 18614, loss_cls: 0.0708, loss_bbox: 0.1982, d0.loss_cls: 0.1684, d0.loss_bbox: 0.3085, d1.loss_cls: 0.1022, d1.loss_bbox: 0.2372, d2.loss_cls: 0.0859, d2.loss_bbox: 0.2175, d3.loss_cls: 0.0759, d3.loss_bbox: 0.2104, d4.loss_cls: 0.0718, d4.loss_bbox: 0.2018, loss: 1.9487, grad_norm: 20.4623
2025-06-19 01:32:58,152 - mmdet - INFO - Epoch [5][2900/7033]	lr: 5.015e-05, eta: 4:31:11, time: 1.459, data_time: 0.028, memory: 18614, loss_cls: 0.0616, loss_bbox: 0.1827, d0.loss_cls: 0.1571, d0.loss_bbox: 0.3023, d1.loss_cls: 0.0927, d1.loss_bbox: 0.2246, d2.loss_cls: 0.0754, d2.loss_bbox: 0.2072, d3.loss_cls: 0.0663, d3.loss_bbox: 0.1960, d4.loss_cls: 0.0623, d4.loss_bbox: 0.1868, loss: 1.8152, grad_norm: 20.3501
2025-06-19 01:34:11,775 - mmdet - INFO - Epoch [5][2950/7033]	lr: 5.015e-05, eta: 4:29:59, time: 1.472, data_time: 0.047, memory: 18614, loss_cls: 0.0672, loss_bbox: 0.1975, d0.loss_cls: 0.1625, d0.loss_bbox: 0.3238, d1.loss_cls: 0.1019, d1.loss_bbox: 0.2406, d2.loss_cls: 0.0836, d2.loss_bbox: 0.2198, d3.loss_cls: 0.0723, d3.loss_bbox: 0.2116, d4.loss_cls: 0.0683, d4.loss_bbox: 0.2006, loss: 1.9498, grad_norm: 27.3367
2025-06-19 01:35:24,772 - mmdet - INFO - Epoch [5][3000/7033]	lr: 5.015e-05, eta: 4:28:46, time: 1.460, data_time: 0.028, memory: 18614, loss_cls: 0.0637, loss_bbox: 0.1833, d0.loss_cls: 0.1599, d0.loss_bbox: 0.3024, d1.loss_cls: 0.0936, d1.loss_bbox: 0.2233, d2.loss_cls: 0.0798, d2.loss_bbox: 0.2031, d3.loss_cls: 0.0691, d3.loss_bbox: 0.1958, d4.loss_cls: 0.0651, d4.loss_bbox: 0.1861, loss: 1.8252, grad_norm: 158.9932
2025-06-19 01:36:37,651 - mmdet - INFO - Epoch [5][3050/7033]	lr: 5.015e-05, eta: 4:27:33, time: 1.458, data_time: 0.026, memory: 18614, loss_cls: 0.0586, loss_bbox: 0.1914, d0.loss_cls: 0.1530, d0.loss_bbox: 0.3141, d1.loss_cls: 0.0937, d1.loss_bbox: 0.2351, d2.loss_cls: 0.0749, d2.loss_bbox: 0.2130, d3.loss_cls: 0.0649, d3.loss_bbox: 0.2056, d4.loss_cls: 0.0611, d4.loss_bbox: 0.1935, loss: 1.8591, grad_norm: 18.4826
2025-06-19 01:37:50,666 - mmdet - INFO - Epoch [5][3100/7033]	lr: 5.015e-05, eta: 4:26:20, time: 1.460, data_time: 0.033, memory: 18614, loss_cls: 0.0668, loss_bbox: 0.1987, d0.loss_cls: 0.1645, d0.loss_bbox: 0.3266, d1.loss_cls: 0.1007, d1.loss_bbox: 0.2411, d2.loss_cls: 0.0851, d2.loss_bbox: 0.2187, d3.loss_cls: 0.0746, d3.loss_bbox: 0.2108, d4.loss_cls: 0.0691, d4.loss_bbox: 0.2024, loss: 1.9592, grad_norm: 48.0621
2025-06-19 01:39:03,306 - mmdet - INFO - Epoch [5][3150/7033]	lr: 5.015e-05, eta: 4:25:07, time: 1.453, data_time: 0.029, memory: 18614, loss_cls: 0.0592, loss_bbox: 0.1920, d0.loss_cls: 0.1500, d0.loss_bbox: 0.3101, d1.loss_cls: 0.0905, d1.loss_bbox: 0.2339, d2.loss_cls: 0.0772, d2.loss_bbox: 0.2136, d3.loss_cls: 0.0647, d3.loss_bbox: 0.2060, d4.loss_cls: 0.0600, d4.loss_bbox: 0.1945, loss: 1.8517, grad_norm: 60.9678
2025-06-19 01:40:16,241 - mmdet - INFO - Epoch [5][3200/7033]	lr: 5.015e-05, eta: 4:23:54, time: 1.459, data_time: 0.028, memory: 18614, loss_cls: 0.0607, loss_bbox: 0.1862, d0.loss_cls: 0.1524, d0.loss_bbox: 0.3078, d1.loss_cls: 0.0947, d1.loss_bbox: 0.2232, d2.loss_cls: 0.0773, d2.loss_bbox: 0.2064, d3.loss_cls: 0.0685, d3.loss_bbox: 0.1970, d4.loss_cls: 0.0645, d4.loss_bbox: 0.1886, loss: 1.8273, grad_norm: 38.6914
2025-06-19 01:41:30,884 - mmdet - INFO - Epoch [5][3250/7033]	lr: 5.015e-05, eta: 4:22:42, time: 1.493, data_time: 0.028, memory: 18614, loss_cls: 0.0624, loss_bbox: 0.1904, d0.loss_cls: 0.1609, d0.loss_bbox: 0.3144, d1.loss_cls: 0.0956, d1.loss_bbox: 0.2361, d2.loss_cls: 0.0786, d2.loss_bbox: 0.2137, d3.loss_cls: 0.0664, d3.loss_bbox: 0.2045, d4.loss_cls: 0.0621, d4.loss_bbox: 0.1954, loss: 1.8805, grad_norm: 34.6031
2025-06-19 01:42:43,882 - mmdet - INFO - Epoch [5][3300/7033]	lr: 5.015e-05, eta: 4:21:29, time: 1.460, data_time: 0.028, memory: 18614, loss_cls: 0.0684, loss_bbox: 0.2001, d0.loss_cls: 0.1619, d0.loss_bbox: 0.3209, d1.loss_cls: 0.1051, d1.loss_bbox: 0.2440, d2.loss_cls: 0.0892, d2.loss_bbox: 0.2200, d3.loss_cls: 0.0768, d3.loss_bbox: 0.2124, d4.loss_cls: 0.0702, d4.loss_bbox: 0.2029, loss: 1.9719, grad_norm: 24.2972
2025-06-19 01:43:56,459 - mmdet - INFO - Epoch [5][3350/7033]	lr: 5.015e-05, eta: 4:20:16, time: 1.452, data_time: 0.025, memory: 18614, loss_cls: 0.0615, loss_bbox: 0.1932, d0.loss_cls: 0.1599, d0.loss_bbox: 0.3145, d1.loss_cls: 0.0975, d1.loss_bbox: 0.2374, d2.loss_cls: 0.0818, d2.loss_bbox: 0.2135, d3.loss_cls: 0.0695, d3.loss_bbox: 0.2061, d4.loss_cls: 0.0641, d4.loss_bbox: 0.1962, loss: 1.8951, grad_norm: 19.3690
2025-06-19 01:45:09,207 - mmdet - INFO - Epoch [5][3400/7033]	lr: 5.015e-05, eta: 4:19:04, time: 1.455, data_time: 0.029, memory: 18614, loss_cls: 0.0641, loss_bbox: 0.1855, d0.loss_cls: 0.1557, d0.loss_bbox: 0.3051, d1.loss_cls: 0.0981, d1.loss_bbox: 0.2272, d2.loss_cls: 0.0807, d2.loss_bbox: 0.2057, d3.loss_cls: 0.0699, d3.loss_bbox: 0.1971, d4.loss_cls: 0.0658, d4.loss_bbox: 0.1879, loss: 1.8430, grad_norm: 50.2492
2025-06-19 01:46:22,480 - mmdet - INFO - Epoch [5][3450/7033]	lr: 5.015e-05, eta: 4:17:51, time: 1.465, data_time: 0.035, memory: 18614, loss_cls: 0.0632, loss_bbox: 0.1871, d0.loss_cls: 0.1520, d0.loss_bbox: 0.3051, d1.loss_cls: 0.0928, d1.loss_bbox: 0.2258, d2.loss_cls: 0.0779, d2.loss_bbox: 0.2048, d3.loss_cls: 0.0665, d3.loss_bbox: 0.1995, d4.loss_cls: 0.0635, d4.loss_bbox: 0.1906, loss: 1.8287, grad_norm: 19.2972
2025-06-19 01:47:35,310 - mmdet - INFO - Epoch [5][3500/7033]	lr: 5.015e-05, eta: 4:16:38, time: 1.457, data_time: 0.028, memory: 18614, loss_cls: 0.0629, loss_bbox: 0.1874, d0.loss_cls: 0.1546, d0.loss_bbox: 0.3016, d1.loss_cls: 0.0966, d1.loss_bbox: 0.2267, d2.loss_cls: 0.0785, d2.loss_bbox: 0.2062, d3.loss_cls: 0.0706, d3.loss_bbox: 0.1981, d4.loss_cls: 0.0647, d4.loss_bbox: 0.1903, loss: 1.8382, grad_norm: 30.3159
2025-06-19 01:48:48,170 - mmdet - INFO - Epoch [5][3550/7033]	lr: 5.015e-05, eta: 4:15:25, time: 1.457, data_time: 0.027, memory: 18614, loss_cls: 0.0635, loss_bbox: 0.1885, d0.loss_cls: 0.1564, d0.loss_bbox: 0.3062, d1.loss_cls: 0.1001, d1.loss_bbox: 0.2277, d2.loss_cls: 0.0810, d2.loss_bbox: 0.2087, d3.loss_cls: 0.0691, d3.loss_bbox: 0.2001, d4.loss_cls: 0.0642, d4.loss_bbox: 0.1913, loss: 1.8568, grad_norm: 73.7945
2025-06-19 01:50:00,913 - mmdet - INFO - Epoch [5][3600/7033]	lr: 5.015e-05, eta: 4:14:12, time: 1.455, data_time: 0.026, memory: 18614, loss_cls: 0.0648, loss_bbox: 0.1870, d0.loss_cls: 0.1603, d0.loss_bbox: 0.3027, d1.loss_cls: 0.0987, d1.loss_bbox: 0.2262, d2.loss_cls: 0.0825, d2.loss_bbox: 0.2070, d3.loss_cls: 0.0715, d3.loss_bbox: 0.1988, d4.loss_cls: 0.0664, d4.loss_bbox: 0.1896, loss: 1.8556, grad_norm: 36.8614
2025-06-19 01:51:13,824 - mmdet - INFO - Epoch [5][3650/7033]	lr: 5.015e-05, eta: 4:12:59, time: 1.458, data_time: 0.029, memory: 18614, loss_cls: 0.0646, loss_bbox: 0.1853, d0.loss_cls: 0.1598, d0.loss_bbox: 0.3073, d1.loss_cls: 0.0974, d1.loss_bbox: 0.2246, d2.loss_cls: 0.0802, d2.loss_bbox: 0.2056, d3.loss_cls: 0.0712, d3.loss_bbox: 0.1982, d4.loss_cls: 0.0663, d4.loss_bbox: 0.1885, loss: 1.8490, grad_norm: 44.5937
2025-06-19 01:52:26,225 - mmdet - INFO - Epoch [5][3700/7033]	lr: 5.015e-05, eta: 4:11:46, time: 1.448, data_time: 0.026, memory: 18614, loss_cls: 0.0609, loss_bbox: 0.1857, d0.loss_cls: 0.1550, d0.loss_bbox: 0.3089, d1.loss_cls: 0.0963, d1.loss_bbox: 0.2285, d2.loss_cls: 0.0788, d2.loss_bbox: 0.2072, d3.loss_cls: 0.0699, d3.loss_bbox: 0.1987, d4.loss_cls: 0.0627, d4.loss_bbox: 0.1892, loss: 1.8418, grad_norm: 23.2031
2025-06-19 01:53:39,133 - mmdet - INFO - Epoch [5][3750/7033]	lr: 5.015e-05, eta: 4:10:33, time: 1.458, data_time: 0.025, memory: 18614, loss_cls: 0.0621, loss_bbox: 0.1985, d0.loss_cls: 0.1623, d0.loss_bbox: 0.3187, d1.loss_cls: 0.0979, d1.loss_bbox: 0.2382, d2.loss_cls: 0.0829, d2.loss_bbox: 0.2181, d3.loss_cls: 0.0710, d3.loss_bbox: 0.2102, d4.loss_cls: 0.0650, d4.loss_bbox: 0.2010, loss: 1.9260, grad_norm: 50.9547
2025-06-19 01:54:52,155 - mmdet - INFO - Epoch [5][3800/7033]	lr: 5.015e-05, eta: 4:09:21, time: 1.460, data_time: 0.033, memory: 18614, loss_cls: 0.0664, loss_bbox: 0.1890, d0.loss_cls: 0.1611, d0.loss_bbox: 0.3011, d1.loss_cls: 0.1025, d1.loss_bbox: 0.2257, d2.loss_cls: 0.0862, d2.loss_bbox: 0.2063, d3.loss_cls: 0.0740, d3.loss_bbox: 0.1986, d4.loss_cls: 0.0696, d4.loss_bbox: 0.1912, loss: 1.8717, grad_norm: 21.8394
2025-06-19 01:56:06,578 - mmdet - INFO - Epoch [5][3850/7033]	lr: 5.015e-05, eta: 4:08:08, time: 1.488, data_time: 0.026, memory: 18614, loss_cls: 0.0579, loss_bbox: 0.1833, d0.loss_cls: 0.1543, d0.loss_bbox: 0.2997, d1.loss_cls: 0.0942, d1.loss_bbox: 0.2215, d2.loss_cls: 0.0753, d2.loss_bbox: 0.2029, d3.loss_cls: 0.0646, d3.loss_bbox: 0.1950, d4.loss_cls: 0.0593, d4.loss_bbox: 0.1862, loss: 1.7941, grad_norm: 34.6865
2025-06-19 01:57:19,289 - mmdet - INFO - Epoch [5][3900/7033]	lr: 5.015e-05, eta: 4:06:55, time: 1.454, data_time: 0.028, memory: 18614, loss_cls: 0.0677, loss_bbox: 0.1890, d0.loss_cls: 0.1608, d0.loss_bbox: 0.3119, d1.loss_cls: 0.1014, d1.loss_bbox: 0.2323, d2.loss_cls: 0.0860, d2.loss_bbox: 0.2111, d3.loss_cls: 0.0748, d3.loss_bbox: 0.2022, d4.loss_cls: 0.0686, d4.loss_bbox: 0.1926, loss: 1.8985, grad_norm: 18.0417
2025-06-19 01:58:32,149 - mmdet - INFO - Epoch [5][3950/7033]	lr: 5.015e-05, eta: 4:05:42, time: 1.457, data_time: 0.029, memory: 18614, loss_cls: 0.0602, loss_bbox: 0.1887, d0.loss_cls: 0.1559, d0.loss_bbox: 0.3033, d1.loss_cls: 0.0909, d1.loss_bbox: 0.2297, d2.loss_cls: 0.0765, d2.loss_bbox: 0.2088, d3.loss_cls: 0.0654, d3.loss_bbox: 0.2013, d4.loss_cls: 0.0621, d4.loss_bbox: 0.1923, loss: 1.8351, grad_norm: 23.6846
2025-06-19 01:59:45,028 - mmdet - INFO - Epoch [5][4000/7033]	lr: 5.015e-05, eta: 4:04:30, time: 1.458, data_time: 0.029, memory: 18614, loss_cls: 0.0655, loss_bbox: 0.1896, d0.loss_cls: 0.1563, d0.loss_bbox: 0.3042, d1.loss_cls: 0.0958, d1.loss_bbox: 0.2285, d2.loss_cls: 0.0794, d2.loss_bbox: 0.2089, d3.loss_cls: 0.0693, d3.loss_bbox: 0.2005, d4.loss_cls: 0.0670, d4.loss_bbox: 0.1933, loss: 1.8583, grad_norm: 19.7275
2025-06-19 02:00:57,769 - mmdet - INFO - Epoch [5][4050/7033]	lr: 5.015e-05, eta: 4:03:17, time: 1.455, data_time: 0.027, memory: 18614, loss_cls: 0.0662, loss_bbox: 0.1900, d0.loss_cls: 0.1586, d0.loss_bbox: 0.3068, d1.loss_cls: 0.1006, d1.loss_bbox: 0.2315, d2.loss_cls: 0.0833, d2.loss_bbox: 0.2103, d3.loss_cls: 0.0729, d3.loss_bbox: 0.2025, d4.loss_cls: 0.0689, d4.loss_bbox: 0.1923, loss: 1.8839, grad_norm: 24.7840
2025-06-19 02:02:10,257 - mmdet - INFO - Epoch [5][4100/7033]	lr: 5.015e-05, eta: 4:02:04, time: 1.450, data_time: 0.025, memory: 18614, loss_cls: 0.0630, loss_bbox: 0.1915, d0.loss_cls: 0.1660, d0.loss_bbox: 0.3101, d1.loss_cls: 0.0974, d1.loss_bbox: 0.2353, d2.loss_cls: 0.0806, d2.loss_bbox: 0.2125, d3.loss_cls: 0.0693, d3.loss_bbox: 0.2042, d4.loss_cls: 0.0631, d4.loss_bbox: 0.1961, loss: 1.8891, grad_norm: 25.5784
2025-06-19 02:03:22,994 - mmdet - INFO - Epoch [5][4150/7033]	lr: 5.015e-05, eta: 4:00:51, time: 1.455, data_time: 0.028, memory: 18614, loss_cls: 0.0629, loss_bbox: 0.1904, d0.loss_cls: 0.1647, d0.loss_bbox: 0.3147, d1.loss_cls: 0.1021, d1.loss_bbox: 0.2308, d2.loss_cls: 0.0826, d2.loss_bbox: 0.2104, d3.loss_cls: 0.0699, d3.loss_bbox: 0.2021, d4.loss_cls: 0.0646, d4.loss_bbox: 0.1930, loss: 1.8882, grad_norm: 42.4782
2025-06-19 02:04:35,877 - mmdet - INFO - Epoch [5][4200/7033]	lr: 5.015e-05, eta: 3:59:38, time: 1.458, data_time: 0.028, memory: 18614, loss_cls: 0.0724, loss_bbox: 0.1930, d0.loss_cls: 0.1653, d0.loss_bbox: 0.3143, d1.loss_cls: 0.1050, d1.loss_bbox: 0.2342, d2.loss_cls: 0.0890, d2.loss_bbox: 0.2143, d3.loss_cls: 0.0787, d3.loss_bbox: 0.2050, d4.loss_cls: 0.0732, d4.loss_bbox: 0.1967, loss: 1.9411, grad_norm: 24.9391
2025-06-19 02:05:51,654 - mmdet - INFO - Epoch [5][4250/7033]	lr: 5.015e-05, eta: 3:58:26, time: 1.516, data_time: 0.047, memory: 18614, loss_cls: 0.0648, loss_bbox: 0.1942, d0.loss_cls: 0.1587, d0.loss_bbox: 0.3096, d1.loss_cls: 0.0980, d1.loss_bbox: 0.2308, d2.loss_cls: 0.0831, d2.loss_bbox: 0.2134, d3.loss_cls: 0.0717, d3.loss_bbox: 0.2063, d4.loss_cls: 0.0666, d4.loss_bbox: 0.1973, loss: 1.8945, grad_norm: 24.5881
2025-06-19 02:07:04,278 - mmdet - INFO - Epoch [5][4300/7033]	lr: 5.015e-05, eta: 3:57:13, time: 1.452, data_time: 0.027, memory: 18614, loss_cls: 0.0633, loss_bbox: 0.1837, d0.loss_cls: 0.1567, d0.loss_bbox: 0.3061, d1.loss_cls: 0.0970, d1.loss_bbox: 0.2231, d2.loss_cls: 0.0817, d2.loss_bbox: 0.2037, d3.loss_cls: 0.0702, d3.loss_bbox: 0.1960, d4.loss_cls: 0.0661, d4.loss_bbox: 0.1870, loss: 1.8346, grad_norm: 22.9666
2025-06-19 02:08:17,039 - mmdet - INFO - Epoch [5][4350/7033]	lr: 5.015e-05, eta: 3:56:00, time: 1.455, data_time: 0.027, memory: 18614, loss_cls: 0.0561, loss_bbox: 0.1832, d0.loss_cls: 0.1504, d0.loss_bbox: 0.2952, d1.loss_cls: 0.0887, d1.loss_bbox: 0.2189, d2.loss_cls: 0.0705, d2.loss_bbox: 0.2009, d3.loss_cls: 0.0609, d3.loss_bbox: 0.1940, d4.loss_cls: 0.0571, d4.loss_bbox: 0.1861, loss: 1.7619, grad_norm: 21.0459
2025-06-19 02:09:29,602 - mmdet - INFO - Epoch [5][4400/7033]	lr: 5.015e-05, eta: 3:54:47, time: 1.451, data_time: 0.027, memory: 18614, loss_cls: 0.0680, loss_bbox: 0.1874, d0.loss_cls: 0.1553, d0.loss_bbox: 0.3012, d1.loss_cls: 0.1004, d1.loss_bbox: 0.2282, d2.loss_cls: 0.0835, d2.loss_bbox: 0.2087, d3.loss_cls: 0.0746, d3.loss_bbox: 0.2008, d4.loss_cls: 0.0686, d4.loss_bbox: 0.1913, loss: 1.8680, grad_norm: 21.0126
2025-06-19 02:10:42,545 - mmdet - INFO - Epoch [5][4450/7033]	lr: 5.015e-05, eta: 3:53:34, time: 1.459, data_time: 0.027, memory: 18614, loss_cls: 0.0678, loss_bbox: 0.1947, d0.loss_cls: 0.1563, d0.loss_bbox: 0.3104, d1.loss_cls: 0.1024, d1.loss_bbox: 0.2326, d2.loss_cls: 0.0838, d2.loss_bbox: 0.2158, d3.loss_cls: 0.0740, d3.loss_bbox: 0.2063, d4.loss_cls: 0.0691, d4.loss_bbox: 0.1971, loss: 1.9103, grad_norm: 37.3477
2025-06-19 02:11:55,428 - mmdet - INFO - Epoch [5][4500/7033]	lr: 5.015e-05, eta: 3:52:21, time: 1.458, data_time: 0.026, memory: 18614, loss_cls: 0.0581, loss_bbox: 0.1818, d0.loss_cls: 0.1551, d0.loss_bbox: 0.3047, d1.loss_cls: 0.0944, d1.loss_bbox: 0.2248, d2.loss_cls: 0.0767, d2.loss_bbox: 0.2039, d3.loss_cls: 0.0656, d3.loss_bbox: 0.1940, d4.loss_cls: 0.0605, d4.loss_bbox: 0.1843, loss: 1.8040, grad_norm: 30.3207
2025-06-19 02:13:08,294 - mmdet - INFO - Epoch [5][4550/7033]	lr: 5.015e-05, eta: 3:51:08, time: 1.457, data_time: 0.027, memory: 18614, loss_cls: 0.0614, loss_bbox: 0.1923, d0.loss_cls: 0.1579, d0.loss_bbox: 0.3131, d1.loss_cls: 0.0944, d1.loss_bbox: 0.2364, d2.loss_cls: 0.0791, d2.loss_bbox: 0.2114, d3.loss_cls: 0.0678, d3.loss_bbox: 0.2057, d4.loss_cls: 0.0625, d4.loss_bbox: 0.1970, loss: 1.8788, grad_norm: 19.9381
2025-06-19 02:14:21,115 - mmdet - INFO - Epoch [5][4600/7033]	lr: 5.015e-05, eta: 3:49:56, time: 1.456, data_time: 0.027, memory: 18614, loss_cls: 0.0623, loss_bbox: 0.1916, d0.loss_cls: 0.1563, d0.loss_bbox: 0.3082, d1.loss_cls: 0.0973, d1.loss_bbox: 0.2297, d2.loss_cls: 0.0783, d2.loss_bbox: 0.2102, d3.loss_cls: 0.0677, d3.loss_bbox: 0.2029, d4.loss_cls: 0.0628, d4.loss_bbox: 0.1954, loss: 1.8629, grad_norm: 27.5501
2025-06-19 02:15:34,362 - mmdet - INFO - Epoch [5][4650/7033]	lr: 5.015e-05, eta: 3:48:43, time: 1.465, data_time: 0.027, memory: 18614, loss_cls: 0.0604, loss_bbox: 0.1864, d0.loss_cls: 0.1585, d0.loss_bbox: 0.3113, d1.loss_cls: 0.0937, d1.loss_bbox: 0.2296, d2.loss_cls: 0.0766, d2.loss_bbox: 0.2085, d3.loss_cls: 0.0664, d3.loss_bbox: 0.1993, d4.loss_cls: 0.0614, d4.loss_bbox: 0.1893, loss: 1.8413, grad_norm: 38.7930
2025-06-19 02:16:47,366 - mmdet - INFO - Epoch [5][4700/7033]	lr: 5.015e-05, eta: 3:47:30, time: 1.460, data_time: 0.028, memory: 18614, loss_cls: 0.0621, loss_bbox: 0.1882, d0.loss_cls: 0.1570, d0.loss_bbox: 0.3114, d1.loss_cls: 0.0965, d1.loss_bbox: 0.2288, d2.loss_cls: 0.0784, d2.loss_bbox: 0.2105, d3.loss_cls: 0.0683, d3.loss_bbox: 0.2008, d4.loss_cls: 0.0642, d4.loss_bbox: 0.1909, loss: 1.8571, grad_norm: 21.2444
2025-06-19 02:18:00,361 - mmdet - INFO - Epoch [5][4750/7033]	lr: 5.015e-05, eta: 3:46:17, time: 1.460, data_time: 0.033, memory: 18614, loss_cls: 0.0638, loss_bbox: 0.1888, d0.loss_cls: 0.1579, d0.loss_bbox: 0.3006, d1.loss_cls: 0.0972, d1.loss_bbox: 0.2273, d2.loss_cls: 0.0808, d2.loss_bbox: 0.2072, d3.loss_cls: 0.0705, d3.loss_bbox: 0.1993, d4.loss_cls: 0.0657, d4.loss_bbox: 0.1917, loss: 1.8509, grad_norm: 54.9434
2025-06-19 02:19:13,100 - mmdet - INFO - Epoch [5][4800/7033]	lr: 5.015e-05, eta: 3:45:04, time: 1.455, data_time: 0.026, memory: 18614, loss_cls: 0.0655, loss_bbox: 0.1883, d0.loss_cls: 0.1578, d0.loss_bbox: 0.3102, d1.loss_cls: 0.0953, d1.loss_bbox: 0.2280, d2.loss_cls: 0.0818, d2.loss_bbox: 0.2092, d3.loss_cls: 0.0717, d3.loss_bbox: 0.2006, d4.loss_cls: 0.0664, d4.loss_bbox: 0.1911, loss: 1.8656, grad_norm: 35.7917
2025-06-19 02:20:25,874 - mmdet - INFO - Epoch [5][4850/7033]	lr: 5.015e-05, eta: 3:43:51, time: 1.455, data_time: 0.028, memory: 18614, loss_cls: 0.0638, loss_bbox: 0.1932, d0.loss_cls: 0.1603, d0.loss_bbox: 0.3141, d1.loss_cls: 0.0972, d1.loss_bbox: 0.2339, d2.loss_cls: 0.0810, d2.loss_bbox: 0.2137, d3.loss_cls: 0.0710, d3.loss_bbox: 0.2051, d4.loss_cls: 0.0659, d4.loss_bbox: 0.1957, loss: 1.8949, grad_norm: 16.8907
2025-06-19 02:21:38,705 - mmdet - INFO - Epoch [5][4900/7033]	lr: 5.015e-05, eta: 3:42:38, time: 1.457, data_time: 0.027, memory: 18614, loss_cls: 0.0637, loss_bbox: 0.1840, d0.loss_cls: 0.1619, d0.loss_bbox: 0.3106, d1.loss_cls: 0.1021, d1.loss_bbox: 0.2307, d2.loss_cls: 0.0845, d2.loss_bbox: 0.2069, d3.loss_cls: 0.0726, d3.loss_bbox: 0.1966, d4.loss_cls: 0.0665, d4.loss_bbox: 0.1868, loss: 1.8669, grad_norm: 39.2464
2025-06-19 02:22:54,989 - mmdet - INFO - Epoch [5][4950/7033]	lr: 5.015e-05, eta: 3:41:27, time: 1.526, data_time: 0.029, memory: 18614, loss_cls: 0.0593, loss_bbox: 0.1832, d0.loss_cls: 0.1606, d0.loss_bbox: 0.3032, d1.loss_cls: 0.0952, d1.loss_bbox: 0.2242, d2.loss_cls: 0.0774, d2.loss_bbox: 0.2045, d3.loss_cls: 0.0668, d3.loss_bbox: 0.1947, d4.loss_cls: 0.0629, d4.loss_bbox: 0.1862, loss: 1.8182, grad_norm: 28.6491
2025-06-19 02:24:07,501 - mmdet - INFO - Epoch [5][5000/7033]	lr: 5.015e-05, eta: 3:40:14, time: 1.450, data_time: 0.029, memory: 18614, loss_cls: 0.0527, loss_bbox: 0.1817, d0.loss_cls: 0.1483, d0.loss_bbox: 0.3013, d1.loss_cls: 0.0853, d1.loss_bbox: 0.2243, d2.loss_cls: 0.0672, d2.loss_bbox: 0.2052, d3.loss_cls: 0.0602, d3.loss_bbox: 0.1929, d4.loss_cls: 0.0544, d4.loss_bbox: 0.1848, loss: 1.7585, grad_norm: 19.9669
2025-06-19 02:25:20,324 - mmdet - INFO - Epoch [5][5050/7033]	lr: 5.015e-05, eta: 3:39:01, time: 1.456, data_time: 0.029, memory: 18614, loss_cls: 0.0568, loss_bbox: 0.1850, d0.loss_cls: 0.1567, d0.loss_bbox: 0.2975, d1.loss_cls: 0.0894, d1.loss_bbox: 0.2245, d2.loss_cls: 0.0735, d2.loss_bbox: 0.2038, d3.loss_cls: 0.0636, d3.loss_bbox: 0.1966, d4.loss_cls: 0.0592, d4.loss_bbox: 0.1875, loss: 1.7942, grad_norm: 21.2668
2025-06-19 02:26:33,478 - mmdet - INFO - Epoch [5][5100/7033]	lr: 5.015e-05, eta: 3:37:48, time: 1.463, data_time: 0.036, memory: 18614, loss_cls: 0.0667, loss_bbox: 0.1902, d0.loss_cls: 0.1626, d0.loss_bbox: 0.3138, d1.loss_cls: 0.1040, d1.loss_bbox: 0.2306, d2.loss_cls: 0.0853, d2.loss_bbox: 0.2104, d3.loss_cls: 0.0746, d3.loss_bbox: 0.2027, d4.loss_cls: 0.0688, d4.loss_bbox: 0.1933, loss: 1.9029, grad_norm: 33.0746
2025-06-19 02:27:46,293 - mmdet - INFO - Epoch [5][5150/7033]	lr: 5.015e-05, eta: 3:36:35, time: 1.456, data_time: 0.027, memory: 18614, loss_cls: 0.0652, loss_bbox: 0.1870, d0.loss_cls: 0.1583, d0.loss_bbox: 0.3083, d1.loss_cls: 0.0951, d1.loss_bbox: 0.2318, d2.loss_cls: 0.0816, d2.loss_bbox: 0.2091, d3.loss_cls: 0.0709, d3.loss_bbox: 0.1992, d4.loss_cls: 0.0669, d4.loss_bbox: 0.1906, loss: 1.8639, grad_norm: 20.4469
2025-06-19 02:28:58,966 - mmdet - INFO - Epoch [5][5200/7033]	lr: 5.015e-05, eta: 3:35:22, time: 1.453, data_time: 0.027, memory: 18614, loss_cls: 0.0637, loss_bbox: 0.1866, d0.loss_cls: 0.1586, d0.loss_bbox: 0.3070, d1.loss_cls: 0.0952, d1.loss_bbox: 0.2323, d2.loss_cls: 0.0803, d2.loss_bbox: 0.2090, d3.loss_cls: 0.0691, d3.loss_bbox: 0.2007, d4.loss_cls: 0.0652, d4.loss_bbox: 0.1908, loss: 1.8584, grad_norm: 17.9001
2025-06-19 02:30:11,849 - mmdet - INFO - Epoch [5][5250/7033]	lr: 5.015e-05, eta: 3:34:09, time: 1.458, data_time: 0.028, memory: 18614, loss_cls: 0.0581, loss_bbox: 0.1926, d0.loss_cls: 0.1607, d0.loss_bbox: 0.3154, d1.loss_cls: 0.0949, d1.loss_bbox: 0.2346, d2.loss_cls: 0.0766, d2.loss_bbox: 0.2124, d3.loss_cls: 0.0642, d3.loss_bbox: 0.2048, d4.loss_cls: 0.0582, d4.loss_bbox: 0.1963, loss: 1.8687, grad_norm: 29.0119
2025-06-19 02:31:24,900 - mmdet - INFO - Epoch [5][5300/7033]	lr: 5.015e-05, eta: 3:32:56, time: 1.461, data_time: 0.029, memory: 18614, loss_cls: 0.0577, loss_bbox: 0.1843, d0.loss_cls: 0.1585, d0.loss_bbox: 0.3059, d1.loss_cls: 0.0905, d1.loss_bbox: 0.2270, d2.loss_cls: 0.0749, d2.loss_bbox: 0.2035, d3.loss_cls: 0.0644, d3.loss_bbox: 0.1959, d4.loss_cls: 0.0595, d4.loss_bbox: 0.1878, loss: 1.8101, grad_norm: 17.6983
2025-06-19 02:32:37,686 - mmdet - INFO - Epoch [5][5350/7033]	lr: 5.015e-05, eta: 3:31:43, time: 1.456, data_time: 0.028, memory: 18614, loss_cls: 0.0681, loss_bbox: 0.2002, d0.loss_cls: 0.1687, d0.loss_bbox: 0.3213, d1.loss_cls: 0.1030, d1.loss_bbox: 0.2415, d2.loss_cls: 0.0868, d2.loss_bbox: 0.2179, d3.loss_cls: 0.0753, d3.loss_bbox: 0.2129, d4.loss_cls: 0.0703, d4.loss_bbox: 0.2040, loss: 1.9701, grad_norm: 22.0656
2025-06-19 02:33:50,491 - mmdet - INFO - Epoch [5][5400/7033]	lr: 5.015e-05, eta: 3:30:31, time: 1.456, data_time: 0.028, memory: 18614, loss_cls: 0.0625, loss_bbox: 0.1860, d0.loss_cls: 0.1605, d0.loss_bbox: 0.3058, d1.loss_cls: 0.0954, d1.loss_bbox: 0.2302, d2.loss_cls: 0.0788, d2.loss_bbox: 0.2071, d3.loss_cls: 0.0672, d3.loss_bbox: 0.1994, d4.loss_cls: 0.0630, d4.loss_bbox: 0.1903, loss: 1.8462, grad_norm: 38.5900
2025-06-19 02:35:09,276 - mmdet - INFO - Epoch [5][5450/7033]	lr: 5.015e-05, eta: 3:29:19, time: 1.576, data_time: 0.143, memory: 18614, loss_cls: 0.0661, loss_bbox: 0.1922, d0.loss_cls: 0.1550, d0.loss_bbox: 0.3099, d1.loss_cls: 0.0972, d1.loss_bbox: 0.2314, d2.loss_cls: 0.0809, d2.loss_bbox: 0.2138, d3.loss_cls: 0.0719, d3.loss_bbox: 0.2046, d4.loss_cls: 0.0668, d4.loss_bbox: 0.1961, loss: 1.8859, grad_norm: 38.0261
2025-06-19 02:36:22,147 - mmdet - INFO - Epoch [5][5500/7033]	lr: 5.015e-05, eta: 3:28:06, time: 1.457, data_time: 0.026, memory: 18614, loss_cls: 0.0637, loss_bbox: 0.1923, d0.loss_cls: 0.1644, d0.loss_bbox: 0.3164, d1.loss_cls: 0.0979, d1.loss_bbox: 0.2346, d2.loss_cls: 0.0819, d2.loss_bbox: 0.2154, d3.loss_cls: 0.0718, d3.loss_bbox: 0.2055, d4.loss_cls: 0.0644, d4.loss_bbox: 0.1970, loss: 1.9052, grad_norm: 46.3089
2025-06-19 02:37:37,131 - mmdet - INFO - Epoch [5][5550/7033]	lr: 5.015e-05, eta: 3:26:54, time: 1.500, data_time: 0.035, memory: 18614, loss_cls: 0.0580, loss_bbox: 0.1867, d0.loss_cls: 0.1567, d0.loss_bbox: 0.3081, d1.loss_cls: 0.0930, d1.loss_bbox: 0.2255, d2.loss_cls: 0.0755, d2.loss_bbox: 0.2056, d3.loss_cls: 0.0634, d3.loss_bbox: 0.1987, d4.loss_cls: 0.0606, d4.loss_bbox: 0.1892, loss: 1.8209, grad_norm: 29.6605
2025-06-19 02:38:50,300 - mmdet - INFO - Epoch [5][5600/7033]	lr: 5.015e-05, eta: 3:25:41, time: 1.463, data_time: 0.035, memory: 18614, loss_cls: 0.0648, loss_bbox: 0.1851, d0.loss_cls: 0.1630, d0.loss_bbox: 0.3104, d1.loss_cls: 0.0984, d1.loss_bbox: 0.2300, d2.loss_cls: 0.0809, d2.loss_bbox: 0.2078, d3.loss_cls: 0.0690, d3.loss_bbox: 0.1986, d4.loss_cls: 0.0670, d4.loss_bbox: 0.1875, loss: 1.8624, grad_norm: 65.4098
2025-06-19 02:40:03,538 - mmdet - INFO - Epoch [5][5650/7033]	lr: 5.015e-05, eta: 3:24:28, time: 1.465, data_time: 0.034, memory: 18614, loss_cls: 0.0628, loss_bbox: 0.1863, d0.loss_cls: 0.1586, d0.loss_bbox: 0.3134, d1.loss_cls: 0.0940, d1.loss_bbox: 0.2328, d2.loss_cls: 0.0809, d2.loss_bbox: 0.2076, d3.loss_cls: 0.0707, d3.loss_bbox: 0.1983, d4.loss_cls: 0.0645, d4.loss_bbox: 0.1891, loss: 1.8590, grad_norm: 41.2117
2025-06-19 02:41:16,316 - mmdet - INFO - Epoch [5][5700/7033]	lr: 5.015e-05, eta: 3:23:15, time: 1.456, data_time: 0.026, memory: 18614, loss_cls: 0.0647, loss_bbox: 0.1968, d0.loss_cls: 0.1614, d0.loss_bbox: 0.3084, d1.loss_cls: 0.0975, d1.loss_bbox: 0.2369, d2.loss_cls: 0.0813, d2.loss_bbox: 0.2172, d3.loss_cls: 0.0706, d3.loss_bbox: 0.2076, d4.loss_cls: 0.0660, d4.loss_bbox: 0.1997, loss: 1.9081, grad_norm: 41.7672
2025-06-19 02:42:29,303 - mmdet - INFO - Epoch [5][5750/7033]	lr: 5.015e-05, eta: 3:22:03, time: 1.460, data_time: 0.034, memory: 18614, loss_cls: 0.0693, loss_bbox: 0.1889, d0.loss_cls: 0.1596, d0.loss_bbox: 0.3116, d1.loss_cls: 0.0996, d1.loss_bbox: 0.2313, d2.loss_cls: 0.0846, d2.loss_bbox: 0.2091, d3.loss_cls: 0.0751, d3.loss_bbox: 0.1993, d4.loss_cls: 0.0710, d4.loss_bbox: 0.1920, loss: 1.8915, grad_norm: 23.8649
2025-06-19 02:43:42,302 - mmdet - INFO - Epoch [5][5800/7033]	lr: 5.015e-05, eta: 3:20:50, time: 1.460, data_time: 0.029, memory: 18614, loss_cls: 0.0598, loss_bbox: 0.1795, d0.loss_cls: 0.1494, d0.loss_bbox: 0.2967, d1.loss_cls: 0.0899, d1.loss_bbox: 0.2205, d2.loss_cls: 0.0759, d2.loss_bbox: 0.1993, d3.loss_cls: 0.0662, d3.loss_bbox: 0.1901, d4.loss_cls: 0.0609, d4.loss_bbox: 0.1834, loss: 1.7716, grad_norm: 32.0389
2025-06-19 02:44:55,040 - mmdet - INFO - Epoch [5][5850/7033]	lr: 5.015e-05, eta: 3:19:37, time: 1.455, data_time: 0.029, memory: 18614, loss_cls: 0.0676, loss_bbox: 0.1937, d0.loss_cls: 0.1609, d0.loss_bbox: 0.3261, d1.loss_cls: 0.1019, d1.loss_bbox: 0.2379, d2.loss_cls: 0.0878, d2.loss_bbox: 0.2147, d3.loss_cls: 0.0738, d3.loss_bbox: 0.2075, d4.loss_cls: 0.0697, d4.loss_bbox: 0.1968, loss: 1.9384, grad_norm: 18.0821
2025-06-19 02:46:07,914 - mmdet - INFO - Epoch [5][5900/7033]	lr: 5.015e-05, eta: 3:18:24, time: 1.457, data_time: 0.025, memory: 18614, loss_cls: 0.0622, loss_bbox: 0.1892, d0.loss_cls: 0.1564, d0.loss_bbox: 0.3087, d1.loss_cls: 0.0961, d1.loss_bbox: 0.2282, d2.loss_cls: 0.0805, d2.loss_bbox: 0.2065, d3.loss_cls: 0.0695, d3.loss_bbox: 0.1985, d4.loss_cls: 0.0648, d4.loss_bbox: 0.1909, loss: 1.8515, grad_norm: 22.8007
2025-06-19 02:47:20,476 - mmdet - INFO - Epoch [5][5950/7033]	lr: 5.015e-05, eta: 3:17:11, time: 1.451, data_time: 0.026, memory: 18614, loss_cls: 0.0650, loss_bbox: 0.1868, d0.loss_cls: 0.1539, d0.loss_bbox: 0.3078, d1.loss_cls: 0.1000, d1.loss_bbox: 0.2292, d2.loss_cls: 0.0834, d2.loss_bbox: 0.2061, d3.loss_cls: 0.0722, d3.loss_bbox: 0.1979, d4.loss_cls: 0.0670, d4.loss_bbox: 0.1900, loss: 1.8594, grad_norm: 114.9271
2025-06-19 02:48:33,459 - mmdet - INFO - Epoch [5][6000/7033]	lr: 5.015e-05, eta: 3:15:58, time: 1.460, data_time: 0.033, memory: 18614, loss_cls: 0.0616, loss_bbox: 0.1818, d0.loss_cls: 0.1559, d0.loss_bbox: 0.3027, d1.loss_cls: 0.0956, d1.loss_bbox: 0.2218, d2.loss_cls: 0.0777, d2.loss_bbox: 0.2017, d3.loss_cls: 0.0672, d3.loss_bbox: 0.1937, d4.loss_cls: 0.0631, d4.loss_bbox: 0.1843, loss: 1.8072, grad_norm: 18.8110
2025-06-19 02:49:46,444 - mmdet - INFO - Epoch [5][6050/7033]	lr: 5.015e-05, eta: 3:14:45, time: 1.460, data_time: 0.029, memory: 18614, loss_cls: 0.0598, loss_bbox: 0.1872, d0.loss_cls: 0.1487, d0.loss_bbox: 0.3074, d1.loss_cls: 0.0932, d1.loss_bbox: 0.2255, d2.loss_cls: 0.0780, d2.loss_bbox: 0.2065, d3.loss_cls: 0.0662, d3.loss_bbox: 0.1999, d4.loss_cls: 0.0608, d4.loss_bbox: 0.1900, loss: 1.8231, grad_norm: 126.2674
2025-06-19 02:50:59,445 - mmdet - INFO - Epoch [5][6100/7033]	lr: 5.015e-05, eta: 3:13:32, time: 1.460, data_time: 0.028, memory: 18614, loss_cls: 0.0649, loss_bbox: 0.1891, d0.loss_cls: 0.1574, d0.loss_bbox: 0.3076, d1.loss_cls: 0.0958, d1.loss_bbox: 0.2287, d2.loss_cls: 0.0805, d2.loss_bbox: 0.2114, d3.loss_cls: 0.0701, d3.loss_bbox: 0.2011, d4.loss_cls: 0.0661, d4.loss_bbox: 0.1932, loss: 1.8660, grad_norm: 16.4886
2025-06-19 02:52:12,353 - mmdet - INFO - Epoch [5][6150/7033]	lr: 5.015e-05, eta: 3:12:19, time: 1.458, data_time: 0.025, memory: 18614, loss_cls: 0.0668, loss_bbox: 0.1944, d0.loss_cls: 0.1620, d0.loss_bbox: 0.3158, d1.loss_cls: 0.1012, d1.loss_bbox: 0.2353, d2.loss_cls: 0.0868, d2.loss_bbox: 0.2142, d3.loss_cls: 0.0743, d3.loss_bbox: 0.2062, d4.loss_cls: 0.0688, d4.loss_bbox: 0.1981, loss: 1.9238, grad_norm: 35.5260
2025-06-19 02:53:24,864 - mmdet - INFO - Epoch [5][6200/7033]	lr: 5.015e-05, eta: 3:11:06, time: 1.450, data_time: 0.026, memory: 18614, loss_cls: 0.0630, loss_bbox: 0.1883, d0.loss_cls: 0.1586, d0.loss_bbox: 0.3119, d1.loss_cls: 0.0969, d1.loss_bbox: 0.2288, d2.loss_cls: 0.0807, d2.loss_bbox: 0.2079, d3.loss_cls: 0.0682, d3.loss_bbox: 0.2007, d4.loss_cls: 0.0636, d4.loss_bbox: 0.1912, loss: 1.8599, grad_norm: 253.0432
2025-06-19 02:54:37,963 - mmdet - INFO - Epoch [5][6250/7033]	lr: 5.015e-05, eta: 3:09:54, time: 1.462, data_time: 0.027, memory: 18614, loss_cls: 0.0642, loss_bbox: 0.1907, d0.loss_cls: 0.1576, d0.loss_bbox: 0.3099, d1.loss_cls: 0.0981, d1.loss_bbox: 0.2322, d2.loss_cls: 0.0820, d2.loss_bbox: 0.2113, d3.loss_cls: 0.0711, d3.loss_bbox: 0.2031, d4.loss_cls: 0.0655, d4.loss_bbox: 0.1956, loss: 1.8814, grad_norm: 22.7137
2025-06-19 02:55:50,699 - mmdet - INFO - Epoch [5][6300/7033]	lr: 5.015e-05, eta: 3:08:41, time: 1.455, data_time: 0.027, memory: 18614, loss_cls: 0.0656, loss_bbox: 0.1846, d0.loss_cls: 0.1505, d0.loss_bbox: 0.2958, d1.loss_cls: 0.0937, d1.loss_bbox: 0.2250, d2.loss_cls: 0.0825, d2.loss_bbox: 0.2055, d3.loss_cls: 0.0727, d3.loss_bbox: 0.1970, d4.loss_cls: 0.0669, d4.loss_bbox: 0.1884, loss: 1.8280, grad_norm: 20.5591
2025-06-19 02:57:03,338 - mmdet - INFO - Epoch [5][6350/7033]	lr: 5.015e-05, eta: 3:07:28, time: 1.453, data_time: 0.026, memory: 18614, loss_cls: 0.0617, loss_bbox: 0.1877, d0.loss_cls: 0.1566, d0.loss_bbox: 0.3126, d1.loss_cls: 0.0965, d1.loss_bbox: 0.2290, d2.loss_cls: 0.0779, d2.loss_bbox: 0.2072, d3.loss_cls: 0.0676, d3.loss_bbox: 0.2000, d4.loss_cls: 0.0633, d4.loss_bbox: 0.1897, loss: 1.8499, grad_norm: 75.3146
2025-06-19 02:58:16,382 - mmdet - INFO - Epoch [5][6400/7033]	lr: 5.015e-05, eta: 3:06:15, time: 1.461, data_time: 0.027, memory: 18614, loss_cls: 0.0635, loss_bbox: 0.1845, d0.loss_cls: 0.1512, d0.loss_bbox: 0.3037, d1.loss_cls: 0.0983, d1.loss_bbox: 0.2218, d2.loss_cls: 0.0807, d2.loss_bbox: 0.2038, d3.loss_cls: 0.0711, d3.loss_bbox: 0.1952, d4.loss_cls: 0.0660, d4.loss_bbox: 0.1867, loss: 1.8266, grad_norm: 31.2754
2025-06-19 02:59:29,315 - mmdet - INFO - Epoch [5][6450/7033]	lr: 5.015e-05, eta: 3:05:02, time: 1.459, data_time: 0.027, memory: 18614, loss_cls: 0.0626, loss_bbox: 0.1799, d0.loss_cls: 0.1488, d0.loss_bbox: 0.3100, d1.loss_cls: 0.0950, d1.loss_bbox: 0.2229, d2.loss_cls: 0.0773, d2.loss_bbox: 0.2026, d3.loss_cls: 0.0669, d3.loss_bbox: 0.1929, d4.loss_cls: 0.0626, d4.loss_bbox: 0.1835, loss: 1.8049, grad_norm: 31.4644
2025-06-19 03:00:44,033 - mmdet - INFO - Epoch [5][6500/7033]	lr: 5.015e-05, eta: 3:03:49, time: 1.494, data_time: 0.026, memory: 18614, loss_cls: 0.0651, loss_bbox: 0.1851, d0.loss_cls: 0.1544, d0.loss_bbox: 0.3178, d1.loss_cls: 0.0968, d1.loss_bbox: 0.2305, d2.loss_cls: 0.0832, d2.loss_bbox: 0.2094, d3.loss_cls: 0.0692, d3.loss_bbox: 0.2000, d4.loss_cls: 0.0662, d4.loss_bbox: 0.1892, loss: 1.8668, grad_norm: 22.0359
2025-06-19 03:01:56,632 - mmdet - INFO - Epoch [5][6550/7033]	lr: 5.015e-05, eta: 3:02:37, time: 1.452, data_time: 0.028, memory: 18614, loss_cls: 0.0589, loss_bbox: 0.1828, d0.loss_cls: 0.1563, d0.loss_bbox: 0.3081, d1.loss_cls: 0.0987, d1.loss_bbox: 0.2268, d2.loss_cls: 0.0788, d2.loss_bbox: 0.2056, d3.loss_cls: 0.0663, d3.loss_bbox: 0.1956, d4.loss_cls: 0.0607, d4.loss_bbox: 0.1859, loss: 1.8246, grad_norm: 27.4909
2025-06-19 03:03:09,616 - mmdet - INFO - Epoch [5][6600/7033]	lr: 5.015e-05, eta: 3:01:24, time: 1.460, data_time: 0.028, memory: 18614, loss_cls: 0.0598, loss_bbox: 0.1962, d0.loss_cls: 0.1590, d0.loss_bbox: 0.3252, d1.loss_cls: 0.0963, d1.loss_bbox: 0.2393, d2.loss_cls: 0.0779, d2.loss_bbox: 0.2190, d3.loss_cls: 0.0682, d3.loss_bbox: 0.2106, d4.loss_cls: 0.0623, d4.loss_bbox: 0.2004, loss: 1.9143, grad_norm: 29.5248
2025-06-19 03:04:22,250 - mmdet - INFO - Epoch [5][6650/7033]	lr: 5.015e-05, eta: 3:00:11, time: 1.453, data_time: 0.027, memory: 18614, loss_cls: 0.0623, loss_bbox: 0.1868, d0.loss_cls: 0.1534, d0.loss_bbox: 0.3069, d1.loss_cls: 0.0968, d1.loss_bbox: 0.2280, d2.loss_cls: 0.0805, d2.loss_bbox: 0.2090, d3.loss_cls: 0.0691, d3.loss_bbox: 0.1991, d4.loss_cls: 0.0634, d4.loss_bbox: 0.1900, loss: 1.8454, grad_norm: 23.4783
2025-06-19 03:05:35,090 - mmdet - INFO - Epoch [5][6700/7033]	lr: 5.015e-05, eta: 2:58:58, time: 1.457, data_time: 0.026, memory: 18614, loss_cls: 0.0614, loss_bbox: 0.1928, d0.loss_cls: 0.1498, d0.loss_bbox: 0.3153, d1.loss_cls: 0.0962, d1.loss_bbox: 0.2340, d2.loss_cls: 0.0781, d2.loss_bbox: 0.2158, d3.loss_cls: 0.0692, d3.loss_bbox: 0.2046, d4.loss_cls: 0.0637, d4.loss_bbox: 0.1959, loss: 1.8767, grad_norm: 26.7807
2025-06-19 03:06:47,760 - mmdet - INFO - Epoch [5][6750/7033]	lr: 5.015e-05, eta: 2:57:45, time: 1.453, data_time: 0.025, memory: 18614, loss_cls: 0.0514, loss_bbox: 0.1830, d0.loss_cls: 0.1506, d0.loss_bbox: 0.2981, d1.loss_cls: 0.0876, d1.loss_bbox: 0.2225, d2.loss_cls: 0.0681, d2.loss_bbox: 0.2043, d3.loss_cls: 0.0564, d3.loss_bbox: 0.1963, d4.loss_cls: 0.0530, d4.loss_bbox: 0.1869, loss: 1.7582, grad_norm: 34.4722
2025-06-19 03:08:00,472 - mmdet - INFO - Epoch [5][6800/7033]	lr: 5.015e-05, eta: 2:56:32, time: 1.454, data_time: 0.028, memory: 18614, loss_cls: 0.0635, loss_bbox: 0.1911, d0.loss_cls: 0.1599, d0.loss_bbox: 0.3075, d1.loss_cls: 0.0945, d1.loss_bbox: 0.2331, d2.loss_cls: 0.0799, d2.loss_bbox: 0.2122, d3.loss_cls: 0.0691, d3.loss_bbox: 0.2031, d4.loss_cls: 0.0631, d4.loss_bbox: 0.1953, loss: 1.8722, grad_norm: 17.3009
2025-06-19 03:09:13,202 - mmdet - INFO - Epoch [5][6850/7033]	lr: 5.015e-05, eta: 2:55:19, time: 1.455, data_time: 0.028, memory: 18614, loss_cls: 0.0645, loss_bbox: 0.1936, d0.loss_cls: 0.1575, d0.loss_bbox: 0.3133, d1.loss_cls: 0.0966, d1.loss_bbox: 0.2339, d2.loss_cls: 0.0798, d2.loss_bbox: 0.2176, d3.loss_cls: 0.0687, d3.loss_bbox: 0.2070, d4.loss_cls: 0.0645, d4.loss_bbox: 0.1979, loss: 1.8948, grad_norm: 23.6978
2025-06-19 03:10:25,628 - mmdet - INFO - Epoch [5][6900/7033]	lr: 5.015e-05, eta: 2:54:06, time: 1.449, data_time: 0.026, memory: 18614, loss_cls: 0.0612, loss_bbox: 0.1893, d0.loss_cls: 0.1579, d0.loss_bbox: 0.3076, d1.loss_cls: 0.0941, d1.loss_bbox: 0.2321, d2.loss_cls: 0.0794, d2.loss_bbox: 0.2092, d3.loss_cls: 0.0679, d3.loss_bbox: 0.2007, d4.loss_cls: 0.0644, d4.loss_bbox: 0.1912, loss: 1.8550, grad_norm: 24.8264
2025-06-19 03:11:38,331 - mmdet - INFO - Epoch [5][6950/7033]	lr: 5.015e-05, eta: 2:52:53, time: 1.454, data_time: 0.026, memory: 18614, loss_cls: 0.0633, loss_bbox: 0.1932, d0.loss_cls: 0.1592, d0.loss_bbox: 0.3115, d1.loss_cls: 0.0956, d1.loss_bbox: 0.2311, d2.loss_cls: 0.0788, d2.loss_bbox: 0.2157, d3.loss_cls: 0.0679, d3.loss_bbox: 0.2051, d4.loss_cls: 0.0643, d4.loss_bbox: 0.1957, loss: 1.8816, grad_norm: 29.2748
2025-06-19 03:12:50,977 - mmdet - INFO - Epoch [5][7000/7033]	lr: 5.015e-05, eta: 2:51:40, time: 1.453, data_time: 0.026, memory: 18614, loss_cls: 0.0667, loss_bbox: 0.1877, d0.loss_cls: 0.1568, d0.loss_bbox: 0.3036, d1.loss_cls: 0.0990, d1.loss_bbox: 0.2304, d2.loss_cls: 0.0825, d2.loss_bbox: 0.2080, d3.loss_cls: 0.0747, d3.loss_bbox: 0.2000, d4.loss_cls: 0.0706, d4.loss_bbox: 0.1895, loss: 1.8694, grad_norm: 33.5363
2025-06-19 03:13:39,364 - mmdet - INFO - Saving checkpoint at 5 epochs
2025-06-19 03:35:33,059 - mmdet - INFO - Exp name: lidar_0075v_cam_res_2x2_hednetmiddleencoder_hednetbackbone4_dss0511_dp03_hugeep2_num2_morton_conv_xy_rope_bs2.py
2025-06-19 03:35:33,059 - mmdet - INFO - Epoch(val) [5][3010]	pts_bbox_NuScenes/car_AP_dist_0.5: 0.7952, pts_bbox_NuScenes/car_AP_dist_1.0: 0.8845, pts_bbox_NuScenes/car_AP_dist_2.0: 0.9095, pts_bbox_NuScenes/car_AP_dist_4.0: 0.9205, pts_bbox_NuScenes/car_trans_err: 0.1776, pts_bbox_NuScenes/car_scale_err: 0.1496, pts_bbox_NuScenes/car_orient_err: 0.0405, pts_bbox_NuScenes/car_vel_err: 0.2992, pts_bbox_NuScenes/car_attr_err: 0.1822, pts_bbox_NuScenes/mATE: 0.2837, pts_bbox_NuScenes/mASE: 0.2643, pts_bbox_NuScenes/mAOE: 0.2603, pts_bbox_NuScenes/mAVE: 0.2732, pts_bbox_NuScenes/mAAE: 0.1843, pts_bbox_NuScenes/truck_AP_dist_0.5: 0.4288, pts_bbox_NuScenes/truck_AP_dist_1.0: 0.6133, pts_bbox_NuScenes/truck_AP_dist_2.0: 0.7192, pts_bbox_NuScenes/truck_AP_dist_4.0: 0.7526, pts_bbox_NuScenes/truck_trans_err: 0.3457, pts_bbox_NuScenes/truck_scale_err: 0.1918, pts_bbox_NuScenes/truck_orient_err: 0.0431, pts_bbox_NuScenes/truck_vel_err: 0.2733, pts_bbox_NuScenes/truck_attr_err: 0.1976, pts_bbox_NuScenes/construction_vehicle_AP_dist_0.5: 0.0568, pts_bbox_NuScenes/construction_vehicle_AP_dist_1.0: 0.2053, pts_bbox_NuScenes/construction_vehicle_AP_dist_2.0: 0.3920, pts_bbox_NuScenes/construction_vehicle_AP_dist_4.0: 0.4564, pts_bbox_NuScenes/construction_vehicle_trans_err: 0.6561, pts_bbox_NuScenes/construction_vehicle_scale_err: 0.4367, pts_bbox_NuScenes/construction_vehicle_orient_err: 0.8160, pts_bbox_NuScenes/construction_vehicle_vel_err: 0.1142, pts_bbox_NuScenes/construction_vehicle_attr_err: 0.3116, pts_bbox_NuScenes/bus_AP_dist_0.5: 0.5200, pts_bbox_NuScenes/bus_AP_dist_1.0: 0.7579, pts_bbox_NuScenes/bus_AP_dist_2.0: 0.9042, pts_bbox_NuScenes/bus_AP_dist_4.0: 0.9240, pts_bbox_NuScenes/bus_trans_err: 0.3315, pts_bbox_NuScenes/bus_scale_err: 0.1969, pts_bbox_NuScenes/bus_orient_err: 0.0356, pts_bbox_NuScenes/bus_vel_err: 0.5055, pts_bbox_NuScenes/bus_attr_err: 0.2989, pts_bbox_NuScenes/trailer_AP_dist_0.5: 0.1827, pts_bbox_NuScenes/trailer_AP_dist_1.0: 0.4371, pts_bbox_NuScenes/trailer_AP_dist_2.0: 0.6074, pts_bbox_NuScenes/trailer_AP_dist_4.0: 0.6856, pts_bbox_NuScenes/trailer_trans_err: 0.4808, pts_bbox_NuScenes/trailer_scale_err: 0.2267, pts_bbox_NuScenes/trailer_orient_err: 0.4983, pts_bbox_NuScenes/trailer_vel_err: 0.2219, pts_bbox_NuScenes/trailer_attr_err: 0.1603, pts_bbox_NuScenes/barrier_AP_dist_0.5: 0.6058, pts_bbox_NuScenes/barrier_AP_dist_1.0: 0.7055, pts_bbox_NuScenes/barrier_AP_dist_2.0: 0.7496, pts_bbox_NuScenes/barrier_AP_dist_4.0: 0.7624, pts_bbox_NuScenes/barrier_trans_err: 0.2099, pts_bbox_NuScenes/barrier_scale_err: 0.2878, pts_bbox_NuScenes/barrier_orient_err: 0.0398, pts_bbox_NuScenes/barrier_vel_err: nan, pts_bbox_NuScenes/barrier_attr_err: nan, pts_bbox_NuScenes/motorcycle_AP_dist_0.5: 0.6604, pts_bbox_NuScenes/motorcycle_AP_dist_1.0: 0.7754, pts_bbox_NuScenes/motorcycle_AP_dist_2.0: 0.7974, pts_bbox_NuScenes/motorcycle_AP_dist_4.0: 0.8017, pts_bbox_NuScenes/motorcycle_trans_err: 0.2027, pts_bbox_NuScenes/motorcycle_scale_err: 0.2544, pts_bbox_NuScenes/motorcycle_orient_err: 0.2171, pts_bbox_NuScenes/motorcycle_vel_err: 0.3538, pts_bbox_NuScenes/motorcycle_attr_err: 0.2075, pts_bbox_NuScenes/bicycle_AP_dist_0.5: 0.5464, pts_bbox_NuScenes/bicycle_AP_dist_1.0: 0.5957, pts_bbox_NuScenes/bicycle_AP_dist_2.0: 0.6038, pts_bbox_NuScenes/bicycle_AP_dist_4.0: 0.6133, pts_bbox_NuScenes/bicycle_trans_err: 0.1708, pts_bbox_NuScenes/bicycle_scale_err: 0.2746, pts_bbox_NuScenes/bicycle_orient_err: 0.3291, pts_bbox_NuScenes/bicycle_vel_err: 0.2061, pts_bbox_NuScenes/bicycle_attr_err: 0.0077, pts_bbox_NuScenes/pedestrian_AP_dist_0.5: 0.8311, pts_bbox_NuScenes/pedestrian_AP_dist_1.0: 0.8634, pts_bbox_NuScenes/pedestrian_AP_dist_2.0: 0.8810, pts_bbox_NuScenes/pedestrian_AP_dist_4.0: 0.8907, pts_bbox_NuScenes/pedestrian_trans_err: 0.1385, pts_bbox_NuScenes/pedestrian_scale_err: 0.2930, pts_bbox_NuScenes/pedestrian_orient_err: 0.3234, pts_bbox_NuScenes/pedestrian_vel_err: 0.2112, pts_bbox_NuScenes/pedestrian_attr_err: 0.1085, pts_bbox_NuScenes/traffic_cone_AP_dist_0.5: 0.7563, pts_bbox_NuScenes/traffic_cone_AP_dist_1.0: 0.7845, pts_bbox_NuScenes/traffic_cone_AP_dist_2.0: 0.8051, pts_bbox_NuScenes/traffic_cone_AP_dist_4.0: 0.8249, pts_bbox_NuScenes/traffic_cone_trans_err: 0.1234, pts_bbox_NuScenes/traffic_cone_scale_err: 0.3320, pts_bbox_NuScenes/traffic_cone_orient_err: nan, pts_bbox_NuScenes/traffic_cone_vel_err: nan, pts_bbox_NuScenes/traffic_cone_attr_err: nan, pts_bbox_NuScenes/NDS: 0.7110, pts_bbox_NuScenes/mAP: 0.6752
2025-06-19 03:36:55,072 - mmdet - INFO - Epoch [6][50/7033]	lr: 1.358e-05, eta: 2:49:31, time: 1.556, data_time: 0.123, memory: 18614, loss_cls: 0.0621, loss_bbox: 0.1863, d0.loss_cls: 0.1538, d0.loss_bbox: 0.3095, d1.loss_cls: 0.0955, d1.loss_bbox: 0.2318, d2.loss_cls: 0.0808, d2.loss_bbox: 0.2086, d3.loss_cls: 0.0712, d3.loss_bbox: 0.1976, d4.loss_cls: 0.0635, d4.loss_bbox: 0.1900, loss: 1.8508, grad_norm: 23.8149
2025-06-19 03:38:08,067 - mmdet - INFO - Epoch [6][100/7033]	lr: 1.358e-05, eta: 2:48:18, time: 1.460, data_time: 0.030, memory: 18614, loss_cls: 0.0617, loss_bbox: 0.1909, d0.loss_cls: 0.1526, d0.loss_bbox: 0.3056, d1.loss_cls: 0.0938, d1.loss_bbox: 0.2302, d2.loss_cls: 0.0799, d2.loss_bbox: 0.2116, d3.loss_cls: 0.0703, d3.loss_bbox: 0.2032, d4.loss_cls: 0.0644, d4.loss_bbox: 0.1936, loss: 1.8579, grad_norm: 33.7446
2025-06-19 03:39:21,219 - mmdet - INFO - Epoch [6][150/7033]	lr: 1.358e-05, eta: 2:47:05, time: 1.463, data_time: 0.033, memory: 18614, loss_cls: 0.0656, loss_bbox: 0.1870, d0.loss_cls: 0.1507, d0.loss_bbox: 0.3027, d1.loss_cls: 0.0968, d1.loss_bbox: 0.2258, d2.loss_cls: 0.0800, d2.loss_bbox: 0.2084, d3.loss_cls: 0.0720, d3.loss_bbox: 0.1987, d4.loss_cls: 0.0675, d4.loss_bbox: 0.1903, loss: 1.8455, grad_norm: 25.7307
2025-06-19 03:40:34,088 - mmdet - INFO - Epoch [6][200/7033]	lr: 1.358e-05, eta: 2:45:52, time: 1.457, data_time: 0.032, memory: 18614, loss_cls: 0.0700, loss_bbox: 0.1881, d0.loss_cls: 0.1565, d0.loss_bbox: 0.3071, d1.loss_cls: 0.1001, d1.loss_bbox: 0.2328, d2.loss_cls: 0.0862, d2.loss_bbox: 0.2100, d3.loss_cls: 0.0759, d3.loss_bbox: 0.2032, d4.loss_cls: 0.0716, d4.loss_bbox: 0.1925, loss: 1.8939, grad_norm: 60.4297
2025-06-19 03:41:46,709 - mmdet - INFO - Epoch [6][250/7033]	lr: 1.358e-05, eta: 2:44:39, time: 1.452, data_time: 0.025, memory: 18614, loss_cls: 0.0569, loss_bbox: 0.1756, d0.loss_cls: 0.1436, d0.loss_bbox: 0.2938, d1.loss_cls: 0.0880, d1.loss_bbox: 0.2192, d2.loss_cls: 0.0745, d2.loss_bbox: 0.1969, d3.loss_cls: 0.0633, d3.loss_bbox: 0.1878, d4.loss_cls: 0.0587, d4.loss_bbox: 0.1787, loss: 1.7371, grad_norm: 20.9028
2025-06-19 03:42:59,495 - mmdet - INFO - Epoch [6][300/7033]	lr: 1.358e-05, eta: 2:43:27, time: 1.456, data_time: 0.027, memory: 18614, loss_cls: 0.0573, loss_bbox: 0.1846, d0.loss_cls: 0.1548, d0.loss_bbox: 0.2983, d1.loss_cls: 0.0923, d1.loss_bbox: 0.2248, d2.loss_cls: 0.0761, d2.loss_bbox: 0.2036, d3.loss_cls: 0.0651, d3.loss_bbox: 0.1952, d4.loss_cls: 0.0590, d4.loss_bbox: 0.1868, loss: 1.7978, grad_norm: 15.8950
2025-06-19 03:44:12,229 - mmdet - INFO - Epoch [6][350/7033]	lr: 1.358e-05, eta: 2:42:14, time: 1.455, data_time: 0.025, memory: 18614, loss_cls: 0.0550, loss_bbox: 0.1857, d0.loss_cls: 0.1529, d0.loss_bbox: 0.3065, d1.loss_cls: 0.0894, d1.loss_bbox: 0.2319, d2.loss_cls: 0.0743, d2.loss_bbox: 0.2091, d3.loss_cls: 0.0626, d3.loss_bbox: 0.2001, d4.loss_cls: 0.0568, d4.loss_bbox: 0.1887, loss: 1.8132, grad_norm: 17.0592
2025-06-19 03:45:24,763 - mmdet - INFO - Epoch [6][400/7033]	lr: 1.358e-05, eta: 2:41:01, time: 1.451, data_time: 0.026, memory: 18614, loss_cls: 0.0649, loss_bbox: 0.1897, d0.loss_cls: 0.1642, d0.loss_bbox: 0.3093, d1.loss_cls: 0.1023, d1.loss_bbox: 0.2338, d2.loss_cls: 0.0865, d2.loss_bbox: 0.2129, d3.loss_cls: 0.0729, d3.loss_bbox: 0.2047, d4.loss_cls: 0.0658, d4.loss_bbox: 0.1948, loss: 1.9019, grad_norm: 27.2073
2025-06-19 03:46:37,544 - mmdet - INFO - Epoch [6][450/7033]	lr: 1.358e-05, eta: 2:39:48, time: 1.456, data_time: 0.025, memory: 18614, loss_cls: 0.0691, loss_bbox: 0.1886, d0.loss_cls: 0.1613, d0.loss_bbox: 0.3113, d1.loss_cls: 0.1025, d1.loss_bbox: 0.2324, d2.loss_cls: 0.0876, d2.loss_bbox: 0.2089, d3.loss_cls: 0.0770, d3.loss_bbox: 0.1999, d4.loss_cls: 0.0711, d4.loss_bbox: 0.1920, loss: 1.9016, grad_norm: 21.9446
2025-06-19 03:47:50,287 - mmdet - INFO - Epoch [6][500/7033]	lr: 1.358e-05, eta: 2:38:35, time: 1.455, data_time: 0.028, memory: 18614, loss_cls: 0.0598, loss_bbox: 0.1845, d0.loss_cls: 0.1577, d0.loss_bbox: 0.3039, d1.loss_cls: 0.0927, d1.loss_bbox: 0.2271, d2.loss_cls: 0.0759, d2.loss_bbox: 0.2074, d3.loss_cls: 0.0655, d3.loss_bbox: 0.1974, d4.loss_cls: 0.0608, d4.loss_bbox: 0.1893, loss: 1.8221, grad_norm: 20.5965
2025-06-19 03:49:03,179 - mmdet - INFO - Epoch [6][550/7033]	lr: 1.358e-05, eta: 2:37:22, time: 1.458, data_time: 0.026, memory: 18614, loss_cls: 0.0683, loss_bbox: 0.1910, d0.loss_cls: 0.1673, d0.loss_bbox: 0.3212, d1.loss_cls: 0.1028, d1.loss_bbox: 0.2351, d2.loss_cls: 0.0875, d2.loss_bbox: 0.2139, d3.loss_cls: 0.0750, d3.loss_bbox: 0.2042, d4.loss_cls: 0.0700, d4.loss_bbox: 0.1951, loss: 1.9313, grad_norm: 24.9624
2025-06-19 03:50:15,842 - mmdet - INFO - Epoch [6][600/7033]	lr: 1.358e-05, eta: 2:36:09, time: 1.453, data_time: 0.025, memory: 18614, loss_cls: 0.0629, loss_bbox: 0.1867, d0.loss_cls: 0.1528, d0.loss_bbox: 0.2965, d1.loss_cls: 0.0945, d1.loss_bbox: 0.2270, d2.loss_cls: 0.0821, d2.loss_bbox: 0.2052, d3.loss_cls: 0.0692, d3.loss_bbox: 0.1980, d4.loss_cls: 0.0634, d4.loss_bbox: 0.1900, loss: 1.8284, grad_norm: 21.3750
2025-06-19 03:51:28,652 - mmdet - INFO - Epoch [6][650/7033]	lr: 1.358e-05, eta: 2:34:57, time: 1.456, data_time: 0.027, memory: 18614, loss_cls: 0.0554, loss_bbox: 0.1806, d0.loss_cls: 0.1535, d0.loss_bbox: 0.3010, d1.loss_cls: 0.0914, d1.loss_bbox: 0.2230, d2.loss_cls: 0.0731, d2.loss_bbox: 0.2026, d3.loss_cls: 0.0610, d3.loss_bbox: 0.1945, d4.loss_cls: 0.0574, d4.loss_bbox: 0.1845, loss: 1.7781, grad_norm: 14.2863
2025-06-19 03:52:43,519 - mmdet - INFO - Epoch [6][700/7033]	lr: 1.358e-05, eta: 2:33:44, time: 1.497, data_time: 0.029, memory: 18614, loss_cls: 0.0553, loss_bbox: 0.1798, d0.loss_cls: 0.1492, d0.loss_bbox: 0.2914, d1.loss_cls: 0.0853, d1.loss_bbox: 0.2212, d2.loss_cls: 0.0718, d2.loss_bbox: 0.1995, d3.loss_cls: 0.0623, d3.loss_bbox: 0.1914, d4.loss_cls: 0.0561, d4.loss_bbox: 0.1830, loss: 1.7463, grad_norm: 32.2274
2025-06-19 03:53:56,217 - mmdet - INFO - Epoch [6][750/7033]	lr: 1.358e-05, eta: 2:32:31, time: 1.454, data_time: 0.027, memory: 18614, loss_cls: 0.0560, loss_bbox: 0.1831, d0.loss_cls: 0.1500, d0.loss_bbox: 0.3024, d1.loss_cls: 0.0916, d1.loss_bbox: 0.2275, d2.loss_cls: 0.0754, d2.loss_bbox: 0.2061, d3.loss_cls: 0.0627, d3.loss_bbox: 0.1955, d4.loss_cls: 0.0574, d4.loss_bbox: 0.1859, loss: 1.7936, grad_norm: 26.6687
2025-06-19 03:55:08,812 - mmdet - INFO - Epoch [6][800/7033]	lr: 1.358e-05, eta: 2:31:18, time: 1.452, data_time: 0.027, memory: 18614, loss_cls: 0.0602, loss_bbox: 0.1872, d0.loss_cls: 0.1506, d0.loss_bbox: 0.3086, d1.loss_cls: 0.0929, d1.loss_bbox: 0.2288, d2.loss_cls: 0.0775, d2.loss_bbox: 0.2081, d3.loss_cls: 0.0669, d3.loss_bbox: 0.2012, d4.loss_cls: 0.0616, d4.loss_bbox: 0.1914, loss: 1.8349, grad_norm: 28.7454
2025-06-19 03:56:21,484 - mmdet - INFO - Epoch [6][850/7033]	lr: 1.358e-05, eta: 2:30:06, time: 1.453, data_time: 0.028, memory: 18614, loss_cls: 0.0605, loss_bbox: 0.1817, d0.loss_cls: 0.1591, d0.loss_bbox: 0.2947, d1.loss_cls: 0.0946, d1.loss_bbox: 0.2222, d2.loss_cls: 0.0789, d2.loss_bbox: 0.2014, d3.loss_cls: 0.0673, d3.loss_bbox: 0.1934, d4.loss_cls: 0.0622, d4.loss_bbox: 0.1848, loss: 1.8008, grad_norm: 33.3313
2025-06-19 03:57:34,378 - mmdet - INFO - Epoch [6][900/7033]	lr: 1.358e-05, eta: 2:28:53, time: 1.458, data_time: 0.027, memory: 18614, loss_cls: 0.0561, loss_bbox: 0.1760, d0.loss_cls: 0.1458, d0.loss_bbox: 0.2889, d1.loss_cls: 0.0862, d1.loss_bbox: 0.2160, d2.loss_cls: 0.0721, d2.loss_bbox: 0.1970, d3.loss_cls: 0.0609, d3.loss_bbox: 0.1905, d4.loss_cls: 0.0578, d4.loss_bbox: 0.1792, loss: 1.7264, grad_norm: 17.9594
2025-06-19 03:58:46,996 - mmdet - INFO - Epoch [6][950/7033]	lr: 1.358e-05, eta: 2:27:40, time: 1.452, data_time: 0.027, memory: 18614, loss_cls: 0.0610, loss_bbox: 0.1820, d0.loss_cls: 0.1524, d0.loss_bbox: 0.2971, d1.loss_cls: 0.0948, d1.loss_bbox: 0.2205, d2.loss_cls: 0.0756, d2.loss_bbox: 0.2002, d3.loss_cls: 0.0651, d3.loss_bbox: 0.1937, d4.loss_cls: 0.0616, d4.loss_bbox: 0.1859, loss: 1.7898, grad_norm: 29.7635
2025-06-19 03:59:59,805 - mmdet - INFO - Epoch [6][1000/7033]	lr: 1.358e-05, eta: 2:26:27, time: 1.456, data_time: 0.027, memory: 18614, loss_cls: 0.0522, loss_bbox: 0.1724, d0.loss_cls: 0.1498, d0.loss_bbox: 0.2893, d1.loss_cls: 0.0855, d1.loss_bbox: 0.2152, d2.loss_cls: 0.0697, d2.loss_bbox: 0.1939, d3.loss_cls: 0.0584, d3.loss_bbox: 0.1862, d4.loss_cls: 0.0537, d4.loss_bbox: 0.1766, loss: 1.7031, grad_norm: 37.1428
2025-06-19 04:01:12,556 - mmdet - INFO - Epoch [6][1050/7033]	lr: 1.358e-05, eta: 2:25:14, time: 1.455, data_time: 0.025, memory: 18614, loss_cls: 0.0649, loss_bbox: 0.1888, d0.loss_cls: 0.1558, d0.loss_bbox: 0.3057, d1.loss_cls: 0.0958, d1.loss_bbox: 0.2305, d2.loss_cls: 0.0783, d2.loss_bbox: 0.2103, d3.loss_cls: 0.0702, d3.loss_bbox: 0.2018, d4.loss_cls: 0.0657, d4.loss_bbox: 0.1921, loss: 1.8599, grad_norm: 19.6008
2025-06-19 04:02:25,333 - mmdet - INFO - Epoch [6][1100/7033]	lr: 1.358e-05, eta: 2:24:01, time: 1.456, data_time: 0.025, memory: 18614, loss_cls: 0.0559, loss_bbox: 0.1852, d0.loss_cls: 0.1472, d0.loss_bbox: 0.3091, d1.loss_cls: 0.0867, d1.loss_bbox: 0.2296, d2.loss_cls: 0.0724, d2.loss_bbox: 0.2114, d3.loss_cls: 0.0623, d3.loss_bbox: 0.2003, d4.loss_cls: 0.0560, d4.loss_bbox: 0.1903, loss: 1.8064, grad_norm: 30.2896
2025-06-19 04:03:38,099 - mmdet - INFO - Epoch [6][1150/7033]	lr: 1.358e-05, eta: 2:22:49, time: 1.455, data_time: 0.028, memory: 18614, loss_cls: 0.0616, loss_bbox: 0.1873, d0.loss_cls: 0.1491, d0.loss_bbox: 0.3014, d1.loss_cls: 0.0960, d1.loss_bbox: 0.2257, d2.loss_cls: 0.0800, d2.loss_bbox: 0.2081, d3.loss_cls: 0.0690, d3.loss_bbox: 0.1989, d4.loss_cls: 0.0631, d4.loss_bbox: 0.1906, loss: 1.8308, grad_norm: 802.4504
2025-06-19 04:04:57,767 - mmdet - INFO - Epoch [6][1200/7033]	lr: 1.358e-05, eta: 2:21:37, time: 1.593, data_time: 0.026, memory: 18614, loss_cls: 0.0639, loss_bbox: 0.1817, d0.loss_cls: 0.1504, d0.loss_bbox: 0.2967, d1.loss_cls: 0.0925, d1.loss_bbox: 0.2248, d2.loss_cls: 0.0798, d2.loss_bbox: 0.2041, d3.loss_cls: 0.0686, d3.loss_bbox: 0.1969, d4.loss_cls: 0.0643, d4.loss_bbox: 0.1869, loss: 1.8106, grad_norm: 17.7244
2025-06-19 04:06:10,424 - mmdet - INFO - Epoch [6][1250/7033]	lr: 1.358e-05, eta: 2:20:24, time: 1.453, data_time: 0.027, memory: 18614, loss_cls: 0.0623, loss_bbox: 0.1855, d0.loss_cls: 0.1557, d0.loss_bbox: 0.3007, d1.loss_cls: 0.0968, d1.loss_bbox: 0.2247, d2.loss_cls: 0.0802, d2.loss_bbox: 0.2054, d3.loss_cls: 0.0689, d3.loss_bbox: 0.1970, d4.loss_cls: 0.0644, d4.loss_bbox: 0.1875, loss: 1.8291, grad_norm: 24.7862
2025-06-19 04:07:22,895 - mmdet - INFO - Epoch [6][1300/7033]	lr: 1.358e-05, eta: 2:19:11, time: 1.449, data_time: 0.026, memory: 18614, loss_cls: 0.0604, loss_bbox: 0.1875, d0.loss_cls: 0.1526, d0.loss_bbox: 0.3090, d1.loss_cls: 0.0925, d1.loss_bbox: 0.2299, d2.loss_cls: 0.0772, d2.loss_bbox: 0.2095, d3.loss_cls: 0.0660, d3.loss_bbox: 0.2007, d4.loss_cls: 0.0612, d4.loss_bbox: 0.1907, loss: 1.8371, grad_norm: 21.6716
2025-06-19 04:08:35,436 - mmdet - INFO - Epoch [6][1350/7033]	lr: 1.358e-05, eta: 2:17:58, time: 1.451, data_time: 0.028, memory: 18614, loss_cls: 0.0618, loss_bbox: 0.1797, d0.loss_cls: 0.1486, d0.loss_bbox: 0.3020, d1.loss_cls: 0.0929, d1.loss_bbox: 0.2237, d2.loss_cls: 0.0787, d2.loss_bbox: 0.2036, d3.loss_cls: 0.0689, d3.loss_bbox: 0.1936, d4.loss_cls: 0.0632, d4.loss_bbox: 0.1830, loss: 1.7998, grad_norm: 24.1711
2025-06-19 04:09:48,143 - mmdet - INFO - Epoch [6][1400/7033]	lr: 1.358e-05, eta: 2:16:45, time: 1.454, data_time: 0.027, memory: 18614, loss_cls: 0.0573, loss_bbox: 0.1863, d0.loss_cls: 0.1546, d0.loss_bbox: 0.3027, d1.loss_cls: 0.0937, d1.loss_bbox: 0.2300, d2.loss_cls: 0.0738, d2.loss_bbox: 0.2093, d3.loss_cls: 0.0629, d3.loss_bbox: 0.2001, d4.loss_cls: 0.0597, d4.loss_bbox: 0.1891, loss: 1.8194, grad_norm: 18.9493
2025-06-19 04:11:00,584 - mmdet - INFO - Epoch [6][1450/7033]	lr: 1.358e-05, eta: 2:15:32, time: 1.449, data_time: 0.025, memory: 18614, loss_cls: 0.0544, loss_bbox: 0.1784, d0.loss_cls: 0.1430, d0.loss_bbox: 0.2933, d1.loss_cls: 0.0877, d1.loss_bbox: 0.2225, d2.loss_cls: 0.0686, d2.loss_bbox: 0.2008, d3.loss_cls: 0.0589, d3.loss_bbox: 0.1923, d4.loss_cls: 0.0545, d4.loss_bbox: 0.1833, loss: 1.7377, grad_norm: 22.6601
2025-06-19 04:12:13,397 - mmdet - INFO - Epoch [6][1500/7033]	lr: 1.358e-05, eta: 2:14:20, time: 1.456, data_time: 0.024, memory: 18614, loss_cls: 0.0573, loss_bbox: 0.1854, d0.loss_cls: 0.1545, d0.loss_bbox: 0.3018, d1.loss_cls: 0.0919, d1.loss_bbox: 0.2274, d2.loss_cls: 0.0759, d2.loss_bbox: 0.2063, d3.loss_cls: 0.0630, d3.loss_bbox: 0.1985, d4.loss_cls: 0.0582, d4.loss_bbox: 0.1882, loss: 1.8084, grad_norm: 21.8411
2025-06-19 04:13:26,152 - mmdet - INFO - Epoch [6][1550/7033]	lr: 1.358e-05, eta: 2:13:07, time: 1.455, data_time: 0.025, memory: 18614, loss_cls: 0.0636, loss_bbox: 0.1836, d0.loss_cls: 0.1582, d0.loss_bbox: 0.2982, d1.loss_cls: 0.0969, d1.loss_bbox: 0.2259, d2.loss_cls: 0.0812, d2.loss_bbox: 0.2049, d3.loss_cls: 0.0721, d3.loss_bbox: 0.1979, d4.loss_cls: 0.0657, d4.loss_bbox: 0.1874, loss: 1.8357, grad_norm: 32.7879
2025-06-19 04:14:38,594 - mmdet - INFO - Epoch [6][1600/7033]	lr: 1.358e-05, eta: 2:11:54, time: 1.449, data_time: 0.027, memory: 18614, loss_cls: 0.0595, loss_bbox: 0.1857, d0.loss_cls: 0.1494, d0.loss_bbox: 0.3116, d1.loss_cls: 0.0908, d1.loss_bbox: 0.2307, d2.loss_cls: 0.0758, d2.loss_bbox: 0.2102, d3.loss_cls: 0.0644, d3.loss_bbox: 0.2010, d4.loss_cls: 0.0602, d4.loss_bbox: 0.1900, loss: 1.8294, grad_norm: 19.7406
2025-06-19 04:15:51,462 - mmdet - INFO - Epoch [6][1650/7033]	lr: 1.358e-05, eta: 2:10:41, time: 1.457, data_time: 0.028, memory: 18614, loss_cls: 0.0669, loss_bbox: 0.1915, d0.loss_cls: 0.1548, d0.loss_bbox: 0.3148, d1.loss_cls: 0.0968, d1.loss_bbox: 0.2327, d2.loss_cls: 0.0826, d2.loss_bbox: 0.2136, d3.loss_cls: 0.0727, d3.loss_bbox: 0.2059, d4.loss_cls: 0.0680, d4.loss_bbox: 0.1954, loss: 1.8956, grad_norm: 36.2131
2025-06-19 04:17:04,194 - mmdet - INFO - Epoch [6][1700/7033]	lr: 1.358e-05, eta: 2:09:28, time: 1.455, data_time: 0.026, memory: 18614, loss_cls: 0.0555, loss_bbox: 0.1853, d0.loss_cls: 0.1557, d0.loss_bbox: 0.3083, d1.loss_cls: 0.0877, d1.loss_bbox: 0.2287, d2.loss_cls: 0.0730, d2.loss_bbox: 0.2085, d3.loss_cls: 0.0614, d3.loss_bbox: 0.1991, d4.loss_cls: 0.0559, d4.loss_bbox: 0.1889, loss: 1.8081, grad_norm: 21.8646
2025-06-19 04:18:16,687 - mmdet - INFO - Epoch [6][1750/7033]	lr: 1.358e-05, eta: 2:08:15, time: 1.450, data_time: 0.026, memory: 18614, loss_cls: 0.0609, loss_bbox: 0.1812, d0.loss_cls: 0.1544, d0.loss_bbox: 0.3015, d1.loss_cls: 0.0927, d1.loss_bbox: 0.2232, d2.loss_cls: 0.0785, d2.loss_bbox: 0.2011, d3.loss_cls: 0.0672, d3.loss_bbox: 0.1925, d4.loss_cls: 0.0616, d4.loss_bbox: 0.1849, loss: 1.7998, grad_norm: 33.3631
2025-06-19 04:19:31,181 - mmdet - INFO - Epoch [6][1800/7033]	lr: 1.358e-05, eta: 2:07:03, time: 1.490, data_time: 0.026, memory: 18614, loss_cls: 0.0618, loss_bbox: 0.1846, d0.loss_cls: 0.1580, d0.loss_bbox: 0.3066, d1.loss_cls: 0.0932, d1.loss_bbox: 0.2228, d2.loss_cls: 0.0794, d2.loss_bbox: 0.2034, d3.loss_cls: 0.0670, d3.loss_bbox: 0.1972, d4.loss_cls: 0.0623, d4.loss_bbox: 0.1878, loss: 1.8240, grad_norm: 23.1689
2025-06-19 04:20:43,873 - mmdet - INFO - Epoch [6][1850/7033]	lr: 1.358e-05, eta: 2:05:50, time: 1.454, data_time: 0.025, memory: 18614, loss_cls: 0.0642, loss_bbox: 0.1904, d0.loss_cls: 0.1629, d0.loss_bbox: 0.3067, d1.loss_cls: 0.1012, d1.loss_bbox: 0.2309, d2.loss_cls: 0.0845, d2.loss_bbox: 0.2100, d3.loss_cls: 0.0728, d3.loss_bbox: 0.2034, d4.loss_cls: 0.0665, d4.loss_bbox: 0.1932, loss: 1.8868, grad_norm: 23.7251
2025-06-19 04:21:56,770 - mmdet - INFO - Epoch [6][1900/7033]	lr: 1.358e-05, eta: 2:04:37, time: 1.458, data_time: 0.029, memory: 18614, loss_cls: 0.0590, loss_bbox: 0.1851, d0.loss_cls: 0.1464, d0.loss_bbox: 0.3035, d1.loss_cls: 0.0903, d1.loss_bbox: 0.2285, d2.loss_cls: 0.0768, d2.loss_bbox: 0.2087, d3.loss_cls: 0.0655, d3.loss_bbox: 0.2001, d4.loss_cls: 0.0604, d4.loss_bbox: 0.1889, loss: 1.8131, grad_norm: 18.3195
2025-06-19 04:23:09,367 - mmdet - INFO - Epoch [6][1950/7033]	lr: 1.358e-05, eta: 2:03:24, time: 1.452, data_time: 0.026, memory: 18614, loss_cls: 0.0556, loss_bbox: 0.1827, d0.loss_cls: 0.1544, d0.loss_bbox: 0.2982, d1.loss_cls: 0.0930, d1.loss_bbox: 0.2213, d2.loss_cls: 0.0762, d2.loss_bbox: 0.2024, d3.loss_cls: 0.0656, d3.loss_bbox: 0.1929, d4.loss_cls: 0.0572, d4.loss_bbox: 0.1856, loss: 1.7852, grad_norm: 21.1495
2025-06-19 04:24:22,071 - mmdet - INFO - Epoch [6][2000/7033]	lr: 1.358e-05, eta: 2:02:11, time: 1.454, data_time: 0.026, memory: 18614, loss_cls: 0.0562, loss_bbox: 0.1829, d0.loss_cls: 0.1537, d0.loss_bbox: 0.3022, d1.loss_cls: 0.0915, d1.loss_bbox: 0.2251, d2.loss_cls: 0.0725, d2.loss_bbox: 0.2036, d3.loss_cls: 0.0626, d3.loss_bbox: 0.1957, d4.loss_cls: 0.0580, d4.loss_bbox: 0.1852, loss: 1.7894, grad_norm: 20.4753
2025-06-19 04:25:34,535 - mmdet - INFO - Epoch [6][2050/7033]	lr: 1.358e-05, eta: 2:00:58, time: 1.449, data_time: 0.026, memory: 18614, loss_cls: 0.0555, loss_bbox: 0.1856, d0.loss_cls: 0.1478, d0.loss_bbox: 0.2999, d1.loss_cls: 0.0876, d1.loss_bbox: 0.2262, d2.loss_cls: 0.0754, d2.loss_bbox: 0.2053, d3.loss_cls: 0.0631, d3.loss_bbox: 0.1975, d4.loss_cls: 0.0580, d4.loss_bbox: 0.1898, loss: 1.7915, grad_norm: 30.8689
2025-06-19 04:26:47,092 - mmdet - INFO - Epoch [6][2100/7033]	lr: 1.358e-05, eta: 1:59:45, time: 1.451, data_time: 0.027, memory: 18614, loss_cls: 0.0602, loss_bbox: 0.1866, d0.loss_cls: 0.1525, d0.loss_bbox: 0.3087, d1.loss_cls: 0.0903, d1.loss_bbox: 0.2327, d2.loss_cls: 0.0780, d2.loss_bbox: 0.2073, d3.loss_cls: 0.0671, d3.loss_bbox: 0.1991, d4.loss_cls: 0.0633, d4.loss_bbox: 0.1913, loss: 1.8372, grad_norm: 22.2012
2025-06-19 04:27:59,799 - mmdet - INFO - Epoch [6][2150/7033]	lr: 1.358e-05, eta: 1:58:33, time: 1.454, data_time: 0.027, memory: 18614, loss_cls: 0.0599, loss_bbox: 0.1895, d0.loss_cls: 0.1581, d0.loss_bbox: 0.3115, d1.loss_cls: 0.0951, d1.loss_bbox: 0.2339, d2.loss_cls: 0.0798, d2.loss_bbox: 0.2104, d3.loss_cls: 0.0678, d3.loss_bbox: 0.2010, d4.loss_cls: 0.0628, d4.loss_bbox: 0.1916, loss: 1.8614, grad_norm: 16.5985
2025-06-19 04:29:14,429 - mmdet - INFO - Epoch [6][2200/7033]	lr: 1.358e-05, eta: 1:57:20, time: 1.493, data_time: 0.028, memory: 18614, loss_cls: 0.0644, loss_bbox: 0.1868, d0.loss_cls: 0.1535, d0.loss_bbox: 0.3094, d1.loss_cls: 0.0977, d1.loss_bbox: 0.2326, d2.loss_cls: 0.0830, d2.loss_bbox: 0.2086, d3.loss_cls: 0.0713, d3.loss_bbox: 0.1998, d4.loss_cls: 0.0658, d4.loss_bbox: 0.1902, loss: 1.8630, grad_norm: 27.6654
2025-06-19 04:30:26,893 - mmdet - INFO - Epoch [6][2250/7033]	lr: 1.358e-05, eta: 1:56:07, time: 1.449, data_time: 0.026, memory: 18614, loss_cls: 0.0577, loss_bbox: 0.1845, d0.loss_cls: 0.1584, d0.loss_bbox: 0.3037, d1.loss_cls: 0.0933, d1.loss_bbox: 0.2275, d2.loss_cls: 0.0784, d2.loss_bbox: 0.2057, d3.loss_cls: 0.0649, d3.loss_bbox: 0.1976, d4.loss_cls: 0.0602, d4.loss_bbox: 0.1879, loss: 1.8200, grad_norm: 23.5526
2025-06-19 04:31:39,395 - mmdet - INFO - Epoch [6][2300/7033]	lr: 1.358e-05, eta: 1:54:54, time: 1.450, data_time: 0.025, memory: 18614, loss_cls: 0.0601, loss_bbox: 0.1847, d0.loss_cls: 0.1587, d0.loss_bbox: 0.2985, d1.loss_cls: 0.0913, d1.loss_bbox: 0.2292, d2.loss_cls: 0.0769, d2.loss_bbox: 0.2101, d3.loss_cls: 0.0657, d3.loss_bbox: 0.2004, d4.loss_cls: 0.0611, d4.loss_bbox: 0.1898, loss: 1.8264, grad_norm: 35.4414
2025-06-19 04:32:52,146 - mmdet - INFO - Epoch [6][2350/7033]	lr: 1.358e-05, eta: 1:53:41, time: 1.455, data_time: 0.026, memory: 18614, loss_cls: 0.0597, loss_bbox: 0.1836, d0.loss_cls: 0.1496, d0.loss_bbox: 0.2980, d1.loss_cls: 0.0924, d1.loss_bbox: 0.2274, d2.loss_cls: 0.0750, d2.loss_bbox: 0.2069, d3.loss_cls: 0.0650, d3.loss_bbox: 0.1973, d4.loss_cls: 0.0605, d4.loss_bbox: 0.1874, loss: 1.8026, grad_norm: 286.9028
2025-06-19 04:34:04,979 - mmdet - INFO - Epoch [6][2400/7033]	lr: 1.358e-05, eta: 1:52:29, time: 1.457, data_time: 0.026, memory: 18614, loss_cls: 0.0549, loss_bbox: 0.1814, d0.loss_cls: 0.1495, d0.loss_bbox: 0.2959, d1.loss_cls: 0.0902, d1.loss_bbox: 0.2226, d2.loss_cls: 0.0729, d2.loss_bbox: 0.2032, d3.loss_cls: 0.0612, d3.loss_bbox: 0.1949, d4.loss_cls: 0.0568, d4.loss_bbox: 0.1850, loss: 1.7684, grad_norm: 15.2817
2025-06-19 04:35:18,029 - mmdet - INFO - Epoch [6][2450/7033]	lr: 1.358e-05, eta: 1:51:16, time: 1.461, data_time: 0.031, memory: 18614, loss_cls: 0.0574, loss_bbox: 0.1818, d0.loss_cls: 0.1504, d0.loss_bbox: 0.2993, d1.loss_cls: 0.0917, d1.loss_bbox: 0.2248, d2.loss_cls: 0.0753, d2.loss_bbox: 0.2035, d3.loss_cls: 0.0632, d3.loss_bbox: 0.1950, d4.loss_cls: 0.0580, d4.loss_bbox: 0.1851, loss: 1.7853, grad_norm: 46.5776
2025-06-19 04:36:30,885 - mmdet - INFO - Epoch [6][2500/7033]	lr: 1.358e-05, eta: 1:50:03, time: 1.457, data_time: 0.027, memory: 18614, loss_cls: 0.0656, loss_bbox: 0.1950, d0.loss_cls: 0.1548, d0.loss_bbox: 0.3111, d1.loss_cls: 0.0942, d1.loss_bbox: 0.2349, d2.loss_cls: 0.0801, d2.loss_bbox: 0.2168, d3.loss_cls: 0.0732, d3.loss_bbox: 0.2075, d4.loss_cls: 0.0690, d4.loss_bbox: 0.1977, loss: 1.8999, grad_norm: 34.0209
2025-06-19 04:37:43,328 - mmdet - INFO - Epoch [6][2550/7033]	lr: 1.358e-05, eta: 1:48:50, time: 1.449, data_time: 0.027, memory: 18614, loss_cls: 0.0621, loss_bbox: 0.1798, d0.loss_cls: 0.1530, d0.loss_bbox: 0.2969, d1.loss_cls: 0.0954, d1.loss_bbox: 0.2221, d2.loss_cls: 0.0782, d2.loss_bbox: 0.2025, d3.loss_cls: 0.0687, d3.loss_bbox: 0.1947, d4.loss_cls: 0.0635, d4.loss_bbox: 0.1845, loss: 1.8014, grad_norm: 20.9503
2025-06-19 04:38:56,056 - mmdet - INFO - Epoch [6][2600/7033]	lr: 1.358e-05, eta: 1:47:37, time: 1.455, data_time: 0.028, memory: 18614, loss_cls: 0.0602, loss_bbox: 0.1852, d0.loss_cls: 0.1511, d0.loss_bbox: 0.3077, d1.loss_cls: 0.0939, d1.loss_bbox: 0.2264, d2.loss_cls: 0.0778, d2.loss_bbox: 0.2061, d3.loss_cls: 0.0681, d3.loss_bbox: 0.1988, d4.loss_cls: 0.0629, d4.loss_bbox: 0.1888, loss: 1.8271, grad_norm: 25.1916
2025-06-19 04:40:08,565 - mmdet - INFO - Epoch [6][2650/7033]	lr: 1.358e-05, eta: 1:46:24, time: 1.450, data_time: 0.025, memory: 18614, loss_cls: 0.0619, loss_bbox: 0.1832, d0.loss_cls: 0.1536, d0.loss_bbox: 0.3081, d1.loss_cls: 0.0937, d1.loss_bbox: 0.2320, d2.loss_cls: 0.0771, d2.loss_bbox: 0.2084, d3.loss_cls: 0.0669, d3.loss_bbox: 0.1988, d4.loss_cls: 0.0635, d4.loss_bbox: 0.1869, loss: 1.8340, grad_norm: 48.3847
2025-06-19 04:41:21,164 - mmdet - INFO - Epoch [6][2700/7033]	lr: 1.358e-05, eta: 1:45:11, time: 1.452, data_time: 0.027, memory: 18614, loss_cls: 0.0532, loss_bbox: 0.1826, d0.loss_cls: 0.1478, d0.loss_bbox: 0.2999, d1.loss_cls: 0.0854, d1.loss_bbox: 0.2250, d2.loss_cls: 0.0697, d2.loss_bbox: 0.2034, d3.loss_cls: 0.0597, d3.loss_bbox: 0.1954, d4.loss_cls: 0.0543, d4.loss_bbox: 0.1856, loss: 1.7619, grad_norm: 27.5111
2025-06-19 04:42:33,901 - mmdet - INFO - Epoch [6][2750/7033]	lr: 1.358e-05, eta: 1:43:59, time: 1.455, data_time: 0.028, memory: 18614, loss_cls: 0.0601, loss_bbox: 0.1872, d0.loss_cls: 0.1519, d0.loss_bbox: 0.3006, d1.loss_cls: 0.0934, d1.loss_bbox: 0.2276, d2.loss_cls: 0.0778, d2.loss_bbox: 0.2064, d3.loss_cls: 0.0681, d3.loss_bbox: 0.2002, d4.loss_cls: 0.0619, d4.loss_bbox: 0.1912, loss: 1.8263, grad_norm: 100.3722
2025-06-19 04:43:47,005 - mmdet - INFO - Epoch [6][2800/7033]	lr: 1.358e-05, eta: 1:42:46, time: 1.462, data_time: 0.029, memory: 18614, loss_cls: 0.0574, loss_bbox: 0.1775, d0.loss_cls: 0.1519, d0.loss_bbox: 0.3009, d1.loss_cls: 0.0895, d1.loss_bbox: 0.2225, d2.loss_cls: 0.0736, d2.loss_bbox: 0.2004, d3.loss_cls: 0.0650, d3.loss_bbox: 0.1901, d4.loss_cls: 0.0590, d4.loss_bbox: 0.1819, loss: 1.7696, grad_norm: 15.7839
2025-06-19 04:44:59,986 - mmdet - INFO - Epoch [6][2850/7033]	lr: 1.358e-05, eta: 1:41:33, time: 1.460, data_time: 0.035, memory: 18614, loss_cls: 0.0571, loss_bbox: 0.1772, d0.loss_cls: 0.1522, d0.loss_bbox: 0.2984, d1.loss_cls: 0.0878, d1.loss_bbox: 0.2220, d2.loss_cls: 0.0699, d2.loss_bbox: 0.2000, d3.loss_cls: 0.0616, d3.loss_bbox: 0.1924, d4.loss_cls: 0.0589, d4.loss_bbox: 0.1812, loss: 1.7588, grad_norm: 49.4051
2025-06-19 04:46:14,412 - mmdet - INFO - Epoch [6][2900/7033]	lr: 1.358e-05, eta: 1:40:20, time: 1.488, data_time: 0.026, memory: 18614, loss_cls: 0.0662, loss_bbox: 0.1933, d0.loss_cls: 0.1598, d0.loss_bbox: 0.3104, d1.loss_cls: 0.0996, d1.loss_bbox: 0.2379, d2.loss_cls: 0.0852, d2.loss_bbox: 0.2141, d3.loss_cls: 0.0738, d3.loss_bbox: 0.2059, d4.loss_cls: 0.0691, d4.loss_bbox: 0.1962, loss: 1.9114, grad_norm: 79.1797
2025-06-19 04:47:27,588 - mmdet - INFO - Epoch [6][2950/7033]	lr: 1.358e-05, eta: 1:39:08, time: 1.464, data_time: 0.033, memory: 18614, loss_cls: 0.0553, loss_bbox: 0.1855, d0.loss_cls: 0.1504, d0.loss_bbox: 0.3038, d1.loss_cls: 0.0893, d1.loss_bbox: 0.2240, d2.loss_cls: 0.0724, d2.loss_bbox: 0.2039, d3.loss_cls: 0.0608, d3.loss_bbox: 0.1980, d4.loss_cls: 0.0574, d4.loss_bbox: 0.1875, loss: 1.7882, grad_norm: 37.8576
2025-06-19 04:48:40,808 - mmdet - INFO - Epoch [6][3000/7033]	lr: 1.358e-05, eta: 1:37:55, time: 1.464, data_time: 0.034, memory: 18614, loss_cls: 0.0587, loss_bbox: 0.1823, d0.loss_cls: 0.1460, d0.loss_bbox: 0.2937, d1.loss_cls: 0.0906, d1.loss_bbox: 0.2226, d2.loss_cls: 0.0759, d2.loss_bbox: 0.2030, d3.loss_cls: 0.0657, d3.loss_bbox: 0.1951, d4.loss_cls: 0.0600, d4.loss_bbox: 0.1864, loss: 1.7800, grad_norm: 49.0666
2025-06-19 04:49:53,588 - mmdet - INFO - Epoch [6][3050/7033]	lr: 1.358e-05, eta: 1:36:42, time: 1.456, data_time: 0.028, memory: 18614, loss_cls: 0.0534, loss_bbox: 0.1817, d0.loss_cls: 0.1433, d0.loss_bbox: 0.2892, d1.loss_cls: 0.0849, d1.loss_bbox: 0.2169, d2.loss_cls: 0.0691, d2.loss_bbox: 0.2013, d3.loss_cls: 0.0588, d3.loss_bbox: 0.1917, d4.loss_cls: 0.0550, d4.loss_bbox: 0.1841, loss: 1.7294, grad_norm: 28.0157
2025-06-19 04:51:06,400 - mmdet - INFO - Epoch [6][3100/7033]	lr: 1.358e-05, eta: 1:35:29, time: 1.456, data_time: 0.026, memory: 18614, loss_cls: 0.0563, loss_bbox: 0.1807, d0.loss_cls: 0.1483, d0.loss_bbox: 0.2922, d1.loss_cls: 0.0877, d1.loss_bbox: 0.2209, d2.loss_cls: 0.0729, d2.loss_bbox: 0.2017, d3.loss_cls: 0.0628, d3.loss_bbox: 0.1938, d4.loss_cls: 0.0579, d4.loss_bbox: 0.1833, loss: 1.7585, grad_norm: 15.6411
2025-06-19 04:52:18,862 - mmdet - INFO - Epoch [6][3150/7033]	lr: 1.358e-05, eta: 1:34:16, time: 1.449, data_time: 0.027, memory: 18614, loss_cls: 0.0615, loss_bbox: 0.1843, d0.loss_cls: 0.1518, d0.loss_bbox: 0.3004, d1.loss_cls: 0.0909, d1.loss_bbox: 0.2276, d2.loss_cls: 0.0753, d2.loss_bbox: 0.2065, d3.loss_cls: 0.0650, d3.loss_bbox: 0.1988, d4.loss_cls: 0.0634, d4.loss_bbox: 0.1876, loss: 1.8132, grad_norm: 20.3836
2025-06-19 04:53:31,566 - mmdet - INFO - Epoch [6][3200/7033]	lr: 1.358e-05, eta: 1:33:03, time: 1.454, data_time: 0.027, memory: 18614, loss_cls: 0.0551, loss_bbox: 0.1829, d0.loss_cls: 0.1531, d0.loss_bbox: 0.2973, d1.loss_cls: 0.0900, d1.loss_bbox: 0.2229, d2.loss_cls: 0.0740, d2.loss_bbox: 0.2014, d3.loss_cls: 0.0629, d3.loss_bbox: 0.1945, d4.loss_cls: 0.0576, d4.loss_bbox: 0.1853, loss: 1.7771, grad_norm: 47.9101
2025-06-19 04:54:44,409 - mmdet - INFO - Epoch [6][3250/7033]	lr: 1.358e-05, eta: 1:31:50, time: 1.457, data_time: 0.030, memory: 18614, loss_cls: 0.0625, loss_bbox: 0.1843, d0.loss_cls: 0.1512, d0.loss_bbox: 0.3084, d1.loss_cls: 0.0945, d1.loss_bbox: 0.2302, d2.loss_cls: 0.0807, d2.loss_bbox: 0.2096, d3.loss_cls: 0.0706, d3.loss_bbox: 0.1991, d4.loss_cls: 0.0637, d4.loss_bbox: 0.1883, loss: 1.8430, grad_norm: 34.6180
2025-06-19 04:55:57,235 - mmdet - INFO - Epoch [6][3300/7033]	lr: 1.358e-05, eta: 1:30:38, time: 1.457, data_time: 0.029, memory: 18614, loss_cls: 0.0612, loss_bbox: 0.1836, d0.loss_cls: 0.1483, d0.loss_bbox: 0.2918, d1.loss_cls: 0.0905, d1.loss_bbox: 0.2252, d2.loss_cls: 0.0769, d2.loss_bbox: 0.2044, d3.loss_cls: 0.0681, d3.loss_bbox: 0.1967, d4.loss_cls: 0.0637, d4.loss_bbox: 0.1862, loss: 1.7966, grad_norm: 29.0829
2025-06-19 04:57:09,706 - mmdet - INFO - Epoch [6][3350/7033]	lr: 1.358e-05, eta: 1:29:25, time: 1.449, data_time: 0.026, memory: 18614, loss_cls: 0.0652, loss_bbox: 0.1847, d0.loss_cls: 0.1507, d0.loss_bbox: 0.3001, d1.loss_cls: 0.0956, d1.loss_bbox: 0.2251, d2.loss_cls: 0.0829, d2.loss_bbox: 0.2057, d3.loss_cls: 0.0728, d3.loss_bbox: 0.1970, d4.loss_cls: 0.0665, d4.loss_bbox: 0.1876, loss: 1.8339, grad_norm: 16.6512
2025-06-19 04:58:22,003 - mmdet - INFO - Epoch [6][3400/7033]	lr: 1.358e-05, eta: 1:28:12, time: 1.446, data_time: 0.026, memory: 18614, loss_cls: 0.0589, loss_bbox: 0.1834, d0.loss_cls: 0.1486, d0.loss_bbox: 0.3061, d1.loss_cls: 0.0914, d1.loss_bbox: 0.2264, d2.loss_cls: 0.0768, d2.loss_bbox: 0.2062, d3.loss_cls: 0.0661, d3.loss_bbox: 0.1977, d4.loss_cls: 0.0604, d4.loss_bbox: 0.1872, loss: 1.8092, grad_norm: 19.3149
2025-06-19 04:59:36,661 - mmdet - INFO - Epoch [6][3450/7033]	lr: 1.358e-05, eta: 1:26:59, time: 1.493, data_time: 0.027, memory: 18614, loss_cls: 0.0663, loss_bbox: 0.1866, d0.loss_cls: 0.1584, d0.loss_bbox: 0.3044, d1.loss_cls: 0.1009, d1.loss_bbox: 0.2283, d2.loss_cls: 0.0852, d2.loss_bbox: 0.2075, d3.loss_cls: 0.0736, d3.loss_bbox: 0.1981, d4.loss_cls: 0.0689, d4.loss_bbox: 0.1893, loss: 1.8674, grad_norm: 44.6905
2025-06-19 05:00:49,391 - mmdet - INFO - Epoch [6][3500/7033]	lr: 1.358e-05, eta: 1:25:46, time: 1.455, data_time: 0.028, memory: 18614, loss_cls: 0.0557, loss_bbox: 0.1813, d0.loss_cls: 0.1539, d0.loss_bbox: 0.2948, d1.loss_cls: 0.0916, d1.loss_bbox: 0.2206, d2.loss_cls: 0.0738, d2.loss_bbox: 0.1982, d3.loss_cls: 0.0621, d3.loss_bbox: 0.1933, d4.loss_cls: 0.0578, d4.loss_bbox: 0.1832, loss: 1.7663, grad_norm: 20.8468
2025-06-19 05:02:01,975 - mmdet - INFO - Epoch [6][3550/7033]	lr: 1.358e-05, eta: 1:24:33, time: 1.452, data_time: 0.028, memory: 18614, loss_cls: 0.0539, loss_bbox: 0.1775, d0.loss_cls: 0.1473, d0.loss_bbox: 0.2969, d1.loss_cls: 0.0862, d1.loss_bbox: 0.2188, d2.loss_cls: 0.0731, d2.loss_bbox: 0.2005, d3.loss_cls: 0.0615, d3.loss_bbox: 0.1919, d4.loss_cls: 0.0560, d4.loss_bbox: 0.1820, loss: 1.7457, grad_norm: 47.9348
2025-06-19 05:03:14,818 - mmdet - INFO - Epoch [6][3600/7033]	lr: 1.358e-05, eta: 1:23:21, time: 1.457, data_time: 0.027, memory: 18614, loss_cls: 0.0559, loss_bbox: 0.1846, d0.loss_cls: 0.1507, d0.loss_bbox: 0.3038, d1.loss_cls: 0.0910, d1.loss_bbox: 0.2256, d2.loss_cls: 0.0733, d2.loss_bbox: 0.2057, d3.loss_cls: 0.0632, d3.loss_bbox: 0.1970, d4.loss_cls: 0.0584, d4.loss_bbox: 0.1880, loss: 1.7970, grad_norm: 29.9882
2025-06-19 05:04:27,458 - mmdet - INFO - Epoch [6][3650/7033]	lr: 1.358e-05, eta: 1:22:08, time: 1.453, data_time: 0.027, memory: 18614, loss_cls: 0.0642, loss_bbox: 0.1879, d0.loss_cls: 0.1535, d0.loss_bbox: 0.2991, d1.loss_cls: 0.0987, d1.loss_bbox: 0.2293, d2.loss_cls: 0.0826, d2.loss_bbox: 0.2073, d3.loss_cls: 0.0710, d3.loss_bbox: 0.1988, d4.loss_cls: 0.0646, d4.loss_bbox: 0.1908, loss: 1.8478, grad_norm: 40.4060
2025-06-19 05:05:40,041 - mmdet - INFO - Epoch [6][3700/7033]	lr: 1.358e-05, eta: 1:20:55, time: 1.452, data_time: 0.026, memory: 18614, loss_cls: 0.0583, loss_bbox: 0.1818, d0.loss_cls: 0.1481, d0.loss_bbox: 0.2958, d1.loss_cls: 0.0915, d1.loss_bbox: 0.2211, d2.loss_cls: 0.0779, d2.loss_bbox: 0.1997, d3.loss_cls: 0.0650, d3.loss_bbox: 0.1935, d4.loss_cls: 0.0602, d4.loss_bbox: 0.1852, loss: 1.7782, grad_norm: 35.3219
2025-06-19 05:06:52,797 - mmdet - INFO - Epoch [6][3750/7033]	lr: 1.358e-05, eta: 1:19:42, time: 1.455, data_time: 0.027, memory: 18614, loss_cls: 0.0582, loss_bbox: 0.1826, d0.loss_cls: 0.1564, d0.loss_bbox: 0.2913, d1.loss_cls: 0.0955, d1.loss_bbox: 0.2215, d2.loss_cls: 0.0776, d2.loss_bbox: 0.2014, d3.loss_cls: 0.0657, d3.loss_bbox: 0.1939, d4.loss_cls: 0.0599, d4.loss_bbox: 0.1848, loss: 1.7889, grad_norm: 17.7197
2025-06-19 05:08:05,441 - mmdet - INFO - Epoch [6][3800/7033]	lr: 1.358e-05, eta: 1:18:29, time: 1.453, data_time: 0.028, memory: 18614, loss_cls: 0.0632, loss_bbox: 0.1871, d0.loss_cls: 0.1520, d0.loss_bbox: 0.3053, d1.loss_cls: 0.0928, d1.loss_bbox: 0.2289, d2.loss_cls: 0.0779, d2.loss_bbox: 0.2101, d3.loss_cls: 0.0686, d3.loss_bbox: 0.2016, d4.loss_cls: 0.0652, d4.loss_bbox: 0.1911, loss: 1.8438, grad_norm: 32.5900
2025-06-19 05:09:18,067 - mmdet - INFO - Epoch [6][3850/7033]	lr: 1.358e-05, eta: 1:17:16, time: 1.453, data_time: 0.026, memory: 18614, loss_cls: 0.0531, loss_bbox: 0.1737, d0.loss_cls: 0.1414, d0.loss_bbox: 0.2873, d1.loss_cls: 0.0864, d1.loss_bbox: 0.2135, d2.loss_cls: 0.0690, d2.loss_bbox: 0.1952, d3.loss_cls: 0.0582, d3.loss_bbox: 0.1875, d4.loss_cls: 0.0551, d4.loss_bbox: 0.1770, loss: 1.6973, grad_norm: 95.6724
2025-06-19 05:10:30,382 - mmdet - INFO - Epoch [6][3900/7033]	lr: 1.358e-05, eta: 1:16:03, time: 1.446, data_time: 0.026, memory: 18614, loss_cls: 0.0564, loss_bbox: 0.1850, d0.loss_cls: 0.1495, d0.loss_bbox: 0.3081, d1.loss_cls: 0.0875, d1.loss_bbox: 0.2287, d2.loss_cls: 0.0740, d2.loss_bbox: 0.2055, d3.loss_cls: 0.0638, d3.loss_bbox: 0.1980, d4.loss_cls: 0.0580, d4.loss_bbox: 0.1882, loss: 1.8026, grad_norm: 21.0190
2025-06-19 05:11:43,040 - mmdet - INFO - Epoch [6][3950/7033]	lr: 1.358e-05, eta: 1:14:51, time: 1.453, data_time: 0.027, memory: 18614, loss_cls: 0.0601, loss_bbox: 0.1903, d0.loss_cls: 0.1501, d0.loss_bbox: 0.3037, d1.loss_cls: 0.0862, d1.loss_bbox: 0.2314, d2.loss_cls: 0.0730, d2.loss_bbox: 0.2116, d3.loss_cls: 0.0650, d3.loss_bbox: 0.2039, d4.loss_cls: 0.0617, d4.loss_bbox: 0.1939, loss: 1.8310, grad_norm: 39.9385
2025-06-19 05:12:55,636 - mmdet - INFO - Epoch [6][4000/7033]	lr: 1.358e-05, eta: 1:13:38, time: 1.452, data_time: 0.027, memory: 18614, loss_cls: 0.0566, loss_bbox: 0.1817, d0.loss_cls: 0.1491, d0.loss_bbox: 0.2905, d1.loss_cls: 0.0882, d1.loss_bbox: 0.2227, d2.loss_cls: 0.0728, d2.loss_bbox: 0.2032, d3.loss_cls: 0.0626, d3.loss_bbox: 0.1950, d4.loss_cls: 0.0587, d4.loss_bbox: 0.1857, loss: 1.7667, grad_norm: 48.9549
2025-06-19 05:14:08,372 - mmdet - INFO - Epoch [6][4050/7033]	lr: 1.358e-05, eta: 1:12:25, time: 1.455, data_time: 0.028, memory: 18614, loss_cls: 0.0551, loss_bbox: 0.1748, d0.loss_cls: 0.1498, d0.loss_bbox: 0.2888, d1.loss_cls: 0.0875, d1.loss_bbox: 0.2150, d2.loss_cls: 0.0724, d2.loss_bbox: 0.1947, d3.loss_cls: 0.0622, d3.loss_bbox: 0.1863, d4.loss_cls: 0.0573, d4.loss_bbox: 0.1777, loss: 1.7216, grad_norm: 19.0810
2025-06-19 05:15:20,817 - mmdet - INFO - Epoch [6][4100/7033]	lr: 1.358e-05, eta: 1:11:12, time: 1.449, data_time: 0.026, memory: 18614, loss_cls: 0.0565, loss_bbox: 0.1759, d0.loss_cls: 0.1448, d0.loss_bbox: 0.2955, d1.loss_cls: 0.0857, d1.loss_bbox: 0.2199, d2.loss_cls: 0.0727, d2.loss_bbox: 0.1982, d3.loss_cls: 0.0629, d3.loss_bbox: 0.1883, d4.loss_cls: 0.0571, d4.loss_bbox: 0.1789, loss: 1.7364, grad_norm: 31.6095
2025-06-19 05:16:33,391 - mmdet - INFO - Epoch [6][4150/7033]	lr: 1.358e-05, eta: 1:09:59, time: 1.451, data_time: 0.025, memory: 18614, loss_cls: 0.0555, loss_bbox: 0.1761, d0.loss_cls: 0.1478, d0.loss_bbox: 0.2950, d1.loss_cls: 0.0866, d1.loss_bbox: 0.2195, d2.loss_cls: 0.0730, d2.loss_bbox: 0.1978, d3.loss_cls: 0.0617, d3.loss_bbox: 0.1900, d4.loss_cls: 0.0573, d4.loss_bbox: 0.1804, loss: 1.7407, grad_norm: 58.8259
2025-06-19 05:17:45,816 - mmdet - INFO - Epoch [6][4200/7033]	lr: 1.358e-05, eta: 1:08:46, time: 1.448, data_time: 0.026, memory: 18614, loss_cls: 0.0549, loss_bbox: 0.1775, d0.loss_cls: 0.1371, d0.loss_bbox: 0.2864, d1.loss_cls: 0.0853, d1.loss_bbox: 0.2161, d2.loss_cls: 0.0710, d2.loss_bbox: 0.1962, d3.loss_cls: 0.0611, d3.loss_bbox: 0.1885, d4.loss_cls: 0.0558, d4.loss_bbox: 0.1812, loss: 1.7110, grad_norm: 73.8725
2025-06-19 05:18:58,490 - mmdet - INFO - Epoch [6][4250/7033]	lr: 1.358e-05, eta: 1:07:34, time: 1.453, data_time: 0.027, memory: 18614, loss_cls: 0.0547, loss_bbox: 0.1806, d0.loss_cls: 0.1442, d0.loss_bbox: 0.2961, d1.loss_cls: 0.0837, d1.loss_bbox: 0.2248, d2.loss_cls: 0.0710, d2.loss_bbox: 0.2036, d3.loss_cls: 0.0612, d3.loss_bbox: 0.1944, d4.loss_cls: 0.0552, d4.loss_bbox: 0.1844, loss: 1.7540, grad_norm: 19.0558
2025-06-19 05:20:11,122 - mmdet - INFO - Epoch [6][4300/7033]	lr: 1.358e-05, eta: 1:06:21, time: 1.453, data_time: 0.026, memory: 18614, loss_cls: 0.0573, loss_bbox: 0.1848, d0.loss_cls: 0.1492, d0.loss_bbox: 0.3032, d1.loss_cls: 0.0889, d1.loss_bbox: 0.2276, d2.loss_cls: 0.0726, d2.loss_bbox: 0.2062, d3.loss_cls: 0.0638, d3.loss_bbox: 0.1984, d4.loss_cls: 0.0579, d4.loss_bbox: 0.1879, loss: 1.7979, grad_norm: 45.0806
2025-06-19 05:21:23,900 - mmdet - INFO - Epoch [6][4350/7033]	lr: 1.358e-05, eta: 1:05:08, time: 1.456, data_time: 0.026, memory: 18614, loss_cls: 0.0583, loss_bbox: 0.1902, d0.loss_cls: 0.1481, d0.loss_bbox: 0.3064, d1.loss_cls: 0.0916, d1.loss_bbox: 0.2361, d2.loss_cls: 0.0742, d2.loss_bbox: 0.2123, d3.loss_cls: 0.0648, d3.loss_bbox: 0.2054, d4.loss_cls: 0.0596, d4.loss_bbox: 0.1941, loss: 1.8411, grad_norm: 64.6085
2025-06-19 05:22:36,645 - mmdet - INFO - Epoch [6][4400/7033]	lr: 1.358e-05, eta: 1:03:55, time: 1.455, data_time: 0.027, memory: 18614, loss_cls: 0.0553, loss_bbox: 0.1820, d0.loss_cls: 0.1469, d0.loss_bbox: 0.3034, d1.loss_cls: 0.0873, d1.loss_bbox: 0.2240, d2.loss_cls: 0.0722, d2.loss_bbox: 0.2015, d3.loss_cls: 0.0604, d3.loss_bbox: 0.1960, d4.loss_cls: 0.0572, d4.loss_bbox: 0.1857, loss: 1.7720, grad_norm: 17.0875
2025-06-19 05:23:50,933 - mmdet - INFO - Epoch [6][4450/7033]	lr: 1.358e-05, eta: 1:02:42, time: 1.486, data_time: 0.025, memory: 18614, loss_cls: 0.0645, loss_bbox: 0.1891, d0.loss_cls: 0.1496, d0.loss_bbox: 0.3084, d1.loss_cls: 0.0932, d1.loss_bbox: 0.2314, d2.loss_cls: 0.0801, d2.loss_bbox: 0.2089, d3.loss_cls: 0.0702, d3.loss_bbox: 0.2022, d4.loss_cls: 0.0655, d4.loss_bbox: 0.1928, loss: 1.8558, grad_norm: 33.6441
2025-06-19 05:25:03,916 - mmdet - INFO - Epoch [6][4500/7033]	lr: 1.358e-05, eta: 1:01:29, time: 1.460, data_time: 0.028, memory: 18614, loss_cls: 0.0600, loss_bbox: 0.1866, d0.loss_cls: 0.1496, d0.loss_bbox: 0.3079, d1.loss_cls: 0.0894, d1.loss_bbox: 0.2276, d2.loss_cls: 0.0774, d2.loss_bbox: 0.2069, d3.loss_cls: 0.0666, d3.loss_bbox: 0.1985, d4.loss_cls: 0.0611, d4.loss_bbox: 0.1899, loss: 1.8214, grad_norm: 31.6512
2025-06-19 05:26:18,434 - mmdet - INFO - Epoch [6][4550/7033]	lr: 1.358e-05, eta: 1:00:17, time: 1.490, data_time: 0.028, memory: 18614, loss_cls: 0.0619, loss_bbox: 0.1854, d0.loss_cls: 0.1501, d0.loss_bbox: 0.2907, d1.loss_cls: 0.0946, d1.loss_bbox: 0.2190, d2.loss_cls: 0.0784, d2.loss_bbox: 0.2011, d3.loss_cls: 0.0689, d3.loss_bbox: 0.1942, d4.loss_cls: 0.0639, d4.loss_bbox: 0.1876, loss: 1.7958, grad_norm: 17.7650
2025-06-19 05:27:31,217 - mmdet - INFO - Epoch [6][4600/7033]	lr: 1.358e-05, eta: 0:59:04, time: 1.456, data_time: 0.028, memory: 18614, loss_cls: 0.0612, loss_bbox: 0.1852, d0.loss_cls: 0.1479, d0.loss_bbox: 0.3002, d1.loss_cls: 0.0927, d1.loss_bbox: 0.2255, d2.loss_cls: 0.0795, d2.loss_bbox: 0.2049, d3.loss_cls: 0.0687, d3.loss_bbox: 0.1982, d4.loss_cls: 0.0626, d4.loss_bbox: 0.1883, loss: 1.8148, grad_norm: 17.3204
2025-06-19 05:28:44,011 - mmdet - INFO - Epoch [6][4650/7033]	lr: 1.358e-05, eta: 0:57:51, time: 1.456, data_time: 0.029, memory: 18614, loss_cls: 0.0571, loss_bbox: 0.1894, d0.loss_cls: 0.1529, d0.loss_bbox: 0.3069, d1.loss_cls: 0.0923, d1.loss_bbox: 0.2317, d2.loss_cls: 0.0742, d2.loss_bbox: 0.2095, d3.loss_cls: 0.0638, d3.loss_bbox: 0.2020, d4.loss_cls: 0.0594, d4.loss_bbox: 0.1926, loss: 1.8317, grad_norm: 17.9476
2025-06-19 05:29:56,667 - mmdet - INFO - Epoch [6][4700/7033]	lr: 1.358e-05, eta: 0:56:38, time: 1.453, data_time: 0.027, memory: 18614, loss_cls: 0.0611, loss_bbox: 0.1830, d0.loss_cls: 0.1541, d0.loss_bbox: 0.3063, d1.loss_cls: 0.0925, d1.loss_bbox: 0.2267, d2.loss_cls: 0.0790, d2.loss_bbox: 0.2077, d3.loss_cls: 0.0673, d3.loss_bbox: 0.1967, d4.loss_cls: 0.0617, d4.loss_bbox: 0.1863, loss: 1.8224, grad_norm: 38.0832
2025-06-19 05:31:09,413 - mmdet - INFO - Epoch [6][4750/7033]	lr: 1.358e-05, eta: 0:55:25, time: 1.455, data_time: 0.028, memory: 18614, loss_cls: 0.0561, loss_bbox: 0.1818, d0.loss_cls: 0.1519, d0.loss_bbox: 0.2968, d1.loss_cls: 0.0905, d1.loss_bbox: 0.2216, d2.loss_cls: 0.0724, d2.loss_bbox: 0.2025, d3.loss_cls: 0.0624, d3.loss_bbox: 0.1934, d4.loss_cls: 0.0573, d4.loss_bbox: 0.1844, loss: 1.7712, grad_norm: 30.2293
2025-06-19 05:32:22,106 - mmdet - INFO - Epoch [6][4800/7033]	lr: 1.358e-05, eta: 0:54:12, time: 1.454, data_time: 0.027, memory: 18614, loss_cls: 0.0594, loss_bbox: 0.1854, d0.loss_cls: 0.1579, d0.loss_bbox: 0.3099, d1.loss_cls: 0.0914, d1.loss_bbox: 0.2292, d2.loss_cls: 0.0759, d2.loss_bbox: 0.2059, d3.loss_cls: 0.0655, d3.loss_bbox: 0.1986, d4.loss_cls: 0.0605, d4.loss_bbox: 0.1891, loss: 1.8287, grad_norm: 54.5911
2025-06-19 05:33:34,660 - mmdet - INFO - Epoch [6][4850/7033]	lr: 1.358e-05, eta: 0:53:00, time: 1.451, data_time: 0.027, memory: 18614, loss_cls: 0.0544, loss_bbox: 0.1792, d0.loss_cls: 0.1530, d0.loss_bbox: 0.2938, d1.loss_cls: 0.0912, d1.loss_bbox: 0.2191, d2.loss_cls: 0.0727, d2.loss_bbox: 0.1982, d3.loss_cls: 0.0617, d3.loss_bbox: 0.1906, d4.loss_cls: 0.0566, d4.loss_bbox: 0.1814, loss: 1.7519, grad_norm: 25.8998
2025-06-19 05:34:47,501 - mmdet - INFO - Epoch [6][4900/7033]	lr: 1.358e-05, eta: 0:51:47, time: 1.457, data_time: 0.031, memory: 18614, loss_cls: 0.0631, loss_bbox: 0.1904, d0.loss_cls: 0.1516, d0.loss_bbox: 0.3150, d1.loss_cls: 0.0953, d1.loss_bbox: 0.2334, d2.loss_cls: 0.0785, d2.loss_bbox: 0.2147, d3.loss_cls: 0.0713, d3.loss_bbox: 0.2046, d4.loss_cls: 0.0638, d4.loss_bbox: 0.1952, loss: 1.8767, grad_norm: 25.7261
2025-06-19 05:36:00,255 - mmdet - INFO - Epoch [6][4950/7033]	lr: 1.358e-05, eta: 0:50:34, time: 1.455, data_time: 0.028, memory: 18614, loss_cls: 0.0567, loss_bbox: 0.1831, d0.loss_cls: 0.1428, d0.loss_bbox: 0.3013, d1.loss_cls: 0.0849, d1.loss_bbox: 0.2267, d2.loss_cls: 0.0723, d2.loss_bbox: 0.2051, d3.loss_cls: 0.0624, d3.loss_bbox: 0.1981, d4.loss_cls: 0.0585, d4.loss_bbox: 0.1870, loss: 1.7788, grad_norm: 52.1668
2025-06-19 05:37:12,892 - mmdet - INFO - Epoch [6][5000/7033]	lr: 1.358e-05, eta: 0:49:21, time: 1.453, data_time: 0.028, memory: 18614, loss_cls: 0.0648, loss_bbox: 0.1929, d0.loss_cls: 0.1614, d0.loss_bbox: 0.3144, d1.loss_cls: 0.0990, d1.loss_bbox: 0.2382, d2.loss_cls: 0.0847, d2.loss_bbox: 0.2120, d3.loss_cls: 0.0729, d3.loss_bbox: 0.2052, d4.loss_cls: 0.0667, d4.loss_bbox: 0.1971, loss: 1.9093, grad_norm: 21.3638
2025-06-19 05:38:25,507 - mmdet - INFO - Epoch [6][5050/7033]	lr: 1.358e-05, eta: 0:48:08, time: 1.452, data_time: 0.026, memory: 18614, loss_cls: 0.0562, loss_bbox: 0.1839, d0.loss_cls: 0.1510, d0.loss_bbox: 0.2951, d1.loss_cls: 0.0863, d1.loss_bbox: 0.2250, d2.loss_cls: 0.0706, d2.loss_bbox: 0.2059, d3.loss_cls: 0.0612, d3.loss_bbox: 0.1976, d4.loss_cls: 0.0571, d4.loss_bbox: 0.1877, loss: 1.7775, grad_norm: 16.4053
2025-06-19 05:39:38,047 - mmdet - INFO - Epoch [6][5100/7033]	lr: 1.358e-05, eta: 0:46:55, time: 1.451, data_time: 0.026, memory: 18614, loss_cls: 0.0605, loss_bbox: 0.1845, d0.loss_cls: 0.1566, d0.loss_bbox: 0.3103, d1.loss_cls: 0.0966, d1.loss_bbox: 0.2287, d2.loss_cls: 0.0809, d2.loss_bbox: 0.2057, d3.loss_cls: 0.0706, d3.loss_bbox: 0.1974, d4.loss_cls: 0.0627, d4.loss_bbox: 0.1884, loss: 1.8429, grad_norm: 49.1383
2025-06-19 05:40:52,392 - mmdet - INFO - Epoch [6][5150/7033]	lr: 1.358e-05, eta: 0:45:43, time: 1.487, data_time: 0.027, memory: 18614, loss_cls: 0.0591, loss_bbox: 0.1813, d0.loss_cls: 0.1490, d0.loss_bbox: 0.2947, d1.loss_cls: 0.0912, d1.loss_bbox: 0.2223, d2.loss_cls: 0.0752, d2.loss_bbox: 0.2039, d3.loss_cls: 0.0671, d3.loss_bbox: 0.1937, d4.loss_cls: 0.0605, d4.loss_bbox: 0.1857, loss: 1.7837, grad_norm: 44.1562
2025-06-19 05:42:06,588 - mmdet - INFO - Epoch [6][5200/7033]	lr: 1.358e-05, eta: 0:44:30, time: 1.484, data_time: 0.028, memory: 18614, loss_cls: 0.0584, loss_bbox: 0.1809, d0.loss_cls: 0.1544, d0.loss_bbox: 0.3044, d1.loss_cls: 0.0929, d1.loss_bbox: 0.2230, d2.loss_cls: 0.0761, d2.loss_bbox: 0.2006, d3.loss_cls: 0.0665, d3.loss_bbox: 0.1917, d4.loss_cls: 0.0605, d4.loss_bbox: 0.1835, loss: 1.7930, grad_norm: 61.4267
2025-06-19 05:43:19,372 - mmdet - INFO - Epoch [6][5250/7033]	lr: 1.358e-05, eta: 0:43:17, time: 1.456, data_time: 0.026, memory: 18614, loss_cls: 0.0542, loss_bbox: 0.1818, d0.loss_cls: 0.1542, d0.loss_bbox: 0.2976, d1.loss_cls: 0.0844, d1.loss_bbox: 0.2221, d2.loss_cls: 0.0707, d2.loss_bbox: 0.2031, d3.loss_cls: 0.0616, d3.loss_bbox: 0.1944, d4.loss_cls: 0.0560, d4.loss_bbox: 0.1857, loss: 1.7659, grad_norm: 54.8075
2025-06-19 05:44:31,909 - mmdet - INFO - Epoch [6][5300/7033]	lr: 1.358e-05, eta: 0:42:04, time: 1.451, data_time: 0.028, memory: 18614, loss_cls: 0.0550, loss_bbox: 0.1780, d0.loss_cls: 0.1440, d0.loss_bbox: 0.2912, d1.loss_cls: 0.0855, d1.loss_bbox: 0.2174, d2.loss_cls: 0.0711, d2.loss_bbox: 0.1990, d3.loss_cls: 0.0607, d3.loss_bbox: 0.1912, d4.loss_cls: 0.0560, d4.loss_bbox: 0.1815, loss: 1.7305, grad_norm: 43.9870
2025-06-19 05:45:44,538 - mmdet - INFO - Epoch [6][5350/7033]	lr: 1.358e-05, eta: 0:40:51, time: 1.453, data_time: 0.026, memory: 18614, loss_cls: 0.0594, loss_bbox: 0.1808, d0.loss_cls: 0.1556, d0.loss_bbox: 0.3007, d1.loss_cls: 0.0899, d1.loss_bbox: 0.2235, d2.loss_cls: 0.0749, d2.loss_bbox: 0.2033, d3.loss_cls: 0.0638, d3.loss_bbox: 0.1936, d4.loss_cls: 0.0611, d4.loss_bbox: 0.1839, loss: 1.7907, grad_norm: 18.4205
2025-06-19 05:46:57,308 - mmdet - INFO - Epoch [6][5400/7033]	lr: 1.358e-05, eta: 0:39:38, time: 1.455, data_time: 0.029, memory: 18614, loss_cls: 0.0664, loss_bbox: 0.1906, d0.loss_cls: 0.1600, d0.loss_bbox: 0.3008, d1.loss_cls: 0.1004, d1.loss_bbox: 0.2302, d2.loss_cls: 0.0846, d2.loss_bbox: 0.2117, d3.loss_cls: 0.0755, d3.loss_bbox: 0.2023, d4.loss_cls: 0.0697, d4.loss_bbox: 0.1925, loss: 1.8846, grad_norm: 19.1449
2025-06-19 05:48:10,194 - mmdet - INFO - Epoch [6][5450/7033]	lr: 1.358e-05, eta: 0:38:26, time: 1.458, data_time: 0.028, memory: 18614, loss_cls: 0.0528, loss_bbox: 0.1777, d0.loss_cls: 0.1459, d0.loss_bbox: 0.2876, d1.loss_cls: 0.0868, d1.loss_bbox: 0.2159, d2.loss_cls: 0.0691, d2.loss_bbox: 0.1977, d3.loss_cls: 0.0593, d3.loss_bbox: 0.1896, d4.loss_cls: 0.0545, d4.loss_bbox: 0.1809, loss: 1.7180, grad_norm: 16.9927
2025-06-19 05:49:23,259 - mmdet - INFO - Epoch [6][5500/7033]	lr: 1.358e-05, eta: 0:37:13, time: 1.461, data_time: 0.026, memory: 18614, loss_cls: 0.0606, loss_bbox: 0.1873, d0.loss_cls: 0.1542, d0.loss_bbox: 0.3100, d1.loss_cls: 0.0955, d1.loss_bbox: 0.2304, d2.loss_cls: 0.0791, d2.loss_bbox: 0.2092, d3.loss_cls: 0.0683, d3.loss_bbox: 0.2003, d4.loss_cls: 0.0609, d4.loss_bbox: 0.1915, loss: 1.8474, grad_norm: 14.2132
2025-06-19 05:50:35,772 - mmdet - INFO - Epoch [6][5550/7033]	lr: 1.358e-05, eta: 0:36:00, time: 1.450, data_time: 0.025, memory: 18614, loss_cls: 0.0663, loss_bbox: 0.1896, d0.loss_cls: 0.1605, d0.loss_bbox: 0.3042, d1.loss_cls: 0.0988, d1.loss_bbox: 0.2297, d2.loss_cls: 0.0832, d2.loss_bbox: 0.2093, d3.loss_cls: 0.0727, d3.loss_bbox: 0.2011, d4.loss_cls: 0.0681, d4.loss_bbox: 0.1929, loss: 1.8764, grad_norm: 23.4710
2025-06-19 05:51:48,393 - mmdet - INFO - Epoch [6][5600/7033]	lr: 1.358e-05, eta: 0:34:47, time: 1.452, data_time: 0.027, memory: 18614, loss_cls: 0.0635, loss_bbox: 0.1879, d0.loss_cls: 0.1531, d0.loss_bbox: 0.3044, d1.loss_cls: 0.0948, d1.loss_bbox: 0.2295, d2.loss_cls: 0.0787, d2.loss_bbox: 0.2096, d3.loss_cls: 0.0695, d3.loss_bbox: 0.2015, d4.loss_cls: 0.0643, d4.loss_bbox: 0.1920, loss: 1.8486, grad_norm: 28.4831
2025-06-19 05:53:00,910 - mmdet - INFO - Epoch [6][5650/7033]	lr: 1.358e-05, eta: 0:33:34, time: 1.450, data_time: 0.027, memory: 18614, loss_cls: 0.0593, loss_bbox: 0.1833, d0.loss_cls: 0.1527, d0.loss_bbox: 0.3013, d1.loss_cls: 0.0951, d1.loss_bbox: 0.2251, d2.loss_cls: 0.0762, d2.loss_bbox: 0.2043, d3.loss_cls: 0.0656, d3.loss_bbox: 0.1969, d4.loss_cls: 0.0605, d4.loss_bbox: 0.1873, loss: 1.8077, grad_norm: 23.5691
2025-06-19 05:54:13,764 - mmdet - INFO - Epoch [6][5700/7033]	lr: 1.358e-05, eta: 0:32:21, time: 1.457, data_time: 0.029, memory: 18614, loss_cls: 0.0561, loss_bbox: 0.1813, d0.loss_cls: 0.1486, d0.loss_bbox: 0.2992, d1.loss_cls: 0.0904, d1.loss_bbox: 0.2219, d2.loss_cls: 0.0701, d2.loss_bbox: 0.2019, d3.loss_cls: 0.0608, d3.loss_bbox: 0.1925, d4.loss_cls: 0.0571, d4.loss_bbox: 0.1852, loss: 1.7649, grad_norm: 32.4120
2025-06-19 05:55:26,408 - mmdet - INFO - Epoch [6][5750/7033]	lr: 1.358e-05, eta: 0:31:09, time: 1.453, data_time: 0.026, memory: 18614, loss_cls: 0.0590, loss_bbox: 0.1831, d0.loss_cls: 0.1508, d0.loss_bbox: 0.3030, d1.loss_cls: 0.0934, d1.loss_bbox: 0.2270, d2.loss_cls: 0.0751, d2.loss_bbox: 0.2026, d3.loss_cls: 0.0661, d3.loss_bbox: 0.1950, d4.loss_cls: 0.0611, d4.loss_bbox: 0.1850, loss: 1.8014, grad_norm: 27.4516
2025-06-19 05:56:39,105 - mmdet - INFO - Epoch [6][5800/7033]	lr: 1.358e-05, eta: 0:29:56, time: 1.454, data_time: 0.026, memory: 18614, loss_cls: 0.0575, loss_bbox: 0.1884, d0.loss_cls: 0.1522, d0.loss_bbox: 0.3072, d1.loss_cls: 0.0900, d1.loss_bbox: 0.2313, d2.loss_cls: 0.0763, d2.loss_bbox: 0.2094, d3.loss_cls: 0.0644, d3.loss_bbox: 0.2013, d4.loss_cls: 0.0590, d4.loss_bbox: 0.1921, loss: 1.8290, grad_norm: 17.9037
2025-06-19 05:57:51,811 - mmdet - INFO - Epoch [6][5850/7033]	lr: 1.358e-05, eta: 0:28:43, time: 1.454, data_time: 0.027, memory: 18614, loss_cls: 0.0618, loss_bbox: 0.1908, d0.loss_cls: 0.1622, d0.loss_bbox: 0.3078, d1.loss_cls: 0.0976, d1.loss_bbox: 0.2320, d2.loss_cls: 0.0823, d2.loss_bbox: 0.2109, d3.loss_cls: 0.0688, d3.loss_bbox: 0.2027, d4.loss_cls: 0.0631, d4.loss_bbox: 0.1946, loss: 1.8748, grad_norm: 21.1723
2025-06-19 05:59:04,373 - mmdet - INFO - Epoch [6][5900/7033]	lr: 1.358e-05, eta: 0:27:30, time: 1.451, data_time: 0.027, memory: 18614, loss_cls: 0.0585, loss_bbox: 0.1769, d0.loss_cls: 0.1450, d0.loss_bbox: 0.2949, d1.loss_cls: 0.0901, d1.loss_bbox: 0.2217, d2.loss_cls: 0.0764, d2.loss_bbox: 0.1984, d3.loss_cls: 0.0658, d3.loss_bbox: 0.1912, d4.loss_cls: 0.0597, d4.loss_bbox: 0.1805, loss: 1.7591, grad_norm: 17.0569
2025-06-19 06:00:17,142 - mmdet - INFO - Epoch [6][5950/7033]	lr: 1.358e-05, eta: 0:26:17, time: 1.455, data_time: 0.028, memory: 18614, loss_cls: 0.0575, loss_bbox: 0.1825, d0.loss_cls: 0.1466, d0.loss_bbox: 0.2971, d1.loss_cls: 0.0898, d1.loss_bbox: 0.2233, d2.loss_cls: 0.0768, d2.loss_bbox: 0.2017, d3.loss_cls: 0.0643, d3.loss_bbox: 0.1945, d4.loss_cls: 0.0597, d4.loss_bbox: 0.1852, loss: 1.7791, grad_norm: 18.1100
2025-06-19 06:01:29,857 - mmdet - INFO - Epoch [6][6000/7033]	lr: 1.358e-05, eta: 0:25:04, time: 1.454, data_time: 0.026, memory: 18614, loss_cls: 0.0600, loss_bbox: 0.1855, d0.loss_cls: 0.1555, d0.loss_bbox: 0.3012, d1.loss_cls: 0.0954, d1.loss_bbox: 0.2259, d2.loss_cls: 0.0789, d2.loss_bbox: 0.2048, d3.loss_cls: 0.0671, d3.loss_bbox: 0.1964, d4.loss_cls: 0.0597, d4.loss_bbox: 0.1890, loss: 1.8193, grad_norm: 45.5693
2025-06-19 06:02:42,553 - mmdet - INFO - Epoch [6][6050/7033]	lr: 1.358e-05, eta: 0:23:51, time: 1.454, data_time: 0.027, memory: 18614, loss_cls: 0.0572, loss_bbox: 0.1825, d0.loss_cls: 0.1512, d0.loss_bbox: 0.2981, d1.loss_cls: 0.0893, d1.loss_bbox: 0.2216, d2.loss_cls: 0.0752, d2.loss_bbox: 0.2002, d3.loss_cls: 0.0643, d3.loss_bbox: 0.1930, d4.loss_cls: 0.0589, d4.loss_bbox: 0.1852, loss: 1.7768, grad_norm: 17.2655
2025-06-19 06:03:55,320 - mmdet - INFO - Epoch [6][6100/7033]	lr: 1.358e-05, eta: 0:22:39, time: 1.455, data_time: 0.026, memory: 18614, loss_cls: 0.0569, loss_bbox: 0.1784, d0.loss_cls: 0.1455, d0.loss_bbox: 0.2971, d1.loss_cls: 0.0872, d1.loss_bbox: 0.2204, d2.loss_cls: 0.0732, d2.loss_bbox: 0.2000, d3.loss_cls: 0.0638, d3.loss_bbox: 0.1917, d4.loss_cls: 0.0586, d4.loss_bbox: 0.1821, loss: 1.7549, grad_norm: 31.5583
2025-06-19 06:05:07,890 - mmdet - INFO - Epoch [6][6150/7033]	lr: 1.358e-05, eta: 0:21:26, time: 1.451, data_time: 0.026, memory: 18614, loss_cls: 0.0562, loss_bbox: 0.1835, d0.loss_cls: 0.1485, d0.loss_bbox: 0.2995, d1.loss_cls: 0.0916, d1.loss_bbox: 0.2230, d2.loss_cls: 0.0750, d2.loss_bbox: 0.2026, d3.loss_cls: 0.0643, d3.loss_bbox: 0.1948, d4.loss_cls: 0.0597, d4.loss_bbox: 0.1863, loss: 1.7850, grad_norm: 37.5115
2025-06-19 06:06:20,496 - mmdet - INFO - Epoch [6][6200/7033]	lr: 1.358e-05, eta: 0:20:13, time: 1.452, data_time: 0.027, memory: 18614, loss_cls: 0.0605, loss_bbox: 0.1814, d0.loss_cls: 0.1449, d0.loss_bbox: 0.3005, d1.loss_cls: 0.0864, d1.loss_bbox: 0.2246, d2.loss_cls: 0.0734, d2.loss_bbox: 0.2007, d3.loss_cls: 0.0666, d3.loss_bbox: 0.1928, d4.loss_cls: 0.0627, d4.loss_bbox: 0.1838, loss: 1.7784, grad_norm: 47.3160
2025-06-19 06:07:33,204 - mmdet - INFO - Epoch [6][6250/7033]	lr: 1.358e-05, eta: 0:19:00, time: 1.454, data_time: 0.027, memory: 18614, loss_cls: 0.0597, loss_bbox: 0.1844, d0.loss_cls: 0.1485, d0.loss_bbox: 0.2957, d1.loss_cls: 0.0924, d1.loss_bbox: 0.2237, d2.loss_cls: 0.0764, d2.loss_bbox: 0.2049, d3.loss_cls: 0.0666, d3.loss_bbox: 0.1974, d4.loss_cls: 0.0613, d4.loss_bbox: 0.1880, loss: 1.7991, grad_norm: 24.2853
2025-06-19 06:08:45,739 - mmdet - INFO - Epoch [6][6300/7033]	lr: 1.358e-05, eta: 0:17:47, time: 1.451, data_time: 0.026, memory: 18614, loss_cls: 0.0584, loss_bbox: 0.1764, d0.loss_cls: 0.1464, d0.loss_bbox: 0.2926, d1.loss_cls: 0.0889, d1.loss_bbox: 0.2191, d2.loss_cls: 0.0731, d2.loss_bbox: 0.1997, d3.loss_cls: 0.0632, d3.loss_bbox: 0.1907, d4.loss_cls: 0.0597, d4.loss_bbox: 0.1807, loss: 1.7489, grad_norm: 21.6025
2025-06-19 06:09:58,214 - mmdet - INFO - Epoch [6][6350/7033]	lr: 1.358e-05, eta: 0:16:34, time: 1.449, data_time: 0.026, memory: 18614, loss_cls: 0.0591, loss_bbox: 0.1882, d0.loss_cls: 0.1491, d0.loss_bbox: 0.3023, d1.loss_cls: 0.0904, d1.loss_bbox: 0.2279, d2.loss_cls: 0.0777, d2.loss_bbox: 0.2078, d3.loss_cls: 0.0669, d3.loss_bbox: 0.1999, d4.loss_cls: 0.0606, d4.loss_bbox: 0.1913, loss: 1.8212, grad_norm: 18.2415
2025-06-19 06:11:11,155 - mmdet - INFO - Epoch [6][6400/7033]	lr: 1.358e-05, eta: 0:15:22, time: 1.459, data_time: 0.026, memory: 18614, loss_cls: 0.0620, loss_bbox: 0.1907, d0.loss_cls: 0.1479, d0.loss_bbox: 0.3061, d1.loss_cls: 0.0919, d1.loss_bbox: 0.2331, d2.loss_cls: 0.0778, d2.loss_bbox: 0.2113, d3.loss_cls: 0.0670, d3.loss_bbox: 0.2043, d4.loss_cls: 0.0626, d4.loss_bbox: 0.1951, loss: 1.8498, grad_norm: 21.9168
2025-06-19 06:12:23,853 - mmdet - INFO - Epoch [6][6450/7033]	lr: 1.358e-05, eta: 0:14:09, time: 1.454, data_time: 0.027, memory: 18614, loss_cls: 0.0585, loss_bbox: 0.1918, d0.loss_cls: 0.1479, d0.loss_bbox: 0.3129, d1.loss_cls: 0.0896, d1.loss_bbox: 0.2320, d2.loss_cls: 0.0735, d2.loss_bbox: 0.2128, d3.loss_cls: 0.0641, d3.loss_bbox: 0.2036, d4.loss_cls: 0.0583, d4.loss_bbox: 0.1962, loss: 1.8413, grad_norm: 23.8300
2025-06-19 06:13:36,596 - mmdet - INFO - Epoch [6][6500/7033]	lr: 1.358e-05, eta: 0:12:56, time: 1.455, data_time: 0.026, memory: 18614, loss_cls: 0.0583, loss_bbox: 0.1887, d0.loss_cls: 0.1500, d0.loss_bbox: 0.2959, d1.loss_cls: 0.0923, d1.loss_bbox: 0.2247, d2.loss_cls: 0.0764, d2.loss_bbox: 0.2072, d3.loss_cls: 0.0641, d3.loss_bbox: 0.2003, d4.loss_cls: 0.0597, d4.loss_bbox: 0.1915, loss: 1.8092, grad_norm: 17.4246
2025-06-19 06:14:49,433 - mmdet - INFO - Epoch [6][6550/7033]	lr: 1.358e-05, eta: 0:11:43, time: 1.457, data_time: 0.030, memory: 18614, loss_cls: 0.0622, loss_bbox: 0.1869, d0.loss_cls: 0.1585, d0.loss_bbox: 0.3079, d1.loss_cls: 0.0993, d1.loss_bbox: 0.2276, d2.loss_cls: 0.0832, d2.loss_bbox: 0.2067, d3.loss_cls: 0.0695, d3.loss_bbox: 0.1996, d4.loss_cls: 0.0639, d4.loss_bbox: 0.1902, loss: 1.8554, grad_norm: 42.8694
2025-06-19 06:16:02,238 - mmdet - INFO - Epoch [6][6600/7033]	lr: 1.358e-05, eta: 0:10:30, time: 1.456, data_time: 0.027, memory: 18614, loss_cls: 0.0640, loss_bbox: 0.1824, d0.loss_cls: 0.1548, d0.loss_bbox: 0.3020, d1.loss_cls: 0.0968, d1.loss_bbox: 0.2256, d2.loss_cls: 0.0799, d2.loss_bbox: 0.2027, d3.loss_cls: 0.0697, d3.loss_bbox: 0.1949, d4.loss_cls: 0.0648, d4.loss_bbox: 0.1868, loss: 1.8245, grad_norm: 42.3390
2025-06-19 06:17:16,704 - mmdet - INFO - Epoch [6][6650/7033]	lr: 1.358e-05, eta: 0:09:17, time: 1.489, data_time: 0.028, memory: 18614, loss_cls: 0.0603, loss_bbox: 0.1868, d0.loss_cls: 0.1447, d0.loss_bbox: 0.2991, d1.loss_cls: 0.0924, d1.loss_bbox: 0.2266, d2.loss_cls: 0.0765, d2.loss_bbox: 0.2071, d3.loss_cls: 0.0685, d3.loss_bbox: 0.1983, d4.loss_cls: 0.0615, d4.loss_bbox: 0.1905, loss: 1.8124, grad_norm: 28.0475
2025-06-19 06:18:31,172 - mmdet - INFO - Epoch [6][6700/7033]	lr: 1.358e-05, eta: 0:08:05, time: 1.489, data_time: 0.029, memory: 18614, loss_cls: 0.0607, loss_bbox: 0.1861, d0.loss_cls: 0.1472, d0.loss_bbox: 0.3068, d1.loss_cls: 0.0898, d1.loss_bbox: 0.2287, d2.loss_cls: 0.0733, d2.loss_bbox: 0.2099, d3.loss_cls: 0.0661, d3.loss_bbox: 0.1989, d4.loss_cls: 0.0614, d4.loss_bbox: 0.1893, loss: 1.8182, grad_norm: 67.2621
2025-06-19 06:19:43,956 - mmdet - INFO - Epoch [6][6750/7033]	lr: 1.358e-05, eta: 0:06:52, time: 1.456, data_time: 0.026, memory: 18614, loss_cls: 0.0628, loss_bbox: 0.1903, d0.loss_cls: 0.1526, d0.loss_bbox: 0.3114, d1.loss_cls: 0.0947, d1.loss_bbox: 0.2298, d2.loss_cls: 0.0807, d2.loss_bbox: 0.2091, d3.loss_cls: 0.0705, d3.loss_bbox: 0.2012, d4.loss_cls: 0.0637, d4.loss_bbox: 0.1944, loss: 1.8612, grad_norm: 30.1905
2025-06-19 06:20:56,812 - mmdet - INFO - Epoch [6][6800/7033]	lr: 1.358e-05, eta: 0:05:39, time: 1.457, data_time: 0.029, memory: 18614, loss_cls: 0.0575, loss_bbox: 0.1826, d0.loss_cls: 0.1471, d0.loss_bbox: 0.2963, d1.loss_cls: 0.0888, d1.loss_bbox: 0.2229, d2.loss_cls: 0.0755, d2.loss_bbox: 0.2003, d3.loss_cls: 0.0635, d3.loss_bbox: 0.1941, d4.loss_cls: 0.0574, d4.loss_bbox: 0.1858, loss: 1.7719, grad_norm: 88.7597
2025-06-19 06:22:09,793 - mmdet - INFO - Epoch [6][6850/7033]	lr: 1.358e-05, eta: 0:04:26, time: 1.460, data_time: 0.028, memory: 18614, loss_cls: 0.0617, loss_bbox: 0.1864, d0.loss_cls: 0.1546, d0.loss_bbox: 0.3067, d1.loss_cls: 0.0936, d1.loss_bbox: 0.2259, d2.loss_cls: 0.0792, d2.loss_bbox: 0.2060, d3.loss_cls: 0.0686, d3.loss_bbox: 0.1978, d4.loss_cls: 0.0635, d4.loss_bbox: 0.1887, loss: 1.8328, grad_norm: 18.4340
2025-06-19 06:23:22,669 - mmdet - INFO - Epoch [6][6900/7033]	lr: 1.358e-05, eta: 0:03:13, time: 1.458, data_time: 0.029, memory: 18614, loss_cls: 0.0571, loss_bbox: 0.1832, d0.loss_cls: 0.1472, d0.loss_bbox: 0.2982, d1.loss_cls: 0.0893, d1.loss_bbox: 0.2244, d2.loss_cls: 0.0723, d2.loss_bbox: 0.2042, d3.loss_cls: 0.0615, d3.loss_bbox: 0.1967, d4.loss_cls: 0.0581, d4.loss_bbox: 0.1868, loss: 1.7791, grad_norm: 28.8140
2025-06-19 06:24:35,084 - mmdet - INFO - Epoch [6][6950/7033]	lr: 1.358e-05, eta: 0:02:00, time: 1.448, data_time: 0.027, memory: 18614, loss_cls: 0.0607, loss_bbox: 0.1865, d0.loss_cls: 0.1530, d0.loss_bbox: 0.3064, d1.loss_cls: 0.0945, d1.loss_bbox: 0.2264, d2.loss_cls: 0.0784, d2.loss_bbox: 0.2095, d3.loss_cls: 0.0680, d3.loss_bbox: 0.2001, d4.loss_cls: 0.0622, d4.loss_bbox: 0.1911, loss: 1.8368, grad_norm: 38.6440
2025-06-19 06:25:47,972 - mmdet - INFO - Epoch [6][7000/7033]	lr: 1.358e-05, eta: 0:00:48, time: 1.458, data_time: 0.029, memory: 18614, loss_cls: 0.0553, loss_bbox: 0.1786, d0.loss_cls: 0.1491, d0.loss_bbox: 0.2977, d1.loss_cls: 0.0928, d1.loss_bbox: 0.2212, d2.loss_cls: 0.0758, d2.loss_bbox: 0.1989, d3.loss_cls: 0.0630, d3.loss_bbox: 0.1906, d4.loss_cls: 0.0578, d4.loss_bbox: 0.1816, loss: 1.7625, grad_norm: 37.3475
2025-06-19 06:26:36,535 - mmdet - INFO - Saving checkpoint at 6 epochs
2025-06-19 06:48:29,030 - mmdet - INFO - Exp name: lidar_0075v_cam_res_2x2_hednetmiddleencoder_hednetbackbone4_dss0511_dp03_hugeep2_num2_morton_conv_xy_rope_bs2.py
2025-06-19 06:48:29,030 - mmdet - INFO - Epoch(val) [6][3010]	pts_bbox_NuScenes/car_AP_dist_0.5: 0.7954, pts_bbox_NuScenes/car_AP_dist_1.0: 0.8857, pts_bbox_NuScenes/car_AP_dist_2.0: 0.9108, pts_bbox_NuScenes/car_AP_dist_4.0: 0.9223, pts_bbox_NuScenes/car_trans_err: 0.1749, pts_bbox_NuScenes/car_scale_err: 0.1523, pts_bbox_NuScenes/car_orient_err: 0.0401, pts_bbox_NuScenes/car_vel_err: 0.2746, pts_bbox_NuScenes/car_attr_err: 0.1847, pts_bbox_NuScenes/mATE: 0.2793, pts_bbox_NuScenes/mASE: 0.2634, pts_bbox_NuScenes/mAOE: 0.2554, pts_bbox_NuScenes/mAVE: 0.2620, pts_bbox_NuScenes/mAAE: 0.1906, pts_bbox_NuScenes/truck_AP_dist_0.5: 0.4297, pts_bbox_NuScenes/truck_AP_dist_1.0: 0.6141, pts_bbox_NuScenes/truck_AP_dist_2.0: 0.7210, pts_bbox_NuScenes/truck_AP_dist_4.0: 0.7576, pts_bbox_NuScenes/truck_trans_err: 0.3432, pts_bbox_NuScenes/truck_scale_err: 0.1988, pts_bbox_NuScenes/truck_orient_err: 0.0385, pts_bbox_NuScenes/truck_vel_err: 0.2615, pts_bbox_NuScenes/truck_attr_err: 0.2012, pts_bbox_NuScenes/construction_vehicle_AP_dist_0.5: 0.0618, pts_bbox_NuScenes/construction_vehicle_AP_dist_1.0: 0.2099, pts_bbox_NuScenes/construction_vehicle_AP_dist_2.0: 0.4015, pts_bbox_NuScenes/construction_vehicle_AP_dist_4.0: 0.4661, pts_bbox_NuScenes/construction_vehicle_trans_err: 0.6461, pts_bbox_NuScenes/construction_vehicle_scale_err: 0.4296, pts_bbox_NuScenes/construction_vehicle_orient_err: 0.8250, pts_bbox_NuScenes/construction_vehicle_vel_err: 0.1149, pts_bbox_NuScenes/construction_vehicle_attr_err: 0.3130, pts_bbox_NuScenes/bus_AP_dist_0.5: 0.5250, pts_bbox_NuScenes/bus_AP_dist_1.0: 0.7668, pts_bbox_NuScenes/bus_AP_dist_2.0: 0.9085, pts_bbox_NuScenes/bus_AP_dist_4.0: 0.9255, pts_bbox_NuScenes/bus_trans_err: 0.3253, pts_bbox_NuScenes/bus_scale_err: 0.2001, pts_bbox_NuScenes/bus_orient_err: 0.0357, pts_bbox_NuScenes/bus_vel_err: 0.4707, pts_bbox_NuScenes/bus_attr_err: 0.2847, pts_bbox_NuScenes/trailer_AP_dist_0.5: 0.1766, pts_bbox_NuScenes/trailer_AP_dist_1.0: 0.4403, pts_bbox_NuScenes/trailer_AP_dist_2.0: 0.6084, pts_bbox_NuScenes/trailer_AP_dist_4.0: 0.6837, pts_bbox_NuScenes/trailer_trans_err: 0.4741, pts_bbox_NuScenes/trailer_scale_err: 0.2306, pts_bbox_NuScenes/trailer_orient_err: 0.4965, pts_bbox_NuScenes/trailer_vel_err: 0.2492, pts_bbox_NuScenes/trailer_attr_err: 0.1755, pts_bbox_NuScenes/barrier_AP_dist_0.5: 0.5990, pts_bbox_NuScenes/barrier_AP_dist_1.0: 0.6983, pts_bbox_NuScenes/barrier_AP_dist_2.0: 0.7404, pts_bbox_NuScenes/barrier_AP_dist_4.0: 0.7532, pts_bbox_NuScenes/barrier_trans_err: 0.2003, pts_bbox_NuScenes/barrier_scale_err: 0.2878, pts_bbox_NuScenes/barrier_orient_err: 0.0410, pts_bbox_NuScenes/barrier_vel_err: nan, pts_bbox_NuScenes/barrier_attr_err: nan, pts_bbox_NuScenes/motorcycle_AP_dist_0.5: 0.6593, pts_bbox_NuScenes/motorcycle_AP_dist_1.0: 0.7859, pts_bbox_NuScenes/motorcycle_AP_dist_2.0: 0.8048, pts_bbox_NuScenes/motorcycle_AP_dist_4.0: 0.8104, pts_bbox_NuScenes/motorcycle_trans_err: 0.1998, pts_bbox_NuScenes/motorcycle_scale_err: 0.2432, pts_bbox_NuScenes/motorcycle_orient_err: 0.1887, pts_bbox_NuScenes/motorcycle_vel_err: 0.3204, pts_bbox_NuScenes/motorcycle_attr_err: 0.2452, pts_bbox_NuScenes/bicycle_AP_dist_0.5: 0.5494, pts_bbox_NuScenes/bicycle_AP_dist_1.0: 0.5984, pts_bbox_NuScenes/bicycle_AP_dist_2.0: 0.6080, pts_bbox_NuScenes/bicycle_AP_dist_4.0: 0.6175, pts_bbox_NuScenes/bicycle_trans_err: 0.1671, pts_bbox_NuScenes/bicycle_scale_err: 0.2686, pts_bbox_NuScenes/bicycle_orient_err: 0.3108, pts_bbox_NuScenes/bicycle_vel_err: 0.1984, pts_bbox_NuScenes/bicycle_attr_err: 0.0074, pts_bbox_NuScenes/pedestrian_AP_dist_0.5: 0.8295, pts_bbox_NuScenes/pedestrian_AP_dist_1.0: 0.8627, pts_bbox_NuScenes/pedestrian_AP_dist_2.0: 0.8812, pts_bbox_NuScenes/pedestrian_AP_dist_4.0: 0.8911, pts_bbox_NuScenes/pedestrian_trans_err: 0.1398, pts_bbox_NuScenes/pedestrian_scale_err: 0.2939, pts_bbox_NuScenes/pedestrian_orient_err: 0.3226, pts_bbox_NuScenes/pedestrian_vel_err: 0.2059, pts_bbox_NuScenes/pedestrian_attr_err: 0.1134, pts_bbox_NuScenes/traffic_cone_AP_dist_0.5: 0.7491, pts_bbox_NuScenes/traffic_cone_AP_dist_1.0: 0.7791, pts_bbox_NuScenes/traffic_cone_AP_dist_2.0: 0.8004, pts_bbox_NuScenes/traffic_cone_AP_dist_4.0: 0.8218, pts_bbox_NuScenes/traffic_cone_trans_err: 0.1222, pts_bbox_NuScenes/traffic_cone_scale_err: 0.3286, pts_bbox_NuScenes/traffic_cone_orient_err: nan, pts_bbox_NuScenes/traffic_cone_vel_err: nan, pts_bbox_NuScenes/traffic_cone_attr_err: nan, pts_bbox_NuScenes/NDS: 0.7131, pts_bbox_NuScenes/mAP: 0.6763
