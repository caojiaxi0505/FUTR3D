2025-05-06 09:15:18,441 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.20 (default, Oct  3 2024, 15:24:27) [GCC 11.2.0]
CUDA available: True
GPU 0,1,2,3: NVIDIA GeForce RTX 2080 Ti
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.6, V11.6.55
GCC: gcc (Ubuntu 9.4.0-1ubuntu1~18.04) 9.4.0
PyTorch: 1.13.0+cu116
PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.6
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.14.0+cu116
OpenCV: 4.11.0
MMCV: 1.7.0
MMCV Compiler: GCC 9.4
MMCV CUDA Compiler: 11.6
MMDetection: 2.27.0
MMSegmentation: 0.30.0
MMDetection3D: 1.0.0rc6+
spconv2.0: True
------------------------------------------------------------

2025-05-06 09:15:20,653 - mmdet - INFO - 分布式训练: True
2025-05-06 09:15:22,879 - mmdet - INFO - 配置:
point_cloud_range = [-54, -54, -5.0, 54, 54, 3.0]
class_names = [
    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',
    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
]
dataset_type = 'NuScenesDataset'
data_root = 'data/nuscenes/'
input_modality = dict(
    use_lidar=True,
    use_camera=False,
    use_radar=False,
    use_map=False,
    use_external=False)
file_client_args = dict(backend='disk')
train_pipeline = [
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        file_client_args=dict(backend='disk')),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=9,
        use_dim=[0, 1, 2, 3, 4],
        file_client_args=dict(backend='disk'),
        pad_empty_sweeps=True,
        remove_close=True),
    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),
    dict(
        type='ObjectSample',
        db_sampler=dict(
            data_root='data/nuscenes/',
            info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',
            rate=1.0,
            prepare=dict(
                filter_by_difficulty=[-1],
                filter_by_min_points=dict(
                    car=5,
                    truck=5,
                    bus=5,
                    trailer=5,
                    construction_vehicle=5,
                    traffic_cone=5,
                    barrier=5,
                    motorcycle=5,
                    bicycle=5,
                    pedestrian=5)),
            classes=[
                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                'traffic_cone'
            ],
            sample_groups=dict(
                car=2,
                truck=3,
                construction_vehicle=7,
                bus=4,
                trailer=6,
                barrier=2,
                motorcycle=6,
                bicycle=6,
                pedestrian=2,
                traffic_cone=2),
            points_loader=dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=[0, 1, 2, 3, 4],
                file_client_args=dict(backend='disk')))),
    dict(
        type='GlobalRotScaleTrans',
        rot_range=[-0.785, 0.785],
        scale_ratio_range=[0.9, 1.1],
        translation_std=[0.5, 0.5, 0.5]),
    dict(
        type='RandomFlip3D',
        sync_2d=False,
        flip_ratio_bev_horizontal=0.5,
        flip_ratio_bev_vertical=0.5),
    dict(
        type='PointsRangeFilter',
        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
    dict(
        type='ObjectRangeFilter',
        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
    dict(
        type='ObjectNameFilter',
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ]),
    dict(type='PointShuffle'),
    dict(
        type='DefaultFormatBundle3D',
        class_names=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ]),
    dict(type='Collect3D', keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])
]
test_pipeline = [
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        file_client_args=dict(backend='disk')),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=9,
        use_dim=[0, 1, 2, 3, 4],
        file_client_args=dict(backend='disk'),
        pad_empty_sweeps=True,
        remove_close=True),
    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),
    dict(
        type='MultiScaleFlipAug3D',
        img_scale=(1333, 800),
        pts_scale_ratio=1,
        flip=False,
        transforms=[
            dict(
                type='GlobalRotScaleTrans',
                rot_range=[0, 0],
                scale_ratio_range=[1.0, 1.0],
                translation_std=[0, 0, 0]),
            dict(type='RandomFlip3D'),
            dict(
                type='PointsRangeFilter',
                point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
            dict(
                type='DefaultFormatBundle3D',
                class_names=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ],
                with_label=False),
            dict(
                type='Collect3D',
                keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])
        ])
]
eval_pipeline = [
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        file_client_args=dict(backend='disk')),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=9,
        use_dim=[0, 1, 2, 3, 4],
        file_client_args=dict(backend='disk'),
        pad_empty_sweeps=True,
        remove_close=True),
    dict(
        type='DefaultFormatBundle3D',
        class_names=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        with_label=False),
    dict(type='Collect3D', keys=['points'])
]
data = dict(
    samples_per_gpu=1,
    workers_per_gpu=4,
    train=dict(
        type='CBGSDataset',
        data_root='data/nuscenes/',
        ann_file='data/nuscenes/nuscenes_infos_train.pkl',
        pipeline=[
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                file_client_args=dict(backend='disk')),
            dict(
                type='LoadPointsFromMultiSweeps',
                sweeps_num=10,
                file_client_args=dict(backend='disk')),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True),
            dict(
                type='GlobalRotScaleTrans',
                rot_range=[-0.3925, 0.3925],
                scale_ratio_range=[0.95, 1.05],
                translation_std=[0, 0, 0]),
            dict(type='RandomFlip3D', flip_ratio_bev_horizontal=0.5),
            dict(
                type='PointsRangeFilter',
                point_cloud_range=[-50, -50, -5, 50, 50, 3]),
            dict(
                type='ObjectRangeFilter',
                point_cloud_range=[-50, -50, -5, 50, 50, 3]),
            dict(
                type='ObjectNameFilter',
                classes=[
                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',
                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',
                    'barrier'
                ]),
            dict(type='PointShuffle'),
            dict(
                type='DefaultFormatBundle3D',
                class_names=[
                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',
                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',
                    'barrier'
                ]),
            dict(
                type='Collect3D',
                keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])
        ],
        classes=[
            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',
            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=False,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=False,
        box_type_3d='LiDAR',
        split=40,
        dataset=dict(
            type='NuScenesDataset',
            data_root='data/nuscenes/',
            ann_file='data/nuscenes/nuscenes_infos_train.pkl',
            pipeline=[
                dict(
                    type='LoadPointsFromFile',
                    coord_type='LIDAR',
                    load_dim=5,
                    use_dim=5,
                    file_client_args=dict(backend='disk')),
                dict(
                    type='LoadPointsFromMultiSweeps',
                    sweeps_num=9,
                    use_dim=[0, 1, 2, 3, 4],
                    file_client_args=dict(backend='disk'),
                    pad_empty_sweeps=True,
                    remove_close=True),
                dict(
                    type='LoadAnnotations3D',
                    with_bbox_3d=True,
                    with_label_3d=True),
                dict(
                    type='ObjectSample',
                    db_sampler=dict(
                        data_root='data/nuscenes/',
                        info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',
                        rate=1.0,
                        prepare=dict(
                            filter_by_difficulty=[-1],
                            filter_by_min_points=dict(
                                car=5,
                                truck=5,
                                bus=5,
                                trailer=5,
                                construction_vehicle=5,
                                traffic_cone=5,
                                barrier=5,
                                motorcycle=5,
                                bicycle=5,
                                pedestrian=5)),
                        classes=[
                            'car', 'truck', 'construction_vehicle', 'bus',
                            'trailer', 'barrier', 'motorcycle', 'bicycle',
                            'pedestrian', 'traffic_cone'
                        ],
                        sample_groups=dict(
                            car=2,
                            truck=3,
                            construction_vehicle=7,
                            bus=4,
                            trailer=6,
                            barrier=2,
                            motorcycle=6,
                            bicycle=6,
                            pedestrian=2,
                            traffic_cone=2),
                        points_loader=dict(
                            type='LoadPointsFromFile',
                            coord_type='LIDAR',
                            load_dim=5,
                            use_dim=[0, 1, 2, 3, 4],
                            file_client_args=dict(backend='disk')))),
                dict(
                    type='GlobalRotScaleTrans',
                    rot_range=[-0.785, 0.785],
                    scale_ratio_range=[0.9, 1.1],
                    translation_std=[0.5, 0.5, 0.5]),
                dict(
                    type='RandomFlip3D',
                    sync_2d=False,
                    flip_ratio_bev_horizontal=0.5,
                    flip_ratio_bev_vertical=0.5),
                dict(
                    type='PointsRangeFilter',
                    point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
                dict(
                    type='ObjectRangeFilter',
                    point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
                dict(
                    type='ObjectNameFilter',
                    classes=[
                        'car', 'truck', 'construction_vehicle', 'bus',
                        'trailer', 'barrier', 'motorcycle', 'bicycle',
                        'pedestrian', 'traffic_cone'
                    ]),
                dict(type='PointShuffle'),
                dict(
                    type='DefaultFormatBundle3D',
                    class_names=[
                        'car', 'truck', 'construction_vehicle', 'bus',
                        'trailer', 'barrier', 'motorcycle', 'bicycle',
                        'pedestrian', 'traffic_cone'
                    ]),
                dict(
                    type='Collect3D',
                    keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])
            ],
            classes=[
                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                'traffic_cone'
            ],
            test_mode=False,
            use_valid_flag=True,
            box_type_3d='LiDAR')),
    val=dict(
        type='NuScenesDataset',
        data_root='data/nuscenes/',
        ann_file='data/nuscenes/nuscenes_infos_val.pkl',
        pipeline=[
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                file_client_args=dict(backend='disk')),
            dict(
                type='LoadPointsFromMultiSweeps',
                sweeps_num=9,
                use_dim=[0, 1, 2, 3, 4],
                file_client_args=dict(backend='disk'),
                pad_empty_sweeps=True,
                remove_close=True),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True),
            dict(
                type='MultiScaleFlipAug3D',
                img_scale=(1333, 800),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type='GlobalRotScaleTrans',
                        rot_range=[0, 0],
                        scale_ratio_range=[1.0, 1.0],
                        translation_std=[0, 0, 0]),
                    dict(type='RandomFlip3D'),
                    dict(
                        type='PointsRangeFilter',
                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
                    dict(
                        type='DefaultFormatBundle3D',
                        class_names=[
                            'car', 'truck', 'construction_vehicle', 'bus',
                            'trailer', 'barrier', 'motorcycle', 'bicycle',
                            'pedestrian', 'traffic_cone'
                        ],
                        with_label=False),
                    dict(
                        type='Collect3D',
                        keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])
                ])
        ],
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=False,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=True,
        box_type_3d='LiDAR'),
    test=dict(
        type='NuScenesDataset',
        data_root='data/nuscenes/',
        ann_file='data/nuscenes/nuscenes_infos_val.pkl',
        pipeline=[
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                file_client_args=dict(backend='disk')),
            dict(
                type='LoadPointsFromMultiSweeps',
                sweeps_num=9,
                use_dim=[0, 1, 2, 3, 4],
                file_client_args=dict(backend='disk'),
                pad_empty_sweeps=True,
                remove_close=True),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True),
            dict(
                type='MultiScaleFlipAug3D',
                img_scale=(1333, 800),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type='GlobalRotScaleTrans',
                        rot_range=[0, 0],
                        scale_ratio_range=[1.0, 1.0],
                        translation_std=[0, 0, 0]),
                    dict(type='RandomFlip3D'),
                    dict(
                        type='PointsRangeFilter',
                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
                    dict(
                        type='DefaultFormatBundle3D',
                        class_names=[
                            'car', 'truck', 'construction_vehicle', 'bus',
                            'trailer', 'barrier', 'motorcycle', 'bicycle',
                            'pedestrian', 'traffic_cone'
                        ],
                        with_label=False),
                    dict(
                        type='Collect3D',
                        keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])
                ])
        ],
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=False,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=True,
        box_type_3d='LiDAR'))
evaluation = dict(
    interval=5,
    pipeline=[
        dict(
            type='LoadPointsFromFile',
            coord_type='LIDAR',
            load_dim=5,
            use_dim=5,
            file_client_args=dict(backend='disk')),
        dict(
            type='LoadPointsFromMultiSweeps',
            sweeps_num=10,
            file_client_args=dict(backend='disk')),
        dict(
            type='DefaultFormatBundle3D',
            class_names=[
                'car', 'truck', 'trailer', 'bus', 'construction_vehicle',
                'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',
                'barrier'
            ],
            with_label=False),
        dict(type='Collect3D', keys=['points'])
    ])
optimizer = dict(type='AdamW', lr=1.25e-05, weight_decay=0.01)
optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))
lr_config = dict(
    policy='cyclic',
    target_ratio=(10, 0.0001),
    cyclic_times=1,
    step_ratio_up=0.4)
momentum_config = dict(
    policy='cyclic',
    target_ratio=(0.8947368421052632, 1),
    cyclic_times=1,
    step_ratio_up=0.4)
runner = dict(type='EpochBasedRunner', max_epochs=20)
checkpoint_config = dict(interval=1, max_keep_ckpts=1)
log_config = dict(
    interval=50,
    hooks=[dict(type='TextLoggerHook'),
           dict(type='TensorboardLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
work_dir = './work_dirs/lidar_0075v_900q_hednet_hednet_split40/2dbackbone和middle都更改了'
load_from = None
resume_from = None
workflow = [('train', 1)]
opencv_num_threads = 0
mp_start_method = 'fork'
plugin = 'plugin/futr3d'
voxel_size = [0.075, 0.075, 0.2]
center_head = dict(
    type='CenterHead',
    in_channels=512,
    tasks=[
        dict(num_class=1, class_names=['car']),
        dict(num_class=2, class_names=['truck', 'construction_vehicle']),
        dict(num_class=2, class_names=['bus', 'trailer']),
        dict(num_class=1, class_names=['barrier']),
        dict(num_class=2, class_names=['motorcycle', 'bicycle']),
        dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])
    ],
    common_heads=dict(
        reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),
    share_conv_channel=64,
    bbox_coder=dict(
        type='CenterPointBBoxCoder',
        pc_range=[-54, -54],
        post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],
        max_num=500,
        score_threshold=0.1,
        out_size_factor=8,
        voxel_size=[0.075, 0.075],
        code_size=9),
    separate_head=dict(type='SeparateHead', init_bias=-2.19, final_kernel=3),
    loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),
    loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),
    norm_bbox=True)
model = dict(
    type='FUTR3D',
    aux_weight=0.5,
    pts_voxel_layer=dict(
        max_num_points=-1,
        voxel_size=[0.075, 0.075, 0.2],
        max_voxels=(-1, -1),
        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
    pts_voxel_encoder=dict(
        type='DynamicVFE',
        in_channels=5,
        feat_channels=[64, 64],
        with_distance=False,
        with_cluster_center=True,
        with_voxel_center=True,
        voxel_size=[0.075, 0.075, 0.2],
        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
    pts_middle_encoder=dict(
        type='HEDNet',
        in_channels=64,
        sparse_shape=[41, 1440, 1440],
        model_cfg=dict(
            FEATURE_DIM=64,
            NUM_LAYERS=2,
            NUM_SBB=[2, 1, 1],
            DOWN_STRIDE=[1, 2, 2],
            DOWN_KERNEL_SIZE=[3, 3, 3])),
    pts_backbone=dict(
        type='CascadeDEDBackbone',
        in_channels=128,
        model_cfg=dict(
            FEATURE_DIM=128,
            NUM_LAYERS=4,
            NUM_SBB=[2, 1, 1],
            DOWN_STRIDES=[1, 2, 2])),
    pts_neck=dict(
        type='FPN',
        norm_cfg=dict(type='BN2d', eps=0.001, momentum=0.01),
        act_cfg=dict(type='ReLU', inplace=False),
        in_channels=[128],
        out_channels=256,
        start_level=0,
        add_extra_convs=True,
        num_outs=4,
        relu_before_extra_convs=True),
    pts_bbox_head=dict(
        type='FUTR3DHead',
        use_dab=True,
        anchor_size=3,
        use_aux=True,
        aux_head=dict(
            type='CenterHead',
            in_channels=512,
            tasks=[
                dict(num_class=1, class_names=['car']),
                dict(
                    num_class=2, class_names=['truck',
                                              'construction_vehicle']),
                dict(num_class=2, class_names=['bus', 'trailer']),
                dict(num_class=1, class_names=['barrier']),
                dict(num_class=2, class_names=['motorcycle', 'bicycle']),
                dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])
            ],
            common_heads=dict(
                reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),
            share_conv_channel=64,
            bbox_coder=dict(
                type='CenterPointBBoxCoder',
                pc_range=[-54, -54],
                post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],
                max_num=500,
                score_threshold=0.1,
                out_size_factor=8,
                voxel_size=[0.075, 0.075],
                code_size=9),
            separate_head=dict(
                type='SeparateHead', init_bias=-2.19, final_kernel=3),
            loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),
            loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),
            norm_bbox=True),
        mix_selection=False,
        num_query=900,
        num_classes=10,
        in_channels=256,
        pc_range=[-54, -54, -5.0, 54, 54, 3.0],
        sync_cls_avg_factor=True,
        with_box_refine=True,
        as_two_stage=False,
        code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],
        transformer=dict(
            type='FUTR3DTransformer',
            use_dab=True,
            decoder=dict(
                type='FUTR3DTransformerDecoder',
                num_layers=6,
                use_dab=True,
                anchor_size=3,
                return_intermediate=True,
                transformerlayers=dict(
                    type='DetrTransformerDecoderLayer',
                    attn_cfgs=[
                        dict(
                            type='MultiheadAttention',
                            embed_dims=256,
                            num_heads=8,
                            dropout=0.1),
                        dict(type='FUTR3DAttention', embed_dims=256)
                    ],
                    feedforward_channels=1024,
                    ffn_dropout=0.1,
                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',
                                     'ffn', 'norm')))),
        positional_encoding=dict(
            type='SinePositionalEncoding',
            num_feats=128,
            normalize=True,
            offset=-0.5),
        loss_cls=dict(
            type='FocalLoss',
            use_sigmoid=True,
            gamma=2.0,
            alpha=0.25,
            loss_weight=2.0),
        loss_bbox=dict(type='L1Loss', loss_weight=0.25),
        loss_iou=dict(type='GIoULoss', loss_weight=0)),
    train_cfg=dict(
        pts=dict(
            point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0],
            pc_range=[-54, -54, -5.0, 54, 54, 3.0],
            grid_size=[1440, 1440, 40],
            voxel_size=[0.075, 0.075, 0.2],
            out_size_factor=8,
            dense_reg=1,
            gaussian_overlap=0.1,
            max_objs=500,
            min_radius=2,
            code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],
            assigner=dict(
                type='HungarianAssigner3D',
                cls_cost=dict(type='FocalLossCost', weight=2.0),
                reg_cost=dict(type='BBox3DL1Cost', weight=0.25),
                iou_cost=dict(type='IoUCost', weight=0)))),
    test_cfg=dict(
        pts=dict(
            pc_range=[-54, -54],
            post_center_limit_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],
            max_per_img=500,
            max_pool_nms=False,
            min_radius=[4, 12, 10, 1, 0.85, 0.175],
            out_size_factor=8,
            voxel_size=[0.075, 0.075],
            nms_type='circle',
            pre_max_size=1000,
            post_max_size=83,
            nms_thr=0.2,
            max_num=300,
            score_threshold=0,
            post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0])))
db_sampler = dict(
    data_root='data/nuscenes/',
    info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',
    rate=1.0,
    prepare=dict(
        filter_by_difficulty=[-1],
        filter_by_min_points=dict(
            car=5,
            truck=5,
            bus=5,
            trailer=5,
            construction_vehicle=5,
            traffic_cone=5,
            barrier=5,
            motorcycle=5,
            bicycle=5,
            pedestrian=5)),
    classes=[
        'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',
        'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
    ],
    sample_groups=dict(
        car=2,
        truck=3,
        construction_vehicle=7,
        bus=4,
        trailer=6,
        barrier=2,
        motorcycle=6,
        bicycle=6,
        pedestrian=2,
        traffic_cone=2),
    points_loader=dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=[0, 1, 2, 3, 4],
        file_client_args=dict(backend='disk')))
find_unused_parameters = True
custom_hooks = [dict(type='FadeOjectSampleHook', num_last_epochs=5)]
gpu_ids = range(0, 4)

2025-05-06 09:15:22,882 - mmdet - INFO - 设置随机种子为 0, deterministic: False
2025-05-06 09:15:23,431 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
Name of parameter - Initialization information

pts_voxel_encoder.vfe_layers.0.0.weight - torch.Size([64, 11]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_voxel_encoder.vfe_layers.0.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_voxel_encoder.vfe_layers.0.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_voxel_encoder.vfe_layers.1.0.weight - torch.Size([64, 128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_voxel_encoder.vfe_layers.1.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_voxel_encoder.vfe_layers.1.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.0.0.weight - torch.Size([16, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv1.0.1.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.0.1.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.1.conv1.weight - torch.Size([16, 3, 3, 3, 16]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv1.1.conv1.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.1.bn1.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.1.bn1.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.1.conv2.weight - torch.Size([16, 3, 3, 3, 16]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv1.1.conv2.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.1.bn2.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.1.bn2.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.2.conv1.weight - torch.Size([16, 3, 3, 3, 16]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv1.2.conv1.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.2.bn1.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.2.bn1.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.2.conv2.weight - torch.Size([16, 3, 3, 3, 16]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv1.2.conv2.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.2.bn2.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.2.bn2.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.3.0.weight - torch.Size([32, 3, 3, 3, 16]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv1.3.1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv1.3.1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.0.blocks.1.conv1.weight - torch.Size([32, 3, 3, 3, 32]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv2.0.encoder.0.blocks.1.conv1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.0.blocks.1.bn1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.0.blocks.1.bn1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.0.blocks.1.conv2.weight - torch.Size([32, 3, 3, 3, 32]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv2.0.encoder.0.blocks.1.conv2.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.0.blocks.1.bn2.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.0.blocks.1.bn2.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.0.blocks.2.conv1.weight - torch.Size([32, 3, 3, 3, 32]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv2.0.encoder.0.blocks.2.conv1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.0.blocks.2.bn1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.0.blocks.2.bn1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.0.blocks.2.conv2.weight - torch.Size([32, 3, 3, 3, 32]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv2.0.encoder.0.blocks.2.conv2.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.0.blocks.2.bn2.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.0.blocks.2.bn2.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.1.blocks.0.0.weight - torch.Size([32, 3, 3, 3, 32]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv2.0.encoder.1.blocks.0.1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.1.blocks.0.1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.1.blocks.1.conv1.weight - torch.Size([32, 3, 3, 3, 32]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv2.0.encoder.1.blocks.1.conv1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.1.blocks.1.bn1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.1.blocks.1.bn1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.1.blocks.1.conv2.weight - torch.Size([32, 3, 3, 3, 32]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv2.0.encoder.1.blocks.1.conv2.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.1.blocks.1.bn2.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.1.blocks.1.bn2.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.2.blocks.0.0.weight - torch.Size([32, 3, 3, 3, 32]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv2.0.encoder.2.blocks.0.1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.2.blocks.0.1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.2.blocks.1.conv1.weight - torch.Size([32, 3, 3, 3, 32]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv2.0.encoder.2.blocks.1.conv1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.2.blocks.1.bn1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.2.blocks.1.bn1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.2.blocks.1.conv2.weight - torch.Size([32, 3, 3, 3, 32]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv2.0.encoder.2.blocks.1.conv2.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.2.blocks.1.bn2.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.encoder.2.blocks.1.bn2.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.decoder.0.0.weight - torch.Size([32, 3, 3, 3, 32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.decoder.0.1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.decoder.0.1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.decoder.1.0.weight - torch.Size([32, 3, 3, 3, 32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.decoder.1.1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.decoder.1.1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.decoder_norm.0.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.decoder_norm.0.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.decoder_norm.1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.0.decoder_norm.1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.1.0.weight - torch.Size([64, 3, 3, 3, 32]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv2.1.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv2.1.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.0.blocks.1.conv1.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv3.0.encoder.0.blocks.1.conv1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.0.blocks.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.0.blocks.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.0.blocks.1.conv2.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv3.0.encoder.0.blocks.1.conv2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.0.blocks.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.0.blocks.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.0.blocks.2.conv1.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv3.0.encoder.0.blocks.2.conv1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.0.blocks.2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.0.blocks.2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.0.blocks.2.conv2.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv3.0.encoder.0.blocks.2.conv2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.0.blocks.2.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.0.blocks.2.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.1.blocks.0.0.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv3.0.encoder.1.blocks.0.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.1.blocks.0.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.1.blocks.1.conv1.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv3.0.encoder.1.blocks.1.conv1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.1.blocks.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.1.blocks.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.1.blocks.1.conv2.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv3.0.encoder.1.blocks.1.conv2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.1.blocks.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.1.blocks.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.2.blocks.0.0.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv3.0.encoder.2.blocks.0.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.2.blocks.0.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.2.blocks.1.conv1.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv3.0.encoder.2.blocks.1.conv1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.2.blocks.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.2.blocks.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.2.blocks.1.conv2.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv3.0.encoder.2.blocks.1.conv2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.2.blocks.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.encoder.2.blocks.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.decoder.0.0.weight - torch.Size([64, 3, 3, 3, 64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.decoder.0.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.decoder.0.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.decoder.1.0.weight - torch.Size([64, 3, 3, 3, 64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.decoder.1.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.decoder.1.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.decoder_norm.0.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.decoder_norm.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.decoder_norm.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.0.decoder_norm.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.1.0.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv3.1.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv3.1.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.0.blocks.1.conv1.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.0.encoder.0.blocks.1.conv1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.0.blocks.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.0.blocks.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.0.blocks.1.conv2.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.0.encoder.0.blocks.1.conv2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.0.blocks.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.0.blocks.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.0.blocks.2.conv1.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.0.encoder.0.blocks.2.conv1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.0.blocks.2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.0.blocks.2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.0.blocks.2.conv2.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.0.encoder.0.blocks.2.conv2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.0.blocks.2.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.0.blocks.2.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.1.blocks.0.0.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.0.encoder.1.blocks.0.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.1.blocks.0.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.1.blocks.1.conv1.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.0.encoder.1.blocks.1.conv1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.1.blocks.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.1.blocks.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.1.blocks.1.conv2.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.0.encoder.1.blocks.1.conv2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.1.blocks.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.1.blocks.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.2.blocks.0.0.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.0.encoder.2.blocks.0.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.2.blocks.0.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.2.blocks.1.conv1.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.0.encoder.2.blocks.1.conv1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.2.blocks.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.2.blocks.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.2.blocks.1.conv2.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.0.encoder.2.blocks.1.conv2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.2.blocks.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.encoder.2.blocks.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.decoder.0.0.weight - torch.Size([64, 3, 3, 3, 64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.decoder.0.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.decoder.0.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.decoder.1.0.weight - torch.Size([64, 3, 3, 3, 64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.decoder.1.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.decoder.1.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.decoder_norm.0.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.decoder_norm.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.decoder_norm.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.0.decoder_norm.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.0.blocks.1.conv1.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.1.encoder.0.blocks.1.conv1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.0.blocks.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.0.blocks.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.0.blocks.1.conv2.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.1.encoder.0.blocks.1.conv2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.0.blocks.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.0.blocks.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.0.blocks.2.conv1.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.1.encoder.0.blocks.2.conv1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.0.blocks.2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.0.blocks.2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.0.blocks.2.conv2.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.1.encoder.0.blocks.2.conv2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.0.blocks.2.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.0.blocks.2.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.1.blocks.0.0.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.1.encoder.1.blocks.0.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.1.blocks.0.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.1.blocks.1.conv1.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.1.encoder.1.blocks.1.conv1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.1.blocks.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.1.blocks.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.1.blocks.1.conv2.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.1.encoder.1.blocks.1.conv2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.1.blocks.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.1.blocks.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.2.blocks.0.0.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.1.encoder.2.blocks.0.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.2.blocks.0.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.2.blocks.1.conv1.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.1.encoder.2.blocks.1.conv1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.2.blocks.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.2.blocks.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.2.blocks.1.conv2.weight - torch.Size([64, 3, 3, 3, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.layers.1.encoder.2.blocks.1.conv2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.2.blocks.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.encoder.2.blocks.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.decoder.0.0.weight - torch.Size([64, 3, 3, 3, 64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.decoder.0.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.decoder.0.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.decoder.1.0.weight - torch.Size([64, 3, 3, 3, 64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.decoder.1.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.decoder.1.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.decoder_norm.0.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.decoder_norm.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.decoder_norm.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.layers.1.decoder_norm.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv_out.0.weight - torch.Size([64, 3, 1, 1, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv_out.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv_out.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv_out.3.weight - torch.Size([64, 3, 1, 1, 64]): 
Initialized by user-defined `init_weights` in HEDNet  

pts_middle_encoder.conv_out.4.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv_out.4.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.0.conv1.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.1.conv1.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.conv1.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.downsample_layer.0.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.downsample_layer.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.downsample_layer.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.1.conv1.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.conv1.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.downsample_layer.0.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.downsample_layer.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.downsample_layer.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.1.conv1.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder.0.0.weight - torch.Size([128, 128, 2, 2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder.0.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder.0.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder.1.0.weight - torch.Size([128, 128, 2, 2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder.1.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder.1.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder_norm.0.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder_norm.0.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder_norm.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder_norm.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.0.conv1.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.1.conv1.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.conv1.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.downsample_layer.0.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.downsample_layer.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.downsample_layer.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.1.conv1.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.conv1.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.downsample_layer.0.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.downsample_layer.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.downsample_layer.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.1.conv1.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder.0.0.weight - torch.Size([128, 128, 2, 2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder.0.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder.0.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder.1.0.weight - torch.Size([128, 128, 2, 2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder.1.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder.1.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder_norm.0.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder_norm.0.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder_norm.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder_norm.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.0.0.conv1.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.0.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.0.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.0.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.0.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.0.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.0.1.conv1.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.0.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.0.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.0.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.0.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.0.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.0.conv1.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.0.downsample_layer.0.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.0.downsample_layer.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.0.downsample_layer.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.1.conv1.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.1.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.0.conv1.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.0.downsample_layer.0.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.0.downsample_layer.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.0.downsample_layer.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.1.conv1.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.encoder.2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.decoder.0.0.weight - torch.Size([128, 128, 2, 2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.decoder.0.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.decoder.0.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.decoder.1.0.weight - torch.Size([128, 128, 2, 2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.decoder.1.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.decoder.1.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.decoder_norm.0.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.decoder_norm.0.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.decoder_norm.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.2.decoder_norm.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.0.0.conv1.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.0.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.0.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.0.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.0.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.0.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.0.1.conv1.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.0.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.0.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.0.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.0.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.0.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.0.conv1.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.0.downsample_layer.0.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.0.downsample_layer.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.0.downsample_layer.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.1.conv1.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.1.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.0.conv1.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.0.downsample_layer.0.weight - torch.Size([128, 128, 1, 1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.0.downsample_layer.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.0.downsample_layer.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.1.conv1.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.encoder.2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.decoder.0.0.weight - torch.Size([128, 128, 2, 2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.decoder.0.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.decoder.0.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.decoder.1.0.weight - torch.Size([128, 128, 2, 2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.decoder.1.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.decoder.1.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.decoder_norm.0.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.decoder_norm.0.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.decoder_norm.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.3.decoder_norm.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.lateral_convs.0.conv.weight - torch.Size([256, 128, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.lateral_convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.lateral_convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.fpn_convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.1.conv.weight - torch.Size([256, 128, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.fpn_convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.fpn_convs.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.fpn_convs.3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.level_embeds - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.query_scale.layers.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.query_scale.layers.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.query_scale.layers.1.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.query_scale.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.ref_point_head.layers.0.weight - torch.Size([256, 384]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.ref_point_head.layers.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.ref_point_head.layers.1.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.ref_point_head.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.0.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.0.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.cls_branches.1.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.1.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.cls_branches.2.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.2.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.cls_branches.3.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.3.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.cls_branches.4.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.cls_branches.5.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.5.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.0.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.0.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.0.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.0.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.0.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.0.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.1.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.1.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.1.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.1.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.1.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.1.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.2.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.2.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.2.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.2.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.2.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.2.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.3.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.3.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.3.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.3.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.3.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.3.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.4.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.4.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.4.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.4.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.4.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.4.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.5.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.5.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.5.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.5.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.5.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.5.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.tgt_embed.weight - torch.Size([900, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.refpoint_embed.weight - torch.Size([900, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.shared_conv.conv.weight - torch.Size([64, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.shared_conv.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.shared_conv.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.heatmap.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.heatmap.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.heatmap.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.heatmap.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.heatmap.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.heatmap.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.heatmap.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.heatmap.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.heatmap.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.heatmap.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.heatmap.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.heatmap.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  
2025-05-06 09:15:23,526 - mmdet - INFO - Model:
FUTR3D(
  (pts_voxel_layer): Voxelization(voxel_size=[0.075, 0.075, 0.2], point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0], max_num_points=-1, max_voxels=(-1, -1), deterministic=True)
  (pts_voxel_encoder): DynamicVFE(
    (scatter): DynamicScatter(voxel_size=[0.075, 0.075, 0.2], point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0], average_points=True)
    (vfe_layers): ModuleList(
      (0): Sequential(
        (0): Linear(in_features=11, out_features=64, bias=False)
        (1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): Sequential(
        (0): Linear(in_features=128, out_features=64, bias=False)
        (1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (vfe_scatter): DynamicScatter(voxel_size=[0.075, 0.075, 0.2], point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0], average_points=False)
    (cluster_scatter): DynamicScatter(voxel_size=[0.075, 0.075, 0.2], point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0], average_points=True)
  )
  (pts_middle_encoder): HEDNet(
    (conv1): SparseSequential(
      (0): SparseSequential(
        (0): SubMConv3d(64, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): SyncBatchNorm(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (1): SparseBasicBlock(
        (conv1): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn1): SyncBatchNorm(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (relu): ReLU()
        (conv2): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn2): SyncBatchNorm(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      )
      (2): SparseBasicBlock(
        (conv1): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn1): SyncBatchNorm(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (relu): ReLU()
        (conv2): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
        (bn2): SyncBatchNorm(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      )
      (3): SparseSequential(
        (0): SparseConv3d(16, 32, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
    (conv2): SparseSequential(
      (0): SEDLayer(
        (encoder): ModuleList(
          (0): SEDBlock(
            (blocks): SparseSequential(
              (0): Identity()
              (1): SparseBasicBlock(
                (conv1): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
              (2): SparseBasicBlock(
                (conv1): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
          (1): SEDBlock(
            (blocks): SparseSequential(
              (0): SparseSequential(
                (0): SparseConv3d(32, 32, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (1): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (1): SparseBasicBlock(
                (conv1): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
          (2): SEDBlock(
            (blocks): SparseSequential(
              (0): SparseSequential(
                (0): SparseConv3d(32, 32, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (1): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (1): SparseBasicBlock(
                (conv1): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
        (decoder): ModuleList(
          (0): SparseSequential(
            (0): SparseInverseConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (1): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (1): SparseSequential(
            (0): SparseInverseConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (1): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
        )
        (decoder_norm): ModuleList(
          (0): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (1): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (1): SparseSequential(
        (0): SparseConv3d(32, 64, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
    (conv3): SparseSequential(
      (0): SEDLayer(
        (encoder): ModuleList(
          (0): SEDBlock(
            (blocks): SparseSequential(
              (0): Identity()
              (1): SparseBasicBlock(
                (conv1): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
              (2): SparseBasicBlock(
                (conv1): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
          (1): SEDBlock(
            (blocks): SparseSequential(
              (0): SparseSequential(
                (0): SparseConv3d(64, 64, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (1): SparseBasicBlock(
                (conv1): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
          (2): SEDBlock(
            (blocks): SparseSequential(
              (0): SparseSequential(
                (0): SparseConv3d(64, 64, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (1): SparseBasicBlock(
                (conv1): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
        (decoder): ModuleList(
          (0): SparseSequential(
            (0): SparseInverseConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (1): SparseSequential(
            (0): SparseInverseConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
        )
        (decoder_norm): ModuleList(
          (0): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (1): SparseSequential(
        (0): SparseConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
        (1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU()
      )
    )
    (layers): ModuleList(
      (0): SEDLayer(
        (encoder): ModuleList(
          (0): SEDBlock(
            (blocks): SparseSequential(
              (0): Identity()
              (1): SparseBasicBlock(
                (conv1): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
              (2): SparseBasicBlock(
                (conv1): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
          (1): SEDBlock(
            (blocks): SparseSequential(
              (0): SparseSequential(
                (0): SparseConv3d(64, 64, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (1): SparseBasicBlock(
                (conv1): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
          (2): SEDBlock(
            (blocks): SparseSequential(
              (0): SparseSequential(
                (0): SparseConv3d(64, 64, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (1): SparseBasicBlock(
                (conv1): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
        (decoder): ModuleList(
          (0): SparseSequential(
            (0): SparseInverseConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (1): SparseSequential(
            (0): SparseInverseConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
        )
        (decoder_norm): ModuleList(
          (0): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (1): SEDLayer(
        (encoder): ModuleList(
          (0): SEDBlock(
            (blocks): SparseSequential(
              (0): Identity()
              (1): SparseBasicBlock(
                (conv1): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
              (2): SparseBasicBlock(
                (conv1): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
          (1): SEDBlock(
            (blocks): SparseSequential(
              (0): SparseSequential(
                (0): SparseConv3d(64, 64, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (1): SparseBasicBlock(
                (conv1): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
          (2): SEDBlock(
            (blocks): SparseSequential(
              (0): SparseSequential(
                (0): SparseConv3d(64, 64, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
                (1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (2): ReLU()
              )
              (1): SparseBasicBlock(
                (conv1): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
                (relu): ReLU()
                (conv2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], algo=ConvAlgo.MaskImplicitGemm)
                (bn2): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
          )
        )
        (decoder): ModuleList(
          (0): SparseSequential(
            (0): SparseInverseConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (1): SparseSequential(
            (0): SparseInverseConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
            (1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
        )
        (decoder_norm): ModuleList(
          (0): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
    )
    (conv_out): SparseSequential(
      (0): SparseConv3d(64, 64, kernel_size=[3, 1, 1], stride=[2, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
      (1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
      (3): SparseConv3d(64, 64, kernel_size=[3, 1, 1], stride=[2, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
      (4): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (5): ReLU()
    )
  )
  (pts_backbone): CascadeDEDBackbone(
    (layers): ModuleList(
      (0): DEDBackbone(
        (encoder): ModuleList(
          (0): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
            (1): BasicBlock(
              (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
          (1): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
              (downsample_layer): Sequential(
                (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
            (1): BasicBlock(
              (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
          (2): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
              (downsample_layer): Sequential(
                (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
            (1): BasicBlock(
              (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
        )
        (decoder): ModuleList(
          (0): Sequential(
            (0): ConvTranspose2d(128, 128, kernel_size=(2, 2), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (1): Sequential(
            (0): ConvTranspose2d(128, 128, kernel_size=(2, 2), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
        )
        (decoder_norm): ModuleList(
          (0): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (1): DEDBackbone(
        (encoder): ModuleList(
          (0): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
            (1): BasicBlock(
              (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
          (1): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
              (downsample_layer): Sequential(
                (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
            (1): BasicBlock(
              (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
          (2): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
              (downsample_layer): Sequential(
                (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
            (1): BasicBlock(
              (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
        )
        (decoder): ModuleList(
          (0): Sequential(
            (0): ConvTranspose2d(128, 128, kernel_size=(2, 2), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (1): Sequential(
            (0): ConvTranspose2d(128, 128, kernel_size=(2, 2), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
        )
        (decoder_norm): ModuleList(
          (0): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (2): DEDBackbone(
        (encoder): ModuleList(
          (0): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
            (1): BasicBlock(
              (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
          (1): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
              (downsample_layer): Sequential(
                (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
            (1): BasicBlock(
              (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
          (2): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
              (downsample_layer): Sequential(
                (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
            (1): BasicBlock(
              (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
        )
        (decoder): ModuleList(
          (0): Sequential(
            (0): ConvTranspose2d(128, 128, kernel_size=(2, 2), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (1): Sequential(
            (0): ConvTranspose2d(128, 128, kernel_size=(2, 2), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
        )
        (decoder_norm): ModuleList(
          (0): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (3): DEDBackbone(
        (encoder): ModuleList(
          (0): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
            (1): BasicBlock(
              (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
          (1): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
              (downsample_layer): Sequential(
                (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
            (1): BasicBlock(
              (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
          (2): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
              (downsample_layer): Sequential(
                (0): Conv2d(128, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
            (1): BasicBlock(
              (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
        )
        (decoder): ModuleList(
          (0): Sequential(
            (0): ConvTranspose2d(128, 128, kernel_size=(2, 2), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (1): Sequential(
            (0): ConvTranspose2d(128, 128, kernel_size=(2, 2), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
        )
        (decoder_norm): ModuleList(
          (0): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
    )
  )
  (pts_neck): FPN(
    (lateral_convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
    )
    (fpn_convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
      (1): ConvModule(
        (conv): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
      (2): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
      (3): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
    )
  )
  init_cfg={'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
  (pts_bbox_head): FUTR3DHead(
    (loss_cls): FocalLoss()
    (loss_bbox): L1Loss()
    (loss_iou): GIoULoss()
    (activate): ReLU(inplace=True)
    (positional_encoding): SinePositionalEncoding(num_feats=128, temperature=10000, normalize=True, scale=6.283185307179586, eps=1e-06)
    (transformer): FUTR3DTransformer(
      (decoder): FUTR3DTransformerDecoder(
        (layers): ModuleList(
          (0): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (1): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (2): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (3): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (4): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (5): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
        (query_scale): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=256, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
          )
        )
        (ref_point_head): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=384, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
          )
        )
      )
    )
    (cls_branches): ModuleList(
      (0): Linear(in_features=256, out_features=10, bias=True)
      (1): Linear(in_features=256, out_features=10, bias=True)
      (2): Linear(in_features=256, out_features=10, bias=True)
      (3): Linear(in_features=256, out_features=10, bias=True)
      (4): Linear(in_features=256, out_features=10, bias=True)
      (5): Linear(in_features=256, out_features=10, bias=True)
    )
    (reg_branches): ModuleList(
      (0): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (1): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (2): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (3): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (4): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (5): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
    )
    (tgt_embed): Embedding(900, 256)
    (refpoint_embed): Embedding(900, 3)
    (aux_head): CenterHead(
      (loss_cls): GaussianFocalLoss()
      (loss_bbox): L1Loss()
      (shared_conv): ConvModule(
        (conv): Conv2d(512, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (task_heads): ModuleList(
        (0): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
        (1): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
        (2): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
        (3): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
        (4): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
        (5): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
      )
    )
  )
)
2025-05-06 09:16:04,673 - mmdet - INFO - Start running, host: root@mlkd-server2, work_dir: /root/disk/projects/FUTR3D/work_dirs/lidar_0075v_900q_hednet_hednet_split40/2dbackbone和middle都更改了
2025-05-06 09:16:04,674 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CyclicLrUpdaterHook                
(HIGH        ) CyclicMomentumUpdaterHook          
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CyclicLrUpdaterHook                
(HIGH        ) CyclicMomentumUpdaterHook          
(NORMAL      ) FadeOjectSampleHook                
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CyclicLrUpdaterHook                
(HIGH        ) CyclicMomentumUpdaterHook          
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_epoch:
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
2025-05-06 09:16:04,674 - mmdet - INFO - workflow: [('train', 1)], max: 20 epochs
2025-05-06 09:16:04,674 - mmdet - INFO - Checkpoints will be saved to /root/disk/projects/FUTR3D/work_dirs/lidar_0075v_900q_hednet_hednet_split40/2dbackbone和middle都更改了 by HardDiskBackend.
2025-05-06 09:17:17,517 - mmdet - INFO - Epoch [1][50/773]	lr: 1.252e-05, eta: 6:13:33, time: 1.454, data_time: 0.162, memory: 5625, loss_cls: 1.5925, loss_bbox: 2.2795, d0.loss_cls: 1.9598, d0.loss_bbox: 4.4675, d1.loss_cls: 1.8855, d1.loss_bbox: 2.3290, d2.loss_cls: 1.7577, d2.loss_bbox: 2.3136, d3.loss_cls: 1.6122, d3.loss_bbox: 2.2976, d4.loss_cls: 1.5768, d4.loss_bbox: 2.2885, aux_task0.loss_heatmap: 774.8941, aux_task0.loss_bbox: 0.9825, aux_task1.loss_heatmap: 825.7554, aux_task1.loss_bbox: 1.0126, aux_task2.loss_heatmap: 858.1659, aux_task2.loss_bbox: 1.1443, aux_task3.loss_heatmap: 1379.5892, aux_task3.loss_bbox: 0.8095, aux_task4.loss_heatmap: 518.8157, aux_task4.loss_bbox: 0.8139, aux_task5.loss_heatmap: 947.6862, aux_task5.loss_bbox: 0.8463, loss: 5336.8756, grad_norm: 79964.4206
2025-05-06 09:18:11,296 - mmdet - INFO - Epoch [1][100/773]	lr: 1.257e-05, eta: 5:23:50, time: 1.076, data_time: 0.005, memory: 5625, loss_cls: 1.2178, loss_bbox: 2.1877, d0.loss_cls: 1.7210, d0.loss_bbox: 4.4132, d1.loss_cls: 1.4351, d1.loss_bbox: 2.2771, d2.loss_cls: 1.2828, d2.loss_bbox: 2.2448, d3.loss_cls: 1.2167, d3.loss_bbox: 2.2164, d4.loss_cls: 1.2104, d4.loss_bbox: 2.2007, aux_task0.loss_heatmap: 465.7232, aux_task0.loss_bbox: 0.8629, aux_task1.loss_heatmap: 617.7365, aux_task1.loss_bbox: 0.8686, aux_task2.loss_heatmap: 596.0272, aux_task2.loss_bbox: 1.0764, aux_task3.loss_heatmap: 943.9967, aux_task3.loss_bbox: 0.7628, aux_task4.loss_heatmap: 348.8545, aux_task4.loss_bbox: 0.6796, aux_task5.loss_heatmap: 574.6186, aux_task5.loss_bbox: 0.6900, loss: 3575.5207, grad_norm: 42063.5728
2025-05-06 09:19:05,795 - mmdet - INFO - Epoch [1][150/773]	lr: 1.266e-05, eta: 5:07:52, time: 1.090, data_time: 0.005, memory: 5812, loss_cls: 1.1803, loss_bbox: 1.9742, d0.loss_cls: 1.3894, d0.loss_bbox: 4.2148, d1.loss_cls: 1.1903, d1.loss_bbox: 2.1629, d2.loss_cls: 1.1769, d2.loss_bbox: 2.0963, d3.loss_cls: 1.1790, d3.loss_bbox: 2.0435, d4.loss_cls: 1.1782, d4.loss_bbox: 2.0058, aux_task0.loss_heatmap: 253.4256, aux_task0.loss_bbox: 0.6818, aux_task1.loss_heatmap: 326.2272, aux_task1.loss_bbox: 0.7040, aux_task2.loss_heatmap: 256.0409, aux_task2.loss_bbox: 0.8796, aux_task3.loss_heatmap: 417.1663, aux_task3.loss_bbox: 0.5514, aux_task4.loss_heatmap: 168.0864, aux_task4.loss_bbox: 0.5427, aux_task5.loss_heatmap: 245.5975, aux_task5.loss_bbox: 0.5726, loss: 1692.2676, grad_norm: 13791.7309
2025-05-06 09:20:00,438 - mmdet - INFO - Epoch [1][200/773]	lr: 1.279e-05, eta: 4:59:39, time: 1.093, data_time: 0.005, memory: 5812, loss_cls: 1.1579, loss_bbox: 1.8468, d0.loss_cls: 1.1894, d0.loss_bbox: 3.5135, d1.loss_cls: 1.1557, d1.loss_bbox: 1.9015, d2.loss_cls: 1.1579, d2.loss_bbox: 1.8205, d3.loss_cls: 1.1582, d3.loss_bbox: 1.7973, d4.loss_cls: 1.1583, d4.loss_bbox: 1.8135, aux_task0.loss_heatmap: 145.0976, aux_task0.loss_bbox: 0.5980, aux_task1.loss_heatmap: 154.1214, aux_task1.loss_bbox: 0.6134, aux_task2.loss_heatmap: 121.3680, aux_task2.loss_bbox: 0.7453, aux_task3.loss_heatmap: 217.6988, aux_task3.loss_bbox: 0.4822, aux_task4.loss_heatmap: 76.8679, aux_task4.loss_bbox: 0.4708, aux_task5.loss_heatmap: 115.2589, aux_task5.loss_bbox: 0.5026, loss: 853.4956, grad_norm: 6765.5272
2025-05-06 09:20:54,528 - mmdet - INFO - Epoch [1][250/773]	lr: 1.295e-05, eta: 4:53:45, time: 1.081, data_time: 0.005, memory: 5812, loss_cls: 1.1622, loss_bbox: 1.9788, d0.loss_cls: 1.1584, d0.loss_bbox: 2.2250, d1.loss_cls: 1.1608, d1.loss_bbox: 1.7918, d2.loss_cls: 1.1637, d2.loss_bbox: 1.8340, d3.loss_cls: 1.1605, d3.loss_bbox: 1.9011, d4.loss_cls: 1.1620, d4.loss_bbox: 1.9496, aux_task0.loss_heatmap: 74.7303, aux_task0.loss_bbox: 0.5544, aux_task1.loss_heatmap: 81.7432, aux_task1.loss_bbox: 0.5741, aux_task2.loss_heatmap: 69.3626, aux_task2.loss_bbox: 0.6491, aux_task3.loss_heatmap: 124.6800, aux_task3.loss_bbox: 0.4550, aux_task4.loss_heatmap: 42.2534, aux_task4.loss_bbox: 0.4545, aux_task5.loss_heatmap: 70.2782, aux_task5.loss_bbox: 0.5014, loss: 484.8841, grad_norm: 3881.2898
2025-05-06 09:21:48,313 - mmdet - INFO - Epoch [1][300/773]	lr: 1.315e-05, eta: 4:49:18, time: 1.076, data_time: 0.006, memory: 5910, loss_cls: 1.1653, loss_bbox: 1.8664, d0.loss_cls: 1.1663, d0.loss_bbox: 1.8361, d1.loss_cls: 1.1693, d1.loss_bbox: 1.7959, d2.loss_cls: 1.1689, d2.loss_bbox: 1.8311, d3.loss_cls: 1.1687, d3.loss_bbox: 1.8490, d4.loss_cls: 1.1651, d4.loss_bbox: 1.8616, aux_task0.loss_heatmap: 52.0686, aux_task0.loss_bbox: 0.5171, aux_task1.loss_heatmap: 54.6640, aux_task1.loss_bbox: 0.5394, aux_task2.loss_heatmap: 39.1556, aux_task2.loss_bbox: 0.6046, aux_task3.loss_heatmap: 84.5668, aux_task3.loss_bbox: 0.4313, aux_task4.loss_heatmap: 24.9929, aux_task4.loss_bbox: 0.4633, aux_task5.loss_heatmap: 41.6133, aux_task5.loss_bbox: 0.4740, loss: 318.1343, grad_norm: 2728.5218
2025-05-06 09:22:41,902 - mmdet - INFO - Epoch [1][350/773]	lr: 1.338e-05, eta: 4:45:42, time: 1.072, data_time: 0.005, memory: 5910, loss_cls: 1.1571, loss_bbox: 1.7864, d0.loss_cls: 1.1612, d0.loss_bbox: 1.8211, d1.loss_cls: 1.1584, d1.loss_bbox: 1.7876, d2.loss_cls: 1.1591, d2.loss_bbox: 1.7951, d3.loss_cls: 1.1593, d3.loss_bbox: 1.7963, d4.loss_cls: 1.1590, d4.loss_bbox: 1.7920, aux_task0.loss_heatmap: 29.0496, aux_task0.loss_bbox: 0.5015, aux_task1.loss_heatmap: 33.6751, aux_task1.loss_bbox: 0.5356, aux_task2.loss_heatmap: 24.0857, aux_task2.loss_bbox: 0.5711, aux_task3.loss_heatmap: 52.4916, aux_task3.loss_bbox: 0.4261, aux_task4.loss_heatmap: 14.2312, aux_task4.loss_bbox: 0.4444, aux_task5.loss_heatmap: 24.6989, aux_task5.loss_bbox: 0.4687, loss: 198.9121, grad_norm: 1711.4427
2025-05-06 09:23:35,876 - mmdet - INFO - Epoch [1][400/773]	lr: 1.365e-05, eta: 4:43:02, time: 1.079, data_time: 0.006, memory: 5910, loss_cls: 1.1616, loss_bbox: 1.7786, d0.loss_cls: 1.1611, d0.loss_bbox: 1.8209, d1.loss_cls: 1.1608, d1.loss_bbox: 1.7917, d2.loss_cls: 1.1600, d2.loss_bbox: 1.7900, d3.loss_cls: 1.1601, d3.loss_bbox: 1.7891, d4.loss_cls: 1.1602, d4.loss_bbox: 1.7872, aux_task0.loss_heatmap: 23.5300, aux_task0.loss_bbox: 0.4993, aux_task1.loss_heatmap: 23.2637, aux_task1.loss_bbox: 0.5256, aux_task2.loss_heatmap: 15.4150, aux_task2.loss_bbox: 0.5506, aux_task3.loss_heatmap: 30.4375, aux_task3.loss_bbox: 0.4407, aux_task4.loss_heatmap: 9.1843, aux_task4.loss_bbox: 0.4463, aux_task5.loss_heatmap: 17.1280, aux_task5.loss_bbox: 0.4634, loss: 139.6055, grad_norm: 1195.6893
2025-05-06 09:24:30,484 - mmdet - INFO - Epoch [1][450/773]	lr: 1.396e-05, eta: 4:41:06, time: 1.092, data_time: 0.006, memory: 5910, loss_cls: 1.1517, loss_bbox: 1.7486, d0.loss_cls: 1.1525, d0.loss_bbox: 1.7729, d1.loss_cls: 1.1517, d1.loss_bbox: 1.7467, d2.loss_cls: 1.1533, d2.loss_bbox: 1.7414, d3.loss_cls: 1.1523, d3.loss_bbox: 1.7397, d4.loss_cls: 1.1531, d4.loss_bbox: 1.7425, aux_task0.loss_heatmap: 15.2999, aux_task0.loss_bbox: 0.4728, aux_task1.loss_heatmap: 13.1778, aux_task1.loss_bbox: 0.4986, aux_task2.loss_heatmap: 9.7588, aux_task2.loss_bbox: 0.5237, aux_task3.loss_heatmap: 20.1567, aux_task3.loss_bbox: 0.4304, aux_task4.loss_heatmap: 6.1110, aux_task4.loss_bbox: 0.4406, aux_task5.loss_heatmap: 11.0843, aux_task5.loss_bbox: 0.4640, loss: 95.8252, grad_norm: 760.2335
2025-05-06 09:25:24,953 - mmdet - INFO - Epoch [1][500/773]	lr: 1.430e-05, eta: 4:39:19, time: 1.089, data_time: 0.005, memory: 5910, loss_cls: 1.1365, loss_bbox: 1.7366, d0.loss_cls: 1.1349, d0.loss_bbox: 1.7727, d1.loss_cls: 1.1380, d1.loss_bbox: 1.7440, d2.loss_cls: 1.1365, d2.loss_bbox: 1.7402, d3.loss_cls: 1.1390, d3.loss_bbox: 1.7395, d4.loss_cls: 1.1362, d4.loss_bbox: 1.7412, aux_task0.loss_heatmap: 9.5135, aux_task0.loss_bbox: 0.4743, aux_task1.loss_heatmap: 9.1654, aux_task1.loss_bbox: 0.4939, aux_task2.loss_heatmap: 6.9928, aux_task2.loss_bbox: 0.5087, aux_task3.loss_heatmap: 11.9506, aux_task3.loss_bbox: 0.4200, aux_task4.loss_heatmap: 4.3088, aux_task4.loss_bbox: 0.4341, aux_task5.loss_heatmap: 7.0314, aux_task5.loss_bbox: 0.4627, loss: 69.0512, grad_norm: 486.5171
2025-05-06 09:26:19,258 - mmdet - INFO - Epoch [1][550/773]	lr: 1.467e-05, eta: 4:37:37, time: 1.086, data_time: 0.005, memory: 5910, loss_cls: 1.1339, loss_bbox: 1.7075, d0.loss_cls: 1.1329, d0.loss_bbox: 1.7368, d1.loss_cls: 1.1339, d1.loss_bbox: 1.7060, d2.loss_cls: 1.1333, d2.loss_bbox: 1.7029, d3.loss_cls: 1.1354, d3.loss_bbox: 1.7055, d4.loss_cls: 1.1337, d4.loss_bbox: 1.7049, aux_task0.loss_heatmap: 6.6423, aux_task0.loss_bbox: 0.4650, aux_task1.loss_heatmap: 5.9052, aux_task1.loss_bbox: 0.5022, aux_task2.loss_heatmap: 4.4060, aux_task2.loss_bbox: 0.5083, aux_task3.loss_heatmap: 7.7917, aux_task3.loss_bbox: 0.4203, aux_task4.loss_heatmap: 2.9917, aux_task4.loss_bbox: 0.4247, aux_task5.loss_heatmap: 4.8436, aux_task5.loss_bbox: 0.4630, loss: 52.4305, grad_norm: 304.3700
2025-05-06 09:27:13,931 - mmdet - INFO - Epoch [1][600/773]	lr: 1.508e-05, eta: 4:36:11, time: 1.093, data_time: 0.006, memory: 5910, loss_cls: 1.1343, loss_bbox: 1.7260, d0.loss_cls: 1.1408, d0.loss_bbox: 1.7591, d1.loss_cls: 1.1410, d1.loss_bbox: 1.7279, d2.loss_cls: 1.1405, d2.loss_bbox: 1.7251, d3.loss_cls: 1.1402, d3.loss_bbox: 1.7248, d4.loss_cls: 1.1357, d4.loss_bbox: 1.7239, aux_task0.loss_heatmap: 4.8577, aux_task0.loss_bbox: 0.4653, aux_task1.loss_heatmap: 4.0998, aux_task1.loss_bbox: 0.5042, aux_task2.loss_heatmap: 3.5038, aux_task2.loss_bbox: 0.5089, aux_task3.loss_heatmap: 5.1692, aux_task3.loss_bbox: 0.4165, aux_task4.loss_heatmap: 2.3127, aux_task4.loss_bbox: 0.4320, aux_task5.loss_heatmap: 3.6525, aux_task5.loss_bbox: 0.4714, loss: 43.6131, grad_norm: 208.9511
2025-05-06 09:28:08,817 - mmdet - INFO - Epoch [1][650/773]	lr: 1.553e-05, eta: 4:34:56, time: 1.098, data_time: 0.006, memory: 5910, loss_cls: 1.1268, loss_bbox: 1.7181, d0.loss_cls: 1.1322, d0.loss_bbox: 1.7427, d1.loss_cls: 1.1331, d1.loss_bbox: 1.7216, d2.loss_cls: 1.1326, d2.loss_bbox: 1.7187, d3.loss_cls: 1.1326, d3.loss_bbox: 1.7173, d4.loss_cls: 1.1300, d4.loss_bbox: 1.7142, aux_task0.loss_heatmap: 3.1378, aux_task0.loss_bbox: 0.4670, aux_task1.loss_heatmap: 3.0140, aux_task1.loss_bbox: 0.4982, aux_task2.loss_heatmap: 2.6074, aux_task2.loss_bbox: 0.5048, aux_task3.loss_heatmap: 3.6817, aux_task3.loss_bbox: 0.4173, aux_task4.loss_heatmap: 1.9398, aux_task4.loss_bbox: 0.4279, aux_task5.loss_heatmap: 2.6815, aux_task5.loss_bbox: 0.4773, loss: 36.9748, grad_norm: 123.7468
2025-05-06 09:29:03,855 - mmdet - INFO - Epoch [1][700/773]	lr: 1.601e-05, eta: 4:33:46, time: 1.101, data_time: 0.005, memory: 5910, loss_cls: 1.1306, loss_bbox: 1.7057, d0.loss_cls: 1.1267, d0.loss_bbox: 1.7342, d1.loss_cls: 1.1299, d1.loss_bbox: 1.7102, d2.loss_cls: 1.1291, d2.loss_bbox: 1.7048, d3.loss_cls: 1.1307, d3.loss_bbox: 1.7068, d4.loss_cls: 1.1293, d4.loss_bbox: 1.7059, aux_task0.loss_heatmap: 2.4780, aux_task0.loss_bbox: 0.4644, aux_task1.loss_heatmap: 2.3718, aux_task1.loss_bbox: 0.5042, aux_task2.loss_heatmap: 2.2345, aux_task2.loss_bbox: 0.4876, aux_task3.loss_heatmap: 2.7986, aux_task3.loss_bbox: 0.4117, aux_task4.loss_heatmap: 1.7630, aux_task4.loss_bbox: 0.4236, aux_task5.loss_heatmap: 2.1253, aux_task5.loss_bbox: 0.4689, loss: 33.5756, grad_norm: 96.5847
2025-05-06 09:29:57,846 - mmdet - INFO - Epoch [1][750/773]	lr: 1.652e-05, eta: 4:32:18, time: 1.080, data_time: 0.005, memory: 5910, loss_cls: 1.1320, loss_bbox: 1.7317, d0.loss_cls: 1.1327, d0.loss_bbox: 1.7552, d1.loss_cls: 1.1344, d1.loss_bbox: 1.7313, d2.loss_cls: 1.1323, d2.loss_bbox: 1.7298, d3.loss_cls: 1.1309, d3.loss_bbox: 1.7318, d4.loss_cls: 1.1288, d4.loss_bbox: 1.7300, aux_task0.loss_heatmap: 2.0402, aux_task0.loss_bbox: 0.4607, aux_task1.loss_heatmap: 2.0803, aux_task1.loss_bbox: 0.5048, aux_task2.loss_heatmap: 2.0454, aux_task2.loss_bbox: 0.5117, aux_task3.loss_heatmap: 2.3013, aux_task3.loss_bbox: 0.3958, aux_task4.loss_heatmap: 1.6639, aux_task4.loss_bbox: 0.4356, aux_task5.loss_heatmap: 1.9954, aux_task5.loss_bbox: 0.4768, loss: 32.1127, grad_norm: 74.6231
2025-05-06 09:31:00,958 - mmdet - INFO - Saving checkpoint at 1 epochs
2025-05-06 09:32:16,234 - mmdet - INFO - Epoch [2][50/773]	lr: 1.733e-05, eta: 4:28:56, time: 1.486, data_time: 0.416, memory: 5910, loss_cls: 1.1203, loss_bbox: 1.7114, d0.loss_cls: 1.1313, d0.loss_bbox: 1.7462, d1.loss_cls: 1.1322, d1.loss_bbox: 1.7261, d2.loss_cls: 1.1276, d2.loss_bbox: 1.7207, d3.loss_cls: 1.1243, d3.loss_bbox: 1.7183, d4.loss_cls: 1.1211, d4.loss_bbox: 1.7166, aux_task0.loss_heatmap: 1.7802, aux_task0.loss_bbox: 0.4561, aux_task1.loss_heatmap: 1.7690, aux_task1.loss_bbox: 0.4924, aux_task2.loss_heatmap: 1.8141, aux_task2.loss_bbox: 0.5014, aux_task3.loss_heatmap: 1.9492, aux_task3.loss_bbox: 0.4087, aux_task4.loss_heatmap: 1.5399, aux_task4.loss_bbox: 0.4305, aux_task5.loss_heatmap: 1.7388, aux_task5.loss_bbox: 0.4633, loss: 30.4396, grad_norm: 52.3033
2025-05-06 09:33:10,190 - mmdet - INFO - Epoch [2][100/773]	lr: 1.793e-05, eta: 4:27:42, time: 1.079, data_time: 0.004, memory: 5910, loss_cls: 1.0947, loss_bbox: 1.6845, d0.loss_cls: 1.1176, d0.loss_bbox: 1.7311, d1.loss_cls: 1.1154, d1.loss_bbox: 1.7078, d2.loss_cls: 1.1086, d2.loss_bbox: 1.6977, d3.loss_cls: 1.1015, d3.loss_bbox: 1.6894, d4.loss_cls: 1.0991, d4.loss_bbox: 1.6849, aux_task0.loss_heatmap: 1.6503, aux_task0.loss_bbox: 0.4546, aux_task1.loss_heatmap: 1.6989, aux_task1.loss_bbox: 0.4789, aux_task2.loss_heatmap: 1.7837, aux_task2.loss_bbox: 0.5068, aux_task3.loss_heatmap: 1.7482, aux_task3.loss_bbox: 0.3987, aux_task4.loss_heatmap: 1.4479, aux_task4.loss_bbox: 0.4246, aux_task5.loss_heatmap: 1.6464, aux_task5.loss_bbox: 0.4635, loss: 29.5347, grad_norm: 54.7606
2025-05-06 09:34:03,234 - mmdet - INFO - Epoch [2][150/773]	lr: 1.856e-05, eta: 4:26:15, time: 1.061, data_time: 0.005, memory: 5910, loss_cls: 1.0678, loss_bbox: 1.6803, d0.loss_cls: 1.1224, d0.loss_bbox: 1.7249, d1.loss_cls: 1.1127, d1.loss_bbox: 1.6948, d2.loss_cls: 1.0927, d2.loss_bbox: 1.6893, d3.loss_cls: 1.0769, d3.loss_bbox: 1.6883, d4.loss_cls: 1.0736, d4.loss_bbox: 1.6828, aux_task0.loss_heatmap: 1.6102, aux_task0.loss_bbox: 0.4715, aux_task1.loss_heatmap: 1.6585, aux_task1.loss_bbox: 0.4800, aux_task2.loss_heatmap: 1.7689, aux_task2.loss_bbox: 0.4931, aux_task3.loss_heatmap: 1.6292, aux_task3.loss_bbox: 0.4058, aux_task4.loss_heatmap: 1.3624, aux_task4.loss_bbox: 0.4287, aux_task5.loss_heatmap: 1.5668, aux_task5.loss_bbox: 0.4673, loss: 29.0490, grad_norm: 47.9160
2025-05-06 09:35:02,072 - mmdet - INFO - Epoch [2][200/773]	lr: 1.922e-05, eta: 4:26:18, time: 1.177, data_time: 0.005, memory: 5910, loss_cls: 1.0236, loss_bbox: 1.6737, d0.loss_cls: 1.1071, d0.loss_bbox: 1.7255, d1.loss_cls: 1.0837, d1.loss_bbox: 1.6951, d2.loss_cls: 1.0497, d2.loss_bbox: 1.6852, d3.loss_cls: 1.0319, d3.loss_bbox: 1.6792, d4.loss_cls: 1.0309, d4.loss_bbox: 1.6764, aux_task0.loss_heatmap: 1.5367, aux_task0.loss_bbox: 0.4527, aux_task1.loss_heatmap: 1.6121, aux_task1.loss_bbox: 0.4594, aux_task2.loss_heatmap: 1.7823, aux_task2.loss_bbox: 0.4941, aux_task3.loss_heatmap: 1.5527, aux_task3.loss_bbox: 0.4123, aux_task4.loss_heatmap: 1.2648, aux_task4.loss_bbox: 0.4158, aux_task5.loss_heatmap: 1.4950, aux_task5.loss_bbox: 0.4535, loss: 28.3936, grad_norm: 44.9205
2025-05-06 09:36:26,861 - mmdet - INFO - Epoch [2][250/773]	lr: 1.991e-05, eta: 4:32:21, time: 1.696, data_time: 0.005, memory: 5910, loss_cls: 0.9874, loss_bbox: 1.6340, d0.loss_cls: 1.0948, d0.loss_bbox: 1.7145, d1.loss_cls: 1.0452, d1.loss_bbox: 1.6803, d2.loss_cls: 1.0055, d2.loss_bbox: 1.6561, d3.loss_cls: 0.9883, d3.loss_bbox: 1.6448, d4.loss_cls: 0.9915, d4.loss_bbox: 1.6388, aux_task0.loss_heatmap: 1.4485, aux_task0.loss_bbox: 0.4504, aux_task1.loss_heatmap: 1.5807, aux_task1.loss_bbox: 0.4772, aux_task2.loss_heatmap: 1.7598, aux_task2.loss_bbox: 0.4773, aux_task3.loss_heatmap: 1.4987, aux_task3.loss_bbox: 0.3991, aux_task4.loss_heatmap: 1.2168, aux_task4.loss_bbox: 0.4241, aux_task5.loss_heatmap: 1.4373, aux_task5.loss_bbox: 0.4516, loss: 27.7027, grad_norm: 44.2908
2025-05-06 09:38:05,765 - mmdet - INFO - Epoch [2][300/773]	lr: 2.064e-05, eta: 4:40:52, time: 1.978, data_time: 0.005, memory: 5910, loss_cls: 0.9830, loss_bbox: 1.6474, d0.loss_cls: 1.0911, d0.loss_bbox: 1.7300, d1.loss_cls: 1.0250, d1.loss_bbox: 1.6877, d2.loss_cls: 0.9903, d2.loss_bbox: 1.6672, d3.loss_cls: 0.9820, d3.loss_bbox: 1.6547, d4.loss_cls: 0.9828, d4.loss_bbox: 1.6516, aux_task0.loss_heatmap: 1.4482, aux_task0.loss_bbox: 0.4488, aux_task1.loss_heatmap: 1.5581, aux_task1.loss_bbox: 0.4609, aux_task2.loss_heatmap: 1.7241, aux_task2.loss_bbox: 0.4795, aux_task3.loss_heatmap: 1.4701, aux_task3.loss_bbox: 0.3841, aux_task4.loss_heatmap: 1.1318, aux_task4.loss_bbox: 0.4234, aux_task5.loss_heatmap: 1.4013, aux_task5.loss_bbox: 0.4554, loss: 27.4782, grad_norm: 43.5108
2025-05-06 09:38:59,542 - mmdet - INFO - Epoch [2][350/773]	lr: 2.139e-05, eta: 4:38:51, time: 1.075, data_time: 0.005, memory: 5910, loss_cls: 0.9819, loss_bbox: 1.6161, d0.loss_cls: 1.0771, d0.loss_bbox: 1.7271, d1.loss_cls: 1.0027, d1.loss_bbox: 1.6753, d2.loss_cls: 0.9773, d2.loss_bbox: 1.6424, d3.loss_cls: 0.9727, d3.loss_bbox: 1.6275, d4.loss_cls: 0.9770, d4.loss_bbox: 1.6244, aux_task0.loss_heatmap: 1.4245, aux_task0.loss_bbox: 0.4414, aux_task1.loss_heatmap: 1.5330, aux_task1.loss_bbox: 0.4594, aux_task2.loss_heatmap: 1.7428, aux_task2.loss_bbox: 0.4855, aux_task3.loss_heatmap: 1.4410, aux_task3.loss_bbox: 0.3874, aux_task4.loss_heatmap: 1.1054, aux_task4.loss_bbox: 0.4133, aux_task5.loss_heatmap: 1.3655, aux_task5.loss_bbox: 0.4384, loss: 27.1390, grad_norm: 44.6347
2025-05-06 09:40:04,163 - mmdet - INFO - Epoch [2][400/773]	lr: 2.218e-05, eta: 4:39:10, time: 1.293, data_time: 0.005, memory: 5910, loss_cls: 0.9700, loss_bbox: 1.5986, d0.loss_cls: 1.0667, d0.loss_bbox: 1.7498, d1.loss_cls: 0.9847, d1.loss_bbox: 1.6743, d2.loss_cls: 0.9642, d2.loss_bbox: 1.6290, d3.loss_cls: 0.9638, d3.loss_bbox: 1.6129, d4.loss_cls: 0.9666, d4.loss_bbox: 1.6066, aux_task0.loss_heatmap: 1.3852, aux_task0.loss_bbox: 0.4287, aux_task1.loss_heatmap: 1.5583, aux_task1.loss_bbox: 0.4508, aux_task2.loss_heatmap: 1.7483, aux_task2.loss_bbox: 0.4798, aux_task3.loss_heatmap: 1.4373, aux_task3.loss_bbox: 0.3918, aux_task4.loss_heatmap: 1.0662, aux_task4.loss_bbox: 0.4069, aux_task5.loss_heatmap: 1.3341, aux_task5.loss_bbox: 0.4345, loss: 26.9092, grad_norm: 44.6297
2025-05-06 09:40:56,182 - mmdet - INFO - Epoch [2][450/773]	lr: 2.300e-05, eta: 4:36:54, time: 1.041, data_time: 0.005, memory: 5910, loss_cls: 0.9677, loss_bbox: 1.5413, d0.loss_cls: 1.0596, d0.loss_bbox: 1.7251, d1.loss_cls: 0.9721, d1.loss_bbox: 1.6328, d2.loss_cls: 0.9614, d2.loss_bbox: 1.5792, d3.loss_cls: 0.9599, d3.loss_bbox: 1.5627, d4.loss_cls: 0.9635, d4.loss_bbox: 1.5522, aux_task0.loss_heatmap: 1.3519, aux_task0.loss_bbox: 0.4223, aux_task1.loss_heatmap: 1.4851, aux_task1.loss_bbox: 0.4383, aux_task2.loss_heatmap: 1.7221, aux_task2.loss_bbox: 0.4538, aux_task3.loss_heatmap: 1.4107, aux_task3.loss_bbox: 0.3786, aux_task4.loss_heatmap: 1.0495, aux_task4.loss_bbox: 0.3883, aux_task5.loss_heatmap: 1.3011, aux_task5.loss_bbox: 0.4213, loss: 26.3005, grad_norm: 46.2053
2025-05-06 09:41:48,638 - mmdet - INFO - Epoch [2][500/773]	lr: 2.384e-05, eta: 4:34:50, time: 1.049, data_time: 0.004, memory: 5910, loss_cls: 0.9667, loss_bbox: 1.5032, d0.loss_cls: 1.0540, d0.loss_bbox: 1.7096, d1.loss_cls: 0.9669, d1.loss_bbox: 1.6086, d2.loss_cls: 0.9592, d2.loss_bbox: 1.5438, d3.loss_cls: 0.9590, d3.loss_bbox: 1.5212, d4.loss_cls: 0.9608, d4.loss_bbox: 1.5126, aux_task0.loss_heatmap: 1.3514, aux_task0.loss_bbox: 0.4043, aux_task1.loss_heatmap: 1.4934, aux_task1.loss_bbox: 0.4338, aux_task2.loss_heatmap: 1.7092, aux_task2.loss_bbox: 0.4581, aux_task3.loss_heatmap: 1.3867, aux_task3.loss_bbox: 0.3779, aux_task4.loss_heatmap: 1.0141, aux_task4.loss_bbox: 0.3858, aux_task5.loss_heatmap: 1.2871, aux_task5.loss_bbox: 0.4127, loss: 25.9801, grad_norm: 45.7720
2025-05-06 09:43:10,347 - mmdet - INFO - Epoch [2][550/773]	lr: 2.472e-05, eta: 4:38:04, time: 1.634, data_time: 0.004, memory: 5910, loss_cls: 0.9635, loss_bbox: 1.4827, d0.loss_cls: 1.0406, d0.loss_bbox: 1.7252, d1.loss_cls: 0.9583, d1.loss_bbox: 1.5972, d2.loss_cls: 0.9606, d2.loss_bbox: 1.5299, d3.loss_cls: 0.9566, d3.loss_bbox: 1.5117, d4.loss_cls: 0.9590, d4.loss_bbox: 1.4971, aux_task0.loss_heatmap: 1.3431, aux_task0.loss_bbox: 0.4100, aux_task1.loss_heatmap: 1.4569, aux_task1.loss_bbox: 0.4228, aux_task2.loss_heatmap: 1.6891, aux_task2.loss_bbox: 0.4710, aux_task3.loss_heatmap: 1.3725, aux_task3.loss_bbox: 0.3531, aux_task4.loss_heatmap: 0.9562, aux_task4.loss_bbox: 0.3629, aux_task5.loss_heatmap: 1.2379, aux_task5.loss_bbox: 0.4020, loss: 25.6600, grad_norm: 44.0966
2025-05-06 09:44:02,975 - mmdet - INFO - Epoch [2][600/773]	lr: 2.562e-05, eta: 4:36:00, time: 1.053, data_time: 0.005, memory: 5910, loss_cls: 0.9559, loss_bbox: 1.4750, d0.loss_cls: 1.0347, d0.loss_bbox: 1.7158, d1.loss_cls: 0.9527, d1.loss_bbox: 1.5908, d2.loss_cls: 0.9518, d2.loss_bbox: 1.5234, d3.loss_cls: 0.9534, d3.loss_bbox: 1.5006, d4.loss_cls: 0.9517, d4.loss_bbox: 1.4874, aux_task0.loss_heatmap: 1.3203, aux_task0.loss_bbox: 0.4107, aux_task1.loss_heatmap: 1.4559, aux_task1.loss_bbox: 0.4286, aux_task2.loss_heatmap: 1.7352, aux_task2.loss_bbox: 0.4547, aux_task3.loss_heatmap: 1.3635, aux_task3.loss_bbox: 0.3700, aux_task4.loss_heatmap: 0.9380, aux_task4.loss_bbox: 0.3661, aux_task5.loss_heatmap: 1.2289, aux_task5.loss_bbox: 0.3966, loss: 25.5619, grad_norm: 46.7346
2025-05-06 09:44:56,040 - mmdet - INFO - Epoch [2][650/773]	lr: 2.655e-05, eta: 4:34:05, time: 1.061, data_time: 0.004, memory: 5910, loss_cls: 0.9392, loss_bbox: 1.4410, d0.loss_cls: 1.0146, d0.loss_bbox: 1.6869, d1.loss_cls: 0.9387, d1.loss_bbox: 1.5619, d2.loss_cls: 0.9371, d2.loss_bbox: 1.4934, d3.loss_cls: 0.9385, d3.loss_bbox: 1.4691, d4.loss_cls: 0.9360, d4.loss_bbox: 1.4564, aux_task0.loss_heatmap: 1.2618, aux_task0.loss_bbox: 0.3910, aux_task1.loss_heatmap: 1.4511, aux_task1.loss_bbox: 0.4139, aux_task2.loss_heatmap: 1.7003, aux_task2.loss_bbox: 0.4508, aux_task3.loss_heatmap: 1.3102, aux_task3.loss_bbox: 0.3440, aux_task4.loss_heatmap: 0.9421, aux_task4.loss_bbox: 0.3647, aux_task5.loss_heatmap: 1.2148, aux_task5.loss_bbox: 0.3945, loss: 25.0522, grad_norm: 45.0897
2025-05-06 09:45:48,479 - mmdet - INFO - Epoch [2][700/773]	lr: 2.751e-05, eta: 4:32:08, time: 1.049, data_time: 0.004, memory: 5910, loss_cls: 0.9404, loss_bbox: 1.3896, d0.loss_cls: 1.0120, d0.loss_bbox: 1.6762, d1.loss_cls: 0.9441, d1.loss_bbox: 1.5170, d2.loss_cls: 0.9414, d2.loss_bbox: 1.4534, d3.loss_cls: 0.9382, d3.loss_bbox: 1.4255, d4.loss_cls: 0.9365, d4.loss_bbox: 1.4094, aux_task0.loss_heatmap: 1.2538, aux_task0.loss_bbox: 0.3892, aux_task1.loss_heatmap: 1.3984, aux_task1.loss_bbox: 0.4161, aux_task2.loss_heatmap: 1.7198, aux_task2.loss_bbox: 0.4404, aux_task3.loss_heatmap: 1.3195, aux_task3.loss_bbox: 0.3524, aux_task4.loss_heatmap: 0.9449, aux_task4.loss_bbox: 0.3596, aux_task5.loss_heatmap: 1.2415, aux_task5.loss_bbox: 0.3917, loss: 24.8112, grad_norm: 44.8451
2025-05-06 09:46:41,757 - mmdet - INFO - Epoch [2][750/773]	lr: 2.849e-05, eta: 4:30:23, time: 1.065, data_time: 0.004, memory: 5910, loss_cls: 0.9390, loss_bbox: 1.3938, d0.loss_cls: 1.0031, d0.loss_bbox: 1.6986, d1.loss_cls: 0.9404, d1.loss_bbox: 1.5165, d2.loss_cls: 0.9362, d2.loss_bbox: 1.4639, d3.loss_cls: 0.9359, d3.loss_bbox: 1.4327, d4.loss_cls: 0.9357, d4.loss_bbox: 1.4138, aux_task0.loss_heatmap: 1.2790, aux_task0.loss_bbox: 0.4154, aux_task1.loss_heatmap: 1.4010, aux_task1.loss_bbox: 0.4193, aux_task2.loss_heatmap: 1.6861, aux_task2.loss_bbox: 0.4522, aux_task3.loss_heatmap: 1.2956, aux_task3.loss_bbox: 0.3324, aux_task4.loss_heatmap: 0.9168, aux_task4.loss_bbox: 0.3681, aux_task5.loss_heatmap: 1.2082, aux_task5.loss_bbox: 0.3926, loss: 24.7763, grad_norm: 46.9754
2025-05-06 09:49:31,216 - mmdet - INFO - Saving checkpoint at 2 epochs
2025-05-06 09:50:37,757 - mmdet - INFO - Epoch [3][50/773]	lr: 2.998e-05, eta: 4:26:09, time: 1.312, data_time: 0.185, memory: 5910, loss_cls: 0.9321, loss_bbox: 1.3671, d0.loss_cls: 0.9873, d0.loss_bbox: 1.6586, d1.loss_cls: 0.9343, d1.loss_bbox: 1.4767, d2.loss_cls: 0.9291, d2.loss_bbox: 1.4249, d3.loss_cls: 0.9281, d3.loss_bbox: 1.3978, d4.loss_cls: 0.9307, d4.loss_bbox: 1.3855, aux_task0.loss_heatmap: 1.2351, aux_task0.loss_bbox: 0.3925, aux_task1.loss_heatmap: 1.4254, aux_task1.loss_bbox: 0.4090, aux_task2.loss_heatmap: 1.7055, aux_task2.loss_bbox: 0.4557, aux_task3.loss_heatmap: 1.3237, aux_task3.loss_bbox: 0.3466, aux_task4.loss_heatmap: 0.9138, aux_task4.loss_bbox: 0.3626, aux_task5.loss_heatmap: 1.1426, aux_task5.loss_bbox: 0.3836, loss: 24.4485, grad_norm: 46.4948
2025-05-06 09:51:30,237 - mmdet - INFO - Epoch [3][100/773]	lr: 3.103e-05, eta: 4:24:28, time: 1.049, data_time: 0.004, memory: 5910, loss_cls: 0.9238, loss_bbox: 1.3382, d0.loss_cls: 0.9781, d0.loss_bbox: 1.6463, d1.loss_cls: 0.9209, d1.loss_bbox: 1.4434, d2.loss_cls: 0.9161, d2.loss_bbox: 1.3883, d3.loss_cls: 0.9189, d3.loss_bbox: 1.3617, d4.loss_cls: 0.9205, d4.loss_bbox: 1.3487, aux_task0.loss_heatmap: 1.1962, aux_task0.loss_bbox: 0.3901, aux_task1.loss_heatmap: 1.4255, aux_task1.loss_bbox: 0.4162, aux_task2.loss_heatmap: 1.6790, aux_task2.loss_bbox: 0.4542, aux_task3.loss_heatmap: 1.2762, aux_task3.loss_bbox: 0.3503, aux_task4.loss_heatmap: 0.8817, aux_task4.loss_bbox: 0.3665, aux_task5.loss_heatmap: 1.1239, aux_task5.loss_bbox: 0.3831, loss: 24.0477, grad_norm: 45.7067
2025-05-06 09:52:23,373 - mmdet - INFO - Epoch [3][150/773]	lr: 3.210e-05, eta: 4:22:56, time: 1.063, data_time: 0.005, memory: 5910, loss_cls: 0.9338, loss_bbox: 1.3437, d0.loss_cls: 0.9743, d0.loss_bbox: 1.6458, d1.loss_cls: 0.9310, d1.loss_bbox: 1.4503, d2.loss_cls: 0.9263, d2.loss_bbox: 1.3962, d3.loss_cls: 0.9283, d3.loss_bbox: 1.3760, d4.loss_cls: 0.9286, d4.loss_bbox: 1.3586, aux_task0.loss_heatmap: 1.2084, aux_task0.loss_bbox: 0.3816, aux_task1.loss_heatmap: 1.4022, aux_task1.loss_bbox: 0.4138, aux_task2.loss_heatmap: 1.6535, aux_task2.loss_bbox: 0.4636, aux_task3.loss_heatmap: 1.2571, aux_task3.loss_bbox: 0.3443, aux_task4.loss_heatmap: 0.8917, aux_task4.loss_bbox: 0.3609, aux_task5.loss_heatmap: 1.1375, aux_task5.loss_bbox: 0.3837, loss: 24.0910, grad_norm: 46.8571
2025-05-06 09:53:19,958 - mmdet - INFO - Epoch [3][200/773]	lr: 3.319e-05, eta: 4:21:53, time: 1.132, data_time: 0.005, memory: 5910, loss_cls: 0.9246, loss_bbox: 1.3050, d0.loss_cls: 0.9632, d0.loss_bbox: 1.6120, d1.loss_cls: 0.9232, d1.loss_bbox: 1.4099, d2.loss_cls: 0.9171, d2.loss_bbox: 1.3578, d3.loss_cls: 0.9201, d3.loss_bbox: 1.3325, d4.loss_cls: 0.9231, d4.loss_bbox: 1.3180, aux_task0.loss_heatmap: 1.1780, aux_task0.loss_bbox: 0.3792, aux_task1.loss_heatmap: 1.3875, aux_task1.loss_bbox: 0.4017, aux_task2.loss_heatmap: 1.6773, aux_task2.loss_bbox: 0.4446, aux_task3.loss_heatmap: 1.2501, aux_task3.loss_bbox: 0.3345, aux_task4.loss_heatmap: 0.8824, aux_task4.loss_bbox: 0.3617, aux_task5.loss_heatmap: 1.1354, aux_task5.loss_bbox: 0.3781, loss: 23.7171, grad_norm: 45.6217
2025-05-06 09:54:15,233 - mmdet - INFO - Epoch [3][250/773]	lr: 3.431e-05, eta: 4:20:40, time: 1.104, data_time: 0.004, memory: 5910, loss_cls: 0.9160, loss_bbox: 1.2918, d0.loss_cls: 0.9607, d0.loss_bbox: 1.5935, d1.loss_cls: 0.9171, d1.loss_bbox: 1.3990, d2.loss_cls: 0.9120, d2.loss_bbox: 1.3444, d3.loss_cls: 0.9150, d3.loss_bbox: 1.3205, d4.loss_cls: 0.9161, d4.loss_bbox: 1.3030, aux_task0.loss_heatmap: 1.1767, aux_task0.loss_bbox: 0.3910, aux_task1.loss_heatmap: 1.3664, aux_task1.loss_bbox: 0.4026, aux_task2.loss_heatmap: 1.6646, aux_task2.loss_bbox: 0.4390, aux_task3.loss_heatmap: 1.2061, aux_task3.loss_bbox: 0.3365, aux_task4.loss_heatmap: 0.8921, aux_task4.loss_bbox: 0.3598, aux_task5.loss_heatmap: 1.0784, aux_task5.loss_bbox: 0.3736, loss: 23.4758, grad_norm: 46.0427
2025-05-06 09:55:10,931 - mmdet - INFO - Epoch [3][300/773]	lr: 3.545e-05, eta: 4:19:32, time: 1.115, data_time: 0.005, memory: 5910, loss_cls: 0.9032, loss_bbox: 1.2795, d0.loss_cls: 0.9375, d0.loss_bbox: 1.5792, d1.loss_cls: 0.8993, d1.loss_bbox: 1.3824, d2.loss_cls: 0.8959, d2.loss_bbox: 1.3272, d3.loss_cls: 0.8989, d3.loss_bbox: 1.3054, d4.loss_cls: 0.9013, d4.loss_bbox: 1.2882, aux_task0.loss_heatmap: 1.1594, aux_task0.loss_bbox: 0.3694, aux_task1.loss_heatmap: 1.3882, aux_task1.loss_bbox: 0.3958, aux_task2.loss_heatmap: 1.6624, aux_task2.loss_bbox: 0.4313, aux_task3.loss_heatmap: 1.2781, aux_task3.loss_bbox: 0.3336, aux_task4.loss_heatmap: 0.8421, aux_task4.loss_bbox: 0.3573, aux_task5.loss_heatmap: 1.0952, aux_task5.loss_bbox: 0.3682, loss: 23.2792, grad_norm: 45.6460
2025-05-06 09:56:06,363 - mmdet - INFO - Epoch [3][350/773]	lr: 3.661e-05, eta: 4:18:22, time: 1.108, data_time: 0.004, memory: 5910, loss_cls: 0.9014, loss_bbox: 1.2865, d0.loss_cls: 0.9375, d0.loss_bbox: 1.5775, d1.loss_cls: 0.8991, d1.loss_bbox: 1.3867, d2.loss_cls: 0.8941, d2.loss_bbox: 1.3361, d3.loss_cls: 0.8960, d3.loss_bbox: 1.3148, d4.loss_cls: 0.8984, d4.loss_bbox: 1.2980, aux_task0.loss_heatmap: 1.1812, aux_task0.loss_bbox: 0.3805, aux_task1.loss_heatmap: 1.3887, aux_task1.loss_bbox: 0.4073, aux_task2.loss_heatmap: 1.6689, aux_task2.loss_bbox: 0.4513, aux_task3.loss_heatmap: 1.2231, aux_task3.loss_bbox: 0.3409, aux_task4.loss_heatmap: 0.8413, aux_task4.loss_bbox: 0.3562, aux_task5.loss_heatmap: 1.0723, aux_task5.loss_bbox: 0.3742, loss: 23.3120, grad_norm: 44.8447
2025-05-06 09:57:02,726 - mmdet - INFO - Epoch [3][400/773]	lr: 3.780e-05, eta: 4:17:19, time: 1.127, data_time: 0.005, memory: 5910, loss_cls: 0.8934, loss_bbox: 1.2926, d0.loss_cls: 0.9256, d0.loss_bbox: 1.5685, d1.loss_cls: 0.8911, d1.loss_bbox: 1.3900, d2.loss_cls: 0.8836, d2.loss_bbox: 1.3343, d3.loss_cls: 0.8860, d3.loss_bbox: 1.3141, d4.loss_cls: 0.8884, d4.loss_bbox: 1.2989, aux_task0.loss_heatmap: 1.1623, aux_task0.loss_bbox: 0.3718, aux_task1.loss_heatmap: 1.4035, aux_task1.loss_bbox: 0.4011, aux_task2.loss_heatmap: 1.6593, aux_task2.loss_bbox: 0.4460, aux_task3.loss_heatmap: 1.2360, aux_task3.loss_bbox: 0.3579, aux_task4.loss_heatmap: 0.8258, aux_task4.loss_bbox: 0.3629, aux_task5.loss_heatmap: 1.0576, aux_task5.loss_bbox: 0.3686, loss: 23.2194, grad_norm: 46.4225
2025-05-06 09:58:32,790 - mmdet - INFO - Epoch [3][450/773]	lr: 3.900e-05, eta: 4:20:05, time: 1.802, data_time: 0.505, memory: 5910, loss_cls: 0.9004, loss_bbox: 1.2632, d0.loss_cls: 0.9275, d0.loss_bbox: 1.5459, d1.loss_cls: 0.8979, d1.loss_bbox: 1.3620, d2.loss_cls: 0.8954, d2.loss_bbox: 1.3091, d3.loss_cls: 0.8964, d3.loss_bbox: 1.2878, d4.loss_cls: 0.8996, d4.loss_bbox: 1.2732, aux_task0.loss_heatmap: 1.1553, aux_task0.loss_bbox: 0.3890, aux_task1.loss_heatmap: 1.3163, aux_task1.loss_bbox: 0.4018, aux_task2.loss_heatmap: 1.6587, aux_task2.loss_bbox: 0.4234, aux_task3.loss_heatmap: 1.2304, aux_task3.loss_bbox: 0.3510, aux_task4.loss_heatmap: 0.8416, aux_task4.loss_bbox: 0.3574, aux_task5.loss_heatmap: 1.0358, aux_task5.loss_bbox: 0.3763, loss: 22.9954, grad_norm: 46.9395
2025-05-06 09:59:25,264 - mmdet - INFO - Epoch [3][500/773]	lr: 4.022e-05, eta: 4:18:31, time: 1.049, data_time: 0.004, memory: 5910, loss_cls: 0.8912, loss_bbox: 1.2488, d0.loss_cls: 0.9196, d0.loss_bbox: 1.5370, d1.loss_cls: 0.8975, d1.loss_bbox: 1.3431, d2.loss_cls: 0.8889, d2.loss_bbox: 1.2909, d3.loss_cls: 0.8872, d3.loss_bbox: 1.2720, d4.loss_cls: 0.8900, d4.loss_bbox: 1.2578, aux_task0.loss_heatmap: 1.1549, aux_task0.loss_bbox: 0.3835, aux_task1.loss_heatmap: 1.3442, aux_task1.loss_bbox: 0.4060, aux_task2.loss_heatmap: 1.6410, aux_task2.loss_bbox: 0.4463, aux_task3.loss_heatmap: 1.2082, aux_task3.loss_bbox: 0.3495, aux_task4.loss_heatmap: 0.8475, aux_task4.loss_bbox: 0.3584, aux_task5.loss_heatmap: 1.0149, aux_task5.loss_bbox: 0.3658, loss: 22.8441, grad_norm: 46.4600
2025-05-06 10:00:18,810 - mmdet - INFO - Epoch [3][550/773]	lr: 4.146e-05, eta: 4:17:06, time: 1.070, data_time: 0.004, memory: 5910, loss_cls: 0.8761, loss_bbox: 1.2446, d0.loss_cls: 0.8977, d0.loss_bbox: 1.5114, d1.loss_cls: 0.8717, d1.loss_bbox: 1.3299, d2.loss_cls: 0.8675, d2.loss_bbox: 1.2811, d3.loss_cls: 0.8713, d3.loss_bbox: 1.2642, d4.loss_cls: 0.8728, d4.loss_bbox: 1.2520, aux_task0.loss_heatmap: 1.1696, aux_task0.loss_bbox: 0.3736, aux_task1.loss_heatmap: 1.3256, aux_task1.loss_bbox: 0.3938, aux_task2.loss_heatmap: 1.5954, aux_task2.loss_bbox: 0.4521, aux_task3.loss_heatmap: 1.1591, aux_task3.loss_bbox: 0.3390, aux_task4.loss_heatmap: 0.8190, aux_task4.loss_bbox: 0.3412, aux_task5.loss_heatmap: 0.9979, aux_task5.loss_bbox: 0.3693, loss: 22.4759, grad_norm: 45.6118
2025-05-06 10:01:11,840 - mmdet - INFO - Epoch [3][600/773]	lr: 4.272e-05, eta: 4:15:39, time: 1.061, data_time: 0.005, memory: 5910, loss_cls: 0.8608, loss_bbox: 1.2404, d0.loss_cls: 0.8961, d0.loss_bbox: 1.5129, d1.loss_cls: 0.8684, d1.loss_bbox: 1.3299, d2.loss_cls: 0.8594, d2.loss_bbox: 1.2813, d3.loss_cls: 0.8601, d3.loss_bbox: 1.2592, d4.loss_cls: 0.8609, d4.loss_bbox: 1.2456, aux_task0.loss_heatmap: 1.1004, aux_task0.loss_bbox: 0.3580, aux_task1.loss_heatmap: 1.3101, aux_task1.loss_bbox: 0.3999, aux_task2.loss_heatmap: 1.6105, aux_task2.loss_bbox: 0.4485, aux_task3.loss_heatmap: 1.1957, aux_task3.loss_bbox: 0.3431, aux_task4.loss_heatmap: 0.7898, aux_task4.loss_bbox: 0.3527, aux_task5.loss_heatmap: 1.0029, aux_task5.loss_bbox: 0.3707, loss: 22.3574, grad_norm: 48.0830
2025-05-06 10:02:05,015 - mmdet - INFO - Epoch [3][650/773]	lr: 4.400e-05, eta: 4:14:15, time: 1.064, data_time: 0.004, memory: 5910, loss_cls: 0.8768, loss_bbox: 1.2318, d0.loss_cls: 0.9005, d0.loss_bbox: 1.4905, d1.loss_cls: 0.8797, d1.loss_bbox: 1.3106, d2.loss_cls: 0.8758, d2.loss_bbox: 1.2643, d3.loss_cls: 0.8753, d3.loss_bbox: 1.2468, d4.loss_cls: 0.8769, d4.loss_bbox: 1.2399, aux_task0.loss_heatmap: 1.1072, aux_task0.loss_bbox: 0.3644, aux_task1.loss_heatmap: 1.2934, aux_task1.loss_bbox: 0.3875, aux_task2.loss_heatmap: 1.6003, aux_task2.loss_bbox: 0.4306, aux_task3.loss_heatmap: 1.1453, aux_task3.loss_bbox: 0.3349, aux_task4.loss_heatmap: 0.8091, aux_task4.loss_bbox: 0.3420, aux_task5.loss_heatmap: 1.0094, aux_task5.loss_bbox: 0.3729, loss: 22.2659, grad_norm: 52.2940
2025-05-06 10:02:57,188 - mmdet - INFO - Epoch [3][700/773]	lr: 4.529e-05, eta: 4:12:46, time: 1.043, data_time: 0.004, memory: 5910, loss_cls: 0.8626, loss_bbox: 1.2010, d0.loss_cls: 0.8911, d0.loss_bbox: 1.4683, d1.loss_cls: 0.8692, d1.loss_bbox: 1.2936, d2.loss_cls: 0.8642, d2.loss_bbox: 1.2447, d3.loss_cls: 0.8597, d3.loss_bbox: 1.2235, d4.loss_cls: 0.8581, d4.loss_bbox: 1.2113, aux_task0.loss_heatmap: 1.1535, aux_task0.loss_bbox: 0.3629, aux_task1.loss_heatmap: 1.2585, aux_task1.loss_bbox: 0.3824, aux_task2.loss_heatmap: 1.5863, aux_task2.loss_bbox: 0.4118, aux_task3.loss_heatmap: 1.1883, aux_task3.loss_bbox: 0.3328, aux_task4.loss_heatmap: 0.8110, aux_task4.loss_bbox: 0.3420, aux_task5.loss_heatmap: 0.9956, aux_task5.loss_bbox: 0.3688, loss: 22.0412, grad_norm: 54.8373
2025-05-06 10:03:53,602 - mmdet - INFO - Epoch [3][750/773]	lr: 4.659e-05, eta: 4:11:43, time: 1.128, data_time: 0.076, memory: 5910, loss_cls: 0.8598, loss_bbox: 1.2164, d0.loss_cls: 0.8849, d0.loss_bbox: 1.4827, d1.loss_cls: 0.8665, d1.loss_bbox: 1.3100, d2.loss_cls: 0.8611, d2.loss_bbox: 1.2571, d3.loss_cls: 0.8585, d3.loss_bbox: 1.2353, d4.loss_cls: 0.8578, d4.loss_bbox: 1.2235, aux_task0.loss_heatmap: 1.0933, aux_task0.loss_bbox: 0.3716, aux_task1.loss_heatmap: 1.2906, aux_task1.loss_bbox: 0.3988, aux_task2.loss_heatmap: 1.5816, aux_task2.loss_bbox: 0.4308, aux_task3.loss_heatmap: 1.1610, aux_task3.loss_bbox: 0.3346, aux_task4.loss_heatmap: 0.7969, aux_task4.loss_bbox: 0.3526, aux_task5.loss_heatmap: 0.9721, aux_task5.loss_bbox: 0.3642, loss: 22.0616, grad_norm: 49.0687
2025-05-06 10:05:37,395 - mmdet - INFO - Saving checkpoint at 3 epochs
2025-05-06 10:06:41,873 - mmdet - INFO - Epoch [4][50/773]	lr: 4.852e-05, eta: 4:08:27, time: 1.270, data_time: 0.190, memory: 5910, loss_cls: 0.8658, loss_bbox: 1.2039, d0.loss_cls: 0.8819, d0.loss_bbox: 1.4491, d1.loss_cls: 0.8666, d1.loss_bbox: 1.2953, d2.loss_cls: 0.8603, d2.loss_bbox: 1.2459, d3.loss_cls: 0.8632, d3.loss_bbox: 1.2250, d4.loss_cls: 0.8623, d4.loss_bbox: 1.2139, aux_task0.loss_heatmap: 1.0762, aux_task0.loss_bbox: 0.3484, aux_task1.loss_heatmap: 1.2818, aux_task1.loss_bbox: 0.3881, aux_task2.loss_heatmap: 1.5969, aux_task2.loss_bbox: 0.4406, aux_task3.loss_heatmap: 1.1533, aux_task3.loss_bbox: 0.3213, aux_task4.loss_heatmap: 0.8185, aux_task4.loss_bbox: 0.3474, aux_task5.loss_heatmap: 0.9245, aux_task5.loss_bbox: 0.3572, loss: 21.8874, grad_norm: 49.2446
2025-05-06 10:07:35,364 - mmdet - INFO - Epoch [4][100/773]	lr: 4.986e-05, eta: 4:07:11, time: 1.069, data_time: 0.004, memory: 5910, loss_cls: 0.8471, loss_bbox: 1.1945, d0.loss_cls: 0.8661, d0.loss_bbox: 1.4295, d1.loss_cls: 0.8490, d1.loss_bbox: 1.2724, d2.loss_cls: 0.8435, d2.loss_bbox: 1.2259, d3.loss_cls: 0.8468, d3.loss_bbox: 1.2058, d4.loss_cls: 0.8468, d4.loss_bbox: 1.1996, aux_task0.loss_heatmap: 1.0848, aux_task0.loss_bbox: 0.3637, aux_task1.loss_heatmap: 1.3114, aux_task1.loss_bbox: 0.3981, aux_task2.loss_heatmap: 1.5998, aux_task2.loss_bbox: 0.4320, aux_task3.loss_heatmap: 1.1598, aux_task3.loss_bbox: 0.3335, aux_task4.loss_heatmap: 0.8083, aux_task4.loss_bbox: 0.3517, aux_task5.loss_heatmap: 0.9191, aux_task5.loss_bbox: 0.3542, loss: 21.7433, grad_norm: 50.1125
2025-05-06 10:08:32,330 - mmdet - INFO - Epoch [4][150/773]	lr: 5.122e-05, eta: 4:06:15, time: 1.139, data_time: 0.005, memory: 5913, loss_cls: 0.8560, loss_bbox: 1.1888, d0.loss_cls: 0.8822, d0.loss_bbox: 1.4204, d1.loss_cls: 0.8594, d1.loss_bbox: 1.2696, d2.loss_cls: 0.8532, d2.loss_bbox: 1.2235, d3.loss_cls: 0.8526, d3.loss_bbox: 1.2040, d4.loss_cls: 0.8549, d4.loss_bbox: 1.1931, aux_task0.loss_heatmap: 1.1018, aux_task0.loss_bbox: 0.3616, aux_task1.loss_heatmap: 1.2697, aux_task1.loss_bbox: 0.3873, aux_task2.loss_heatmap: 1.5533, aux_task2.loss_bbox: 0.4450, aux_task3.loss_heatmap: 1.1384, aux_task3.loss_bbox: 0.3291, aux_task4.loss_heatmap: 0.8048, aux_task4.loss_bbox: 0.3479, aux_task5.loss_heatmap: 0.9265, aux_task5.loss_bbox: 0.3520, loss: 21.6754, grad_norm: 53.0863
2025-05-06 10:09:27,259 - mmdet - INFO - Epoch [4][200/773]	lr: 5.258e-05, eta: 4:05:08, time: 1.099, data_time: 0.005, memory: 5913, loss_cls: 0.8387, loss_bbox: 1.1874, d0.loss_cls: 0.8598, d0.loss_bbox: 1.4090, d1.loss_cls: 0.8474, d1.loss_bbox: 1.2734, d2.loss_cls: 0.8376, d2.loss_bbox: 1.2221, d3.loss_cls: 0.8385, d3.loss_bbox: 1.2034, d4.loss_cls: 0.8370, d4.loss_bbox: 1.1937, aux_task0.loss_heatmap: 1.0362, aux_task0.loss_bbox: 0.3526, aux_task1.loss_heatmap: 1.2830, aux_task1.loss_bbox: 0.3847, aux_task2.loss_heatmap: 1.5574, aux_task2.loss_bbox: 0.4263, aux_task3.loss_heatmap: 1.1538, aux_task3.loss_bbox: 0.3355, aux_task4.loss_heatmap: 0.7953, aux_task4.loss_bbox: 0.3523, aux_task5.loss_heatmap: 0.9126, aux_task5.loss_bbox: 0.3549, loss: 21.4927, grad_norm: 47.8835
2025-05-06 10:10:23,645 - mmdet - INFO - Epoch [4][250/773]	lr: 5.395e-05, eta: 4:04:09, time: 1.127, data_time: 0.005, memory: 5913, loss_cls: 0.8315, loss_bbox: 1.1563, d0.loss_cls: 0.8463, d0.loss_bbox: 1.3821, d1.loss_cls: 0.8327, d1.loss_bbox: 1.2391, d2.loss_cls: 0.8255, d2.loss_bbox: 1.1916, d3.loss_cls: 0.8271, d3.loss_bbox: 1.1716, d4.loss_cls: 0.8278, d4.loss_bbox: 1.1632, aux_task0.loss_heatmap: 1.0545, aux_task0.loss_bbox: 0.3658, aux_task1.loss_heatmap: 1.2664, aux_task1.loss_bbox: 0.3927, aux_task2.loss_heatmap: 1.5509, aux_task2.loss_bbox: 0.4192, aux_task3.loss_heatmap: 1.1260, aux_task3.loss_bbox: 0.3209, aux_task4.loss_heatmap: 0.8016, aux_task4.loss_bbox: 0.3475, aux_task5.loss_heatmap: 0.8760, aux_task5.loss_bbox: 0.3449, loss: 21.1611, grad_norm: 46.6880
2025-05-06 10:11:20,923 - mmdet - INFO - Epoch [4][300/773]	lr: 5.534e-05, eta: 4:03:14, time: 1.145, data_time: 0.005, memory: 5913, loss_cls: 0.8201, loss_bbox: 1.1410, d0.loss_cls: 0.8429, d0.loss_bbox: 1.3675, d1.loss_cls: 0.8232, d1.loss_bbox: 1.2249, d2.loss_cls: 0.8158, d2.loss_bbox: 1.1773, d3.loss_cls: 0.8168, d3.loss_bbox: 1.1557, d4.loss_cls: 0.8160, d4.loss_bbox: 1.1500, aux_task0.loss_heatmap: 1.0315, aux_task0.loss_bbox: 0.3651, aux_task1.loss_heatmap: 1.2777, aux_task1.loss_bbox: 0.3785, aux_task2.loss_heatmap: 1.5082, aux_task2.loss_bbox: 0.4129, aux_task3.loss_heatmap: 1.1200, aux_task3.loss_bbox: 0.3205, aux_task4.loss_heatmap: 0.7440, aux_task4.loss_bbox: 0.3414, aux_task5.loss_heatmap: 0.8818, aux_task5.loss_bbox: 0.3516, loss: 20.8844, grad_norm: 48.3418
2025-05-06 10:12:17,812 - mmdet - INFO - Epoch [4][350/773]	lr: 5.673e-05, eta: 4:02:18, time: 1.138, data_time: 0.005, memory: 5913, loss_cls: 0.8216, loss_bbox: 1.1594, d0.loss_cls: 0.8461, d0.loss_bbox: 1.3800, d1.loss_cls: 0.8240, d1.loss_bbox: 1.2416, d2.loss_cls: 0.8137, d2.loss_bbox: 1.1959, d3.loss_cls: 0.8161, d3.loss_bbox: 1.1753, d4.loss_cls: 0.8171, d4.loss_bbox: 1.1708, aux_task0.loss_heatmap: 1.0821, aux_task0.loss_bbox: 0.3638, aux_task1.loss_heatmap: 1.2799, aux_task1.loss_bbox: 0.3897, aux_task2.loss_heatmap: 1.5279, aux_task2.loss_bbox: 0.4223, aux_task3.loss_heatmap: 1.1492, aux_task3.loss_bbox: 0.3257, aux_task4.loss_heatmap: 0.7560, aux_task4.loss_bbox: 0.3464, aux_task5.loss_heatmap: 0.8496, aux_task5.loss_bbox: 0.3407, loss: 21.0949, grad_norm: 47.4984
2025-05-06 10:13:11,048 - mmdet - INFO - Epoch [4][400/773]	lr: 5.813e-05, eta: 4:01:04, time: 1.065, data_time: 0.005, memory: 5913, loss_cls: 0.8070, loss_bbox: 1.1625, d0.loss_cls: 0.8342, d0.loss_bbox: 1.3716, d1.loss_cls: 0.8120, d1.loss_bbox: 1.2396, d2.loss_cls: 0.8038, d2.loss_bbox: 1.1995, d3.loss_cls: 0.8034, d3.loss_bbox: 1.1829, d4.loss_cls: 0.8037, d4.loss_bbox: 1.1719, aux_task0.loss_heatmap: 1.0481, aux_task0.loss_bbox: 0.3561, aux_task1.loss_heatmap: 1.2754, aux_task1.loss_bbox: 0.3863, aux_task2.loss_heatmap: 1.5430, aux_task2.loss_bbox: 0.4214, aux_task3.loss_heatmap: 1.1148, aux_task3.loss_bbox: 0.3344, aux_task4.loss_heatmap: 0.7723, aux_task4.loss_bbox: 0.3537, aux_task5.loss_heatmap: 0.8562, aux_task5.loss_bbox: 0.3440, loss: 20.9980, grad_norm: 48.4131
2025-05-06 10:14:03,583 - mmdet - INFO - Epoch [4][450/773]	lr: 5.953e-05, eta: 3:59:48, time: 1.051, data_time: 0.005, memory: 5913, loss_cls: 0.8226, loss_bbox: 1.1526, d0.loss_cls: 0.8471, d0.loss_bbox: 1.3656, d1.loss_cls: 0.8233, d1.loss_bbox: 1.2245, d2.loss_cls: 0.8188, d2.loss_bbox: 1.1841, d3.loss_cls: 0.8183, d3.loss_bbox: 1.1680, d4.loss_cls: 0.8171, d4.loss_bbox: 1.1620, aux_task0.loss_heatmap: 1.0317, aux_task0.loss_bbox: 0.3650, aux_task1.loss_heatmap: 1.2082, aux_task1.loss_bbox: 0.3828, aux_task2.loss_heatmap: 1.5075, aux_task2.loss_bbox: 0.4111, aux_task3.loss_heatmap: 1.1012, aux_task3.loss_bbox: 0.3275, aux_task4.loss_heatmap: 0.7655, aux_task4.loss_bbox: 0.3448, aux_task5.loss_heatmap: 0.8231, aux_task5.loss_bbox: 0.3398, loss: 20.8121, grad_norm: 46.6913
2025-05-06 10:14:55,936 - mmdet - INFO - Epoch [4][500/773]	lr: 6.095e-05, eta: 3:58:32, time: 1.047, data_time: 0.004, memory: 5913, loss_cls: 0.8043, loss_bbox: 1.1330, d0.loss_cls: 0.8282, d0.loss_bbox: 1.3472, d1.loss_cls: 0.8054, d1.loss_bbox: 1.2044, d2.loss_cls: 0.7994, d2.loss_bbox: 1.1659, d3.loss_cls: 0.8004, d3.loss_bbox: 1.1494, d4.loss_cls: 0.8004, d4.loss_bbox: 1.1417, aux_task0.loss_heatmap: 1.0336, aux_task0.loss_bbox: 0.3638, aux_task1.loss_heatmap: 1.2265, aux_task1.loss_bbox: 0.3907, aux_task2.loss_heatmap: 1.4736, aux_task2.loss_bbox: 0.4234, aux_task3.loss_heatmap: 1.1345, aux_task3.loss_bbox: 0.3395, aux_task4.loss_heatmap: 0.7251, aux_task4.loss_bbox: 0.3500, aux_task5.loss_heatmap: 0.7847, aux_task5.loss_bbox: 0.3463, loss: 20.5716, grad_norm: 47.8726
2025-05-06 10:15:53,387 - mmdet - INFO - Epoch [4][550/773]	lr: 6.236e-05, eta: 3:57:39, time: 1.149, data_time: 0.004, memory: 5913, loss_cls: 0.7878, loss_bbox: 1.1083, d0.loss_cls: 0.8170, d0.loss_bbox: 1.3204, d1.loss_cls: 0.7904, d1.loss_bbox: 1.1815, d2.loss_cls: 0.7860, d2.loss_bbox: 1.1389, d3.loss_cls: 0.7848, d3.loss_bbox: 1.1216, d4.loss_cls: 0.7856, d4.loss_bbox: 1.1147, aux_task0.loss_heatmap: 1.0125, aux_task0.loss_bbox: 0.3579, aux_task1.loss_heatmap: 1.2000, aux_task1.loss_bbox: 0.3799, aux_task2.loss_heatmap: 1.4865, aux_task2.loss_bbox: 0.4235, aux_task3.loss_heatmap: 1.0788, aux_task3.loss_bbox: 0.3309, aux_task4.loss_heatmap: 0.7463, aux_task4.loss_bbox: 0.3341, aux_task5.loss_heatmap: 0.8021, aux_task5.loss_bbox: 0.3482, loss: 20.2375, grad_norm: 48.8700
2025-05-06 10:16:46,610 - mmdet - INFO - Epoch [4][600/773]	lr: 6.378e-05, eta: 3:56:28, time: 1.064, data_time: 0.004, memory: 5913, loss_cls: 0.7768, loss_bbox: 1.1353, d0.loss_cls: 0.8076, d0.loss_bbox: 1.3497, d1.loss_cls: 0.7842, d1.loss_bbox: 1.2135, d2.loss_cls: 0.7783, d2.loss_bbox: 1.1702, d3.loss_cls: 0.7749, d3.loss_bbox: 1.1512, d4.loss_cls: 0.7739, d4.loss_bbox: 1.1415, aux_task0.loss_heatmap: 1.0686, aux_task0.loss_bbox: 0.3648, aux_task1.loss_heatmap: 1.2386, aux_task1.loss_bbox: 0.3868, aux_task2.loss_heatmap: 1.4797, aux_task2.loss_bbox: 0.4308, aux_task3.loss_heatmap: 1.0741, aux_task3.loss_bbox: 0.3279, aux_task4.loss_heatmap: 0.7229, aux_task4.loss_bbox: 0.3424, aux_task5.loss_heatmap: 0.7916, aux_task5.loss_bbox: 0.3498, loss: 20.4350, grad_norm: 46.6610
2025-05-06 10:17:39,621 - mmdet - INFO - Epoch [4][650/773]	lr: 6.521e-05, eta: 3:55:16, time: 1.060, data_time: 0.004, memory: 5913, loss_cls: 0.7746, loss_bbox: 1.1028, d0.loss_cls: 0.7929, d0.loss_bbox: 1.3196, d1.loss_cls: 0.7707, d1.loss_bbox: 1.1795, d2.loss_cls: 0.7686, d2.loss_bbox: 1.1407, d3.loss_cls: 0.7693, d3.loss_bbox: 1.1208, d4.loss_cls: 0.7712, d4.loss_bbox: 1.1126, aux_task0.loss_heatmap: 1.0039, aux_task0.loss_bbox: 0.3521, aux_task1.loss_heatmap: 1.1898, aux_task1.loss_bbox: 0.3783, aux_task2.loss_heatmap: 1.4252, aux_task2.loss_bbox: 0.4248, aux_task3.loss_heatmap: 1.0405, aux_task3.loss_bbox: 0.3231, aux_task4.loss_heatmap: 0.7542, aux_task4.loss_bbox: 0.3373, aux_task5.loss_heatmap: 0.7852, aux_task5.loss_bbox: 0.3435, loss: 19.9814, grad_norm: 51.5502
2025-05-06 10:18:32,391 - mmdet - INFO - Epoch [4][700/773]	lr: 6.664e-05, eta: 3:54:05, time: 1.056, data_time: 0.004, memory: 5913, loss_cls: 0.7674, loss_bbox: 1.0942, d0.loss_cls: 0.7996, d0.loss_bbox: 1.3101, d1.loss_cls: 0.7711, d1.loss_bbox: 1.1654, d2.loss_cls: 0.7640, d2.loss_bbox: 1.1277, d3.loss_cls: 0.7609, d3.loss_bbox: 1.1147, d4.loss_cls: 0.7630, d4.loss_bbox: 1.1051, aux_task0.loss_heatmap: 0.9841, aux_task0.loss_bbox: 0.3577, aux_task1.loss_heatmap: 1.1523, aux_task1.loss_bbox: 0.3685, aux_task2.loss_heatmap: 1.4640, aux_task2.loss_bbox: 0.4020, aux_task3.loss_heatmap: 1.0373, aux_task3.loss_bbox: 0.3160, aux_task4.loss_heatmap: 0.7109, aux_task4.loss_bbox: 0.3318, aux_task5.loss_heatmap: 0.7863, aux_task5.loss_bbox: 0.3476, loss: 19.8019, grad_norm: 51.3799
2025-05-06 10:20:36,403 - mmdet - INFO - Epoch [4][750/773]	lr: 6.806e-05, eta: 3:57:41, time: 2.480, data_time: 1.432, memory: 5913, loss_cls: 0.7679, loss_bbox: 1.1022, d0.loss_cls: 0.7966, d0.loss_bbox: 1.3061, d1.loss_cls: 0.7715, d1.loss_bbox: 1.1691, d2.loss_cls: 0.7638, d2.loss_bbox: 1.1344, d3.loss_cls: 0.7654, d3.loss_bbox: 1.1174, d4.loss_cls: 0.7635, d4.loss_bbox: 1.1094, aux_task0.loss_heatmap: 1.0049, aux_task0.loss_bbox: 0.3497, aux_task1.loss_heatmap: 1.1885, aux_task1.loss_bbox: 0.3835, aux_task2.loss_heatmap: 1.4480, aux_task2.loss_bbox: 0.4105, aux_task3.loss_heatmap: 1.0073, aux_task3.loss_bbox: 0.3185, aux_task4.loss_heatmap: 0.7241, aux_task4.loss_bbox: 0.3430, aux_task5.loss_heatmap: 0.7928, aux_task5.loss_bbox: 0.3403, loss: 19.8784, grad_norm: 49.8192
2025-05-06 10:22:27,833 - mmdet - INFO - Saving checkpoint at 4 epochs
2025-05-06 10:23:34,014 - mmdet - INFO - Epoch [5][50/773]	lr: 7.015e-05, eta: 3:55:03, time: 1.303, data_time: 0.157, memory: 5913, loss_cls: 0.7688, loss_bbox: 1.1079, d0.loss_cls: 0.7905, d0.loss_bbox: 1.2989, d1.loss_cls: 0.7688, d1.loss_bbox: 1.1694, d2.loss_cls: 0.7625, d2.loss_bbox: 1.1355, d3.loss_cls: 0.7645, d3.loss_bbox: 1.1224, d4.loss_cls: 0.7651, d4.loss_bbox: 1.1154, aux_task0.loss_heatmap: 0.9885, aux_task0.loss_bbox: 0.3616, aux_task1.loss_heatmap: 1.1883, aux_task1.loss_bbox: 0.3828, aux_task2.loss_heatmap: 1.4751, aux_task2.loss_bbox: 0.4299, aux_task3.loss_heatmap: 0.9789, aux_task3.loss_bbox: 0.3127, aux_task4.loss_heatmap: 0.7522, aux_task4.loss_bbox: 0.3392, aux_task5.loss_heatmap: 0.7498, aux_task5.loss_bbox: 0.3376, loss: 19.8662, grad_norm: 50.0579
2025-05-06 10:24:26,824 - mmdet - INFO - Epoch [5][100/773]	lr: 7.158e-05, eta: 3:53:49, time: 1.057, data_time: 0.006, memory: 5913, loss_cls: 0.7748, loss_bbox: 1.0874, d0.loss_cls: 0.7959, d0.loss_bbox: 1.2906, d1.loss_cls: 0.7719, d1.loss_bbox: 1.1543, d2.loss_cls: 0.7700, d2.loss_bbox: 1.1204, d3.loss_cls: 0.7696, d3.loss_bbox: 1.1041, d4.loss_cls: 0.7719, d4.loss_bbox: 1.0960, aux_task0.loss_heatmap: 0.9742, aux_task0.loss_bbox: 0.3509, aux_task1.loss_heatmap: 1.2203, aux_task1.loss_bbox: 0.3851, aux_task2.loss_heatmap: 1.4548, aux_task2.loss_bbox: 0.4090, aux_task3.loss_heatmap: 1.0637, aux_task3.loss_bbox: 0.3205, aux_task4.loss_heatmap: 0.7320, aux_task4.loss_bbox: 0.3406, aux_task5.loss_heatmap: 0.7472, aux_task5.loss_bbox: 0.3288, loss: 19.8339, grad_norm: 47.7761
2025-05-06 10:25:19,888 - mmdet - INFO - Epoch [5][150/773]	lr: 7.300e-05, eta: 3:52:36, time: 1.060, data_time: 0.004, memory: 5913, loss_cls: 0.7488, loss_bbox: 1.0838, d0.loss_cls: 0.7792, d0.loss_bbox: 1.2847, d1.loss_cls: 0.7506, d1.loss_bbox: 1.1507, d2.loss_cls: 0.7463, d2.loss_bbox: 1.1162, d3.loss_cls: 0.7449, d3.loss_bbox: 1.1005, d4.loss_cls: 0.7474, d4.loss_bbox: 1.0931, aux_task0.loss_heatmap: 0.9595, aux_task0.loss_bbox: 0.3451, aux_task1.loss_heatmap: 1.1651, aux_task1.loss_bbox: 0.3742, aux_task2.loss_heatmap: 1.3608, aux_task2.loss_bbox: 0.4228, aux_task3.loss_heatmap: 1.0105, aux_task3.loss_bbox: 0.3218, aux_task4.loss_heatmap: 0.7251, aux_task4.loss_bbox: 0.3355, aux_task5.loss_heatmap: 0.7630, aux_task5.loss_bbox: 0.3386, loss: 19.4683, grad_norm: 49.7137
2025-05-06 10:26:15,995 - mmdet - INFO - Epoch [5][200/773]	lr: 7.443e-05, eta: 3:51:35, time: 1.123, data_time: 0.005, memory: 5913, loss_cls: 0.7451, loss_bbox: 1.0734, d0.loss_cls: 0.7671, d0.loss_bbox: 1.2877, d1.loss_cls: 0.7467, d1.loss_bbox: 1.1443, d2.loss_cls: 0.7411, d2.loss_bbox: 1.1120, d3.loss_cls: 0.7411, d3.loss_bbox: 1.0932, d4.loss_cls: 0.7416, d4.loss_bbox: 1.0839, aux_task0.loss_heatmap: 0.9406, aux_task0.loss_bbox: 0.3470, aux_task1.loss_heatmap: 1.1749, aux_task1.loss_bbox: 0.3745, aux_task2.loss_heatmap: 1.3923, aux_task2.loss_bbox: 0.4048, aux_task3.loss_heatmap: 1.0136, aux_task3.loss_bbox: 0.3265, aux_task4.loss_heatmap: 0.7169, aux_task4.loss_bbox: 0.3439, aux_task5.loss_heatmap: 0.7288, aux_task5.loss_bbox: 0.3351, loss: 19.3759, grad_norm: 46.8607
2025-05-06 10:27:11,392 - mmdet - INFO - Epoch [5][250/773]	lr: 7.585e-05, eta: 3:50:32, time: 1.108, data_time: 0.004, memory: 5913, loss_cls: 0.7467, loss_bbox: 1.0637, d0.loss_cls: 0.7690, d0.loss_bbox: 1.2659, d1.loss_cls: 0.7460, d1.loss_bbox: 1.1279, d2.loss_cls: 0.7401, d2.loss_bbox: 1.0978, d3.loss_cls: 0.7400, d3.loss_bbox: 1.0826, d4.loss_cls: 0.7414, d4.loss_bbox: 1.0741, aux_task0.loss_heatmap: 0.9895, aux_task0.loss_bbox: 0.3597, aux_task1.loss_heatmap: 1.1725, aux_task1.loss_bbox: 0.3814, aux_task2.loss_heatmap: 1.3644, aux_task2.loss_bbox: 0.4055, aux_task3.loss_heatmap: 0.9569, aux_task3.loss_bbox: 0.3196, aux_task4.loss_heatmap: 0.7298, aux_task4.loss_bbox: 0.3370, aux_task5.loss_heatmap: 0.7546, aux_task5.loss_bbox: 0.3358, loss: 19.3020, grad_norm: 49.9612
2025-05-06 10:28:04,055 - mmdet - INFO - Epoch [5][300/773]	lr: 7.726e-05, eta: 3:49:19, time: 1.053, data_time: 0.004, memory: 5913, loss_cls: 0.7291, loss_bbox: 1.0557, d0.loss_cls: 0.7571, d0.loss_bbox: 1.2618, d1.loss_cls: 0.7328, d1.loss_bbox: 1.1263, d2.loss_cls: 0.7271, d2.loss_bbox: 1.0935, d3.loss_cls: 0.7231, d3.loss_bbox: 1.0745, d4.loss_cls: 0.7244, d4.loss_bbox: 1.0639, aux_task0.loss_heatmap: 0.9348, aux_task0.loss_bbox: 0.3472, aux_task1.loss_heatmap: 1.1822, aux_task1.loss_bbox: 0.3669, aux_task2.loss_heatmap: 1.3391, aux_task2.loss_bbox: 0.4079, aux_task3.loss_heatmap: 0.9460, aux_task3.loss_bbox: 0.3194, aux_task4.loss_heatmap: 0.6631, aux_task4.loss_bbox: 0.3350, aux_task5.loss_heatmap: 0.7335, aux_task5.loss_bbox: 0.3369, loss: 18.9813, grad_norm: 49.1425
2025-05-06 10:28:56,796 - mmdet - INFO - Epoch [5][350/773]	lr: 7.867e-05, eta: 3:48:07, time: 1.055, data_time: 0.004, memory: 5913, loss_cls: 0.7267, loss_bbox: 1.0804, d0.loss_cls: 0.7518, d0.loss_bbox: 1.2771, d1.loss_cls: 0.7305, d1.loss_bbox: 1.1516, d2.loss_cls: 0.7250, d2.loss_bbox: 1.1184, d3.loss_cls: 0.7238, d3.loss_bbox: 1.0963, d4.loss_cls: 0.7237, d4.loss_bbox: 1.0871, aux_task0.loss_heatmap: 0.9168, aux_task0.loss_bbox: 0.3421, aux_task1.loss_heatmap: 1.1887, aux_task1.loss_bbox: 0.3774, aux_task2.loss_heatmap: 1.3717, aux_task2.loss_bbox: 0.4179, aux_task3.loss_heatmap: 0.9830, aux_task3.loss_bbox: 0.3291, aux_task4.loss_heatmap: 0.7020, aux_task4.loss_bbox: 0.3394, aux_task5.loss_heatmap: 0.7171, aux_task5.loss_bbox: 0.3316, loss: 19.2093, grad_norm: 47.1918
2025-05-06 10:29:49,099 - mmdet - INFO - Epoch [5][400/773]	lr: 8.007e-05, eta: 3:46:54, time: 1.046, data_time: 0.004, memory: 5913, loss_cls: 0.7253, loss_bbox: 1.0771, d0.loss_cls: 0.7511, d0.loss_bbox: 1.2708, d1.loss_cls: 0.7295, d1.loss_bbox: 1.1448, d2.loss_cls: 0.7229, d2.loss_bbox: 1.1139, d3.loss_cls: 0.7236, d3.loss_bbox: 1.0929, d4.loss_cls: 0.7229, d4.loss_bbox: 1.0855, aux_task0.loss_heatmap: 0.9413, aux_task0.loss_bbox: 0.3546, aux_task1.loss_heatmap: 1.1896, aux_task1.loss_bbox: 0.3817, aux_task2.loss_heatmap: 1.3633, aux_task2.loss_bbox: 0.4085, aux_task3.loss_heatmap: 1.0297, aux_task3.loss_bbox: 0.3348, aux_task4.loss_heatmap: 0.6903, aux_task4.loss_bbox: 0.3478, aux_task5.loss_heatmap: 0.6824, aux_task5.loss_bbox: 0.3289, loss: 19.2131, grad_norm: 50.1755
2025-05-06 10:30:42,757 - mmdet - INFO - Epoch [5][450/773]	lr: 8.147e-05, eta: 3:45:47, time: 1.073, data_time: 0.004, memory: 5913, loss_cls: 0.7097, loss_bbox: 1.0549, d0.loss_cls: 0.7383, d0.loss_bbox: 1.2637, d1.loss_cls: 0.7140, d1.loss_bbox: 1.1286, d2.loss_cls: 0.7091, d2.loss_bbox: 1.0934, d3.loss_cls: 0.7058, d3.loss_bbox: 1.0726, d4.loss_cls: 0.7064, d4.loss_bbox: 1.0634, aux_task0.loss_heatmap: 0.9411, aux_task0.loss_bbox: 0.3459, aux_task1.loss_heatmap: 1.1089, aux_task1.loss_bbox: 0.3698, aux_task2.loss_heatmap: 1.3894, aux_task2.loss_bbox: 0.3930, aux_task3.loss_heatmap: 0.9691, aux_task3.loss_bbox: 0.3249, aux_task4.loss_heatmap: 0.6924, aux_task4.loss_bbox: 0.3357, aux_task5.loss_heatmap: 0.6748, aux_task5.loss_bbox: 0.3269, loss: 18.8317, grad_norm: 48.9264
2025-05-06 10:31:35,374 - mmdet - INFO - Epoch [5][500/773]	lr: 8.286e-05, eta: 3:44:36, time: 1.052, data_time: 0.005, memory: 5913, loss_cls: 0.7152, loss_bbox: 1.0359, d0.loss_cls: 0.7404, d0.loss_bbox: 1.2356, d1.loss_cls: 0.7187, d1.loss_bbox: 1.1044, d2.loss_cls: 0.7112, d2.loss_bbox: 1.0701, d3.loss_cls: 0.7116, d3.loss_bbox: 1.0505, d4.loss_cls: 0.7125, d4.loss_bbox: 1.0418, aux_task0.loss_heatmap: 0.9264, aux_task0.loss_bbox: 0.3394, aux_task1.loss_heatmap: 1.1275, aux_task1.loss_bbox: 0.3865, aux_task2.loss_heatmap: 1.3758, aux_task2.loss_bbox: 0.4124, aux_task3.loss_heatmap: 0.9198, aux_task3.loss_bbox: 0.3249, aux_task4.loss_heatmap: 0.6804, aux_task4.loss_bbox: 0.3374, aux_task5.loss_heatmap: 0.6896, aux_task5.loss_bbox: 0.3288, loss: 18.6969, grad_norm: 46.5408
2025-05-06 10:32:40,087 - mmdet - INFO - Epoch [5][550/773]	lr: 8.424e-05, eta: 3:44:05, time: 1.294, data_time: 0.004, memory: 5913, loss_cls: 0.7105, loss_bbox: 1.0337, d0.loss_cls: 0.7352, d0.loss_bbox: 1.2382, d1.loss_cls: 0.7118, d1.loss_bbox: 1.1000, d2.loss_cls: 0.7055, d2.loss_bbox: 1.0627, d3.loss_cls: 0.7054, d3.loss_bbox: 1.0457, d4.loss_cls: 0.7066, d4.loss_bbox: 1.0396, aux_task0.loss_heatmap: 0.9316, aux_task0.loss_bbox: 0.3411, aux_task1.loss_heatmap: 1.1462, aux_task1.loss_bbox: 0.3690, aux_task2.loss_heatmap: 1.3527, aux_task2.loss_bbox: 0.4138, aux_task3.loss_heatmap: 0.9072, aux_task3.loss_bbox: 0.3183, aux_task4.loss_heatmap: 0.6793, aux_task4.loss_bbox: 0.3275, aux_task5.loss_heatmap: 0.6401, aux_task5.loss_bbox: 0.3306, loss: 18.5522, grad_norm: 48.8428
2025-05-06 10:33:32,567 - mmdet - INFO - Epoch [5][600/773]	lr: 8.560e-05, eta: 3:42:54, time: 1.050, data_time: 0.004, memory: 5913, loss_cls: 0.6990, loss_bbox: 1.0360, d0.loss_cls: 0.7285, d0.loss_bbox: 1.2401, d1.loss_cls: 0.7026, d1.loss_bbox: 1.1062, d2.loss_cls: 0.6981, d2.loss_bbox: 1.0655, d3.loss_cls: 0.6966, d3.loss_bbox: 1.0496, d4.loss_cls: 0.6970, d4.loss_bbox: 1.0412, aux_task0.loss_heatmap: 0.9318, aux_task0.loss_bbox: 0.3431, aux_task1.loss_heatmap: 1.1525, aux_task1.loss_bbox: 0.3788, aux_task2.loss_heatmap: 1.3135, aux_task2.loss_bbox: 0.4113, aux_task3.loss_heatmap: 0.9267, aux_task3.loss_bbox: 0.3166, aux_task4.loss_heatmap: 0.6402, aux_task4.loss_bbox: 0.3345, aux_task5.loss_heatmap: 0.6698, aux_task5.loss_bbox: 0.3311, loss: 18.5104, grad_norm: 48.3498
2025-05-06 10:34:25,483 - mmdet - INFO - Epoch [5][650/773]	lr: 8.696e-05, eta: 3:41:45, time: 1.058, data_time: 0.004, memory: 5913, loss_cls: 0.7044, loss_bbox: 1.0235, d0.loss_cls: 0.7293, d0.loss_bbox: 1.2154, d1.loss_cls: 0.7053, d1.loss_bbox: 1.0883, d2.loss_cls: 0.6989, d2.loss_bbox: 1.0515, d3.loss_cls: 0.7009, d3.loss_bbox: 1.0370, d4.loss_cls: 0.7029, d4.loss_bbox: 1.0287, aux_task0.loss_heatmap: 0.9794, aux_task0.loss_bbox: 0.3431, aux_task1.loss_heatmap: 1.1171, aux_task1.loss_bbox: 0.3705, aux_task2.loss_heatmap: 1.3138, aux_task2.loss_bbox: 0.4018, aux_task3.loss_heatmap: 0.9457, aux_task3.loss_bbox: 0.3224, aux_task4.loss_heatmap: 0.6639, aux_task4.loss_bbox: 0.3262, aux_task5.loss_heatmap: 0.6820, aux_task5.loss_bbox: 0.3295, loss: 18.4815, grad_norm: 48.9675
2025-05-06 10:35:18,468 - mmdet - INFO - Epoch [5][700/773]	lr: 8.831e-05, eta: 3:40:37, time: 1.060, data_time: 0.004, memory: 5913, loss_cls: 0.6881, loss_bbox: 1.0065, d0.loss_cls: 0.7186, d0.loss_bbox: 1.2011, d1.loss_cls: 0.6928, d1.loss_bbox: 1.0758, d2.loss_cls: 0.6867, d2.loss_bbox: 1.0386, d3.loss_cls: 0.6854, d3.loss_bbox: 1.0213, d4.loss_cls: 0.6866, d4.loss_bbox: 1.0124, aux_task0.loss_heatmap: 0.9243, aux_task0.loss_bbox: 0.3346, aux_task1.loss_heatmap: 1.0904, aux_task1.loss_bbox: 0.3700, aux_task2.loss_heatmap: 1.3065, aux_task2.loss_bbox: 0.3967, aux_task3.loss_heatmap: 0.8915, aux_task3.loss_bbox: 0.3135, aux_task4.loss_heatmap: 0.6704, aux_task4.loss_bbox: 0.3243, aux_task5.loss_heatmap: 0.6744, aux_task5.loss_bbox: 0.3280, loss: 18.1384, grad_norm: 45.1034
2025-05-06 10:36:11,356 - mmdet - INFO - Epoch [5][750/773]	lr: 8.964e-05, eta: 3:39:28, time: 1.057, data_time: 0.004, memory: 5913, loss_cls: 0.6968, loss_bbox: 1.0229, d0.loss_cls: 0.7239, d0.loss_bbox: 1.2177, d1.loss_cls: 0.6983, d1.loss_bbox: 1.0903, d2.loss_cls: 0.6938, d2.loss_bbox: 1.0518, d3.loss_cls: 0.6914, d3.loss_bbox: 1.0362, d4.loss_cls: 0.6923, d4.loss_bbox: 1.0303, aux_task0.loss_heatmap: 0.9645, aux_task0.loss_bbox: 0.3622, aux_task1.loss_heatmap: 1.1152, aux_task1.loss_bbox: 0.3803, aux_task2.loss_heatmap: 1.2688, aux_task2.loss_bbox: 0.4012, aux_task3.loss_heatmap: 0.8851, aux_task3.loss_bbox: 0.3096, aux_task4.loss_heatmap: 0.6583, aux_task4.loss_bbox: 0.3352, aux_task5.loss_heatmap: 0.6964, aux_task5.loss_bbox: 0.3319, loss: 18.3544, grad_norm: 43.7057
2025-05-06 10:37:42,659 - mmdet - INFO - Saving checkpoint at 5 epochs
2025-05-06 10:59:29,107 - mmdet - INFO - Exp name: lidar_0075v_900q_hednet_hednet_split40.py
2025-05-06 10:59:31,268 - mmdet - INFO - Epoch(val) [5][1505]	pts_bbox_NuScenes/car_AP_dist_0.5: 0.0704, pts_bbox_NuScenes/car_AP_dist_1.0: 0.2296, pts_bbox_NuScenes/car_AP_dist_2.0: 0.3472, pts_bbox_NuScenes/car_AP_dist_4.0: 0.4284, pts_bbox_NuScenes/car_trans_err: 0.5992, pts_bbox_NuScenes/car_scale_err: 0.1906, pts_bbox_NuScenes/car_orient_err: 1.4981, pts_bbox_NuScenes/car_vel_err: 1.2410, pts_bbox_NuScenes/car_attr_err: 0.4293, pts_bbox_NuScenes/mATE: 0.7390, pts_bbox_NuScenes/mASE: 0.3657, pts_bbox_NuScenes/mAOE: 1.4850, pts_bbox_NuScenes/mAVE: 1.0191, pts_bbox_NuScenes/mAAE: 0.4414, pts_bbox_NuScenes/truck_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/truck_AP_dist_1.0: 0.0038, pts_bbox_NuScenes/truck_AP_dist_2.0: 0.0279, pts_bbox_NuScenes/truck_AP_dist_4.0: 0.0667, pts_bbox_NuScenes/truck_trans_err: 0.8923, pts_bbox_NuScenes/truck_scale_err: 0.3356, pts_bbox_NuScenes/truck_orient_err: 1.4567, pts_bbox_NuScenes/truck_vel_err: 0.9545, pts_bbox_NuScenes/truck_attr_err: 0.3983, pts_bbox_NuScenes/construction_vehicle_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/construction_vehicle_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/construction_vehicle_AP_dist_2.0: 0.0000, pts_bbox_NuScenes/construction_vehicle_AP_dist_4.0: 0.0000, pts_bbox_NuScenes/construction_vehicle_trans_err: 0.9632, pts_bbox_NuScenes/construction_vehicle_scale_err: 0.5527, pts_bbox_NuScenes/construction_vehicle_orient_err: 1.5576, pts_bbox_NuScenes/construction_vehicle_vel_err: 0.1582, pts_bbox_NuScenes/construction_vehicle_attr_err: 0.3954, pts_bbox_NuScenes/bus_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/bus_AP_dist_1.0: 0.0065, pts_bbox_NuScenes/bus_AP_dist_2.0: 0.0474, pts_bbox_NuScenes/bus_AP_dist_4.0: 0.0858, pts_bbox_NuScenes/bus_trans_err: 0.9661, pts_bbox_NuScenes/bus_scale_err: 0.2817, pts_bbox_NuScenes/bus_orient_err: 1.8593, pts_bbox_NuScenes/bus_vel_err: 2.4228, pts_bbox_NuScenes/bus_attr_err: 0.6147, pts_bbox_NuScenes/trailer_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/trailer_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/trailer_AP_dist_2.0: 0.0000, pts_bbox_NuScenes/trailer_AP_dist_4.0: 0.0051, pts_bbox_NuScenes/trailer_trans_err: 1.0148, pts_bbox_NuScenes/trailer_scale_err: 0.3890, pts_bbox_NuScenes/trailer_orient_err: 1.7285, pts_bbox_NuScenes/trailer_vel_err: 0.3871, pts_bbox_NuScenes/trailer_attr_err: 0.2288, pts_bbox_NuScenes/barrier_AP_dist_0.5: 0.0066, pts_bbox_NuScenes/barrier_AP_dist_1.0: 0.0871, pts_bbox_NuScenes/barrier_AP_dist_2.0: 0.1768, pts_bbox_NuScenes/barrier_AP_dist_4.0: 0.2545, pts_bbox_NuScenes/barrier_trans_err: 0.9264, pts_bbox_NuScenes/barrier_scale_err: 0.3913, pts_bbox_NuScenes/barrier_orient_err: 0.9447, pts_bbox_NuScenes/barrier_vel_err: nan, pts_bbox_NuScenes/barrier_attr_err: nan, pts_bbox_NuScenes/motorcycle_AP_dist_0.5: 0.0018, pts_bbox_NuScenes/motorcycle_AP_dist_1.0: 0.0060, pts_bbox_NuScenes/motorcycle_AP_dist_2.0: 0.0073, pts_bbox_NuScenes/motorcycle_AP_dist_4.0: 0.0085, pts_bbox_NuScenes/motorcycle_trans_err: 0.4441, pts_bbox_NuScenes/motorcycle_scale_err: 0.3271, pts_bbox_NuScenes/motorcycle_orient_err: 1.2725, pts_bbox_NuScenes/motorcycle_vel_err: 1.5967, pts_bbox_NuScenes/motorcycle_attr_err: 0.5524, pts_bbox_NuScenes/bicycle_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/bicycle_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/bicycle_AP_dist_2.0: 0.0000, pts_bbox_NuScenes/bicycle_AP_dist_4.0: 0.0000, pts_bbox_NuScenes/bicycle_trans_err: 0.5588, pts_bbox_NuScenes/bicycle_scale_err: 0.3683, pts_bbox_NuScenes/bicycle_orient_err: 1.5750, pts_bbox_NuScenes/bicycle_vel_err: 0.4717, pts_bbox_NuScenes/bicycle_attr_err: 0.1265, pts_bbox_NuScenes/pedestrian_AP_dist_0.5: 0.0803, pts_bbox_NuScenes/pedestrian_AP_dist_1.0: 0.2451, pts_bbox_NuScenes/pedestrian_AP_dist_2.0: 0.3179, pts_bbox_NuScenes/pedestrian_AP_dist_4.0: 0.3660, pts_bbox_NuScenes/pedestrian_trans_err: 0.5814, pts_bbox_NuScenes/pedestrian_scale_err: 0.3287, pts_bbox_NuScenes/pedestrian_orient_err: 1.4726, pts_bbox_NuScenes/pedestrian_vel_err: 0.9210, pts_bbox_NuScenes/pedestrian_attr_err: 0.7857, pts_bbox_NuScenes/traffic_cone_AP_dist_0.5: 0.0469, pts_bbox_NuScenes/traffic_cone_AP_dist_1.0: 0.0673, pts_bbox_NuScenes/traffic_cone_AP_dist_2.0: 0.0883, pts_bbox_NuScenes/traffic_cone_AP_dist_4.0: 0.1624, pts_bbox_NuScenes/traffic_cone_trans_err: 0.4440, pts_bbox_NuScenes/traffic_cone_scale_err: 0.4920, pts_bbox_NuScenes/traffic_cone_orient_err: nan, pts_bbox_NuScenes/traffic_cone_vel_err: nan, pts_bbox_NuScenes/traffic_cone_attr_err: nan, pts_bbox_NuScenes/NDS: 0.1859, pts_bbox_NuScenes/mAP: 0.0810
2025-05-06 11:00:36,760 - mmdet - INFO - Epoch [6][50/773]	lr: 9.156e-05, eta: 3:37:14, time: 1.308, data_time: 0.168, memory: 5913, loss_cls: 0.6903, loss_bbox: 1.0113, d0.loss_cls: 0.7170, d0.loss_bbox: 1.2032, d1.loss_cls: 0.6909, d1.loss_bbox: 1.0752, d2.loss_cls: 0.6852, d2.loss_bbox: 1.0407, d3.loss_cls: 0.6850, d3.loss_bbox: 1.0249, d4.loss_cls: 0.6873, d4.loss_bbox: 1.0171, aux_task0.loss_heatmap: 0.8717, aux_task0.loss_bbox: 0.3365, aux_task1.loss_heatmap: 1.1288, aux_task1.loss_bbox: 0.3738, aux_task2.loss_heatmap: 1.3365, aux_task2.loss_bbox: 0.4108, aux_task3.loss_heatmap: 0.8954, aux_task3.loss_bbox: 0.3060, aux_task4.loss_heatmap: 0.6970, aux_task4.loss_bbox: 0.3321, aux_task5.loss_heatmap: 0.6243, aux_task5.loss_bbox: 0.3187, loss: 18.1597, grad_norm: 44.3362
2025-05-06 11:01:34,119 - mmdet - INFO - Epoch [6][100/773]	lr: 9.286e-05, eta: 3:36:20, time: 1.147, data_time: 0.006, memory: 5913, loss_cls: 0.6855, loss_bbox: 1.0343, d0.loss_cls: 0.7095, d0.loss_bbox: 1.2239, d1.loss_cls: 0.6869, d1.loss_bbox: 1.0890, d2.loss_cls: 0.6805, d2.loss_bbox: 1.0558, d3.loss_cls: 0.6805, d3.loss_bbox: 1.0414, d4.loss_cls: 0.6835, d4.loss_bbox: 1.0381, aux_task0.loss_heatmap: 0.9032, aux_task0.loss_bbox: 0.3450, aux_task1.loss_heatmap: 1.1505, aux_task1.loss_bbox: 0.3762, aux_task2.loss_heatmap: 1.3062, aux_task2.loss_bbox: 0.4052, aux_task3.loss_heatmap: 0.9460, aux_task3.loss_bbox: 0.3111, aux_task4.loss_heatmap: 0.6707, aux_task4.loss_bbox: 0.3347, aux_task5.loss_heatmap: 0.6577, aux_task5.loss_bbox: 0.3207, loss: 18.3363, grad_norm: 44.7455
2025-05-06 11:02:27,351 - mmdet - INFO - Epoch [6][150/773]	lr: 9.414e-05, eta: 3:35:15, time: 1.065, data_time: 0.006, memory: 5913, loss_cls: 0.6783, loss_bbox: 0.9884, d0.loss_cls: 0.6978, d0.loss_bbox: 1.1763, d1.loss_cls: 0.6732, d1.loss_bbox: 1.0487, d2.loss_cls: 0.6718, d2.loss_bbox: 1.0163, d3.loss_cls: 0.6714, d3.loss_bbox: 1.0016, d4.loss_cls: 0.6746, d4.loss_bbox: 0.9957, aux_task0.loss_heatmap: 0.8877, aux_task0.loss_bbox: 0.3375, aux_task1.loss_heatmap: 1.0790, aux_task1.loss_bbox: 0.3653, aux_task2.loss_heatmap: 1.1952, aux_task2.loss_bbox: 0.4127, aux_task3.loss_heatmap: 0.8693, aux_task3.loss_bbox: 0.3170, aux_task4.loss_heatmap: 0.6582, aux_task4.loss_bbox: 0.3250, aux_task5.loss_heatmap: 0.6684, aux_task5.loss_bbox: 0.3292, loss: 17.7386, grad_norm: 43.5903
2025-05-06 11:03:20,596 - mmdet - INFO - Epoch [6][200/773]	lr: 9.541e-05, eta: 3:34:09, time: 1.065, data_time: 0.005, memory: 5913, loss_cls: 0.6812, loss_bbox: 1.0109, d0.loss_cls: 0.7100, d0.loss_bbox: 1.1986, d1.loss_cls: 0.6858, d1.loss_bbox: 1.0696, d2.loss_cls: 0.6822, d2.loss_bbox: 1.0377, d3.loss_cls: 0.6802, d3.loss_bbox: 1.0229, d4.loss_cls: 0.6788, d4.loss_bbox: 1.0181, aux_task0.loss_heatmap: 0.8979, aux_task0.loss_bbox: 0.3373, aux_task1.loss_heatmap: 1.1177, aux_task1.loss_bbox: 0.3618, aux_task2.loss_heatmap: 1.2691, aux_task2.loss_bbox: 0.3980, aux_task3.loss_heatmap: 0.8185, aux_task3.loss_bbox: 0.3104, aux_task4.loss_heatmap: 0.6557, aux_task4.loss_bbox: 0.3354, aux_task5.loss_heatmap: 0.6594, aux_task5.loss_bbox: 0.3231, loss: 17.9602, grad_norm: 43.7547
2025-05-06 11:04:14,466 - mmdet - INFO - Epoch [6][250/773]	lr: 9.666e-05, eta: 3:33:06, time: 1.078, data_time: 0.006, memory: 5913, loss_cls: 0.6759, loss_bbox: 0.9804, d0.loss_cls: 0.7001, d0.loss_bbox: 1.1633, d1.loss_cls: 0.6776, d1.loss_bbox: 1.0342, d2.loss_cls: 0.6718, d2.loss_bbox: 1.0038, d3.loss_cls: 0.6726, d3.loss_bbox: 0.9878, d4.loss_cls: 0.6739, d4.loss_bbox: 0.9846, aux_task0.loss_heatmap: 0.8467, aux_task0.loss_bbox: 0.3400, aux_task1.loss_heatmap: 1.0641, aux_task1.loss_bbox: 0.3709, aux_task2.loss_heatmap: 1.2199, aux_task2.loss_bbox: 0.3833, aux_task3.loss_heatmap: 0.8799, aux_task3.loss_bbox: 0.3080, aux_task4.loss_heatmap: 0.6911, aux_task4.loss_bbox: 0.3357, aux_task5.loss_heatmap: 0.6482, aux_task5.loss_bbox: 0.3147, loss: 17.6286, grad_norm: 44.7530
2025-05-06 11:05:08,191 - mmdet - INFO - Epoch [6][300/773]	lr: 9.789e-05, eta: 3:32:03, time: 1.075, data_time: 0.005, memory: 5913, loss_cls: 0.6682, loss_bbox: 1.0067, d0.loss_cls: 0.6920, d0.loss_bbox: 1.1863, d1.loss_cls: 0.6660, d1.loss_bbox: 1.0569, d2.loss_cls: 0.6642, d2.loss_bbox: 1.0280, d3.loss_cls: 0.6642, d3.loss_bbox: 1.0170, d4.loss_cls: 0.6661, d4.loss_bbox: 1.0111, aux_task0.loss_heatmap: 0.8940, aux_task0.loss_bbox: 0.3350, aux_task1.loss_heatmap: 1.1318, aux_task1.loss_bbox: 0.3691, aux_task2.loss_heatmap: 1.1912, aux_task2.loss_bbox: 0.3920, aux_task3.loss_heatmap: 0.8896, aux_task3.loss_bbox: 0.3083, aux_task4.loss_heatmap: 0.6214, aux_task4.loss_bbox: 0.3286, aux_task5.loss_heatmap: 0.6690, aux_task5.loss_bbox: 0.3246, loss: 17.7813, grad_norm: 44.8773
2025-05-06 11:06:01,977 - mmdet - INFO - Epoch [6][350/773]	lr: 9.910e-05, eta: 3:31:00, time: 1.075, data_time: 0.005, memory: 5913, loss_cls: 0.6739, loss_bbox: 1.0084, d0.loss_cls: 0.6883, d0.loss_bbox: 1.1858, d1.loss_cls: 0.6711, d1.loss_bbox: 1.0588, d2.loss_cls: 0.6671, d2.loss_bbox: 1.0295, d3.loss_cls: 0.6679, d3.loss_bbox: 1.0178, d4.loss_cls: 0.6715, d4.loss_bbox: 1.0122, aux_task0.loss_heatmap: 0.8922, aux_task0.loss_bbox: 0.3389, aux_task1.loss_heatmap: 1.1252, aux_task1.loss_bbox: 0.3736, aux_task2.loss_heatmap: 1.2737, aux_task2.loss_bbox: 0.4065, aux_task3.loss_heatmap: 0.8795, aux_task3.loss_bbox: 0.3108, aux_task4.loss_heatmap: 0.6518, aux_task4.loss_bbox: 0.3280, aux_task5.loss_heatmap: 0.6556, aux_task5.loss_bbox: 0.3215, loss: 17.9097, grad_norm: 41.8310
2025-05-06 11:06:55,893 - mmdet - INFO - Epoch [6][400/773]	lr: 1.003e-04, eta: 3:29:57, time: 1.078, data_time: 0.005, memory: 5913, loss_cls: 0.6624, loss_bbox: 1.0168, d0.loss_cls: 0.6841, d0.loss_bbox: 1.1977, d1.loss_cls: 0.6646, d1.loss_bbox: 1.0632, d2.loss_cls: 0.6563, d2.loss_bbox: 1.0407, d3.loss_cls: 0.6547, d3.loss_bbox: 1.0282, d4.loss_cls: 0.6566, d4.loss_bbox: 1.0239, aux_task0.loss_heatmap: 0.8389, aux_task0.loss_bbox: 0.3401, aux_task1.loss_heatmap: 1.1160, aux_task1.loss_bbox: 0.3839, aux_task2.loss_heatmap: 1.2685, aux_task2.loss_bbox: 0.4041, aux_task3.loss_heatmap: 0.8689, aux_task3.loss_bbox: 0.3227, aux_task4.loss_heatmap: 0.6310, aux_task4.loss_bbox: 0.3368, aux_task5.loss_heatmap: 0.6386, aux_task5.loss_bbox: 0.3250, loss: 17.8237, grad_norm: 42.1917
2025-05-06 11:07:48,715 - mmdet - INFO - Epoch [6][450/773]	lr: 1.015e-04, eta: 3:28:52, time: 1.056, data_time: 0.005, memory: 5913, loss_cls: 0.6796, loss_bbox: 1.0000, d0.loss_cls: 0.6998, d0.loss_bbox: 1.1809, d1.loss_cls: 0.6793, d1.loss_bbox: 1.0505, d2.loss_cls: 0.6751, d2.loss_bbox: 1.0242, d3.loss_cls: 0.6754, d3.loss_bbox: 1.0104, d4.loss_cls: 0.6766, d4.loss_bbox: 1.0053, aux_task0.loss_heatmap: 0.8635, aux_task0.loss_bbox: 0.3420, aux_task1.loss_heatmap: 1.0695, aux_task1.loss_bbox: 0.3648, aux_task2.loss_heatmap: 1.2719, aux_task2.loss_bbox: 0.3894, aux_task3.loss_heatmap: 0.8340, aux_task3.loss_bbox: 0.3100, aux_task4.loss_heatmap: 0.6482, aux_task4.loss_bbox: 0.3311, aux_task5.loss_heatmap: 0.6199, aux_task5.loss_bbox: 0.3245, loss: 17.7257, grad_norm: 41.5812
2025-05-06 11:08:41,983 - mmdet - INFO - Epoch [6][500/773]	lr: 1.026e-04, eta: 3:27:48, time: 1.066, data_time: 0.005, memory: 5913, loss_cls: 0.6608, loss_bbox: 0.9817, d0.loss_cls: 0.6862, d0.loss_bbox: 1.1581, d1.loss_cls: 0.6660, d1.loss_bbox: 1.0329, d2.loss_cls: 0.6606, d2.loss_bbox: 1.0011, d3.loss_cls: 0.6588, d3.loss_bbox: 0.9889, d4.loss_cls: 0.6583, d4.loss_bbox: 0.9852, aux_task0.loss_heatmap: 0.8824, aux_task0.loss_bbox: 0.3374, aux_task1.loss_heatmap: 1.0708, aux_task1.loss_bbox: 0.3684, aux_task2.loss_heatmap: 1.2178, aux_task2.loss_bbox: 0.3944, aux_task3.loss_heatmap: 0.8030, aux_task3.loss_bbox: 0.3208, aux_task4.loss_heatmap: 0.6143, aux_task4.loss_bbox: 0.3334, aux_task5.loss_heatmap: 0.6320, aux_task5.loss_bbox: 0.3213, loss: 17.4345, grad_norm: 48.2060
2025-05-06 11:09:34,082 - mmdet - INFO - Epoch [6][550/773]	lr: 1.038e-04, eta: 3:26:42, time: 1.042, data_time: 0.005, memory: 5913, loss_cls: 0.6552, loss_bbox: 0.9902, d0.loss_cls: 0.6749, d0.loss_bbox: 1.1636, d1.loss_cls: 0.6547, d1.loss_bbox: 1.0379, d2.loss_cls: 0.6503, d2.loss_bbox: 1.0124, d3.loss_cls: 0.6502, d3.loss_bbox: 0.9974, d4.loss_cls: 0.6526, d4.loss_bbox: 0.9933, aux_task0.loss_heatmap: 0.8398, aux_task0.loss_bbox: 0.3390, aux_task1.loss_heatmap: 1.0809, aux_task1.loss_bbox: 0.3719, aux_task2.loss_heatmap: 1.1858, aux_task2.loss_bbox: 0.4053, aux_task3.loss_heatmap: 0.8625, aux_task3.loss_bbox: 0.3258, aux_task4.loss_heatmap: 0.6117, aux_task4.loss_bbox: 0.3197, aux_task5.loss_heatmap: 0.5972, aux_task5.loss_bbox: 0.3236, loss: 17.3961, grad_norm: 45.4009
2025-05-06 11:10:27,551 - mmdet - INFO - Epoch [6][600/773]	lr: 1.049e-04, eta: 3:25:39, time: 1.070, data_time: 0.005, memory: 5913, loss_cls: 0.6357, loss_bbox: 0.9794, d0.loss_cls: 0.6628, d0.loss_bbox: 1.1542, d1.loss_cls: 0.6380, d1.loss_bbox: 1.0258, d2.loss_cls: 0.6312, d2.loss_bbox: 1.0012, d3.loss_cls: 0.6309, d3.loss_bbox: 0.9885, d4.loss_cls: 0.6323, d4.loss_bbox: 0.9849, aux_task0.loss_heatmap: 0.8654, aux_task0.loss_bbox: 0.3368, aux_task1.loss_heatmap: 1.1056, aux_task1.loss_bbox: 0.3724, aux_task2.loss_heatmap: 1.1367, aux_task2.loss_bbox: 0.3956, aux_task3.loss_heatmap: 0.9114, aux_task3.loss_bbox: 0.3278, aux_task4.loss_heatmap: 0.5973, aux_task4.loss_bbox: 0.3278, aux_task5.loss_heatmap: 0.6137, aux_task5.loss_bbox: 0.3265, loss: 17.2819, grad_norm: 44.0924
2025-05-06 11:11:19,950 - mmdet - INFO - Epoch [6][650/773]	lr: 1.059e-04, eta: 3:24:34, time: 1.047, data_time: 0.005, memory: 5913, loss_cls: 0.6424, loss_bbox: 0.9657, d0.loss_cls: 0.6621, d0.loss_bbox: 1.1308, d1.loss_cls: 0.6400, d1.loss_bbox: 1.0110, d2.loss_cls: 0.6348, d2.loss_bbox: 0.9844, d3.loss_cls: 0.6355, d3.loss_bbox: 0.9700, d4.loss_cls: 0.6385, d4.loss_bbox: 0.9683, aux_task0.loss_heatmap: 0.8456, aux_task0.loss_bbox: 0.3275, aux_task1.loss_heatmap: 1.0457, aux_task1.loss_bbox: 0.3617, aux_task2.loss_heatmap: 1.1683, aux_task2.loss_bbox: 0.3871, aux_task3.loss_heatmap: 0.8696, aux_task3.loss_bbox: 0.3145, aux_task4.loss_heatmap: 0.5973, aux_task4.loss_bbox: 0.3160, aux_task5.loss_heatmap: 0.6279, aux_task5.loss_bbox: 0.3234, loss: 17.0681, grad_norm: 43.2886
2025-05-06 11:12:12,812 - mmdet - INFO - Epoch [6][700/773]	lr: 1.070e-04, eta: 3:23:30, time: 1.058, data_time: 0.005, memory: 5913, loss_cls: 0.6286, loss_bbox: 0.9701, d0.loss_cls: 0.6628, d0.loss_bbox: 1.1361, d1.loss_cls: 0.6372, d1.loss_bbox: 1.0114, d2.loss_cls: 0.6308, d2.loss_bbox: 0.9839, d3.loss_cls: 0.6270, d3.loss_bbox: 0.9736, d4.loss_cls: 0.6263, d4.loss_bbox: 0.9697, aux_task0.loss_heatmap: 0.8720, aux_task0.loss_bbox: 0.3356, aux_task1.loss_heatmap: 0.9797, aux_task1.loss_bbox: 0.3568, aux_task2.loss_heatmap: 1.2168, aux_task2.loss_bbox: 0.3879, aux_task3.loss_heatmap: 0.8367, aux_task3.loss_bbox: 0.3074, aux_task4.loss_heatmap: 0.6025, aux_task4.loss_bbox: 0.3155, aux_task5.loss_heatmap: 0.6592, aux_task5.loss_bbox: 0.3225, loss: 17.0499, grad_norm: 45.6730
2025-05-06 11:13:06,306 - mmdet - INFO - Epoch [6][750/773]	lr: 1.080e-04, eta: 3:22:28, time: 1.070, data_time: 0.005, memory: 5913, loss_cls: 0.6350, loss_bbox: 0.9772, d0.loss_cls: 0.6605, d0.loss_bbox: 1.1517, d1.loss_cls: 0.6410, d1.loss_bbox: 1.0212, d2.loss_cls: 0.6356, d2.loss_bbox: 0.9968, d3.loss_cls: 0.6320, d3.loss_bbox: 0.9861, d4.loss_cls: 0.6333, d4.loss_bbox: 0.9806, aux_task0.loss_heatmap: 0.8523, aux_task0.loss_bbox: 0.3321, aux_task1.loss_heatmap: 1.0681, aux_task1.loss_bbox: 0.3705, aux_task2.loss_heatmap: 1.1669, aux_task2.loss_bbox: 0.3971, aux_task3.loss_heatmap: 0.8347, aux_task3.loss_bbox: 0.3147, aux_task4.loss_heatmap: 0.6060, aux_task4.loss_bbox: 0.3286, aux_task5.loss_heatmap: 0.6439, aux_task5.loss_bbox: 0.3251, loss: 17.1910, grad_norm: 43.2445
2025-05-06 11:14:01,795 - mmdet - INFO - Saving checkpoint at 6 epochs
2025-05-06 11:15:09,581 - mmdet - INFO - Epoch [7][50/773]	lr: 1.095e-04, eta: 3:20:32, time: 1.337, data_time: 0.200, memory: 5913, loss_cls: 0.6481, loss_bbox: 0.9857, d0.loss_cls: 0.6648, d0.loss_bbox: 1.1485, d1.loss_cls: 0.6448, d1.loss_bbox: 1.0320, d2.loss_cls: 0.6403, d2.loss_bbox: 1.0082, d3.loss_cls: 0.6422, d3.loss_bbox: 0.9929, d4.loss_cls: 0.6449, d4.loss_bbox: 0.9881, aux_task0.loss_heatmap: 0.8284, aux_task0.loss_bbox: 0.3349, aux_task1.loss_heatmap: 1.0731, aux_task1.loss_bbox: 0.3681, aux_task2.loss_heatmap: 1.2144, aux_task2.loss_bbox: 0.3973, aux_task3.loss_heatmap: 0.7739, aux_task3.loss_bbox: 0.2978, aux_task4.loss_heatmap: 0.6464, aux_task4.loss_bbox: 0.3299, aux_task5.loss_heatmap: 0.5969, aux_task5.loss_bbox: 0.3181, loss: 17.2197, grad_norm: 40.4595
2025-05-06 11:16:06,810 - mmdet - INFO - Epoch [7][100/773]	lr: 1.105e-04, eta: 3:19:39, time: 1.145, data_time: 0.006, memory: 5913, loss_cls: 0.6526, loss_bbox: 0.9747, d0.loss_cls: 0.6704, d0.loss_bbox: 1.1378, d1.loss_cls: 0.6510, d1.loss_bbox: 1.0171, d2.loss_cls: 0.6477, d2.loss_bbox: 0.9934, d3.loss_cls: 0.6489, d3.loss_bbox: 0.9818, d4.loss_cls: 0.6484, d4.loss_bbox: 0.9782, aux_task0.loss_heatmap: 0.8809, aux_task0.loss_bbox: 0.3374, aux_task1.loss_heatmap: 1.0948, aux_task1.loss_bbox: 0.3695, aux_task2.loss_heatmap: 1.2143, aux_task2.loss_bbox: 0.3880, aux_task3.loss_heatmap: 0.8435, aux_task3.loss_bbox: 0.3020, aux_task4.loss_heatmap: 0.6389, aux_task4.loss_bbox: 0.3296, aux_task5.loss_heatmap: 0.6176, aux_task5.loss_bbox: 0.3120, loss: 17.3305, grad_norm: 42.7919
2025-05-06 11:17:04,181 - mmdet - INFO - Epoch [7][150/773]	lr: 1.114e-04, eta: 3:18:47, time: 1.147, data_time: 0.006, memory: 5913, loss_cls: 0.6373, loss_bbox: 0.9555, d0.loss_cls: 0.6585, d0.loss_bbox: 1.1167, d1.loss_cls: 0.6370, d1.loss_bbox: 1.0016, d2.loss_cls: 0.6325, d2.loss_bbox: 0.9749, d3.loss_cls: 0.6310, d3.loss_bbox: 0.9635, d4.loss_cls: 0.6322, d4.loss_bbox: 0.9600, aux_task0.loss_heatmap: 0.8408, aux_task0.loss_bbox: 0.3378, aux_task1.loss_heatmap: 1.0280, aux_task1.loss_bbox: 0.3594, aux_task2.loss_heatmap: 1.1417, aux_task2.loss_bbox: 0.4117, aux_task3.loss_heatmap: 0.7666, aux_task3.loss_bbox: 0.3135, aux_task4.loss_heatmap: 0.6226, aux_task4.loss_bbox: 0.3223, aux_task5.loss_heatmap: 0.6395, aux_task5.loss_bbox: 0.3126, loss: 16.8971, grad_norm: 43.4333
2025-05-06 11:18:01,390 - mmdet - INFO - Epoch [7][200/773]	lr: 1.123e-04, eta: 3:17:54, time: 1.144, data_time: 0.006, memory: 5913, loss_cls: 0.6430, loss_bbox: 0.9678, d0.loss_cls: 0.6702, d0.loss_bbox: 1.1327, d1.loss_cls: 0.6479, d1.loss_bbox: 1.0132, d2.loss_cls: 0.6395, d2.loss_bbox: 0.9898, d3.loss_cls: 0.6381, d3.loss_bbox: 0.9778, d4.loss_cls: 0.6406, d4.loss_bbox: 0.9730, aux_task0.loss_heatmap: 0.8317, aux_task0.loss_bbox: 0.3381, aux_task1.loss_heatmap: 1.0374, aux_task1.loss_bbox: 0.3548, aux_task2.loss_heatmap: 1.1527, aux_task2.loss_bbox: 0.3895, aux_task3.loss_heatmap: 0.8353, aux_task3.loss_bbox: 0.3035, aux_task4.loss_heatmap: 0.6313, aux_task4.loss_bbox: 0.3304, aux_task5.loss_heatmap: 0.6262, aux_task5.loss_bbox: 0.3225, loss: 17.0869, grad_norm: 42.0355
2025-05-06 11:18:58,731 - mmdet - INFO - Epoch [7][250/773]	lr: 1.132e-04, eta: 3:17:01, time: 1.147, data_time: 0.006, memory: 5913, loss_cls: 0.6157, loss_bbox: 0.9409, d0.loss_cls: 0.6451, d0.loss_bbox: 1.1033, d1.loss_cls: 0.6203, d1.loss_bbox: 0.9830, d2.loss_cls: 0.6128, d2.loss_bbox: 0.9620, d3.loss_cls: 0.6113, d3.loss_bbox: 0.9505, d4.loss_cls: 0.6123, d4.loss_bbox: 0.9476, aux_task0.loss_heatmap: 0.8003, aux_task0.loss_bbox: 0.3301, aux_task1.loss_heatmap: 1.0256, aux_task1.loss_bbox: 0.3655, aux_task2.loss_heatmap: 1.1051, aux_task2.loss_bbox: 0.3780, aux_task3.loss_heatmap: 0.7860, aux_task3.loss_bbox: 0.3145, aux_task4.loss_heatmap: 0.6194, aux_task4.loss_bbox: 0.3299, aux_task5.loss_heatmap: 0.6317, aux_task5.loss_bbox: 0.3175, loss: 16.6086, grad_norm: 41.6634
2025-05-06 11:19:55,854 - mmdet - INFO - Epoch [7][300/773]	lr: 1.141e-04, eta: 3:16:08, time: 1.142, data_time: 0.006, memory: 5913, loss_cls: 0.6285, loss_bbox: 0.9542, d0.loss_cls: 0.6506, d0.loss_bbox: 1.1108, d1.loss_cls: 0.6267, d1.loss_bbox: 0.9952, d2.loss_cls: 0.6231, d2.loss_bbox: 0.9725, d3.loss_cls: 0.6225, d3.loss_bbox: 0.9629, d4.loss_cls: 0.6252, d4.loss_bbox: 0.9564, aux_task0.loss_heatmap: 0.7984, aux_task0.loss_bbox: 0.3344, aux_task1.loss_heatmap: 1.0712, aux_task1.loss_bbox: 0.3594, aux_task2.loss_heatmap: 1.0982, aux_task2.loss_bbox: 0.3913, aux_task3.loss_heatmap: 0.8512, aux_task3.loss_bbox: 0.3114, aux_task4.loss_heatmap: 0.5708, aux_task4.loss_bbox: 0.3185, aux_task5.loss_heatmap: 0.6299, aux_task5.loss_bbox: 0.3167, loss: 16.7798, grad_norm: 43.1984
2025-05-06 11:20:53,381 - mmdet - INFO - Epoch [7][350/773]	lr: 1.149e-04, eta: 3:15:15, time: 1.151, data_time: 0.006, memory: 5913, loss_cls: 0.6178, loss_bbox: 0.9444, d0.loss_cls: 0.6419, d0.loss_bbox: 1.1044, d1.loss_cls: 0.6247, d1.loss_bbox: 0.9899, d2.loss_cls: 0.6153, d2.loss_bbox: 0.9669, d3.loss_cls: 0.6143, d3.loss_bbox: 0.9547, d4.loss_cls: 0.6142, d4.loss_bbox: 0.9498, aux_task0.loss_heatmap: 0.8024, aux_task0.loss_bbox: 0.3243, aux_task1.loss_heatmap: 1.0606, aux_task1.loss_bbox: 0.3651, aux_task2.loss_heatmap: 1.1292, aux_task2.loss_bbox: 0.3989, aux_task3.loss_heatmap: 0.8322, aux_task3.loss_bbox: 0.3081, aux_task4.loss_heatmap: 0.5965, aux_task4.loss_bbox: 0.3243, aux_task5.loss_heatmap: 0.5956, aux_task5.loss_bbox: 0.3086, loss: 16.6843, grad_norm: 44.7652
2025-05-06 11:21:50,716 - mmdet - INFO - Epoch [7][400/773]	lr: 1.157e-04, eta: 3:14:22, time: 1.147, data_time: 0.006, memory: 5913, loss_cls: 0.6335, loss_bbox: 0.9863, d0.loss_cls: 0.6586, d0.loss_bbox: 1.1480, d1.loss_cls: 0.6388, d1.loss_bbox: 1.0281, d2.loss_cls: 0.6316, d2.loss_bbox: 1.0022, d3.loss_cls: 0.6300, d3.loss_bbox: 0.9946, d4.loss_cls: 0.6318, d4.loss_bbox: 0.9906, aux_task0.loss_heatmap: 0.8460, aux_task0.loss_bbox: 0.3425, aux_task1.loss_heatmap: 1.0872, aux_task1.loss_bbox: 0.3701, aux_task2.loss_heatmap: 1.1643, aux_task2.loss_bbox: 0.3915, aux_task3.loss_heatmap: 0.8086, aux_task3.loss_bbox: 0.3228, aux_task4.loss_heatmap: 0.5864, aux_task4.loss_bbox: 0.3364, aux_task5.loss_heatmap: 0.6158, aux_task5.loss_bbox: 0.3132, loss: 17.1591, grad_norm: 41.9271
2025-05-06 11:22:47,685 - mmdet - INFO - Epoch [7][450/773]	lr: 1.165e-04, eta: 3:13:28, time: 1.139, data_time: 0.006, memory: 5913, loss_cls: 0.6262, loss_bbox: 0.9429, d0.loss_cls: 0.6452, d0.loss_bbox: 1.1031, d1.loss_cls: 0.6282, d1.loss_bbox: 0.9888, d2.loss_cls: 0.6240, d2.loss_bbox: 0.9646, d3.loss_cls: 0.6232, d3.loss_bbox: 0.9530, d4.loss_cls: 0.6232, d4.loss_bbox: 0.9480, aux_task0.loss_heatmap: 0.8074, aux_task0.loss_bbox: 0.3300, aux_task1.loss_heatmap: 1.0071, aux_task1.loss_bbox: 0.3619, aux_task2.loss_heatmap: 1.1875, aux_task2.loss_bbox: 0.3771, aux_task3.loss_heatmap: 0.8758, aux_task3.loss_bbox: 0.3091, aux_task4.loss_heatmap: 0.6257, aux_task4.loss_bbox: 0.3215, aux_task5.loss_heatmap: 0.5659, aux_task5.loss_bbox: 0.3071, loss: 16.7467, grad_norm: 42.4116
2025-05-06 11:23:43,973 - mmdet - INFO - Epoch [7][500/773]	lr: 1.172e-04, eta: 3:12:33, time: 1.127, data_time: 0.006, memory: 5913, loss_cls: 0.6174, loss_bbox: 0.9361, d0.loss_cls: 0.6372, d0.loss_bbox: 1.0881, d1.loss_cls: 0.6212, d1.loss_bbox: 0.9744, d2.loss_cls: 0.6173, d2.loss_bbox: 0.9517, d3.loss_cls: 0.6142, d3.loss_bbox: 0.9422, d4.loss_cls: 0.6131, d4.loss_bbox: 0.9402, aux_task0.loss_heatmap: 0.8148, aux_task0.loss_bbox: 0.3316, aux_task1.loss_heatmap: 1.0189, aux_task1.loss_bbox: 0.3585, aux_task2.loss_heatmap: 1.1688, aux_task2.loss_bbox: 0.3890, aux_task3.loss_heatmap: 0.7984, aux_task3.loss_bbox: 0.3187, aux_task4.loss_heatmap: 0.5787, aux_task4.loss_bbox: 0.3175, aux_task5.loss_heatmap: 0.5765, aux_task5.loss_bbox: 0.3157, loss: 16.5401, grad_norm: 38.9879
2025-05-06 11:24:37,324 - mmdet - INFO - Epoch [7][550/773]	lr: 1.179e-04, eta: 3:11:32, time: 1.067, data_time: 0.005, memory: 5913, loss_cls: 0.6025, loss_bbox: 0.9257, d0.loss_cls: 0.6277, d0.loss_bbox: 1.0820, d1.loss_cls: 0.6077, d1.loss_bbox: 0.9676, d2.loss_cls: 0.6031, d2.loss_bbox: 0.9423, d3.loss_cls: 0.6015, d3.loss_bbox: 0.9300, d4.loss_cls: 0.5992, d4.loss_bbox: 0.9291, aux_task0.loss_heatmap: 0.7728, aux_task0.loss_bbox: 0.3202, aux_task1.loss_heatmap: 1.0114, aux_task1.loss_bbox: 0.3523, aux_task2.loss_heatmap: 1.0990, aux_task2.loss_bbox: 0.3859, aux_task3.loss_heatmap: 0.8079, aux_task3.loss_bbox: 0.3172, aux_task4.loss_heatmap: 0.5753, aux_task4.loss_bbox: 0.3129, aux_task5.loss_heatmap: 0.5815, aux_task5.loss_bbox: 0.3157, loss: 16.2706, grad_norm: 40.8681
2025-05-06 11:25:30,719 - mmdet - INFO - Epoch [7][600/773]	lr: 1.186e-04, eta: 3:10:31, time: 1.068, data_time: 0.005, memory: 5913, loss_cls: 0.5935, loss_bbox: 0.9438, d0.loss_cls: 0.6201, d0.loss_bbox: 1.1021, d1.loss_cls: 0.6016, d1.loss_bbox: 0.9849, d2.loss_cls: 0.5940, d2.loss_bbox: 0.9620, d3.loss_cls: 0.5924, d3.loss_bbox: 0.9518, d4.loss_cls: 0.5924, d4.loss_bbox: 0.9478, aux_task0.loss_heatmap: 0.8062, aux_task0.loss_bbox: 0.3315, aux_task1.loss_heatmap: 1.0435, aux_task1.loss_bbox: 0.3625, aux_task2.loss_heatmap: 1.0891, aux_task2.loss_bbox: 0.3908, aux_task3.loss_heatmap: 0.7924, aux_task3.loss_bbox: 0.3155, aux_task4.loss_heatmap: 0.5582, aux_task4.loss_bbox: 0.3234, aux_task5.loss_heatmap: 0.5901, aux_task5.loss_bbox: 0.3166, loss: 16.4062, grad_norm: 39.5674
2025-05-06 11:26:23,803 - mmdet - INFO - Epoch [7][650/773]	lr: 1.193e-04, eta: 3:09:30, time: 1.062, data_time: 0.005, memory: 5913, loss_cls: 0.5940, loss_bbox: 0.9179, d0.loss_cls: 0.6222, d0.loss_bbox: 1.0750, d1.loss_cls: 0.5994, d1.loss_bbox: 0.9601, d2.loss_cls: 0.5934, d2.loss_bbox: 0.9372, d3.loss_cls: 0.5926, d3.loss_bbox: 0.9258, d4.loss_cls: 0.5922, d4.loss_bbox: 0.9216, aux_task0.loss_heatmap: 0.8120, aux_task0.loss_bbox: 0.3236, aux_task1.loss_heatmap: 0.9801, aux_task1.loss_bbox: 0.3583, aux_task2.loss_heatmap: 1.0616, aux_task2.loss_bbox: 0.3777, aux_task3.loss_heatmap: 0.8538, aux_task3.loss_bbox: 0.3107, aux_task4.loss_heatmap: 0.5688, aux_task4.loss_bbox: 0.3114, aux_task5.loss_heatmap: 0.5889, aux_task5.loss_bbox: 0.3218, loss: 16.2002, grad_norm: 38.6715
2025-05-06 11:27:16,607 - mmdet - INFO - Epoch [7][700/773]	lr: 1.199e-04, eta: 3:08:28, time: 1.056, data_time: 0.005, memory: 5913, loss_cls: 0.5953, loss_bbox: 0.9268, d0.loss_cls: 0.6224, d0.loss_bbox: 1.0854, d1.loss_cls: 0.6006, d1.loss_bbox: 0.9720, d2.loss_cls: 0.5968, d2.loss_bbox: 0.9453, d3.loss_cls: 0.5953, d3.loss_bbox: 0.9346, d4.loss_cls: 0.5940, d4.loss_bbox: 0.9320, aux_task0.loss_heatmap: 0.7879, aux_task0.loss_bbox: 0.3259, aux_task1.loss_heatmap: 0.9617, aux_task1.loss_bbox: 0.3497, aux_task2.loss_heatmap: 1.1183, aux_task2.loss_bbox: 0.3804, aux_task3.loss_heatmap: 0.7592, aux_task3.loss_bbox: 0.2998, aux_task4.loss_heatmap: 0.5665, aux_task4.loss_bbox: 0.3102, aux_task5.loss_heatmap: 0.6155, aux_task5.loss_bbox: 0.3137, loss: 16.1894, grad_norm: 37.7765
2025-05-06 11:28:10,064 - mmdet - INFO - Epoch [7][750/773]	lr: 1.205e-04, eta: 3:07:27, time: 1.069, data_time: 0.005, memory: 5913, loss_cls: 0.5871, loss_bbox: 0.9361, d0.loss_cls: 0.6212, d0.loss_bbox: 1.0935, d1.loss_cls: 0.5952, d1.loss_bbox: 0.9765, d2.loss_cls: 0.5879, d2.loss_bbox: 0.9540, d3.loss_cls: 0.5856, d3.loss_bbox: 0.9411, d4.loss_cls: 0.5858, d4.loss_bbox: 0.9374, aux_task0.loss_heatmap: 0.8092, aux_task0.loss_bbox: 0.3182, aux_task1.loss_heatmap: 0.9784, aux_task1.loss_bbox: 0.3619, aux_task2.loss_heatmap: 1.0691, aux_task2.loss_bbox: 0.3889, aux_task3.loss_heatmap: 0.7766, aux_task3.loss_bbox: 0.3046, aux_task4.loss_heatmap: 0.5515, aux_task4.loss_bbox: 0.3220, aux_task5.loss_heatmap: 0.5886, aux_task5.loss_bbox: 0.3187, loss: 16.1891, grad_norm: 39.0130
2025-05-06 11:28:35,096 - mmdet - INFO - Saving checkpoint at 7 epochs
2025-05-06 11:29:42,852 - mmdet - INFO - Epoch [8][50/773]	lr: 1.212e-04, eta: 3:05:39, time: 1.335, data_time: 0.193, memory: 5913, loss_cls: 0.6020, loss_bbox: 0.9271, d0.loss_cls: 0.6253, d0.loss_bbox: 1.0792, d1.loss_cls: 0.6077, d1.loss_bbox: 0.9638, d2.loss_cls: 0.6019, d2.loss_bbox: 0.9426, d3.loss_cls: 0.5990, d3.loss_bbox: 0.9323, d4.loss_cls: 0.6001, d4.loss_bbox: 0.9295, aux_task0.loss_heatmap: 0.7530, aux_task0.loss_bbox: 0.3247, aux_task1.loss_heatmap: 1.0057, aux_task1.loss_bbox: 0.3582, aux_task2.loss_heatmap: 1.1253, aux_task2.loss_bbox: 0.3857, aux_task3.loss_heatmap: 0.7844, aux_task3.loss_bbox: 0.2989, aux_task4.loss_heatmap: 0.5995, aux_task4.loss_bbox: 0.3226, aux_task5.loss_heatmap: 0.5502, aux_task5.loss_bbox: 0.3147, loss: 16.2332, grad_norm: 41.4901
2025-05-06 11:30:40,254 - mmdet - INFO - Epoch [8][100/773]	lr: 1.217e-04, eta: 3:04:46, time: 1.148, data_time: 0.006, memory: 6106, loss_cls: 0.5955, loss_bbox: 0.9260, d0.loss_cls: 0.6168, d0.loss_bbox: 1.0738, d1.loss_cls: 0.5979, d1.loss_bbox: 0.9644, d2.loss_cls: 0.5912, d2.loss_bbox: 0.9401, d3.loss_cls: 0.5914, d3.loss_bbox: 0.9301, d4.loss_cls: 0.5924, d4.loss_bbox: 0.9291, aux_task0.loss_heatmap: 0.7668, aux_task0.loss_bbox: 0.3143, aux_task1.loss_heatmap: 1.0176, aux_task1.loss_bbox: 0.3680, aux_task2.loss_heatmap: 1.1462, aux_task2.loss_bbox: 0.3843, aux_task3.loss_heatmap: 0.7869, aux_task3.loss_bbox: 0.2941, aux_task4.loss_heatmap: 0.5798, aux_task4.loss_bbox: 0.3230, aux_task5.loss_heatmap: 0.5792, aux_task5.loss_bbox: 0.3094, loss: 16.2181, grad_norm: 40.2494
2025-05-06 11:31:36,773 - mmdet - INFO - Epoch [8][150/773]	lr: 1.222e-04, eta: 3:03:52, time: 1.131, data_time: 0.006, memory: 6106, loss_cls: 0.6007, loss_bbox: 0.9270, d0.loss_cls: 0.6273, d0.loss_bbox: 1.0770, d1.loss_cls: 0.6077, d1.loss_bbox: 0.9640, d2.loss_cls: 0.6003, d2.loss_bbox: 0.9439, d3.loss_cls: 0.5972, d3.loss_bbox: 0.9335, d4.loss_cls: 0.5997, d4.loss_bbox: 0.9298, aux_task0.loss_heatmap: 0.8000, aux_task0.loss_bbox: 0.3239, aux_task1.loss_heatmap: 0.9655, aux_task1.loss_bbox: 0.3486, aux_task2.loss_heatmap: 1.0318, aux_task2.loss_bbox: 0.3966, aux_task3.loss_heatmap: 0.8597, aux_task3.loss_bbox: 0.3139, aux_task4.loss_heatmap: 0.5883, aux_task4.loss_bbox: 0.3167, aux_task5.loss_heatmap: 0.6357, aux_task5.loss_bbox: 0.3122, loss: 16.3013, grad_norm: 41.4931
2025-05-06 11:32:30,382 - mmdet - INFO - Epoch [8][200/773]	lr: 1.226e-04, eta: 3:02:53, time: 1.072, data_time: 0.005, memory: 6106, loss_cls: 0.5936, loss_bbox: 0.9280, d0.loss_cls: 0.6181, d0.loss_bbox: 1.0689, d1.loss_cls: 0.5985, d1.loss_bbox: 0.9659, d2.loss_cls: 0.5927, d2.loss_bbox: 0.9416, d3.loss_cls: 0.5928, d3.loss_bbox: 0.9306, d4.loss_cls: 0.5907, d4.loss_bbox: 0.9290, aux_task0.loss_heatmap: 0.7867, aux_task0.loss_bbox: 0.3307, aux_task1.loss_heatmap: 0.9952, aux_task1.loss_bbox: 0.3448, aux_task2.loss_heatmap: 1.0620, aux_task2.loss_bbox: 0.3790, aux_task3.loss_heatmap: 0.7871, aux_task3.loss_bbox: 0.3033, aux_task4.loss_heatmap: 0.5821, aux_task4.loss_bbox: 0.3222, aux_task5.loss_heatmap: 0.6190, aux_task5.loss_bbox: 0.3110, loss: 16.1731, grad_norm: 38.4493
2025-05-06 11:33:24,241 - mmdet - INFO - Epoch [8][250/773]	lr: 1.230e-04, eta: 3:01:54, time: 1.077, data_time: 0.005, memory: 6106, loss_cls: 0.5870, loss_bbox: 0.9126, d0.loss_cls: 0.6176, d0.loss_bbox: 1.0610, d1.loss_cls: 0.5937, d1.loss_bbox: 0.9579, d2.loss_cls: 0.5893, d2.loss_bbox: 0.9319, d3.loss_cls: 0.5866, d3.loss_bbox: 0.9195, d4.loss_cls: 0.5858, d4.loss_bbox: 0.9161, aux_task0.loss_heatmap: 0.7779, aux_task0.loss_bbox: 0.3171, aux_task1.loss_heatmap: 1.0052, aux_task1.loss_bbox: 0.3614, aux_task2.loss_heatmap: 1.0566, aux_task2.loss_bbox: 0.3649, aux_task3.loss_heatmap: 0.7424, aux_task3.loss_bbox: 0.3078, aux_task4.loss_heatmap: 0.6096, aux_task4.loss_bbox: 0.3270, aux_task5.loss_heatmap: 0.6048, aux_task5.loss_bbox: 0.3119, loss: 16.0455, grad_norm: 39.0187
2025-05-06 11:34:17,208 - mmdet - INFO - Epoch [8][300/773]	lr: 1.234e-04, eta: 3:00:53, time: 1.060, data_time: 0.005, memory: 6106, loss_cls: 0.5700, loss_bbox: 0.9047, d0.loss_cls: 0.5984, d0.loss_bbox: 1.0534, d1.loss_cls: 0.5771, d1.loss_bbox: 0.9500, d2.loss_cls: 0.5723, d2.loss_bbox: 0.9260, d3.loss_cls: 0.5714, d3.loss_bbox: 0.9127, d4.loss_cls: 0.5715, d4.loss_bbox: 0.9090, aux_task0.loss_heatmap: 0.7596, aux_task0.loss_bbox: 0.3184, aux_task1.loss_heatmap: 1.0152, aux_task1.loss_bbox: 0.3464, aux_task2.loss_heatmap: 0.9962, aux_task2.loss_bbox: 0.3635, aux_task3.loss_heatmap: 0.7549, aux_task3.loss_bbox: 0.3013, aux_task4.loss_heatmap: 0.5462, aux_task4.loss_bbox: 0.3131, aux_task5.loss_heatmap: 0.5472, aux_task5.loss_bbox: 0.3057, loss: 15.6839, grad_norm: 40.7772
2025-05-06 11:35:10,927 - mmdet - INFO - Epoch [8][350/773]	lr: 1.237e-04, eta: 2:59:54, time: 1.074, data_time: 0.005, memory: 6106, loss_cls: 0.5824, loss_bbox: 0.9212, d0.loss_cls: 0.6110, d0.loss_bbox: 1.0662, d1.loss_cls: 0.5877, d1.loss_bbox: 0.9622, d2.loss_cls: 0.5829, d2.loss_bbox: 0.9377, d3.loss_cls: 0.5792, d3.loss_bbox: 0.9276, d4.loss_cls: 0.5814, d4.loss_bbox: 0.9234, aux_task0.loss_heatmap: 0.7768, aux_task0.loss_bbox: 0.3232, aux_task1.loss_heatmap: 1.0323, aux_task1.loss_bbox: 0.3606, aux_task2.loss_heatmap: 1.1035, aux_task2.loss_bbox: 0.3770, aux_task3.loss_heatmap: 0.8105, aux_task3.loss_bbox: 0.3107, aux_task4.loss_heatmap: 0.5732, aux_task4.loss_bbox: 0.3143, aux_task5.loss_heatmap: 0.5690, aux_task5.loss_bbox: 0.3103, loss: 16.1242, grad_norm: 37.3302
2025-05-06 11:36:04,345 - mmdet - INFO - Epoch [8][400/773]	lr: 1.240e-04, eta: 2:58:55, time: 1.069, data_time: 0.005, memory: 6106, loss_cls: 0.5822, loss_bbox: 0.9253, d0.loss_cls: 0.6059, d0.loss_bbox: 1.0684, d1.loss_cls: 0.5869, d1.loss_bbox: 0.9654, d2.loss_cls: 0.5784, d2.loss_bbox: 0.9448, d3.loss_cls: 0.5782, d3.loss_bbox: 0.9345, d4.loss_cls: 0.5803, d4.loss_bbox: 0.9297, aux_task0.loss_heatmap: 0.8289, aux_task0.loss_bbox: 0.3246, aux_task1.loss_heatmap: 1.0023, aux_task1.loss_bbox: 0.3565, aux_task2.loss_heatmap: 1.0645, aux_task2.loss_bbox: 0.3774, aux_task3.loss_heatmap: 0.7673, aux_task3.loss_bbox: 0.3031, aux_task4.loss_heatmap: 0.5646, aux_task4.loss_bbox: 0.3231, aux_task5.loss_heatmap: 0.5552, aux_task5.loss_bbox: 0.3003, loss: 16.0480, grad_norm: 35.5793
2025-05-06 11:37:03,013 - mmdet - INFO - Epoch [8][450/773]	lr: 1.242e-04, eta: 2:58:04, time: 1.173, data_time: 0.005, memory: 6106, loss_cls: 0.5838, loss_bbox: 0.9288, d0.loss_cls: 0.6055, d0.loss_bbox: 1.0714, d1.loss_cls: 0.5873, d1.loss_bbox: 0.9675, d2.loss_cls: 0.5835, d2.loss_bbox: 0.9441, d3.loss_cls: 0.5816, d3.loss_bbox: 0.9370, d4.loss_cls: 0.5817, d4.loss_bbox: 0.9330, aux_task0.loss_heatmap: 0.7619, aux_task0.loss_bbox: 0.3174, aux_task1.loss_heatmap: 0.9494, aux_task1.loss_bbox: 0.3564, aux_task2.loss_heatmap: 1.1007, aux_task2.loss_bbox: 0.3708, aux_task3.loss_heatmap: 0.7692, aux_task3.loss_bbox: 0.3191, aux_task4.loss_heatmap: 0.6021, aux_task4.loss_bbox: 0.3195, aux_task5.loss_heatmap: 0.5404, aux_task5.loss_bbox: 0.3017, loss: 16.0134, grad_norm: 37.6337
2025-05-06 11:37:56,427 - mmdet - INFO - Epoch [8][500/773]	lr: 1.245e-04, eta: 2:57:05, time: 1.068, data_time: 0.005, memory: 6106, loss_cls: 0.5730, loss_bbox: 0.9147, d0.loss_cls: 0.6061, d0.loss_bbox: 1.0615, d1.loss_cls: 0.5842, d1.loss_bbox: 0.9506, d2.loss_cls: 0.5754, d2.loss_bbox: 0.9284, d3.loss_cls: 0.5729, d3.loss_bbox: 0.9193, d4.loss_cls: 0.5711, d4.loss_bbox: 0.9173, aux_task0.loss_heatmap: 0.7816, aux_task0.loss_bbox: 0.3155, aux_task1.loss_heatmap: 0.9489, aux_task1.loss_bbox: 0.3560, aux_task2.loss_heatmap: 1.0657, aux_task2.loss_bbox: 0.3877, aux_task3.loss_heatmap: 0.7714, aux_task3.loss_bbox: 0.3137, aux_task4.loss_heatmap: 0.5522, aux_task4.loss_bbox: 0.3170, aux_task5.loss_heatmap: 0.5772, aux_task5.loss_bbox: 0.3115, loss: 15.8730, grad_norm: 35.7778
2025-05-06 11:39:01,158 - mmdet - INFO - Epoch [8][550/773]	lr: 1.246e-04, eta: 2:56:24, time: 1.295, data_time: 0.005, memory: 6106, loss_cls: 0.5914, loss_bbox: 0.9076, d0.loss_cls: 0.6162, d0.loss_bbox: 1.0525, d1.loss_cls: 0.5987, d1.loss_bbox: 0.9503, d2.loss_cls: 0.5921, d2.loss_bbox: 0.9245, d3.loss_cls: 0.5884, d3.loss_bbox: 0.9146, d4.loss_cls: 0.5889, d4.loss_bbox: 0.9102, aux_task0.loss_heatmap: 0.7702, aux_task0.loss_bbox: 0.3200, aux_task1.loss_heatmap: 0.9742, aux_task1.loss_bbox: 0.3480, aux_task2.loss_heatmap: 1.0240, aux_task2.loss_bbox: 0.3762, aux_task3.loss_heatmap: 0.7903, aux_task3.loss_bbox: 0.3102, aux_task4.loss_heatmap: 0.5646, aux_task4.loss_bbox: 0.3077, aux_task5.loss_heatmap: 0.5588, aux_task5.loss_bbox: 0.3098, loss: 15.8892, grad_norm: 36.9302
2025-05-06 11:39:54,493 - mmdet - INFO - Epoch [8][600/773]	lr: 1.248e-04, eta: 2:55:24, time: 1.067, data_time: 0.005, memory: 6106, loss_cls: 0.5629, loss_bbox: 0.9086, d0.loss_cls: 0.5939, d0.loss_bbox: 1.0553, d1.loss_cls: 0.5777, d1.loss_bbox: 0.9472, d2.loss_cls: 0.5685, d2.loss_bbox: 0.9241, d3.loss_cls: 0.5654, d3.loss_bbox: 0.9147, d4.loss_cls: 0.5632, d4.loss_bbox: 0.9127, aux_task0.loss_heatmap: 0.7534, aux_task0.loss_bbox: 0.3240, aux_task1.loss_heatmap: 0.9891, aux_task1.loss_bbox: 0.3578, aux_task2.loss_heatmap: 1.0103, aux_task2.loss_bbox: 0.3751, aux_task3.loss_heatmap: 0.7816, aux_task3.loss_bbox: 0.3051, aux_task4.loss_heatmap: 0.5265, aux_task4.loss_bbox: 0.3172, aux_task5.loss_heatmap: 0.5689, aux_task5.loss_bbox: 0.3145, loss: 15.7177, grad_norm: 40.4569
2025-05-06 11:40:47,453 - mmdet - INFO - Epoch [8][650/773]	lr: 1.249e-04, eta: 2:54:25, time: 1.059, data_time: 0.005, memory: 6106, loss_cls: 0.5697, loss_bbox: 0.9025, d0.loss_cls: 0.6000, d0.loss_bbox: 1.0459, d1.loss_cls: 0.5784, d1.loss_bbox: 0.9454, d2.loss_cls: 0.5695, d2.loss_bbox: 0.9240, d3.loss_cls: 0.5674, d3.loss_bbox: 0.9131, d4.loss_cls: 0.5673, d4.loss_bbox: 0.9082, aux_task0.loss_heatmap: 0.7715, aux_task0.loss_bbox: 0.3211, aux_task1.loss_heatmap: 0.9398, aux_task1.loss_bbox: 0.3491, aux_task2.loss_heatmap: 1.0091, aux_task2.loss_bbox: 0.3717, aux_task3.loss_heatmap: 0.7830, aux_task3.loss_bbox: 0.3026, aux_task4.loss_heatmap: 0.5508, aux_task4.loss_bbox: 0.3027, aux_task5.loss_heatmap: 0.5610, aux_task5.loss_bbox: 0.3165, loss: 15.6703, grad_norm: 35.3376
2025-05-06 11:41:40,334 - mmdet - INFO - Epoch [8][700/773]	lr: 1.250e-04, eta: 2:53:25, time: 1.057, data_time: 0.005, memory: 6106, loss_cls: 0.5666, loss_bbox: 0.9032, d0.loss_cls: 0.5948, d0.loss_bbox: 1.0476, d1.loss_cls: 0.5715, d1.loss_bbox: 0.9433, d2.loss_cls: 0.5645, d2.loss_bbox: 0.9208, d3.loss_cls: 0.5634, d3.loss_bbox: 0.9109, d4.loss_cls: 0.5632, d4.loss_bbox: 0.9087, aux_task0.loss_heatmap: 0.7555, aux_task0.loss_bbox: 0.3112, aux_task1.loss_heatmap: 0.9175, aux_task1.loss_bbox: 0.3497, aux_task2.loss_heatmap: 1.0782, aux_task2.loss_bbox: 0.3767, aux_task3.loss_heatmap: 0.7582, aux_task3.loss_bbox: 0.3036, aux_task4.loss_heatmap: 0.5433, aux_task4.loss_bbox: 0.3076, aux_task5.loss_heatmap: 0.5733, aux_task5.loss_bbox: 0.3085, loss: 15.6419, grad_norm: 39.5802
2025-05-06 11:42:33,150 - mmdet - INFO - Epoch [8][750/773]	lr: 1.250e-04, eta: 2:52:25, time: 1.057, data_time: 0.005, memory: 6106, loss_cls: 0.5648, loss_bbox: 0.9117, d0.loss_cls: 0.5973, d0.loss_bbox: 1.0610, d1.loss_cls: 0.5722, d1.loss_bbox: 0.9529, d2.loss_cls: 0.5658, d2.loss_bbox: 0.9283, d3.loss_cls: 0.5639, d3.loss_bbox: 0.9184, d4.loss_cls: 0.5623, d4.loss_bbox: 0.9155, aux_task0.loss_heatmap: 0.7341, aux_task0.loss_bbox: 0.3067, aux_task1.loss_heatmap: 0.9450, aux_task1.loss_bbox: 0.3579, aux_task2.loss_heatmap: 0.9889, aux_task2.loss_bbox: 0.3719, aux_task3.loss_heatmap: 0.7523, aux_task3.loss_bbox: 0.2971, aux_task4.loss_heatmap: 0.5104, aux_task4.loss_bbox: 0.3158, aux_task5.loss_heatmap: 0.5941, aux_task5.loss_bbox: 0.3127, loss: 15.6008, grad_norm: 39.9478
2025-05-06 11:43:29,778 - mmdet - INFO - Saving checkpoint at 8 epochs
2025-05-06 11:44:34,435 - mmdet - INFO - Epoch [9][50/773]	lr: 1.250e-04, eta: 2:50:38, time: 1.274, data_time: 0.194, memory: 6106, loss_cls: 0.5663, loss_bbox: 0.9232, d0.loss_cls: 0.5912, d0.loss_bbox: 1.0540, d1.loss_cls: 0.5723, d1.loss_bbox: 0.9540, d2.loss_cls: 0.5661, d2.loss_bbox: 0.9354, d3.loss_cls: 0.5647, d3.loss_bbox: 0.9245, d4.loss_cls: 0.5651, d4.loss_bbox: 0.9245, aux_task0.loss_heatmap: 0.7458, aux_task0.loss_bbox: 0.3099, aux_task1.loss_heatmap: 0.9499, aux_task1.loss_bbox: 0.3454, aux_task2.loss_heatmap: 1.0765, aux_task2.loss_bbox: 0.3853, aux_task3.loss_heatmap: 0.7498, aux_task3.loss_bbox: 0.2966, aux_task4.loss_heatmap: 0.5970, aux_task4.loss_bbox: 0.3161, aux_task5.loss_heatmap: 0.5197, aux_task5.loss_bbox: 0.3052, loss: 15.7383, grad_norm: 34.6359
2025-05-06 11:45:27,499 - mmdet - INFO - Epoch [9][100/773]	lr: 1.250e-04, eta: 2:49:39, time: 1.062, data_time: 0.005, memory: 6106, loss_cls: 0.5759, loss_bbox: 0.9015, d0.loss_cls: 0.5984, d0.loss_bbox: 1.0374, d1.loss_cls: 0.5764, d1.loss_bbox: 0.9382, d2.loss_cls: 0.5718, d2.loss_bbox: 0.9179, d3.loss_cls: 0.5709, d3.loss_bbox: 0.9087, d4.loss_cls: 0.5721, d4.loss_bbox: 0.9065, aux_task0.loss_heatmap: 0.7222, aux_task0.loss_bbox: 0.2949, aux_task1.loss_heatmap: 0.9866, aux_task1.loss_bbox: 0.3534, aux_task2.loss_heatmap: 1.0865, aux_task2.loss_bbox: 0.3790, aux_task3.loss_heatmap: 0.7683, aux_task3.loss_bbox: 0.2944, aux_task4.loss_heatmap: 0.5657, aux_task4.loss_bbox: 0.3180, aux_task5.loss_heatmap: 0.5736, aux_task5.loss_bbox: 0.3062, loss: 15.7245, grad_norm: 36.3911
2025-05-06 11:46:20,418 - mmdet - INFO - Epoch [9][150/773]	lr: 1.249e-04, eta: 2:48:39, time: 1.059, data_time: 0.005, memory: 6106, loss_cls: 0.5614, loss_bbox: 0.8833, d0.loss_cls: 0.5916, d0.loss_bbox: 1.0159, d1.loss_cls: 0.5708, d1.loss_bbox: 0.9176, d2.loss_cls: 0.5646, d2.loss_bbox: 0.8975, d3.loss_cls: 0.5618, d3.loss_bbox: 0.8879, d4.loss_cls: 0.5608, d4.loss_bbox: 0.8865, aux_task0.loss_heatmap: 0.7456, aux_task0.loss_bbox: 0.3015, aux_task1.loss_heatmap: 0.9039, aux_task1.loss_bbox: 0.3418, aux_task2.loss_heatmap: 0.9744, aux_task2.loss_bbox: 0.3860, aux_task3.loss_heatmap: 0.6980, aux_task3.loss_bbox: 0.3090, aux_task4.loss_heatmap: 0.5787, aux_task4.loss_bbox: 0.3111, aux_task5.loss_heatmap: 0.5512, aux_task5.loss_bbox: 0.3045, loss: 15.3055, grad_norm: 33.3431
2025-05-06 11:47:13,085 - mmdet - INFO - Epoch [9][200/773]	lr: 1.249e-04, eta: 2:47:40, time: 1.053, data_time: 0.005, memory: 6106, loss_cls: 0.5478, loss_bbox: 0.8827, d0.loss_cls: 0.5787, d0.loss_bbox: 1.0263, d1.loss_cls: 0.5576, d1.loss_bbox: 0.9250, d2.loss_cls: 0.5496, d2.loss_bbox: 0.9014, d3.loss_cls: 0.5468, d3.loss_bbox: 0.8905, d4.loss_cls: 0.5462, d4.loss_bbox: 0.8858, aux_task0.loss_heatmap: 0.6947, aux_task0.loss_bbox: 0.2995, aux_task1.loss_heatmap: 0.9419, aux_task1.loss_bbox: 0.3374, aux_task2.loss_heatmap: 1.0037, aux_task2.loss_bbox: 0.3723, aux_task3.loss_heatmap: 0.7176, aux_task3.loss_bbox: 0.2968, aux_task4.loss_heatmap: 0.5307, aux_task4.loss_bbox: 0.3134, aux_task5.loss_heatmap: 0.5641, aux_task5.loss_bbox: 0.2995, loss: 15.2099, grad_norm: 38.9574
2025-05-06 11:48:06,414 - mmdet - INFO - Epoch [9][250/773]	lr: 1.248e-04, eta: 2:46:42, time: 1.067, data_time: 0.005, memory: 6106, loss_cls: 0.5562, loss_bbox: 0.8924, d0.loss_cls: 0.5892, d0.loss_bbox: 1.0364, d1.loss_cls: 0.5680, d1.loss_bbox: 0.9318, d2.loss_cls: 0.5574, d2.loss_bbox: 0.9088, d3.loss_cls: 0.5546, d3.loss_bbox: 0.8985, d4.loss_cls: 0.5549, d4.loss_bbox: 0.8951, aux_task0.loss_heatmap: 0.7539, aux_task0.loss_bbox: 0.3156, aux_task1.loss_heatmap: 0.8960, aux_task1.loss_bbox: 0.3482, aux_task2.loss_heatmap: 0.9586, aux_task2.loss_bbox: 0.3638, aux_task3.loss_heatmap: 0.7308, aux_task3.loss_bbox: 0.3052, aux_task4.loss_heatmap: 0.5708, aux_task4.loss_bbox: 0.3171, aux_task5.loss_heatmap: 0.5689, aux_task5.loss_bbox: 0.3038, loss: 15.3760, grad_norm: 39.1972
2025-05-06 11:49:00,047 - mmdet - INFO - Epoch [9][300/773]	lr: 1.247e-04, eta: 2:45:44, time: 1.073, data_time: 0.005, memory: 6106, loss_cls: 0.5443, loss_bbox: 0.8651, d0.loss_cls: 0.5706, d0.loss_bbox: 0.9970, d1.loss_cls: 0.5492, d1.loss_bbox: 0.9034, d2.loss_cls: 0.5412, d2.loss_bbox: 0.8835, d3.loss_cls: 0.5407, d3.loss_bbox: 0.8738, d4.loss_cls: 0.5410, d4.loss_bbox: 0.8702, aux_task0.loss_heatmap: 0.7148, aux_task0.loss_bbox: 0.2983, aux_task1.loss_heatmap: 0.9859, aux_task1.loss_bbox: 0.3456, aux_task2.loss_heatmap: 0.9106, aux_task2.loss_bbox: 0.3634, aux_task3.loss_heatmap: 0.7284, aux_task3.loss_bbox: 0.2960, aux_task4.loss_heatmap: 0.5206, aux_task4.loss_bbox: 0.3101, aux_task5.loss_heatmap: 0.6109, aux_task5.loss_bbox: 0.3117, loss: 15.0764, grad_norm: 37.4109
2025-05-06 11:49:52,869 - mmdet - INFO - Epoch [9][350/773]	lr: 1.246e-04, eta: 2:44:45, time: 1.056, data_time: 0.005, memory: 6106, loss_cls: 0.5510, loss_bbox: 0.8958, d0.loss_cls: 0.5815, d0.loss_bbox: 1.0324, d1.loss_cls: 0.5577, d1.loss_bbox: 0.9326, d2.loss_cls: 0.5517, d2.loss_bbox: 0.9101, d3.loss_cls: 0.5502, d3.loss_bbox: 0.9000, d4.loss_cls: 0.5486, d4.loss_bbox: 0.8981, aux_task0.loss_heatmap: 0.7107, aux_task0.loss_bbox: 0.3043, aux_task1.loss_heatmap: 0.9778, aux_task1.loss_bbox: 0.3571, aux_task2.loss_heatmap: 1.0062, aux_task2.loss_bbox: 0.3685, aux_task3.loss_heatmap: 0.7536, aux_task3.loss_bbox: 0.2949, aux_task4.loss_heatmap: 0.5330, aux_task4.loss_bbox: 0.3122, aux_task5.loss_heatmap: 0.5453, aux_task5.loss_bbox: 0.3032, loss: 15.3764, grad_norm: 37.1895
2025-05-06 11:50:45,533 - mmdet - INFO - Epoch [9][400/773]	lr: 1.244e-04, eta: 2:43:46, time: 1.053, data_time: 0.005, memory: 6106, loss_cls: 0.5627, loss_bbox: 0.9113, d0.loss_cls: 0.5956, d0.loss_bbox: 1.0480, d1.loss_cls: 0.5765, d1.loss_bbox: 0.9505, d2.loss_cls: 0.5656, d2.loss_bbox: 0.9299, d3.loss_cls: 0.5639, d3.loss_bbox: 0.9207, d4.loss_cls: 0.5609, d4.loss_bbox: 0.9174, aux_task0.loss_heatmap: 0.7296, aux_task0.loss_bbox: 0.3127, aux_task1.loss_heatmap: 0.9501, aux_task1.loss_bbox: 0.3538, aux_task2.loss_heatmap: 1.0481, aux_task2.loss_bbox: 0.3774, aux_task3.loss_heatmap: 0.7638, aux_task3.loss_bbox: 0.3064, aux_task4.loss_heatmap: 0.5478, aux_task4.loss_bbox: 0.3206, aux_task5.loss_heatmap: 0.5331, aux_task5.loss_bbox: 0.3048, loss: 15.6512, grad_norm: 34.8414
2025-05-06 11:51:38,344 - mmdet - INFO - Epoch [9][450/773]	lr: 1.243e-04, eta: 2:42:47, time: 1.056, data_time: 0.005, memory: 6106, loss_cls: 0.5503, loss_bbox: 0.8972, d0.loss_cls: 0.5854, d0.loss_bbox: 1.0299, d1.loss_cls: 0.5595, d1.loss_bbox: 0.9342, d2.loss_cls: 0.5540, d2.loss_bbox: 0.9126, d3.loss_cls: 0.5518, d3.loss_bbox: 0.9039, d4.loss_cls: 0.5499, d4.loss_bbox: 0.9016, aux_task0.loss_heatmap: 0.7265, aux_task0.loss_bbox: 0.3051, aux_task1.loss_heatmap: 0.9148, aux_task1.loss_bbox: 0.3501, aux_task2.loss_heatmap: 1.0322, aux_task2.loss_bbox: 0.3597, aux_task3.loss_heatmap: 0.7213, aux_task3.loss_bbox: 0.3061, aux_task4.loss_heatmap: 0.5459, aux_task4.loss_bbox: 0.3114, aux_task5.loss_heatmap: 0.5323, aux_task5.loss_bbox: 0.3070, loss: 15.3429, grad_norm: 35.8672
2025-05-06 11:52:31,146 - mmdet - INFO - Epoch [9][500/773]	lr: 1.241e-04, eta: 2:41:48, time: 1.056, data_time: 0.005, memory: 6106, loss_cls: 0.5601, loss_bbox: 0.8966, d0.loss_cls: 0.5890, d0.loss_bbox: 1.0280, d1.loss_cls: 0.5659, d1.loss_bbox: 0.9316, d2.loss_cls: 0.5602, d2.loss_bbox: 0.9112, d3.loss_cls: 0.5590, d3.loss_bbox: 0.9041, d4.loss_cls: 0.5595, d4.loss_bbox: 0.8994, aux_task0.loss_heatmap: 0.7406, aux_task0.loss_bbox: 0.2995, aux_task1.loss_heatmap: 0.9276, aux_task1.loss_bbox: 0.3541, aux_task2.loss_heatmap: 1.0036, aux_task2.loss_bbox: 0.3759, aux_task3.loss_heatmap: 0.6713, aux_task3.loss_bbox: 0.3047, aux_task4.loss_heatmap: 0.5171, aux_task4.loss_bbox: 0.3100, aux_task5.loss_heatmap: 0.5821, aux_task5.loss_bbox: 0.3106, loss: 15.3616, grad_norm: 36.7397
2025-05-06 11:53:23,593 - mmdet - INFO - Epoch [9][550/773]	lr: 1.239e-04, eta: 2:40:49, time: 1.049, data_time: 0.005, memory: 6106, loss_cls: 0.5380, loss_bbox: 0.8683, d0.loss_cls: 0.5679, d0.loss_bbox: 1.0028, d1.loss_cls: 0.5475, d1.loss_bbox: 0.9033, d2.loss_cls: 0.5380, d2.loss_bbox: 0.8840, d3.loss_cls: 0.5379, d3.loss_bbox: 0.8738, d4.loss_cls: 0.5366, d4.loss_bbox: 0.8719, aux_task0.loss_heatmap: 0.7362, aux_task0.loss_bbox: 0.3073, aux_task1.loss_heatmap: 0.9008, aux_task1.loss_bbox: 0.3387, aux_task2.loss_heatmap: 0.9466, aux_task2.loss_bbox: 0.3697, aux_task3.loss_heatmap: 0.7833, aux_task3.loss_bbox: 0.3028, aux_task4.loss_heatmap: 0.5150, aux_task4.loss_bbox: 0.2997, aux_task5.loss_heatmap: 0.5063, aux_task5.loss_bbox: 0.3051, loss: 14.9814, grad_norm: 35.4584
2025-05-06 11:54:16,581 - mmdet - INFO - Epoch [9][600/773]	lr: 1.237e-04, eta: 2:39:51, time: 1.060, data_time: 0.005, memory: 6106, loss_cls: 0.5424, loss_bbox: 0.8975, d0.loss_cls: 0.5751, d0.loss_bbox: 1.0373, d1.loss_cls: 0.5534, d1.loss_bbox: 0.9362, d2.loss_cls: 0.5467, d2.loss_bbox: 0.9146, d3.loss_cls: 0.5417, d3.loss_bbox: 0.9050, d4.loss_cls: 0.5414, d4.loss_bbox: 0.9023, aux_task0.loss_heatmap: 0.7500, aux_task0.loss_bbox: 0.3017, aux_task1.loss_heatmap: 0.9509, aux_task1.loss_bbox: 0.3480, aux_task2.loss_heatmap: 0.9312, aux_task2.loss_bbox: 0.3742, aux_task3.loss_heatmap: 0.7301, aux_task3.loss_bbox: 0.3035, aux_task4.loss_heatmap: 0.5045, aux_task4.loss_bbox: 0.3083, aux_task5.loss_heatmap: 0.5448, aux_task5.loss_bbox: 0.3129, loss: 15.2538, grad_norm: 35.0472
2025-05-06 11:55:09,859 - mmdet - INFO - Epoch [9][650/773]	lr: 1.235e-04, eta: 2:38:53, time: 1.065, data_time: 0.005, memory: 6106, loss_cls: 0.5353, loss_bbox: 0.8643, d0.loss_cls: 0.5657, d0.loss_bbox: 1.0030, d1.loss_cls: 0.5459, d1.loss_bbox: 0.9048, d2.loss_cls: 0.5405, d2.loss_bbox: 0.8826, d3.loss_cls: 0.5359, d3.loss_bbox: 0.8723, d4.loss_cls: 0.5339, d4.loss_bbox: 0.8694, aux_task0.loss_heatmap: 0.7614, aux_task0.loss_bbox: 0.3068, aux_task1.loss_heatmap: 0.8910, aux_task1.loss_bbox: 0.3453, aux_task2.loss_heatmap: 0.9477, aux_task2.loss_bbox: 0.3652, aux_task3.loss_heatmap: 0.7377, aux_task3.loss_bbox: 0.2934, aux_task4.loss_heatmap: 0.5166, aux_task4.loss_bbox: 0.3022, aux_task5.loss_heatmap: 0.5269, aux_task5.loss_bbox: 0.3067, loss: 14.9548, grad_norm: 34.9365
2025-05-06 11:56:03,605 - mmdet - INFO - Epoch [9][700/773]	lr: 1.233e-04, eta: 2:37:56, time: 1.075, data_time: 0.005, memory: 6106, loss_cls: 0.5291, loss_bbox: 0.8744, d0.loss_cls: 0.5609, d0.loss_bbox: 1.0048, d1.loss_cls: 0.5387, d1.loss_bbox: 0.9105, d2.loss_cls: 0.5331, d2.loss_bbox: 0.8876, d3.loss_cls: 0.5291, d3.loss_bbox: 0.8793, d4.loss_cls: 0.5272, d4.loss_bbox: 0.8777, aux_task0.loss_heatmap: 0.7570, aux_task0.loss_bbox: 0.3080, aux_task1.loss_heatmap: 0.8790, aux_task1.loss_bbox: 0.3347, aux_task2.loss_heatmap: 0.9863, aux_task2.loss_bbox: 0.3612, aux_task3.loss_heatmap: 0.7604, aux_task3.loss_bbox: 0.3024, aux_task4.loss_heatmap: 0.4992, aux_task4.loss_bbox: 0.2999, aux_task5.loss_heatmap: 0.5402, aux_task5.loss_bbox: 0.3062, loss: 14.9870, grad_norm: 34.7750
2025-05-06 11:56:56,309 - mmdet - INFO - Epoch [9][750/773]	lr: 1.230e-04, eta: 2:36:58, time: 1.054, data_time: 0.005, memory: 6106, loss_cls: 0.5333, loss_bbox: 0.8779, d0.loss_cls: 0.5639, d0.loss_bbox: 1.0128, d1.loss_cls: 0.5411, d1.loss_bbox: 0.9177, d2.loss_cls: 0.5350, d2.loss_bbox: 0.8942, d3.loss_cls: 0.5320, d3.loss_bbox: 0.8856, d4.loss_cls: 0.5325, d4.loss_bbox: 0.8828, aux_task0.loss_heatmap: 0.7115, aux_task0.loss_bbox: 0.2916, aux_task1.loss_heatmap: 0.9020, aux_task1.loss_bbox: 0.3479, aux_task2.loss_heatmap: 0.9462, aux_task2.loss_bbox: 0.3748, aux_task3.loss_heatmap: 0.7907, aux_task3.loss_bbox: 0.2931, aux_task4.loss_heatmap: 0.4995, aux_task4.loss_bbox: 0.3092, aux_task5.loss_heatmap: 0.5308, aux_task5.loss_bbox: 0.3082, loss: 15.0142, grad_norm: 33.9368
2025-05-06 11:57:21,009 - mmdet - INFO - Saving checkpoint at 9 epochs
2025-05-06 11:58:23,717 - mmdet - INFO - Epoch [10][50/773]	lr: 1.226e-04, eta: 2:35:14, time: 1.235, data_time: 0.177, memory: 6106, loss_cls: 0.5383, loss_bbox: 0.8815, d0.loss_cls: 0.5629, d0.loss_bbox: 1.0078, d1.loss_cls: 0.5418, d1.loss_bbox: 0.9184, d2.loss_cls: 0.5369, d2.loss_bbox: 0.8975, d3.loss_cls: 0.5352, d3.loss_bbox: 0.8884, d4.loss_cls: 0.5355, d4.loss_bbox: 0.8866, aux_task0.loss_heatmap: 0.7025, aux_task0.loss_bbox: 0.2999, aux_task1.loss_heatmap: 0.9212, aux_task1.loss_bbox: 0.3404, aux_task2.loss_heatmap: 1.0125, aux_task2.loss_bbox: 0.3818, aux_task3.loss_heatmap: 0.7291, aux_task3.loss_bbox: 0.2785, aux_task4.loss_heatmap: 0.5397, aux_task4.loss_bbox: 0.3068, aux_task5.loss_heatmap: 0.4906, aux_task5.loss_bbox: 0.3009, loss: 15.0346, grad_norm: 33.3129
2025-05-06 11:59:16,451 - mmdet - INFO - Epoch [10][100/773]	lr: 1.223e-04, eta: 2:34:16, time: 1.055, data_time: 0.005, memory: 6106, loss_cls: 0.5439, loss_bbox: 0.8918, d0.loss_cls: 0.5707, d0.loss_bbox: 1.0237, d1.loss_cls: 0.5518, d1.loss_bbox: 0.9291, d2.loss_cls: 0.5440, d2.loss_bbox: 0.9108, d3.loss_cls: 0.5439, d3.loss_bbox: 0.9019, d4.loss_cls: 0.5410, d4.loss_bbox: 0.8986, aux_task0.loss_heatmap: 0.7297, aux_task0.loss_bbox: 0.2993, aux_task1.loss_heatmap: 0.9553, aux_task1.loss_bbox: 0.3532, aux_task2.loss_heatmap: 1.0474, aux_task2.loss_bbox: 0.3753, aux_task3.loss_heatmap: 0.7057, aux_task3.loss_bbox: 0.2859, aux_task4.loss_heatmap: 0.5454, aux_task4.loss_bbox: 0.3091, aux_task5.loss_heatmap: 0.5378, aux_task5.loss_bbox: 0.3080, loss: 15.3030, grad_norm: 34.0528
2025-05-06 12:00:09,580 - mmdet - INFO - Epoch [10][150/773]	lr: 1.220e-04, eta: 2:33:19, time: 1.063, data_time: 0.005, memory: 6106, loss_cls: 0.5300, loss_bbox: 0.8621, d0.loss_cls: 0.5630, d0.loss_bbox: 0.9980, d1.loss_cls: 0.5402, d1.loss_bbox: 0.9012, d2.loss_cls: 0.5319, d2.loss_bbox: 0.8830, d3.loss_cls: 0.5288, d3.loss_bbox: 0.8747, d4.loss_cls: 0.5282, d4.loss_bbox: 0.8698, aux_task0.loss_heatmap: 0.6874, aux_task0.loss_bbox: 0.2907, aux_task1.loss_heatmap: 0.8976, aux_task1.loss_bbox: 0.3374, aux_task2.loss_heatmap: 0.9388, aux_task2.loss_bbox: 0.3785, aux_task3.loss_heatmap: 0.7106, aux_task3.loss_bbox: 0.2969, aux_task4.loss_heatmap: 0.5273, aux_task4.loss_bbox: 0.3010, aux_task5.loss_heatmap: 0.5382, aux_task5.loss_bbox: 0.2964, loss: 14.8115, grad_norm: 35.8352
2025-05-06 12:01:03,144 - mmdet - INFO - Epoch [10][200/773]	lr: 1.216e-04, eta: 2:32:22, time: 1.071, data_time: 0.005, memory: 6106, loss_cls: 0.5452, loss_bbox: 0.8688, d0.loss_cls: 0.5775, d0.loss_bbox: 1.0057, d1.loss_cls: 0.5566, d1.loss_bbox: 0.9061, d2.loss_cls: 0.5460, d2.loss_bbox: 0.8879, d3.loss_cls: 0.5457, d3.loss_bbox: 0.8779, d4.loss_cls: 0.5440, d4.loss_bbox: 0.8744, aux_task0.loss_heatmap: 0.7489, aux_task0.loss_bbox: 0.2971, aux_task1.loss_heatmap: 0.9186, aux_task1.loss_bbox: 0.3267, aux_task2.loss_heatmap: 0.9638, aux_task2.loss_bbox: 0.3697, aux_task3.loss_heatmap: 0.6764, aux_task3.loss_bbox: 0.2853, aux_task4.loss_heatmap: 0.5532, aux_task4.loss_bbox: 0.3097, aux_task5.loss_heatmap: 0.5643, aux_task5.loss_bbox: 0.3057, loss: 15.0552, grad_norm: 35.2857
2025-05-06 12:01:56,357 - mmdet - INFO - Epoch [10][250/773]	lr: 1.213e-04, eta: 2:31:25, time: 1.064, data_time: 0.005, memory: 6106, loss_cls: 0.5221, loss_bbox: 0.8579, d0.loss_cls: 0.5575, d0.loss_bbox: 0.9924, d1.loss_cls: 0.5340, d1.loss_bbox: 0.8953, d2.loss_cls: 0.5228, d2.loss_bbox: 0.8766, d3.loss_cls: 0.5220, d3.loss_bbox: 0.8687, d4.loss_cls: 0.5217, d4.loss_bbox: 0.8656, aux_task0.loss_heatmap: 0.6987, aux_task0.loss_bbox: 0.2890, aux_task1.loss_heatmap: 0.8686, aux_task1.loss_bbox: 0.3436, aux_task2.loss_heatmap: 0.9464, aux_task2.loss_bbox: 0.3553, aux_task3.loss_heatmap: 0.6850, aux_task3.loss_bbox: 0.2963, aux_task4.loss_heatmap: 0.5463, aux_task4.loss_bbox: 0.3102, aux_task5.loss_heatmap: 0.5300, aux_task5.loss_bbox: 0.3014, loss: 14.7073, grad_norm: 33.5475
2025-05-06 12:02:49,438 - mmdet - INFO - Epoch [10][300/773]	lr: 1.209e-04, eta: 2:30:28, time: 1.062, data_time: 0.005, memory: 6106, loss_cls: 0.5226, loss_bbox: 0.8673, d0.loss_cls: 0.5535, d0.loss_bbox: 0.9978, d1.loss_cls: 0.5354, d1.loss_bbox: 0.9057, d2.loss_cls: 0.5266, d2.loss_bbox: 0.8885, d3.loss_cls: 0.5223, d3.loss_bbox: 0.8795, d4.loss_cls: 0.5204, d4.loss_bbox: 0.8770, aux_task0.loss_heatmap: 0.7116, aux_task0.loss_bbox: 0.2967, aux_task1.loss_heatmap: 0.9552, aux_task1.loss_bbox: 0.3351, aux_task2.loss_heatmap: 0.8998, aux_task2.loss_bbox: 0.3459, aux_task3.loss_heatmap: 0.7462, aux_task3.loss_bbox: 0.2917, aux_task4.loss_heatmap: 0.4911, aux_task4.loss_bbox: 0.3027, aux_task5.loss_heatmap: 0.5805, aux_task5.loss_bbox: 0.3002, loss: 14.8532, grad_norm: 32.6151
2025-05-06 12:03:44,173 - mmdet - INFO - Epoch [10][350/773]	lr: 1.205e-04, eta: 2:29:32, time: 1.094, data_time: 0.005, memory: 6106, loss_cls: 0.5193, loss_bbox: 0.8530, d0.loss_cls: 0.5498, d0.loss_bbox: 0.9934, d1.loss_cls: 0.5281, d1.loss_bbox: 0.8991, d2.loss_cls: 0.5210, d2.loss_bbox: 0.8767, d3.loss_cls: 0.5189, d3.loss_bbox: 0.8684, d4.loss_cls: 0.5191, d4.loss_bbox: 0.8634, aux_task0.loss_heatmap: 0.6740, aux_task0.loss_bbox: 0.2811, aux_task1.loss_heatmap: 0.9390, aux_task1.loss_bbox: 0.3475, aux_task2.loss_heatmap: 0.9372, aux_task2.loss_bbox: 0.3571, aux_task3.loss_heatmap: 0.6335, aux_task3.loss_bbox: 0.2943, aux_task4.loss_heatmap: 0.5042, aux_task4.loss_bbox: 0.3033, aux_task5.loss_heatmap: 0.5083, aux_task5.loss_bbox: 0.2961, loss: 14.5857, grad_norm: 33.3654
2025-05-06 12:04:41,510 - mmdet - INFO - Epoch [10][400/773]	lr: 1.201e-04, eta: 2:28:40, time: 1.147, data_time: 0.006, memory: 6106, loss_cls: 0.5260, loss_bbox: 0.8757, d0.loss_cls: 0.5631, d0.loss_bbox: 1.0150, d1.loss_cls: 0.5381, d1.loss_bbox: 0.9238, d2.loss_cls: 0.5303, d2.loss_bbox: 0.8992, d3.loss_cls: 0.5279, d3.loss_bbox: 0.8882, d4.loss_cls: 0.5263, d4.loss_bbox: 0.8842, aux_task0.loss_heatmap: 0.7205, aux_task0.loss_bbox: 0.3025, aux_task1.loss_heatmap: 0.9167, aux_task1.loss_bbox: 0.3453, aux_task2.loss_heatmap: 0.9819, aux_task2.loss_bbox: 0.3701, aux_task3.loss_heatmap: 0.6836, aux_task3.loss_bbox: 0.3019, aux_task4.loss_heatmap: 0.5076, aux_task4.loss_bbox: 0.3122, aux_task5.loss_heatmap: 0.5248, aux_task5.loss_bbox: 0.2995, loss: 14.9645, grad_norm: 31.0037
2025-05-06 12:05:38,680 - mmdet - INFO - Epoch [10][450/773]	lr: 1.197e-04, eta: 2:27:47, time: 1.143, data_time: 0.006, memory: 6106, loss_cls: 0.5223, loss_bbox: 0.8527, d0.loss_cls: 0.5494, d0.loss_bbox: 0.9864, d1.loss_cls: 0.5296, d1.loss_bbox: 0.8957, d2.loss_cls: 0.5222, d2.loss_bbox: 0.8752, d3.loss_cls: 0.5206, d3.loss_bbox: 0.8647, d4.loss_cls: 0.5202, d4.loss_bbox: 0.8621, aux_task0.loss_heatmap: 0.6926, aux_task0.loss_bbox: 0.2912, aux_task1.loss_heatmap: 0.8748, aux_task1.loss_bbox: 0.3401, aux_task2.loss_heatmap: 0.9555, aux_task2.loss_bbox: 0.3520, aux_task3.loss_heatmap: 0.7147, aux_task3.loss_bbox: 0.2971, aux_task4.loss_heatmap: 0.5259, aux_task4.loss_bbox: 0.3038, aux_task5.loss_heatmap: 0.5067, aux_task5.loss_bbox: 0.2985, loss: 14.6540, grad_norm: 33.2488
2025-05-06 12:06:35,642 - mmdet - INFO - Epoch [10][500/773]	lr: 1.193e-04, eta: 2:26:54, time: 1.139, data_time: 0.006, memory: 6106, loss_cls: 0.5167, loss_bbox: 0.8492, d0.loss_cls: 0.5452, d0.loss_bbox: 0.9900, d1.loss_cls: 0.5281, d1.loss_bbox: 0.8942, d2.loss_cls: 0.5208, d2.loss_bbox: 0.8740, d3.loss_cls: 0.5173, d3.loss_bbox: 0.8647, d4.loss_cls: 0.5157, d4.loss_bbox: 0.8601, aux_task0.loss_heatmap: 0.6744, aux_task0.loss_bbox: 0.2955, aux_task1.loss_heatmap: 0.8816, aux_task1.loss_bbox: 0.3470, aux_task2.loss_heatmap: 0.9340, aux_task2.loss_bbox: 0.3712, aux_task3.loss_heatmap: 0.6601, aux_task3.loss_bbox: 0.2982, aux_task4.loss_heatmap: 0.4835, aux_task4.loss_bbox: 0.3035, aux_task5.loss_heatmap: 0.4998, aux_task5.loss_bbox: 0.3013, loss: 14.5259, grad_norm: 32.3960
2025-05-06 12:07:32,543 - mmdet - INFO - Epoch [10][550/773]	lr: 1.188e-04, eta: 2:26:01, time: 1.138, data_time: 0.006, memory: 6106, loss_cls: 0.5145, loss_bbox: 0.8408, d0.loss_cls: 0.5459, d0.loss_bbox: 0.9721, d1.loss_cls: 0.5250, d1.loss_bbox: 0.8859, d2.loss_cls: 0.5192, d2.loss_bbox: 0.8639, d3.loss_cls: 0.5140, d3.loss_bbox: 0.8548, d4.loss_cls: 0.5128, d4.loss_bbox: 0.8502, aux_task0.loss_heatmap: 0.6971, aux_task0.loss_bbox: 0.2924, aux_task1.loss_heatmap: 0.9060, aux_task1.loss_bbox: 0.3362, aux_task2.loss_heatmap: 0.9300, aux_task2.loss_bbox: 0.3695, aux_task3.loss_heatmap: 0.7040, aux_task3.loss_bbox: 0.2974, aux_task4.loss_heatmap: 0.4987, aux_task4.loss_bbox: 0.2934, aux_task5.loss_heatmap: 0.4896, aux_task5.loss_bbox: 0.3065, loss: 14.5200, grad_norm: 33.8615
2025-05-06 12:08:29,604 - mmdet - INFO - Epoch [10][600/773]	lr: 1.184e-04, eta: 2:25:08, time: 1.141, data_time: 0.006, memory: 6106, loss_cls: 0.5020, loss_bbox: 0.8439, d0.loss_cls: 0.5396, d0.loss_bbox: 0.9770, d1.loss_cls: 0.5142, d1.loss_bbox: 0.8847, d2.loss_cls: 0.5059, d2.loss_bbox: 0.8665, d3.loss_cls: 0.5040, d3.loss_bbox: 0.8579, d4.loss_cls: 0.5024, d4.loss_bbox: 0.8527, aux_task0.loss_heatmap: 0.6976, aux_task0.loss_bbox: 0.2792, aux_task1.loss_heatmap: 0.9095, aux_task1.loss_bbox: 0.3336, aux_task2.loss_heatmap: 0.8666, aux_task2.loss_bbox: 0.3531, aux_task3.loss_heatmap: 0.7285, aux_task3.loss_bbox: 0.2932, aux_task4.loss_heatmap: 0.4705, aux_task4.loss_bbox: 0.3004, aux_task5.loss_heatmap: 0.4966, aux_task5.loss_bbox: 0.3011, loss: 14.3807, grad_norm: 31.4865
2025-05-06 12:09:27,116 - mmdet - INFO - Epoch [10][650/773]	lr: 1.179e-04, eta: 2:24:15, time: 1.150, data_time: 0.006, memory: 6106, loss_cls: 0.5153, loss_bbox: 0.8403, d0.loss_cls: 0.5465, d0.loss_bbox: 0.9754, d1.loss_cls: 0.5234, d1.loss_bbox: 0.8848, d2.loss_cls: 0.5132, d2.loss_bbox: 0.8645, d3.loss_cls: 0.5115, d3.loss_bbox: 0.8561, d4.loss_cls: 0.5130, d4.loss_bbox: 0.8498, aux_task0.loss_heatmap: 0.7015, aux_task0.loss_bbox: 0.2830, aux_task1.loss_heatmap: 0.8672, aux_task1.loss_bbox: 0.3319, aux_task2.loss_heatmap: 0.8876, aux_task2.loss_bbox: 0.3518, aux_task3.loss_heatmap: 0.7540, aux_task3.loss_bbox: 0.3090, aux_task4.loss_heatmap: 0.4851, aux_task4.loss_bbox: 0.2915, aux_task5.loss_heatmap: 0.5337, aux_task5.loss_bbox: 0.3060, loss: 14.4960, grad_norm: 31.4308
2025-05-06 12:10:28,825 - mmdet - INFO - Epoch [10][700/773]	lr: 1.174e-04, eta: 2:23:27, time: 1.234, data_time: 0.006, memory: 6106, loss_cls: 0.5065, loss_bbox: 0.8488, d0.loss_cls: 0.5395, d0.loss_bbox: 0.9862, d1.loss_cls: 0.5160, d1.loss_bbox: 0.8972, d2.loss_cls: 0.5086, d2.loss_bbox: 0.8745, d3.loss_cls: 0.5067, d3.loss_bbox: 0.8641, d4.loss_cls: 0.5046, d4.loss_bbox: 0.8602, aux_task0.loss_heatmap: 0.6794, aux_task0.loss_bbox: 0.2892, aux_task1.loss_heatmap: 0.8542, aux_task1.loss_bbox: 0.3265, aux_task2.loss_heatmap: 0.9577, aux_task2.loss_bbox: 0.3619, aux_task3.loss_heatmap: 0.7177, aux_task3.loss_bbox: 0.3185, aux_task4.loss_heatmap: 0.4764, aux_task4.loss_bbox: 0.2931, aux_task5.loss_heatmap: 0.5220, aux_task5.loss_bbox: 0.3066, loss: 14.5162, grad_norm: 32.0504
2025-05-06 12:11:25,695 - mmdet - INFO - Epoch [10][750/773]	lr: 1.169e-04, eta: 2:22:34, time: 1.138, data_time: 0.006, memory: 6106, loss_cls: 0.5115, loss_bbox: 0.8576, d0.loss_cls: 0.5472, d0.loss_bbox: 0.9878, d1.loss_cls: 0.5226, d1.loss_bbox: 0.8999, d2.loss_cls: 0.5136, d2.loss_bbox: 0.8808, d3.loss_cls: 0.5120, d3.loss_bbox: 0.8727, d4.loss_cls: 0.5096, d4.loss_bbox: 0.8694, aux_task0.loss_heatmap: 0.6961, aux_task0.loss_bbox: 0.2840, aux_task1.loss_heatmap: 0.8782, aux_task1.loss_bbox: 0.3406, aux_task2.loss_heatmap: 0.9313, aux_task2.loss_bbox: 0.3748, aux_task3.loss_heatmap: 0.7087, aux_task3.loss_bbox: 0.2828, aux_task4.loss_heatmap: 0.4872, aux_task4.loss_bbox: 0.3025, aux_task5.loss_heatmap: 0.5251, aux_task5.loss_bbox: 0.3122, loss: 14.6083, grad_norm: 32.1498
2025-05-06 12:11:50,162 - mmdet - INFO - Saving checkpoint at 10 epochs
2025-05-06 12:31:38,748 - mmdet - INFO - Exp name: lidar_0075v_900q_hednet_hednet_split40.py
2025-05-06 12:31:40,907 - mmdet - INFO - Epoch(val) [10][1505]	pts_bbox_NuScenes/car_AP_dist_0.5: 0.2986, pts_bbox_NuScenes/car_AP_dist_1.0: 0.4734, pts_bbox_NuScenes/car_AP_dist_2.0: 0.5828, pts_bbox_NuScenes/car_AP_dist_4.0: 0.6574, pts_bbox_NuScenes/car_trans_err: 0.3848, pts_bbox_NuScenes/car_scale_err: 0.1864, pts_bbox_NuScenes/car_orient_err: 0.9952, pts_bbox_NuScenes/car_vel_err: 1.2064, pts_bbox_NuScenes/car_attr_err: 0.3978, pts_bbox_NuScenes/mATE: 0.5660, pts_bbox_NuScenes/mASE: 0.3241, pts_bbox_NuScenes/mAOE: 1.3460, pts_bbox_NuScenes/mAVE: 1.0402, pts_bbox_NuScenes/mAAE: 0.4310, pts_bbox_NuScenes/truck_AP_dist_0.5: 0.0194, pts_bbox_NuScenes/truck_AP_dist_1.0: 0.1135, pts_bbox_NuScenes/truck_AP_dist_2.0: 0.2042, pts_bbox_NuScenes/truck_AP_dist_4.0: 0.2598, pts_bbox_NuScenes/truck_trans_err: 0.6772, pts_bbox_NuScenes/truck_scale_err: 0.2742, pts_bbox_NuScenes/truck_orient_err: 1.5904, pts_bbox_NuScenes/truck_vel_err: 0.9515, pts_bbox_NuScenes/truck_attr_err: 0.3851, pts_bbox_NuScenes/construction_vehicle_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/construction_vehicle_AP_dist_1.0: 0.0049, pts_bbox_NuScenes/construction_vehicle_AP_dist_2.0: 0.0411, pts_bbox_NuScenes/construction_vehicle_AP_dist_4.0: 0.0835, pts_bbox_NuScenes/construction_vehicle_trans_err: 0.8956, pts_bbox_NuScenes/construction_vehicle_scale_err: 0.4822, pts_bbox_NuScenes/construction_vehicle_orient_err: 1.5314, pts_bbox_NuScenes/construction_vehicle_vel_err: 0.1340, pts_bbox_NuScenes/construction_vehicle_attr_err: 0.3698, pts_bbox_NuScenes/bus_AP_dist_0.5: 0.0214, pts_bbox_NuScenes/bus_AP_dist_1.0: 0.1428, pts_bbox_NuScenes/bus_AP_dist_2.0: 0.3185, pts_bbox_NuScenes/bus_AP_dist_4.0: 0.4062, pts_bbox_NuScenes/bus_trans_err: 0.7495, pts_bbox_NuScenes/bus_scale_err: 0.2704, pts_bbox_NuScenes/bus_orient_err: 1.4161, pts_bbox_NuScenes/bus_vel_err: 2.4388, pts_bbox_NuScenes/bus_attr_err: 0.6778, pts_bbox_NuScenes/trailer_AP_dist_0.5: 0.0004, pts_bbox_NuScenes/trailer_AP_dist_1.0: 0.0239, pts_bbox_NuScenes/trailer_AP_dist_2.0: 0.0706, pts_bbox_NuScenes/trailer_AP_dist_4.0: 0.1539, pts_bbox_NuScenes/trailer_trans_err: 0.7947, pts_bbox_NuScenes/trailer_scale_err: 0.3076, pts_bbox_NuScenes/trailer_orient_err: 1.4836, pts_bbox_NuScenes/trailer_vel_err: 0.3879, pts_bbox_NuScenes/trailer_attr_err: 0.1986, pts_bbox_NuScenes/barrier_AP_dist_0.5: 0.0379, pts_bbox_NuScenes/barrier_AP_dist_1.0: 0.1999, pts_bbox_NuScenes/barrier_AP_dist_2.0: 0.3645, pts_bbox_NuScenes/barrier_AP_dist_4.0: 0.4240, pts_bbox_NuScenes/barrier_trans_err: 0.6952, pts_bbox_NuScenes/barrier_scale_err: 0.3444, pts_bbox_NuScenes/barrier_orient_err: 0.5646, pts_bbox_NuScenes/barrier_vel_err: nan, pts_bbox_NuScenes/barrier_attr_err: nan, pts_bbox_NuScenes/motorcycle_AP_dist_0.5: 0.0547, pts_bbox_NuScenes/motorcycle_AP_dist_1.0: 0.0864, pts_bbox_NuScenes/motorcycle_AP_dist_2.0: 0.1031, pts_bbox_NuScenes/motorcycle_AP_dist_4.0: 0.1131, pts_bbox_NuScenes/motorcycle_trans_err: 0.3647, pts_bbox_NuScenes/motorcycle_scale_err: 0.2838, pts_bbox_NuScenes/motorcycle_orient_err: 1.5561, pts_bbox_NuScenes/motorcycle_vel_err: 1.8054, pts_bbox_NuScenes/motorcycle_attr_err: 0.5096, pts_bbox_NuScenes/bicycle_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/bicycle_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/bicycle_AP_dist_2.0: 0.0000, pts_bbox_NuScenes/bicycle_AP_dist_4.0: 0.0000, pts_bbox_NuScenes/bicycle_trans_err: 0.3750, pts_bbox_NuScenes/bicycle_scale_err: 0.3437, pts_bbox_NuScenes/bicycle_orient_err: 1.5119, pts_bbox_NuScenes/bicycle_vel_err: 0.4395, pts_bbox_NuScenes/bicycle_attr_err: 0.1043, pts_bbox_NuScenes/pedestrian_AP_dist_0.5: 0.2964, pts_bbox_NuScenes/pedestrian_AP_dist_1.0: 0.5374, pts_bbox_NuScenes/pedestrian_AP_dist_2.0: 0.6035, pts_bbox_NuScenes/pedestrian_AP_dist_4.0: 0.6393, pts_bbox_NuScenes/pedestrian_trans_err: 0.4369, pts_bbox_NuScenes/pedestrian_scale_err: 0.3006, pts_bbox_NuScenes/pedestrian_orient_err: 1.4649, pts_bbox_NuScenes/pedestrian_vel_err: 0.9581, pts_bbox_NuScenes/pedestrian_attr_err: 0.8053, pts_bbox_NuScenes/traffic_cone_AP_dist_0.5: 0.2502, pts_bbox_NuScenes/traffic_cone_AP_dist_1.0: 0.2880, pts_bbox_NuScenes/traffic_cone_AP_dist_2.0: 0.3191, pts_bbox_NuScenes/traffic_cone_AP_dist_4.0: 0.3729, pts_bbox_NuScenes/traffic_cone_trans_err: 0.2861, pts_bbox_NuScenes/traffic_cone_scale_err: 0.4472, pts_bbox_NuScenes/traffic_cone_orient_err: nan, pts_bbox_NuScenes/traffic_cone_vel_err: nan, pts_bbox_NuScenes/traffic_cone_attr_err: nan, pts_bbox_NuScenes/NDS: 0.2750, pts_bbox_NuScenes/mAP: 0.2142
2025-05-06 12:32:45,623 - mmdet - INFO - Epoch [11][50/773]	lr: 1.161e-04, eta: 2:20:57, time: 1.294, data_time: 0.167, memory: 6106, loss_cls: 0.5084, loss_bbox: 0.8457, d0.loss_cls: 0.5372, d0.loss_bbox: 0.9780, d1.loss_cls: 0.5167, d1.loss_bbox: 0.8847, d2.loss_cls: 0.5083, d2.loss_bbox: 0.8667, d3.loss_cls: 0.5083, d3.loss_bbox: 0.8575, d4.loss_cls: 0.5075, d4.loss_bbox: 0.8538, aux_task0.loss_heatmap: 0.6895, aux_task0.loss_bbox: 0.2857, aux_task1.loss_heatmap: 0.8728, aux_task1.loss_bbox: 0.3301, aux_task2.loss_heatmap: 0.9771, aux_task2.loss_bbox: 0.3702, aux_task3.loss_heatmap: 0.6735, aux_task3.loss_bbox: 0.2796, aux_task4.loss_heatmap: 0.5264, aux_task4.loss_bbox: 0.2974, aux_task5.loss_heatmap: 0.5150, aux_task5.loss_bbox: 0.2948, loss: 14.4850, grad_norm: 34.2592
2025-05-06 12:33:41,104 - mmdet - INFO - Epoch [11][100/773]	lr: 1.155e-04, eta: 2:20:03, time: 1.109, data_time: 0.005, memory: 6106, loss_cls: 0.5128, loss_bbox: 0.8583, d0.loss_cls: 0.5439, d0.loss_bbox: 0.9808, d1.loss_cls: 0.5230, d1.loss_bbox: 0.8991, d2.loss_cls: 0.5132, d2.loss_bbox: 0.8813, d3.loss_cls: 0.5111, d3.loss_bbox: 0.8722, d4.loss_cls: 0.5125, d4.loss_bbox: 0.8656, aux_task0.loss_heatmap: 0.6883, aux_task0.loss_bbox: 0.2861, aux_task1.loss_heatmap: 0.9237, aux_task1.loss_bbox: 0.3419, aux_task2.loss_heatmap: 1.0060, aux_task2.loss_bbox: 0.3641, aux_task3.loss_heatmap: 0.6642, aux_task3.loss_bbox: 0.2875, aux_task4.loss_heatmap: 0.5241, aux_task4.loss_bbox: 0.3045, aux_task5.loss_heatmap: 0.5184, aux_task5.loss_bbox: 0.2925, loss: 14.6749, grad_norm: 31.2593
2025-05-06 12:34:34,019 - mmdet - INFO - Epoch [11][150/773]	lr: 1.150e-04, eta: 2:19:06, time: 1.058, data_time: 0.004, memory: 6106, loss_cls: 0.4975, loss_bbox: 0.8367, d0.loss_cls: 0.5298, d0.loss_bbox: 0.9662, d1.loss_cls: 0.5071, d1.loss_bbox: 0.8795, d2.loss_cls: 0.4996, d2.loss_bbox: 0.8622, d3.loss_cls: 0.4980, d3.loss_bbox: 0.8527, d4.loss_cls: 0.4977, d4.loss_bbox: 0.8439, aux_task0.loss_heatmap: 0.6917, aux_task0.loss_bbox: 0.2791, aux_task1.loss_heatmap: 0.8647, aux_task1.loss_bbox: 0.3363, aux_task2.loss_heatmap: 0.9019, aux_task2.loss_bbox: 0.3772, aux_task3.loss_heatmap: 0.6704, aux_task3.loss_bbox: 0.2922, aux_task4.loss_heatmap: 0.5095, aux_task4.loss_bbox: 0.2962, aux_task5.loss_heatmap: 0.4977, aux_task5.loss_bbox: 0.2952, loss: 14.2828, grad_norm: 35.3798
2025-05-06 12:35:30,730 - mmdet - INFO - Epoch [11][200/773]	lr: 1.144e-04, eta: 2:18:12, time: 1.133, data_time: 0.005, memory: 6212, loss_cls: 0.5059, loss_bbox: 0.8429, d0.loss_cls: 0.5402, d0.loss_bbox: 0.9795, d1.loss_cls: 0.5166, d1.loss_bbox: 0.8914, d2.loss_cls: 0.5083, d2.loss_bbox: 0.8712, d3.loss_cls: 0.5055, d3.loss_bbox: 0.8612, d4.loss_cls: 0.5036, d4.loss_bbox: 0.8518, aux_task0.loss_heatmap: 0.6401, aux_task0.loss_bbox: 0.2834, aux_task1.loss_heatmap: 0.8869, aux_task1.loss_bbox: 0.3226, aux_task2.loss_heatmap: 0.8816, aux_task2.loss_bbox: 0.3583, aux_task3.loss_heatmap: 0.6248, aux_task3.loss_bbox: 0.2874, aux_task4.loss_heatmap: 0.4911, aux_task4.loss_bbox: 0.3019, aux_task5.loss_heatmap: 0.5294, aux_task5.loss_bbox: 0.2973, loss: 14.2830, grad_norm: 33.5476
2025-05-06 12:36:25,516 - mmdet - INFO - Epoch [11][250/773]	lr: 1.138e-04, eta: 2:17:17, time: 1.097, data_time: 0.006, memory: 6212, loss_cls: 0.5141, loss_bbox: 0.8232, d0.loss_cls: 0.5474, d0.loss_bbox: 0.9627, d1.loss_cls: 0.5273, d1.loss_bbox: 0.8709, d2.loss_cls: 0.5184, d2.loss_bbox: 0.8500, d3.loss_cls: 0.5162, d3.loss_bbox: 0.8374, d4.loss_cls: 0.5146, d4.loss_bbox: 0.8291, aux_task0.loss_heatmap: 0.6442, aux_task0.loss_bbox: 0.2791, aux_task1.loss_heatmap: 0.8363, aux_task1.loss_bbox: 0.3395, aux_task2.loss_heatmap: 0.8736, aux_task2.loss_bbox: 0.3499, aux_task3.loss_heatmap: 0.6580, aux_task3.loss_bbox: 0.2914, aux_task4.loss_heatmap: 0.5542, aux_task4.loss_bbox: 0.3054, aux_task5.loss_heatmap: 0.5301, aux_task5.loss_bbox: 0.2978, loss: 14.2709, grad_norm: 31.8494
2025-05-06 12:37:21,893 - mmdet - INFO - Epoch [11][300/773]	lr: 1.132e-04, eta: 2:16:23, time: 1.126, data_time: 0.004, memory: 6212, loss_cls: 0.5061, loss_bbox: 0.8320, d0.loss_cls: 0.5351, d0.loss_bbox: 0.9754, d1.loss_cls: 0.5151, d1.loss_bbox: 0.8841, d2.loss_cls: 0.5081, d2.loss_bbox: 0.8578, d3.loss_cls: 0.5065, d3.loss_bbox: 0.8467, d4.loss_cls: 0.5062, d4.loss_bbox: 0.8374, aux_task0.loss_heatmap: 0.6433, aux_task0.loss_bbox: 0.2707, aux_task1.loss_heatmap: 0.9173, aux_task1.loss_bbox: 0.3315, aux_task2.loss_heatmap: 0.8288, aux_task2.loss_bbox: 0.3493, aux_task3.loss_heatmap: 0.6810, aux_task3.loss_bbox: 0.2893, aux_task4.loss_heatmap: 0.4849, aux_task4.loss_bbox: 0.2985, aux_task5.loss_heatmap: 0.5385, aux_task5.loss_bbox: 0.3007, loss: 14.2443, grad_norm: 31.1094
2025-05-06 12:38:20,045 - mmdet - INFO - Epoch [11][350/773]	lr: 1.126e-04, eta: 2:15:31, time: 1.163, data_time: 0.006, memory: 6212, loss_cls: 0.4960, loss_bbox: 0.8484, d0.loss_cls: 0.5295, d0.loss_bbox: 0.9822, d1.loss_cls: 0.5062, d1.loss_bbox: 0.8919, d2.loss_cls: 0.4987, d2.loss_bbox: 0.8706, d3.loss_cls: 0.4977, d3.loss_bbox: 0.8605, d4.loss_cls: 0.4953, d4.loss_bbox: 0.8534, aux_task0.loss_heatmap: 0.6706, aux_task0.loss_bbox: 0.2856, aux_task1.loss_heatmap: 0.9073, aux_task1.loss_bbox: 0.3438, aux_task2.loss_heatmap: 0.9120, aux_task2.loss_bbox: 0.3517, aux_task3.loss_heatmap: 0.7003, aux_task3.loss_bbox: 0.2897, aux_task4.loss_heatmap: 0.4908, aux_task4.loss_bbox: 0.2988, aux_task5.loss_heatmap: 0.4970, aux_task5.loss_bbox: 0.2923, loss: 14.3702, grad_norm: 32.0455
2025-05-06 12:39:19,983 - mmdet - INFO - Epoch [11][400/773]	lr: 1.119e-04, eta: 2:14:40, time: 1.200, data_time: 0.006, memory: 6212, loss_cls: 0.5007, loss_bbox: 0.8395, d0.loss_cls: 0.5362, d0.loss_bbox: 0.9750, d1.loss_cls: 0.5120, d1.loss_bbox: 0.8873, d2.loss_cls: 0.5037, d2.loss_bbox: 0.8653, d3.loss_cls: 0.5005, d3.loss_bbox: 0.8538, d4.loss_cls: 0.4993, d4.loss_bbox: 0.8455, aux_task0.loss_heatmap: 0.6573, aux_task0.loss_bbox: 0.2810, aux_task1.loss_heatmap: 0.8979, aux_task1.loss_bbox: 0.3373, aux_task2.loss_heatmap: 0.9585, aux_task2.loss_bbox: 0.3628, aux_task3.loss_heatmap: 0.6467, aux_task3.loss_bbox: 0.2927, aux_task4.loss_heatmap: 0.4873, aux_task4.loss_bbox: 0.3082, aux_task5.loss_heatmap: 0.5058, aux_task5.loss_bbox: 0.3008, loss: 14.3550, grad_norm: 33.4644
2025-05-06 12:40:16,145 - mmdet - INFO - Epoch [11][450/773]	lr: 1.113e-04, eta: 2:13:46, time: 1.122, data_time: 0.004, memory: 6212, loss_cls: 0.4983, loss_bbox: 0.8267, d0.loss_cls: 0.5311, d0.loss_bbox: 0.9645, d1.loss_cls: 0.5101, d1.loss_bbox: 0.8736, d2.loss_cls: 0.5012, d2.loss_bbox: 0.8549, d3.loss_cls: 0.4993, d3.loss_bbox: 0.8412, d4.loss_cls: 0.4971, d4.loss_bbox: 0.8327, aux_task0.loss_heatmap: 0.6435, aux_task0.loss_bbox: 0.2689, aux_task1.loss_heatmap: 0.8527, aux_task1.loss_bbox: 0.3377, aux_task2.loss_heatmap: 0.9210, aux_task2.loss_bbox: 0.3498, aux_task3.loss_heatmap: 0.6649, aux_task3.loss_bbox: 0.2949, aux_task4.loss_heatmap: 0.5175, aux_task4.loss_bbox: 0.2977, aux_task5.loss_heatmap: 0.4661, aux_task5.loss_bbox: 0.2981, loss: 14.1436, grad_norm: 31.1786
2025-05-06 12:41:10,607 - mmdet - INFO - Epoch [11][500/773]	lr: 1.106e-04, eta: 2:12:50, time: 1.091, data_time: 0.006, memory: 6212, loss_cls: 0.4939, loss_bbox: 0.8353, d0.loss_cls: 0.5286, d0.loss_bbox: 0.9718, d1.loss_cls: 0.5052, d1.loss_bbox: 0.8830, d2.loss_cls: 0.4973, d2.loss_bbox: 0.8602, d3.loss_cls: 0.4941, d3.loss_bbox: 0.8485, d4.loss_cls: 0.4937, d4.loss_bbox: 0.8415, aux_task0.loss_heatmap: 0.6780, aux_task0.loss_bbox: 0.2818, aux_task1.loss_heatmap: 0.8610, aux_task1.loss_bbox: 0.3339, aux_task2.loss_heatmap: 0.8729, aux_task2.loss_bbox: 0.3638, aux_task3.loss_heatmap: 0.6752, aux_task3.loss_bbox: 0.2989, aux_task4.loss_heatmap: 0.4671, aux_task4.loss_bbox: 0.2938, aux_task5.loss_heatmap: 0.4788, aux_task5.loss_bbox: 0.2988, loss: 14.1571, grad_norm: 32.6367
2025-05-06 12:42:08,958 - mmdet - INFO - Epoch [11][550/773]	lr: 1.099e-04, eta: 2:11:58, time: 1.167, data_time: 0.004, memory: 6212, loss_cls: 0.4982, loss_bbox: 0.8244, d0.loss_cls: 0.5303, d0.loss_bbox: 0.9578, d1.loss_cls: 0.5100, d1.loss_bbox: 0.8695, d2.loss_cls: 0.4983, d2.loss_bbox: 0.8507, d3.loss_cls: 0.4985, d3.loss_bbox: 0.8371, d4.loss_cls: 0.4979, d4.loss_bbox: 0.8297, aux_task0.loss_heatmap: 0.6434, aux_task0.loss_bbox: 0.2739, aux_task1.loss_heatmap: 0.8524, aux_task1.loss_bbox: 0.3269, aux_task2.loss_heatmap: 0.9119, aux_task2.loss_bbox: 0.3594, aux_task3.loss_heatmap: 0.6952, aux_task3.loss_bbox: 0.2947, aux_task4.loss_heatmap: 0.4652, aux_task4.loss_bbox: 0.2917, aux_task5.loss_heatmap: 0.5210, aux_task5.loss_bbox: 0.3024, loss: 14.1406, grad_norm: 31.0383
2025-05-06 12:43:00,552 - mmdet - INFO - Epoch [11][600/773]	lr: 1.092e-04, eta: 2:11:00, time: 1.032, data_time: 0.004, memory: 6212, loss_cls: 0.5009, loss_bbox: 0.8422, d0.loss_cls: 0.5375, d0.loss_bbox: 0.9774, d1.loss_cls: 0.5119, d1.loss_bbox: 0.8889, d2.loss_cls: 0.5052, d2.loss_bbox: 0.8657, d3.loss_cls: 0.5026, d3.loss_bbox: 0.8520, d4.loss_cls: 0.5005, d4.loss_bbox: 0.8467, aux_task0.loss_heatmap: 0.6688, aux_task0.loss_bbox: 0.2883, aux_task1.loss_heatmap: 0.8940, aux_task1.loss_bbox: 0.3310, aux_task2.loss_heatmap: 0.8434, aux_task2.loss_bbox: 0.3583, aux_task3.loss_heatmap: 0.7240, aux_task3.loss_bbox: 0.2986, aux_task4.loss_heatmap: 0.4656, aux_task4.loss_bbox: 0.2981, aux_task5.loss_heatmap: 0.4875, aux_task5.loss_bbox: 0.3012, loss: 14.2904, grad_norm: 30.8609
2025-05-06 12:43:52,249 - mmdet - INFO - Epoch [11][650/773]	lr: 1.085e-04, eta: 2:10:02, time: 1.034, data_time: 0.004, memory: 6212, loss_cls: 0.4868, loss_bbox: 0.8153, d0.loss_cls: 0.5256, d0.loss_bbox: 0.9477, d1.loss_cls: 0.5020, d1.loss_bbox: 0.8599, d2.loss_cls: 0.4922, d2.loss_bbox: 0.8377, d3.loss_cls: 0.4893, d3.loss_bbox: 0.8254, d4.loss_cls: 0.4891, d4.loss_bbox: 0.8192, aux_task0.loss_heatmap: 0.6581, aux_task0.loss_bbox: 0.2694, aux_task1.loss_heatmap: 0.8267, aux_task1.loss_bbox: 0.3314, aux_task2.loss_heatmap: 0.8133, aux_task2.loss_bbox: 0.3499, aux_task3.loss_heatmap: 0.7279, aux_task3.loss_bbox: 0.2980, aux_task4.loss_heatmap: 0.4854, aux_task4.loss_bbox: 0.2879, aux_task5.loss_heatmap: 0.5170, aux_task5.loss_bbox: 0.3017, loss: 13.9570, grad_norm: 34.8032
2025-05-06 12:44:44,997 - mmdet - INFO - Epoch [11][700/773]	lr: 1.078e-04, eta: 2:09:05, time: 1.055, data_time: 0.004, memory: 6212, loss_cls: 0.4854, loss_bbox: 0.8162, d0.loss_cls: 0.5220, d0.loss_bbox: 0.9462, d1.loss_cls: 0.5009, d1.loss_bbox: 0.8634, d2.loss_cls: 0.4866, d2.loss_bbox: 0.8431, d3.loss_cls: 0.4844, d3.loss_bbox: 0.8303, d4.loss_cls: 0.4841, d4.loss_bbox: 0.8237, aux_task0.loss_heatmap: 0.6761, aux_task0.loss_bbox: 0.2746, aux_task1.loss_heatmap: 0.8148, aux_task1.loss_bbox: 0.3231, aux_task2.loss_heatmap: 0.9106, aux_task2.loss_bbox: 0.3507, aux_task3.loss_heatmap: 0.6716, aux_task3.loss_bbox: 0.2891, aux_task4.loss_heatmap: 0.4616, aux_task4.loss_bbox: 0.2874, aux_task5.loss_heatmap: 0.5206, aux_task5.loss_bbox: 0.3000, loss: 13.9665, grad_norm: 32.8450
2025-05-06 12:45:37,057 - mmdet - INFO - Epoch [11][750/773]	lr: 1.071e-04, eta: 2:08:07, time: 1.041, data_time: 0.004, memory: 6212, loss_cls: 0.4883, loss_bbox: 0.8439, d0.loss_cls: 0.5276, d0.loss_bbox: 0.9730, d1.loss_cls: 0.5037, d1.loss_bbox: 0.8905, d2.loss_cls: 0.4939, d2.loss_bbox: 0.8665, d3.loss_cls: 0.4910, d3.loss_bbox: 0.8544, d4.loss_cls: 0.4888, d4.loss_bbox: 0.8486, aux_task0.loss_heatmap: 0.6761, aux_task0.loss_bbox: 0.2827, aux_task1.loss_heatmap: 0.8375, aux_task1.loss_bbox: 0.3343, aux_task2.loss_heatmap: 0.8800, aux_task2.loss_bbox: 0.3670, aux_task3.loss_heatmap: 0.6402, aux_task3.loss_bbox: 0.2851, aux_task4.loss_heatmap: 0.4661, aux_task4.loss_bbox: 0.2975, aux_task5.loss_heatmap: 0.5197, aux_task5.loss_bbox: 0.3071, loss: 14.1636, grad_norm: 29.6433
2025-05-06 12:46:01,657 - mmdet - INFO - Saving checkpoint at 11 epochs
2025-05-06 12:47:09,312 - mmdet - INFO - Epoch [12][50/773]	lr: 1.060e-04, eta: 2:06:35, time: 1.334, data_time: 0.192, memory: 6212, loss_cls: 0.4929, loss_bbox: 0.8261, d0.loss_cls: 0.5273, d0.loss_bbox: 0.9562, d1.loss_cls: 0.5067, d1.loss_bbox: 0.8732, d2.loss_cls: 0.4952, d2.loss_bbox: 0.8512, d3.loss_cls: 0.4933, d3.loss_bbox: 0.8373, d4.loss_cls: 0.4906, d4.loss_bbox: 0.8320, aux_task0.loss_heatmap: 0.6585, aux_task0.loss_bbox: 0.2734, aux_task1.loss_heatmap: 0.8518, aux_task1.loss_bbox: 0.3301, aux_task2.loss_heatmap: 0.9291, aux_task2.loss_bbox: 0.3658, aux_task3.loss_heatmap: 0.6365, aux_task3.loss_bbox: 0.2786, aux_task4.loss_heatmap: 0.5236, aux_task4.loss_bbox: 0.2957, aux_task5.loss_heatmap: 0.4768, aux_task5.loss_bbox: 0.2962, loss: 14.0982, grad_norm: 31.3664
2025-05-06 12:48:01,812 - mmdet - INFO - Epoch [12][100/773]	lr: 1.052e-04, eta: 2:05:39, time: 1.051, data_time: 0.006, memory: 6212, loss_cls: 0.4901, loss_bbox: 0.8282, d0.loss_cls: 0.5239, d0.loss_bbox: 0.9571, d1.loss_cls: 0.5036, d1.loss_bbox: 0.8725, d2.loss_cls: 0.4949, d2.loss_bbox: 0.8489, d3.loss_cls: 0.4929, d3.loss_bbox: 0.8391, d4.loss_cls: 0.4900, d4.loss_bbox: 0.8328, aux_task0.loss_heatmap: 0.6350, aux_task0.loss_bbox: 0.2719, aux_task1.loss_heatmap: 0.8857, aux_task1.loss_bbox: 0.3346, aux_task2.loss_heatmap: 0.9473, aux_task2.loss_bbox: 0.3552, aux_task3.loss_heatmap: 0.6453, aux_task3.loss_bbox: 0.2870, aux_task4.loss_heatmap: 0.4943, aux_task4.loss_bbox: 0.2962, aux_task5.loss_heatmap: 0.4954, aux_task5.loss_bbox: 0.2991, loss: 14.1210, grad_norm: 30.9900
2025-05-06 12:48:53,994 - mmdet - INFO - Epoch [12][150/773]	lr: 1.044e-04, eta: 2:04:41, time: 1.044, data_time: 0.004, memory: 6212, loss_cls: 0.5015, loss_bbox: 0.8171, d0.loss_cls: 0.5375, d0.loss_bbox: 0.9527, d1.loss_cls: 0.5150, d1.loss_bbox: 0.8669, d2.loss_cls: 0.5060, d2.loss_bbox: 0.8405, d3.loss_cls: 0.5031, d3.loss_bbox: 0.8285, d4.loss_cls: 0.5008, d4.loss_bbox: 0.8228, aux_task0.loss_heatmap: 0.6382, aux_task0.loss_bbox: 0.2729, aux_task1.loss_heatmap: 0.8222, aux_task1.loss_bbox: 0.3313, aux_task2.loss_heatmap: 0.8411, aux_task2.loss_bbox: 0.3738, aux_task3.loss_heatmap: 0.6964, aux_task3.loss_bbox: 0.2897, aux_task4.loss_heatmap: 0.4738, aux_task4.loss_bbox: 0.2885, aux_task5.loss_heatmap: 0.5525, aux_task5.loss_bbox: 0.2977, loss: 14.0705, grad_norm: 32.5992
2025-05-06 12:49:46,283 - mmdet - INFO - Epoch [12][200/773]	lr: 1.036e-04, eta: 2:03:44, time: 1.046, data_time: 0.004, memory: 6212, loss_cls: 0.4792, loss_bbox: 0.8116, d0.loss_cls: 0.5141, d0.loss_bbox: 0.9476, d1.loss_cls: 0.4935, d1.loss_bbox: 0.8601, d2.loss_cls: 0.4835, d2.loss_bbox: 0.8328, d3.loss_cls: 0.4812, d3.loss_bbox: 0.8225, d4.loss_cls: 0.4795, d4.loss_bbox: 0.8164, aux_task0.loss_heatmap: 0.6185, aux_task0.loss_bbox: 0.2669, aux_task1.loss_heatmap: 0.8633, aux_task1.loss_bbox: 0.3154, aux_task2.loss_heatmap: 0.8743, aux_task2.loss_bbox: 0.3597, aux_task3.loss_heatmap: 0.6333, aux_task3.loss_bbox: 0.2854, aux_task4.loss_heatmap: 0.4955, aux_task4.loss_bbox: 0.2976, aux_task5.loss_heatmap: 0.5103, aux_task5.loss_bbox: 0.2953, loss: 13.8375, grad_norm: 31.1014
2025-05-06 12:50:38,066 - mmdet - INFO - Epoch [12][250/773]	lr: 1.028e-04, eta: 2:02:47, time: 1.036, data_time: 0.004, memory: 6212, loss_cls: 0.4779, loss_bbox: 0.8077, d0.loss_cls: 0.5168, d0.loss_bbox: 0.9438, d1.loss_cls: 0.4974, d1.loss_bbox: 0.8550, d2.loss_cls: 0.4861, d2.loss_bbox: 0.8302, d3.loss_cls: 0.4811, d3.loss_bbox: 0.8190, d4.loss_cls: 0.4784, d4.loss_bbox: 0.8145, aux_task0.loss_heatmap: 0.6068, aux_task0.loss_bbox: 0.2591, aux_task1.loss_heatmap: 0.8142, aux_task1.loss_bbox: 0.3274, aux_task2.loss_heatmap: 0.8629, aux_task2.loss_bbox: 0.3364, aux_task3.loss_heatmap: 0.6307, aux_task3.loss_bbox: 0.2902, aux_task4.loss_heatmap: 0.5055, aux_task4.loss_bbox: 0.2998, aux_task5.loss_heatmap: 0.5113, aux_task5.loss_bbox: 0.2971, loss: 13.7491, grad_norm: 29.2799
2025-05-06 12:51:30,493 - mmdet - INFO - Epoch [12][300/773]	lr: 1.020e-04, eta: 2:01:50, time: 1.048, data_time: 0.004, memory: 6212, loss_cls: 0.4739, loss_bbox: 0.8059, d0.loss_cls: 0.5104, d0.loss_bbox: 0.9360, d1.loss_cls: 0.4891, d1.loss_bbox: 0.8507, d2.loss_cls: 0.4781, d2.loss_bbox: 0.8275, d3.loss_cls: 0.4757, d3.loss_bbox: 0.8168, d4.loss_cls: 0.4741, d4.loss_bbox: 0.8108, aux_task0.loss_heatmap: 0.6308, aux_task0.loss_bbox: 0.2580, aux_task1.loss_heatmap: 0.8625, aux_task1.loss_bbox: 0.3243, aux_task2.loss_heatmap: 0.7930, aux_task2.loss_bbox: 0.3370, aux_task3.loss_heatmap: 0.6581, aux_task3.loss_bbox: 0.2854, aux_task4.loss_heatmap: 0.4407, aux_task4.loss_bbox: 0.2847, aux_task5.loss_heatmap: 0.5173, aux_task5.loss_bbox: 0.2994, loss: 13.6401, grad_norm: 32.4115
2025-05-06 12:52:23,157 - mmdet - INFO - Epoch [12][350/773]	lr: 1.012e-04, eta: 2:00:54, time: 1.053, data_time: 0.005, memory: 6212, loss_cls: 0.4849, loss_bbox: 0.8116, d0.loss_cls: 0.5187, d0.loss_bbox: 0.9415, d1.loss_cls: 0.4980, d1.loss_bbox: 0.8563, d2.loss_cls: 0.4899, d2.loss_bbox: 0.8330, d3.loss_cls: 0.4880, d3.loss_bbox: 0.8225, d4.loss_cls: 0.4852, d4.loss_bbox: 0.8164, aux_task0.loss_heatmap: 0.6163, aux_task0.loss_bbox: 0.2615, aux_task1.loss_heatmap: 0.8958, aux_task1.loss_bbox: 0.3387, aux_task2.loss_heatmap: 0.8581, aux_task2.loss_bbox: 0.3548, aux_task3.loss_heatmap: 0.6542, aux_task3.loss_bbox: 0.2940, aux_task4.loss_heatmap: 0.4799, aux_task4.loss_bbox: 0.2919, aux_task5.loss_heatmap: 0.4967, aux_task5.loss_bbox: 0.2941, loss: 13.8817, grad_norm: 29.4359
2025-05-06 12:53:15,574 - mmdet - INFO - Epoch [12][400/773]	lr: 1.003e-04, eta: 1:59:57, time: 1.048, data_time: 0.005, memory: 6212, loss_cls: 0.4779, loss_bbox: 0.8250, d0.loss_cls: 0.5181, d0.loss_bbox: 0.9535, d1.loss_cls: 0.4925, d1.loss_bbox: 0.8686, d2.loss_cls: 0.4835, d2.loss_bbox: 0.8470, d3.loss_cls: 0.4798, d3.loss_bbox: 0.8345, d4.loss_cls: 0.4772, d4.loss_bbox: 0.8304, aux_task0.loss_heatmap: 0.6477, aux_task0.loss_bbox: 0.2638, aux_task1.loss_heatmap: 0.8737, aux_task1.loss_bbox: 0.3383, aux_task2.loss_heatmap: 0.8895, aux_task2.loss_bbox: 0.3537, aux_task3.loss_heatmap: 0.6824, aux_task3.loss_bbox: 0.2968, aux_task4.loss_heatmap: 0.4791, aux_task4.loss_bbox: 0.2993, aux_task5.loss_heatmap: 0.4713, aux_task5.loss_bbox: 0.2923, loss: 13.9759, grad_norm: 30.9951
2025-05-06 12:54:07,952 - mmdet - INFO - Epoch [12][450/773]	lr: 9.949e-05, eta: 1:59:00, time: 1.048, data_time: 0.004, memory: 6212, loss_cls: 0.4906, loss_bbox: 0.8198, d0.loss_cls: 0.5214, d0.loss_bbox: 0.9523, d1.loss_cls: 0.5025, d1.loss_bbox: 0.8636, d2.loss_cls: 0.4950, d2.loss_bbox: 0.8417, d3.loss_cls: 0.4924, d3.loss_bbox: 0.8315, d4.loss_cls: 0.4902, d4.loss_bbox: 0.8252, aux_task0.loss_heatmap: 0.6367, aux_task0.loss_bbox: 0.2680, aux_task1.loss_heatmap: 0.8280, aux_task1.loss_bbox: 0.3307, aux_task2.loss_heatmap: 0.8930, aux_task2.loss_bbox: 0.3488, aux_task3.loss_heatmap: 0.7091, aux_task3.loss_bbox: 0.2981, aux_task4.loss_heatmap: 0.4925, aux_task4.loss_bbox: 0.2918, aux_task5.loss_heatmap: 0.4788, aux_task5.loss_bbox: 0.2983, loss: 13.9999, grad_norm: 30.8624
2025-05-06 12:54:59,952 - mmdet - INFO - Epoch [12][500/773]	lr: 9.863e-05, eta: 1:58:03, time: 1.040, data_time: 0.004, memory: 6212, loss_cls: 0.4770, loss_bbox: 0.8273, d0.loss_cls: 0.5175, d0.loss_bbox: 0.9603, d1.loss_cls: 0.4939, d1.loss_bbox: 0.8711, d2.loss_cls: 0.4825, d2.loss_bbox: 0.8492, d3.loss_cls: 0.4793, d3.loss_bbox: 0.8410, d4.loss_cls: 0.4775, d4.loss_bbox: 0.8338, aux_task0.loss_heatmap: 0.6522, aux_task0.loss_bbox: 0.2696, aux_task1.loss_heatmap: 0.8163, aux_task1.loss_bbox: 0.3295, aux_task2.loss_heatmap: 0.8517, aux_task2.loss_bbox: 0.3581, aux_task3.loss_heatmap: 0.5651, aux_task3.loss_bbox: 0.2968, aux_task4.loss_heatmap: 0.4508, aux_task4.loss_bbox: 0.2933, aux_task5.loss_heatmap: 0.4518, aux_task5.loss_bbox: 0.2902, loss: 13.7358, grad_norm: 29.3819
2025-05-06 12:55:52,383 - mmdet - INFO - Epoch [12][550/773]	lr: 9.776e-05, eta: 1:57:07, time: 1.049, data_time: 0.004, memory: 6212, loss_cls: 0.4757, loss_bbox: 0.8091, d0.loss_cls: 0.5108, d0.loss_bbox: 0.9366, d1.loss_cls: 0.4885, d1.loss_bbox: 0.8523, d2.loss_cls: 0.4800, d2.loss_bbox: 0.8290, d3.loss_cls: 0.4748, d3.loss_bbox: 0.8222, d4.loss_cls: 0.4750, d4.loss_bbox: 0.8147, aux_task0.loss_heatmap: 0.6356, aux_task0.loss_bbox: 0.2638, aux_task1.loss_heatmap: 0.8338, aux_task1.loss_bbox: 0.3193, aux_task2.loss_heatmap: 0.8690, aux_task2.loss_bbox: 0.3543, aux_task3.loss_heatmap: 0.6651, aux_task3.loss_bbox: 0.3002, aux_task4.loss_heatmap: 0.4583, aux_task4.loss_bbox: 0.2864, aux_task5.loss_heatmap: 0.4634, aux_task5.loss_bbox: 0.2949, loss: 13.7130, grad_norm: 30.0854
2025-05-06 12:56:44,415 - mmdet - INFO - Epoch [12][600/773]	lr: 9.688e-05, eta: 1:56:10, time: 1.040, data_time: 0.004, memory: 6212, loss_cls: 0.4693, loss_bbox: 0.8135, d0.loss_cls: 0.5104, d0.loss_bbox: 0.9509, d1.loss_cls: 0.4861, d1.loss_bbox: 0.8576, d2.loss_cls: 0.4736, d2.loss_bbox: 0.8370, d3.loss_cls: 0.4706, d3.loss_bbox: 0.8269, d4.loss_cls: 0.4687, d4.loss_bbox: 0.8203, aux_task0.loss_heatmap: 0.6671, aux_task0.loss_bbox: 0.2673, aux_task1.loss_heatmap: 0.8528, aux_task1.loss_bbox: 0.3290, aux_task2.loss_heatmap: 0.7807, aux_task2.loss_bbox: 0.3516, aux_task3.loss_heatmap: 0.6842, aux_task3.loss_bbox: 0.2920, aux_task4.loss_heatmap: 0.4367, aux_task4.loss_bbox: 0.2892, aux_task5.loss_heatmap: 0.4844, aux_task5.loss_bbox: 0.3042, loss: 13.7242, grad_norm: 29.7292
2025-05-06 12:57:36,847 - mmdet - INFO - Epoch [12][650/773]	lr: 9.600e-05, eta: 1:55:13, time: 1.049, data_time: 0.005, memory: 6212, loss_cls: 0.4659, loss_bbox: 0.7970, d0.loss_cls: 0.5066, d0.loss_bbox: 0.9290, d1.loss_cls: 0.4834, d1.loss_bbox: 0.8435, d2.loss_cls: 0.4729, d2.loss_bbox: 0.8218, d3.loss_cls: 0.4690, d3.loss_bbox: 0.8128, d4.loss_cls: 0.4657, d4.loss_bbox: 0.8031, aux_task0.loss_heatmap: 0.6554, aux_task0.loss_bbox: 0.2731, aux_task1.loss_heatmap: 0.8196, aux_task1.loss_bbox: 0.3278, aux_task2.loss_heatmap: 0.7998, aux_task2.loss_bbox: 0.3396, aux_task3.loss_heatmap: 0.6590, aux_task3.loss_bbox: 0.2872, aux_task4.loss_heatmap: 0.4750, aux_task4.loss_bbox: 0.2824, aux_task5.loss_heatmap: 0.4779, aux_task5.loss_bbox: 0.2990, loss: 13.5666, grad_norm: 30.3053
2025-05-06 12:58:28,988 - mmdet - INFO - Epoch [12][700/773]	lr: 9.510e-05, eta: 1:54:17, time: 1.043, data_time: 0.004, memory: 6212, loss_cls: 0.4662, loss_bbox: 0.8022, d0.loss_cls: 0.5047, d0.loss_bbox: 0.9347, d1.loss_cls: 0.4823, d1.loss_bbox: 0.8480, d2.loss_cls: 0.4691, d2.loss_bbox: 0.8306, d3.loss_cls: 0.4666, d3.loss_bbox: 0.8191, d4.loss_cls: 0.4659, d4.loss_bbox: 0.8098, aux_task0.loss_heatmap: 0.6408, aux_task0.loss_bbox: 0.2654, aux_task1.loss_heatmap: 0.8149, aux_task1.loss_bbox: 0.3157, aux_task2.loss_heatmap: 0.8364, aux_task2.loss_bbox: 0.3478, aux_task3.loss_heatmap: 0.6484, aux_task3.loss_bbox: 0.2839, aux_task4.loss_heatmap: 0.4406, aux_task4.loss_bbox: 0.2850, aux_task5.loss_heatmap: 0.4951, aux_task5.loss_bbox: 0.3022, loss: 13.5752, grad_norm: 28.9507
2025-05-06 12:59:21,243 - mmdet - INFO - Epoch [12][750/773]	lr: 9.419e-05, eta: 1:53:20, time: 1.045, data_time: 0.004, memory: 6212, loss_cls: 0.4829, loss_bbox: 0.8109, d0.loss_cls: 0.5234, d0.loss_bbox: 0.9454, d1.loss_cls: 0.4974, d1.loss_bbox: 0.8572, d2.loss_cls: 0.4891, d2.loss_bbox: 0.8345, d3.loss_cls: 0.4852, d3.loss_bbox: 0.8250, d4.loss_cls: 0.4840, d4.loss_bbox: 0.8149, aux_task0.loss_heatmap: 0.6702, aux_task0.loss_bbox: 0.2621, aux_task1.loss_heatmap: 0.8135, aux_task1.loss_bbox: 0.3230, aux_task2.loss_heatmap: 0.8379, aux_task2.loss_bbox: 0.3639, aux_task3.loss_heatmap: 0.6169, aux_task3.loss_bbox: 0.2734, aux_task4.loss_heatmap: 0.4461, aux_task4.loss_bbox: 0.2876, aux_task5.loss_heatmap: 0.5317, aux_task5.loss_bbox: 0.3030, loss: 13.7791, grad_norm: 30.8354
2025-05-06 12:59:45,884 - mmdet - INFO - Saving checkpoint at 12 epochs
2025-05-06 13:01:00,488 - mmdet - INFO - Epoch [13][50/773]	lr: 9.285e-05, eta: 1:51:56, time: 1.474, data_time: 0.199, memory: 6212, loss_cls: 0.4747, loss_bbox: 0.8122, d0.loss_cls: 0.5119, d0.loss_bbox: 0.9459, d1.loss_cls: 0.4895, d1.loss_bbox: 0.8585, d2.loss_cls: 0.4780, d2.loss_bbox: 0.8379, d3.loss_cls: 0.4764, d3.loss_bbox: 0.8275, d4.loss_cls: 0.4735, d4.loss_bbox: 0.8184, aux_task0.loss_heatmap: 0.6359, aux_task0.loss_bbox: 0.2635, aux_task1.loss_heatmap: 0.8418, aux_task1.loss_bbox: 0.3193, aux_task2.loss_heatmap: 0.8893, aux_task2.loss_bbox: 0.3571, aux_task3.loss_heatmap: 0.6148, aux_task3.loss_bbox: 0.2796, aux_task4.loss_heatmap: 0.4872, aux_task4.loss_bbox: 0.2846, aux_task5.loss_heatmap: 0.4955, aux_task5.loss_bbox: 0.2967, loss: 13.7700, grad_norm: 32.9134
2025-05-06 13:01:58,517 - mmdet - INFO - Epoch [13][100/773]	lr: 9.192e-05, eta: 1:51:04, time: 1.159, data_time: 0.005, memory: 6212, loss_cls: 0.4718, loss_bbox: 0.8076, d0.loss_cls: 0.5092, d0.loss_bbox: 0.9413, d1.loss_cls: 0.4884, d1.loss_bbox: 0.8534, d2.loss_cls: 0.4762, d2.loss_bbox: 0.8344, d3.loss_cls: 0.4733, d3.loss_bbox: 0.8242, d4.loss_cls: 0.4714, d4.loss_bbox: 0.8137, aux_task0.loss_heatmap: 0.6275, aux_task0.loss_bbox: 0.2607, aux_task1.loss_heatmap: 0.8403, aux_task1.loss_bbox: 0.3230, aux_task2.loss_heatmap: 0.9260, aux_task2.loss_bbox: 0.3584, aux_task3.loss_heatmap: 0.6786, aux_task3.loss_bbox: 0.2778, aux_task4.loss_heatmap: 0.4813, aux_task4.loss_bbox: 0.2916, aux_task5.loss_heatmap: 0.4541, aux_task5.loss_bbox: 0.2957, loss: 13.7802, grad_norm: 28.6885
2025-05-06 13:02:55,721 - mmdet - INFO - Epoch [13][150/773]	lr: 9.098e-05, eta: 1:50:10, time: 1.144, data_time: 0.005, memory: 6212, loss_cls: 0.4612, loss_bbox: 0.7895, d0.loss_cls: 0.5031, d0.loss_bbox: 0.9241, d1.loss_cls: 0.4776, d1.loss_bbox: 0.8377, d2.loss_cls: 0.4656, d2.loss_bbox: 0.8165, d3.loss_cls: 0.4624, d3.loss_bbox: 0.8053, d4.loss_cls: 0.4608, d4.loss_bbox: 0.7957, aux_task0.loss_heatmap: 0.5964, aux_task0.loss_bbox: 0.2625, aux_task1.loss_heatmap: 0.8122, aux_task1.loss_bbox: 0.3186, aux_task2.loss_heatmap: 0.8233, aux_task2.loss_bbox: 0.3733, aux_task3.loss_heatmap: 0.6092, aux_task3.loss_bbox: 0.2941, aux_task4.loss_heatmap: 0.4775, aux_task4.loss_bbox: 0.2852, aux_task5.loss_heatmap: 0.4711, aux_task5.loss_bbox: 0.2921, loss: 13.4149, grad_norm: 28.8769
2025-05-06 13:03:53,603 - mmdet - INFO - Epoch [13][200/773]	lr: 9.003e-05, eta: 1:49:17, time: 1.158, data_time: 0.006, memory: 6212, loss_cls: 0.4680, loss_bbox: 0.7927, d0.loss_cls: 0.5042, d0.loss_bbox: 0.9290, d1.loss_cls: 0.4860, d1.loss_bbox: 0.8361, d2.loss_cls: 0.4725, d2.loss_bbox: 0.8177, d3.loss_cls: 0.4703, d3.loss_bbox: 0.8083, d4.loss_cls: 0.4681, d4.loss_bbox: 0.7991, aux_task0.loss_heatmap: 0.6217, aux_task0.loss_bbox: 0.2562, aux_task1.loss_heatmap: 0.8449, aux_task1.loss_bbox: 0.3094, aux_task2.loss_heatmap: 0.8254, aux_task2.loss_bbox: 0.3497, aux_task3.loss_heatmap: 0.6214, aux_task3.loss_bbox: 0.2857, aux_task4.loss_heatmap: 0.4622, aux_task4.loss_bbox: 0.2890, aux_task5.loss_heatmap: 0.5037, aux_task5.loss_bbox: 0.2904, loss: 13.5115, grad_norm: 31.0386
2025-05-06 13:04:53,698 - mmdet - INFO - Epoch [13][250/773]	lr: 8.908e-05, eta: 1:48:26, time: 1.203, data_time: 0.006, memory: 6212, loss_cls: 0.4638, loss_bbox: 0.7792, d0.loss_cls: 0.4989, d0.loss_bbox: 0.9167, d1.loss_cls: 0.4799, d1.loss_bbox: 0.8263, d2.loss_cls: 0.4688, d2.loss_bbox: 0.8058, d3.loss_cls: 0.4650, d3.loss_bbox: 0.7955, d4.loss_cls: 0.4631, d4.loss_bbox: 0.7854, aux_task0.loss_heatmap: 0.6012, aux_task0.loss_bbox: 0.2512, aux_task1.loss_heatmap: 0.8099, aux_task1.loss_bbox: 0.3265, aux_task2.loss_heatmap: 0.7788, aux_task2.loss_bbox: 0.3306, aux_task3.loss_heatmap: 0.6311, aux_task3.loss_bbox: 0.2911, aux_task4.loss_heatmap: 0.4888, aux_task4.loss_bbox: 0.2926, aux_task5.loss_heatmap: 0.4836, aux_task5.loss_bbox: 0.2892, loss: 13.3228, grad_norm: 30.3006
2025-05-06 13:05:46,415 - mmdet - INFO - Epoch [13][300/773]	lr: 8.812e-05, eta: 1:47:30, time: 1.054, data_time: 0.004, memory: 6212, loss_cls: 0.4630, loss_bbox: 0.7915, d0.loss_cls: 0.5021, d0.loss_bbox: 0.9286, d1.loss_cls: 0.4788, d1.loss_bbox: 0.8390, d2.loss_cls: 0.4679, d2.loss_bbox: 0.8186, d3.loss_cls: 0.4652, d3.loss_bbox: 0.8088, d4.loss_cls: 0.4626, d4.loss_bbox: 0.7980, aux_task0.loss_heatmap: 0.6535, aux_task0.loss_bbox: 0.2559, aux_task1.loss_heatmap: 0.8676, aux_task1.loss_bbox: 0.3188, aux_task2.loss_heatmap: 0.7774, aux_task2.loss_bbox: 0.3381, aux_task3.loss_heatmap: 0.6156, aux_task3.loss_bbox: 0.2891, aux_task4.loss_heatmap: 0.4371, aux_task4.loss_bbox: 0.2884, aux_task5.loss_heatmap: 0.5053, aux_task5.loss_bbox: 0.2927, loss: 13.4637, grad_norm: 30.3044
2025-05-06 13:06:38,771 - mmdet - INFO - Epoch [13][350/773]	lr: 8.715e-05, eta: 1:46:34, time: 1.047, data_time: 0.004, memory: 6212, loss_cls: 0.4643, loss_bbox: 0.7855, d0.loss_cls: 0.5045, d0.loss_bbox: 0.9196, d1.loss_cls: 0.4816, d1.loss_bbox: 0.8314, d2.loss_cls: 0.4693, d2.loss_bbox: 0.8121, d3.loss_cls: 0.4652, d3.loss_bbox: 0.8026, d4.loss_cls: 0.4638, d4.loss_bbox: 0.7927, aux_task0.loss_heatmap: 0.5912, aux_task0.loss_bbox: 0.2481, aux_task1.loss_heatmap: 0.8506, aux_task1.loss_bbox: 0.3278, aux_task2.loss_heatmap: 0.8121, aux_task2.loss_bbox: 0.3362, aux_task3.loss_heatmap: 0.6623, aux_task3.loss_bbox: 0.2812, aux_task4.loss_heatmap: 0.4596, aux_task4.loss_bbox: 0.2894, aux_task5.loss_heatmap: 0.5053, aux_task5.loss_bbox: 0.2926, loss: 13.4488, grad_norm: 29.1728
2025-05-06 13:07:31,000 - mmdet - INFO - Epoch [13][400/773]	lr: 8.617e-05, eta: 1:45:37, time: 1.045, data_time: 0.004, memory: 6212, loss_cls: 0.4565, loss_bbox: 0.8008, d0.loss_cls: 0.4922, d0.loss_bbox: 0.9307, d1.loss_cls: 0.4679, d1.loss_bbox: 0.8450, d2.loss_cls: 0.4602, d2.loss_bbox: 0.8268, d3.loss_cls: 0.4574, d3.loss_bbox: 0.8149, d4.loss_cls: 0.4558, d4.loss_bbox: 0.8060, aux_task0.loss_heatmap: 0.6219, aux_task0.loss_bbox: 0.2647, aux_task1.loss_heatmap: 0.8427, aux_task1.loss_bbox: 0.3260, aux_task2.loss_heatmap: 0.8256, aux_task2.loss_bbox: 0.3482, aux_task3.loss_heatmap: 0.6433, aux_task3.loss_bbox: 0.2890, aux_task4.loss_heatmap: 0.4521, aux_task4.loss_bbox: 0.2963, aux_task5.loss_heatmap: 0.4727, aux_task5.loss_bbox: 0.2905, loss: 13.4872, grad_norm: 30.3055
2025-05-06 13:08:23,204 - mmdet - INFO - Epoch [13][450/773]	lr: 8.519e-05, eta: 1:44:41, time: 1.044, data_time: 0.004, memory: 6212, loss_cls: 0.4668, loss_bbox: 0.7827, d0.loss_cls: 0.5027, d0.loss_bbox: 0.9243, d1.loss_cls: 0.4836, d1.loss_bbox: 0.8302, d2.loss_cls: 0.4739, d2.loss_bbox: 0.8103, d3.loss_cls: 0.4684, d3.loss_bbox: 0.8000, d4.loss_cls: 0.4679, d4.loss_bbox: 0.7890, aux_task0.loss_heatmap: 0.5875, aux_task0.loss_bbox: 0.2519, aux_task1.loss_heatmap: 0.7943, aux_task1.loss_bbox: 0.3185, aux_task2.loss_heatmap: 0.8543, aux_task2.loss_bbox: 0.3399, aux_task3.loss_heatmap: 0.6543, aux_task3.loss_bbox: 0.2842, aux_task4.loss_heatmap: 0.4713, aux_task4.loss_bbox: 0.2830, aux_task5.loss_heatmap: 0.4779, aux_task5.loss_bbox: 0.2889, loss: 13.4057, grad_norm: 29.3390
2025-05-06 13:09:15,878 - mmdet - INFO - Epoch [13][500/773]	lr: 8.420e-05, eta: 1:43:45, time: 1.053, data_time: 0.004, memory: 6212, loss_cls: 0.4503, loss_bbox: 0.7870, d0.loss_cls: 0.4969, d0.loss_bbox: 0.9214, d1.loss_cls: 0.4755, d1.loss_bbox: 0.8327, d2.loss_cls: 0.4602, d2.loss_bbox: 0.8132, d3.loss_cls: 0.4553, d3.loss_bbox: 0.8015, d4.loss_cls: 0.4517, d4.loss_bbox: 0.7927, aux_task0.loss_heatmap: 0.6043, aux_task0.loss_bbox: 0.2515, aux_task1.loss_heatmap: 0.8001, aux_task1.loss_bbox: 0.3191, aux_task2.loss_heatmap: 0.8261, aux_task2.loss_bbox: 0.3537, aux_task3.loss_heatmap: 0.5900, aux_task3.loss_bbox: 0.2867, aux_task4.loss_heatmap: 0.4508, aux_task4.loss_bbox: 0.2810, aux_task5.loss_heatmap: 0.4454, aux_task5.loss_bbox: 0.2901, loss: 13.2374, grad_norm: 30.2891
2025-05-06 13:10:08,737 - mmdet - INFO - Epoch [13][550/773]	lr: 8.321e-05, eta: 1:42:49, time: 1.057, data_time: 0.004, memory: 6212, loss_cls: 0.4470, loss_bbox: 0.7700, d0.loss_cls: 0.4893, d0.loss_bbox: 0.9029, d1.loss_cls: 0.4658, d1.loss_bbox: 0.8162, d2.loss_cls: 0.4544, d2.loss_bbox: 0.7948, d3.loss_cls: 0.4511, d3.loss_bbox: 0.7819, d4.loss_cls: 0.4483, d4.loss_bbox: 0.7741, aux_task0.loss_heatmap: 0.6128, aux_task0.loss_bbox: 0.2545, aux_task1.loss_heatmap: 0.8265, aux_task1.loss_bbox: 0.3186, aux_task2.loss_heatmap: 0.8112, aux_task2.loss_bbox: 0.3518, aux_task3.loss_heatmap: 0.6196, aux_task3.loss_bbox: 0.2888, aux_task4.loss_heatmap: 0.4360, aux_task4.loss_bbox: 0.2780, aux_task5.loss_heatmap: 0.4331, aux_task5.loss_bbox: 0.2952, loss: 13.1219, grad_norm: 30.1829
2025-05-06 13:11:01,611 - mmdet - INFO - Epoch [13][600/773]	lr: 8.220e-05, eta: 1:41:53, time: 1.057, data_time: 0.004, memory: 6212, loss_cls: 0.4551, loss_bbox: 0.7790, d0.loss_cls: 0.4939, d0.loss_bbox: 0.9221, d1.loss_cls: 0.4691, d1.loss_bbox: 0.8293, d2.loss_cls: 0.4589, d2.loss_bbox: 0.8074, d3.loss_cls: 0.4557, d3.loss_bbox: 0.7940, d4.loss_cls: 0.4541, d4.loss_bbox: 0.7843, aux_task0.loss_heatmap: 0.6637, aux_task0.loss_bbox: 0.2560, aux_task1.loss_heatmap: 0.8397, aux_task1.loss_bbox: 0.3165, aux_task2.loss_heatmap: 0.7709, aux_task2.loss_bbox: 0.3440, aux_task3.loss_heatmap: 0.6221, aux_task3.loss_bbox: 0.2874, aux_task4.loss_heatmap: 0.4368, aux_task4.loss_bbox: 0.2852, aux_task5.loss_heatmap: 0.4285, aux_task5.loss_bbox: 0.2953, loss: 13.2491, grad_norm: 30.8092
2025-05-06 13:11:53,764 - mmdet - INFO - Epoch [13][650/773]	lr: 8.120e-05, eta: 1:40:57, time: 1.043, data_time: 0.005, memory: 6212, loss_cls: 0.4586, loss_bbox: 0.7851, d0.loss_cls: 0.4980, d0.loss_bbox: 0.9260, d1.loss_cls: 0.4771, d1.loss_bbox: 0.8350, d2.loss_cls: 0.4641, d2.loss_bbox: 0.8168, d3.loss_cls: 0.4629, d3.loss_bbox: 0.8011, d4.loss_cls: 0.4589, d4.loss_bbox: 0.7918, aux_task0.loss_heatmap: 0.6145, aux_task0.loss_bbox: 0.2693, aux_task1.loss_heatmap: 0.7842, aux_task1.loss_bbox: 0.3157, aux_task2.loss_heatmap: 0.7946, aux_task2.loss_bbox: 0.3376, aux_task3.loss_heatmap: 0.6474, aux_task3.loss_bbox: 0.2860, aux_task4.loss_heatmap: 0.4698, aux_task4.loss_bbox: 0.2792, aux_task5.loss_heatmap: 0.4866, aux_task5.loss_bbox: 0.2959, loss: 13.3563, grad_norm: 30.1519
2025-05-06 13:12:46,014 - mmdet - INFO - Epoch [13][700/773]	lr: 8.018e-05, eta: 1:40:01, time: 1.045, data_time: 0.004, memory: 6212, loss_cls: 0.4362, loss_bbox: 0.7678, d0.loss_cls: 0.4738, d0.loss_bbox: 0.9041, d1.loss_cls: 0.4536, d1.loss_bbox: 0.8159, d2.loss_cls: 0.4421, d2.loss_bbox: 0.7972, d3.loss_cls: 0.4406, d3.loss_bbox: 0.7804, d4.loss_cls: 0.4373, d4.loss_bbox: 0.7731, aux_task0.loss_heatmap: 0.6114, aux_task0.loss_bbox: 0.2482, aux_task1.loss_heatmap: 0.7536, aux_task1.loss_bbox: 0.3083, aux_task2.loss_heatmap: 0.8290, aux_task2.loss_bbox: 0.3422, aux_task3.loss_heatmap: 0.5970, aux_task3.loss_bbox: 0.2761, aux_task4.loss_heatmap: 0.4388, aux_task4.loss_bbox: 0.2775, aux_task5.loss_heatmap: 0.4487, aux_task5.loss_bbox: 0.2905, loss: 12.9434, grad_norm: 27.6420
2025-05-06 13:13:38,321 - mmdet - INFO - Epoch [13][750/773]	lr: 7.917e-05, eta: 1:39:05, time: 1.046, data_time: 0.004, memory: 6212, loss_cls: 0.4655, loss_bbox: 0.7887, d0.loss_cls: 0.5051, d0.loss_bbox: 0.9295, d1.loss_cls: 0.4807, d1.loss_bbox: 0.8408, d2.loss_cls: 0.4698, d2.loss_bbox: 0.8206, d3.loss_cls: 0.4677, d3.loss_bbox: 0.8034, d4.loss_cls: 0.4656, d4.loss_bbox: 0.7947, aux_task0.loss_heatmap: 0.6252, aux_task0.loss_bbox: 0.2556, aux_task1.loss_heatmap: 0.7970, aux_task1.loss_bbox: 0.3183, aux_task2.loss_heatmap: 0.8040, aux_task2.loss_bbox: 0.3561, aux_task3.loss_heatmap: 0.6630, aux_task3.loss_bbox: 0.2810, aux_task4.loss_heatmap: 0.4428, aux_task4.loss_bbox: 0.2816, aux_task5.loss_heatmap: 0.4703, aux_task5.loss_bbox: 0.2992, loss: 13.4262, grad_norm: 30.6352
2025-05-06 13:14:09,143 - mmdet - INFO - Saving checkpoint at 13 epochs
2025-05-06 13:15:12,776 - mmdet - INFO - Epoch [14][50/773]	lr: 7.767e-05, eta: 1:37:36, time: 1.252, data_time: 0.194, memory: 6212, loss_cls: 0.4411, loss_bbox: 0.7774, d0.loss_cls: 0.4808, d0.loss_bbox: 0.9107, d1.loss_cls: 0.4590, d1.loss_bbox: 0.8222, d2.loss_cls: 0.4456, d2.loss_bbox: 0.8054, d3.loss_cls: 0.4433, d3.loss_bbox: 0.7909, d4.loss_cls: 0.4399, d4.loss_bbox: 0.7832, aux_task0.loss_heatmap: 0.5715, aux_task0.loss_bbox: 0.2510, aux_task1.loss_heatmap: 0.7963, aux_task1.loss_bbox: 0.3161, aux_task2.loss_heatmap: 0.8910, aux_task2.loss_bbox: 0.3476, aux_task3.loss_heatmap: 0.6116, aux_task3.loss_bbox: 0.2785, aux_task4.loss_heatmap: 0.4576, aux_task4.loss_bbox: 0.2776, aux_task5.loss_heatmap: 0.4452, aux_task5.loss_bbox: 0.2861, loss: 13.1295, grad_norm: 31.6588
2025-05-06 13:16:04,679 - mmdet - INFO - Epoch [14][100/773]	lr: 7.664e-05, eta: 1:36:40, time: 1.038, data_time: 0.004, memory: 6212, loss_cls: 0.4610, loss_bbox: 0.7818, d0.loss_cls: 0.4989, d0.loss_bbox: 0.9178, d1.loss_cls: 0.4794, d1.loss_bbox: 0.8292, d2.loss_cls: 0.4655, d2.loss_bbox: 0.8095, d3.loss_cls: 0.4636, d3.loss_bbox: 0.7952, d4.loss_cls: 0.4612, d4.loss_bbox: 0.7869, aux_task0.loss_heatmap: 0.5868, aux_task0.loss_bbox: 0.2438, aux_task1.loss_heatmap: 0.8315, aux_task1.loss_bbox: 0.3196, aux_task2.loss_heatmap: 0.8955, aux_task2.loss_bbox: 0.3460, aux_task3.loss_heatmap: 0.6084, aux_task3.loss_bbox: 0.2794, aux_task4.loss_heatmap: 0.4799, aux_task4.loss_bbox: 0.2897, aux_task5.loss_heatmap: 0.4699, aux_task5.loss_bbox: 0.2885, loss: 13.3891, grad_norm: 31.1711
2025-05-06 13:16:57,693 - mmdet - INFO - Epoch [14][150/773]	lr: 7.561e-05, eta: 1:35:44, time: 1.060, data_time: 0.004, memory: 6212, loss_cls: 0.4408, loss_bbox: 0.7719, d0.loss_cls: 0.4877, d0.loss_bbox: 0.9098, d1.loss_cls: 0.4620, d1.loss_bbox: 0.8213, d2.loss_cls: 0.4487, d2.loss_bbox: 0.8004, d3.loss_cls: 0.4456, d3.loss_bbox: 0.7863, d4.loss_cls: 0.4422, d4.loss_bbox: 0.7778, aux_task0.loss_heatmap: 0.5937, aux_task0.loss_bbox: 0.2594, aux_task1.loss_heatmap: 0.7745, aux_task1.loss_bbox: 0.3148, aux_task2.loss_heatmap: 0.8043, aux_task2.loss_bbox: 0.3527, aux_task3.loss_heatmap: 0.6383, aux_task3.loss_bbox: 0.2898, aux_task4.loss_heatmap: 0.4465, aux_task4.loss_bbox: 0.2753, aux_task5.loss_heatmap: 0.4834, aux_task5.loss_bbox: 0.2906, loss: 13.1178, grad_norm: 30.2755
2025-05-06 13:17:51,152 - mmdet - INFO - Epoch [14][200/773]	lr: 7.457e-05, eta: 1:34:49, time: 1.068, data_time: 0.004, memory: 6212, loss_cls: 0.4593, loss_bbox: 0.7764, d0.loss_cls: 0.5004, d0.loss_bbox: 0.9112, d1.loss_cls: 0.4787, d1.loss_bbox: 0.8249, d2.loss_cls: 0.4666, d2.loss_bbox: 0.8053, d3.loss_cls: 0.4648, d3.loss_bbox: 0.7881, d4.loss_cls: 0.4599, d4.loss_bbox: 0.7814, aux_task0.loss_heatmap: 0.6361, aux_task0.loss_bbox: 0.2541, aux_task1.loss_heatmap: 0.7963, aux_task1.loss_bbox: 0.2997, aux_task2.loss_heatmap: 0.8086, aux_task2.loss_bbox: 0.3467, aux_task3.loss_heatmap: 0.6673, aux_task3.loss_bbox: 0.2792, aux_task4.loss_heatmap: 0.4698, aux_task4.loss_bbox: 0.2857, aux_task5.loss_heatmap: 0.5093, aux_task5.loss_bbox: 0.2924, loss: 13.3622, grad_norm: 28.6691
2025-05-06 13:18:48,609 - mmdet - INFO - Epoch [14][250/773]	lr: 7.353e-05, eta: 1:33:56, time: 1.149, data_time: 0.006, memory: 6212, loss_cls: 0.4439, loss_bbox: 0.7581, d0.loss_cls: 0.4888, d0.loss_bbox: 0.8966, d1.loss_cls: 0.4644, d1.loss_bbox: 0.8102, d2.loss_cls: 0.4509, d2.loss_bbox: 0.7899, d3.loss_cls: 0.4469, d3.loss_bbox: 0.7739, d4.loss_cls: 0.4439, d4.loss_bbox: 0.7646, aux_task0.loss_heatmap: 0.5878, aux_task0.loss_bbox: 0.2504, aux_task1.loss_heatmap: 0.7910, aux_task1.loss_bbox: 0.3155, aux_task2.loss_heatmap: 0.7592, aux_task2.loss_bbox: 0.3258, aux_task3.loss_heatmap: 0.5239, aux_task3.loss_bbox: 0.2716, aux_task4.loss_heatmap: 0.4930, aux_task4.loss_bbox: 0.2904, aux_task5.loss_heatmap: 0.4733, aux_task5.loss_bbox: 0.2915, loss: 12.9055, grad_norm: 29.1470
2025-05-06 13:19:45,486 - mmdet - INFO - Epoch [14][300/773]	lr: 7.249e-05, eta: 1:33:03, time: 1.139, data_time: 0.006, memory: 6212, loss_cls: 0.4463, loss_bbox: 0.7642, d0.loss_cls: 0.4881, d0.loss_bbox: 0.9084, d1.loss_cls: 0.4666, d1.loss_bbox: 0.8195, d2.loss_cls: 0.4534, d2.loss_bbox: 0.7963, d3.loss_cls: 0.4492, d3.loss_bbox: 0.7810, d4.loss_cls: 0.4458, d4.loss_bbox: 0.7736, aux_task0.loss_heatmap: 0.5881, aux_task0.loss_bbox: 0.2425, aux_task1.loss_heatmap: 0.8388, aux_task1.loss_bbox: 0.3167, aux_task2.loss_heatmap: 0.7132, aux_task2.loss_bbox: 0.3330, aux_task3.loss_heatmap: 0.6038, aux_task3.loss_bbox: 0.2880, aux_task4.loss_heatmap: 0.4204, aux_task4.loss_bbox: 0.2770, aux_task5.loss_heatmap: 0.5009, aux_task5.loss_bbox: 0.2961, loss: 13.0111, grad_norm: 34.6046
2025-05-06 13:20:39,064 - mmdet - INFO - Epoch [14][350/773]	lr: 7.144e-05, eta: 1:32:08, time: 1.072, data_time: 0.005, memory: 6212, loss_cls: 0.4428, loss_bbox: 0.7771, d0.loss_cls: 0.4868, d0.loss_bbox: 0.9158, d1.loss_cls: 0.4615, d1.loss_bbox: 0.8285, d2.loss_cls: 0.4508, d2.loss_bbox: 0.8065, d3.loss_cls: 0.4481, d3.loss_bbox: 0.7893, d4.loss_cls: 0.4424, d4.loss_bbox: 0.7837, aux_task0.loss_heatmap: 0.5649, aux_task0.loss_bbox: 0.2503, aux_task1.loss_heatmap: 0.8414, aux_task1.loss_bbox: 0.3260, aux_task2.loss_heatmap: 0.7770, aux_task2.loss_bbox: 0.3408, aux_task3.loss_heatmap: 0.6468, aux_task3.loss_bbox: 0.2863, aux_task4.loss_heatmap: 0.4360, aux_task4.loss_bbox: 0.2815, aux_task5.loss_heatmap: 0.4879, aux_task5.loss_bbox: 0.2933, loss: 13.1660, grad_norm: 29.9289
2025-05-06 13:21:31,468 - mmdet - INFO - Epoch [14][400/773]	lr: 7.040e-05, eta: 1:31:12, time: 1.048, data_time: 0.004, memory: 6212, loss_cls: 0.4467, loss_bbox: 0.7749, d0.loss_cls: 0.4871, d0.loss_bbox: 0.9146, d1.loss_cls: 0.4650, d1.loss_bbox: 0.8275, d2.loss_cls: 0.4525, d2.loss_bbox: 0.8045, d3.loss_cls: 0.4501, d3.loss_bbox: 0.7882, d4.loss_cls: 0.4466, d4.loss_bbox: 0.7808, aux_task0.loss_heatmap: 0.5814, aux_task0.loss_bbox: 0.2429, aux_task1.loss_heatmap: 0.8267, aux_task1.loss_bbox: 0.3291, aux_task2.loss_heatmap: 0.8430, aux_task2.loss_bbox: 0.3469, aux_task3.loss_heatmap: 0.6165, aux_task3.loss_bbox: 0.2885, aux_task4.loss_heatmap: 0.4501, aux_task4.loss_bbox: 0.2916, aux_task5.loss_heatmap: 0.4506, aux_task5.loss_bbox: 0.2826, loss: 13.1882, grad_norm: 30.0275
2025-05-06 13:22:23,739 - mmdet - INFO - Epoch [14][450/773]	lr: 6.935e-05, eta: 1:30:16, time: 1.045, data_time: 0.004, memory: 6212, loss_cls: 0.4441, loss_bbox: 0.7730, d0.loss_cls: 0.4831, d0.loss_bbox: 0.9103, d1.loss_cls: 0.4627, d1.loss_bbox: 0.8226, d2.loss_cls: 0.4532, d2.loss_bbox: 0.7992, d3.loss_cls: 0.4493, d3.loss_bbox: 0.7858, d4.loss_cls: 0.4460, d4.loss_bbox: 0.7785, aux_task0.loss_heatmap: 0.6019, aux_task0.loss_bbox: 0.2505, aux_task1.loss_heatmap: 0.7975, aux_task1.loss_bbox: 0.3240, aux_task2.loss_heatmap: 0.8163, aux_task2.loss_bbox: 0.3342, aux_task3.loss_heatmap: 0.5937, aux_task3.loss_bbox: 0.2797, aux_task4.loss_heatmap: 0.4622, aux_task4.loss_bbox: 0.2803, aux_task5.loss_heatmap: 0.4632, aux_task5.loss_bbox: 0.2928, loss: 13.1042, grad_norm: 27.8511
2025-05-06 13:23:16,393 - mmdet - INFO - Epoch [14][500/773]	lr: 6.829e-05, eta: 1:29:21, time: 1.053, data_time: 0.004, memory: 6212, loss_cls: 0.4444, loss_bbox: 0.7678, d0.loss_cls: 0.4897, d0.loss_bbox: 0.9018, d1.loss_cls: 0.4671, d1.loss_bbox: 0.8154, d2.loss_cls: 0.4537, d2.loss_bbox: 0.7933, d3.loss_cls: 0.4485, d3.loss_bbox: 0.7823, d4.loss_cls: 0.4444, d4.loss_bbox: 0.7752, aux_task0.loss_heatmap: 0.6009, aux_task0.loss_bbox: 0.2483, aux_task1.loss_heatmap: 0.7968, aux_task1.loss_bbox: 0.3149, aux_task2.loss_heatmap: 0.7874, aux_task2.loss_bbox: 0.3449, aux_task3.loss_heatmap: 0.6164, aux_task3.loss_bbox: 0.2896, aux_task4.loss_heatmap: 0.4186, aux_task4.loss_bbox: 0.2752, aux_task5.loss_heatmap: 0.4555, aux_task5.loss_bbox: 0.2926, loss: 13.0247, grad_norm: 29.5442
2025-05-06 13:24:08,950 - mmdet - INFO - Epoch [14][550/773]	lr: 6.724e-05, eta: 1:28:25, time: 1.051, data_time: 0.005, memory: 6212, loss_cls: 0.4436, loss_bbox: 0.7589, d0.loss_cls: 0.4853, d0.loss_bbox: 0.8918, d1.loss_cls: 0.4611, d1.loss_bbox: 0.8059, d2.loss_cls: 0.4506, d2.loss_bbox: 0.7821, d3.loss_cls: 0.4473, d3.loss_bbox: 0.7705, d4.loss_cls: 0.4434, d4.loss_bbox: 0.7642, aux_task0.loss_heatmap: 0.6154, aux_task0.loss_bbox: 0.2483, aux_task1.loss_heatmap: 0.8156, aux_task1.loss_bbox: 0.3138, aux_task2.loss_heatmap: 0.7826, aux_task2.loss_bbox: 0.3433, aux_task3.loss_heatmap: 0.6174, aux_task3.loss_bbox: 0.2917, aux_task4.loss_heatmap: 0.4346, aux_task4.loss_bbox: 0.2776, aux_task5.loss_heatmap: 0.4371, aux_task5.loss_bbox: 0.2910, loss: 12.9728, grad_norm: 29.8513
2025-05-06 13:25:06,226 - mmdet - INFO - Epoch [14][600/773]	lr: 6.618e-05, eta: 1:27:32, time: 1.145, data_time: 0.004, memory: 6212, loss_cls: 0.4410, loss_bbox: 0.7672, d0.loss_cls: 0.4812, d0.loss_bbox: 0.9109, d1.loss_cls: 0.4611, d1.loss_bbox: 0.8200, d2.loss_cls: 0.4477, d2.loss_bbox: 0.7964, d3.loss_cls: 0.4453, d3.loss_bbox: 0.7835, d4.loss_cls: 0.4410, d4.loss_bbox: 0.7748, aux_task0.loss_heatmap: 0.6157, aux_task0.loss_bbox: 0.2507, aux_task1.loss_heatmap: 0.8128, aux_task1.loss_bbox: 0.3177, aux_task2.loss_heatmap: 0.7473, aux_task2.loss_bbox: 0.3409, aux_task3.loss_heatmap: 0.6355, aux_task3.loss_bbox: 0.2873, aux_task4.loss_heatmap: 0.4039, aux_task4.loss_bbox: 0.2769, aux_task5.loss_heatmap: 0.4394, aux_task5.loss_bbox: 0.2926, loss: 12.9909, grad_norm: 28.2805
2025-05-06 13:25:58,845 - mmdet - INFO - Epoch [14][650/773]	lr: 6.512e-05, eta: 1:26:36, time: 1.053, data_time: 0.005, memory: 6212, loss_cls: 0.4318, loss_bbox: 0.7564, d0.loss_cls: 0.4773, d0.loss_bbox: 0.8982, d1.loss_cls: 0.4547, d1.loss_bbox: 0.8080, d2.loss_cls: 0.4403, d2.loss_bbox: 0.7830, d3.loss_cls: 0.4387, d3.loss_bbox: 0.7694, d4.loss_cls: 0.4325, d4.loss_bbox: 0.7621, aux_task0.loss_heatmap: 0.5697, aux_task0.loss_bbox: 0.2364, aux_task1.loss_heatmap: 0.7708, aux_task1.loss_bbox: 0.3192, aux_task2.loss_heatmap: 0.7270, aux_task2.loss_bbox: 0.3356, aux_task3.loss_heatmap: 0.6154, aux_task3.loss_bbox: 0.2782, aux_task4.loss_heatmap: 0.4462, aux_task4.loss_bbox: 0.2722, aux_task5.loss_heatmap: 0.4451, aux_task5.loss_bbox: 0.2938, loss: 12.7619, grad_norm: 30.2637
2025-05-06 13:26:51,268 - mmdet - INFO - Epoch [14][700/773]	lr: 6.407e-05, eta: 1:25:41, time: 1.048, data_time: 0.004, memory: 6212, loss_cls: 0.4210, loss_bbox: 0.7568, d0.loss_cls: 0.4653, d0.loss_bbox: 0.8902, d1.loss_cls: 0.4440, d1.loss_bbox: 0.8039, d2.loss_cls: 0.4298, d2.loss_bbox: 0.7809, d3.loss_cls: 0.4249, d3.loss_bbox: 0.7702, d4.loss_cls: 0.4209, d4.loss_bbox: 0.7631, aux_task0.loss_heatmap: 0.6043, aux_task0.loss_bbox: 0.2434, aux_task1.loss_heatmap: 0.7653, aux_task1.loss_bbox: 0.3014, aux_task2.loss_heatmap: 0.8067, aux_task2.loss_bbox: 0.3374, aux_task3.loss_heatmap: 0.5312, aux_task3.loss_bbox: 0.2743, aux_task4.loss_heatmap: 0.4230, aux_task4.loss_bbox: 0.2701, aux_task5.loss_heatmap: 0.4514, aux_task5.loss_bbox: 0.2929, loss: 12.6724, grad_norm: 27.6301
2025-05-06 13:27:42,991 - mmdet - INFO - Epoch [14][750/773]	lr: 6.301e-05, eta: 1:24:45, time: 1.034, data_time: 0.004, memory: 6212, loss_cls: 0.4329, loss_bbox: 0.7676, d0.loss_cls: 0.4772, d0.loss_bbox: 0.9012, d1.loss_cls: 0.4519, d1.loss_bbox: 0.8158, d2.loss_cls: 0.4416, d2.loss_bbox: 0.7920, d3.loss_cls: 0.4369, d3.loss_bbox: 0.7815, d4.loss_cls: 0.4328, d4.loss_bbox: 0.7754, aux_task0.loss_heatmap: 0.5765, aux_task0.loss_bbox: 0.2411, aux_task1.loss_heatmap: 0.7868, aux_task1.loss_bbox: 0.3175, aux_task2.loss_heatmap: 0.7475, aux_task2.loss_bbox: 0.3529, aux_task3.loss_heatmap: 0.5901, aux_task3.loss_bbox: 0.2833, aux_task4.loss_heatmap: 0.4091, aux_task4.loss_bbox: 0.2742, aux_task5.loss_heatmap: 0.4903, aux_task5.loss_bbox: 0.2983, loss: 12.8744, grad_norm: 27.9688
2025-05-06 13:28:07,668 - mmdet - INFO - Saving checkpoint at 14 epochs
2025-05-06 13:29:25,003 - mmdet - INFO - Epoch [15][50/773]	lr: 6.146e-05, eta: 1:23:24, time: 1.529, data_time: 0.205, memory: 6212, loss_cls: 0.4476, loss_bbox: 0.7684, d0.loss_cls: 0.4879, d0.loss_bbox: 0.8962, d1.loss_cls: 0.4654, d1.loss_bbox: 0.8133, d2.loss_cls: 0.4555, d2.loss_bbox: 0.7921, d3.loss_cls: 0.4515, d3.loss_bbox: 0.7826, d4.loss_cls: 0.4474, d4.loss_bbox: 0.7762, aux_task0.loss_heatmap: 0.5575, aux_task0.loss_bbox: 0.2406, aux_task1.loss_heatmap: 0.7682, aux_task1.loss_bbox: 0.3093, aux_task2.loss_heatmap: 0.8452, aux_task2.loss_bbox: 0.3432, aux_task3.loss_heatmap: 0.5851, aux_task3.loss_bbox: 0.2764, aux_task4.loss_heatmap: 0.4615, aux_task4.loss_bbox: 0.2723, aux_task5.loss_heatmap: 0.4554, aux_task5.loss_bbox: 0.2912, loss: 12.9900, grad_norm: 31.4667
2025-05-06 13:30:23,521 - mmdet - INFO - Epoch [15][100/773]	lr: 6.041e-05, eta: 1:22:31, time: 1.170, data_time: 0.005, memory: 6212, loss_cls: 0.4384, loss_bbox: 0.7738, d0.loss_cls: 0.4832, d0.loss_bbox: 0.9049, d1.loss_cls: 0.4580, d1.loss_bbox: 0.8232, d2.loss_cls: 0.4445, d2.loss_bbox: 0.7995, d3.loss_cls: 0.4407, d3.loss_bbox: 0.7891, d4.loss_cls: 0.4383, d4.loss_bbox: 0.7804, aux_task0.loss_heatmap: 0.5916, aux_task0.loss_bbox: 0.2432, aux_task1.loss_heatmap: 0.8086, aux_task1.loss_bbox: 0.3145, aux_task2.loss_heatmap: 0.8761, aux_task2.loss_bbox: 0.3406, aux_task3.loss_heatmap: 0.5928, aux_task3.loss_bbox: 0.2764, aux_task4.loss_heatmap: 0.4581, aux_task4.loss_bbox: 0.2800, aux_task5.loss_heatmap: 0.4433, aux_task5.loss_bbox: 0.2946, loss: 13.0938, grad_norm: 27.1734
2025-05-06 13:31:17,498 - mmdet - INFO - Epoch [15][150/773]	lr: 5.935e-05, eta: 1:21:36, time: 1.079, data_time: 0.004, memory: 6212, loss_cls: 0.4276, loss_bbox: 0.7326, d0.loss_cls: 0.4731, d0.loss_bbox: 0.8707, d1.loss_cls: 0.4505, d1.loss_bbox: 0.7813, d2.loss_cls: 0.4370, d2.loss_bbox: 0.7578, d3.loss_cls: 0.4317, d3.loss_bbox: 0.7475, d4.loss_cls: 0.4291, d4.loss_bbox: 0.7396, aux_task0.loss_heatmap: 0.5369, aux_task0.loss_bbox: 0.2323, aux_task1.loss_heatmap: 0.7396, aux_task1.loss_bbox: 0.3059, aux_task2.loss_heatmap: 0.7580, aux_task2.loss_bbox: 0.3512, aux_task3.loss_heatmap: 0.5846, aux_task3.loss_bbox: 0.2868, aux_task4.loss_heatmap: 0.4219, aux_task4.loss_bbox: 0.2685, aux_task5.loss_heatmap: 0.4518, aux_task5.loss_bbox: 0.2864, loss: 12.5023, grad_norm: 29.1346
2025-05-06 13:32:10,991 - mmdet - INFO - Epoch [15][200/773]	lr: 5.829e-05, eta: 1:20:41, time: 1.070, data_time: 0.005, memory: 6212, loss_cls: 0.4287, loss_bbox: 0.7469, d0.loss_cls: 0.4736, d0.loss_bbox: 0.8884, d1.loss_cls: 0.4496, d1.loss_bbox: 0.7987, d2.loss_cls: 0.4371, d2.loss_bbox: 0.7732, d3.loss_cls: 0.4323, d3.loss_bbox: 0.7612, d4.loss_cls: 0.4285, d4.loss_bbox: 0.7543, aux_task0.loss_heatmap: 0.5544, aux_task0.loss_bbox: 0.2379, aux_task1.loss_heatmap: 0.7606, aux_task1.loss_bbox: 0.2957, aux_task2.loss_heatmap: 0.7689, aux_task2.loss_bbox: 0.3385, aux_task3.loss_heatmap: 0.6405, aux_task3.loss_bbox: 0.2797, aux_task4.loss_heatmap: 0.4464, aux_task4.loss_bbox: 0.2838, aux_task5.loss_heatmap: 0.4553, aux_task5.loss_bbox: 0.2885, loss: 12.7227, grad_norm: 27.3686
2025-05-06 13:33:04,716 - mmdet - INFO - Epoch [15][250/773]	lr: 5.724e-05, eta: 1:19:46, time: 1.075, data_time: 0.004, memory: 6212, loss_cls: 0.4358, loss_bbox: 0.7507, d0.loss_cls: 0.4730, d0.loss_bbox: 0.8899, d1.loss_cls: 0.4519, d1.loss_bbox: 0.8021, d2.loss_cls: 0.4418, d2.loss_bbox: 0.7759, d3.loss_cls: 0.4388, d3.loss_bbox: 0.7645, d4.loss_cls: 0.4357, d4.loss_bbox: 0.7576, aux_task0.loss_heatmap: 0.5783, aux_task0.loss_bbox: 0.2435, aux_task1.loss_heatmap: 0.7590, aux_task1.loss_bbox: 0.3172, aux_task2.loss_heatmap: 0.7340, aux_task2.loss_bbox: 0.3203, aux_task3.loss_heatmap: 0.5205, aux_task3.loss_bbox: 0.2766, aux_task4.loss_heatmap: 0.4745, aux_task4.loss_bbox: 0.2796, aux_task5.loss_heatmap: 0.4746, aux_task5.loss_bbox: 0.2879, loss: 12.6838, grad_norm: 28.1210
2025-05-06 13:34:02,800 - mmdet - INFO - Epoch [15][300/773]	lr: 5.618e-05, eta: 1:18:53, time: 1.162, data_time: 0.005, memory: 6212, loss_cls: 0.4304, loss_bbox: 0.7418, d0.loss_cls: 0.4706, d0.loss_bbox: 0.8771, d1.loss_cls: 0.4475, d1.loss_bbox: 0.7927, d2.loss_cls: 0.4369, d2.loss_bbox: 0.7686, d3.loss_cls: 0.4333, d3.loss_bbox: 0.7573, d4.loss_cls: 0.4290, d4.loss_bbox: 0.7500, aux_task0.loss_heatmap: 0.5505, aux_task0.loss_bbox: 0.2319, aux_task1.loss_heatmap: 0.8155, aux_task1.loss_bbox: 0.3133, aux_task2.loss_heatmap: 0.6944, aux_task2.loss_bbox: 0.3264, aux_task3.loss_heatmap: 0.5622, aux_task3.loss_bbox: 0.2723, aux_task4.loss_heatmap: 0.4137, aux_task4.loss_bbox: 0.2749, aux_task5.loss_heatmap: 0.4772, aux_task5.loss_bbox: 0.2933, loss: 12.5607, grad_norm: 26.5402
2025-05-06 13:34:55,782 - mmdet - INFO - Epoch [15][350/773]	lr: 5.513e-05, eta: 1:17:58, time: 1.059, data_time: 0.005, memory: 6212, loss_cls: 0.4357, loss_bbox: 0.7536, d0.loss_cls: 0.4764, d0.loss_bbox: 0.8895, d1.loss_cls: 0.4537, d1.loss_bbox: 0.8017, d2.loss_cls: 0.4424, d2.loss_bbox: 0.7785, d3.loss_cls: 0.4380, d3.loss_bbox: 0.7662, d4.loss_cls: 0.4347, d4.loss_bbox: 0.7600, aux_task0.loss_heatmap: 0.6016, aux_task0.loss_bbox: 0.2408, aux_task1.loss_heatmap: 0.8289, aux_task1.loss_bbox: 0.3216, aux_task2.loss_heatmap: 0.7863, aux_task2.loss_bbox: 0.3368, aux_task3.loss_heatmap: 0.6102, aux_task3.loss_bbox: 0.2706, aux_task4.loss_heatmap: 0.4376, aux_task4.loss_bbox: 0.2761, aux_task5.loss_heatmap: 0.4643, aux_task5.loss_bbox: 0.2850, loss: 12.8900, grad_norm: 27.7956
2025-05-06 13:35:50,086 - mmdet - INFO - Epoch [15][400/773]	lr: 5.408e-05, eta: 1:17:03, time: 1.086, data_time: 0.005, memory: 6212, loss_cls: 0.4265, loss_bbox: 0.7631, d0.loss_cls: 0.4728, d0.loss_bbox: 0.9019, d1.loss_cls: 0.4492, d1.loss_bbox: 0.8146, d2.loss_cls: 0.4374, d2.loss_bbox: 0.7905, d3.loss_cls: 0.4322, d3.loss_bbox: 0.7786, d4.loss_cls: 0.4279, d4.loss_bbox: 0.7712, aux_task0.loss_heatmap: 0.5780, aux_task0.loss_bbox: 0.2426, aux_task1.loss_heatmap: 0.7958, aux_task1.loss_bbox: 0.3229, aux_task2.loss_heatmap: 0.8224, aux_task2.loss_bbox: 0.3448, aux_task3.loss_heatmap: 0.5365, aux_task3.loss_bbox: 0.2738, aux_task4.loss_heatmap: 0.4324, aux_task4.loss_bbox: 0.2890, aux_task5.loss_heatmap: 0.4450, aux_task5.loss_bbox: 0.2836, loss: 12.8325, grad_norm: 28.6419
2025-05-06 13:36:48,334 - mmdet - INFO - Epoch [15][450/773]	lr: 5.303e-05, eta: 1:16:10, time: 1.165, data_time: 0.004, memory: 6212, loss_cls: 0.4300, loss_bbox: 0.7510, d0.loss_cls: 0.4737, d0.loss_bbox: 0.8905, d1.loss_cls: 0.4525, d1.loss_bbox: 0.7994, d2.loss_cls: 0.4365, d2.loss_bbox: 0.7769, d3.loss_cls: 0.4339, d3.loss_bbox: 0.7654, d4.loss_cls: 0.4300, d4.loss_bbox: 0.7584, aux_task0.loss_heatmap: 0.5611, aux_task0.loss_bbox: 0.2399, aux_task1.loss_heatmap: 0.7715, aux_task1.loss_bbox: 0.3129, aux_task2.loss_heatmap: 0.8031, aux_task2.loss_bbox: 0.3356, aux_task3.loss_heatmap: 0.5974, aux_task3.loss_bbox: 0.2732, aux_task4.loss_heatmap: 0.4531, aux_task4.loss_bbox: 0.2776, aux_task5.loss_heatmap: 0.4286, aux_task5.loss_bbox: 0.2858, loss: 12.7382, grad_norm: 27.8181
2025-05-06 13:37:46,480 - mmdet - INFO - Epoch [15][500/773]	lr: 5.199e-05, eta: 1:15:17, time: 1.163, data_time: 0.004, memory: 6212, loss_cls: 0.4453, loss_bbox: 0.7509, d0.loss_cls: 0.4874, d0.loss_bbox: 0.8927, d1.loss_cls: 0.4656, d1.loss_bbox: 0.8031, d2.loss_cls: 0.4510, d2.loss_bbox: 0.7780, d3.loss_cls: 0.4469, d3.loss_bbox: 0.7645, d4.loss_cls: 0.4435, d4.loss_bbox: 0.7579, aux_task0.loss_heatmap: 0.6341, aux_task0.loss_bbox: 0.2450, aux_task1.loss_heatmap: 0.7584, aux_task1.loss_bbox: 0.3123, aux_task2.loss_heatmap: 0.7947, aux_task2.loss_bbox: 0.3442, aux_task3.loss_heatmap: 0.6049, aux_task3.loss_bbox: 0.2833, aux_task4.loss_heatmap: 0.4267, aux_task4.loss_bbox: 0.2743, aux_task5.loss_heatmap: 0.4402, aux_task5.loss_bbox: 0.2912, loss: 12.8961, grad_norm: 28.0926
2025-05-06 13:38:44,580 - mmdet - INFO - Epoch [15][550/773]	lr: 5.095e-05, eta: 1:14:24, time: 1.162, data_time: 0.004, memory: 6212, loss_cls: 0.4194, loss_bbox: 0.7456, d0.loss_cls: 0.4653, d0.loss_bbox: 0.8773, d1.loss_cls: 0.4413, d1.loss_bbox: 0.7939, d2.loss_cls: 0.4272, d2.loss_bbox: 0.7705, d3.loss_cls: 0.4249, d3.loss_bbox: 0.7588, d4.loss_cls: 0.4195, d4.loss_bbox: 0.7532, aux_task0.loss_heatmap: 0.6015, aux_task0.loss_bbox: 0.2454, aux_task1.loss_heatmap: 0.7867, aux_task1.loss_bbox: 0.3108, aux_task2.loss_heatmap: 0.7616, aux_task2.loss_bbox: 0.3499, aux_task3.loss_heatmap: 0.5891, aux_task3.loss_bbox: 0.2858, aux_task4.loss_heatmap: 0.4186, aux_task4.loss_bbox: 0.2707, aux_task5.loss_heatmap: 0.4423, aux_task5.loss_bbox: 0.2973, loss: 12.6566, grad_norm: 27.8364
2025-05-06 13:39:42,140 - mmdet - INFO - Epoch [15][600/773]	lr: 4.991e-05, eta: 1:13:30, time: 1.151, data_time: 0.004, memory: 6212, loss_cls: 0.4145, loss_bbox: 0.7351, d0.loss_cls: 0.4568, d0.loss_bbox: 0.8778, d1.loss_cls: 0.4345, d1.loss_bbox: 0.7876, d2.loss_cls: 0.4224, d2.loss_bbox: 0.7623, d3.loss_cls: 0.4188, d3.loss_bbox: 0.7500, d4.loss_cls: 0.4148, d4.loss_bbox: 0.7418, aux_task0.loss_heatmap: 0.5709, aux_task0.loss_bbox: 0.2341, aux_task1.loss_heatmap: 0.7899, aux_task1.loss_bbox: 0.3049, aux_task2.loss_heatmap: 0.7191, aux_task2.loss_bbox: 0.3366, aux_task3.loss_heatmap: 0.6674, aux_task3.loss_bbox: 0.2912, aux_task4.loss_heatmap: 0.4051, aux_task4.loss_bbox: 0.2772, aux_task5.loss_heatmap: 0.4073, aux_task5.loss_bbox: 0.2914, loss: 12.5116, grad_norm: 28.6056
2025-05-06 13:40:37,823 - mmdet - INFO - Epoch [15][650/773]	lr: 4.887e-05, eta: 1:12:36, time: 1.113, data_time: 0.004, memory: 6212, loss_cls: 0.4168, loss_bbox: 0.7397, d0.loss_cls: 0.4596, d0.loss_bbox: 0.8795, d1.loss_cls: 0.4371, d1.loss_bbox: 0.7903, d2.loss_cls: 0.4238, d2.loss_bbox: 0.7673, d3.loss_cls: 0.4201, d3.loss_bbox: 0.7552, d4.loss_cls: 0.4154, d4.loss_bbox: 0.7483, aux_task0.loss_heatmap: 0.5644, aux_task0.loss_bbox: 0.2375, aux_task1.loss_heatmap: 0.7807, aux_task1.loss_bbox: 0.3093, aux_task2.loss_heatmap: 0.7053, aux_task2.loss_bbox: 0.3248, aux_task3.loss_heatmap: 0.6140, aux_task3.loss_bbox: 0.2830, aux_task4.loss_heatmap: 0.4325, aux_task4.loss_bbox: 0.2714, aux_task5.loss_heatmap: 0.4533, aux_task5.loss_bbox: 0.2912, loss: 12.5206, grad_norm: 26.8128
2025-05-06 13:41:30,007 - mmdet - INFO - Epoch [15][700/773]	lr: 4.784e-05, eta: 1:11:40, time: 1.044, data_time: 0.004, memory: 6212, loss_cls: 0.4124, loss_bbox: 0.7355, d0.loss_cls: 0.4618, d0.loss_bbox: 0.8735, d1.loss_cls: 0.4354, d1.loss_bbox: 0.7856, d2.loss_cls: 0.4224, d2.loss_bbox: 0.7613, d3.loss_cls: 0.4177, d3.loss_bbox: 0.7493, d4.loss_cls: 0.4137, d4.loss_bbox: 0.7428, aux_task0.loss_heatmap: 0.5952, aux_task0.loss_bbox: 0.2387, aux_task1.loss_heatmap: 0.7611, aux_task1.loss_bbox: 0.3007, aux_task2.loss_heatmap: 0.7699, aux_task2.loss_bbox: 0.3271, aux_task3.loss_heatmap: 0.5854, aux_task3.loss_bbox: 0.2742, aux_task4.loss_heatmap: 0.3929, aux_task4.loss_bbox: 0.2694, aux_task5.loss_heatmap: 0.4306, aux_task5.loss_bbox: 0.2907, loss: 12.4473, grad_norm: 28.3926
2025-05-06 13:42:22,258 - mmdet - INFO - Epoch [15][750/773]	lr: 4.682e-05, eta: 1:10:45, time: 1.045, data_time: 0.005, memory: 6212, loss_cls: 0.4153, loss_bbox: 0.7362, d0.loss_cls: 0.4613, d0.loss_bbox: 0.8700, d1.loss_cls: 0.4362, d1.loss_bbox: 0.7860, d2.loss_cls: 0.4236, d2.loss_bbox: 0.7630, d3.loss_cls: 0.4199, d3.loss_bbox: 0.7522, d4.loss_cls: 0.4157, d4.loss_bbox: 0.7438, aux_task0.loss_heatmap: 0.5860, aux_task0.loss_bbox: 0.2424, aux_task1.loss_heatmap: 0.7443, aux_task1.loss_bbox: 0.3026, aux_task2.loss_heatmap: 0.7538, aux_task2.loss_bbox: 0.3421, aux_task3.loss_heatmap: 0.5697, aux_task3.loss_bbox: 0.2724, aux_task4.loss_heatmap: 0.4223, aux_task4.loss_bbox: 0.2699, aux_task5.loss_heatmap: 0.4690, aux_task5.loss_bbox: 0.2960, loss: 12.4939, grad_norm: 29.4201
2025-05-06 13:42:46,671 - mmdet - INFO - Saving checkpoint at 15 epochs
2025-05-06 14:02:40,456 - mmdet - INFO - Exp name: lidar_0075v_900q_hednet_hednet_split40.py
2025-05-06 14:02:42,617 - mmdet - INFO - Epoch(val) [15][1505]	pts_bbox_NuScenes/car_AP_dist_0.5: 0.4221, pts_bbox_NuScenes/car_AP_dist_1.0: 0.5980, pts_bbox_NuScenes/car_AP_dist_2.0: 0.6873, pts_bbox_NuScenes/car_AP_dist_4.0: 0.7475, pts_bbox_NuScenes/car_trans_err: 0.3355, pts_bbox_NuScenes/car_scale_err: 0.1720, pts_bbox_NuScenes/car_orient_err: 0.4271, pts_bbox_NuScenes/car_vel_err: 1.3445, pts_bbox_NuScenes/car_attr_err: 0.4010, pts_bbox_NuScenes/mATE: 0.4917, pts_bbox_NuScenes/mASE: 0.3034, pts_bbox_NuScenes/mAOE: 1.0674, pts_bbox_NuScenes/mAVE: 0.9717, pts_bbox_NuScenes/mAAE: 0.4114, pts_bbox_NuScenes/truck_AP_dist_0.5: 0.0886, pts_bbox_NuScenes/truck_AP_dist_1.0: 0.2384, pts_bbox_NuScenes/truck_AP_dist_2.0: 0.3434, pts_bbox_NuScenes/truck_AP_dist_4.0: 0.4019, pts_bbox_NuScenes/truck_trans_err: 0.5484, pts_bbox_NuScenes/truck_scale_err: 0.2536, pts_bbox_NuScenes/truck_orient_err: 0.5245, pts_bbox_NuScenes/truck_vel_err: 0.8687, pts_bbox_NuScenes/truck_attr_err: 0.3540, pts_bbox_NuScenes/construction_vehicle_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/construction_vehicle_AP_dist_1.0: 0.0277, pts_bbox_NuScenes/construction_vehicle_AP_dist_2.0: 0.0960, pts_bbox_NuScenes/construction_vehicle_AP_dist_4.0: 0.1734, pts_bbox_NuScenes/construction_vehicle_trans_err: 0.8223, pts_bbox_NuScenes/construction_vehicle_scale_err: 0.4594, pts_bbox_NuScenes/construction_vehicle_orient_err: 1.4442, pts_bbox_NuScenes/construction_vehicle_vel_err: 0.1330, pts_bbox_NuScenes/construction_vehicle_attr_err: 0.3304, pts_bbox_NuScenes/bus_AP_dist_0.5: 0.0662, pts_bbox_NuScenes/bus_AP_dist_1.0: 0.2391, pts_bbox_NuScenes/bus_AP_dist_2.0: 0.4328, pts_bbox_NuScenes/bus_AP_dist_4.0: 0.5430, pts_bbox_NuScenes/bus_trans_err: 0.6452, pts_bbox_NuScenes/bus_scale_err: 0.2527, pts_bbox_NuScenes/bus_orient_err: 1.0609, pts_bbox_NuScenes/bus_vel_err: 2.1155, pts_bbox_NuScenes/bus_attr_err: 0.6414, pts_bbox_NuScenes/trailer_AP_dist_0.5: 0.0190, pts_bbox_NuScenes/trailer_AP_dist_1.0: 0.0838, pts_bbox_NuScenes/trailer_AP_dist_2.0: 0.1494, pts_bbox_NuScenes/trailer_AP_dist_4.0: 0.2051, pts_bbox_NuScenes/trailer_trans_err: 0.7142, pts_bbox_NuScenes/trailer_scale_err: 0.2760, pts_bbox_NuScenes/trailer_orient_err: 1.4260, pts_bbox_NuScenes/trailer_vel_err: 0.4020, pts_bbox_NuScenes/trailer_attr_err: 0.2194, pts_bbox_NuScenes/barrier_AP_dist_0.5: 0.1602, pts_bbox_NuScenes/barrier_AP_dist_1.0: 0.3686, pts_bbox_NuScenes/barrier_AP_dist_2.0: 0.5198, pts_bbox_NuScenes/barrier_AP_dist_4.0: 0.5743, pts_bbox_NuScenes/barrier_trans_err: 0.5543, pts_bbox_NuScenes/barrier_scale_err: 0.3014, pts_bbox_NuScenes/barrier_orient_err: 0.3780, pts_bbox_NuScenes/barrier_vel_err: nan, pts_bbox_NuScenes/barrier_attr_err: nan, pts_bbox_NuScenes/motorcycle_AP_dist_0.5: 0.1296, pts_bbox_NuScenes/motorcycle_AP_dist_1.0: 0.1730, pts_bbox_NuScenes/motorcycle_AP_dist_2.0: 0.1908, pts_bbox_NuScenes/motorcycle_AP_dist_4.0: 0.1980, pts_bbox_NuScenes/motorcycle_trans_err: 0.3277, pts_bbox_NuScenes/motorcycle_scale_err: 0.2771, pts_bbox_NuScenes/motorcycle_orient_err: 1.3484, pts_bbox_NuScenes/motorcycle_vel_err: 1.4332, pts_bbox_NuScenes/motorcycle_attr_err: 0.4418, pts_bbox_NuScenes/bicycle_AP_dist_0.5: 0.0266, pts_bbox_NuScenes/bicycle_AP_dist_1.0: 0.0317, pts_bbox_NuScenes/bicycle_AP_dist_2.0: 0.0350, pts_bbox_NuScenes/bicycle_AP_dist_4.0: 0.0380, pts_bbox_NuScenes/bicycle_trans_err: 0.2888, pts_bbox_NuScenes/bicycle_scale_err: 0.3208, pts_bbox_NuScenes/bicycle_orient_err: 1.3932, pts_bbox_NuScenes/bicycle_vel_err: 0.5414, pts_bbox_NuScenes/bicycle_attr_err: 0.1187, pts_bbox_NuScenes/pedestrian_AP_dist_0.5: 0.4068, pts_bbox_NuScenes/pedestrian_AP_dist_1.0: 0.6063, pts_bbox_NuScenes/pedestrian_AP_dist_2.0: 0.6588, pts_bbox_NuScenes/pedestrian_AP_dist_4.0: 0.6952, pts_bbox_NuScenes/pedestrian_trans_err: 0.3981, pts_bbox_NuScenes/pedestrian_scale_err: 0.3061, pts_bbox_NuScenes/pedestrian_orient_err: 1.6043, pts_bbox_NuScenes/pedestrian_vel_err: 0.9353, pts_bbox_NuScenes/pedestrian_attr_err: 0.7847, pts_bbox_NuScenes/traffic_cone_AP_dist_0.5: 0.3236, pts_bbox_NuScenes/traffic_cone_AP_dist_1.0: 0.3804, pts_bbox_NuScenes/traffic_cone_AP_dist_2.0: 0.4249, pts_bbox_NuScenes/traffic_cone_AP_dist_4.0: 0.4829, pts_bbox_NuScenes/traffic_cone_trans_err: 0.2825, pts_bbox_NuScenes/traffic_cone_scale_err: 0.4145, pts_bbox_NuScenes/traffic_cone_orient_err: nan, pts_bbox_NuScenes/traffic_cone_vel_err: nan, pts_bbox_NuScenes/traffic_cone_attr_err: nan, pts_bbox_NuScenes/NDS: 0.3320, pts_bbox_NuScenes/mAP: 0.2997
2025-05-06 14:02:42,646 - mmdet - INFO - No ObjectSample now!
2025-05-06 14:03:39,144 - mmdet - INFO - Epoch [16][50/773]	lr: 4.533e-05, eta: 1:09:17, time: 1.105, data_time: 0.080, memory: 6212, loss_cls: 0.4543, loss_bbox: 0.7146, d0.loss_cls: 0.4863, d0.loss_bbox: 0.8598, d1.loss_cls: 0.4722, d1.loss_bbox: 0.7661, d2.loss_cls: 0.4636, d2.loss_bbox: 0.7383, d3.loss_cls: 0.4561, d3.loss_bbox: 0.7263, d4.loss_cls: 0.4553, d4.loss_bbox: 0.7192, aux_task0.loss_heatmap: 0.5609, aux_task0.loss_bbox: 0.2314, aux_task1.loss_heatmap: 0.7886, aux_task1.loss_bbox: 0.2429, aux_task2.loss_heatmap: 0.5746, aux_task2.loss_bbox: 0.1820, aux_task3.loss_heatmap: 0.3237, aux_task3.loss_bbox: 0.1064, aux_task4.loss_heatmap: 0.5947, aux_task4.loss_bbox: 0.1504, aux_task5.loss_heatmap: 0.5440, aux_task5.loss_bbox: 0.2774, loss: 11.8891, grad_norm: 37.6466
2025-05-06 14:04:30,633 - mmdet - INFO - Epoch [16][100/773]	lr: 4.431e-05, eta: 1:08:22, time: 1.030, data_time: 0.005, memory: 6212, loss_cls: 0.4295, loss_bbox: 0.7214, d0.loss_cls: 0.4633, d0.loss_bbox: 0.8687, d1.loss_cls: 0.4407, d1.loss_bbox: 0.7754, d2.loss_cls: 0.4321, d2.loss_bbox: 0.7501, d3.loss_cls: 0.4276, d3.loss_bbox: 0.7368, d4.loss_cls: 0.4266, d4.loss_bbox: 0.7284, aux_task0.loss_heatmap: 0.5429, aux_task0.loss_bbox: 0.2299, aux_task1.loss_heatmap: 0.7170, aux_task1.loss_bbox: 0.2288, aux_task2.loss_heatmap: 0.5459, aux_task2.loss_bbox: 0.1906, aux_task3.loss_heatmap: 0.4129, aux_task3.loss_bbox: 0.1443, aux_task4.loss_heatmap: 0.4802, aux_task4.loss_bbox: 0.1388, aux_task5.loss_heatmap: 0.4953, aux_task5.loss_bbox: 0.2603, loss: 11.5874, grad_norm: 35.4389
2025-05-06 14:05:22,287 - mmdet - INFO - Epoch [16][150/773]	lr: 4.330e-05, eta: 1:07:26, time: 1.033, data_time: 0.005, memory: 6212, loss_cls: 0.4385, loss_bbox: 0.7370, d0.loss_cls: 0.4692, d0.loss_bbox: 0.8746, d1.loss_cls: 0.4538, d1.loss_bbox: 0.7834, d2.loss_cls: 0.4458, d2.loss_bbox: 0.7601, d3.loss_cls: 0.4387, d3.loss_bbox: 0.7490, d4.loss_cls: 0.4370, d4.loss_bbox: 0.7419, aux_task0.loss_heatmap: 0.5534, aux_task0.loss_bbox: 0.2340, aux_task1.loss_heatmap: 0.7001, aux_task1.loss_bbox: 0.2208, aux_task2.loss_heatmap: 0.4432, aux_task2.loss_bbox: 0.1561, aux_task3.loss_heatmap: 0.4114, aux_task3.loss_bbox: 0.1471, aux_task4.loss_heatmap: 0.5396, aux_task4.loss_bbox: 0.1591, aux_task5.loss_heatmap: 0.5054, aux_task5.loss_bbox: 0.2685, loss: 11.6677, grad_norm: 37.1832
2025-05-06 14:06:19,401 - mmdet - INFO - Epoch [16][200/773]	lr: 4.230e-05, eta: 1:06:33, time: 1.142, data_time: 0.005, memory: 6212, loss_cls: 0.4266, loss_bbox: 0.7216, d0.loss_cls: 0.4590, d0.loss_bbox: 0.8675, d1.loss_cls: 0.4404, d1.loss_bbox: 0.7695, d2.loss_cls: 0.4335, d2.loss_bbox: 0.7437, d3.loss_cls: 0.4263, d3.loss_bbox: 0.7343, d4.loss_cls: 0.4257, d4.loss_bbox: 0.7267, aux_task0.loss_heatmap: 0.5598, aux_task0.loss_bbox: 0.2297, aux_task1.loss_heatmap: 0.7230, aux_task1.loss_bbox: 0.2373, aux_task2.loss_heatmap: 0.4829, aux_task2.loss_bbox: 0.1633, aux_task3.loss_heatmap: 0.3485, aux_task3.loss_bbox: 0.1321, aux_task4.loss_heatmap: 0.5019, aux_task4.loss_bbox: 0.1592, aux_task5.loss_heatmap: 0.4745, aux_task5.loss_bbox: 0.2695, loss: 11.4568, grad_norm: 37.2095
2025-05-06 14:07:10,717 - mmdet - INFO - Epoch [16][250/773]	lr: 4.130e-05, eta: 1:05:37, time: 1.026, data_time: 0.005, memory: 6212, loss_cls: 0.4420, loss_bbox: 0.7263, d0.loss_cls: 0.4811, d0.loss_bbox: 0.8744, d1.loss_cls: 0.4605, d1.loss_bbox: 0.7800, d2.loss_cls: 0.4494, d2.loss_bbox: 0.7538, d3.loss_cls: 0.4442, d3.loss_bbox: 0.7403, d4.loss_cls: 0.4430, d4.loss_bbox: 0.7316, aux_task0.loss_heatmap: 0.5806, aux_task0.loss_bbox: 0.2373, aux_task1.loss_heatmap: 0.7860, aux_task1.loss_bbox: 0.2335, aux_task2.loss_heatmap: 0.5443, aux_task2.loss_bbox: 0.1670, aux_task3.loss_heatmap: 0.4319, aux_task3.loss_bbox: 0.1457, aux_task4.loss_heatmap: 0.4733, aux_task4.loss_bbox: 0.1444, aux_task5.loss_heatmap: 0.5025, aux_task5.loss_bbox: 0.2510, loss: 11.8240, grad_norm: 36.0433
2025-05-06 14:08:01,603 - mmdet - INFO - Epoch [16][300/773]	lr: 4.030e-05, eta: 1:04:42, time: 1.018, data_time: 0.005, memory: 6212, loss_cls: 0.4299, loss_bbox: 0.7203, d0.loss_cls: 0.4698, d0.loss_bbox: 0.8651, d1.loss_cls: 0.4510, d1.loss_bbox: 0.7734, d2.loss_cls: 0.4383, d2.loss_bbox: 0.7486, d3.loss_cls: 0.4309, d3.loss_bbox: 0.7357, d4.loss_cls: 0.4298, d4.loss_bbox: 0.7280, aux_task0.loss_heatmap: 0.5222, aux_task0.loss_bbox: 0.2342, aux_task1.loss_heatmap: 0.7092, aux_task1.loss_bbox: 0.2322, aux_task2.loss_heatmap: 0.4897, aux_task2.loss_bbox: 0.1806, aux_task3.loss_heatmap: 0.3895, aux_task3.loss_bbox: 0.1294, aux_task4.loss_heatmap: 0.4840, aux_task4.loss_bbox: 0.1463, aux_task5.loss_heatmap: 0.4944, aux_task5.loss_bbox: 0.2702, loss: 11.5025, grad_norm: 35.8270
2025-05-06 14:08:52,461 - mmdet - INFO - Epoch [16][350/773]	lr: 3.932e-05, eta: 1:03:46, time: 1.017, data_time: 0.005, memory: 6212, loss_cls: 0.4281, loss_bbox: 0.7185, d0.loss_cls: 0.4660, d0.loss_bbox: 0.8564, d1.loss_cls: 0.4435, d1.loss_bbox: 0.7638, d2.loss_cls: 0.4326, d2.loss_bbox: 0.7418, d3.loss_cls: 0.4293, d3.loss_bbox: 0.7297, d4.loss_cls: 0.4274, d4.loss_bbox: 0.7233, aux_task0.loss_heatmap: 0.5211, aux_task0.loss_bbox: 0.2229, aux_task1.loss_heatmap: 0.7043, aux_task1.loss_bbox: 0.2339, aux_task2.loss_heatmap: 0.4113, aux_task2.loss_bbox: 0.1467, aux_task3.loss_heatmap: 0.4390, aux_task3.loss_bbox: 0.1451, aux_task4.loss_heatmap: 0.4279, aux_task4.loss_bbox: 0.1331, aux_task5.loss_heatmap: 0.4709, aux_task5.loss_bbox: 0.2759, loss: 11.2926, grad_norm: 35.1889
2025-05-06 14:09:43,287 - mmdet - INFO - Epoch [16][400/773]	lr: 3.834e-05, eta: 1:02:51, time: 1.016, data_time: 0.005, memory: 6212, loss_cls: 0.4423, loss_bbox: 0.7191, d0.loss_cls: 0.4776, d0.loss_bbox: 0.8681, d1.loss_cls: 0.4542, d1.loss_bbox: 0.7702, d2.loss_cls: 0.4443, d2.loss_bbox: 0.7463, d3.loss_cls: 0.4431, d3.loss_bbox: 0.7335, d4.loss_cls: 0.4409, d4.loss_bbox: 0.7246, aux_task0.loss_heatmap: 0.5490, aux_task0.loss_bbox: 0.2354, aux_task1.loss_heatmap: 0.7319, aux_task1.loss_bbox: 0.2375, aux_task2.loss_heatmap: 0.4859, aux_task2.loss_bbox: 0.1826, aux_task3.loss_heatmap: 0.3715, aux_task3.loss_bbox: 0.1315, aux_task4.loss_heatmap: 0.5145, aux_task4.loss_bbox: 0.1476, aux_task5.loss_heatmap: 0.4904, aux_task5.loss_bbox: 0.2582, loss: 11.6003, grad_norm: 35.7292
2025-05-06 14:10:33,746 - mmdet - INFO - Epoch [16][450/773]	lr: 3.737e-05, eta: 1:01:55, time: 1.009, data_time: 0.005, memory: 6212, loss_cls: 0.4273, loss_bbox: 0.7124, d0.loss_cls: 0.4636, d0.loss_bbox: 0.8444, d1.loss_cls: 0.4420, d1.loss_bbox: 0.7543, d2.loss_cls: 0.4341, d2.loss_bbox: 0.7340, d3.loss_cls: 0.4305, d3.loss_bbox: 0.7215, d4.loss_cls: 0.4277, d4.loss_bbox: 0.7156, aux_task0.loss_heatmap: 0.5232, aux_task0.loss_bbox: 0.2239, aux_task1.loss_heatmap: 0.6982, aux_task1.loss_bbox: 0.2133, aux_task2.loss_heatmap: 0.6267, aux_task2.loss_bbox: 0.2104, aux_task3.loss_heatmap: 0.3849, aux_task3.loss_bbox: 0.1255, aux_task4.loss_heatmap: 0.4796, aux_task4.loss_bbox: 0.1377, aux_task5.loss_heatmap: 0.4614, aux_task5.loss_bbox: 0.2680, loss: 11.4602, grad_norm: 35.5529
2025-05-06 14:11:23,959 - mmdet - INFO - Epoch [16][500/773]	lr: 3.640e-05, eta: 1:01:00, time: 1.004, data_time: 0.005, memory: 6212, loss_cls: 0.4342, loss_bbox: 0.7160, d0.loss_cls: 0.4717, d0.loss_bbox: 0.8617, d1.loss_cls: 0.4511, d1.loss_bbox: 0.7654, d2.loss_cls: 0.4405, d2.loss_bbox: 0.7412, d3.loss_cls: 0.4342, d3.loss_bbox: 0.7297, d4.loss_cls: 0.4350, d4.loss_bbox: 0.7214, aux_task0.loss_heatmap: 0.5535, aux_task0.loss_bbox: 0.2331, aux_task1.loss_heatmap: 0.7447, aux_task1.loss_bbox: 0.2367, aux_task2.loss_heatmap: 0.4571, aux_task2.loss_bbox: 0.1605, aux_task3.loss_heatmap: 0.4007, aux_task3.loss_bbox: 0.1425, aux_task4.loss_heatmap: 0.3743, aux_task4.loss_bbox: 0.1141, aux_task5.loss_heatmap: 0.4988, aux_task5.loss_bbox: 0.2592, loss: 11.3772, grad_norm: 34.0209
2025-05-06 14:12:14,112 - mmdet - INFO - Epoch [16][550/773]	lr: 3.544e-05, eta: 1:00:04, time: 1.003, data_time: 0.005, memory: 6212, loss_cls: 0.4464, loss_bbox: 0.7147, d0.loss_cls: 0.4777, d0.loss_bbox: 0.8627, d1.loss_cls: 0.4654, d1.loss_bbox: 0.7625, d2.loss_cls: 0.4557, d2.loss_bbox: 0.7386, d3.loss_cls: 0.4490, d3.loss_bbox: 0.7276, d4.loss_cls: 0.4453, d4.loss_bbox: 0.7214, aux_task0.loss_heatmap: 0.5622, aux_task0.loss_bbox: 0.2280, aux_task1.loss_heatmap: 0.7831, aux_task1.loss_bbox: 0.2366, aux_task2.loss_heatmap: 0.5076, aux_task2.loss_bbox: 0.1891, aux_task3.loss_heatmap: 0.4164, aux_task3.loss_bbox: 0.1444, aux_task4.loss_heatmap: 0.4983, aux_task4.loss_bbox: 0.1427, aux_task5.loss_heatmap: 0.4821, aux_task5.loss_bbox: 0.2537, loss: 11.7114, grad_norm: 37.7277
2025-05-06 14:13:04,105 - mmdet - INFO - Epoch [16][600/773]	lr: 3.449e-05, eta: 0:59:09, time: 1.000, data_time: 0.005, memory: 6212, loss_cls: 0.4314, loss_bbox: 0.7052, d0.loss_cls: 0.4690, d0.loss_bbox: 0.8483, d1.loss_cls: 0.4473, d1.loss_bbox: 0.7526, d2.loss_cls: 0.4389, d2.loss_bbox: 0.7261, d3.loss_cls: 0.4350, d3.loss_bbox: 0.7165, d4.loss_cls: 0.4311, d4.loss_bbox: 0.7095, aux_task0.loss_heatmap: 0.5213, aux_task0.loss_bbox: 0.2229, aux_task1.loss_heatmap: 0.7663, aux_task1.loss_bbox: 0.2454, aux_task2.loss_heatmap: 0.5072, aux_task2.loss_bbox: 0.1779, aux_task3.loss_heatmap: 0.3776, aux_task3.loss_bbox: 0.1309, aux_task4.loss_heatmap: 0.3663, aux_task4.loss_bbox: 0.1091, aux_task5.loss_heatmap: 0.4801, aux_task5.loss_bbox: 0.2574, loss: 11.2733, grad_norm: 35.5609
2025-05-06 14:13:54,249 - mmdet - INFO - Epoch [16][650/773]	lr: 3.355e-05, eta: 0:58:13, time: 1.003, data_time: 0.005, memory: 6212, loss_cls: 0.4239, loss_bbox: 0.7169, d0.loss_cls: 0.4711, d0.loss_bbox: 0.8580, d1.loss_cls: 0.4494, d1.loss_bbox: 0.7676, d2.loss_cls: 0.4369, d2.loss_bbox: 0.7411, d3.loss_cls: 0.4284, d3.loss_bbox: 0.7303, d4.loss_cls: 0.4233, d4.loss_bbox: 0.7239, aux_task0.loss_heatmap: 0.5536, aux_task0.loss_bbox: 0.2274, aux_task1.loss_heatmap: 0.7586, aux_task1.loss_bbox: 0.2419, aux_task2.loss_heatmap: 0.4885, aux_task2.loss_bbox: 0.1686, aux_task3.loss_heatmap: 0.4140, aux_task3.loss_bbox: 0.1447, aux_task4.loss_heatmap: 0.4784, aux_task4.loss_bbox: 0.1477, aux_task5.loss_heatmap: 0.4749, aux_task5.loss_bbox: 0.2615, loss: 11.5306, grad_norm: 35.2400
2025-05-06 14:14:49,451 - mmdet - INFO - Epoch [16][700/773]	lr: 3.262e-05, eta: 0:57:19, time: 1.104, data_time: 0.005, memory: 6212, loss_cls: 0.4253, loss_bbox: 0.7057, d0.loss_cls: 0.4685, d0.loss_bbox: 0.8517, d1.loss_cls: 0.4449, d1.loss_bbox: 0.7585, d2.loss_cls: 0.4351, d2.loss_bbox: 0.7311, d3.loss_cls: 0.4284, d3.loss_bbox: 0.7205, d4.loss_cls: 0.4257, d4.loss_bbox: 0.7112, aux_task0.loss_heatmap: 0.5335, aux_task0.loss_bbox: 0.2184, aux_task1.loss_heatmap: 0.7294, aux_task1.loss_bbox: 0.2462, aux_task2.loss_heatmap: 0.5025, aux_task2.loss_bbox: 0.1798, aux_task3.loss_heatmap: 0.3727, aux_task3.loss_bbox: 0.1302, aux_task4.loss_heatmap: 0.4253, aux_task4.loss_bbox: 0.1309, aux_task5.loss_heatmap: 0.4640, aux_task5.loss_bbox: 0.2403, loss: 11.2801, grad_norm: 35.4540
2025-05-06 14:15:39,899 - mmdet - INFO - Epoch [16][750/773]	lr: 3.169e-05, eta: 0:56:24, time: 1.009, data_time: 0.005, memory: 6212, loss_cls: 0.4160, loss_bbox: 0.7090, d0.loss_cls: 0.4580, d0.loss_bbox: 0.8548, d1.loss_cls: 0.4353, d1.loss_bbox: 0.7591, d2.loss_cls: 0.4243, d2.loss_bbox: 0.7346, d3.loss_cls: 0.4187, d3.loss_bbox: 0.7219, d4.loss_cls: 0.4138, d4.loss_bbox: 0.7156, aux_task0.loss_heatmap: 0.5524, aux_task0.loss_bbox: 0.2249, aux_task1.loss_heatmap: 0.7684, aux_task1.loss_bbox: 0.2438, aux_task2.loss_heatmap: 0.4132, aux_task2.loss_bbox: 0.1594, aux_task3.loss_heatmap: 0.3524, aux_task3.loss_bbox: 0.1274, aux_task4.loss_heatmap: 0.4042, aux_task4.loss_bbox: 0.1234, aux_task5.loss_heatmap: 0.4689, aux_task5.loss_bbox: 0.2509, loss: 11.1503, grad_norm: 33.4177
2025-05-06 14:16:03,505 - mmdet - INFO - Saving checkpoint at 16 epochs
2025-05-06 14:16:04,413 - mmdet - INFO - No ObjectSample now!
2025-05-06 14:17:00,939 - mmdet - INFO - Epoch [17][50/773]	lr: 3.036e-05, eta: 0:54:59, time: 1.130, data_time: 0.076, memory: 6212, loss_cls: 0.4108, loss_bbox: 0.7050, d0.loss_cls: 0.4487, d0.loss_bbox: 0.8435, d1.loss_cls: 0.4272, d1.loss_bbox: 0.7505, d2.loss_cls: 0.4171, d2.loss_bbox: 0.7264, d3.loss_cls: 0.4136, d3.loss_bbox: 0.7159, d4.loss_cls: 0.4104, d4.loss_bbox: 0.7102, aux_task0.loss_heatmap: 0.5198, aux_task0.loss_bbox: 0.2232, aux_task1.loss_heatmap: 0.7252, aux_task1.loss_bbox: 0.2391, aux_task2.loss_heatmap: 0.4420, aux_task2.loss_bbox: 0.1649, aux_task3.loss_heatmap: 0.3567, aux_task3.loss_bbox: 0.1374, aux_task4.loss_heatmap: 0.4586, aux_task4.loss_bbox: 0.1431, aux_task5.loss_heatmap: 0.4784, aux_task5.loss_bbox: 0.2577, loss: 11.1255, grad_norm: 34.1389
2025-05-06 14:17:51,559 - mmdet - INFO - Epoch [17][100/773]	lr: 2.945e-05, eta: 0:54:04, time: 1.012, data_time: 0.005, memory: 6212, loss_cls: 0.3961, loss_bbox: 0.6844, d0.loss_cls: 0.4409, d0.loss_bbox: 0.8217, d1.loss_cls: 0.4164, d1.loss_bbox: 0.7335, d2.loss_cls: 0.4079, d2.loss_bbox: 0.7100, d3.loss_cls: 0.4019, d3.loss_bbox: 0.6973, d4.loss_cls: 0.3976, d4.loss_bbox: 0.6915, aux_task0.loss_heatmap: 0.5246, aux_task0.loss_bbox: 0.2175, aux_task1.loss_heatmap: 0.6739, aux_task1.loss_bbox: 0.2345, aux_task2.loss_heatmap: 0.4495, aux_task2.loss_bbox: 0.1708, aux_task3.loss_heatmap: 0.3854, aux_task3.loss_bbox: 0.1353, aux_task4.loss_heatmap: 0.4044, aux_task4.loss_bbox: 0.1285, aux_task5.loss_heatmap: 0.4778, aux_task5.loss_bbox: 0.2712, loss: 10.8725, grad_norm: 33.8558
2025-05-06 14:18:42,153 - mmdet - INFO - Epoch [17][150/773]	lr: 2.856e-05, eta: 0:53:09, time: 1.012, data_time: 0.005, memory: 6212, loss_cls: 0.4018, loss_bbox: 0.7078, d0.loss_cls: 0.4458, d0.loss_bbox: 0.8514, d1.loss_cls: 0.4251, d1.loss_bbox: 0.7540, d2.loss_cls: 0.4139, d2.loss_bbox: 0.7332, d3.loss_cls: 0.4078, d3.loss_bbox: 0.7205, d4.loss_cls: 0.4036, d4.loss_bbox: 0.7134, aux_task0.loss_heatmap: 0.5585, aux_task0.loss_bbox: 0.2293, aux_task1.loss_heatmap: 0.6880, aux_task1.loss_bbox: 0.2435, aux_task2.loss_heatmap: 0.4069, aux_task2.loss_bbox: 0.1693, aux_task3.loss_heatmap: 0.3828, aux_task3.loss_bbox: 0.1473, aux_task4.loss_heatmap: 0.3803, aux_task4.loss_bbox: 0.1274, aux_task5.loss_heatmap: 0.4354, aux_task5.loss_bbox: 0.2585, loss: 11.0056, grad_norm: 34.9485
2025-05-06 14:19:32,341 - mmdet - INFO - Epoch [17][200/773]	lr: 2.768e-05, eta: 0:52:14, time: 1.004, data_time: 0.005, memory: 6212, loss_cls: 0.4044, loss_bbox: 0.6889, d0.loss_cls: 0.4477, d0.loss_bbox: 0.8317, d1.loss_cls: 0.4280, d1.loss_bbox: 0.7344, d2.loss_cls: 0.4144, d2.loss_bbox: 0.7118, d3.loss_cls: 0.4090, d3.loss_bbox: 0.6994, d4.loss_cls: 0.4055, d4.loss_bbox: 0.6925, aux_task0.loss_heatmap: 0.4842, aux_task0.loss_bbox: 0.2189, aux_task1.loss_heatmap: 0.6812, aux_task1.loss_bbox: 0.2258, aux_task2.loss_heatmap: 0.4114, aux_task2.loss_bbox: 0.1636, aux_task3.loss_heatmap: 0.2708, aux_task3.loss_bbox: 0.1124, aux_task4.loss_heatmap: 0.4075, aux_task4.loss_bbox: 0.1250, aux_task5.loss_heatmap: 0.4708, aux_task5.loss_bbox: 0.2522, loss: 10.6914, grad_norm: 36.0094
2025-05-06 14:20:28,308 - mmdet - INFO - Epoch [17][250/773]	lr: 2.680e-05, eta: 0:51:20, time: 1.119, data_time: 0.005, memory: 6212, loss_cls: 0.3940, loss_bbox: 0.6926, d0.loss_cls: 0.4457, d0.loss_bbox: 0.8284, d1.loss_cls: 0.4176, d1.loss_bbox: 0.7433, d2.loss_cls: 0.4035, d2.loss_bbox: 0.7168, d3.loss_cls: 0.3984, d3.loss_bbox: 0.7063, d4.loss_cls: 0.3953, d4.loss_bbox: 0.6978, aux_task0.loss_heatmap: 0.5258, aux_task0.loss_bbox: 0.2207, aux_task1.loss_heatmap: 0.7511, aux_task1.loss_bbox: 0.2330, aux_task2.loss_heatmap: 0.4984, aux_task2.loss_bbox: 0.1746, aux_task3.loss_heatmap: 0.3808, aux_task3.loss_bbox: 0.1264, aux_task4.loss_heatmap: 0.4258, aux_task4.loss_bbox: 0.1344, aux_task5.loss_heatmap: 0.4494, aux_task5.loss_bbox: 0.2618, loss: 11.0218, grad_norm: 33.6651
2025-05-06 14:21:18,862 - mmdet - INFO - Epoch [17][300/773]	lr: 2.594e-05, eta: 0:50:25, time: 1.011, data_time: 0.005, memory: 6212, loss_cls: 0.3964, loss_bbox: 0.6969, d0.loss_cls: 0.4411, d0.loss_bbox: 0.8378, d1.loss_cls: 0.4169, d1.loss_bbox: 0.7462, d2.loss_cls: 0.4045, d2.loss_bbox: 0.7230, d3.loss_cls: 0.3995, d3.loss_bbox: 0.7106, d4.loss_cls: 0.3972, d4.loss_bbox: 0.7025, aux_task0.loss_heatmap: 0.5272, aux_task0.loss_bbox: 0.2207, aux_task1.loss_heatmap: 0.6981, aux_task1.loss_bbox: 0.2299, aux_task2.loss_heatmap: 0.5237, aux_task2.loss_bbox: 0.1967, aux_task3.loss_heatmap: 0.3765, aux_task3.loss_bbox: 0.1365, aux_task4.loss_heatmap: 0.4778, aux_task4.loss_bbox: 0.1478, aux_task5.loss_heatmap: 0.4564, aux_task5.loss_bbox: 0.2575, loss: 11.1214, grad_norm: 32.0587
2025-05-06 14:22:09,060 - mmdet - INFO - Epoch [17][350/773]	lr: 2.509e-05, eta: 0:49:30, time: 1.004, data_time: 0.005, memory: 6212, loss_cls: 0.4128, loss_bbox: 0.6935, d0.loss_cls: 0.4497, d0.loss_bbox: 0.8355, d1.loss_cls: 0.4298, d1.loss_bbox: 0.7422, d2.loss_cls: 0.4209, d2.loss_bbox: 0.7189, d3.loss_cls: 0.4140, d3.loss_bbox: 0.7078, d4.loss_cls: 0.4109, d4.loss_bbox: 0.7006, aux_task0.loss_heatmap: 0.5035, aux_task0.loss_bbox: 0.2142, aux_task1.loss_heatmap: 0.8030, aux_task1.loss_bbox: 0.2519, aux_task2.loss_heatmap: 0.4790, aux_task2.loss_bbox: 0.1654, aux_task3.loss_heatmap: 0.3853, aux_task3.loss_bbox: 0.1423, aux_task4.loss_heatmap: 0.4784, aux_task4.loss_bbox: 0.1450, aux_task5.loss_heatmap: 0.4509, aux_task5.loss_bbox: 0.2537, loss: 11.2091, grad_norm: 34.6645
2025-05-06 14:22:59,779 - mmdet - INFO - Epoch [17][400/773]	lr: 2.424e-05, eta: 0:48:35, time: 1.014, data_time: 0.005, memory: 6212, loss_cls: 0.4071, loss_bbox: 0.7023, d0.loss_cls: 0.4435, d0.loss_bbox: 0.8371, d1.loss_cls: 0.4275, d1.loss_bbox: 0.7478, d2.loss_cls: 0.4132, d2.loss_bbox: 0.7260, d3.loss_cls: 0.4088, d3.loss_bbox: 0.7172, d4.loss_cls: 0.4067, d4.loss_bbox: 0.7084, aux_task0.loss_heatmap: 0.5536, aux_task0.loss_bbox: 0.2212, aux_task1.loss_heatmap: 0.7288, aux_task1.loss_bbox: 0.2284, aux_task2.loss_heatmap: 0.4580, aux_task2.loss_bbox: 0.1756, aux_task3.loss_heatmap: 0.3378, aux_task3.loss_bbox: 0.1307, aux_task4.loss_heatmap: 0.4232, aux_task4.loss_bbox: 0.1283, aux_task5.loss_heatmap: 0.4427, aux_task5.loss_bbox: 0.2497, loss: 11.0236, grad_norm: 33.9586
2025-05-06 14:23:50,577 - mmdet - INFO - Epoch [17][450/773]	lr: 2.341e-05, eta: 0:47:40, time: 1.016, data_time: 0.005, memory: 6212, loss_cls: 0.4112, loss_bbox: 0.6870, d0.loss_cls: 0.4494, d0.loss_bbox: 0.8313, d1.loss_cls: 0.4290, d1.loss_bbox: 0.7351, d2.loss_cls: 0.4166, d2.loss_bbox: 0.7104, d3.loss_cls: 0.4138, d3.loss_bbox: 0.7001, d4.loss_cls: 0.4106, d4.loss_bbox: 0.6930, aux_task0.loss_heatmap: 0.4996, aux_task0.loss_bbox: 0.2181, aux_task1.loss_heatmap: 0.6665, aux_task1.loss_bbox: 0.2176, aux_task2.loss_heatmap: 0.4779, aux_task2.loss_bbox: 0.1688, aux_task3.loss_heatmap: 0.4148, aux_task3.loss_bbox: 0.1288, aux_task4.loss_heatmap: 0.4667, aux_task4.loss_bbox: 0.1502, aux_task5.loss_heatmap: 0.4859, aux_task5.loss_bbox: 0.2673, loss: 11.0496, grad_norm: 33.6429
2025-05-06 14:24:40,868 - mmdet - INFO - Epoch [17][500/773]	lr: 2.259e-05, eta: 0:46:45, time: 1.006, data_time: 0.005, memory: 6212, loss_cls: 0.4145, loss_bbox: 0.6969, d0.loss_cls: 0.4527, d0.loss_bbox: 0.8477, d1.loss_cls: 0.4331, d1.loss_bbox: 0.7482, d2.loss_cls: 0.4236, d2.loss_bbox: 0.7234, d3.loss_cls: 0.4199, d3.loss_bbox: 0.7100, d4.loss_cls: 0.4156, d4.loss_bbox: 0.7035, aux_task0.loss_heatmap: 0.5173, aux_task0.loss_bbox: 0.2179, aux_task1.loss_heatmap: 0.6784, aux_task1.loss_bbox: 0.2311, aux_task2.loss_heatmap: 0.4847, aux_task2.loss_bbox: 0.1614, aux_task3.loss_heatmap: 0.3612, aux_task3.loss_bbox: 0.1288, aux_task4.loss_heatmap: 0.3979, aux_task4.loss_bbox: 0.1293, aux_task5.loss_heatmap: 0.4977, aux_task5.loss_bbox: 0.2725, loss: 11.0674, grad_norm: 35.0915
2025-05-06 14:25:31,568 - mmdet - INFO - Epoch [17][550/773]	lr: 2.178e-05, eta: 0:45:50, time: 1.014, data_time: 0.005, memory: 6212, loss_cls: 0.4189, loss_bbox: 0.6886, d0.loss_cls: 0.4603, d0.loss_bbox: 0.8319, d1.loss_cls: 0.4416, d1.loss_bbox: 0.7346, d2.loss_cls: 0.4289, d2.loss_bbox: 0.7105, d3.loss_cls: 0.4247, d3.loss_bbox: 0.6982, d4.loss_cls: 0.4206, d4.loss_bbox: 0.6923, aux_task0.loss_heatmap: 0.5021, aux_task0.loss_bbox: 0.2162, aux_task1.loss_heatmap: 0.7505, aux_task1.loss_bbox: 0.2415, aux_task2.loss_heatmap: 0.4363, aux_task2.loss_bbox: 0.1628, aux_task3.loss_heatmap: 0.3315, aux_task3.loss_bbox: 0.1252, aux_task4.loss_heatmap: 0.3570, aux_task4.loss_bbox: 0.1143, aux_task5.loss_heatmap: 0.4924, aux_task5.loss_bbox: 0.2554, loss: 10.9363, grad_norm: 34.9606
2025-05-06 14:26:22,264 - mmdet - INFO - Epoch [17][600/773]	lr: 2.099e-05, eta: 0:44:56, time: 1.014, data_time: 0.005, memory: 6212, loss_cls: 0.4073, loss_bbox: 0.6954, d0.loss_cls: 0.4513, d0.loss_bbox: 0.8390, d1.loss_cls: 0.4301, d1.loss_bbox: 0.7461, d2.loss_cls: 0.4164, d2.loss_bbox: 0.7234, d3.loss_cls: 0.4127, d3.loss_bbox: 0.7092, d4.loss_cls: 0.4099, d4.loss_bbox: 0.7001, aux_task0.loss_heatmap: 0.5278, aux_task0.loss_bbox: 0.2231, aux_task1.loss_heatmap: 0.6848, aux_task1.loss_bbox: 0.2228, aux_task2.loss_heatmap: 0.4111, aux_task2.loss_bbox: 0.1764, aux_task3.loss_heatmap: 0.3771, aux_task3.loss_bbox: 0.1362, aux_task4.loss_heatmap: 0.4339, aux_task4.loss_bbox: 0.1332, aux_task5.loss_heatmap: 0.4545, aux_task5.loss_bbox: 0.2592, loss: 10.9812, grad_norm: 35.0782
2025-05-06 14:27:12,780 - mmdet - INFO - Epoch [17][650/773]	lr: 2.020e-05, eta: 0:44:01, time: 1.011, data_time: 0.005, memory: 6212, loss_cls: 0.4000, loss_bbox: 0.6796, d0.loss_cls: 0.4443, d0.loss_bbox: 0.8237, d1.loss_cls: 0.4211, d1.loss_bbox: 0.7306, d2.loss_cls: 0.4080, d2.loss_bbox: 0.7067, d3.loss_cls: 0.4023, d3.loss_bbox: 0.6930, d4.loss_cls: 0.4002, d4.loss_bbox: 0.6850, aux_task0.loss_heatmap: 0.5242, aux_task0.loss_bbox: 0.2167, aux_task1.loss_heatmap: 0.7165, aux_task1.loss_bbox: 0.2228, aux_task2.loss_heatmap: 0.4396, aux_task2.loss_bbox: 0.1567, aux_task3.loss_heatmap: 0.3617, aux_task3.loss_bbox: 0.1284, aux_task4.loss_heatmap: 0.3931, aux_task4.loss_bbox: 0.1309, aux_task5.loss_heatmap: 0.4518, aux_task5.loss_bbox: 0.2490, loss: 10.7861, grad_norm: 34.5238
2025-05-06 14:28:03,190 - mmdet - INFO - Epoch [17][700/773]	lr: 1.943e-05, eta: 0:43:06, time: 1.008, data_time: 0.005, memory: 6212, loss_cls: 0.4100, loss_bbox: 0.6966, d0.loss_cls: 0.4523, d0.loss_bbox: 0.8408, d1.loss_cls: 0.4285, d1.loss_bbox: 0.7451, d2.loss_cls: 0.4202, d2.loss_bbox: 0.7208, d3.loss_cls: 0.4124, d3.loss_bbox: 0.7115, d4.loss_cls: 0.4089, d4.loss_bbox: 0.7037, aux_task0.loss_heatmap: 0.5201, aux_task0.loss_bbox: 0.2176, aux_task1.loss_heatmap: 0.7169, aux_task1.loss_bbox: 0.2303, aux_task2.loss_heatmap: 0.4792, aux_task2.loss_bbox: 0.1787, aux_task3.loss_heatmap: 0.4129, aux_task3.loss_bbox: 0.1341, aux_task4.loss_heatmap: 0.4453, aux_task4.loss_bbox: 0.1305, aux_task5.loss_heatmap: 0.4685, aux_task5.loss_bbox: 0.2525, loss: 11.1375, grad_norm: 34.3944
2025-05-06 14:28:54,261 - mmdet - INFO - Epoch [17][750/773]	lr: 1.867e-05, eta: 0:42:11, time: 1.022, data_time: 0.005, memory: 6212, loss_cls: 0.4069, loss_bbox: 0.7029, d0.loss_cls: 0.4504, d0.loss_bbox: 0.8379, d1.loss_cls: 0.4259, d1.loss_bbox: 0.7515, d2.loss_cls: 0.4135, d2.loss_bbox: 0.7294, d3.loss_cls: 0.4088, d3.loss_bbox: 0.7182, d4.loss_cls: 0.4060, d4.loss_bbox: 0.7102, aux_task0.loss_heatmap: 0.5326, aux_task0.loss_bbox: 0.2189, aux_task1.loss_heatmap: 0.6629, aux_task1.loss_bbox: 0.2193, aux_task2.loss_heatmap: 0.4581, aux_task2.loss_bbox: 0.1563, aux_task3.loss_heatmap: 0.3996, aux_task3.loss_bbox: 0.1426, aux_task4.loss_heatmap: 0.4718, aux_task4.loss_bbox: 0.1585, aux_task5.loss_heatmap: 0.4571, aux_task5.loss_bbox: 0.2502, loss: 11.0893, grad_norm: 33.2610
2025-05-06 14:29:17,858 - mmdet - INFO - Saving checkpoint at 17 epochs
2025-05-06 14:29:18,820 - mmdet - INFO - No ObjectSample now!
2025-05-06 14:30:13,761 - mmdet - INFO - Epoch [18][50/773]	lr: 1.758e-05, eta: 0:40:48, time: 1.099, data_time: 0.075, memory: 6212, loss_cls: 0.4088, loss_bbox: 0.6947, d0.loss_cls: 0.4497, d0.loss_bbox: 0.8387, d1.loss_cls: 0.4317, d1.loss_bbox: 0.7463, d2.loss_cls: 0.4203, d2.loss_bbox: 0.7199, d3.loss_cls: 0.4148, d3.loss_bbox: 0.7079, d4.loss_cls: 0.4112, d4.loss_bbox: 0.6995, aux_task0.loss_heatmap: 0.5164, aux_task0.loss_bbox: 0.2125, aux_task1.loss_heatmap: 0.7198, aux_task1.loss_bbox: 0.2275, aux_task2.loss_heatmap: 0.4702, aux_task2.loss_bbox: 0.1750, aux_task3.loss_heatmap: 0.4082, aux_task3.loss_bbox: 0.1451, aux_task4.loss_heatmap: 0.4676, aux_task4.loss_bbox: 0.1535, aux_task5.loss_heatmap: 0.4572, aux_task5.loss_bbox: 0.2581, loss: 11.1547, grad_norm: 34.3357
2025-05-06 14:31:05,061 - mmdet - INFO - Epoch [18][100/773]	lr: 1.685e-05, eta: 0:39:54, time: 1.026, data_time: 0.005, memory: 6212, loss_cls: 0.3889, loss_bbox: 0.6751, d0.loss_cls: 0.4301, d0.loss_bbox: 0.8229, d1.loss_cls: 0.4094, d1.loss_bbox: 0.7251, d2.loss_cls: 0.3975, d2.loss_bbox: 0.7001, d3.loss_cls: 0.3928, d3.loss_bbox: 0.6879, d4.loss_cls: 0.3888, d4.loss_bbox: 0.6807, aux_task0.loss_heatmap: 0.5006, aux_task0.loss_bbox: 0.2173, aux_task1.loss_heatmap: 0.6787, aux_task1.loss_bbox: 0.2249, aux_task2.loss_heatmap: 0.4317, aux_task2.loss_bbox: 0.1531, aux_task3.loss_heatmap: 0.3281, aux_task3.loss_bbox: 0.1249, aux_task4.loss_heatmap: 0.4314, aux_task4.loss_bbox: 0.1506, aux_task5.loss_heatmap: 0.4333, aux_task5.loss_bbox: 0.2464, loss: 10.6200, grad_norm: 33.6433
2025-05-06 14:31:56,574 - mmdet - INFO - Epoch [18][150/773]	lr: 1.613e-05, eta: 0:39:00, time: 1.030, data_time: 0.005, memory: 6212, loss_cls: 0.4004, loss_bbox: 0.6934, d0.loss_cls: 0.4437, d0.loss_bbox: 0.8369, d1.loss_cls: 0.4178, d1.loss_bbox: 0.7399, d2.loss_cls: 0.4077, d2.loss_bbox: 0.7158, d3.loss_cls: 0.4017, d3.loss_bbox: 0.7048, d4.loss_cls: 0.3999, d4.loss_bbox: 0.6987, aux_task0.loss_heatmap: 0.5360, aux_task0.loss_bbox: 0.2227, aux_task1.loss_heatmap: 0.6879, aux_task1.loss_bbox: 0.2390, aux_task2.loss_heatmap: 0.4876, aux_task2.loss_bbox: 0.1869, aux_task3.loss_heatmap: 0.3853, aux_task3.loss_bbox: 0.1449, aux_task4.loss_heatmap: 0.4044, aux_task4.loss_bbox: 0.1312, aux_task5.loss_heatmap: 0.5011, aux_task5.loss_bbox: 0.2698, loss: 11.0577, grad_norm: 32.3216
2025-05-06 14:32:47,946 - mmdet - INFO - Epoch [18][200/773]	lr: 1.543e-05, eta: 0:38:05, time: 1.028, data_time: 0.005, memory: 6212, loss_cls: 0.3957, loss_bbox: 0.6885, d0.loss_cls: 0.4407, d0.loss_bbox: 0.8329, d1.loss_cls: 0.4174, d1.loss_bbox: 0.7369, d2.loss_cls: 0.4041, d2.loss_bbox: 0.7115, d3.loss_cls: 0.3987, d3.loss_bbox: 0.7016, d4.loss_cls: 0.3963, d4.loss_bbox: 0.6950, aux_task0.loss_heatmap: 0.5358, aux_task0.loss_bbox: 0.2196, aux_task1.loss_heatmap: 0.6933, aux_task1.loss_bbox: 0.2287, aux_task2.loss_heatmap: 0.4711, aux_task2.loss_bbox: 0.1841, aux_task3.loss_heatmap: 0.3634, aux_task3.loss_bbox: 0.1341, aux_task4.loss_heatmap: 0.4381, aux_task4.loss_bbox: 0.1336, aux_task5.loss_heatmap: 0.4605, aux_task5.loss_bbox: 0.2550, loss: 10.9366, grad_norm: 33.9248
2025-05-06 14:33:39,245 - mmdet - INFO - Epoch [18][250/773]	lr: 1.474e-05, eta: 0:37:11, time: 1.026, data_time: 0.005, memory: 6212, loss_cls: 0.3980, loss_bbox: 0.6926, d0.loss_cls: 0.4417, d0.loss_bbox: 0.8287, d1.loss_cls: 0.4199, d1.loss_bbox: 0.7419, d2.loss_cls: 0.4074, d2.loss_bbox: 0.7206, d3.loss_cls: 0.4029, d3.loss_bbox: 0.7060, d4.loss_cls: 0.3972, d4.loss_bbox: 0.7000, aux_task0.loss_heatmap: 0.5434, aux_task0.loss_bbox: 0.2156, aux_task1.loss_heatmap: 0.7332, aux_task1.loss_bbox: 0.2377, aux_task2.loss_heatmap: 0.4711, aux_task2.loss_bbox: 0.1873, aux_task3.loss_heatmap: 0.3360, aux_task3.loss_bbox: 0.1320, aux_task4.loss_heatmap: 0.3938, aux_task4.loss_bbox: 0.1242, aux_task5.loss_heatmap: 0.4488, aux_task5.loss_bbox: 0.2617, loss: 10.9418, grad_norm: 34.4990
2025-05-06 14:34:54,587 - mmdet - INFO - Epoch [18][300/773]	lr: 1.407e-05, eta: 0:36:20, time: 1.507, data_time: 0.005, memory: 6212, loss_cls: 0.3879, loss_bbox: 0.6809, d0.loss_cls: 0.4365, d0.loss_bbox: 0.8260, d1.loss_cls: 0.4164, d1.loss_bbox: 0.7295, d2.loss_cls: 0.4020, d2.loss_bbox: 0.7034, d3.loss_cls: 0.3958, d3.loss_bbox: 0.6912, d4.loss_cls: 0.3906, d4.loss_bbox: 0.6869, aux_task0.loss_heatmap: 0.4794, aux_task0.loss_bbox: 0.2091, aux_task1.loss_heatmap: 0.7369, aux_task1.loss_bbox: 0.2421, aux_task2.loss_heatmap: 0.3816, aux_task2.loss_bbox: 0.1503, aux_task3.loss_heatmap: 0.3574, aux_task3.loss_bbox: 0.1405, aux_task4.loss_heatmap: 0.3462, aux_task4.loss_bbox: 0.1057, aux_task5.loss_heatmap: 0.4556, aux_task5.loss_bbox: 0.2586, loss: 10.6106, grad_norm: 33.3354
2025-05-06 14:35:45,221 - mmdet - INFO - Epoch [18][350/773]	lr: 1.340e-05, eta: 0:35:26, time: 1.013, data_time: 0.005, memory: 6212, loss_cls: 0.3897, loss_bbox: 0.6699, d0.loss_cls: 0.4413, d0.loss_bbox: 0.8122, d1.loss_cls: 0.4151, d1.loss_bbox: 0.7214, d2.loss_cls: 0.4020, d2.loss_bbox: 0.6946, d3.loss_cls: 0.3961, d3.loss_bbox: 0.6818, d4.loss_cls: 0.3921, d4.loss_bbox: 0.6756, aux_task0.loss_heatmap: 0.4822, aux_task0.loss_bbox: 0.2165, aux_task1.loss_heatmap: 0.6743, aux_task1.loss_bbox: 0.2206, aux_task2.loss_heatmap: 0.4243, aux_task2.loss_bbox: 0.1561, aux_task3.loss_heatmap: 0.3178, aux_task3.loss_bbox: 0.1027, aux_task4.loss_heatmap: 0.4453, aux_task4.loss_bbox: 0.1462, aux_task5.loss_heatmap: 0.4662, aux_task5.loss_bbox: 0.2540, loss: 10.5980, grad_norm: 35.2764
2025-05-06 14:36:35,563 - mmdet - INFO - Epoch [18][400/773]	lr: 1.276e-05, eta: 0:34:31, time: 1.007, data_time: 0.005, memory: 6212, loss_cls: 0.3884, loss_bbox: 0.6996, d0.loss_cls: 0.4335, d0.loss_bbox: 0.8350, d1.loss_cls: 0.4068, d1.loss_bbox: 0.7470, d2.loss_cls: 0.3975, d2.loss_bbox: 0.7246, d3.loss_cls: 0.3907, d3.loss_bbox: 0.7140, d4.loss_cls: 0.3880, d4.loss_bbox: 0.7066, aux_task0.loss_heatmap: 0.5271, aux_task0.loss_bbox: 0.2205, aux_task1.loss_heatmap: 0.7156, aux_task1.loss_bbox: 0.2383, aux_task2.loss_heatmap: 0.4174, aux_task2.loss_bbox: 0.1655, aux_task3.loss_heatmap: 0.3770, aux_task3.loss_bbox: 0.1593, aux_task4.loss_heatmap: 0.3768, aux_task4.loss_bbox: 0.1054, aux_task5.loss_heatmap: 0.4443, aux_task5.loss_bbox: 0.2589, loss: 10.8379, grad_norm: 32.5406
2025-05-06 14:37:26,188 - mmdet - INFO - Epoch [18][450/773]	lr: 1.212e-05, eta: 0:33:37, time: 1.012, data_time: 0.005, memory: 6212, loss_cls: 0.3898, loss_bbox: 0.6625, d0.loss_cls: 0.4389, d0.loss_bbox: 0.8069, d1.loss_cls: 0.4143, d1.loss_bbox: 0.7115, d2.loss_cls: 0.4019, d2.loss_bbox: 0.6876, d3.loss_cls: 0.3947, d3.loss_bbox: 0.6755, d4.loss_cls: 0.3918, d4.loss_bbox: 0.6670, aux_task0.loss_heatmap: 0.5299, aux_task0.loss_bbox: 0.2165, aux_task1.loss_heatmap: 0.6895, aux_task1.loss_bbox: 0.2148, aux_task2.loss_heatmap: 0.4038, aux_task2.loss_bbox: 0.1750, aux_task3.loss_heatmap: 0.4061, aux_task3.loss_bbox: 0.1369, aux_task4.loss_heatmap: 0.4050, aux_task4.loss_bbox: 0.1318, aux_task5.loss_heatmap: 0.4972, aux_task5.loss_bbox: 0.2598, loss: 10.7085, grad_norm: 33.9891
2025-05-06 14:38:16,873 - mmdet - INFO - Epoch [18][500/773]	lr: 1.150e-05, eta: 0:32:42, time: 1.014, data_time: 0.005, memory: 6212, loss_cls: 0.4043, loss_bbox: 0.6924, d0.loss_cls: 0.4476, d0.loss_bbox: 0.8233, d1.loss_cls: 0.4260, d1.loss_bbox: 0.7389, d2.loss_cls: 0.4168, d2.loss_bbox: 0.7162, d3.loss_cls: 0.4079, d3.loss_bbox: 0.7077, d4.loss_cls: 0.4051, d4.loss_bbox: 0.6980, aux_task0.loss_heatmap: 0.5003, aux_task0.loss_bbox: 0.2126, aux_task1.loss_heatmap: 0.6993, aux_task1.loss_bbox: 0.2265, aux_task2.loss_heatmap: 0.4528, aux_task2.loss_bbox: 0.1558, aux_task3.loss_heatmap: 0.3375, aux_task3.loss_bbox: 0.1279, aux_task4.loss_heatmap: 0.3183, aux_task4.loss_bbox: 0.1188, aux_task5.loss_heatmap: 0.4603, aux_task5.loss_bbox: 0.2639, loss: 10.7584, grad_norm: 33.9689
2025-05-06 14:39:10,720 - mmdet - INFO - Epoch [18][550/773]	lr: 1.090e-05, eta: 0:31:48, time: 1.075, data_time: 0.005, memory: 6212, loss_cls: 0.3851, loss_bbox: 0.6754, d0.loss_cls: 0.4219, d0.loss_bbox: 0.8211, d1.loss_cls: 0.4009, d1.loss_bbox: 0.7278, d2.loss_cls: 0.3910, d2.loss_bbox: 0.7029, d3.loss_cls: 0.3876, d3.loss_bbox: 0.6896, d4.loss_cls: 0.3859, d4.loss_bbox: 0.6817, aux_task0.loss_heatmap: 0.4749, aux_task0.loss_bbox: 0.2076, aux_task1.loss_heatmap: 0.6998, aux_task1.loss_bbox: 0.2227, aux_task2.loss_heatmap: 0.4623, aux_task2.loss_bbox: 0.1807, aux_task3.loss_heatmap: 0.4180, aux_task3.loss_bbox: 0.1511, aux_task4.loss_heatmap: 0.3970, aux_task4.loss_bbox: 0.1358, aux_task5.loss_heatmap: 0.4280, aux_task5.loss_bbox: 0.2480, loss: 10.6968, grad_norm: 32.6785
2025-05-06 14:40:06,300 - mmdet - INFO - Epoch [18][600/773]	lr: 1.031e-05, eta: 0:30:55, time: 1.112, data_time: 0.006, memory: 6212, loss_cls: 0.3981, loss_bbox: 0.6748, d0.loss_cls: 0.4435, d0.loss_bbox: 0.8260, d1.loss_cls: 0.4208, d1.loss_bbox: 0.7287, d2.loss_cls: 0.4096, d2.loss_bbox: 0.7018, d3.loss_cls: 0.4044, d3.loss_bbox: 0.6898, d4.loss_cls: 0.3996, d4.loss_bbox: 0.6811, aux_task0.loss_heatmap: 0.5080, aux_task0.loss_bbox: 0.2185, aux_task1.loss_heatmap: 0.6903, aux_task1.loss_bbox: 0.2285, aux_task2.loss_heatmap: 0.4148, aux_task2.loss_bbox: 0.1543, aux_task3.loss_heatmap: 0.3314, aux_task3.loss_bbox: 0.1190, aux_task4.loss_heatmap: 0.4097, aux_task4.loss_bbox: 0.1331, aux_task5.loss_heatmap: 0.4456, aux_task5.loss_bbox: 0.2565, loss: 10.6880, grad_norm: 32.4701
2025-05-06 14:41:02,128 - mmdet - INFO - Epoch [18][650/773]	lr: 9.734e-06, eta: 0:30:01, time: 1.117, data_time: 0.006, memory: 6212, loss_cls: 0.3860, loss_bbox: 0.6943, d0.loss_cls: 0.4286, d0.loss_bbox: 0.8343, d1.loss_cls: 0.4086, d1.loss_bbox: 0.7448, d2.loss_cls: 0.3992, d2.loss_bbox: 0.7201, d3.loss_cls: 0.3923, d3.loss_bbox: 0.7075, d4.loss_cls: 0.3882, d4.loss_bbox: 0.6999, aux_task0.loss_heatmap: 0.5168, aux_task0.loss_bbox: 0.2120, aux_task1.loss_heatmap: 0.6387, aux_task1.loss_bbox: 0.2191, aux_task2.loss_heatmap: 0.4583, aux_task2.loss_bbox: 0.1691, aux_task3.loss_heatmap: 0.3150, aux_task3.loss_bbox: 0.1187, aux_task4.loss_heatmap: 0.4444, aux_task4.loss_bbox: 0.1366, aux_task5.loss_heatmap: 0.4314, aux_task5.loss_bbox: 0.2503, loss: 10.7141, grad_norm: 31.9622
2025-05-06 14:41:57,790 - mmdet - INFO - Epoch [18][700/773]	lr: 9.175e-06, eta: 0:29:07, time: 1.113, data_time: 0.006, memory: 6212, loss_cls: 0.3794, loss_bbox: 0.6675, d0.loss_cls: 0.4240, d0.loss_bbox: 0.8172, d1.loss_cls: 0.4039, d1.loss_bbox: 0.7202, d2.loss_cls: 0.3904, d2.loss_bbox: 0.6934, d3.loss_cls: 0.3858, d3.loss_bbox: 0.6804, d4.loss_cls: 0.3796, d4.loss_bbox: 0.6731, aux_task0.loss_heatmap: 0.4803, aux_task0.loss_bbox: 0.2088, aux_task1.loss_heatmap: 0.6252, aux_task1.loss_bbox: 0.2250, aux_task2.loss_heatmap: 0.3973, aux_task2.loss_bbox: 0.1587, aux_task3.loss_heatmap: 0.3440, aux_task3.loss_bbox: 0.1303, aux_task4.loss_heatmap: 0.4388, aux_task4.loss_bbox: 0.1450, aux_task5.loss_heatmap: 0.4265, aux_task5.loss_bbox: 0.2498, loss: 10.4444, grad_norm: 33.7451
2025-05-06 14:42:52,524 - mmdet - INFO - Epoch [18][750/773]	lr: 8.630e-06, eta: 0:28:13, time: 1.095, data_time: 0.006, memory: 6212, loss_cls: 0.3993, loss_bbox: 0.6627, d0.loss_cls: 0.4408, d0.loss_bbox: 0.8079, d1.loss_cls: 0.4189, d1.loss_bbox: 0.7106, d2.loss_cls: 0.4111, d2.loss_bbox: 0.6858, d3.loss_cls: 0.4029, d3.loss_bbox: 0.6747, d4.loss_cls: 0.4005, d4.loss_bbox: 0.6677, aux_task0.loss_heatmap: 0.5009, aux_task0.loss_bbox: 0.2095, aux_task1.loss_heatmap: 0.6993, aux_task1.loss_bbox: 0.2281, aux_task2.loss_heatmap: 0.3489, aux_task2.loss_bbox: 0.1556, aux_task3.loss_heatmap: 0.3114, aux_task3.loss_bbox: 0.1141, aux_task4.loss_heatmap: 0.4243, aux_task4.loss_bbox: 0.1307, aux_task5.loss_heatmap: 0.4465, aux_task5.loss_bbox: 0.2552, loss: 10.5073, grad_norm: 32.0752
2025-05-06 14:43:18,775 - mmdet - INFO - Saving checkpoint at 18 epochs
2025-05-06 14:43:20,713 - mmdet - INFO - No ObjectSample now!
2025-05-06 14:44:20,124 - mmdet - INFO - Epoch [19][50/773]	lr: 7.863e-06, eta: 0:26:52, time: 1.187, data_time: 0.067, memory: 6212, loss_cls: 0.3702, loss_bbox: 0.6594, d0.loss_cls: 0.4116, d0.loss_bbox: 0.8062, d1.loss_cls: 0.3903, d1.loss_bbox: 0.7115, d2.loss_cls: 0.3804, d2.loss_bbox: 0.6858, d3.loss_cls: 0.3740, d3.loss_bbox: 0.6754, d4.loss_cls: 0.3699, d4.loss_bbox: 0.6664, aux_task0.loss_heatmap: 0.5019, aux_task0.loss_bbox: 0.2177, aux_task1.loss_heatmap: 0.6839, aux_task1.loss_bbox: 0.2198, aux_task2.loss_heatmap: 0.4503, aux_task2.loss_bbox: 0.1772, aux_task3.loss_heatmap: 0.2734, aux_task3.loss_bbox: 0.1168, aux_task4.loss_heatmap: 0.3870, aux_task4.loss_bbox: 0.1409, aux_task5.loss_heatmap: 0.4409, aux_task5.loss_bbox: 0.2596, loss: 10.3702, grad_norm: 31.4625
2025-05-06 14:45:10,999 - mmdet - INFO - Epoch [19][100/773]	lr: 7.357e-06, eta: 0:25:58, time: 1.019, data_time: 0.006, memory: 6212, loss_cls: 0.3743, loss_bbox: 0.6686, d0.loss_cls: 0.4155, d0.loss_bbox: 0.8025, d1.loss_cls: 0.3958, d1.loss_bbox: 0.7140, d2.loss_cls: 0.3835, d2.loss_bbox: 0.6946, d3.loss_cls: 0.3771, d3.loss_bbox: 0.6827, d4.loss_cls: 0.3750, d4.loss_bbox: 0.6744, aux_task0.loss_heatmap: 0.4945, aux_task0.loss_bbox: 0.2056, aux_task1.loss_heatmap: 0.7047, aux_task1.loss_bbox: 0.2381, aux_task2.loss_heatmap: 0.3996, aux_task2.loss_bbox: 0.1542, aux_task3.loss_heatmap: 0.2996, aux_task3.loss_bbox: 0.1211, aux_task4.loss_heatmap: 0.3926, aux_task4.loss_bbox: 0.1286, aux_task5.loss_heatmap: 0.4675, aux_task5.loss_bbox: 0.2485, loss: 10.4128, grad_norm: 31.7687
2025-05-06 14:46:01,309 - mmdet - INFO - Epoch [19][150/773]	lr: 6.867e-06, eta: 0:25:04, time: 1.006, data_time: 0.005, memory: 6212, loss_cls: 0.3884, loss_bbox: 0.6782, d0.loss_cls: 0.4308, d0.loss_bbox: 0.8188, d1.loss_cls: 0.4084, d1.loss_bbox: 0.7259, d2.loss_cls: 0.4012, d2.loss_bbox: 0.7025, d3.loss_cls: 0.3952, d3.loss_bbox: 0.6914, d4.loss_cls: 0.3906, d4.loss_bbox: 0.6831, aux_task0.loss_heatmap: 0.5415, aux_task0.loss_bbox: 0.2209, aux_task1.loss_heatmap: 0.6456, aux_task1.loss_bbox: 0.2286, aux_task2.loss_heatmap: 0.4135, aux_task2.loss_bbox: 0.1623, aux_task3.loss_heatmap: 0.3621, aux_task3.loss_bbox: 0.1419, aux_task4.loss_heatmap: 0.3668, aux_task4.loss_bbox: 0.1192, aux_task5.loss_heatmap: 0.4275, aux_task5.loss_bbox: 0.2514, loss: 10.5956, grad_norm: 32.7933
2025-05-06 14:46:51,429 - mmdet - INFO - Epoch [19][200/773]	lr: 6.393e-06, eta: 0:24:10, time: 1.002, data_time: 0.005, memory: 6212, loss_cls: 0.3921, loss_bbox: 0.6662, d0.loss_cls: 0.4376, d0.loss_bbox: 0.8061, d1.loss_cls: 0.4175, d1.loss_bbox: 0.7121, d2.loss_cls: 0.4030, d2.loss_bbox: 0.6901, d3.loss_cls: 0.3983, d3.loss_bbox: 0.6794, d4.loss_cls: 0.3931, d4.loss_bbox: 0.6720, aux_task0.loss_heatmap: 0.4916, aux_task0.loss_bbox: 0.2119, aux_task1.loss_heatmap: 0.6670, aux_task1.loss_bbox: 0.2195, aux_task2.loss_heatmap: 0.4264, aux_task2.loss_bbox: 0.1647, aux_task3.loss_heatmap: 0.3572, aux_task3.loss_bbox: 0.1202, aux_task4.loss_heatmap: 0.4724, aux_task4.loss_bbox: 0.1352, aux_task5.loss_heatmap: 0.4313, aux_task5.loss_bbox: 0.2584, loss: 10.6233, grad_norm: 32.6472
2025-05-06 14:47:42,082 - mmdet - INFO - Epoch [19][250/773]	lr: 5.935e-06, eta: 0:23:16, time: 1.013, data_time: 0.005, memory: 6212, loss_cls: 0.3873, loss_bbox: 0.6890, d0.loss_cls: 0.4312, d0.loss_bbox: 0.8320, d1.loss_cls: 0.4092, d1.loss_bbox: 0.7360, d2.loss_cls: 0.4002, d2.loss_bbox: 0.7126, d3.loss_cls: 0.3932, d3.loss_bbox: 0.7015, d4.loss_cls: 0.3893, d4.loss_bbox: 0.6942, aux_task0.loss_heatmap: 0.5141, aux_task0.loss_bbox: 0.2141, aux_task1.loss_heatmap: 0.6968, aux_task1.loss_bbox: 0.2260, aux_task2.loss_heatmap: 0.4263, aux_task2.loss_bbox: 0.1873, aux_task3.loss_heatmap: 0.4359, aux_task3.loss_bbox: 0.1619, aux_task4.loss_heatmap: 0.3739, aux_task4.loss_bbox: 0.1154, aux_task5.loss_heatmap: 0.4604, aux_task5.loss_bbox: 0.2640, loss: 10.8520, grad_norm: 31.8529
2025-05-06 14:48:32,484 - mmdet - INFO - Epoch [19][300/773]	lr: 5.493e-06, eta: 0:22:21, time: 1.008, data_time: 0.005, memory: 6212, loss_cls: 0.3746, loss_bbox: 0.6806, d0.loss_cls: 0.4202, d0.loss_bbox: 0.8156, d1.loss_cls: 0.3995, d1.loss_bbox: 0.7258, d2.loss_cls: 0.3886, d2.loss_bbox: 0.7043, d3.loss_cls: 0.3838, d3.loss_bbox: 0.6904, d4.loss_cls: 0.3765, d4.loss_bbox: 0.6848, aux_task0.loss_heatmap: 0.5074, aux_task0.loss_bbox: 0.2135, aux_task1.loss_heatmap: 0.6659, aux_task1.loss_bbox: 0.2296, aux_task2.loss_heatmap: 0.4386, aux_task2.loss_bbox: 0.1640, aux_task3.loss_heatmap: 0.3465, aux_task3.loss_bbox: 0.1308, aux_task4.loss_heatmap: 0.3762, aux_task4.loss_bbox: 0.1276, aux_task5.loss_heatmap: 0.4040, aux_task5.loss_bbox: 0.2583, loss: 10.5071, grad_norm: 32.4571
2025-05-06 14:49:30,531 - mmdet - INFO - Epoch [19][350/773]	lr: 5.067e-06, eta: 0:21:28, time: 1.161, data_time: 0.008, memory: 6212, loss_cls: 0.3744, loss_bbox: 0.6725, d0.loss_cls: 0.4162, d0.loss_bbox: 0.8092, d1.loss_cls: 0.3954, d1.loss_bbox: 0.7203, d2.loss_cls: 0.3853, d2.loss_bbox: 0.6967, d3.loss_cls: 0.3784, d3.loss_bbox: 0.6852, d4.loss_cls: 0.3747, d4.loss_bbox: 0.6784, aux_task0.loss_heatmap: 0.5073, aux_task0.loss_bbox: 0.2135, aux_task1.loss_heatmap: 0.6192, aux_task1.loss_bbox: 0.2082, aux_task2.loss_heatmap: 0.4489, aux_task2.loss_bbox: 0.1742, aux_task3.loss_heatmap: 0.3357, aux_task3.loss_bbox: 0.1422, aux_task4.loss_heatmap: 0.4528, aux_task4.loss_bbox: 0.1424, aux_task5.loss_heatmap: 0.4382, aux_task5.loss_bbox: 0.2623, loss: 10.5318, grad_norm: 33.8194
2025-05-06 14:50:20,749 - mmdet - INFO - Epoch [19][400/773]	lr: 4.658e-06, eta: 0:20:34, time: 1.004, data_time: 0.005, memory: 6212, loss_cls: 0.3776, loss_bbox: 0.6627, d0.loss_cls: 0.4248, d0.loss_bbox: 0.7967, d1.loss_cls: 0.3999, d1.loss_bbox: 0.7093, d2.loss_cls: 0.3882, d2.loss_bbox: 0.6869, d3.loss_cls: 0.3814, d3.loss_bbox: 0.6728, d4.loss_cls: 0.3800, d4.loss_bbox: 0.6661, aux_task0.loss_heatmap: 0.4771, aux_task0.loss_bbox: 0.2068, aux_task1.loss_heatmap: 0.6433, aux_task1.loss_bbox: 0.2241, aux_task2.loss_heatmap: 0.3888, aux_task2.loss_bbox: 0.1562, aux_task3.loss_heatmap: 0.3548, aux_task3.loss_bbox: 0.1393, aux_task4.loss_heatmap: 0.3893, aux_task4.loss_bbox: 0.1404, aux_task5.loss_heatmap: 0.4352, aux_task5.loss_bbox: 0.2549, loss: 10.3566, grad_norm: 33.4375
2025-05-06 14:51:10,941 - mmdet - INFO - Epoch [19][450/773]	lr: 4.265e-06, eta: 0:19:40, time: 1.004, data_time: 0.005, memory: 6212, loss_cls: 0.3883, loss_bbox: 0.6761, d0.loss_cls: 0.4325, d0.loss_bbox: 0.8195, d1.loss_cls: 0.4095, d1.loss_bbox: 0.7276, d2.loss_cls: 0.3974, d2.loss_bbox: 0.7023, d3.loss_cls: 0.3947, d3.loss_bbox: 0.6888, d4.loss_cls: 0.3888, d4.loss_bbox: 0.6826, aux_task0.loss_heatmap: 0.4858, aux_task0.loss_bbox: 0.2101, aux_task1.loss_heatmap: 0.6894, aux_task1.loss_bbox: 0.2241, aux_task2.loss_heatmap: 0.4214, aux_task2.loss_bbox: 0.1647, aux_task3.loss_heatmap: 0.3551, aux_task3.loss_bbox: 0.1339, aux_task4.loss_heatmap: 0.4230, aux_task4.loss_bbox: 0.1368, aux_task5.loss_heatmap: 0.4286, aux_task5.loss_bbox: 0.2266, loss: 10.6076, grad_norm: 31.7217
2025-05-06 14:52:06,179 - mmdet - INFO - Epoch [19][500/773]	lr: 3.890e-06, eta: 0:18:46, time: 1.105, data_time: 0.004, memory: 6212, loss_cls: 0.3862, loss_bbox: 0.6779, d0.loss_cls: 0.4272, d0.loss_bbox: 0.8171, d1.loss_cls: 0.4068, d1.loss_bbox: 0.7285, d2.loss_cls: 0.3962, d2.loss_bbox: 0.7045, d3.loss_cls: 0.3894, d3.loss_bbox: 0.6927, d4.loss_cls: 0.3868, d4.loss_bbox: 0.6835, aux_task0.loss_heatmap: 0.5025, aux_task0.loss_bbox: 0.2138, aux_task1.loss_heatmap: 0.6771, aux_task1.loss_bbox: 0.2272, aux_task2.loss_heatmap: 0.4692, aux_task2.loss_bbox: 0.1806, aux_task3.loss_heatmap: 0.3497, aux_task3.loss_bbox: 0.1273, aux_task4.loss_heatmap: 0.3832, aux_task4.loss_bbox: 0.1242, aux_task5.loss_heatmap: 0.4303, aux_task5.loss_bbox: 0.2512, loss: 10.6329, grad_norm: 32.5437
2025-05-06 14:52:56,691 - mmdet - INFO - Epoch [19][550/773]	lr: 3.531e-06, eta: 0:17:52, time: 1.010, data_time: 0.005, memory: 6212, loss_cls: 0.3822, loss_bbox: 0.6819, d0.loss_cls: 0.4271, d0.loss_bbox: 0.8208, d1.loss_cls: 0.4055, d1.loss_bbox: 0.7313, d2.loss_cls: 0.3949, d2.loss_bbox: 0.7080, d3.loss_cls: 0.3879, d3.loss_bbox: 0.6958, d4.loss_cls: 0.3825, d4.loss_bbox: 0.6892, aux_task0.loss_heatmap: 0.5119, aux_task0.loss_bbox: 0.2174, aux_task1.loss_heatmap: 0.6524, aux_task1.loss_bbox: 0.2216, aux_task2.loss_heatmap: 0.4744, aux_task2.loss_bbox: 0.1846, aux_task3.loss_heatmap: 0.2903, aux_task3.loss_bbox: 0.1173, aux_task4.loss_heatmap: 0.3648, aux_task4.loss_bbox: 0.1164, aux_task5.loss_heatmap: 0.4514, aux_task5.loss_bbox: 0.2597, loss: 10.5694, grad_norm: 32.3176
2025-05-06 14:53:46,954 - mmdet - INFO - Epoch [19][600/773]	lr: 3.188e-06, eta: 0:16:58, time: 1.005, data_time: 0.005, memory: 6212, loss_cls: 0.3860, loss_bbox: 0.6686, d0.loss_cls: 0.4267, d0.loss_bbox: 0.8118, d1.loss_cls: 0.4028, d1.loss_bbox: 0.7204, d2.loss_cls: 0.3950, d2.loss_bbox: 0.6968, d3.loss_cls: 0.3898, d3.loss_bbox: 0.6849, d4.loss_cls: 0.3870, d4.loss_bbox: 0.6754, aux_task0.loss_heatmap: 0.4995, aux_task0.loss_bbox: 0.2130, aux_task1.loss_heatmap: 0.7111, aux_task1.loss_bbox: 0.2264, aux_task2.loss_heatmap: 0.4097, aux_task2.loss_bbox: 0.1640, aux_task3.loss_heatmap: 0.3924, aux_task3.loss_bbox: 0.1487, aux_task4.loss_heatmap: 0.3944, aux_task4.loss_bbox: 0.1158, aux_task5.loss_heatmap: 0.4971, aux_task5.loss_bbox: 0.2664, loss: 10.6836, grad_norm: 32.4338
2025-05-06 14:54:37,291 - mmdet - INFO - Epoch [19][650/773]	lr: 2.863e-06, eta: 0:16:04, time: 1.007, data_time: 0.005, memory: 6212, loss_cls: 0.4020, loss_bbox: 0.6828, d0.loss_cls: 0.4497, d0.loss_bbox: 0.8376, d1.loss_cls: 0.4264, d1.loss_bbox: 0.7367, d2.loss_cls: 0.4144, d2.loss_bbox: 0.7103, d3.loss_cls: 0.4065, d3.loss_bbox: 0.6966, d4.loss_cls: 0.4013, d4.loss_bbox: 0.6891, aux_task0.loss_heatmap: 0.4686, aux_task0.loss_bbox: 0.2064, aux_task1.loss_heatmap: 0.6558, aux_task1.loss_bbox: 0.2254, aux_task2.loss_heatmap: 0.4572, aux_task2.loss_bbox: 0.1648, aux_task3.loss_heatmap: 0.3898, aux_task3.loss_bbox: 0.1312, aux_task4.loss_heatmap: 0.3945, aux_task4.loss_bbox: 0.1205, aux_task5.loss_heatmap: 0.4684, aux_task5.loss_bbox: 0.2518, loss: 10.7880, grad_norm: 32.8359
2025-05-06 14:55:27,819 - mmdet - INFO - Epoch [19][700/773]	lr: 2.555e-06, eta: 0:15:10, time: 1.010, data_time: 0.005, memory: 6212, loss_cls: 0.3895, loss_bbox: 0.6815, d0.loss_cls: 0.4390, d0.loss_bbox: 0.8130, d1.loss_cls: 0.4125, d1.loss_bbox: 0.7265, d2.loss_cls: 0.4022, d2.loss_bbox: 0.7041, d3.loss_cls: 0.3961, d3.loss_bbox: 0.6911, d4.loss_cls: 0.3916, d4.loss_bbox: 0.6857, aux_task0.loss_heatmap: 0.4788, aux_task0.loss_bbox: 0.2077, aux_task1.loss_heatmap: 0.6464, aux_task1.loss_bbox: 0.2134, aux_task2.loss_heatmap: 0.3326, aux_task2.loss_bbox: 0.1365, aux_task3.loss_heatmap: 0.3122, aux_task3.loss_bbox: 0.1100, aux_task4.loss_heatmap: 0.4310, aux_task4.loss_bbox: 0.1514, aux_task5.loss_heatmap: 0.4366, aux_task5.loss_bbox: 0.2555, loss: 10.4448, grad_norm: 33.1552
2025-05-06 14:56:17,983 - mmdet - INFO - Epoch [19][750/773]	lr: 2.264e-06, eta: 0:14:16, time: 1.003, data_time: 0.005, memory: 6212, loss_cls: 0.3957, loss_bbox: 0.6933, d0.loss_cls: 0.4410, d0.loss_bbox: 0.8269, d1.loss_cls: 0.4197, d1.loss_bbox: 0.7399, d2.loss_cls: 0.4078, d2.loss_bbox: 0.7169, d3.loss_cls: 0.4027, d3.loss_bbox: 0.7031, d4.loss_cls: 0.3980, d4.loss_bbox: 0.6973, aux_task0.loss_heatmap: 0.5312, aux_task0.loss_bbox: 0.2177, aux_task1.loss_heatmap: 0.7059, aux_task1.loss_bbox: 0.2276, aux_task2.loss_heatmap: 0.5118, aux_task2.loss_bbox: 0.1970, aux_task3.loss_heatmap: 0.3560, aux_task3.loss_bbox: 0.1378, aux_task4.loss_heatmap: 0.4927, aux_task4.loss_bbox: 0.1451, aux_task5.loss_heatmap: 0.4536, aux_task5.loss_bbox: 0.2499, loss: 11.0687, grad_norm: 33.0236
2025-05-06 14:56:41,522 - mmdet - INFO - Saving checkpoint at 19 epochs
2025-05-06 14:56:43,340 - mmdet - INFO - No ObjectSample now!
2025-05-06 14:57:44,713 - mmdet - INFO - Epoch [20][50/773]	lr: 1.871e-06, eta: 0:12:56, time: 1.227, data_time: 0.065, memory: 6212, loss_cls: 0.3823, loss_bbox: 0.6753, d0.loss_cls: 0.4253, d0.loss_bbox: 0.8187, d1.loss_cls: 0.4017, d1.loss_bbox: 0.7245, d2.loss_cls: 0.3931, d2.loss_bbox: 0.6999, d3.loss_cls: 0.3882, d3.loss_bbox: 0.6867, d4.loss_cls: 0.3825, d4.loss_bbox: 0.6821, aux_task0.loss_heatmap: 0.5154, aux_task0.loss_bbox: 0.2200, aux_task1.loss_heatmap: 0.6628, aux_task1.loss_bbox: 0.2151, aux_task2.loss_heatmap: 0.4217, aux_task2.loss_bbox: 0.1793, aux_task3.loss_heatmap: 0.3455, aux_task3.loss_bbox: 0.1293, aux_task4.loss_heatmap: 0.4280, aux_task4.loss_bbox: 0.1433, aux_task5.loss_heatmap: 0.4335, aux_task5.loss_bbox: 0.2483, loss: 10.6028, grad_norm: 32.4714
2025-05-06 14:58:34,732 - mmdet - INFO - Epoch [20][100/773]	lr: 1.623e-06, eta: 0:12:02, time: 1.000, data_time: 0.005, memory: 6212, loss_cls: 0.3829, loss_bbox: 0.6628, d0.loss_cls: 0.4307, d0.loss_bbox: 0.7967, d1.loss_cls: 0.4072, d1.loss_bbox: 0.7077, d2.loss_cls: 0.3940, d2.loss_bbox: 0.6850, d3.loss_cls: 0.3882, d3.loss_bbox: 0.6757, d4.loss_cls: 0.3849, d4.loss_bbox: 0.6679, aux_task0.loss_heatmap: 0.4830, aux_task0.loss_bbox: 0.2022, aux_task1.loss_heatmap: 0.6710, aux_task1.loss_bbox: 0.2202, aux_task2.loss_heatmap: 0.3577, aux_task2.loss_bbox: 0.1507, aux_task3.loss_heatmap: 0.3352, aux_task3.loss_bbox: 0.1238, aux_task4.loss_heatmap: 0.3925, aux_task4.loss_bbox: 0.1282, aux_task5.loss_heatmap: 0.4599, aux_task5.loss_bbox: 0.2590, loss: 10.3670, grad_norm: 34.2835
2025-05-06 14:59:24,429 - mmdet - INFO - Epoch [20][150/773]	lr: 1.392e-06, eta: 0:11:09, time: 0.994, data_time: 0.005, memory: 6212, loss_cls: 0.3998, loss_bbox: 0.6917, d0.loss_cls: 0.4440, d0.loss_bbox: 0.8321, d1.loss_cls: 0.4202, d1.loss_bbox: 0.7443, d2.loss_cls: 0.4085, d2.loss_bbox: 0.7220, d3.loss_cls: 0.4029, d3.loss_bbox: 0.7091, d4.loss_cls: 0.3992, d4.loss_bbox: 0.6995, aux_task0.loss_heatmap: 0.5411, aux_task0.loss_bbox: 0.2232, aux_task1.loss_heatmap: 0.6995, aux_task1.loss_bbox: 0.2358, aux_task2.loss_heatmap: 0.4403, aux_task2.loss_bbox: 0.1624, aux_task3.loss_heatmap: 0.3536, aux_task3.loss_bbox: 0.1278, aux_task4.loss_heatmap: 0.3909, aux_task4.loss_bbox: 0.1325, aux_task5.loss_heatmap: 0.4421, aux_task5.loss_bbox: 0.2520, loss: 10.8747, grad_norm: 33.5300
2025-05-06 15:00:20,744 - mmdet - INFO - Epoch [20][200/773]	lr: 1.179e-06, eta: 0:10:15, time: 1.126, data_time: 0.005, memory: 6212, loss_cls: 0.3826, loss_bbox: 0.6718, d0.loss_cls: 0.4256, d0.loss_bbox: 0.8125, d1.loss_cls: 0.4028, d1.loss_bbox: 0.7186, d2.loss_cls: 0.3923, d2.loss_bbox: 0.6933, d3.loss_cls: 0.3849, d3.loss_bbox: 0.6834, d4.loss_cls: 0.3828, d4.loss_bbox: 0.6772, aux_task0.loss_heatmap: 0.5022, aux_task0.loss_bbox: 0.2093, aux_task1.loss_heatmap: 0.6536, aux_task1.loss_bbox: 0.2264, aux_task2.loss_heatmap: 0.4302, aux_task2.loss_bbox: 0.1591, aux_task3.loss_heatmap: 0.2982, aux_task3.loss_bbox: 0.1150, aux_task4.loss_heatmap: 0.4579, aux_task4.loss_bbox: 0.1506, aux_task5.loss_heatmap: 0.4684, aux_task5.loss_bbox: 0.2615, loss: 10.5603, grad_norm: 31.8677
2025-05-06 15:01:11,313 - mmdet - INFO - Epoch [20][250/773]	lr: 9.829e-07, eta: 0:09:21, time: 1.011, data_time: 0.005, memory: 6212, loss_cls: 0.3892, loss_bbox: 0.6679, d0.loss_cls: 0.4338, d0.loss_bbox: 0.8145, d1.loss_cls: 0.4105, d1.loss_bbox: 0.7203, d2.loss_cls: 0.4029, d2.loss_bbox: 0.6906, d3.loss_cls: 0.3955, d3.loss_bbox: 0.6794, d4.loss_cls: 0.3914, d4.loss_bbox: 0.6721, aux_task0.loss_heatmap: 0.4924, aux_task0.loss_bbox: 0.2053, aux_task1.loss_heatmap: 0.7077, aux_task1.loss_bbox: 0.2292, aux_task2.loss_heatmap: 0.3665, aux_task2.loss_bbox: 0.1447, aux_task3.loss_heatmap: 0.3761, aux_task3.loss_bbox: 0.1384, aux_task4.loss_heatmap: 0.3760, aux_task4.loss_bbox: 0.1273, aux_task5.loss_heatmap: 0.4550, aux_task5.loss_bbox: 0.2589, loss: 10.5458, grad_norm: 32.0509
2025-05-06 15:02:02,125 - mmdet - INFO - Epoch [20][300/773]	lr: 8.049e-07, eta: 0:08:27, time: 1.016, data_time: 0.005, memory: 6212, loss_cls: 0.3811, loss_bbox: 0.6823, d0.loss_cls: 0.4264, d0.loss_bbox: 0.8223, d1.loss_cls: 0.4029, d1.loss_bbox: 0.7326, d2.loss_cls: 0.3902, d2.loss_bbox: 0.7081, d3.loss_cls: 0.3867, d3.loss_bbox: 0.6954, d4.loss_cls: 0.3815, d4.loss_bbox: 0.6879, aux_task0.loss_heatmap: 0.5301, aux_task0.loss_bbox: 0.2226, aux_task1.loss_heatmap: 0.6072, aux_task1.loss_bbox: 0.2167, aux_task2.loss_heatmap: 0.4517, aux_task2.loss_bbox: 0.1829, aux_task3.loss_heatmap: 0.3081, aux_task3.loss_bbox: 0.1240, aux_task4.loss_heatmap: 0.4133, aux_task4.loss_bbox: 0.1371, aux_task5.loss_heatmap: 0.4640, aux_task5.loss_bbox: 0.2570, loss: 10.6122, grad_norm: 32.5334
2025-05-06 15:02:52,759 - mmdet - INFO - Epoch [20][350/773]	lr: 6.445e-07, eta: 0:07:34, time: 1.013, data_time: 0.005, memory: 6212, loss_cls: 0.3710, loss_bbox: 0.6763, d0.loss_cls: 0.4168, d0.loss_bbox: 0.8201, d1.loss_cls: 0.3964, d1.loss_bbox: 0.7240, d2.loss_cls: 0.3832, d2.loss_bbox: 0.7006, d3.loss_cls: 0.3780, d3.loss_bbox: 0.6873, d4.loss_cls: 0.3720, d4.loss_bbox: 0.6811, aux_task0.loss_heatmap: 0.4911, aux_task0.loss_bbox: 0.2105, aux_task1.loss_heatmap: 0.6767, aux_task1.loss_bbox: 0.2245, aux_task2.loss_heatmap: 0.4395, aux_task2.loss_bbox: 0.1825, aux_task3.loss_heatmap: 0.3458, aux_task3.loss_bbox: 0.1425, aux_task4.loss_heatmap: 0.3466, aux_task4.loss_bbox: 0.1216, aux_task5.loss_heatmap: 0.4331, aux_task5.loss_bbox: 0.2517, loss: 10.4730, grad_norm: 32.1224
2025-05-06 15:03:43,120 - mmdet - INFO - Epoch [20][400/773]	lr: 5.020e-07, eta: 0:06:40, time: 1.007, data_time: 0.005, memory: 6212, loss_cls: 0.3791, loss_bbox: 0.6770, d0.loss_cls: 0.4258, d0.loss_bbox: 0.8213, d1.loss_cls: 0.4011, d1.loss_bbox: 0.7259, d2.loss_cls: 0.3912, d2.loss_bbox: 0.7018, d3.loss_cls: 0.3847, d3.loss_bbox: 0.6903, d4.loss_cls: 0.3794, d4.loss_bbox: 0.6837, aux_task0.loss_heatmap: 0.5122, aux_task0.loss_bbox: 0.2144, aux_task1.loss_heatmap: 0.6750, aux_task1.loss_bbox: 0.2243, aux_task2.loss_heatmap: 0.4622, aux_task2.loss_bbox: 0.1693, aux_task3.loss_heatmap: 0.3358, aux_task3.loss_bbox: 0.1232, aux_task4.loss_heatmap: 0.3651, aux_task4.loss_bbox: 0.1292, aux_task5.loss_heatmap: 0.4291, aux_task5.loss_bbox: 0.2545, loss: 10.5554, grad_norm: 31.6201
2025-05-06 15:04:32,958 - mmdet - INFO - Epoch [20][450/773]	lr: 3.772e-07, eta: 0:05:46, time: 0.997, data_time: 0.005, memory: 6212, loss_cls: 0.3826, loss_bbox: 0.6695, d0.loss_cls: 0.4259, d0.loss_bbox: 0.8180, d1.loss_cls: 0.4044, d1.loss_bbox: 0.7211, d2.loss_cls: 0.3930, d2.loss_bbox: 0.6943, d3.loss_cls: 0.3861, d3.loss_bbox: 0.6814, d4.loss_cls: 0.3824, d4.loss_bbox: 0.6753, aux_task0.loss_heatmap: 0.4840, aux_task0.loss_bbox: 0.2063, aux_task1.loss_heatmap: 0.6898, aux_task1.loss_bbox: 0.2275, aux_task2.loss_heatmap: 0.3892, aux_task2.loss_bbox: 0.1539, aux_task3.loss_heatmap: 0.3698, aux_task3.loss_bbox: 0.1317, aux_task4.loss_heatmap: 0.3513, aux_task4.loss_bbox: 0.1227, aux_task5.loss_heatmap: 0.4512, aux_task5.loss_bbox: 0.2477, loss: 10.4590, grad_norm: 34.4631
2025-05-06 15:05:23,009 - mmdet - INFO - Epoch [20][500/773]	lr: 2.702e-07, eta: 0:04:52, time: 1.001, data_time: 0.005, memory: 6212, loss_cls: 0.3856, loss_bbox: 0.6770, d0.loss_cls: 0.4263, d0.loss_bbox: 0.8140, d1.loss_cls: 0.4048, d1.loss_bbox: 0.7257, d2.loss_cls: 0.3967, d2.loss_bbox: 0.7023, d3.loss_cls: 0.3896, d3.loss_bbox: 0.6910, d4.loss_cls: 0.3869, d4.loss_bbox: 0.6818, aux_task0.loss_heatmap: 0.5017, aux_task0.loss_bbox: 0.2098, aux_task1.loss_heatmap: 0.6735, aux_task1.loss_bbox: 0.2258, aux_task2.loss_heatmap: 0.4362, aux_task2.loss_bbox: 0.1702, aux_task3.loss_heatmap: 0.3559, aux_task3.loss_bbox: 0.1447, aux_task4.loss_heatmap: 0.3982, aux_task4.loss_bbox: 0.1231, aux_task5.loss_heatmap: 0.4581, aux_task5.loss_bbox: 0.2643, loss: 10.6433, grad_norm: 33.4575
2025-05-06 15:06:13,994 - mmdet - INFO - Epoch [20][550/773]	lr: 1.810e-07, eta: 0:03:59, time: 1.020, data_time: 0.005, memory: 6212, loss_cls: 0.3909, loss_bbox: 0.6743, d0.loss_cls: 0.4355, d0.loss_bbox: 0.8140, d1.loss_cls: 0.4116, d1.loss_bbox: 0.7243, d2.loss_cls: 0.4008, d2.loss_bbox: 0.6996, d3.loss_cls: 0.3949, d3.loss_bbox: 0.6892, d4.loss_cls: 0.3908, d4.loss_bbox: 0.6803, aux_task0.loss_heatmap: 0.4973, aux_task0.loss_bbox: 0.2055, aux_task1.loss_heatmap: 0.6615, aux_task1.loss_bbox: 0.2200, aux_task2.loss_heatmap: 0.3912, aux_task2.loss_bbox: 0.1492, aux_task3.loss_heatmap: 0.3508, aux_task3.loss_bbox: 0.1347, aux_task4.loss_heatmap: 0.4694, aux_task4.loss_bbox: 0.1452, aux_task5.loss_heatmap: 0.4413, aux_task5.loss_bbox: 0.2562, loss: 10.6286, grad_norm: 32.6805
2025-05-06 15:07:04,234 - mmdet - INFO - Epoch [20][600/773]	lr: 1.097e-07, eta: 0:03:05, time: 1.005, data_time: 0.005, memory: 6212, loss_cls: 0.3850, loss_bbox: 0.6690, d0.loss_cls: 0.4255, d0.loss_bbox: 0.8121, d1.loss_cls: 0.4074, d1.loss_bbox: 0.7194, d2.loss_cls: 0.3956, d2.loss_bbox: 0.6966, d3.loss_cls: 0.3889, d3.loss_bbox: 0.6828, d4.loss_cls: 0.3864, d4.loss_bbox: 0.6744, aux_task0.loss_heatmap: 0.4898, aux_task0.loss_bbox: 0.2077, aux_task1.loss_heatmap: 0.6964, aux_task1.loss_bbox: 0.2253, aux_task2.loss_heatmap: 0.4189, aux_task2.loss_bbox: 0.1814, aux_task3.loss_heatmap: 0.3074, aux_task3.loss_bbox: 0.1323, aux_task4.loss_heatmap: 0.3352, aux_task4.loss_bbox: 0.1070, aux_task5.loss_heatmap: 0.4478, aux_task5.loss_bbox: 0.2597, loss: 10.4518, grad_norm: 31.8569
2025-05-06 15:07:54,294 - mmdet - INFO - Epoch [20][650/773]	lr: 5.636e-08, eta: 0:02:11, time: 1.001, data_time: 0.005, memory: 6212, loss_cls: 0.3687, loss_bbox: 0.6688, d0.loss_cls: 0.4118, d0.loss_bbox: 0.8108, d1.loss_cls: 0.3876, d1.loss_bbox: 0.7196, d2.loss_cls: 0.3768, d2.loss_bbox: 0.6947, d3.loss_cls: 0.3725, d3.loss_bbox: 0.6831, d4.loss_cls: 0.3679, d4.loss_bbox: 0.6752, aux_task0.loss_heatmap: 0.4817, aux_task0.loss_bbox: 0.2130, aux_task1.loss_heatmap: 0.6578, aux_task1.loss_bbox: 0.2185, aux_task2.loss_heatmap: 0.4746, aux_task2.loss_bbox: 0.1749, aux_task3.loss_heatmap: 0.3076, aux_task3.loss_bbox: 0.1222, aux_task4.loss_heatmap: 0.4535, aux_task4.loss_bbox: 0.1492, aux_task5.loss_heatmap: 0.3969, aux_task5.loss_bbox: 0.2491, loss: 10.4363, grad_norm: 31.1872
2025-05-06 15:08:44,876 - mmdet - INFO - Epoch [20][700/773]	lr: 2.088e-08, eta: 0:01:18, time: 1.012, data_time: 0.005, memory: 6212, loss_cls: 0.3873, loss_bbox: 0.6609, d0.loss_cls: 0.4341, d0.loss_bbox: 0.7996, d1.loss_cls: 0.4110, d1.loss_bbox: 0.7109, d2.loss_cls: 0.3988, d2.loss_bbox: 0.6873, d3.loss_cls: 0.3916, d3.loss_bbox: 0.6743, d4.loss_cls: 0.3873, d4.loss_bbox: 0.6675, aux_task0.loss_heatmap: 0.4912, aux_task0.loss_bbox: 0.2089, aux_task1.loss_heatmap: 0.6466, aux_task1.loss_bbox: 0.2272, aux_task2.loss_heatmap: 0.4245, aux_task2.loss_bbox: 0.1710, aux_task3.loss_heatmap: 0.3741, aux_task3.loss_bbox: 0.1397, aux_task4.loss_heatmap: 0.4113, aux_task4.loss_bbox: 0.1357, aux_task5.loss_heatmap: 0.4320, aux_task5.loss_bbox: 0.2421, loss: 10.5148, grad_norm: 32.7798
2025-05-06 15:09:35,469 - mmdet - INFO - Epoch [20][750/773]	lr: 3.315e-09, eta: 0:00:24, time: 1.012, data_time: 0.005, memory: 6212, loss_cls: 0.3827, loss_bbox: 0.6750, d0.loss_cls: 0.4293, d0.loss_bbox: 0.8191, d1.loss_cls: 0.4075, d1.loss_bbox: 0.7276, d2.loss_cls: 0.3952, d2.loss_bbox: 0.7002, d3.loss_cls: 0.3905, d3.loss_bbox: 0.6870, d4.loss_cls: 0.3845, d4.loss_bbox: 0.6811, aux_task0.loss_heatmap: 0.5149, aux_task0.loss_bbox: 0.2162, aux_task1.loss_heatmap: 0.6658, aux_task1.loss_bbox: 0.2227, aux_task2.loss_heatmap: 0.4665, aux_task2.loss_bbox: 0.1696, aux_task3.loss_heatmap: 0.3454, aux_task3.loss_bbox: 0.1186, aux_task4.loss_heatmap: 0.3890, aux_task4.loss_bbox: 0.1271, aux_task5.loss_heatmap: 0.4394, aux_task5.loss_bbox: 0.2515, loss: 10.6066, grad_norm: 34.7044
2025-05-06 15:09:58,955 - mmdet - INFO - Saving checkpoint at 20 epochs
2025-05-06 15:28:49,267 - mmdet - INFO - Exp name: lidar_0075v_900q_hednet_hednet_split40.py
2025-05-06 15:28:49,267 - mmdet - INFO - Epoch(val) [20][1505]	pts_bbox_NuScenes/car_AP_dist_0.5: 0.5116, pts_bbox_NuScenes/car_AP_dist_1.0: 0.6695, pts_bbox_NuScenes/car_AP_dist_2.0: 0.7467, pts_bbox_NuScenes/car_AP_dist_4.0: 0.7908, pts_bbox_NuScenes/car_trans_err: 0.2730, pts_bbox_NuScenes/car_scale_err: 0.1713, pts_bbox_NuScenes/car_orient_err: 0.3144, pts_bbox_NuScenes/car_vel_err: 1.4577, pts_bbox_NuScenes/car_attr_err: 0.4271, pts_bbox_NuScenes/mATE: 0.4615, pts_bbox_NuScenes/mASE: 0.2915, pts_bbox_NuScenes/mAOE: 0.9768, pts_bbox_NuScenes/mAVE: 1.1115, pts_bbox_NuScenes/mAAE: 0.4422, pts_bbox_NuScenes/truck_AP_dist_0.5: 0.1594, pts_bbox_NuScenes/truck_AP_dist_1.0: 0.3258, pts_bbox_NuScenes/truck_AP_dist_2.0: 0.4474, pts_bbox_NuScenes/truck_AP_dist_4.0: 0.4976, pts_bbox_NuScenes/truck_trans_err: 0.5070, pts_bbox_NuScenes/truck_scale_err: 0.2452, pts_bbox_NuScenes/truck_orient_err: 0.3569, pts_bbox_NuScenes/truck_vel_err: 0.9836, pts_bbox_NuScenes/truck_attr_err: 0.3798, pts_bbox_NuScenes/construction_vehicle_AP_dist_0.5: 0.0001, pts_bbox_NuScenes/construction_vehicle_AP_dist_1.0: 0.0691, pts_bbox_NuScenes/construction_vehicle_AP_dist_2.0: 0.2030, pts_bbox_NuScenes/construction_vehicle_AP_dist_4.0: 0.3020, pts_bbox_NuScenes/construction_vehicle_trans_err: 0.8140, pts_bbox_NuScenes/construction_vehicle_scale_err: 0.4717, pts_bbox_NuScenes/construction_vehicle_orient_err: 1.3417, pts_bbox_NuScenes/construction_vehicle_vel_err: 0.1415, pts_bbox_NuScenes/construction_vehicle_attr_err: 0.3778, pts_bbox_NuScenes/bus_AP_dist_0.5: 0.1305, pts_bbox_NuScenes/bus_AP_dist_1.0: 0.3803, pts_bbox_NuScenes/bus_AP_dist_2.0: 0.6009, pts_bbox_NuScenes/bus_AP_dist_4.0: 0.6829, pts_bbox_NuScenes/bus_trans_err: 0.5878, pts_bbox_NuScenes/bus_scale_err: 0.2408, pts_bbox_NuScenes/bus_orient_err: 0.9449, pts_bbox_NuScenes/bus_vel_err: 2.4197, pts_bbox_NuScenes/bus_attr_err: 0.6491, pts_bbox_NuScenes/trailer_AP_dist_0.5: 0.0415, pts_bbox_NuScenes/trailer_AP_dist_1.0: 0.1645, pts_bbox_NuScenes/trailer_AP_dist_2.0: 0.3314, pts_bbox_NuScenes/trailer_AP_dist_4.0: 0.4685, pts_bbox_NuScenes/trailer_trans_err: 0.7180, pts_bbox_NuScenes/trailer_scale_err: 0.2668, pts_bbox_NuScenes/trailer_orient_err: 1.3941, pts_bbox_NuScenes/trailer_vel_err: 0.4702, pts_bbox_NuScenes/trailer_attr_err: 0.2561, pts_bbox_NuScenes/barrier_AP_dist_0.5: 0.2204, pts_bbox_NuScenes/barrier_AP_dist_1.0: 0.4523, pts_bbox_NuScenes/barrier_AP_dist_2.0: 0.6009, pts_bbox_NuScenes/barrier_AP_dist_4.0: 0.6563, pts_bbox_NuScenes/barrier_trans_err: 0.5011, pts_bbox_NuScenes/barrier_scale_err: 0.3048, pts_bbox_NuScenes/barrier_orient_err: 0.6485, pts_bbox_NuScenes/barrier_vel_err: nan, pts_bbox_NuScenes/barrier_attr_err: nan, pts_bbox_NuScenes/motorcycle_AP_dist_0.5: 0.2601, pts_bbox_NuScenes/motorcycle_AP_dist_1.0: 0.3474, pts_bbox_NuScenes/motorcycle_AP_dist_2.0: 0.3854, pts_bbox_NuScenes/motorcycle_AP_dist_4.0: 0.4210, pts_bbox_NuScenes/motorcycle_trans_err: 0.3275, pts_bbox_NuScenes/motorcycle_scale_err: 0.2677, pts_bbox_NuScenes/motorcycle_orient_err: 1.0274, pts_bbox_NuScenes/motorcycle_vel_err: 1.7165, pts_bbox_NuScenes/motorcycle_attr_err: 0.4857, pts_bbox_NuScenes/bicycle_AP_dist_0.5: 0.1972, pts_bbox_NuScenes/bicycle_AP_dist_1.0: 0.2294, pts_bbox_NuScenes/bicycle_AP_dist_2.0: 0.2479, pts_bbox_NuScenes/bicycle_AP_dist_4.0: 0.2682, pts_bbox_NuScenes/bicycle_trans_err: 0.2571, pts_bbox_NuScenes/bicycle_scale_err: 0.2788, pts_bbox_NuScenes/bicycle_orient_err: 1.2673, pts_bbox_NuScenes/bicycle_vel_err: 0.7343, pts_bbox_NuScenes/bicycle_attr_err: 0.1598, pts_bbox_NuScenes/pedestrian_AP_dist_0.5: 0.5005, pts_bbox_NuScenes/pedestrian_AP_dist_1.0: 0.6866, pts_bbox_NuScenes/pedestrian_AP_dist_2.0: 0.7337, pts_bbox_NuScenes/pedestrian_AP_dist_4.0: 0.7639, pts_bbox_NuScenes/pedestrian_trans_err: 0.3691, pts_bbox_NuScenes/pedestrian_scale_err: 0.2849, pts_bbox_NuScenes/pedestrian_orient_err: 1.4964, pts_bbox_NuScenes/pedestrian_vel_err: 0.9683, pts_bbox_NuScenes/pedestrian_attr_err: 0.8024, pts_bbox_NuScenes/traffic_cone_AP_dist_0.5: 0.4232, pts_bbox_NuScenes/traffic_cone_AP_dist_1.0: 0.4773, pts_bbox_NuScenes/traffic_cone_AP_dist_2.0: 0.5338, pts_bbox_NuScenes/traffic_cone_AP_dist_4.0: 0.5956, pts_bbox_NuScenes/traffic_cone_trans_err: 0.2608, pts_bbox_NuScenes/traffic_cone_scale_err: 0.3834, pts_bbox_NuScenes/traffic_cone_orient_err: nan, pts_bbox_NuScenes/traffic_cone_vel_err: nan, pts_bbox_NuScenes/traffic_cone_attr_err: nan, pts_bbox_NuScenes/NDS: 0.3893, pts_bbox_NuScenes/mAP: 0.4131
