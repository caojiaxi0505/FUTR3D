2025-04-05 20:22:21,171 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.20 | packaged by conda-forge | (default, Sep 30 2024, 17:52:49) [GCC 13.3.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 4090 D
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.6, V11.6.55
GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0
PyTorch: 1.13.0
PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2022.1-Product Build 20220311 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.6
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.14.0
OpenCV: 4.11.0
MMCV: 1.7.0
MMCV Compiler: GCC 9.4
MMCV CUDA Compiler: 11.6
MMDetection: 2.27.0
MMSegmentation: 0.30.0
MMDetection3D: 1.0.0rc6+9130d71
spconv2.0: False
------------------------------------------------------------

2025-04-05 20:22:21,953 - mmdet - INFO - Distributed training: False
2025-04-05 20:22:22,703 - mmdet - INFO - Config:
point_cloud_range = [-54, -54, -5.0, 54, 54, 3.0]
class_names = [
    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',
    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
]
dataset_type = 'NuScenesDataset'
data_root = 'data/nuscenes/'
input_modality = dict(
    use_lidar=True,
    use_camera=False,
    use_radar=False,
    use_map=False,
    use_external=False)
file_client_args = dict(backend='disk')
train_pipeline = [
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        file_client_args=dict(backend='disk')),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=9,
        use_dim=[0, 1, 2, 3, 4],
        file_client_args=dict(backend='disk'),
        pad_empty_sweeps=True,
        remove_close=True),
    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),
    dict(
        type='ObjectSample',
        db_sampler=dict(
            data_root='data/nuscenes/',
            info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',
            rate=1.0,
            prepare=dict(
                filter_by_difficulty=[-1],
                filter_by_min_points=dict(
                    car=5,
                    truck=5,
                    bus=5,
                    trailer=5,
                    construction_vehicle=5,
                    traffic_cone=5,
                    barrier=5,
                    motorcycle=5,
                    bicycle=5,
                    pedestrian=5)),
            classes=[
                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                'traffic_cone'
            ],
            sample_groups=dict(
                car=2,
                truck=3,
                construction_vehicle=7,
                bus=4,
                trailer=6,
                barrier=2,
                motorcycle=6,
                bicycle=6,
                pedestrian=2,
                traffic_cone=2),
            points_loader=dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=[0, 1, 2, 3, 4],
                file_client_args=dict(backend='disk')))),
    dict(
        type='GlobalRotScaleTrans',
        rot_range=[-0.785, 0.785],
        scale_ratio_range=[0.9, 1.1],
        translation_std=[0.5, 0.5, 0.5]),
    dict(
        type='RandomFlip3D',
        sync_2d=False,
        flip_ratio_bev_horizontal=0.5,
        flip_ratio_bev_vertical=0.5),
    dict(
        type='PointsRangeFilter',
        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
    dict(
        type='ObjectRangeFilter',
        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
    dict(
        type='ObjectNameFilter',
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ]),
    dict(type='PointShuffle'),
    dict(
        type='DefaultFormatBundle3D',
        class_names=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ]),
    dict(type='Collect3D', keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])
]
test_pipeline = [
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        file_client_args=dict(backend='disk')),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=9,
        use_dim=[0, 1, 2, 3, 4],
        file_client_args=dict(backend='disk'),
        pad_empty_sweeps=True,
        remove_close=True),
    dict(
        type='MultiScaleFlipAug3D',
        img_scale=(1333, 800),
        pts_scale_ratio=1,
        flip=False,
        transforms=[
            dict(
                type='GlobalRotScaleTrans',
                rot_range=[0, 0],
                scale_ratio_range=[1.0, 1.0],
                translation_std=[0, 0, 0]),
            dict(type='RandomFlip3D'),
            dict(
                type='PointsRangeFilter',
                point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
            dict(
                type='DefaultFormatBundle3D',
                class_names=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ],
                with_label=False),
            dict(type='Collect3D', keys=['points'])
        ])
]
eval_pipeline = [
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        file_client_args=dict(backend='disk')),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=9,
        use_dim=[0, 1, 2, 3, 4],
        file_client_args=dict(backend='disk'),
        pad_empty_sweeps=True,
        remove_close=True),
    dict(
        type='DefaultFormatBundle3D',
        class_names=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        with_label=False),
    dict(type='Collect3D', keys=['points'])
]
data = dict(
    samples_per_gpu=2,
    workers_per_gpu=4,
    train=dict(
        type='CBGSDataset',
        data_root='data/nuscenes/',
        ann_file='data/nuscenes/nuscenes_infos_train.pkl',
        pipeline=[
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                file_client_args=dict(backend='disk')),
            dict(
                type='LoadPointsFromMultiSweeps',
                sweeps_num=10,
                file_client_args=dict(backend='disk')),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True),
            dict(
                type='GlobalRotScaleTrans',
                rot_range=[-0.3925, 0.3925],
                scale_ratio_range=[0.95, 1.05],
                translation_std=[0, 0, 0]),
            dict(type='RandomFlip3D', flip_ratio_bev_horizontal=0.5),
            dict(
                type='PointsRangeFilter',
                point_cloud_range=[-50, -50, -5, 50, 50, 3]),
            dict(
                type='ObjectRangeFilter',
                point_cloud_range=[-50, -50, -5, 50, 50, 3]),
            dict(
                type='ObjectNameFilter',
                classes=[
                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',
                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',
                    'barrier'
                ]),
            dict(type='PointShuffle'),
            dict(
                type='DefaultFormatBundle3D',
                class_names=[
                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',
                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',
                    'barrier'
                ]),
            dict(
                type='Collect3D',
                keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])
        ],
        classes=[
            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',
            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=False,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=False,
        box_type_3d='LiDAR',
        dataset=dict(
            type='NuScenesDataset',
            data_root='data/nuscenes/',
            ann_file='data/nuscenes/nuscenes_infos_train.pkl',
            pipeline=[
                dict(
                    type='LoadPointsFromFile',
                    coord_type='LIDAR',
                    load_dim=5,
                    use_dim=5,
                    file_client_args=dict(backend='disk')),
                dict(
                    type='LoadPointsFromMultiSweeps',
                    sweeps_num=9,
                    use_dim=[0, 1, 2, 3, 4],
                    file_client_args=dict(backend='disk'),
                    pad_empty_sweeps=True,
                    remove_close=True),
                dict(
                    type='LoadAnnotations3D',
                    with_bbox_3d=True,
                    with_label_3d=True),
                dict(
                    type='ObjectSample',
                    db_sampler=dict(
                        data_root='data/nuscenes/',
                        info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',
                        rate=1.0,
                        prepare=dict(
                            filter_by_difficulty=[-1],
                            filter_by_min_points=dict(
                                car=5,
                                truck=5,
                                bus=5,
                                trailer=5,
                                construction_vehicle=5,
                                traffic_cone=5,
                                barrier=5,
                                motorcycle=5,
                                bicycle=5,
                                pedestrian=5)),
                        classes=[
                            'car', 'truck', 'construction_vehicle', 'bus',
                            'trailer', 'barrier', 'motorcycle', 'bicycle',
                            'pedestrian', 'traffic_cone'
                        ],
                        sample_groups=dict(
                            car=2,
                            truck=3,
                            construction_vehicle=7,
                            bus=4,
                            trailer=6,
                            barrier=2,
                            motorcycle=6,
                            bicycle=6,
                            pedestrian=2,
                            traffic_cone=2),
                        points_loader=dict(
                            type='LoadPointsFromFile',
                            coord_type='LIDAR',
                            load_dim=5,
                            use_dim=[0, 1, 2, 3, 4],
                            file_client_args=dict(backend='disk')))),
                dict(
                    type='GlobalRotScaleTrans',
                    rot_range=[-0.785, 0.785],
                    scale_ratio_range=[0.9, 1.1],
                    translation_std=[0.5, 0.5, 0.5]),
                dict(
                    type='RandomFlip3D',
                    sync_2d=False,
                    flip_ratio_bev_horizontal=0.5,
                    flip_ratio_bev_vertical=0.5),
                dict(
                    type='PointsRangeFilter',
                    point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
                dict(
                    type='ObjectRangeFilter',
                    point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
                dict(
                    type='ObjectNameFilter',
                    classes=[
                        'car', 'truck', 'construction_vehicle', 'bus',
                        'trailer', 'barrier', 'motorcycle', 'bicycle',
                        'pedestrian', 'traffic_cone'
                    ]),
                dict(type='PointShuffle'),
                dict(
                    type='DefaultFormatBundle3D',
                    class_names=[
                        'car', 'truck', 'construction_vehicle', 'bus',
                        'trailer', 'barrier', 'motorcycle', 'bicycle',
                        'pedestrian', 'traffic_cone'
                    ]),
                dict(
                    type='Collect3D',
                    keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])
            ],
            classes=[
                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                'traffic_cone'
            ],
            test_mode=False,
            use_valid_flag=True,
            box_type_3d='LiDAR')),
    val=dict(
        type='NuScenesDataset',
        data_root='data/nuscenes/',
        ann_file='data/nuscenes/nuscenes_infos_val.pkl',
        pipeline=[
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                file_client_args=dict(backend='disk')),
            dict(
                type='LoadPointsFromMultiSweeps',
                sweeps_num=9,
                use_dim=[0, 1, 2, 3, 4],
                file_client_args=dict(backend='disk'),
                pad_empty_sweeps=True,
                remove_close=True),
            dict(
                type='MultiScaleFlipAug3D',
                img_scale=(1333, 800),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type='GlobalRotScaleTrans',
                        rot_range=[0, 0],
                        scale_ratio_range=[1.0, 1.0],
                        translation_std=[0, 0, 0]),
                    dict(type='RandomFlip3D'),
                    dict(
                        type='PointsRangeFilter',
                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
                    dict(
                        type='DefaultFormatBundle3D',
                        class_names=[
                            'car', 'truck', 'construction_vehicle', 'bus',
                            'trailer', 'barrier', 'motorcycle', 'bicycle',
                            'pedestrian', 'traffic_cone'
                        ],
                        with_label=False),
                    dict(type='Collect3D', keys=['points'])
                ])
        ],
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=False,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=True,
        box_type_3d='LiDAR'),
    test=dict(
        type='NuScenesDataset',
        data_root='data/nuscenes/',
        ann_file='data/nuscenes/nuscenes_infos_test.pkl',
        pipeline=[
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                file_client_args=dict(backend='disk')),
            dict(
                type='LoadPointsFromMultiSweeps',
                sweeps_num=9,
                use_dim=[0, 1, 2, 3, 4],
                file_client_args=dict(backend='disk'),
                pad_empty_sweeps=True,
                remove_close=True),
            dict(
                type='MultiScaleFlipAug3D',
                img_scale=(1333, 800),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type='GlobalRotScaleTrans',
                        rot_range=[0, 0],
                        scale_ratio_range=[1.0, 1.0],
                        translation_std=[0, 0, 0]),
                    dict(type='RandomFlip3D'),
                    dict(
                        type='PointsRangeFilter',
                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
                    dict(
                        type='DefaultFormatBundle3D',
                        class_names=[
                            'car', 'truck', 'construction_vehicle', 'bus',
                            'trailer', 'barrier', 'motorcycle', 'bicycle',
                            'pedestrian', 'traffic_cone'
                        ],
                        with_label=False),
                    dict(type='Collect3D', keys=['points'])
                ])
        ],
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=False,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=True,
        box_type_3d='LiDAR'))
evaluation = dict(
    interval=1,
    pipeline=[
        dict(
            type='LoadPointsFromFile',
            coord_type='LIDAR',
            load_dim=5,
            use_dim=5,
            file_client_args=dict(backend='disk')),
        dict(
            type='LoadPointsFromMultiSweeps',
            sweeps_num=10,
            file_client_args=dict(backend='disk')),
        dict(
            type='DefaultFormatBundle3D',
            class_names=[
                'car', 'truck', 'trailer', 'bus', 'construction_vehicle',
                'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',
                'barrier'
            ],
            with_label=False),
        dict(type='Collect3D', keys=['points'])
    ])
optimizer = dict(type='AdamW', lr=6.25e-06, weight_decay=0.01)
optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))
lr_config = dict(
    policy='cyclic',
    target_ratio=(10, 0.0001),
    cyclic_times=1,
    step_ratio_up=0.4)
momentum_config = dict(
    policy='cyclic',
    target_ratio=(0.8947368421052632, 1),
    cyclic_times=1,
    step_ratio_up=0.4)
runner = dict(type='EpochBasedRunner', max_epochs=20)
checkpoint_config = dict(interval=1)
log_config = dict(
    interval=50,
    hooks=[dict(type='TextLoggerHook'),
           dict(type='TensorboardLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
work_dir = './work_dirs/lidar_0075v_900q'
load_from = None
resume_from = 'work_dirs/lidar_0075v_900q/epoch_3.pth'
workflow = [('train', 1)]
opencv_num_threads = 0
mp_start_method = 'fork'
plugin = 'plugin/futr3d'
voxel_size = [0.075, 0.075, 0.2]
center_head = dict(
    type='CenterHead',
    in_channels=512,
    tasks=[
        dict(num_class=1, class_names=['car']),
        dict(num_class=2, class_names=['truck', 'construction_vehicle']),
        dict(num_class=2, class_names=['bus', 'trailer']),
        dict(num_class=1, class_names=['barrier']),
        dict(num_class=2, class_names=['motorcycle', 'bicycle']),
        dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])
    ],
    common_heads=dict(
        reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),
    share_conv_channel=64,
    bbox_coder=dict(
        type='CenterPointBBoxCoder',
        pc_range=[-54, -54],
        post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],
        max_num=500,
        score_threshold=0.1,
        out_size_factor=8,
        voxel_size=[0.075, 0.075],
        code_size=9),
    separate_head=dict(type='SeparateHead', init_bias=-2.19, final_kernel=3),
    loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),
    loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),
    norm_bbox=True)
model = dict(
    type='FUTR3D',
    aux_weight=0.5,
    pts_voxel_layer=dict(
        max_num_points=10,
        voxel_size=[0.075, 0.075, 0.2],
        max_voxels=(120000, 160000),
        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
    pts_voxel_encoder=dict(type='HardSimpleVFE', num_features=5),
    pts_middle_encoder=dict(
        type='SparseEncoder',
        in_channels=5,
        sparse_shape=[41, 1440, 1440],
        output_channels=128,
        order=('conv', 'norm', 'act'),
        encoder_channels=((16, 16, 32), (32, 32, 64), (64, 64, 128), (128,
                                                                      128)),
        encoder_paddings=((0, 0, 1), (0, 0, 1), (0, 0, [0, 1, 1]), (0, 0)),
        block_type='basicblock'),
    pts_backbone=dict(
        type='SECOND',
        in_channels=256,
        out_channels=[128, 256],
        layer_nums=[5, 5],
        layer_strides=[1, 2],
        norm_cfg=dict(type='BN', eps=0.001, momentum=0.01),
        conv_cfg=dict(type='Conv2d', bias=False)),
    pts_neck=dict(
        type='FPN',
        norm_cfg=dict(type='BN2d', eps=0.001, momentum=0.01),
        act_cfg=dict(type='ReLU', inplace=False),
        in_channels=[128, 256],
        out_channels=256,
        start_level=0,
        add_extra_convs=True,
        num_outs=4,
        relu_before_extra_convs=True),
    pts_bbox_head=dict(
        type='FUTR3DHead',
        use_dab=True,
        anchor_size=3,
        use_aux=True,
        aux_head=dict(
            type='CenterHead',
            in_channels=512,
            tasks=[
                dict(num_class=1, class_names=['car']),
                dict(
                    num_class=2, class_names=['truck',
                                              'construction_vehicle']),
                dict(num_class=2, class_names=['bus', 'trailer']),
                dict(num_class=1, class_names=['barrier']),
                dict(num_class=2, class_names=['motorcycle', 'bicycle']),
                dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])
            ],
            common_heads=dict(
                reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),
            share_conv_channel=64,
            bbox_coder=dict(
                type='CenterPointBBoxCoder',
                pc_range=[-54, -54],
                post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],
                max_num=500,
                score_threshold=0.1,
                out_size_factor=8,
                voxel_size=[0.075, 0.075],
                code_size=9),
            separate_head=dict(
                type='SeparateHead', init_bias=-2.19, final_kernel=3),
            loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),
            loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),
            norm_bbox=True),
        mix_selection=False,
        num_query=900,
        num_classes=10,
        in_channels=256,
        pc_range=[-54, -54, -5.0, 54, 54, 3.0],
        sync_cls_avg_factor=True,
        with_box_refine=True,
        as_two_stage=False,
        code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],
        transformer=dict(
            type='FUTR3DTransformer',
            use_dab=True,
            decoder=dict(
                type='FUTR3DTransformerDecoder',
                num_layers=6,
                use_dab=True,
                anchor_size=3,
                return_intermediate=True,
                transformerlayers=dict(
                    type='DetrTransformerDecoderLayer',
                    attn_cfgs=[
                        dict(
                            type='MultiheadAttention',
                            embed_dims=256,
                            num_heads=8,
                            dropout=0.1),
                        dict(type='FUTR3DAttention', embed_dims=256)
                    ],
                    feedforward_channels=1024,
                    ffn_dropout=0.1,
                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',
                                     'ffn', 'norm')))),
        positional_encoding=dict(
            type='SinePositionalEncoding',
            num_feats=128,
            normalize=True,
            offset=-0.5),
        loss_cls=dict(
            type='FocalLoss',
            use_sigmoid=True,
            gamma=2.0,
            alpha=0.25,
            loss_weight=2.0),
        loss_bbox=dict(type='L1Loss', loss_weight=0.25),
        loss_iou=dict(type='GIoULoss', loss_weight=0)),
    train_cfg=dict(
        pts=dict(
            point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0],
            pc_range=[-54, -54, -5.0, 54, 54, 3.0],
            grid_size=[1440, 1440, 40],
            voxel_size=[0.075, 0.075, 0.2],
            out_size_factor=8,
            dense_reg=1,
            gaussian_overlap=0.1,
            max_objs=500,
            min_radius=2,
            code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],
            assigner=dict(
                type='HungarianAssigner3D',
                cls_cost=dict(type='FocalLossCost', weight=2.0),
                reg_cost=dict(type='BBox3DL1Cost', weight=0.25),
                iou_cost=dict(type='IoUCost', weight=0)))),
    test_cfg=dict(
        pts=dict(
            pc_range=[-54, -54],
            post_center_limit_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],
            max_per_img=500,
            max_pool_nms=False,
            min_radius=[4, 12, 10, 1, 0.85, 0.175],
            out_size_factor=8,
            voxel_size=[0.075, 0.075],
            nms_type='circle',
            pre_max_size=1000,
            post_max_size=83,
            nms_thr=0.2,
            max_num=300,
            score_threshold=0,
            post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0])))
db_sampler = dict(
    data_root='data/nuscenes/',
    info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',
    rate=1.0,
    prepare=dict(
        filter_by_difficulty=[-1],
        filter_by_min_points=dict(
            car=5,
            truck=5,
            bus=5,
            trailer=5,
            construction_vehicle=5,
            traffic_cone=5,
            barrier=5,
            motorcycle=5,
            bicycle=5,
            pedestrian=5)),
    classes=[
        'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',
        'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
    ],
    sample_groups=dict(
        car=2,
        truck=3,
        construction_vehicle=7,
        bus=4,
        trailer=6,
        barrier=2,
        motorcycle=6,
        bicycle=6,
        pedestrian=2,
        traffic_cone=2),
    points_loader=dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=[0, 1, 2, 3, 4],
        file_client_args=dict(backend='disk')))
find_unused_parameters = True
custom_hooks = [dict(type='FadeOjectSampleHook', num_last_epochs=5)]
gpu_ids = [0]

2025-04-05 20:22:22,704 - mmdet - INFO - Set random seed to 0, deterministic: False
2025-04-05 20:22:22,859 - mmdet - INFO - initialize SECOND with init_cfg {'type': 'Kaiming', 'layer': 'Conv2d'}
2025-04-05 20:22:22,872 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
Name of parameter - Initialization information

pts_middle_encoder.conv_input.0.weight - torch.Size([3, 3, 3, 5, 16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv_input.1.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv_input.1.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.0.conv1.weight - torch.Size([3, 3, 3, 16, 16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.0.bn1.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.0.bn1.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.0.conv2.weight - torch.Size([3, 3, 3, 16, 16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.0.bn2.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.0.bn2.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.1.conv1.weight - torch.Size([3, 3, 3, 16, 16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.1.bn1.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.1.bn1.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.1.conv2.weight - torch.Size([3, 3, 3, 16, 16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.1.bn2.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.1.bn2.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.2.0.weight - torch.Size([3, 3, 3, 16, 32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.2.1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.2.1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.0.conv1.weight - torch.Size([3, 3, 3, 32, 32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.0.bn1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.0.bn1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.0.conv2.weight - torch.Size([3, 3, 3, 32, 32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.0.bn2.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.0.bn2.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.1.conv1.weight - torch.Size([3, 3, 3, 32, 32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.1.bn1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.1.bn1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.1.conv2.weight - torch.Size([3, 3, 3, 32, 32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.1.bn2.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.1.bn2.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.2.0.weight - torch.Size([3, 3, 3, 32, 64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.2.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.2.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.0.conv1.weight - torch.Size([3, 3, 3, 64, 64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.0.conv2.weight - torch.Size([3, 3, 3, 64, 64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.0.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.1.conv1.weight - torch.Size([3, 3, 3, 64, 64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.1.conv2.weight - torch.Size([3, 3, 3, 64, 64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.2.0.weight - torch.Size([3, 3, 3, 64, 128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.2.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.2.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.0.conv1.weight - torch.Size([3, 3, 3, 128, 128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.0.conv2.weight - torch.Size([3, 3, 3, 128, 128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.1.conv1.weight - torch.Size([3, 3, 3, 128, 128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.1.conv2.weight - torch.Size([3, 3, 3, 128, 128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv_out.0.weight - torch.Size([3, 1, 1, 128, 128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv_out.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv_out.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.0.0.weight - torch.Size([128, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

pts_backbone.blocks.0.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.0.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.0.3.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

pts_backbone.blocks.0.4.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.0.4.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.0.6.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

pts_backbone.blocks.0.7.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.0.7.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.0.9.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

pts_backbone.blocks.0.10.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.0.10.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.0.12.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

pts_backbone.blocks.0.13.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.0.13.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.0.15.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

pts_backbone.blocks.0.16.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.0.16.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.1.0.weight - torch.Size([256, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

pts_backbone.blocks.1.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.1.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.1.3.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

pts_backbone.blocks.1.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.1.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.1.6.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

pts_backbone.blocks.1.7.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.1.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.1.9.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

pts_backbone.blocks.1.10.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.1.10.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.1.12.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

pts_backbone.blocks.1.13.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.1.13.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.1.15.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

pts_backbone.blocks.1.16.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.1.16.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.lateral_convs.0.conv.weight - torch.Size([256, 128, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.lateral_convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.lateral_convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.lateral_convs.1.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.lateral_convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.lateral_convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.fpn_convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.fpn_convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.fpn_convs.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.fpn_convs.3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.level_embeds - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.query_scale.layers.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.query_scale.layers.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.query_scale.layers.1.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.query_scale.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.ref_point_head.layers.0.weight - torch.Size([256, 384]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.ref_point_head.layers.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.ref_point_head.layers.1.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.ref_point_head.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.0.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.0.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.cls_branches.1.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.1.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.cls_branches.2.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.2.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.cls_branches.3.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.3.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.cls_branches.4.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.cls_branches.5.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.5.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.0.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.0.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.0.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.0.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.0.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.0.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.1.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.1.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.1.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.1.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.1.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.1.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.2.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.2.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.2.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.2.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.2.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.2.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.3.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.3.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.3.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.3.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.3.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.3.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.4.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.4.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.4.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.4.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.4.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.4.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.5.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.5.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.5.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.5.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.5.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.5.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.tgt_embed.weight - torch.Size([900, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.refpoint_embed.weight - torch.Size([900, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.shared_conv.conv.weight - torch.Size([64, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.shared_conv.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.shared_conv.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.heatmap.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.heatmap.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.heatmap.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.heatmap.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.heatmap.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.heatmap.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.heatmap.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.heatmap.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.heatmap.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.heatmap.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.heatmap.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.heatmap.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  
2025-04-05 20:22:22,904 - mmdet - INFO - Model:
FUTR3D(
  (pts_voxel_layer): Voxelization(voxel_size=[0.075, 0.075, 0.2], point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0], max_num_points=10, max_voxels=(120000, 160000), deterministic=True)
  (pts_voxel_encoder): HardSimpleVFE()
  (pts_middle_encoder): SparseEncoder(
    (conv_input): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
    (encoder_layers): SparseSequential(
      (encoder_layer1): SparseSequential(
        (0): SparseBasicBlock(
          (conv1): SubMConv3d()
          (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (conv2): SubMConv3d()
          (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (1): SparseBasicBlock(
          (conv1): SubMConv3d()
          (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (conv2): SubMConv3d()
          (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): SparseSequential(
          (0): SparseConv3d()
          (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
      (encoder_layer2): SparseSequential(
        (0): SparseBasicBlock(
          (conv1): SubMConv3d()
          (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (conv2): SubMConv3d()
          (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (1): SparseBasicBlock(
          (conv1): SubMConv3d()
          (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (conv2): SubMConv3d()
          (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): SparseSequential(
          (0): SparseConv3d()
          (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
      (encoder_layer3): SparseSequential(
        (0): SparseBasicBlock(
          (conv1): SubMConv3d()
          (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (conv2): SubMConv3d()
          (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (1): SparseBasicBlock(
          (conv1): SubMConv3d()
          (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (conv2): SubMConv3d()
          (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): SparseSequential(
          (0): SparseConv3d()
          (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
      (encoder_layer4): SparseSequential(
        (0): SparseBasicBlock(
          (conv1): SubMConv3d()
          (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (conv2): SubMConv3d()
          (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (1): SparseBasicBlock(
          (conv1): SubMConv3d()
          (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (conv2): SubMConv3d()
          (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
      )
    )
    (conv_out): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
  )
  (pts_backbone): SECOND(
    (blocks): ModuleList(
      (0): Sequential(
        (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (7): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (8): ReLU(inplace=True)
        (9): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (10): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (11): ReLU(inplace=True)
        (12): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (13): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (14): ReLU(inplace=True)
        (15): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (16): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (17): ReLU(inplace=True)
      )
      (1): Sequential(
        (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (7): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (8): ReLU(inplace=True)
        (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (10): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (11): ReLU(inplace=True)
        (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (13): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (14): ReLU(inplace=True)
        (15): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (16): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (17): ReLU(inplace=True)
      )
    )
  )
  init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
  (pts_neck): FPN(
    (lateral_convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
      (1): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
    )
    (fpn_convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
      (1): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
      (2): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
      (3): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
    )
  )
  init_cfg={'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
  (pts_bbox_head): FUTR3DHead(
    (loss_cls): FocalLoss()
    (loss_bbox): L1Loss()
    (loss_iou): GIoULoss()
    (activate): ReLU(inplace=True)
    (positional_encoding): SinePositionalEncoding(num_feats=128, temperature=10000, normalize=True, scale=6.283185307179586, eps=1e-06)
    (transformer): FUTR3DTransformer(
      (decoder): FUTR3DTransformerDecoder(
        (layers): ModuleList(
          (0): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (1): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (2): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (3): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (4): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (5): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
        (query_scale): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=256, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
          )
        )
        (ref_point_head): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=384, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
          )
        )
      )
    )
    (cls_branches): ModuleList(
      (0): Linear(in_features=256, out_features=10, bias=True)
      (1): Linear(in_features=256, out_features=10, bias=True)
      (2): Linear(in_features=256, out_features=10, bias=True)
      (3): Linear(in_features=256, out_features=10, bias=True)
      (4): Linear(in_features=256, out_features=10, bias=True)
      (5): Linear(in_features=256, out_features=10, bias=True)
    )
    (reg_branches): ModuleList(
      (0): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (1): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (2): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (3): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (4): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (5): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
    )
    (tgt_embed): Embedding(900, 256)
    (refpoint_embed): Embedding(900, 3)
    (aux_head): CenterHead(
      (loss_cls): GaussianFocalLoss()
      (loss_bbox): L1Loss()
      (shared_conv): ConvModule(
        (conv): Conv2d(512, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (task_heads): ModuleList(
        (0): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
        (1): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
        (2): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
        (3): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
        (4): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
        (5): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
      )
    )
  )
)
2025-04-05 20:22:35,025 - mmdet - INFO - load checkpoint from local path: work_dirs/lidar_0075v_900q/epoch_3.pth
2025-04-05 20:22:40,810 - mmdet - INFO - resumed epoch 3, iter 185370
2025-04-05 20:22:40,812 - mmdet - INFO - Start running, host: ubuntu@ubuntu, work_dir: /home/ubuntu/jxcao/hdd/jxc/FUTR3D/work_dirs/lidar_0075v_900q
2025-04-05 20:22:40,813 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CyclicLrUpdaterHook                
(HIGH        ) CyclicMomentumUpdaterHook          
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CyclicLrUpdaterHook                
(HIGH        ) CyclicMomentumUpdaterHook          
(NORMAL      ) FadeOjectSampleHook                
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CyclicLrUpdaterHook                
(HIGH        ) CyclicMomentumUpdaterHook          
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
2025-04-05 20:22:40,813 - mmdet - INFO - workflow: [('train', 1)], max: 20 epochs
2025-04-05 20:22:40,813 - mmdet - INFO - Checkpoints will be saved to /home/ubuntu/jxcao/hdd/jxc/FUTR3D/work_dirs/lidar_0075v_900q by HardDiskBackend.
2025-04-05 20:23:09,847 - mmdet - INFO - Epoch [4][50/61790]	lr: 2.362e-05, eta: 7 days, 0:58:45, time: 0.579, data_time: 0.072, memory: 6505, loss_cls: 0.3772, loss_bbox: 0.6554, d0.loss_cls: 0.4336, d0.loss_bbox: 0.7823, d1.loss_cls: 0.4084, d1.loss_bbox: 0.6961, d2.loss_cls: 0.3923, d2.loss_bbox: 0.6773, d3.loss_cls: 0.3832, d3.loss_bbox: 0.6663, d4.loss_cls: 0.3769, d4.loss_bbox: 0.6614, aux_task0.loss_heatmap: 0.5283, aux_task0.loss_bbox: 0.2022, aux_task1.loss_heatmap: 0.6970, aux_task1.loss_bbox: 0.2745, aux_task2.loss_heatmap: 0.7675, aux_task2.loss_bbox: 0.2878, aux_task3.loss_heatmap: 0.4982, aux_task3.loss_bbox: 0.2517, aux_task4.loss_heatmap: 0.4052, aux_task4.loss_bbox: 0.2248, aux_task5.loss_heatmap: 0.3937, aux_task5.loss_bbox: 0.2747, loss: 11.3161, grad_norm: 81.3080
2025-04-05 20:23:33,220 - mmdet - INFO - Epoch [4][100/61790]	lr: 2.363e-05, eta: 6 days, 8:40:34, time: 0.467, data_time: 0.009, memory: 6505, loss_cls: 0.3701, loss_bbox: 0.6401, d0.loss_cls: 0.4216, d0.loss_bbox: 0.7762, d1.loss_cls: 0.4021, d1.loss_bbox: 0.6845, d2.loss_cls: 0.3853, d2.loss_bbox: 0.6636, d3.loss_cls: 0.3755, d3.loss_bbox: 0.6539, d4.loss_cls: 0.3692, d4.loss_bbox: 0.6479, aux_task0.loss_heatmap: 0.5163, aux_task0.loss_bbox: 0.2017, aux_task1.loss_heatmap: 0.6935, aux_task1.loss_bbox: 0.2540, aux_task2.loss_heatmap: 0.6565, aux_task2.loss_bbox: 0.2956, aux_task3.loss_heatmap: 0.5175, aux_task3.loss_bbox: 0.2750, aux_task4.loss_heatmap: 0.3744, aux_task4.loss_bbox: 0.2244, aux_task5.loss_heatmap: 0.4398, aux_task5.loss_bbox: 0.2793, loss: 11.1181, grad_norm: 81.2015
2025-04-05 20:23:56,748 - mmdet - INFO - Epoch [4][150/61790]	lr: 2.364e-05, eta: 6 days, 3:32:21, time: 0.471, data_time: 0.007, memory: 6505, loss_cls: 0.3730, loss_bbox: 0.6652, d0.loss_cls: 0.4210, d0.loss_bbox: 0.7937, d1.loss_cls: 0.4019, d1.loss_bbox: 0.7030, d2.loss_cls: 0.3875, d2.loss_bbox: 0.6845, d3.loss_cls: 0.3768, d3.loss_bbox: 0.6773, d4.loss_cls: 0.3727, d4.loss_bbox: 0.6696, aux_task0.loss_heatmap: 0.5380, aux_task0.loss_bbox: 0.2077, aux_task1.loss_heatmap: 0.6989, aux_task1.loss_bbox: 0.2706, aux_task2.loss_heatmap: 0.6561, aux_task2.loss_bbox: 0.2788, aux_task3.loss_heatmap: 0.5293, aux_task3.loss_bbox: 0.2659, aux_task4.loss_heatmap: 0.3805, aux_task4.loss_bbox: 0.2341, aux_task5.loss_heatmap: 0.4266, aux_task5.loss_bbox: 0.2774, loss: 11.2902, grad_norm: 82.7598
2025-04-05 20:24:19,611 - mmdet - INFO - Epoch [4][200/61790]	lr: 2.364e-05, eta: 5 days, 23:59:56, time: 0.457, data_time: 0.006, memory: 6505, loss_cls: 0.3670, loss_bbox: 0.6398, d0.loss_cls: 0.4286, d0.loss_bbox: 0.7640, d1.loss_cls: 0.4072, d1.loss_bbox: 0.6761, d2.loss_cls: 0.3854, d2.loss_bbox: 0.6594, d3.loss_cls: 0.3747, d3.loss_bbox: 0.6506, d4.loss_cls: 0.3677, d4.loss_bbox: 0.6460, aux_task0.loss_heatmap: 0.4928, aux_task0.loss_bbox: 0.1978, aux_task1.loss_heatmap: 0.7447, aux_task1.loss_bbox: 0.2846, aux_task2.loss_heatmap: 0.6866, aux_task2.loss_bbox: 0.2767, aux_task3.loss_heatmap: 0.5599, aux_task3.loss_bbox: 0.2638, aux_task4.loss_heatmap: 0.3906, aux_task4.loss_bbox: 0.2278, aux_task5.loss_heatmap: 0.4173, aux_task5.loss_bbox: 0.2698, loss: 11.1788, grad_norm: 79.3961
2025-04-05 20:24:42,765 - mmdet - INFO - Epoch [4][250/61790]	lr: 2.365e-05, eta: 5 days, 22:12:39, time: 0.463, data_time: 0.007, memory: 6505, loss_cls: 0.3785, loss_bbox: 0.6603, d0.loss_cls: 0.4339, d0.loss_bbox: 0.7853, d1.loss_cls: 0.4126, d1.loss_bbox: 0.6951, d2.loss_cls: 0.3960, d2.loss_bbox: 0.6806, d3.loss_cls: 0.3862, d3.loss_bbox: 0.6738, d4.loss_cls: 0.3804, d4.loss_bbox: 0.6671, aux_task0.loss_heatmap: 0.5278, aux_task0.loss_bbox: 0.2081, aux_task1.loss_heatmap: 0.6994, aux_task1.loss_bbox: 0.2709, aux_task2.loss_heatmap: 0.6811, aux_task2.loss_bbox: 0.2992, aux_task3.loss_heatmap: 0.4880, aux_task3.loss_bbox: 0.2728, aux_task4.loss_heatmap: 0.3971, aux_task4.loss_bbox: 0.2267, aux_task5.loss_heatmap: 0.4005, aux_task5.loss_bbox: 0.2790, loss: 11.3004, grad_norm: 81.8498
2025-04-05 20:25:05,712 - mmdet - INFO - Epoch [4][300/61790]	lr: 2.366e-05, eta: 5 days, 20:48:56, time: 0.459, data_time: 0.008, memory: 6505, loss_cls: 0.3787, loss_bbox: 0.6559, d0.loss_cls: 0.4334, d0.loss_bbox: 0.7765, d1.loss_cls: 0.4086, d1.loss_bbox: 0.6924, d2.loss_cls: 0.3923, d2.loss_bbox: 0.6766, d3.loss_cls: 0.3833, d3.loss_bbox: 0.6690, d4.loss_cls: 0.3792, d4.loss_bbox: 0.6620, aux_task0.loss_heatmap: 0.5539, aux_task0.loss_bbox: 0.2055, aux_task1.loss_heatmap: 0.7288, aux_task1.loss_bbox: 0.2743, aux_task2.loss_heatmap: 0.6574, aux_task2.loss_bbox: 0.2848, aux_task3.loss_heatmap: 0.5595, aux_task3.loss_bbox: 0.2757, aux_task4.loss_heatmap: 0.3669, aux_task4.loss_bbox: 0.2221, aux_task5.loss_heatmap: 0.4196, aux_task5.loss_bbox: 0.2807, loss: 11.3371, grad_norm: 81.3129
2025-04-05 20:25:28,994 - mmdet - INFO - Epoch [4][350/61790]	lr: 2.367e-05, eta: 5 days, 20:05:46, time: 0.466, data_time: 0.005, memory: 6505, loss_cls: 0.3590, loss_bbox: 0.6345, d0.loss_cls: 0.4107, d0.loss_bbox: 0.7688, d1.loss_cls: 0.3900, d1.loss_bbox: 0.6735, d2.loss_cls: 0.3721, d2.loss_bbox: 0.6579, d3.loss_cls: 0.3652, d3.loss_bbox: 0.6472, d4.loss_cls: 0.3594, d4.loss_bbox: 0.6410, aux_task0.loss_heatmap: 0.5494, aux_task0.loss_bbox: 0.2149, aux_task1.loss_heatmap: 0.6447, aux_task1.loss_bbox: 0.2649, aux_task2.loss_heatmap: 0.6858, aux_task2.loss_bbox: 0.2766, aux_task3.loss_heatmap: 0.4624, aux_task3.loss_bbox: 0.2441, aux_task4.loss_heatmap: 0.3753, aux_task4.loss_bbox: 0.2173, aux_task5.loss_heatmap: 0.3952, aux_task5.loss_bbox: 0.2688, loss: 10.8785, grad_norm: 77.8385
2025-04-05 20:25:52,240 - mmdet - INFO - Epoch [4][400/61790]	lr: 2.368e-05, eta: 5 days, 19:31:44, time: 0.465, data_time: 0.008, memory: 6505, loss_cls: 0.3585, loss_bbox: 0.6460, d0.loss_cls: 0.4098, d0.loss_bbox: 0.7676, d1.loss_cls: 0.3897, d1.loss_bbox: 0.6798, d2.loss_cls: 0.3736, d2.loss_bbox: 0.6640, d3.loss_cls: 0.3640, d3.loss_bbox: 0.6554, d4.loss_cls: 0.3569, d4.loss_bbox: 0.6533, aux_task0.loss_heatmap: 0.5078, aux_task0.loss_bbox: 0.2071, aux_task1.loss_heatmap: 0.6874, aux_task1.loss_bbox: 0.2636, aux_task2.loss_heatmap: 0.6512, aux_task2.loss_bbox: 0.3001, aux_task3.loss_heatmap: 0.4957, aux_task3.loss_bbox: 0.2525, aux_task4.loss_heatmap: 0.3636, aux_task4.loss_bbox: 0.2200, aux_task5.loss_heatmap: 0.4197, aux_task5.loss_bbox: 0.2763, loss: 10.9636, grad_norm: 78.0050
2025-04-05 20:26:15,627 - mmdet - INFO - Epoch [4][450/61790]	lr: 2.369e-05, eta: 5 days, 19:10:40, time: 0.468, data_time: 0.007, memory: 6505, loss_cls: 0.3600, loss_bbox: 0.6351, d0.loss_cls: 0.4112, d0.loss_bbox: 0.7713, d1.loss_cls: 0.3920, d1.loss_bbox: 0.6783, d2.loss_cls: 0.3759, d2.loss_bbox: 0.6579, d3.loss_cls: 0.3643, d3.loss_bbox: 0.6467, d4.loss_cls: 0.3600, d4.loss_bbox: 0.6390, aux_task0.loss_heatmap: 0.5005, aux_task0.loss_bbox: 0.1972, aux_task1.loss_heatmap: 0.6655, aux_task1.loss_bbox: 0.2586, aux_task2.loss_heatmap: 0.6496, aux_task2.loss_bbox: 0.2780, aux_task3.loss_heatmap: 0.5030, aux_task3.loss_bbox: 0.2685, aux_task4.loss_heatmap: 0.4010, aux_task4.loss_bbox: 0.2230, aux_task5.loss_heatmap: 0.3661, aux_task5.loss_bbox: 0.2711, loss: 10.8737, grad_norm: 79.1521
2025-04-05 20:26:38,508 - mmdet - INFO - Epoch [4][500/61790]	lr: 2.369e-05, eta: 5 days, 18:36:00, time: 0.458, data_time: 0.009, memory: 6505, loss_cls: 0.3844, loss_bbox: 0.6484, d0.loss_cls: 0.4385, d0.loss_bbox: 0.7765, d1.loss_cls: 0.4184, d1.loss_bbox: 0.6870, d2.loss_cls: 0.4023, d2.loss_bbox: 0.6702, d3.loss_cls: 0.3900, d3.loss_bbox: 0.6603, d4.loss_cls: 0.3847, d4.loss_bbox: 0.6543, aux_task0.loss_heatmap: 0.4875, aux_task0.loss_bbox: 0.1978, aux_task1.loss_heatmap: 0.7078, aux_task1.loss_bbox: 0.2736, aux_task2.loss_heatmap: 0.7560, aux_task2.loss_bbox: 0.2946, aux_task3.loss_heatmap: 0.5614, aux_task3.loss_bbox: 0.2801, aux_task4.loss_heatmap: 0.4106, aux_task4.loss_bbox: 0.2326, aux_task5.loss_heatmap: 0.4054, aux_task5.loss_bbox: 0.2764, loss: 11.3988, grad_norm: 81.1943
2025-04-05 20:27:01,727 - mmdet - INFO - Epoch [4][550/61790]	lr: 2.370e-05, eta: 5 days, 18:18:19, time: 0.464, data_time: 0.007, memory: 6505, loss_cls: 0.3912, loss_bbox: 0.6601, d0.loss_cls: 0.4471, d0.loss_bbox: 0.7883, d1.loss_cls: 0.4223, d1.loss_bbox: 0.6993, d2.loss_cls: 0.4060, d2.loss_bbox: 0.6807, d3.loss_cls: 0.3973, d3.loss_bbox: 0.6703, d4.loss_cls: 0.3921, d4.loss_bbox: 0.6670, aux_task0.loss_heatmap: 0.5228, aux_task0.loss_bbox: 0.2118, aux_task1.loss_heatmap: 0.6889, aux_task1.loss_bbox: 0.2719, aux_task2.loss_heatmap: 0.7157, aux_task2.loss_bbox: 0.2983, aux_task3.loss_heatmap: 0.5243, aux_task3.loss_bbox: 0.2661, aux_task4.loss_heatmap: 0.4236, aux_task4.loss_bbox: 0.2337, aux_task5.loss_heatmap: 0.4260, aux_task5.loss_bbox: 0.2737, loss: 11.4785, grad_norm: 78.1813
2025-04-05 20:27:24,844 - mmdet - INFO - Epoch [4][600/61790]	lr: 2.371e-05, eta: 5 days, 18:00:34, time: 0.462, data_time: 0.007, memory: 6505, loss_cls: 0.3620, loss_bbox: 0.6366, d0.loss_cls: 0.4114, d0.loss_bbox: 0.7665, d1.loss_cls: 0.3933, d1.loss_bbox: 0.6789, d2.loss_cls: 0.3779, d2.loss_bbox: 0.6618, d3.loss_cls: 0.3698, d3.loss_bbox: 0.6477, d4.loss_cls: 0.3636, d4.loss_bbox: 0.6433, aux_task0.loss_heatmap: 0.4834, aux_task0.loss_bbox: 0.2039, aux_task1.loss_heatmap: 0.7424, aux_task1.loss_bbox: 0.2673, aux_task2.loss_heatmap: 0.6322, aux_task2.loss_bbox: 0.2874, aux_task3.loss_heatmap: 0.5761, aux_task3.loss_bbox: 0.2541, aux_task4.loss_heatmap: 0.3800, aux_task4.loss_bbox: 0.2238, aux_task5.loss_heatmap: 0.3877, aux_task5.loss_bbox: 0.2723, loss: 11.0235, grad_norm: 79.2647
2025-04-05 20:27:48,144 - mmdet - INFO - Epoch [4][650/61790]	lr: 2.372e-05, eta: 5 days, 17:50:24, time: 0.466, data_time: 0.006, memory: 6505, loss_cls: 0.3936, loss_bbox: 0.6735, d0.loss_cls: 0.4434, d0.loss_bbox: 0.8025, d1.loss_cls: 0.4227, d1.loss_bbox: 0.7106, d2.loss_cls: 0.4087, d2.loss_bbox: 0.6927, d3.loss_cls: 0.3987, d3.loss_bbox: 0.6835, d4.loss_cls: 0.3933, d4.loss_bbox: 0.6796, aux_task0.loss_heatmap: 0.5569, aux_task0.loss_bbox: 0.2048, aux_task1.loss_heatmap: 0.7868, aux_task1.loss_bbox: 0.2874, aux_task2.loss_heatmap: 0.7384, aux_task2.loss_bbox: 0.3166, aux_task3.loss_heatmap: 0.5677, aux_task3.loss_bbox: 0.2632, aux_task4.loss_heatmap: 0.3863, aux_task4.loss_bbox: 0.2223, aux_task5.loss_heatmap: 0.4064, aux_task5.loss_bbox: 0.2745, loss: 11.7141, grad_norm: 79.6063
2025-04-05 20:28:11,412 - mmdet - INFO - Epoch [4][700/61790]	lr: 2.373e-05, eta: 5 days, 17:40:50, time: 0.465, data_time: 0.007, memory: 6505, loss_cls: 0.3863, loss_bbox: 0.6551, d0.loss_cls: 0.4422, d0.loss_bbox: 0.7824, d1.loss_cls: 0.4185, d1.loss_bbox: 0.6969, d2.loss_cls: 0.4017, d2.loss_bbox: 0.6765, d3.loss_cls: 0.3924, d3.loss_bbox: 0.6655, d4.loss_cls: 0.3871, d4.loss_bbox: 0.6609, aux_task0.loss_heatmap: 0.4767, aux_task0.loss_bbox: 0.2021, aux_task1.loss_heatmap: 0.7236, aux_task1.loss_bbox: 0.2877, aux_task2.loss_heatmap: 0.7242, aux_task2.loss_bbox: 0.2806, aux_task3.loss_heatmap: 0.5645, aux_task3.loss_bbox: 0.2905, aux_task4.loss_heatmap: 0.4199, aux_task4.loss_bbox: 0.2264, aux_task5.loss_heatmap: 0.4500, aux_task5.loss_bbox: 0.2834, loss: 11.4952, grad_norm: 81.4376
2025-04-05 20:28:35,061 - mmdet - INFO - Epoch [4][750/61790]	lr: 2.374e-05, eta: 5 days, 17:41:24, time: 0.473, data_time: 0.006, memory: 6505, loss_cls: 0.3761, loss_bbox: 0.6498, d0.loss_cls: 0.4259, d0.loss_bbox: 0.7787, d1.loss_cls: 0.4070, d1.loss_bbox: 0.6869, d2.loss_cls: 0.3927, d2.loss_bbox: 0.6716, d3.loss_cls: 0.3840, d3.loss_bbox: 0.6613, d4.loss_cls: 0.3782, d4.loss_bbox: 0.6555, aux_task0.loss_heatmap: 0.5231, aux_task0.loss_bbox: 0.1990, aux_task1.loss_heatmap: 0.7088, aux_task1.loss_bbox: 0.2816, aux_task2.loss_heatmap: 0.7407, aux_task2.loss_bbox: 0.2894, aux_task3.loss_heatmap: 0.5292, aux_task3.loss_bbox: 0.2786, aux_task4.loss_heatmap: 0.3834, aux_task4.loss_bbox: 0.2271, aux_task5.loss_heatmap: 0.4029, aux_task5.loss_bbox: 0.2709, loss: 11.3023, grad_norm: 82.6331
2025-04-05 20:28:58,580 - mmdet - INFO - Epoch [4][800/61790]	lr: 2.374e-05, eta: 5 days, 17:38:59, time: 0.470, data_time: 0.007, memory: 6505, loss_cls: 0.3669, loss_bbox: 0.6406, d0.loss_cls: 0.4214, d0.loss_bbox: 0.7719, d1.loss_cls: 0.4034, d1.loss_bbox: 0.6796, d2.loss_cls: 0.3855, d2.loss_bbox: 0.6636, d3.loss_cls: 0.3743, d3.loss_bbox: 0.6523, d4.loss_cls: 0.3692, d4.loss_bbox: 0.6467, aux_task0.loss_heatmap: 0.5126, aux_task0.loss_bbox: 0.2032, aux_task1.loss_heatmap: 0.6697, aux_task1.loss_bbox: 0.2674, aux_task2.loss_heatmap: 0.7127, aux_task2.loss_bbox: 0.2867, aux_task3.loss_heatmap: 0.5334, aux_task3.loss_bbox: 0.2603, aux_task4.loss_heatmap: 0.3609, aux_task4.loss_bbox: 0.2189, aux_task5.loss_heatmap: 0.3982, aux_task5.loss_bbox: 0.2702, loss: 11.0695, grad_norm: 79.5626
2025-04-05 20:29:21,868 - mmdet - INFO - Epoch [4][850/61790]	lr: 2.375e-05, eta: 5 days, 17:32:03, time: 0.466, data_time: 0.006, memory: 6505, loss_cls: 0.3763, loss_bbox: 0.6472, d0.loss_cls: 0.4285, d0.loss_bbox: 0.7793, d1.loss_cls: 0.4096, d1.loss_bbox: 0.6884, d2.loss_cls: 0.3917, d2.loss_bbox: 0.6696, d3.loss_cls: 0.3831, d3.loss_bbox: 0.6581, d4.loss_cls: 0.3774, d4.loss_bbox: 0.6510, aux_task0.loss_heatmap: 0.5251, aux_task0.loss_bbox: 0.2096, aux_task1.loss_heatmap: 0.6665, aux_task1.loss_bbox: 0.2773, aux_task2.loss_heatmap: 0.7613, aux_task2.loss_bbox: 0.2946, aux_task3.loss_heatmap: 0.5190, aux_task3.loss_bbox: 0.2487, aux_task4.loss_heatmap: 0.4058, aux_task4.loss_bbox: 0.2282, aux_task5.loss_heatmap: 0.4032, aux_task5.loss_bbox: 0.2779, loss: 11.2772, grad_norm: 78.4991
2025-04-05 20:29:45,316 - mmdet - INFO - Epoch [4][900/61790]	lr: 2.376e-05, eta: 5 days, 17:28:57, time: 0.469, data_time: 0.007, memory: 6505, loss_cls: 0.3703, loss_bbox: 0.6491, d0.loss_cls: 0.4254, d0.loss_bbox: 0.7737, d1.loss_cls: 0.4015, d1.loss_bbox: 0.6844, d2.loss_cls: 0.3855, d2.loss_bbox: 0.6666, d3.loss_cls: 0.3759, d3.loss_bbox: 0.6598, d4.loss_cls: 0.3719, d4.loss_bbox: 0.6525, aux_task0.loss_heatmap: 0.4821, aux_task0.loss_bbox: 0.2045, aux_task1.loss_heatmap: 0.6641, aux_task1.loss_bbox: 0.2676, aux_task2.loss_heatmap: 0.7026, aux_task2.loss_bbox: 0.2828, aux_task3.loss_heatmap: 0.5165, aux_task3.loss_bbox: 0.2532, aux_task4.loss_heatmap: 0.4279, aux_task4.loss_bbox: 0.2335, aux_task5.loss_heatmap: 0.4095, aux_task5.loss_bbox: 0.2754, loss: 11.1365, grad_norm: 77.7142
2025-04-05 20:30:08,546 - mmdet - INFO - Epoch [4][950/61790]	lr: 2.377e-05, eta: 5 days, 17:22:07, time: 0.465, data_time: 0.006, memory: 6505, loss_cls: 0.3887, loss_bbox: 0.6652, d0.loss_cls: 0.4441, d0.loss_bbox: 0.7983, d1.loss_cls: 0.4231, d1.loss_bbox: 0.7068, d2.loss_cls: 0.4064, d2.loss_bbox: 0.6865, d3.loss_cls: 0.3961, d3.loss_bbox: 0.6776, d4.loss_cls: 0.3889, d4.loss_bbox: 0.6715, aux_task0.loss_heatmap: 0.5333, aux_task0.loss_bbox: 0.2015, aux_task1.loss_heatmap: 0.7750, aux_task1.loss_bbox: 0.2793, aux_task2.loss_heatmap: 0.7331, aux_task2.loss_bbox: 0.2875, aux_task3.loss_heatmap: 0.5167, aux_task3.loss_bbox: 0.2507, aux_task4.loss_heatmap: 0.3830, aux_task4.loss_bbox: 0.2230, aux_task5.loss_heatmap: 0.4300, aux_task5.loss_bbox: 0.2764, loss: 11.5429, grad_norm: 80.3707
2025-04-05 20:30:31,952 - mmdet - INFO - Epoch [4][1000/61790]	lr: 2.378e-05, eta: 5 days, 17:19:02, time: 0.468, data_time: 0.006, memory: 6505, loss_cls: 0.3642, loss_bbox: 0.6408, d0.loss_cls: 0.4191, d0.loss_bbox: 0.7665, d1.loss_cls: 0.3984, d1.loss_bbox: 0.6802, d2.loss_cls: 0.3840, d2.loss_bbox: 0.6597, d3.loss_cls: 0.3702, d3.loss_bbox: 0.6518, d4.loss_cls: 0.3647, d4.loss_bbox: 0.6477, aux_task0.loss_heatmap: 0.4867, aux_task0.loss_bbox: 0.1889, aux_task1.loss_heatmap: 0.6774, aux_task1.loss_bbox: 0.2623, aux_task2.loss_heatmap: 0.7117, aux_task2.loss_bbox: 0.2912, aux_task3.loss_heatmap: 0.5369, aux_task3.loss_bbox: 0.2688, aux_task4.loss_heatmap: 0.3891, aux_task4.loss_bbox: 0.2318, aux_task5.loss_heatmap: 0.4051, aux_task5.loss_bbox: 0.2759, loss: 11.0732, grad_norm: 79.2376
2025-04-05 20:30:55,189 - mmdet - INFO - Epoch [4][1050/61790]	lr: 2.379e-05, eta: 5 days, 17:13:22, time: 0.465, data_time: 0.006, memory: 6505, loss_cls: 0.3642, loss_bbox: 0.6364, d0.loss_cls: 0.4160, d0.loss_bbox: 0.7692, d1.loss_cls: 0.3949, d1.loss_bbox: 0.6780, d2.loss_cls: 0.3791, d2.loss_bbox: 0.6583, d3.loss_cls: 0.3703, d3.loss_bbox: 0.6499, d4.loss_cls: 0.3634, d4.loss_bbox: 0.6441, aux_task0.loss_heatmap: 0.4815, aux_task0.loss_bbox: 0.1912, aux_task1.loss_heatmap: 0.6921, aux_task1.loss_bbox: 0.2596, aux_task2.loss_heatmap: 0.7424, aux_task2.loss_bbox: 0.2904, aux_task3.loss_heatmap: 0.5163, aux_task3.loss_bbox: 0.2593, aux_task4.loss_heatmap: 0.4103, aux_task4.loss_bbox: 0.2298, aux_task5.loss_heatmap: 0.3843, aux_task5.loss_bbox: 0.2742, loss: 11.0551, grad_norm: 80.2213
2025-04-05 20:31:18,659 - mmdet - INFO - Epoch [4][1100/61790]	lr: 2.379e-05, eta: 5 days, 17:11:54, time: 0.469, data_time: 0.006, memory: 6505, loss_cls: 0.3708, loss_bbox: 0.6573, d0.loss_cls: 0.4284, d0.loss_bbox: 0.7841, d1.loss_cls: 0.4070, d1.loss_bbox: 0.6949, d2.loss_cls: 0.3908, d2.loss_bbox: 0.6745, d3.loss_cls: 0.3777, d3.loss_bbox: 0.6681, d4.loss_cls: 0.3716, d4.loss_bbox: 0.6637, aux_task0.loss_heatmap: 0.5009, aux_task0.loss_bbox: 0.1986, aux_task1.loss_heatmap: 0.7204, aux_task1.loss_bbox: 0.2716, aux_task2.loss_heatmap: 0.7249, aux_task2.loss_bbox: 0.2797, aux_task3.loss_heatmap: 0.4586, aux_task3.loss_bbox: 0.2844, aux_task4.loss_heatmap: 0.3489, aux_task4.loss_bbox: 0.2201, aux_task5.loss_heatmap: 0.4119, aux_task5.loss_bbox: 0.2772, loss: 11.1863, grad_norm: 83.9035
2025-04-05 20:31:41,636 - mmdet - INFO - Epoch [4][1150/61790]	lr: 2.380e-05, eta: 5 days, 17:03:01, time: 0.460, data_time: 0.006, memory: 6505, loss_cls: 0.3684, loss_bbox: 0.6584, d0.loss_cls: 0.4203, d0.loss_bbox: 0.7820, d1.loss_cls: 0.4004, d1.loss_bbox: 0.6972, d2.loss_cls: 0.3826, d2.loss_bbox: 0.6807, d3.loss_cls: 0.3756, d3.loss_bbox: 0.6705, d4.loss_cls: 0.3690, d4.loss_bbox: 0.6656, aux_task0.loss_heatmap: 0.5283, aux_task0.loss_bbox: 0.2102, aux_task1.loss_heatmap: 0.6955, aux_task1.loss_bbox: 0.2702, aux_task2.loss_heatmap: 0.7710, aux_task2.loss_bbox: 0.2867, aux_task3.loss_heatmap: 0.5904, aux_task3.loss_bbox: 0.2515, aux_task4.loss_heatmap: 0.3683, aux_task4.loss_bbox: 0.2189, aux_task5.loss_heatmap: 0.4136, aux_task5.loss_bbox: 0.2726, loss: 11.3481, grad_norm: 81.9976
2025-04-05 20:32:05,211 - mmdet - INFO - Epoch [4][1200/61790]	lr: 2.381e-05, eta: 5 days, 17:03:34, time: 0.472, data_time: 0.006, memory: 6505, loss_cls: 0.3686, loss_bbox: 0.6589, d0.loss_cls: 0.4238, d0.loss_bbox: 0.7932, d1.loss_cls: 0.4035, d1.loss_bbox: 0.7018, d2.loss_cls: 0.3889, d2.loss_bbox: 0.6818, d3.loss_cls: 0.3770, d3.loss_bbox: 0.6704, d4.loss_cls: 0.3692, d4.loss_bbox: 0.6648, aux_task0.loss_heatmap: 0.5240, aux_task0.loss_bbox: 0.2044, aux_task1.loss_heatmap: 0.7543, aux_task1.loss_bbox: 0.2782, aux_task2.loss_heatmap: 0.6670, aux_task2.loss_bbox: 0.2790, aux_task3.loss_heatmap: 0.5328, aux_task3.loss_bbox: 0.2690, aux_task4.loss_heatmap: 0.3828, aux_task4.loss_bbox: 0.2217, aux_task5.loss_heatmap: 0.4150, aux_task5.loss_bbox: 0.2773, loss: 11.3075, grad_norm: 82.3565
2025-04-05 20:32:28,778 - mmdet - INFO - Epoch [4][1250/61790]	lr: 2.382e-05, eta: 5 days, 17:03:56, time: 0.471, data_time: 0.006, memory: 6505, loss_cls: 0.3647, loss_bbox: 0.6479, d0.loss_cls: 0.4173, d0.loss_bbox: 0.7613, d1.loss_cls: 0.3978, d1.loss_bbox: 0.6787, d2.loss_cls: 0.3804, d2.loss_bbox: 0.6662, d3.loss_cls: 0.3698, d3.loss_bbox: 0.6571, d4.loss_cls: 0.3642, d4.loss_bbox: 0.6528, aux_task0.loss_heatmap: 0.4723, aux_task0.loss_bbox: 0.1987, aux_task1.loss_heatmap: 0.6769, aux_task1.loss_bbox: 0.2654, aux_task2.loss_heatmap: 0.7205, aux_task2.loss_bbox: 0.2822, aux_task3.loss_heatmap: 0.5769, aux_task3.loss_bbox: 0.2714, aux_task4.loss_heatmap: 0.3933, aux_task4.loss_bbox: 0.2254, aux_task5.loss_heatmap: 0.4370, aux_task5.loss_bbox: 0.2772, loss: 11.1555, grad_norm: 80.5889
2025-04-05 20:32:51,938 - mmdet - INFO - Epoch [4][1300/61790]	lr: 2.383e-05, eta: 5 days, 16:58:45, time: 0.463, data_time: 0.006, memory: 6505, loss_cls: 0.3808, loss_bbox: 0.6468, d0.loss_cls: 0.4369, d0.loss_bbox: 0.7817, d1.loss_cls: 0.4148, d1.loss_bbox: 0.6866, d2.loss_cls: 0.3943, d2.loss_bbox: 0.6708, d3.loss_cls: 0.3836, d3.loss_bbox: 0.6610, d4.loss_cls: 0.3801, d4.loss_bbox: 0.6547, aux_task0.loss_heatmap: 0.5264, aux_task0.loss_bbox: 0.2027, aux_task1.loss_heatmap: 0.6790, aux_task1.loss_bbox: 0.2751, aux_task2.loss_heatmap: 0.7142, aux_task2.loss_bbox: 0.2905, aux_task3.loss_heatmap: 0.5723, aux_task3.loss_bbox: 0.2533, aux_task4.loss_heatmap: 0.4185, aux_task4.loss_bbox: 0.2229, aux_task5.loss_heatmap: 0.4011, aux_task5.loss_bbox: 0.2743, loss: 11.3223, grad_norm: 82.1571
2025-04-05 20:33:15,182 - mmdet - INFO - Epoch [4][1350/61790]	lr: 2.384e-05, eta: 5 days, 16:55:01, time: 0.465, data_time: 0.006, memory: 6505, loss_cls: 0.3733, loss_bbox: 0.6353, d0.loss_cls: 0.4277, d0.loss_bbox: 0.7608, d1.loss_cls: 0.4073, d1.loss_bbox: 0.6730, d2.loss_cls: 0.3883, d2.loss_bbox: 0.6581, d3.loss_cls: 0.3770, d3.loss_bbox: 0.6495, d4.loss_cls: 0.3732, d4.loss_bbox: 0.6411, aux_task0.loss_heatmap: 0.4546, aux_task0.loss_bbox: 0.1910, aux_task1.loss_heatmap: 0.7394, aux_task1.loss_bbox: 0.2895, aux_task2.loss_heatmap: 0.7193, aux_task2.loss_bbox: 0.2877, aux_task3.loss_heatmap: 0.5714, aux_task3.loss_bbox: 0.2534, aux_task4.loss_heatmap: 0.3615, aux_task4.loss_bbox: 0.2261, aux_task5.loss_heatmap: 0.4234, aux_task5.loss_bbox: 0.2796, loss: 11.1614, grad_norm: 83.4286
2025-04-05 20:33:38,249 - mmdet - INFO - Epoch [4][1400/61790]	lr: 2.384e-05, eta: 5 days, 16:49:19, time: 0.461, data_time: 0.007, memory: 6505, loss_cls: 0.3699, loss_bbox: 0.6149, d0.loss_cls: 0.4217, d0.loss_bbox: 0.7405, d1.loss_cls: 0.3981, d1.loss_bbox: 0.6554, d2.loss_cls: 0.3826, d2.loss_bbox: 0.6380, d3.loss_cls: 0.3754, d3.loss_bbox: 0.6265, d4.loss_cls: 0.3700, d4.loss_bbox: 0.6226, aux_task0.loss_heatmap: 0.4793, aux_task0.loss_bbox: 0.1872, aux_task1.loss_heatmap: 0.6762, aux_task1.loss_bbox: 0.2631, aux_task2.loss_heatmap: 0.6624, aux_task2.loss_bbox: 0.2835, aux_task3.loss_heatmap: 0.4770, aux_task3.loss_bbox: 0.2617, aux_task4.loss_heatmap: 0.3993, aux_task4.loss_bbox: 0.2203, aux_task5.loss_heatmap: 0.4123, aux_task5.loss_bbox: 0.2769, loss: 10.8149, grad_norm: 78.1846
2025-04-05 20:34:01,337 - mmdet - INFO - Epoch [4][1450/61790]	lr: 2.385e-05, eta: 5 days, 16:44:14, time: 0.462, data_time: 0.006, memory: 6505, loss_cls: 0.3640, loss_bbox: 0.6423, d0.loss_cls: 0.4191, d0.loss_bbox: 0.7647, d1.loss_cls: 0.3972, d1.loss_bbox: 0.6808, d2.loss_cls: 0.3821, d2.loss_bbox: 0.6623, d3.loss_cls: 0.3709, d3.loss_bbox: 0.6548, d4.loss_cls: 0.3641, d4.loss_bbox: 0.6508, aux_task0.loss_heatmap: 0.4726, aux_task0.loss_bbox: 0.1978, aux_task1.loss_heatmap: 0.6936, aux_task1.loss_bbox: 0.2709, aux_task2.loss_heatmap: 0.7023, aux_task2.loss_bbox: 0.2812, aux_task3.loss_heatmap: 0.5332, aux_task3.loss_bbox: 0.2719, aux_task4.loss_heatmap: 0.3785, aux_task4.loss_bbox: 0.2376, aux_task5.loss_heatmap: 0.3784, aux_task5.loss_bbox: 0.2722, loss: 11.0431, grad_norm: 79.2766
2025-04-05 20:34:24,883 - mmdet - INFO - Epoch [4][1500/61790]	lr: 2.386e-05, eta: 5 days, 16:44:48, time: 0.471, data_time: 0.006, memory: 6505, loss_cls: 0.3838, loss_bbox: 0.6557, d0.loss_cls: 0.4375, d0.loss_bbox: 0.7757, d1.loss_cls: 0.4173, d1.loss_bbox: 0.6928, d2.loss_cls: 0.4036, d2.loss_bbox: 0.6732, d3.loss_cls: 0.3887, d3.loss_bbox: 0.6663, d4.loss_cls: 0.3840, d4.loss_bbox: 0.6630, aux_task0.loss_heatmap: 0.5295, aux_task0.loss_bbox: 0.2054, aux_task1.loss_heatmap: 0.7286, aux_task1.loss_bbox: 0.2694, aux_task2.loss_heatmap: 0.6806, aux_task2.loss_bbox: 0.2752, aux_task3.loss_heatmap: 0.5690, aux_task3.loss_bbox: 0.2644, aux_task4.loss_heatmap: 0.4126, aux_task4.loss_bbox: 0.2402, aux_task5.loss_heatmap: 0.4425, aux_task5.loss_bbox: 0.2791, loss: 11.4382, grad_norm: 85.1278
2025-04-05 20:34:48,123 - mmdet - INFO - Epoch [4][1550/61790]	lr: 2.387e-05, eta: 5 days, 16:41:51, time: 0.465, data_time: 0.006, memory: 6505, loss_cls: 0.3631, loss_bbox: 0.6352, d0.loss_cls: 0.4171, d0.loss_bbox: 0.7621, d1.loss_cls: 0.3965, d1.loss_bbox: 0.6726, d2.loss_cls: 0.3789, d2.loss_bbox: 0.6558, d3.loss_cls: 0.3686, d3.loss_bbox: 0.6457, d4.loss_cls: 0.3618, d4.loss_bbox: 0.6411, aux_task0.loss_heatmap: 0.4866, aux_task0.loss_bbox: 0.1968, aux_task1.loss_heatmap: 0.7390, aux_task1.loss_bbox: 0.2690, aux_task2.loss_heatmap: 0.7037, aux_task2.loss_bbox: 0.2816, aux_task3.loss_heatmap: 0.5181, aux_task3.loss_bbox: 0.2446, aux_task4.loss_heatmap: 0.3883, aux_task4.loss_bbox: 0.2229, aux_task5.loss_heatmap: 0.3865, aux_task5.loss_bbox: 0.2765, loss: 11.0121, grad_norm: 79.2138
2025-04-05 20:35:11,555 - mmdet - INFO - Epoch [4][1600/61790]	lr: 2.388e-05, eta: 5 days, 16:41:10, time: 0.469, data_time: 0.007, memory: 6505, loss_cls: 0.3658, loss_bbox: 0.6403, d0.loss_cls: 0.4217, d0.loss_bbox: 0.7763, d1.loss_cls: 0.4020, d1.loss_bbox: 0.6831, d2.loss_cls: 0.3826, d2.loss_bbox: 0.6654, d3.loss_cls: 0.3728, d3.loss_bbox: 0.6533, d4.loss_cls: 0.3658, d4.loss_bbox: 0.6477, aux_task0.loss_heatmap: 0.5493, aux_task0.loss_bbox: 0.2058, aux_task1.loss_heatmap: 0.6415, aux_task1.loss_bbox: 0.2570, aux_task2.loss_heatmap: 0.6694, aux_task2.loss_bbox: 0.2842, aux_task3.loss_heatmap: 0.4847, aux_task3.loss_bbox: 0.2547, aux_task4.loss_heatmap: 0.3957, aux_task4.loss_bbox: 0.2289, aux_task5.loss_heatmap: 0.4208, aux_task5.loss_bbox: 0.2746, loss: 11.0434, grad_norm: 82.5894
2025-04-05 20:35:34,736 - mmdet - INFO - Epoch [4][1650/61790]	lr: 2.388e-05, eta: 5 days, 16:37:51, time: 0.464, data_time: 0.006, memory: 6505, loss_cls: 0.3742, loss_bbox: 0.6602, d0.loss_cls: 0.4231, d0.loss_bbox: 0.7812, d1.loss_cls: 0.4044, d1.loss_bbox: 0.6990, d2.loss_cls: 0.3872, d2.loss_bbox: 0.6794, d3.loss_cls: 0.3767, d3.loss_bbox: 0.6688, d4.loss_cls: 0.3731, d4.loss_bbox: 0.6659, aux_task0.loss_heatmap: 0.5369, aux_task0.loss_bbox: 0.1962, aux_task1.loss_heatmap: 0.7319, aux_task1.loss_bbox: 0.2789, aux_task2.loss_heatmap: 0.6742, aux_task2.loss_bbox: 0.2948, aux_task3.loss_heatmap: 0.5344, aux_task3.loss_bbox: 0.2698, aux_task4.loss_heatmap: 0.4014, aux_task4.loss_bbox: 0.2381, aux_task5.loss_heatmap: 0.3938, aux_task5.loss_bbox: 0.2721, loss: 11.3157, grad_norm: 77.0986
2025-04-05 20:35:57,830 - mmdet - INFO - Epoch [4][1700/61790]	lr: 2.389e-05, eta: 5 days, 16:33:48, time: 0.462, data_time: 0.006, memory: 6505, loss_cls: 0.3679, loss_bbox: 0.6328, d0.loss_cls: 0.4263, d0.loss_bbox: 0.7565, d1.loss_cls: 0.4021, d1.loss_bbox: 0.6668, d2.loss_cls: 0.3847, d2.loss_bbox: 0.6519, d3.loss_cls: 0.3746, d3.loss_bbox: 0.6439, d4.loss_cls: 0.3676, d4.loss_bbox: 0.6390, aux_task0.loss_heatmap: 0.5176, aux_task0.loss_bbox: 0.1984, aux_task1.loss_heatmap: 0.7175, aux_task1.loss_bbox: 0.2695, aux_task2.loss_heatmap: 0.6922, aux_task2.loss_bbox: 0.2892, aux_task3.loss_heatmap: 0.5247, aux_task3.loss_bbox: 0.2644, aux_task4.loss_heatmap: 0.3705, aux_task4.loss_bbox: 0.2161, aux_task5.loss_heatmap: 0.3636, aux_task5.loss_bbox: 0.2719, loss: 11.0101, grad_norm: 83.9235
2025-04-05 20:36:21,346 - mmdet - INFO - Epoch [4][1750/61790]	lr: 2.390e-05, eta: 5 days, 16:34:10, time: 0.470, data_time: 0.006, memory: 6505, loss_cls: 0.3810, loss_bbox: 0.6587, d0.loss_cls: 0.4335, d0.loss_bbox: 0.7825, d1.loss_cls: 0.4148, d1.loss_bbox: 0.6975, d2.loss_cls: 0.3981, d2.loss_bbox: 0.6777, d3.loss_cls: 0.3866, d3.loss_bbox: 0.6688, d4.loss_cls: 0.3814, d4.loss_bbox: 0.6622, aux_task0.loss_heatmap: 0.5199, aux_task0.loss_bbox: 0.2036, aux_task1.loss_heatmap: 0.6997, aux_task1.loss_bbox: 0.2705, aux_task2.loss_heatmap: 0.7111, aux_task2.loss_bbox: 0.3024, aux_task3.loss_heatmap: 0.5446, aux_task3.loss_bbox: 0.2613, aux_task4.loss_heatmap: 0.4235, aux_task4.loss_bbox: 0.2302, aux_task5.loss_heatmap: 0.4025, aux_task5.loss_bbox: 0.2735, loss: 11.3857, grad_norm: 79.0788
2025-04-05 20:36:44,668 - mmdet - INFO - Epoch [4][1800/61790]	lr: 2.391e-05, eta: 5 days, 16:32:37, time: 0.466, data_time: 0.007, memory: 6505, loss_cls: 0.3653, loss_bbox: 0.6432, d0.loss_cls: 0.4199, d0.loss_bbox: 0.7619, d1.loss_cls: 0.3976, d1.loss_bbox: 0.6781, d2.loss_cls: 0.3833, d2.loss_bbox: 0.6606, d3.loss_cls: 0.3721, d3.loss_bbox: 0.6532, d4.loss_cls: 0.3660, d4.loss_bbox: 0.6477, aux_task0.loss_heatmap: 0.5015, aux_task0.loss_bbox: 0.2016, aux_task1.loss_heatmap: 0.7178, aux_task1.loss_bbox: 0.2740, aux_task2.loss_heatmap: 0.6775, aux_task2.loss_bbox: 0.2910, aux_task3.loss_heatmap: 0.4915, aux_task3.loss_bbox: 0.2683, aux_task4.loss_heatmap: 0.3942, aux_task4.loss_bbox: 0.2143, aux_task5.loss_heatmap: 0.3775, aux_task5.loss_bbox: 0.2740, loss: 11.0323, grad_norm: 78.2403
2025-04-05 20:37:07,837 - mmdet - INFO - Epoch [4][1850/61790]	lr: 2.392e-05, eta: 5 days, 16:29:41, time: 0.463, data_time: 0.007, memory: 6517, loss_cls: 0.3831, loss_bbox: 0.6414, d0.loss_cls: 0.4345, d0.loss_bbox: 0.7776, d1.loss_cls: 0.4167, d1.loss_bbox: 0.6822, d2.loss_cls: 0.4030, d2.loss_bbox: 0.6631, d3.loss_cls: 0.3924, d3.loss_bbox: 0.6519, d4.loss_cls: 0.3845, d4.loss_bbox: 0.6483, aux_task0.loss_heatmap: 0.4883, aux_task0.loss_bbox: 0.2046, aux_task1.loss_heatmap: 0.7394, aux_task1.loss_bbox: 0.2788, aux_task2.loss_heatmap: 0.6824, aux_task2.loss_bbox: 0.2737, aux_task3.loss_heatmap: 0.5359, aux_task3.loss_bbox: 0.2639, aux_task4.loss_heatmap: 0.3651, aux_task4.loss_bbox: 0.2206, aux_task5.loss_heatmap: 0.4142, aux_task5.loss_bbox: 0.2760, loss: 11.2218, grad_norm: 78.5861
2025-04-05 20:37:31,162 - mmdet - INFO - Epoch [4][1900/61790]	lr: 2.393e-05, eta: 5 days, 16:28:19, time: 0.467, data_time: 0.006, memory: 6517, loss_cls: 0.3565, loss_bbox: 0.6233, d0.loss_cls: 0.4096, d0.loss_bbox: 0.7477, d1.loss_cls: 0.3905, d1.loss_bbox: 0.6605, d2.loss_cls: 0.3735, d2.loss_bbox: 0.6410, d3.loss_cls: 0.3610, d3.loss_bbox: 0.6337, d4.loss_cls: 0.3558, d4.loss_bbox: 0.6285, aux_task0.loss_heatmap: 0.4664, aux_task0.loss_bbox: 0.1906, aux_task1.loss_heatmap: 0.6466, aux_task1.loss_bbox: 0.2571, aux_task2.loss_heatmap: 0.6682, aux_task2.loss_bbox: 0.2698, aux_task3.loss_heatmap: 0.5671, aux_task3.loss_bbox: 0.2798, aux_task4.loss_heatmap: 0.3805, aux_task4.loss_bbox: 0.2245, aux_task5.loss_heatmap: 0.4100, aux_task5.loss_bbox: 0.2689, loss: 10.8113, grad_norm: 79.2051
2025-04-05 20:37:54,549 - mmdet - INFO - Epoch [4][1950/61790]	lr: 2.393e-05, eta: 5 days, 16:27:33, time: 0.468, data_time: 0.007, memory: 6517, loss_cls: 0.3714, loss_bbox: 0.6402, d0.loss_cls: 0.4269, d0.loss_bbox: 0.7693, d1.loss_cls: 0.4029, d1.loss_bbox: 0.6853, d2.loss_cls: 0.3862, d2.loss_bbox: 0.6654, d3.loss_cls: 0.3770, d3.loss_bbox: 0.6555, d4.loss_cls: 0.3724, d4.loss_bbox: 0.6472, aux_task0.loss_heatmap: 0.4956, aux_task0.loss_bbox: 0.1946, aux_task1.loss_heatmap: 0.7537, aux_task1.loss_bbox: 0.2710, aux_task2.loss_heatmap: 0.7743, aux_task2.loss_bbox: 0.2897, aux_task3.loss_heatmap: 0.4938, aux_task3.loss_bbox: 0.2769, aux_task4.loss_heatmap: 0.3754, aux_task4.loss_bbox: 0.2193, aux_task5.loss_heatmap: 0.4151, aux_task5.loss_bbox: 0.2814, loss: 11.2406, grad_norm: 79.6916
2025-04-05 20:38:18,022 - mmdet - INFO - Epoch [4][2000/61790]	lr: 2.394e-05, eta: 5 days, 16:27:34, time: 0.469, data_time: 0.007, memory: 6517, loss_cls: 0.3591, loss_bbox: 0.6402, d0.loss_cls: 0.4135, d0.loss_bbox: 0.7674, d1.loss_cls: 0.3894, d1.loss_bbox: 0.6806, d2.loss_cls: 0.3730, d2.loss_bbox: 0.6604, d3.loss_cls: 0.3648, d3.loss_bbox: 0.6505, d4.loss_cls: 0.3581, d4.loss_bbox: 0.6469, aux_task0.loss_heatmap: 0.5279, aux_task0.loss_bbox: 0.2041, aux_task1.loss_heatmap: 0.7335, aux_task1.loss_bbox: 0.2764, aux_task2.loss_heatmap: 0.6437, aux_task2.loss_bbox: 0.2854, aux_task3.loss_heatmap: 0.4834, aux_task3.loss_bbox: 0.2660, aux_task4.loss_heatmap: 0.3518, aux_task4.loss_bbox: 0.2217, aux_task5.loss_heatmap: 0.4067, aux_task5.loss_bbox: 0.2741, loss: 10.9786, grad_norm: 79.1482
2025-04-05 20:38:41,320 - mmdet - INFO - Epoch [4][2050/61790]	lr: 2.395e-05, eta: 5 days, 16:26:04, time: 0.466, data_time: 0.006, memory: 6517, loss_cls: 0.3660, loss_bbox: 0.6471, d0.loss_cls: 0.4214, d0.loss_bbox: 0.7829, d1.loss_cls: 0.4000, d1.loss_bbox: 0.6896, d2.loss_cls: 0.3836, d2.loss_bbox: 0.6704, d3.loss_cls: 0.3728, d3.loss_bbox: 0.6620, d4.loss_cls: 0.3668, d4.loss_bbox: 0.6552, aux_task0.loss_heatmap: 0.5037, aux_task0.loss_bbox: 0.2070, aux_task1.loss_heatmap: 0.6915, aux_task1.loss_bbox: 0.2718, aux_task2.loss_heatmap: 0.6658, aux_task2.loss_bbox: 0.2812, aux_task3.loss_heatmap: 0.5121, aux_task3.loss_bbox: 0.2458, aux_task4.loss_heatmap: 0.3924, aux_task4.loss_bbox: 0.2276, aux_task5.loss_heatmap: 0.3941, aux_task5.loss_bbox: 0.2828, loss: 11.0935, grad_norm: 79.8386
2025-04-05 20:39:04,852 - mmdet - INFO - Epoch [4][2100/61790]	lr: 2.396e-05, eta: 5 days, 16:26:34, time: 0.471, data_time: 0.011, memory: 6517, loss_cls: 0.3652, loss_bbox: 0.6518, d0.loss_cls: 0.4209, d0.loss_bbox: 0.7783, d1.loss_cls: 0.3970, d1.loss_bbox: 0.6921, d2.loss_cls: 0.3814, d2.loss_bbox: 0.6722, d3.loss_cls: 0.3714, d3.loss_bbox: 0.6615, d4.loss_cls: 0.3671, d4.loss_bbox: 0.6561, aux_task0.loss_heatmap: 0.5098, aux_task0.loss_bbox: 0.2048, aux_task1.loss_heatmap: 0.7232, aux_task1.loss_bbox: 0.2731, aux_task2.loss_heatmap: 0.6686, aux_task2.loss_bbox: 0.2670, aux_task3.loss_heatmap: 0.5304, aux_task3.loss_bbox: 0.2705, aux_task4.loss_heatmap: 0.3812, aux_task4.loss_bbox: 0.2272, aux_task5.loss_heatmap: 0.3870, aux_task5.loss_bbox: 0.2719, loss: 11.1296, grad_norm: 79.3669
2025-04-05 20:39:28,059 - mmdet - INFO - Epoch [4][2150/61790]	lr: 2.397e-05, eta: 5 days, 16:24:23, time: 0.464, data_time: 0.007, memory: 6517, loss_cls: 0.3635, loss_bbox: 0.6360, d0.loss_cls: 0.4241, d0.loss_bbox: 0.7662, d1.loss_cls: 0.3981, d1.loss_bbox: 0.6764, d2.loss_cls: 0.3818, d2.loss_bbox: 0.6575, d3.loss_cls: 0.3700, d3.loss_bbox: 0.6470, d4.loss_cls: 0.3647, d4.loss_bbox: 0.6424, aux_task0.loss_heatmap: 0.4749, aux_task0.loss_bbox: 0.1930, aux_task1.loss_heatmap: 0.7200, aux_task1.loss_bbox: 0.2811, aux_task2.loss_heatmap: 0.6930, aux_task2.loss_bbox: 0.2738, aux_task3.loss_heatmap: 0.5367, aux_task3.loss_bbox: 0.2502, aux_task4.loss_heatmap: 0.3630, aux_task4.loss_bbox: 0.2211, aux_task5.loss_heatmap: 0.3989, aux_task5.loss_bbox: 0.2681, loss: 11.0018, grad_norm: 88.2407
2025-04-05 20:39:51,066 - mmdet - INFO - Epoch [4][2200/61790]	lr: 2.398e-05, eta: 5 days, 16:20:42, time: 0.460, data_time: 0.006, memory: 6517, loss_cls: 0.3636, loss_bbox: 0.6398, d0.loss_cls: 0.4210, d0.loss_bbox: 0.7726, d1.loss_cls: 0.3994, d1.loss_bbox: 0.6809, d2.loss_cls: 0.3814, d2.loss_bbox: 0.6619, d3.loss_cls: 0.3698, d3.loss_bbox: 0.6540, d4.loss_cls: 0.3648, d4.loss_bbox: 0.6446, aux_task0.loss_heatmap: 0.5066, aux_task0.loss_bbox: 0.2011, aux_task1.loss_heatmap: 0.7026, aux_task1.loss_bbox: 0.2662, aux_task2.loss_heatmap: 0.6729, aux_task2.loss_bbox: 0.2797, aux_task3.loss_heatmap: 0.5244, aux_task3.loss_bbox: 0.2675, aux_task4.loss_heatmap: 0.3927, aux_task4.loss_bbox: 0.2194, aux_task5.loss_heatmap: 0.4160, aux_task5.loss_bbox: 0.2674, loss: 11.0701, grad_norm: 80.4743
2025-04-05 20:40:14,433 - mmdet - INFO - Epoch [4][2250/61790]	lr: 2.398e-05, eta: 5 days, 16:19:56, time: 0.467, data_time: 0.006, memory: 6517, loss_cls: 0.3715, loss_bbox: 0.6466, d0.loss_cls: 0.4247, d0.loss_bbox: 0.7747, d1.loss_cls: 0.4042, d1.loss_bbox: 0.6864, d2.loss_cls: 0.3886, d2.loss_bbox: 0.6674, d3.loss_cls: 0.3791, d3.loss_bbox: 0.6568, d4.loss_cls: 0.3724, d4.loss_bbox: 0.6521, aux_task0.loss_heatmap: 0.5634, aux_task0.loss_bbox: 0.2099, aux_task1.loss_heatmap: 0.6913, aux_task1.loss_bbox: 0.2618, aux_task2.loss_heatmap: 0.6972, aux_task2.loss_bbox: 0.2965, aux_task3.loss_heatmap: 0.5421, aux_task3.loss_bbox: 0.2469, aux_task4.loss_heatmap: 0.4088, aux_task4.loss_bbox: 0.2206, aux_task5.loss_heatmap: 0.4005, aux_task5.loss_bbox: 0.2757, loss: 11.2392, grad_norm: 81.0641
2025-04-05 20:40:37,981 - mmdet - INFO - Epoch [4][2300/61790]	lr: 2.399e-05, eta: 5 days, 16:20:35, time: 0.471, data_time: 0.007, memory: 6517, loss_cls: 0.3577, loss_bbox: 0.6410, d0.loss_cls: 0.4164, d0.loss_bbox: 0.7679, d1.loss_cls: 0.3908, d1.loss_bbox: 0.6838, d2.loss_cls: 0.3754, d2.loss_bbox: 0.6637, d3.loss_cls: 0.3658, d3.loss_bbox: 0.6521, d4.loss_cls: 0.3585, d4.loss_bbox: 0.6471, aux_task0.loss_heatmap: 0.5139, aux_task0.loss_bbox: 0.1985, aux_task1.loss_heatmap: 0.6799, aux_task1.loss_bbox: 0.2687, aux_task2.loss_heatmap: 0.6650, aux_task2.loss_bbox: 0.2802, aux_task3.loss_heatmap: 0.3881, aux_task3.loss_bbox: 0.2618, aux_task4.loss_heatmap: 0.3849, aux_task4.loss_bbox: 0.2233, aux_task5.loss_heatmap: 0.4097, aux_task5.loss_bbox: 0.2708, loss: 10.8653, grad_norm: 75.4881
2025-04-05 20:41:00,998 - mmdet - INFO - Epoch [4][2350/61790]	lr: 2.400e-05, eta: 5 days, 16:17:14, time: 0.460, data_time: 0.006, memory: 6517, loss_cls: 0.3716, loss_bbox: 0.6427, d0.loss_cls: 0.4245, d0.loss_bbox: 0.7742, d1.loss_cls: 0.4042, d1.loss_bbox: 0.6848, d2.loss_cls: 0.3895, d2.loss_bbox: 0.6662, d3.loss_cls: 0.3767, d3.loss_bbox: 0.6568, d4.loss_cls: 0.3699, d4.loss_bbox: 0.6504, aux_task0.loss_heatmap: 0.5036, aux_task0.loss_bbox: 0.1965, aux_task1.loss_heatmap: 0.7272, aux_task1.loss_bbox: 0.2736, aux_task2.loss_heatmap: 0.6855, aux_task2.loss_bbox: 0.2847, aux_task3.loss_heatmap: 0.5091, aux_task3.loss_bbox: 0.2558, aux_task4.loss_heatmap: 0.3880, aux_task4.loss_bbox: 0.2233, aux_task5.loss_heatmap: 0.4165, aux_task5.loss_bbox: 0.2797, loss: 11.1550, grad_norm: 77.5274
2025-04-05 20:41:24,135 - mmdet - INFO - Epoch [4][2400/61790]	lr: 2.401e-05, eta: 5 days, 16:14:53, time: 0.463, data_time: 0.006, memory: 6517, loss_cls: 0.3667, loss_bbox: 0.6340, d0.loss_cls: 0.4176, d0.loss_bbox: 0.7600, d1.loss_cls: 0.3970, d1.loss_bbox: 0.6729, d2.loss_cls: 0.3846, d2.loss_bbox: 0.6545, d3.loss_cls: 0.3707, d3.loss_bbox: 0.6463, d4.loss_cls: 0.3653, d4.loss_bbox: 0.6414, aux_task0.loss_heatmap: 0.4847, aux_task0.loss_bbox: 0.2011, aux_task1.loss_heatmap: 0.6659, aux_task1.loss_bbox: 0.2580, aux_task2.loss_heatmap: 0.6845, aux_task2.loss_bbox: 0.2829, aux_task3.loss_heatmap: 0.5446, aux_task3.loss_bbox: 0.2620, aux_task4.loss_heatmap: 0.3739, aux_task4.loss_bbox: 0.2261, aux_task5.loss_heatmap: 0.4045, aux_task5.loss_bbox: 0.2744, loss: 10.9734, grad_norm: 81.0896
2025-04-05 20:41:47,347 - mmdet - INFO - Epoch [4][2450/61790]	lr: 2.402e-05, eta: 5 days, 16:13:09, time: 0.464, data_time: 0.007, memory: 6517, loss_cls: 0.3739, loss_bbox: 0.6470, d0.loss_cls: 0.4336, d0.loss_bbox: 0.7783, d1.loss_cls: 0.4097, d1.loss_bbox: 0.6905, d2.loss_cls: 0.3929, d2.loss_bbox: 0.6694, d3.loss_cls: 0.3791, d3.loss_bbox: 0.6609, d4.loss_cls: 0.3747, d4.loss_bbox: 0.6535, aux_task0.loss_heatmap: 0.5127, aux_task0.loss_bbox: 0.2087, aux_task1.loss_heatmap: 0.7076, aux_task1.loss_bbox: 0.2690, aux_task2.loss_heatmap: 0.7202, aux_task2.loss_bbox: 0.2881, aux_task3.loss_heatmap: 0.5219, aux_task3.loss_bbox: 0.2587, aux_task4.loss_heatmap: 0.4006, aux_task4.loss_bbox: 0.2244, aux_task5.loss_heatmap: 0.4325, aux_task5.loss_bbox: 0.2753, loss: 11.2829, grad_norm: 81.7905
2025-04-05 20:42:10,770 - mmdet - INFO - Epoch [4][2500/61790]	lr: 2.403e-05, eta: 5 days, 16:12:56, time: 0.468, data_time: 0.007, memory: 6517, loss_cls: 0.3619, loss_bbox: 0.6369, d0.loss_cls: 0.4187, d0.loss_bbox: 0.7659, d1.loss_cls: 0.3969, d1.loss_bbox: 0.6782, d2.loss_cls: 0.3794, d2.loss_bbox: 0.6621, d3.loss_cls: 0.3659, d3.loss_bbox: 0.6524, d4.loss_cls: 0.3621, d4.loss_bbox: 0.6434, aux_task0.loss_heatmap: 0.5067, aux_task0.loss_bbox: 0.2061, aux_task1.loss_heatmap: 0.7278, aux_task1.loss_bbox: 0.2664, aux_task2.loss_heatmap: 0.6642, aux_task2.loss_bbox: 0.2745, aux_task3.loss_heatmap: 0.4903, aux_task3.loss_bbox: 0.2586, aux_task4.loss_heatmap: 0.3536, aux_task4.loss_bbox: 0.2149, aux_task5.loss_heatmap: 0.4633, aux_task5.loss_bbox: 0.2713, loss: 11.0216, grad_norm: 79.8611
2025-04-05 20:42:33,845 - mmdet - INFO - Epoch [4][2550/61790]	lr: 2.403e-05, eta: 5 days, 16:10:21, time: 0.462, data_time: 0.007, memory: 6517, loss_cls: 0.3501, loss_bbox: 0.6227, d0.loss_cls: 0.4084, d0.loss_bbox: 0.7457, d1.loss_cls: 0.3846, d1.loss_bbox: 0.6590, d2.loss_cls: 0.3684, d2.loss_bbox: 0.6423, d3.loss_cls: 0.3567, d3.loss_bbox: 0.6323, d4.loss_cls: 0.3500, d4.loss_bbox: 0.6284, aux_task0.loss_heatmap: 0.5053, aux_task0.loss_bbox: 0.1971, aux_task1.loss_heatmap: 0.6600, aux_task1.loss_bbox: 0.2675, aux_task2.loss_heatmap: 0.6564, aux_task2.loss_bbox: 0.2777, aux_task3.loss_heatmap: 0.4940, aux_task3.loss_bbox: 0.2573, aux_task4.loss_heatmap: 0.3545, aux_task4.loss_bbox: 0.2162, aux_task5.loss_heatmap: 0.4251, aux_task5.loss_bbox: 0.2762, loss: 10.7358, grad_norm: 82.9600
2025-04-05 20:42:57,142 - mmdet - INFO - Epoch [4][2600/61790]	lr: 2.404e-05, eta: 5 days, 16:09:19, time: 0.466, data_time: 0.006, memory: 6517, loss_cls: 0.3673, loss_bbox: 0.6384, d0.loss_cls: 0.4235, d0.loss_bbox: 0.7707, d1.loss_cls: 0.3999, d1.loss_bbox: 0.6745, d2.loss_cls: 0.3857, d2.loss_bbox: 0.6580, d3.loss_cls: 0.3763, d3.loss_bbox: 0.6475, d4.loss_cls: 0.3690, d4.loss_bbox: 0.6435, aux_task0.loss_heatmap: 0.5089, aux_task0.loss_bbox: 0.2091, aux_task1.loss_heatmap: 0.6862, aux_task1.loss_bbox: 0.2589, aux_task2.loss_heatmap: 0.6867, aux_task2.loss_bbox: 0.2811, aux_task3.loss_heatmap: 0.6357, aux_task3.loss_bbox: 0.2885, aux_task4.loss_heatmap: 0.3715, aux_task4.loss_bbox: 0.2236, aux_task5.loss_heatmap: 0.3999, aux_task5.loss_bbox: 0.2687, loss: 11.1733, grad_norm: 85.0681
2025-04-05 20:43:20,040 - mmdet - INFO - Epoch [4][2650/61790]	lr: 2.405e-05, eta: 5 days, 16:05:42, time: 0.458, data_time: 0.007, memory: 6517, loss_cls: 0.3552, loss_bbox: 0.6186, d0.loss_cls: 0.4141, d0.loss_bbox: 0.7461, d1.loss_cls: 0.3904, d1.loss_bbox: 0.6569, d2.loss_cls: 0.3719, d2.loss_bbox: 0.6408, d3.loss_cls: 0.3608, d3.loss_bbox: 0.6304, d4.loss_cls: 0.3550, d4.loss_bbox: 0.6251, aux_task0.loss_heatmap: 0.4544, aux_task0.loss_bbox: 0.1860, aux_task1.loss_heatmap: 0.6363, aux_task1.loss_bbox: 0.2577, aux_task2.loss_heatmap: 0.7177, aux_task2.loss_bbox: 0.2896, aux_task3.loss_heatmap: 0.5418, aux_task3.loss_bbox: 0.2693, aux_task4.loss_heatmap: 0.3387, aux_task4.loss_bbox: 0.2129, aux_task5.loss_heatmap: 0.4017, aux_task5.loss_bbox: 0.2762, loss: 10.7477, grad_norm: 81.4094
2025-04-05 20:43:43,421 - mmdet - INFO - Epoch [4][2700/61790]	lr: 2.406e-05, eta: 5 days, 16:05:18, time: 0.468, data_time: 0.006, memory: 6517, loss_cls: 0.3636, loss_bbox: 0.6513, d0.loss_cls: 0.4118, d0.loss_bbox: 0.7721, d1.loss_cls: 0.3918, d1.loss_bbox: 0.6902, d2.loss_cls: 0.3769, d2.loss_bbox: 0.6705, d3.loss_cls: 0.3678, d3.loss_bbox: 0.6622, d4.loss_cls: 0.3620, d4.loss_bbox: 0.6591, aux_task0.loss_heatmap: 0.5177, aux_task0.loss_bbox: 0.2053, aux_task1.loss_heatmap: 0.6656, aux_task1.loss_bbox: 0.2647, aux_task2.loss_heatmap: 0.6084, aux_task2.loss_bbox: 0.2805, aux_task3.loss_heatmap: 0.4624, aux_task3.loss_bbox: 0.2725, aux_task4.loss_heatmap: 0.3852, aux_task4.loss_bbox: 0.2252, aux_task5.loss_heatmap: 0.3932, aux_task5.loss_bbox: 0.2757, loss: 10.9355, grad_norm: 83.8873
2025-04-05 20:44:07,046 - mmdet - INFO - Epoch [4][2750/61790]	lr: 2.407e-05, eta: 5 days, 16:06:28, time: 0.473, data_time: 0.009, memory: 6517, loss_cls: 0.3635, loss_bbox: 0.6403, d0.loss_cls: 0.4209, d0.loss_bbox: 0.7636, d1.loss_cls: 0.4050, d1.loss_bbox: 0.6754, d2.loss_cls: 0.3852, d2.loss_bbox: 0.6587, d3.loss_cls: 0.3730, d3.loss_bbox: 0.6490, d4.loss_cls: 0.3661, d4.loss_bbox: 0.6461, aux_task0.loss_heatmap: 0.5136, aux_task0.loss_bbox: 0.1963, aux_task1.loss_heatmap: 0.6634, aux_task1.loss_bbox: 0.2665, aux_task2.loss_heatmap: 0.6489, aux_task2.loss_bbox: 0.2745, aux_task3.loss_heatmap: 0.5143, aux_task3.loss_bbox: 0.2503, aux_task4.loss_heatmap: 0.3849, aux_task4.loss_bbox: 0.2171, aux_task5.loss_heatmap: 0.4277, aux_task5.loss_bbox: 0.2764, loss: 10.9807, grad_norm: 80.1731
2025-04-05 20:44:30,132 - mmdet - INFO - Epoch [4][2800/61790]	lr: 2.408e-05, eta: 5 days, 16:04:13, time: 0.462, data_time: 0.006, memory: 6545, loss_cls: 0.3613, loss_bbox: 0.6400, d0.loss_cls: 0.4204, d0.loss_bbox: 0.7735, d1.loss_cls: 0.3967, d1.loss_bbox: 0.6828, d2.loss_cls: 0.3782, d2.loss_bbox: 0.6641, d3.loss_cls: 0.3652, d3.loss_bbox: 0.6537, d4.loss_cls: 0.3608, d4.loss_bbox: 0.6465, aux_task0.loss_heatmap: 0.5006, aux_task0.loss_bbox: 0.2072, aux_task1.loss_heatmap: 0.7051, aux_task1.loss_bbox: 0.2740, aux_task2.loss_heatmap: 0.6306, aux_task2.loss_bbox: 0.2693, aux_task3.loss_heatmap: 0.4939, aux_task3.loss_bbox: 0.2657, aux_task4.loss_heatmap: 0.3872, aux_task4.loss_bbox: 0.2277, aux_task5.loss_heatmap: 0.3907, aux_task5.loss_bbox: 0.2716, loss: 10.9668, grad_norm: 77.9808
2025-04-05 20:44:53,491 - mmdet - INFO - Epoch [4][2850/61790]	lr: 2.408e-05, eta: 5 days, 16:03:42, time: 0.467, data_time: 0.006, memory: 6545, loss_cls: 0.3660, loss_bbox: 0.6361, d0.loss_cls: 0.4194, d0.loss_bbox: 0.7652, d1.loss_cls: 0.4012, d1.loss_bbox: 0.6745, d2.loss_cls: 0.3813, d2.loss_bbox: 0.6571, d3.loss_cls: 0.3729, d3.loss_bbox: 0.6478, d4.loss_cls: 0.3659, d4.loss_bbox: 0.6427, aux_task0.loss_heatmap: 0.4952, aux_task0.loss_bbox: 0.1904, aux_task1.loss_heatmap: 0.6685, aux_task1.loss_bbox: 0.2694, aux_task2.loss_heatmap: 0.6765, aux_task2.loss_bbox: 0.2810, aux_task3.loss_heatmap: 0.5476, aux_task3.loss_bbox: 0.2886, aux_task4.loss_heatmap: 0.3960, aux_task4.loss_bbox: 0.2312, aux_task5.loss_heatmap: 0.4361, aux_task5.loss_bbox: 0.2758, loss: 11.0865, grad_norm: 82.5362
2025-04-05 20:45:16,653 - mmdet - INFO - Epoch [4][2900/61790]	lr: 2.409e-05, eta: 5 days, 16:02:00, time: 0.463, data_time: 0.006, memory: 6545, loss_cls: 0.3698, loss_bbox: 0.6460, d0.loss_cls: 0.4242, d0.loss_bbox: 0.7736, d1.loss_cls: 0.4026, d1.loss_bbox: 0.6875, d2.loss_cls: 0.3860, d2.loss_bbox: 0.6676, d3.loss_cls: 0.3764, d3.loss_bbox: 0.6584, d4.loss_cls: 0.3698, d4.loss_bbox: 0.6535, aux_task0.loss_heatmap: 0.5321, aux_task0.loss_bbox: 0.2026, aux_task1.loss_heatmap: 0.7021, aux_task1.loss_bbox: 0.2779, aux_task2.loss_heatmap: 0.6647, aux_task2.loss_bbox: 0.2817, aux_task3.loss_heatmap: 0.5274, aux_task3.loss_bbox: 0.2609, aux_task4.loss_heatmap: 0.3985, aux_task4.loss_bbox: 0.2249, aux_task5.loss_heatmap: 0.3914, aux_task5.loss_bbox: 0.2825, loss: 11.1621, grad_norm: 79.7831
2025-04-05 20:45:39,771 - mmdet - INFO - Epoch [4][2950/61790]	lr: 2.410e-05, eta: 5 days, 16:00:06, time: 0.462, data_time: 0.007, memory: 6545, loss_cls: 0.3804, loss_bbox: 0.6478, d0.loss_cls: 0.4329, d0.loss_bbox: 0.7759, d1.loss_cls: 0.4128, d1.loss_bbox: 0.6871, d2.loss_cls: 0.3999, d2.loss_bbox: 0.6673, d3.loss_cls: 0.3895, d3.loss_bbox: 0.6567, d4.loss_cls: 0.3820, d4.loss_bbox: 0.6538, aux_task0.loss_heatmap: 0.5083, aux_task0.loss_bbox: 0.1974, aux_task1.loss_heatmap: 0.7560, aux_task1.loss_bbox: 0.2709, aux_task2.loss_heatmap: 0.6506, aux_task2.loss_bbox: 0.2910, aux_task3.loss_heatmap: 0.5314, aux_task3.loss_bbox: 0.2759, aux_task4.loss_heatmap: 0.3678, aux_task4.loss_bbox: 0.2217, aux_task5.loss_heatmap: 0.4359, aux_task5.loss_bbox: 0.2756, loss: 11.2687, grad_norm: 83.8819
2025-04-05 20:46:02,695 - mmdet - INFO - Epoch [4][3000/61790]	lr: 2.411e-05, eta: 5 days, 15:57:07, time: 0.458, data_time: 0.007, memory: 6545, loss_cls: 0.3619, loss_bbox: 0.6264, d0.loss_cls: 0.4167, d0.loss_bbox: 0.7534, d1.loss_cls: 0.3929, d1.loss_bbox: 0.6624, d2.loss_cls: 0.3767, d2.loss_bbox: 0.6460, d3.loss_cls: 0.3679, d3.loss_bbox: 0.6383, d4.loss_cls: 0.3622, d4.loss_bbox: 0.6333, aux_task0.loss_heatmap: 0.4995, aux_task0.loss_bbox: 0.2030, aux_task1.loss_heatmap: 0.6845, aux_task1.loss_bbox: 0.2694, aux_task2.loss_heatmap: 0.7593, aux_task2.loss_bbox: 0.2959, aux_task3.loss_heatmap: 0.5815, aux_task3.loss_bbox: 0.2706, aux_task4.loss_heatmap: 0.3720, aux_task4.loss_bbox: 0.2195, aux_task5.loss_heatmap: 0.3857, aux_task5.loss_bbox: 0.2667, loss: 11.0460, grad_norm: 81.2294
2025-04-05 20:46:25,808 - mmdet - INFO - Epoch [4][3050/61790]	lr: 2.412e-05, eta: 5 days, 15:55:17, time: 0.462, data_time: 0.006, memory: 6545, loss_cls: 0.3785, loss_bbox: 0.6465, d0.loss_cls: 0.4368, d0.loss_bbox: 0.7698, d1.loss_cls: 0.4126, d1.loss_bbox: 0.6829, d2.loss_cls: 0.3935, d2.loss_bbox: 0.6663, d3.loss_cls: 0.3840, d3.loss_bbox: 0.6547, d4.loss_cls: 0.3780, d4.loss_bbox: 0.6528, aux_task0.loss_heatmap: 0.5234, aux_task0.loss_bbox: 0.1972, aux_task1.loss_heatmap: 0.7113, aux_task1.loss_bbox: 0.2721, aux_task2.loss_heatmap: 0.7082, aux_task2.loss_bbox: 0.2827, aux_task3.loss_heatmap: 0.5336, aux_task3.loss_bbox: 0.2768, aux_task4.loss_heatmap: 0.3891, aux_task4.loss_bbox: 0.2209, aux_task5.loss_heatmap: 0.4271, aux_task5.loss_bbox: 0.2765, loss: 11.2751, grad_norm: 79.7597
2025-04-05 20:46:49,564 - mmdet - INFO - Epoch [4][3100/61790]	lr: 2.413e-05, eta: 5 days, 15:57:08, time: 0.475, data_time: 0.007, memory: 6545, loss_cls: 0.3719, loss_bbox: 0.6516, d0.loss_cls: 0.4225, d0.loss_bbox: 0.7762, d1.loss_cls: 0.4012, d1.loss_bbox: 0.6918, d2.loss_cls: 0.3871, d2.loss_bbox: 0.6734, d3.loss_cls: 0.3779, d3.loss_bbox: 0.6648, d4.loss_cls: 0.3719, d4.loss_bbox: 0.6579, aux_task0.loss_heatmap: 0.5129, aux_task0.loss_bbox: 0.2043, aux_task1.loss_heatmap: 0.7346, aux_task1.loss_bbox: 0.2817, aux_task2.loss_heatmap: 0.6918, aux_task2.loss_bbox: 0.2906, aux_task3.loss_heatmap: 0.4994, aux_task3.loss_bbox: 0.2603, aux_task4.loss_heatmap: 0.4031, aux_task4.loss_bbox: 0.2279, aux_task5.loss_heatmap: 0.4323, aux_task5.loss_bbox: 0.2757, loss: 11.2626, grad_norm: 76.0236
2025-04-05 20:47:12,680 - mmdet - INFO - Epoch [4][3150/61790]	lr: 2.413e-05, eta: 5 days, 15:55:21, time: 0.462, data_time: 0.006, memory: 6545, loss_cls: 0.3729, loss_bbox: 0.6273, d0.loss_cls: 0.4316, d0.loss_bbox: 0.7541, d1.loss_cls: 0.4074, d1.loss_bbox: 0.6679, d2.loss_cls: 0.3923, d2.loss_bbox: 0.6496, d3.loss_cls: 0.3791, d3.loss_bbox: 0.6394, d4.loss_cls: 0.3735, d4.loss_bbox: 0.6337, aux_task0.loss_heatmap: 0.4916, aux_task0.loss_bbox: 0.1984, aux_task1.loss_heatmap: 0.6863, aux_task1.loss_bbox: 0.2740, aux_task2.loss_heatmap: 0.6972, aux_task2.loss_bbox: 0.2907, aux_task3.loss_heatmap: 0.4927, aux_task3.loss_bbox: 0.2550, aux_task4.loss_heatmap: 0.3917, aux_task4.loss_bbox: 0.2241, aux_task5.loss_heatmap: 0.4186, aux_task5.loss_bbox: 0.2724, loss: 11.0216, grad_norm: 80.6355
2025-04-05 20:47:36,091 - mmdet - INFO - Epoch [4][3200/61790]	lr: 2.414e-05, eta: 5 days, 15:55:14, time: 0.468, data_time: 0.006, memory: 6545, loss_cls: 0.3593, loss_bbox: 0.6475, d0.loss_cls: 0.4133, d0.loss_bbox: 0.7763, d1.loss_cls: 0.3912, d1.loss_bbox: 0.6904, d2.loss_cls: 0.3737, d2.loss_bbox: 0.6705, d3.loss_cls: 0.3649, d3.loss_bbox: 0.6589, d4.loss_cls: 0.3597, d4.loss_bbox: 0.6529, aux_task0.loss_heatmap: 0.5009, aux_task0.loss_bbox: 0.2024, aux_task1.loss_heatmap: 0.7284, aux_task1.loss_bbox: 0.2728, aux_task2.loss_heatmap: 0.6723, aux_task2.loss_bbox: 0.2790, aux_task3.loss_heatmap: 0.5031, aux_task3.loss_bbox: 0.2560, aux_task4.loss_heatmap: 0.3833, aux_task4.loss_bbox: 0.2200, aux_task5.loss_heatmap: 0.3999, aux_task5.loss_bbox: 0.2788, loss: 11.0555, grad_norm: 79.1231
2025-04-05 20:47:59,524 - mmdet - INFO - Epoch [4][3250/61790]	lr: 2.415e-05, eta: 5 days, 15:55:13, time: 0.469, data_time: 0.006, memory: 6545, loss_cls: 0.3635, loss_bbox: 0.6329, d0.loss_cls: 0.4157, d0.loss_bbox: 0.7623, d1.loss_cls: 0.3958, d1.loss_bbox: 0.6721, d2.loss_cls: 0.3808, d2.loss_bbox: 0.6538, d3.loss_cls: 0.3722, d3.loss_bbox: 0.6433, d4.loss_cls: 0.3657, d4.loss_bbox: 0.6387, aux_task0.loss_heatmap: 0.4714, aux_task0.loss_bbox: 0.1896, aux_task1.loss_heatmap: 0.6589, aux_task1.loss_bbox: 0.2682, aux_task2.loss_heatmap: 0.6780, aux_task2.loss_bbox: 0.2843, aux_task3.loss_heatmap: 0.5275, aux_task3.loss_bbox: 0.2454, aux_task4.loss_heatmap: 0.3787, aux_task4.loss_bbox: 0.2263, aux_task5.loss_heatmap: 0.3962, aux_task5.loss_bbox: 0.2715, loss: 10.8928, grad_norm: 79.4604
2025-04-05 20:48:23,137 - mmdet - INFO - Epoch [4][3300/61790]	lr: 2.416e-05, eta: 5 days, 15:56:09, time: 0.472, data_time: 0.008, memory: 6545, loss_cls: 0.3706, loss_bbox: 0.6436, d0.loss_cls: 0.4312, d0.loss_bbox: 0.7674, d1.loss_cls: 0.4016, d1.loss_bbox: 0.6853, d2.loss_cls: 0.3843, d2.loss_bbox: 0.6664, d3.loss_cls: 0.3758, d3.loss_bbox: 0.6549, d4.loss_cls: 0.3705, d4.loss_bbox: 0.6500, aux_task0.loss_heatmap: 0.4844, aux_task0.loss_bbox: 0.1930, aux_task1.loss_heatmap: 0.6587, aux_task1.loss_bbox: 0.2691, aux_task2.loss_heatmap: 0.7303, aux_task2.loss_bbox: 0.3000, aux_task3.loss_heatmap: 0.4594, aux_task3.loss_bbox: 0.2797, aux_task4.loss_heatmap: 0.3940, aux_task4.loss_bbox: 0.2243, aux_task5.loss_heatmap: 0.4198, aux_task5.loss_bbox: 0.2768, loss: 11.0912, grad_norm: 80.0518
2025-04-05 20:48:46,562 - mmdet - INFO - Epoch [4][3350/61790]	lr: 2.417e-05, eta: 5 days, 15:56:04, time: 0.468, data_time: 0.007, memory: 6545, loss_cls: 0.3842, loss_bbox: 0.6405, d0.loss_cls: 0.4357, d0.loss_bbox: 0.7732, d1.loss_cls: 0.4176, d1.loss_bbox: 0.6798, d2.loss_cls: 0.4010, d2.loss_bbox: 0.6615, d3.loss_cls: 0.3906, d3.loss_bbox: 0.6521, d4.loss_cls: 0.3849, d4.loss_bbox: 0.6455, aux_task0.loss_heatmap: 0.4899, aux_task0.loss_bbox: 0.1985, aux_task1.loss_heatmap: 0.7083, aux_task1.loss_bbox: 0.2636, aux_task2.loss_heatmap: 0.6923, aux_task2.loss_bbox: 0.2958, aux_task3.loss_heatmap: 0.6593, aux_task3.loss_bbox: 0.2606, aux_task4.loss_heatmap: 0.3912, aux_task4.loss_bbox: 0.2225, aux_task5.loss_heatmap: 0.4594, aux_task5.loss_bbox: 0.2829, loss: 11.3911, grad_norm: 84.7005
2025-04-05 20:49:09,929 - mmdet - INFO - Epoch [4][3400/61790]	lr: 2.418e-05, eta: 5 days, 15:55:40, time: 0.467, data_time: 0.006, memory: 6545, loss_cls: 0.3711, loss_bbox: 0.6456, d0.loss_cls: 0.4291, d0.loss_bbox: 0.7753, d1.loss_cls: 0.4071, d1.loss_bbox: 0.6872, d2.loss_cls: 0.3908, d2.loss_bbox: 0.6686, d3.loss_cls: 0.3807, d3.loss_bbox: 0.6583, d4.loss_cls: 0.3714, d4.loss_bbox: 0.6537, aux_task0.loss_heatmap: 0.5204, aux_task0.loss_bbox: 0.2032, aux_task1.loss_heatmap: 0.7060, aux_task1.loss_bbox: 0.2738, aux_task2.loss_heatmap: 0.6669, aux_task2.loss_bbox: 0.2833, aux_task3.loss_heatmap: 0.5182, aux_task3.loss_bbox: 0.2650, aux_task4.loss_heatmap: 0.3899, aux_task4.loss_bbox: 0.2284, aux_task5.loss_heatmap: 0.4583, aux_task5.loss_bbox: 0.2684, loss: 11.2209, grad_norm: 81.3372
2025-04-05 20:49:33,147 - mmdet - INFO - Epoch [4][3450/61790]	lr: 2.418e-05, eta: 5 days, 15:54:31, time: 0.464, data_time: 0.006, memory: 6545, loss_cls: 0.3723, loss_bbox: 0.6468, d0.loss_cls: 0.4328, d0.loss_bbox: 0.7588, d1.loss_cls: 0.4094, d1.loss_bbox: 0.6769, d2.loss_cls: 0.3912, d2.loss_bbox: 0.6625, d3.loss_cls: 0.3816, d3.loss_bbox: 0.6540, d4.loss_cls: 0.3733, d4.loss_bbox: 0.6532, aux_task0.loss_heatmap: 0.5178, aux_task0.loss_bbox: 0.1942, aux_task1.loss_heatmap: 0.7127, aux_task1.loss_bbox: 0.2717, aux_task2.loss_heatmap: 0.6351, aux_task2.loss_bbox: 0.2800, aux_task3.loss_heatmap: 0.5765, aux_task3.loss_bbox: 0.2639, aux_task4.loss_heatmap: 0.3851, aux_task4.loss_bbox: 0.2219, aux_task5.loss_heatmap: 0.4208, aux_task5.loss_bbox: 0.2701, loss: 11.1625, grad_norm: 80.8313
2025-04-05 20:49:56,463 - mmdet - INFO - Epoch [4][3500/61790]	lr: 2.419e-05, eta: 5 days, 15:53:53, time: 0.466, data_time: 0.006, memory: 6545, loss_cls: 0.3642, loss_bbox: 0.6400, d0.loss_cls: 0.4167, d0.loss_bbox: 0.7749, d1.loss_cls: 0.3989, d1.loss_bbox: 0.6823, d2.loss_cls: 0.3802, d2.loss_bbox: 0.6608, d3.loss_cls: 0.3699, d3.loss_bbox: 0.6496, d4.loss_cls: 0.3636, d4.loss_bbox: 0.6465, aux_task0.loss_heatmap: 0.5099, aux_task0.loss_bbox: 0.1994, aux_task1.loss_heatmap: 0.6927, aux_task1.loss_bbox: 0.2685, aux_task2.loss_heatmap: 0.6519, aux_task2.loss_bbox: 0.2766, aux_task3.loss_heatmap: 0.4756, aux_task3.loss_bbox: 0.2725, aux_task4.loss_heatmap: 0.3818, aux_task4.loss_bbox: 0.2247, aux_task5.loss_heatmap: 0.4340, aux_task5.loss_bbox: 0.2727, loss: 11.0078, grad_norm: 80.8915
2025-04-05 20:50:19,591 - mmdet - INFO - Epoch [4][3550/61790]	lr: 2.420e-05, eta: 5 days, 15:52:20, time: 0.463, data_time: 0.006, memory: 6545, loss_cls: 0.3653, loss_bbox: 0.6368, d0.loss_cls: 0.4193, d0.loss_bbox: 0.7621, d1.loss_cls: 0.3997, d1.loss_bbox: 0.6738, d2.loss_cls: 0.3797, d2.loss_bbox: 0.6546, d3.loss_cls: 0.3719, d3.loss_bbox: 0.6460, d4.loss_cls: 0.3657, d4.loss_bbox: 0.6419, aux_task0.loss_heatmap: 0.4755, aux_task0.loss_bbox: 0.1921, aux_task1.loss_heatmap: 0.7131, aux_task1.loss_bbox: 0.2710, aux_task2.loss_heatmap: 0.6618, aux_task2.loss_bbox: 0.2886, aux_task3.loss_heatmap: 0.5525, aux_task3.loss_bbox: 0.2659, aux_task4.loss_heatmap: 0.3761, aux_task4.loss_bbox: 0.2192, aux_task5.loss_heatmap: 0.4241, aux_task5.loss_bbox: 0.2718, loss: 11.0287, grad_norm: 80.9322
2025-04-05 20:50:42,832 - mmdet - INFO - Epoch [4][3600/61790]	lr: 2.421e-05, eta: 5 days, 15:51:21, time: 0.465, data_time: 0.006, memory: 6545, loss_cls: 0.3617, loss_bbox: 0.6445, d0.loss_cls: 0.4237, d0.loss_bbox: 0.7749, d1.loss_cls: 0.3953, d1.loss_bbox: 0.6843, d2.loss_cls: 0.3783, d2.loss_bbox: 0.6634, d3.loss_cls: 0.3675, d3.loss_bbox: 0.6539, d4.loss_cls: 0.3636, d4.loss_bbox: 0.6486, aux_task0.loss_heatmap: 0.4834, aux_task0.loss_bbox: 0.1947, aux_task1.loss_heatmap: 0.7164, aux_task1.loss_bbox: 0.2684, aux_task2.loss_heatmap: 0.6975, aux_task2.loss_bbox: 0.3018, aux_task3.loss_heatmap: 0.5346, aux_task3.loss_bbox: 0.2741, aux_task4.loss_heatmap: 0.3626, aux_task4.loss_bbox: 0.2217, aux_task5.loss_heatmap: 0.3972, aux_task5.loss_bbox: 0.2823, loss: 11.0940, grad_norm: 82.2021
2025-04-05 20:51:06,197 - mmdet - INFO - Epoch [4][3650/61790]	lr: 2.422e-05, eta: 5 days, 15:50:59, time: 0.467, data_time: 0.007, memory: 6545, loss_cls: 0.3593, loss_bbox: 0.6346, d0.loss_cls: 0.4156, d0.loss_bbox: 0.7552, d1.loss_cls: 0.3924, d1.loss_bbox: 0.6731, d2.loss_cls: 0.3743, d2.loss_bbox: 0.6542, d3.loss_cls: 0.3636, d3.loss_bbox: 0.6451, d4.loss_cls: 0.3589, d4.loss_bbox: 0.6412, aux_task0.loss_heatmap: 0.4713, aux_task0.loss_bbox: 0.1919, aux_task1.loss_heatmap: 0.7216, aux_task1.loss_bbox: 0.2708, aux_task2.loss_heatmap: 0.6734, aux_task2.loss_bbox: 0.2852, aux_task3.loss_heatmap: 0.4763, aux_task3.loss_bbox: 0.2528, aux_task4.loss_heatmap: 0.3737, aux_task4.loss_bbox: 0.2174, aux_task5.loss_heatmap: 0.3709, aux_task5.loss_bbox: 0.2719, loss: 10.8447, grad_norm: 76.7474
2025-04-05 20:51:29,318 - mmdet - INFO - Epoch [4][3700/61790]	lr: 2.423e-05, eta: 5 days, 15:49:28, time: 0.462, data_time: 0.006, memory: 6545, loss_cls: 0.3538, loss_bbox: 0.6336, d0.loss_cls: 0.4148, d0.loss_bbox: 0.7688, d1.loss_cls: 0.3900, d1.loss_bbox: 0.6788, d2.loss_cls: 0.3721, d2.loss_bbox: 0.6595, d3.loss_cls: 0.3605, d3.loss_bbox: 0.6483, d4.loss_cls: 0.3557, d4.loss_bbox: 0.6391, aux_task0.loss_heatmap: 0.4927, aux_task0.loss_bbox: 0.2023, aux_task1.loss_heatmap: 0.7143, aux_task1.loss_bbox: 0.2720, aux_task2.loss_heatmap: 0.6696, aux_task2.loss_bbox: 0.2799, aux_task3.loss_heatmap: 0.4591, aux_task3.loss_bbox: 0.2425, aux_task4.loss_heatmap: 0.3650, aux_task4.loss_bbox: 0.2256, aux_task5.loss_heatmap: 0.4219, aux_task5.loss_bbox: 0.2736, loss: 10.8934, grad_norm: 73.3013
2025-04-05 20:51:52,581 - mmdet - INFO - Epoch [4][3750/61790]	lr: 2.423e-05, eta: 5 days, 15:48:38, time: 0.465, data_time: 0.009, memory: 6545, loss_cls: 0.3607, loss_bbox: 0.6436, d0.loss_cls: 0.4194, d0.loss_bbox: 0.7717, d1.loss_cls: 0.3964, d1.loss_bbox: 0.6846, d2.loss_cls: 0.3783, d2.loss_bbox: 0.6639, d3.loss_cls: 0.3681, d3.loss_bbox: 0.6544, d4.loss_cls: 0.3607, d4.loss_bbox: 0.6499, aux_task0.loss_heatmap: 0.4669, aux_task0.loss_bbox: 0.1987, aux_task1.loss_heatmap: 0.7313, aux_task1.loss_bbox: 0.2742, aux_task2.loss_heatmap: 0.6826, aux_task2.loss_bbox: 0.2790, aux_task3.loss_heatmap: 0.4763, aux_task3.loss_bbox: 0.2608, aux_task4.loss_heatmap: 0.3902, aux_task4.loss_bbox: 0.2286, aux_task5.loss_heatmap: 0.3882, aux_task5.loss_bbox: 0.2655, loss: 10.9941, grad_norm: 79.2755
2025-04-05 20:52:16,133 - mmdet - INFO - Epoch [4][3800/61790]	lr: 2.424e-05, eta: 5 days, 15:49:09, time: 0.471, data_time: 0.006, memory: 6545, loss_cls: 0.3712, loss_bbox: 0.6414, d0.loss_cls: 0.4246, d0.loss_bbox: 0.7743, d1.loss_cls: 0.4035, d1.loss_bbox: 0.6843, d2.loss_cls: 0.3879, d2.loss_bbox: 0.6654, d3.loss_cls: 0.3770, d3.loss_bbox: 0.6553, d4.loss_cls: 0.3701, d4.loss_bbox: 0.6491, aux_task0.loss_heatmap: 0.5145, aux_task0.loss_bbox: 0.2006, aux_task1.loss_heatmap: 0.6609, aux_task1.loss_bbox: 0.2672, aux_task2.loss_heatmap: 0.6569, aux_task2.loss_bbox: 0.2849, aux_task3.loss_heatmap: 0.5585, aux_task3.loss_bbox: 0.2496, aux_task4.loss_heatmap: 0.4035, aux_task4.loss_bbox: 0.2221, aux_task5.loss_heatmap: 0.4286, aux_task5.loss_bbox: 0.2735, loss: 11.1251, grad_norm: 81.2891
2025-04-05 20:52:39,375 - mmdet - INFO - Epoch [4][3850/61790]	lr: 2.425e-05, eta: 5 days, 15:48:14, time: 0.465, data_time: 0.007, memory: 6545, loss_cls: 0.3852, loss_bbox: 0.6440, d0.loss_cls: 0.4405, d0.loss_bbox: 0.7715, d1.loss_cls: 0.4208, d1.loss_bbox: 0.6838, d2.loss_cls: 0.4017, d2.loss_bbox: 0.6683, d3.loss_cls: 0.3919, d3.loss_bbox: 0.6569, d4.loss_cls: 0.3860, d4.loss_bbox: 0.6493, aux_task0.loss_heatmap: 0.5126, aux_task0.loss_bbox: 0.2151, aux_task1.loss_heatmap: 0.7208, aux_task1.loss_bbox: 0.2699, aux_task2.loss_heatmap: 0.6602, aux_task2.loss_bbox: 0.2761, aux_task3.loss_heatmap: 0.5797, aux_task3.loss_bbox: 0.2490, aux_task4.loss_heatmap: 0.4017, aux_task4.loss_bbox: 0.2223, aux_task5.loss_heatmap: 0.4175, aux_task5.loss_bbox: 0.2738, loss: 11.2986, grad_norm: 81.7439
2025-04-05 20:53:02,598 - mmdet - INFO - Epoch [4][3900/61790]	lr: 2.426e-05, eta: 5 days, 15:47:15, time: 0.464, data_time: 0.006, memory: 6545, loss_cls: 0.3587, loss_bbox: 0.6239, d0.loss_cls: 0.4113, d0.loss_bbox: 0.7518, d1.loss_cls: 0.3951, d1.loss_bbox: 0.6646, d2.loss_cls: 0.3783, d2.loss_bbox: 0.6459, d3.loss_cls: 0.3658, d3.loss_bbox: 0.6367, d4.loss_cls: 0.3587, d4.loss_bbox: 0.6299, aux_task0.loss_heatmap: 0.4704, aux_task0.loss_bbox: 0.1905, aux_task1.loss_heatmap: 0.7066, aux_task1.loss_bbox: 0.2682, aux_task2.loss_heatmap: 0.6751, aux_task2.loss_bbox: 0.2791, aux_task3.loss_heatmap: 0.5314, aux_task3.loss_bbox: 0.2485, aux_task4.loss_heatmap: 0.3555, aux_task4.loss_bbox: 0.2185, aux_task5.loss_heatmap: 0.4449, aux_task5.loss_bbox: 0.2783, loss: 10.8877, grad_norm: 76.6155
2025-04-05 20:53:25,773 - mmdet - INFO - Epoch [4][3950/61790]	lr: 2.427e-05, eta: 5 days, 15:46:03, time: 0.463, data_time: 0.006, memory: 6545, loss_cls: 0.3674, loss_bbox: 0.6419, d0.loss_cls: 0.4181, d0.loss_bbox: 0.7643, d1.loss_cls: 0.3985, d1.loss_bbox: 0.6809, d2.loss_cls: 0.3816, d2.loss_bbox: 0.6647, d3.loss_cls: 0.3732, d3.loss_bbox: 0.6537, d4.loss_cls: 0.3681, d4.loss_bbox: 0.6481, aux_task0.loss_heatmap: 0.5010, aux_task0.loss_bbox: 0.2019, aux_task1.loss_heatmap: 0.6801, aux_task1.loss_bbox: 0.2632, aux_task2.loss_heatmap: 0.6764, aux_task2.loss_bbox: 0.2857, aux_task3.loss_heatmap: 0.5401, aux_task3.loss_bbox: 0.2551, aux_task4.loss_heatmap: 0.3956, aux_task4.loss_bbox: 0.2284, aux_task5.loss_heatmap: 0.3977, aux_task5.loss_bbox: 0.2722, loss: 11.0578, grad_norm: 77.8269
2025-04-05 20:53:49,041 - mmdet - INFO - Epoch [4][4000/61790]	lr: 2.428e-05, eta: 5 days, 15:45:18, time: 0.465, data_time: 0.006, memory: 6545, loss_cls: 0.3675, loss_bbox: 0.6348, d0.loss_cls: 0.4216, d0.loss_bbox: 0.7611, d1.loss_cls: 0.4031, d1.loss_bbox: 0.6743, d2.loss_cls: 0.3877, d2.loss_bbox: 0.6551, d3.loss_cls: 0.3748, d3.loss_bbox: 0.6466, d4.loss_cls: 0.3675, d4.loss_bbox: 0.6414, aux_task0.loss_heatmap: 0.5075, aux_task0.loss_bbox: 0.1989, aux_task1.loss_heatmap: 0.7150, aux_task1.loss_bbox: 0.2667, aux_task2.loss_heatmap: 0.7079, aux_task2.loss_bbox: 0.2876, aux_task3.loss_heatmap: 0.5928, aux_task3.loss_bbox: 0.2621, aux_task4.loss_heatmap: 0.3698, aux_task4.loss_bbox: 0.2207, aux_task5.loss_heatmap: 0.3909, aux_task5.loss_bbox: 0.2784, loss: 11.1338, grad_norm: 78.8267
2025-04-05 20:54:12,311 - mmdet - INFO - Epoch [4][4050/61790]	lr: 2.428e-05, eta: 5 days, 15:44:33, time: 0.465, data_time: 0.006, memory: 6545, loss_cls: 0.3660, loss_bbox: 0.6260, d0.loss_cls: 0.4243, d0.loss_bbox: 0.7628, d1.loss_cls: 0.4044, d1.loss_bbox: 0.6672, d2.loss_cls: 0.3839, d2.loss_bbox: 0.6473, d3.loss_cls: 0.3726, d3.loss_bbox: 0.6373, d4.loss_cls: 0.3662, d4.loss_bbox: 0.6331, aux_task0.loss_heatmap: 0.4917, aux_task0.loss_bbox: 0.1951, aux_task1.loss_heatmap: 0.7166, aux_task1.loss_bbox: 0.2700, aux_task2.loss_heatmap: 0.6784, aux_task2.loss_bbox: 0.2825, aux_task3.loss_heatmap: 0.5650, aux_task3.loss_bbox: 0.2791, aux_task4.loss_heatmap: 0.3801, aux_task4.loss_bbox: 0.2174, aux_task5.loss_heatmap: 0.4012, aux_task5.loss_bbox: 0.2744, loss: 11.0428, grad_norm: 78.0552
2025-04-05 20:54:36,005 - mmdet - INFO - Epoch [4][4100/61790]	lr: 2.429e-05, eta: 5 days, 15:45:38, time: 0.474, data_time: 0.007, memory: 6545, loss_cls: 0.3841, loss_bbox: 0.6468, d0.loss_cls: 0.4399, d0.loss_bbox: 0.7764, d1.loss_cls: 0.4184, d1.loss_bbox: 0.6853, d2.loss_cls: 0.3987, d2.loss_bbox: 0.6696, d3.loss_cls: 0.3908, d3.loss_bbox: 0.6589, d4.loss_cls: 0.3843, d4.loss_bbox: 0.6531, aux_task0.loss_heatmap: 0.4899, aux_task0.loss_bbox: 0.1878, aux_task1.loss_heatmap: 0.7221, aux_task1.loss_bbox: 0.2781, aux_task2.loss_heatmap: 0.7264, aux_task2.loss_bbox: 0.2891, aux_task3.loss_heatmap: 0.4942, aux_task3.loss_bbox: 0.2786, aux_task4.loss_heatmap: 0.3936, aux_task4.loss_bbox: 0.2214, aux_task5.loss_heatmap: 0.4313, aux_task5.loss_bbox: 0.2763, loss: 11.2953, grad_norm: 82.0125
2025-04-05 20:54:59,585 - mmdet - INFO - Epoch [4][4150/61790]	lr: 2.430e-05, eta: 5 days, 15:46:11, time: 0.472, data_time: 0.007, memory: 6545, loss_cls: 0.3549, loss_bbox: 0.6276, d0.loss_cls: 0.4072, d0.loss_bbox: 0.7512, d1.loss_cls: 0.3852, d1.loss_bbox: 0.6626, d2.loss_cls: 0.3678, d2.loss_bbox: 0.6467, d3.loss_cls: 0.3610, d3.loss_bbox: 0.6386, d4.loss_cls: 0.3554, d4.loss_bbox: 0.6337, aux_task0.loss_heatmap: 0.5019, aux_task0.loss_bbox: 0.1915, aux_task1.loss_heatmap: 0.6709, aux_task1.loss_bbox: 0.2765, aux_task2.loss_heatmap: 0.6853, aux_task2.loss_bbox: 0.2841, aux_task3.loss_heatmap: 0.4683, aux_task3.loss_bbox: 0.2692, aux_task4.loss_heatmap: 0.3698, aux_task4.loss_bbox: 0.2227, aux_task5.loss_heatmap: 0.3756, aux_task5.loss_bbox: 0.2762, loss: 10.7838, grad_norm: 79.0751
2025-04-05 20:55:23,069 - mmdet - INFO - Epoch [4][4200/61790]	lr: 2.431e-05, eta: 5 days, 15:46:19, time: 0.470, data_time: 0.007, memory: 6545, loss_cls: 0.3755, loss_bbox: 0.6436, d0.loss_cls: 0.4312, d0.loss_bbox: 0.7717, d1.loss_cls: 0.4070, d1.loss_bbox: 0.6831, d2.loss_cls: 0.3898, d2.loss_bbox: 0.6632, d3.loss_cls: 0.3802, d3.loss_bbox: 0.6534, d4.loss_cls: 0.3751, d4.loss_bbox: 0.6482, aux_task0.loss_heatmap: 0.4951, aux_task0.loss_bbox: 0.2041, aux_task1.loss_heatmap: 0.7231, aux_task1.loss_bbox: 0.2765, aux_task2.loss_heatmap: 0.6778, aux_task2.loss_bbox: 0.2756, aux_task3.loss_heatmap: 0.4781, aux_task3.loss_bbox: 0.2548, aux_task4.loss_heatmap: 0.3895, aux_task4.loss_bbox: 0.2222, aux_task5.loss_heatmap: 0.4262, aux_task5.loss_bbox: 0.2727, loss: 11.1177, grad_norm: 81.3692
2025-04-05 20:55:46,413 - mmdet - INFO - Epoch [4][4250/61790]	lr: 2.432e-05, eta: 5 days, 15:45:52, time: 0.467, data_time: 0.006, memory: 6545, loss_cls: 0.3863, loss_bbox: 0.6537, d0.loss_cls: 0.4411, d0.loss_bbox: 0.7772, d1.loss_cls: 0.4223, d1.loss_bbox: 0.6893, d2.loss_cls: 0.4060, d2.loss_bbox: 0.6712, d3.loss_cls: 0.3935, d3.loss_bbox: 0.6608, d4.loss_cls: 0.3883, d4.loss_bbox: 0.6577, aux_task0.loss_heatmap: 0.5696, aux_task0.loss_bbox: 0.2034, aux_task1.loss_heatmap: 0.6776, aux_task1.loss_bbox: 0.2646, aux_task2.loss_heatmap: 0.7306, aux_task2.loss_bbox: 0.2812, aux_task3.loss_heatmap: 0.5947, aux_task3.loss_bbox: 0.2711, aux_task4.loss_heatmap: 0.3752, aux_task4.loss_bbox: 0.2185, aux_task5.loss_heatmap: 0.4052, aux_task5.loss_bbox: 0.2709, loss: 11.4102, grad_norm: 79.4652
2025-04-05 20:56:09,682 - mmdet - INFO - Epoch [4][4300/61790]	lr: 2.433e-05, eta: 5 days, 15:45:07, time: 0.465, data_time: 0.006, memory: 6545, loss_cls: 0.3679, loss_bbox: 0.6445, d0.loss_cls: 0.4219, d0.loss_bbox: 0.7710, d1.loss_cls: 0.4060, d1.loss_bbox: 0.6816, d2.loss_cls: 0.3846, d2.loss_bbox: 0.6643, d3.loss_cls: 0.3746, d3.loss_bbox: 0.6546, d4.loss_cls: 0.3683, d4.loss_bbox: 0.6505, aux_task0.loss_heatmap: 0.4941, aux_task0.loss_bbox: 0.1962, aux_task1.loss_heatmap: 0.6913, aux_task1.loss_bbox: 0.2678, aux_task2.loss_heatmap: 0.6961, aux_task2.loss_bbox: 0.2860, aux_task3.loss_heatmap: 0.5711, aux_task3.loss_bbox: 0.2683, aux_task4.loss_heatmap: 0.4285, aux_task4.loss_bbox: 0.2292, aux_task5.loss_heatmap: 0.3938, aux_task5.loss_bbox: 0.2680, loss: 11.1799, grad_norm: 83.2992
2025-04-05 20:56:33,054 - mmdet - INFO - Epoch [4][4350/61790]	lr: 2.433e-05, eta: 5 days, 15:44:47, time: 0.467, data_time: 0.006, memory: 6545, loss_cls: 0.3741, loss_bbox: 0.6428, d0.loss_cls: 0.4309, d0.loss_bbox: 0.7685, d1.loss_cls: 0.4082, d1.loss_bbox: 0.6829, d2.loss_cls: 0.3896, d2.loss_bbox: 0.6645, d3.loss_cls: 0.3815, d3.loss_bbox: 0.6537, d4.loss_cls: 0.3761, d4.loss_bbox: 0.6483, aux_task0.loss_heatmap: 0.4992, aux_task0.loss_bbox: 0.1989, aux_task1.loss_heatmap: 0.6983, aux_task1.loss_bbox: 0.2655, aux_task2.loss_heatmap: 0.7055, aux_task2.loss_bbox: 0.2921, aux_task3.loss_heatmap: 0.5203, aux_task3.loss_bbox: 0.2670, aux_task4.loss_heatmap: 0.3815, aux_task4.loss_bbox: 0.2249, aux_task5.loss_heatmap: 0.3963, aux_task5.loss_bbox: 0.2646, loss: 11.1352, grad_norm: 77.0069
2025-04-05 20:56:56,247 - mmdet - INFO - Epoch [4][4400/61790]	lr: 2.434e-05, eta: 5 days, 15:43:44, time: 0.464, data_time: 0.006, memory: 6545, loss_cls: 0.3667, loss_bbox: 0.6311, d0.loss_cls: 0.4233, d0.loss_bbox: 0.7571, d1.loss_cls: 0.4028, d1.loss_bbox: 0.6686, d2.loss_cls: 0.3852, d2.loss_bbox: 0.6512, d3.loss_cls: 0.3734, d3.loss_bbox: 0.6427, d4.loss_cls: 0.3675, d4.loss_bbox: 0.6358, aux_task0.loss_heatmap: 0.5113, aux_task0.loss_bbox: 0.1980, aux_task1.loss_heatmap: 0.6735, aux_task1.loss_bbox: 0.2638, aux_task2.loss_heatmap: 0.6446, aux_task2.loss_bbox: 0.2842, aux_task3.loss_heatmap: 0.5819, aux_task3.loss_bbox: 0.2662, aux_task4.loss_heatmap: 0.3702, aux_task4.loss_bbox: 0.2239, aux_task5.loss_heatmap: 0.4300, aux_task5.loss_bbox: 0.2738, loss: 11.0266, grad_norm: 81.4070
2025-04-05 20:57:19,738 - mmdet - INFO - Epoch [4][4450/61790]	lr: 2.435e-05, eta: 5 days, 15:43:53, time: 0.470, data_time: 0.006, memory: 6545, loss_cls: 0.3740, loss_bbox: 0.6507, d0.loss_cls: 0.4297, d0.loss_bbox: 0.7759, d1.loss_cls: 0.4097, d1.loss_bbox: 0.6895, d2.loss_cls: 0.3911, d2.loss_bbox: 0.6710, d3.loss_cls: 0.3770, d3.loss_bbox: 0.6627, d4.loss_cls: 0.3722, d4.loss_bbox: 0.6564, aux_task0.loss_heatmap: 0.5297, aux_task0.loss_bbox: 0.2044, aux_task1.loss_heatmap: 0.7138, aux_task1.loss_bbox: 0.2775, aux_task2.loss_heatmap: 0.6129, aux_task2.loss_bbox: 0.2842, aux_task3.loss_heatmap: 0.5385, aux_task3.loss_bbox: 0.2736, aux_task4.loss_heatmap: 0.3841, aux_task4.loss_bbox: 0.2213, aux_task5.loss_heatmap: 0.4287, aux_task5.loss_bbox: 0.2773, loss: 11.2059, grad_norm: 80.8330
2025-04-05 20:57:43,032 - mmdet - INFO - Epoch [4][4500/61790]	lr: 2.436e-05, eta: 5 days, 15:43:14, time: 0.466, data_time: 0.006, memory: 6545, loss_cls: 0.3587, loss_bbox: 0.6275, d0.loss_cls: 0.4106, d0.loss_bbox: 0.7584, d1.loss_cls: 0.3920, d1.loss_bbox: 0.6699, d2.loss_cls: 0.3764, d2.loss_bbox: 0.6518, d3.loss_cls: 0.3657, d3.loss_bbox: 0.6414, d4.loss_cls: 0.3581, d4.loss_bbox: 0.6352, aux_task0.loss_heatmap: 0.4738, aux_task0.loss_bbox: 0.1985, aux_task1.loss_heatmap: 0.7127, aux_task1.loss_bbox: 0.2616, aux_task2.loss_heatmap: 0.7020, aux_task2.loss_bbox: 0.2885, aux_task3.loss_heatmap: 0.5116, aux_task3.loss_bbox: 0.2628, aux_task4.loss_heatmap: 0.3902, aux_task4.loss_bbox: 0.2253, aux_task5.loss_heatmap: 0.3911, aux_task5.loss_bbox: 0.2753, loss: 10.9394, grad_norm: 74.8421
2025-04-05 20:58:06,379 - mmdet - INFO - Epoch [4][4550/61790]	lr: 2.437e-05, eta: 5 days, 15:42:49, time: 0.467, data_time: 0.009, memory: 6545, loss_cls: 0.3655, loss_bbox: 0.6448, d0.loss_cls: 0.4187, d0.loss_bbox: 0.7705, d1.loss_cls: 0.3984, d1.loss_bbox: 0.6836, d2.loss_cls: 0.3816, d2.loss_bbox: 0.6663, d3.loss_cls: 0.3723, d3.loss_bbox: 0.6555, d4.loss_cls: 0.3659, d4.loss_bbox: 0.6521, aux_task0.loss_heatmap: 0.4999, aux_task0.loss_bbox: 0.1951, aux_task1.loss_heatmap: 0.7168, aux_task1.loss_bbox: 0.2680, aux_task2.loss_heatmap: 0.7032, aux_task2.loss_bbox: 0.2929, aux_task3.loss_heatmap: 0.5023, aux_task3.loss_bbox: 0.2639, aux_task4.loss_heatmap: 0.3913, aux_task4.loss_bbox: 0.2313, aux_task5.loss_heatmap: 0.4416, aux_task5.loss_bbox: 0.2731, loss: 11.1549, grad_norm: 81.5619
2025-04-05 20:58:29,812 - mmdet - INFO - Epoch [4][4600/61790]	lr: 2.438e-05, eta: 5 days, 15:42:42, time: 0.469, data_time: 0.006, memory: 6545, loss_cls: 0.3705, loss_bbox: 0.6523, d0.loss_cls: 0.4258, d0.loss_bbox: 0.7794, d1.loss_cls: 0.4028, d1.loss_bbox: 0.6897, d2.loss_cls: 0.3898, d2.loss_bbox: 0.6711, d3.loss_cls: 0.3799, d3.loss_bbox: 0.6620, d4.loss_cls: 0.3728, d4.loss_bbox: 0.6570, aux_task0.loss_heatmap: 0.4953, aux_task0.loss_bbox: 0.1911, aux_task1.loss_heatmap: 0.6920, aux_task1.loss_bbox: 0.2677, aux_task2.loss_heatmap: 0.7070, aux_task2.loss_bbox: 0.3018, aux_task3.loss_heatmap: 0.5754, aux_task3.loss_bbox: 0.2693, aux_task4.loss_heatmap: 0.4086, aux_task4.loss_bbox: 0.2282, aux_task5.loss_heatmap: 0.4017, aux_task5.loss_bbox: 0.2766, loss: 11.2676, grad_norm: 83.2361
2025-04-05 20:58:53,429 - mmdet - INFO - Epoch [4][4650/61790]	lr: 2.438e-05, eta: 5 days, 15:43:17, time: 0.472, data_time: 0.007, memory: 6545, loss_cls: 0.3787, loss_bbox: 0.6602, d0.loss_cls: 0.4309, d0.loss_bbox: 0.7907, d1.loss_cls: 0.4080, d1.loss_bbox: 0.7017, d2.loss_cls: 0.3948, d2.loss_bbox: 0.6818, d3.loss_cls: 0.3848, d3.loss_bbox: 0.6720, d4.loss_cls: 0.3788, d4.loss_bbox: 0.6659, aux_task0.loss_heatmap: 0.5323, aux_task0.loss_bbox: 0.1982, aux_task1.loss_heatmap: 0.6820, aux_task1.loss_bbox: 0.2806, aux_task2.loss_heatmap: 0.7332, aux_task2.loss_bbox: 0.2884, aux_task3.loss_heatmap: 0.5035, aux_task3.loss_bbox: 0.2795, aux_task4.loss_heatmap: 0.3889, aux_task4.loss_bbox: 0.2237, aux_task5.loss_heatmap: 0.4182, aux_task5.loss_bbox: 0.2714, loss: 11.3482, grad_norm: 82.2623
2025-04-05 20:59:16,954 - mmdet - INFO - Epoch [4][4700/61790]	lr: 2.439e-05, eta: 5 days, 15:43:31, time: 0.470, data_time: 0.006, memory: 6545, loss_cls: 0.3699, loss_bbox: 0.6415, d0.loss_cls: 0.4177, d0.loss_bbox: 0.7714, d1.loss_cls: 0.3985, d1.loss_bbox: 0.6846, d2.loss_cls: 0.3837, d2.loss_bbox: 0.6656, d3.loss_cls: 0.3757, d3.loss_bbox: 0.6549, d4.loss_cls: 0.3713, d4.loss_bbox: 0.6483, aux_task0.loss_heatmap: 0.5075, aux_task0.loss_bbox: 0.2099, aux_task1.loss_heatmap: 0.7104, aux_task1.loss_bbox: 0.2742, aux_task2.loss_heatmap: 0.6879, aux_task2.loss_bbox: 0.2828, aux_task3.loss_heatmap: 0.5332, aux_task3.loss_bbox: 0.2666, aux_task4.loss_heatmap: 0.3961, aux_task4.loss_bbox: 0.2228, aux_task5.loss_heatmap: 0.3903, aux_task5.loss_bbox: 0.2731, loss: 11.1379, grad_norm: 79.9243
2025-04-05 20:59:40,239 - mmdet - INFO - Epoch [4][4750/61790]	lr: 2.440e-05, eta: 5 days, 15:42:50, time: 0.466, data_time: 0.006, memory: 6545, loss_cls: 0.3580, loss_bbox: 0.6338, d0.loss_cls: 0.4096, d0.loss_bbox: 0.7629, d1.loss_cls: 0.3876, d1.loss_bbox: 0.6730, d2.loss_cls: 0.3713, d2.loss_bbox: 0.6537, d3.loss_cls: 0.3630, d3.loss_bbox: 0.6431, d4.loss_cls: 0.3588, d4.loss_bbox: 0.6398, aux_task0.loss_heatmap: 0.4780, aux_task0.loss_bbox: 0.1949, aux_task1.loss_heatmap: 0.7042, aux_task1.loss_bbox: 0.2669, aux_task2.loss_heatmap: 0.7110, aux_task2.loss_bbox: 0.2983, aux_task3.loss_heatmap: 0.4832, aux_task3.loss_bbox: 0.2596, aux_task4.loss_heatmap: 0.3833, aux_task4.loss_bbox: 0.2179, aux_task5.loss_heatmap: 0.3820, aux_task5.loss_bbox: 0.2730, loss: 10.9068, grad_norm: 82.4113
2025-04-05 21:00:03,262 - mmdet - INFO - Epoch [4][4800/61790]	lr: 2.441e-05, eta: 5 days, 15:41:13, time: 0.460, data_time: 0.007, memory: 6545, loss_cls: 0.3677, loss_bbox: 0.6383, d0.loss_cls: 0.4244, d0.loss_bbox: 0.7690, d1.loss_cls: 0.4048, d1.loss_bbox: 0.6796, d2.loss_cls: 0.3859, d2.loss_bbox: 0.6626, d3.loss_cls: 0.3760, d3.loss_bbox: 0.6519, d4.loss_cls: 0.3664, d4.loss_bbox: 0.6469, aux_task0.loss_heatmap: 0.5184, aux_task0.loss_bbox: 0.2046, aux_task1.loss_heatmap: 0.6911, aux_task1.loss_bbox: 0.2651, aux_task2.loss_heatmap: 0.7315, aux_task2.loss_bbox: 0.2923, aux_task3.loss_heatmap: 0.4965, aux_task3.loss_bbox: 0.2494, aux_task4.loss_heatmap: 0.3938, aux_task4.loss_bbox: 0.2195, aux_task5.loss_heatmap: 0.3934, aux_task5.loss_bbox: 0.2716, loss: 11.1007, grad_norm: 78.0350
2025-04-05 21:00:26,538 - mmdet - INFO - Epoch [4][4850/61790]	lr: 2.442e-05, eta: 5 days, 15:40:32, time: 0.466, data_time: 0.007, memory: 6545, loss_cls: 0.3718, loss_bbox: 0.6395, d0.loss_cls: 0.4248, d0.loss_bbox: 0.7622, d1.loss_cls: 0.4049, d1.loss_bbox: 0.6803, d2.loss_cls: 0.3866, d2.loss_bbox: 0.6610, d3.loss_cls: 0.3770, d3.loss_bbox: 0.6518, d4.loss_cls: 0.3709, d4.loss_bbox: 0.6461, aux_task0.loss_heatmap: 0.4944, aux_task0.loss_bbox: 0.1931, aux_task1.loss_heatmap: 0.6991, aux_task1.loss_bbox: 0.2698, aux_task2.loss_heatmap: 0.7199, aux_task2.loss_bbox: 0.2919, aux_task3.loss_heatmap: 0.5040, aux_task3.loss_bbox: 0.2690, aux_task4.loss_heatmap: 0.3844, aux_task4.loss_bbox: 0.2176, aux_task5.loss_heatmap: 0.4292, aux_task5.loss_bbox: 0.2689, loss: 11.1183, grad_norm: 83.6519
2025-04-05 21:00:49,674 - mmdet - INFO - Epoch [4][4900/61790]	lr: 2.443e-05, eta: 5 days, 15:39:21, time: 0.463, data_time: 0.006, memory: 6545, loss_cls: 0.3538, loss_bbox: 0.6213, d0.loss_cls: 0.4092, d0.loss_bbox: 0.7528, d1.loss_cls: 0.3866, d1.loss_bbox: 0.6664, d2.loss_cls: 0.3711, d2.loss_bbox: 0.6465, d3.loss_cls: 0.3604, d3.loss_bbox: 0.6346, d4.loss_cls: 0.3547, d4.loss_bbox: 0.6284, aux_task0.loss_heatmap: 0.4906, aux_task0.loss_bbox: 0.1910, aux_task1.loss_heatmap: 0.6522, aux_task1.loss_bbox: 0.2611, aux_task2.loss_heatmap: 0.6528, aux_task2.loss_bbox: 0.2892, aux_task3.loss_heatmap: 0.5024, aux_task3.loss_bbox: 0.2635, aux_task4.loss_heatmap: 0.4039, aux_task4.loss_bbox: 0.2172, aux_task5.loss_heatmap: 0.3997, aux_task5.loss_bbox: 0.2729, loss: 10.7823, grad_norm: 76.9637
2025-04-05 21:01:13,021 - mmdet - INFO - Epoch [4][4950/61790]	lr: 2.443e-05, eta: 5 days, 15:38:56, time: 0.467, data_time: 0.007, memory: 6545, loss_cls: 0.3710, loss_bbox: 0.6224, d0.loss_cls: 0.4267, d0.loss_bbox: 0.7548, d1.loss_cls: 0.4030, d1.loss_bbox: 0.6635, d2.loss_cls: 0.3860, d2.loss_bbox: 0.6454, d3.loss_cls: 0.3776, d3.loss_bbox: 0.6359, d4.loss_cls: 0.3721, d4.loss_bbox: 0.6280, aux_task0.loss_heatmap: 0.4985, aux_task0.loss_bbox: 0.1881, aux_task1.loss_heatmap: 0.6798, aux_task1.loss_bbox: 0.2585, aux_task2.loss_heatmap: 0.7266, aux_task2.loss_bbox: 0.3026, aux_task3.loss_heatmap: 0.4800, aux_task3.loss_bbox: 0.2414, aux_task4.loss_heatmap: 0.4034, aux_task4.loss_bbox: 0.2269, aux_task5.loss_heatmap: 0.4323, aux_task5.loss_bbox: 0.2752, loss: 10.9996, grad_norm: 80.9303
2025-04-05 21:01:36,504 - mmdet - INFO - Epoch [4][5000/61790]	lr: 2.444e-05, eta: 5 days, 15:39:00, time: 0.470, data_time: 0.009, memory: 6545, loss_cls: 0.3690, loss_bbox: 0.6446, d0.loss_cls: 0.4265, d0.loss_bbox: 0.7760, d1.loss_cls: 0.4056, d1.loss_bbox: 0.6844, d2.loss_cls: 0.3854, d2.loss_bbox: 0.6666, d3.loss_cls: 0.3741, d3.loss_bbox: 0.6576, d4.loss_cls: 0.3702, d4.loss_bbox: 0.6524, aux_task0.loss_heatmap: 0.5128, aux_task0.loss_bbox: 0.2040, aux_task1.loss_heatmap: 0.7017, aux_task1.loss_bbox: 0.2734, aux_task2.loss_heatmap: 0.7174, aux_task2.loss_bbox: 0.2898, aux_task3.loss_heatmap: 0.4992, aux_task3.loss_bbox: 0.2627, aux_task4.loss_heatmap: 0.4069, aux_task4.loss_bbox: 0.2279, aux_task5.loss_heatmap: 0.3963, aux_task5.loss_bbox: 0.2682, loss: 11.1725, grad_norm: 81.9426
2025-04-05 21:02:00,170 - mmdet - INFO - Epoch [4][5050/61790]	lr: 2.445e-05, eta: 5 days, 15:39:41, time: 0.473, data_time: 0.006, memory: 6545, loss_cls: 0.3762, loss_bbox: 0.6448, d0.loss_cls: 0.4303, d0.loss_bbox: 0.7744, d1.loss_cls: 0.4096, d1.loss_bbox: 0.6845, d2.loss_cls: 0.3923, d2.loss_bbox: 0.6683, d3.loss_cls: 0.3843, d3.loss_bbox: 0.6566, d4.loss_cls: 0.3771, d4.loss_bbox: 0.6507, aux_task0.loss_heatmap: 0.4949, aux_task0.loss_bbox: 0.2017, aux_task1.loss_heatmap: 0.7119, aux_task1.loss_bbox: 0.2740, aux_task2.loss_heatmap: 0.7078, aux_task2.loss_bbox: 0.2814, aux_task3.loss_heatmap: 0.5481, aux_task3.loss_bbox: 0.2672, aux_task4.loss_heatmap: 0.3870, aux_task4.loss_bbox: 0.2226, aux_task5.loss_heatmap: 0.4272, aux_task5.loss_bbox: 0.2686, loss: 11.2415, grad_norm: 79.5759
2025-04-05 21:02:23,327 - mmdet - INFO - Epoch [4][5100/61790]	lr: 2.446e-05, eta: 5 days, 15:38:36, time: 0.463, data_time: 0.006, memory: 6545, loss_cls: 0.3571, loss_bbox: 0.6396, d0.loss_cls: 0.4082, d0.loss_bbox: 0.7713, d1.loss_cls: 0.3904, d1.loss_bbox: 0.6757, d2.loss_cls: 0.3730, d2.loss_bbox: 0.6594, d3.loss_cls: 0.3632, d3.loss_bbox: 0.6497, d4.loss_cls: 0.3594, d4.loss_bbox: 0.6447, aux_task0.loss_heatmap: 0.4875, aux_task0.loss_bbox: 0.2000, aux_task1.loss_heatmap: 0.6942, aux_task1.loss_bbox: 0.2732, aux_task2.loss_heatmap: 0.6740, aux_task2.loss_bbox: 0.2974, aux_task3.loss_heatmap: 0.5228, aux_task3.loss_bbox: 0.2643, aux_task4.loss_heatmap: 0.3933, aux_task4.loss_bbox: 0.2259, aux_task5.loss_heatmap: 0.4039, aux_task5.loss_bbox: 0.2734, loss: 11.0013, grad_norm: 77.4922
2025-04-05 21:02:46,334 - mmdet - INFO - Epoch [4][5150/61790]	lr: 2.447e-05, eta: 5 days, 15:37:01, time: 0.460, data_time: 0.006, memory: 6545, loss_cls: 0.3669, loss_bbox: 0.6242, d0.loss_cls: 0.4175, d0.loss_bbox: 0.7561, d1.loss_cls: 0.3958, d1.loss_bbox: 0.6647, d2.loss_cls: 0.3817, d2.loss_bbox: 0.6473, d3.loss_cls: 0.3732, d3.loss_bbox: 0.6356, d4.loss_cls: 0.3670, d4.loss_bbox: 0.6321, aux_task0.loss_heatmap: 0.4839, aux_task0.loss_bbox: 0.2034, aux_task1.loss_heatmap: 0.6746, aux_task1.loss_bbox: 0.2640, aux_task2.loss_heatmap: 0.6837, aux_task2.loss_bbox: 0.2854, aux_task3.loss_heatmap: 0.4884, aux_task3.loss_bbox: 0.2687, aux_task4.loss_heatmap: 0.3647, aux_task4.loss_bbox: 0.2237, aux_task5.loss_heatmap: 0.3904, aux_task5.loss_bbox: 0.2783, loss: 10.8710, grad_norm: 83.0714
2025-04-05 21:03:09,700 - mmdet - INFO - Epoch [4][5200/61790]	lr: 2.448e-05, eta: 5 days, 15:36:41, time: 0.467, data_time: 0.006, memory: 6545, loss_cls: 0.3702, loss_bbox: 0.6320, d0.loss_cls: 0.4198, d0.loss_bbox: 0.7576, d1.loss_cls: 0.4000, d1.loss_bbox: 0.6718, d2.loss_cls: 0.3850, d2.loss_bbox: 0.6531, d3.loss_cls: 0.3771, d3.loss_bbox: 0.6426, d4.loss_cls: 0.3692, d4.loss_bbox: 0.6390, aux_task0.loss_heatmap: 0.4590, aux_task0.loss_bbox: 0.1904, aux_task1.loss_heatmap: 0.6993, aux_task1.loss_bbox: 0.2712, aux_task2.loss_heatmap: 0.6764, aux_task2.loss_bbox: 0.2876, aux_task3.loss_heatmap: 0.5451, aux_task3.loss_bbox: 0.2965, aux_task4.loss_heatmap: 0.4046, aux_task4.loss_bbox: 0.2265, aux_task5.loss_heatmap: 0.4021, aux_task5.loss_bbox: 0.2722, loss: 11.0484, grad_norm: 79.2827
2025-04-05 21:03:32,676 - mmdet - INFO - Epoch [4][5250/61790]	lr: 2.448e-05, eta: 5 days, 15:35:02, time: 0.460, data_time: 0.006, memory: 6545, loss_cls: 0.3644, loss_bbox: 0.6321, d0.loss_cls: 0.4215, d0.loss_bbox: 0.7581, d1.loss_cls: 0.3972, d1.loss_bbox: 0.6721, d2.loss_cls: 0.3829, d2.loss_bbox: 0.6513, d3.loss_cls: 0.3712, d3.loss_bbox: 0.6423, d4.loss_cls: 0.3650, d4.loss_bbox: 0.6381, aux_task0.loss_heatmap: 0.4492, aux_task0.loss_bbox: 0.1933, aux_task1.loss_heatmap: 0.6853, aux_task1.loss_bbox: 0.2696, aux_task2.loss_heatmap: 0.6784, aux_task2.loss_bbox: 0.2843, aux_task3.loss_heatmap: 0.5797, aux_task3.loss_bbox: 0.2730, aux_task4.loss_heatmap: 0.3817, aux_task4.loss_bbox: 0.2252, aux_task5.loss_heatmap: 0.3844, aux_task5.loss_bbox: 0.2822, loss: 10.9825, grad_norm: 81.6541
2025-04-05 21:03:55,779 - mmdet - INFO - Epoch [4][5300/61790]	lr: 2.449e-05, eta: 5 days, 15:33:50, time: 0.462, data_time: 0.007, memory: 6545, loss_cls: 0.3556, loss_bbox: 0.6371, d0.loss_cls: 0.4101, d0.loss_bbox: 0.7620, d1.loss_cls: 0.3886, d1.loss_bbox: 0.6766, d2.loss_cls: 0.3727, d2.loss_bbox: 0.6582, d3.loss_cls: 0.3621, d3.loss_bbox: 0.6497, d4.loss_cls: 0.3554, d4.loss_bbox: 0.6452, aux_task0.loss_heatmap: 0.4713, aux_task0.loss_bbox: 0.1889, aux_task1.loss_heatmap: 0.6722, aux_task1.loss_bbox: 0.2677, aux_task2.loss_heatmap: 0.6281, aux_task2.loss_bbox: 0.2768, aux_task3.loss_heatmap: 0.4842, aux_task3.loss_bbox: 0.2693, aux_task4.loss_heatmap: 0.4001, aux_task4.loss_bbox: 0.2232, aux_task5.loss_heatmap: 0.3844, aux_task5.loss_bbox: 0.2699, loss: 10.8095, grad_norm: 76.6797
2025-04-05 21:04:19,367 - mmdet - INFO - Epoch [4][5350/61790]	lr: 2.450e-05, eta: 5 days, 15:34:13, time: 0.472, data_time: 0.006, memory: 6545, loss_cls: 0.3549, loss_bbox: 0.6444, d0.loss_cls: 0.4150, d0.loss_bbox: 0.7711, d1.loss_cls: 0.3897, d1.loss_bbox: 0.6852, d2.loss_cls: 0.3729, d2.loss_bbox: 0.6681, d3.loss_cls: 0.3616, d3.loss_bbox: 0.6575, d4.loss_cls: 0.3561, d4.loss_bbox: 0.6518, aux_task0.loss_heatmap: 0.4889, aux_task0.loss_bbox: 0.1970, aux_task1.loss_heatmap: 0.7100, aux_task1.loss_bbox: 0.2731, aux_task2.loss_heatmap: 0.6709, aux_task2.loss_bbox: 0.2892, aux_task3.loss_heatmap: 0.4294, aux_task3.loss_bbox: 0.2625, aux_task4.loss_heatmap: 0.3808, aux_task4.loss_bbox: 0.2234, aux_task5.loss_heatmap: 0.4147, aux_task5.loss_bbox: 0.2815, loss: 10.9496, grad_norm: 77.6187
2025-04-05 21:04:42,584 - mmdet - INFO - Epoch [4][5400/61790]	lr: 2.451e-05, eta: 5 days, 15:33:24, time: 0.464, data_time: 0.007, memory: 6601, loss_cls: 0.3673, loss_bbox: 0.6321, d0.loss_cls: 0.4224, d0.loss_bbox: 0.7546, d1.loss_cls: 0.4024, d1.loss_bbox: 0.6709, d2.loss_cls: 0.3834, d2.loss_bbox: 0.6527, d3.loss_cls: 0.3737, d3.loss_bbox: 0.6444, d4.loss_cls: 0.3675, d4.loss_bbox: 0.6390, aux_task0.loss_heatmap: 0.4800, aux_task0.loss_bbox: 0.1900, aux_task1.loss_heatmap: 0.6926, aux_task1.loss_bbox: 0.2644, aux_task2.loss_heatmap: 0.7196, aux_task2.loss_bbox: 0.2909, aux_task3.loss_heatmap: 0.4770, aux_task3.loss_bbox: 0.2441, aux_task4.loss_heatmap: 0.3834, aux_task4.loss_bbox: 0.2296, aux_task5.loss_heatmap: 0.3917, aux_task5.loss_bbox: 0.2716, loss: 10.9453, grad_norm: 82.2513
2025-04-05 21:05:05,811 - mmdet - INFO - Epoch [4][5450/61790]	lr: 2.452e-05, eta: 5 days, 15:32:38, time: 0.465, data_time: 0.006, memory: 6601, loss_cls: 0.3729, loss_bbox: 0.6308, d0.loss_cls: 0.4334, d0.loss_bbox: 0.7650, d1.loss_cls: 0.4080, d1.loss_bbox: 0.6740, d2.loss_cls: 0.3892, d2.loss_bbox: 0.6565, d3.loss_cls: 0.3785, d3.loss_bbox: 0.6466, d4.loss_cls: 0.3740, d4.loss_bbox: 0.6373, aux_task0.loss_heatmap: 0.4998, aux_task0.loss_bbox: 0.2024, aux_task1.loss_heatmap: 0.7010, aux_task1.loss_bbox: 0.2625, aux_task2.loss_heatmap: 0.6976, aux_task2.loss_bbox: 0.2963, aux_task3.loss_heatmap: 0.5469, aux_task3.loss_bbox: 0.2613, aux_task4.loss_heatmap: 0.3843, aux_task4.loss_bbox: 0.2225, aux_task5.loss_heatmap: 0.3969, aux_task5.loss_bbox: 0.2696, loss: 11.1074, grad_norm: 79.2049
2025-04-05 21:05:28,758 - mmdet - INFO - Epoch [4][5500/61790]	lr: 2.453e-05, eta: 5 days, 15:30:58, time: 0.459, data_time: 0.007, memory: 6601, loss_cls: 0.3732, loss_bbox: 0.6426, d0.loss_cls: 0.4318, d0.loss_bbox: 0.7645, d1.loss_cls: 0.4079, d1.loss_bbox: 0.6825, d2.loss_cls: 0.3887, d2.loss_bbox: 0.6647, d3.loss_cls: 0.3788, d3.loss_bbox: 0.6543, d4.loss_cls: 0.3738, d4.loss_bbox: 0.6495, aux_task0.loss_heatmap: 0.5310, aux_task0.loss_bbox: 0.2003, aux_task1.loss_heatmap: 0.6773, aux_task1.loss_bbox: 0.2668, aux_task2.loss_heatmap: 0.6855, aux_task2.loss_bbox: 0.2975, aux_task3.loss_heatmap: 0.5745, aux_task3.loss_bbox: 0.2774, aux_task4.loss_heatmap: 0.3759, aux_task4.loss_bbox: 0.2213, aux_task5.loss_heatmap: 0.4605, aux_task5.loss_bbox: 0.2826, loss: 11.2629, grad_norm: 82.2167
2025-04-05 21:05:51,917 - mmdet - INFO - Epoch [4][5550/61790]	lr: 2.453e-05, eta: 5 days, 15:30:00, time: 0.463, data_time: 0.006, memory: 6601, loss_cls: 0.3754, loss_bbox: 0.6230, d0.loss_cls: 0.4292, d0.loss_bbox: 0.7564, d1.loss_cls: 0.4086, d1.loss_bbox: 0.6693, d2.loss_cls: 0.3914, d2.loss_bbox: 0.6471, d3.loss_cls: 0.3821, d3.loss_bbox: 0.6361, d4.loss_cls: 0.3749, d4.loss_bbox: 0.6302, aux_task0.loss_heatmap: 0.4842, aux_task0.loss_bbox: 0.1921, aux_task1.loss_heatmap: 0.7055, aux_task1.loss_bbox: 0.2690, aux_task2.loss_heatmap: 0.6873, aux_task2.loss_bbox: 0.2814, aux_task3.loss_heatmap: 0.5670, aux_task3.loss_bbox: 0.2612, aux_task4.loss_heatmap: 0.3988, aux_task4.loss_bbox: 0.2282, aux_task5.loss_heatmap: 0.4099, aux_task5.loss_bbox: 0.2683, loss: 11.0767, grad_norm: 80.5496
2025-04-05 21:06:15,220 - mmdet - INFO - Epoch [4][5600/61790]	lr: 2.454e-05, eta: 5 days, 15:29:29, time: 0.466, data_time: 0.007, memory: 6601, loss_cls: 0.3653, loss_bbox: 0.6329, d0.loss_cls: 0.4255, d0.loss_bbox: 0.7609, d1.loss_cls: 0.4016, d1.loss_bbox: 0.6725, d2.loss_cls: 0.3810, d2.loss_bbox: 0.6526, d3.loss_cls: 0.3733, d3.loss_bbox: 0.6414, d4.loss_cls: 0.3665, d4.loss_bbox: 0.6379, aux_task0.loss_heatmap: 0.4988, aux_task0.loss_bbox: 0.1942, aux_task1.loss_heatmap: 0.6988, aux_task1.loss_bbox: 0.2759, aux_task2.loss_heatmap: 0.7101, aux_task2.loss_bbox: 0.2798, aux_task3.loss_heatmap: 0.4862, aux_task3.loss_bbox: 0.2613, aux_task4.loss_heatmap: 0.3727, aux_task4.loss_bbox: 0.2170, aux_task5.loss_heatmap: 0.3834, aux_task5.loss_bbox: 0.2750, loss: 10.9644, grad_norm: 80.3267
2025-04-05 21:06:38,315 - mmdet - INFO - Epoch [4][5650/61790]	lr: 2.455e-05, eta: 5 days, 15:28:20, time: 0.462, data_time: 0.009, memory: 6601, loss_cls: 0.3626, loss_bbox: 0.6322, d0.loss_cls: 0.4190, d0.loss_bbox: 0.7670, d1.loss_cls: 0.3993, d1.loss_bbox: 0.6765, d2.loss_cls: 0.3815, d2.loss_bbox: 0.6576, d3.loss_cls: 0.3694, d3.loss_bbox: 0.6478, d4.loss_cls: 0.3630, d4.loss_bbox: 0.6407, aux_task0.loss_heatmap: 0.5126, aux_task0.loss_bbox: 0.2028, aux_task1.loss_heatmap: 0.6816, aux_task1.loss_bbox: 0.2680, aux_task2.loss_heatmap: 0.6701, aux_task2.loss_bbox: 0.2714, aux_task3.loss_heatmap: 0.5028, aux_task3.loss_bbox: 0.2621, aux_task4.loss_heatmap: 0.3919, aux_task4.loss_bbox: 0.2234, aux_task5.loss_heatmap: 0.3884, aux_task5.loss_bbox: 0.2771, loss: 10.9685, grad_norm: 81.0414
2025-04-05 21:07:01,682 - mmdet - INFO - Epoch [4][5700/61790]	lr: 2.456e-05, eta: 5 days, 15:28:02, time: 0.467, data_time: 0.006, memory: 6601, loss_cls: 0.3851, loss_bbox: 0.6700, d0.loss_cls: 0.4426, d0.loss_bbox: 0.7937, d1.loss_cls: 0.4197, d1.loss_bbox: 0.7082, d2.loss_cls: 0.4034, d2.loss_bbox: 0.6891, d3.loss_cls: 0.3916, d3.loss_bbox: 0.6812, d4.loss_cls: 0.3854, d4.loss_bbox: 0.6762, aux_task0.loss_heatmap: 0.5508, aux_task0.loss_bbox: 0.2115, aux_task1.loss_heatmap: 0.7038, aux_task1.loss_bbox: 0.2711, aux_task2.loss_heatmap: 0.7427, aux_task2.loss_bbox: 0.2969, aux_task3.loss_heatmap: 0.5153, aux_task3.loss_bbox: 0.2779, aux_task4.loss_heatmap: 0.3880, aux_task4.loss_bbox: 0.2256, aux_task5.loss_heatmap: 0.4103, aux_task5.loss_bbox: 0.2734, loss: 11.5135, grad_norm: 80.6855
2025-04-05 21:07:25,288 - mmdet - INFO - Epoch [4][5750/61790]	lr: 2.457e-05, eta: 5 days, 15:28:27, time: 0.472, data_time: 0.006, memory: 6601, loss_cls: 0.3665, loss_bbox: 0.6433, d0.loss_cls: 0.4201, d0.loss_bbox: 0.7690, d1.loss_cls: 0.3999, d1.loss_bbox: 0.6829, d2.loss_cls: 0.3828, d2.loss_bbox: 0.6650, d3.loss_cls: 0.3730, d3.loss_bbox: 0.6546, d4.loss_cls: 0.3662, d4.loss_bbox: 0.6507, aux_task0.loss_heatmap: 0.5148, aux_task0.loss_bbox: 0.2014, aux_task1.loss_heatmap: 0.7333, aux_task1.loss_bbox: 0.2655, aux_task2.loss_heatmap: 0.6861, aux_task2.loss_bbox: 0.2805, aux_task3.loss_heatmap: 0.5176, aux_task3.loss_bbox: 0.2579, aux_task4.loss_heatmap: 0.3561, aux_task4.loss_bbox: 0.2196, aux_task5.loss_heatmap: 0.4049, aux_task5.loss_bbox: 0.2724, loss: 11.0842, grad_norm: 76.0900
2025-04-05 21:07:48,552 - mmdet - INFO - Epoch [4][5800/61790]	lr: 2.458e-05, eta: 5 days, 15:27:49, time: 0.465, data_time: 0.007, memory: 6601, loss_cls: 0.3610, loss_bbox: 0.6314, d0.loss_cls: 0.4142, d0.loss_bbox: 0.7608, d1.loss_cls: 0.3921, d1.loss_bbox: 0.6713, d2.loss_cls: 0.3730, d2.loss_bbox: 0.6527, d3.loss_cls: 0.3654, d3.loss_bbox: 0.6428, d4.loss_cls: 0.3613, d4.loss_bbox: 0.6386, aux_task0.loss_heatmap: 0.4627, aux_task0.loss_bbox: 0.1893, aux_task1.loss_heatmap: 0.6916, aux_task1.loss_bbox: 0.2685, aux_task2.loss_heatmap: 0.6913, aux_task2.loss_bbox: 0.2795, aux_task3.loss_heatmap: 0.5199, aux_task3.loss_bbox: 0.2758, aux_task4.loss_heatmap: 0.3797, aux_task4.loss_bbox: 0.2328, aux_task5.loss_heatmap: 0.3830, aux_task5.loss_bbox: 0.2757, loss: 10.9144, grad_norm: 83.6131
2025-04-05 21:08:12,070 - mmdet - INFO - Epoch [4][5850/61790]	lr: 2.459e-05, eta: 5 days, 15:27:57, time: 0.470, data_time: 0.006, memory: 6601, loss_cls: 0.3582, loss_bbox: 0.6358, d0.loss_cls: 0.4157, d0.loss_bbox: 0.7636, d1.loss_cls: 0.3913, d1.loss_bbox: 0.6787, d2.loss_cls: 0.3762, d2.loss_bbox: 0.6588, d3.loss_cls: 0.3659, d3.loss_bbox: 0.6501, d4.loss_cls: 0.3582, d4.loss_bbox: 0.6440, aux_task0.loss_heatmap: 0.5401, aux_task0.loss_bbox: 0.2055, aux_task1.loss_heatmap: 0.7121, aux_task1.loss_bbox: 0.2784, aux_task2.loss_heatmap: 0.6858, aux_task2.loss_bbox: 0.2783, aux_task3.loss_heatmap: 0.4822, aux_task3.loss_bbox: 0.2539, aux_task4.loss_heatmap: 0.3818, aux_task4.loss_bbox: 0.2226, aux_task5.loss_heatmap: 0.3890, aux_task5.loss_bbox: 0.2818, loss: 11.0078, grad_norm: 79.0909
2025-04-05 21:08:35,516 - mmdet - INFO - Epoch [4][5900/61790]	lr: 2.459e-05, eta: 5 days, 15:27:52, time: 0.469, data_time: 0.008, memory: 6601, loss_cls: 0.3736, loss_bbox: 0.6370, d0.loss_cls: 0.4255, d0.loss_bbox: 0.7609, d1.loss_cls: 0.4052, d1.loss_bbox: 0.6754, d2.loss_cls: 0.3857, d2.loss_bbox: 0.6596, d3.loss_cls: 0.3785, d3.loss_bbox: 0.6490, d4.loss_cls: 0.3737, d4.loss_bbox: 0.6437, aux_task0.loss_heatmap: 0.5131, aux_task0.loss_bbox: 0.2017, aux_task1.loss_heatmap: 0.7032, aux_task1.loss_bbox: 0.2652, aux_task2.loss_heatmap: 0.6560, aux_task2.loss_bbox: 0.2791, aux_task3.loss_heatmap: 0.4734, aux_task3.loss_bbox: 0.2502, aux_task4.loss_heatmap: 0.3813, aux_task4.loss_bbox: 0.2233, aux_task5.loss_heatmap: 0.4459, aux_task5.loss_bbox: 0.2755, loss: 11.0356, grad_norm: 81.6352
2025-04-05 21:08:58,817 - mmdet - INFO - Epoch [4][5950/61790]	lr: 2.460e-05, eta: 5 days, 15:27:21, time: 0.466, data_time: 0.007, memory: 6601, loss_cls: 0.3874, loss_bbox: 0.6456, d0.loss_cls: 0.4389, d0.loss_bbox: 0.7758, d1.loss_cls: 0.4209, d1.loss_bbox: 0.6850, d2.loss_cls: 0.4036, d2.loss_bbox: 0.6682, d3.loss_cls: 0.3938, d3.loss_bbox: 0.6576, d4.loss_cls: 0.3861, d4.loss_bbox: 0.6523, aux_task0.loss_heatmap: 0.5194, aux_task0.loss_bbox: 0.1992, aux_task1.loss_heatmap: 0.7400, aux_task1.loss_bbox: 0.2731, aux_task2.loss_heatmap: 0.7280, aux_task2.loss_bbox: 0.2834, aux_task3.loss_heatmap: 0.5106, aux_task3.loss_bbox: 0.2528, aux_task4.loss_heatmap: 0.3820, aux_task4.loss_bbox: 0.2207, aux_task5.loss_heatmap: 0.4712, aux_task5.loss_bbox: 0.2773, loss: 11.3729, grad_norm: 81.9753
2025-04-05 21:09:22,386 - mmdet - INFO - Epoch [4][6000/61790]	lr: 2.461e-05, eta: 5 days, 15:27:37, time: 0.471, data_time: 0.007, memory: 6601, loss_cls: 0.3568, loss_bbox: 0.6178, d0.loss_cls: 0.4106, d0.loss_bbox: 0.7444, d1.loss_cls: 0.3900, d1.loss_bbox: 0.6572, d2.loss_cls: 0.3718, d2.loss_bbox: 0.6380, d3.loss_cls: 0.3629, d3.loss_bbox: 0.6288, d4.loss_cls: 0.3573, d4.loss_bbox: 0.6247, aux_task0.loss_heatmap: 0.5017, aux_task0.loss_bbox: 0.1966, aux_task1.loss_heatmap: 0.6767, aux_task1.loss_bbox: 0.2571, aux_task2.loss_heatmap: 0.6943, aux_task2.loss_bbox: 0.2780, aux_task3.loss_heatmap: 0.4905, aux_task3.loss_bbox: 0.2487, aux_task4.loss_heatmap: 0.3659, aux_task4.loss_bbox: 0.2180, aux_task5.loss_heatmap: 0.3956, aux_task5.loss_bbox: 0.2695, loss: 10.7528, grad_norm: 82.2976
2025-04-05 21:09:45,666 - mmdet - INFO - Epoch [4][6050/61790]	lr: 2.462e-05, eta: 5 days, 15:27:02, time: 0.466, data_time: 0.006, memory: 6601, loss_cls: 0.3630, loss_bbox: 0.6284, d0.loss_cls: 0.4148, d0.loss_bbox: 0.7548, d1.loss_cls: 0.3916, d1.loss_bbox: 0.6707, d2.loss_cls: 0.3778, d2.loss_bbox: 0.6520, d3.loss_cls: 0.3697, d3.loss_bbox: 0.6413, d4.loss_cls: 0.3637, d4.loss_bbox: 0.6345, aux_task0.loss_heatmap: 0.5043, aux_task0.loss_bbox: 0.1953, aux_task1.loss_heatmap: 0.6876, aux_task1.loss_bbox: 0.2771, aux_task2.loss_heatmap: 0.7331, aux_task2.loss_bbox: 0.2833, aux_task3.loss_heatmap: 0.5275, aux_task3.loss_bbox: 0.2633, aux_task4.loss_heatmap: 0.3906, aux_task4.loss_bbox: 0.2273, aux_task5.loss_heatmap: 0.3906, aux_task5.loss_bbox: 0.2681, loss: 11.0102, grad_norm: 76.6845
2025-04-05 21:10:09,236 - mmdet - INFO - Epoch [4][6100/61790]	lr: 2.463e-05, eta: 5 days, 15:27:17, time: 0.471, data_time: 0.006, memory: 6601, loss_cls: 0.3592, loss_bbox: 0.6341, d0.loss_cls: 0.4153, d0.loss_bbox: 0.7636, d1.loss_cls: 0.3948, d1.loss_bbox: 0.6709, d2.loss_cls: 0.3758, d2.loss_bbox: 0.6533, d3.loss_cls: 0.3660, d3.loss_bbox: 0.6451, d4.loss_cls: 0.3596, d4.loss_bbox: 0.6407, aux_task0.loss_heatmap: 0.4944, aux_task0.loss_bbox: 0.2071, aux_task1.loss_heatmap: 0.7036, aux_task1.loss_bbox: 0.2693, aux_task2.loss_heatmap: 0.6814, aux_task2.loss_bbox: 0.2839, aux_task3.loss_heatmap: 0.5549, aux_task3.loss_bbox: 0.2736, aux_task4.loss_heatmap: 0.3854, aux_task4.loss_bbox: 0.2212, aux_task5.loss_heatmap: 0.4399, aux_task5.loss_bbox: 0.2814, loss: 11.0746, grad_norm: 81.4569
2025-04-05 21:10:33,017 - mmdet - INFO - Epoch [4][6150/61790]	lr: 2.464e-05, eta: 5 days, 15:28:08, time: 0.476, data_time: 0.007, memory: 6601, loss_cls: 0.3585, loss_bbox: 0.6343, d0.loss_cls: 0.4196, d0.loss_bbox: 0.7582, d1.loss_cls: 0.3959, d1.loss_bbox: 0.6692, d2.loss_cls: 0.3774, d2.loss_bbox: 0.6513, d3.loss_cls: 0.3657, d3.loss_bbox: 0.6440, d4.loss_cls: 0.3573, d4.loss_bbox: 0.6407, aux_task0.loss_heatmap: 0.5190, aux_task0.loss_bbox: 0.2139, aux_task1.loss_heatmap: 0.7020, aux_task1.loss_bbox: 0.2696, aux_task2.loss_heatmap: 0.6304, aux_task2.loss_bbox: 0.2688, aux_task3.loss_heatmap: 0.5501, aux_task3.loss_bbox: 0.2756, aux_task4.loss_heatmap: 0.3633, aux_task4.loss_bbox: 0.2174, aux_task5.loss_heatmap: 0.4025, aux_task5.loss_bbox: 0.2722, loss: 10.9570, grad_norm: 84.9120
2025-04-05 21:10:56,254 - mmdet - INFO - Epoch [4][6200/61790]	lr: 2.464e-05, eta: 5 days, 15:27:25, time: 0.465, data_time: 0.005, memory: 6601, loss_cls: 0.3564, loss_bbox: 0.6372, d0.loss_cls: 0.4067, d0.loss_bbox: 0.7644, d1.loss_cls: 0.3908, d1.loss_bbox: 0.6783, d2.loss_cls: 0.3697, d2.loss_bbox: 0.6624, d3.loss_cls: 0.3615, d3.loss_bbox: 0.6504, d4.loss_cls: 0.3557, d4.loss_bbox: 0.6441, aux_task0.loss_heatmap: 0.5008, aux_task0.loss_bbox: 0.1942, aux_task1.loss_heatmap: 0.6947, aux_task1.loss_bbox: 0.2686, aux_task2.loss_heatmap: 0.6898, aux_task2.loss_bbox: 0.2913, aux_task3.loss_heatmap: 0.5097, aux_task3.loss_bbox: 0.2608, aux_task4.loss_heatmap: 0.3918, aux_task4.loss_bbox: 0.2195, aux_task5.loss_heatmap: 0.3855, aux_task5.loss_bbox: 0.2717, loss: 10.9561, grad_norm: 79.8204
2025-04-05 21:11:19,755 - mmdet - INFO - Epoch [4][6250/61790]	lr: 2.465e-05, eta: 5 days, 15:27:27, time: 0.470, data_time: 0.007, memory: 6601, loss_cls: 0.3640, loss_bbox: 0.6375, d0.loss_cls: 0.4236, d0.loss_bbox: 0.7675, d1.loss_cls: 0.4020, d1.loss_bbox: 0.6770, d2.loss_cls: 0.3832, d2.loss_bbox: 0.6581, d3.loss_cls: 0.3723, d3.loss_bbox: 0.6475, d4.loss_cls: 0.3645, d4.loss_bbox: 0.6442, aux_task0.loss_heatmap: 0.4847, aux_task0.loss_bbox: 0.1897, aux_task1.loss_heatmap: 0.6799, aux_task1.loss_bbox: 0.2720, aux_task2.loss_heatmap: 0.7132, aux_task2.loss_bbox: 0.2940, aux_task3.loss_heatmap: 0.5235, aux_task3.loss_bbox: 0.2716, aux_task4.loss_heatmap: 0.3944, aux_task4.loss_bbox: 0.2217, aux_task5.loss_heatmap: 0.4060, aux_task5.loss_bbox: 0.2724, loss: 11.0646, grad_norm: 79.5861
2025-04-05 21:11:42,984 - mmdet - INFO - Epoch [4][6300/61790]	lr: 2.466e-05, eta: 5 days, 15:26:44, time: 0.465, data_time: 0.006, memory: 6601, loss_cls: 0.3650, loss_bbox: 0.6457, d0.loss_cls: 0.4145, d0.loss_bbox: 0.7738, d1.loss_cls: 0.3993, d1.loss_bbox: 0.6882, d2.loss_cls: 0.3799, d2.loss_bbox: 0.6699, d3.loss_cls: 0.3713, d3.loss_bbox: 0.6590, d4.loss_cls: 0.3666, d4.loss_bbox: 0.6529, aux_task0.loss_heatmap: 0.5210, aux_task0.loss_bbox: 0.2105, aux_task1.loss_heatmap: 0.6744, aux_task1.loss_bbox: 0.2645, aux_task2.loss_heatmap: 0.7419, aux_task2.loss_bbox: 0.2878, aux_task3.loss_heatmap: 0.5411, aux_task3.loss_bbox: 0.2533, aux_task4.loss_heatmap: 0.3876, aux_task4.loss_bbox: 0.2262, aux_task5.loss_heatmap: 0.3979, aux_task5.loss_bbox: 0.2694, loss: 11.1615, grad_norm: 75.7657
2025-04-05 21:12:06,304 - mmdet - INFO - Epoch [4][6350/61790]	lr: 2.467e-05, eta: 5 days, 15:26:15, time: 0.466, data_time: 0.008, memory: 6601, loss_cls: 0.3799, loss_bbox: 0.6395, d0.loss_cls: 0.4289, d0.loss_bbox: 0.7714, d1.loss_cls: 0.4083, d1.loss_bbox: 0.6801, d2.loss_cls: 0.3944, d2.loss_bbox: 0.6617, d3.loss_cls: 0.3836, d3.loss_bbox: 0.6506, d4.loss_cls: 0.3796, d4.loss_bbox: 0.6461, aux_task0.loss_heatmap: 0.5039, aux_task0.loss_bbox: 0.1959, aux_task1.loss_heatmap: 0.6873, aux_task1.loss_bbox: 0.2702, aux_task2.loss_heatmap: 0.7332, aux_task2.loss_bbox: 0.2868, aux_task3.loss_heatmap: 0.5077, aux_task3.loss_bbox: 0.2642, aux_task4.loss_heatmap: 0.4028, aux_task4.loss_bbox: 0.2258, aux_task5.loss_heatmap: 0.3993, aux_task5.loss_bbox: 0.2644, loss: 11.1655, grad_norm: 80.3333
2025-04-05 21:12:29,644 - mmdet - INFO - Epoch [4][6400/61790]	lr: 2.468e-05, eta: 5 days, 15:25:50, time: 0.467, data_time: 0.007, memory: 6601, loss_cls: 0.3679, loss_bbox: 0.6397, d0.loss_cls: 0.4244, d0.loss_bbox: 0.7654, d1.loss_cls: 0.4013, d1.loss_bbox: 0.6797, d2.loss_cls: 0.3858, d2.loss_bbox: 0.6600, d3.loss_cls: 0.3738, d3.loss_bbox: 0.6509, d4.loss_cls: 0.3695, d4.loss_bbox: 0.6451, aux_task0.loss_heatmap: 0.5444, aux_task0.loss_bbox: 0.2023, aux_task1.loss_heatmap: 0.6738, aux_task1.loss_bbox: 0.2662, aux_task2.loss_heatmap: 0.6857, aux_task2.loss_bbox: 0.2879, aux_task3.loss_heatmap: 0.4862, aux_task3.loss_bbox: 0.2505, aux_task4.loss_heatmap: 0.3693, aux_task4.loss_bbox: 0.2240, aux_task5.loss_heatmap: 0.4124, aux_task5.loss_bbox: 0.2725, loss: 11.0387, grad_norm: 78.6513
2025-04-05 21:12:52,837 - mmdet - INFO - Epoch [4][6450/61790]	lr: 2.469e-05, eta: 5 days, 15:25:02, time: 0.464, data_time: 0.005, memory: 6601, loss_cls: 0.3558, loss_bbox: 0.6199, d0.loss_cls: 0.4148, d0.loss_bbox: 0.7530, d1.loss_cls: 0.3914, d1.loss_bbox: 0.6654, d2.loss_cls: 0.3733, d2.loss_bbox: 0.6440, d3.loss_cls: 0.3632, d3.loss_bbox: 0.6329, d4.loss_cls: 0.3561, d4.loss_bbox: 0.6286, aux_task0.loss_heatmap: 0.5018, aux_task0.loss_bbox: 0.1932, aux_task1.loss_heatmap: 0.6581, aux_task1.loss_bbox: 0.2560, aux_task2.loss_heatmap: 0.7215, aux_task2.loss_bbox: 0.2788, aux_task3.loss_heatmap: 0.5198, aux_task3.loss_bbox: 0.2614, aux_task4.loss_heatmap: 0.3665, aux_task4.loss_bbox: 0.2215, aux_task5.loss_heatmap: 0.4087, aux_task5.loss_bbox: 0.2748, loss: 10.8603, grad_norm: 87.6108
2025-04-05 21:13:16,420 - mmdet - INFO - Epoch [4][6500/61790]	lr: 2.469e-05, eta: 5 days, 15:25:16, time: 0.472, data_time: 0.007, memory: 6601, loss_cls: 0.3779, loss_bbox: 0.6454, d0.loss_cls: 0.4329, d0.loss_bbox: 0.7774, d1.loss_cls: 0.4096, d1.loss_bbox: 0.6842, d2.loss_cls: 0.3935, d2.loss_bbox: 0.6635, d3.loss_cls: 0.3820, d3.loss_bbox: 0.6555, d4.loss_cls: 0.3761, d4.loss_bbox: 0.6515, aux_task0.loss_heatmap: 0.5300, aux_task0.loss_bbox: 0.2066, aux_task1.loss_heatmap: 0.7287, aux_task1.loss_bbox: 0.2755, aux_task2.loss_heatmap: 0.7067, aux_task2.loss_bbox: 0.2875, aux_task3.loss_heatmap: 0.4967, aux_task3.loss_bbox: 0.2454, aux_task4.loss_heatmap: 0.3866, aux_task4.loss_bbox: 0.2230, aux_task5.loss_heatmap: 0.4028, aux_task5.loss_bbox: 0.2633, loss: 11.2025, grad_norm: 79.6372
2025-04-05 21:13:39,352 - mmdet - INFO - Epoch [4][6550/61790]	lr: 2.470e-05, eta: 5 days, 15:23:46, time: 0.459, data_time: 0.006, memory: 6601, loss_cls: 0.3725, loss_bbox: 0.6268, d0.loss_cls: 0.4237, d0.loss_bbox: 0.7594, d1.loss_cls: 0.4065, d1.loss_bbox: 0.6662, d2.loss_cls: 0.3879, d2.loss_bbox: 0.6492, d3.loss_cls: 0.3783, d3.loss_bbox: 0.6394, d4.loss_cls: 0.3730, d4.loss_bbox: 0.6328, aux_task0.loss_heatmap: 0.5021, aux_task0.loss_bbox: 0.2051, aux_task1.loss_heatmap: 0.6881, aux_task1.loss_bbox: 0.2793, aux_task2.loss_heatmap: 0.6735, aux_task2.loss_bbox: 0.2709, aux_task3.loss_heatmap: 0.5724, aux_task3.loss_bbox: 0.2578, aux_task4.loss_heatmap: 0.3963, aux_task4.loss_bbox: 0.2195, aux_task5.loss_heatmap: 0.4081, aux_task5.loss_bbox: 0.2732, loss: 11.0621, grad_norm: 81.7067
2025-04-05 21:14:02,552 - mmdet - INFO - Epoch [4][6600/61790]	lr: 2.471e-05, eta: 5 days, 15:22:59, time: 0.464, data_time: 0.007, memory: 6601, loss_cls: 0.3594, loss_bbox: 0.6383, d0.loss_cls: 0.4126, d0.loss_bbox: 0.7620, d1.loss_cls: 0.3914, d1.loss_bbox: 0.6758, d2.loss_cls: 0.3763, d2.loss_bbox: 0.6577, d3.loss_cls: 0.3689, d3.loss_bbox: 0.6473, d4.loss_cls: 0.3605, d4.loss_bbox: 0.6422, aux_task0.loss_heatmap: 0.4787, aux_task0.loss_bbox: 0.1912, aux_task1.loss_heatmap: 0.7364, aux_task1.loss_bbox: 0.2731, aux_task2.loss_heatmap: 0.7430, aux_task2.loss_bbox: 0.2856, aux_task3.loss_heatmap: 0.4618, aux_task3.loss_bbox: 0.2635, aux_task4.loss_heatmap: 0.3776, aux_task4.loss_bbox: 0.2232, aux_task5.loss_heatmap: 0.4032, aux_task5.loss_bbox: 0.2693, loss: 10.9988, grad_norm: 78.9151
2025-04-05 21:14:26,805 - mmdet - INFO - Epoch [4][6650/61790]	lr: 2.472e-05, eta: 5 days, 15:24:58, time: 0.485, data_time: 0.027, memory: 6601, loss_cls: 0.3713, loss_bbox: 0.6456, d0.loss_cls: 0.4275, d0.loss_bbox: 0.7659, d1.loss_cls: 0.4029, d1.loss_bbox: 0.6853, d2.loss_cls: 0.3887, d2.loss_bbox: 0.6664, d3.loss_cls: 0.3785, d3.loss_bbox: 0.6575, d4.loss_cls: 0.3721, d4.loss_bbox: 0.6518, aux_task0.loss_heatmap: 0.5223, aux_task0.loss_bbox: 0.2071, aux_task1.loss_heatmap: 0.7116, aux_task1.loss_bbox: 0.2714, aux_task2.loss_heatmap: 0.6580, aux_task2.loss_bbox: 0.2833, aux_task3.loss_heatmap: 0.5254, aux_task3.loss_bbox: 0.2643, aux_task4.loss_heatmap: 0.4082, aux_task4.loss_bbox: 0.2267, aux_task5.loss_heatmap: 0.4351, aux_task5.loss_bbox: 0.2799, loss: 11.2070, grad_norm: 82.3864
2025-04-05 21:14:49,855 - mmdet - INFO - Epoch [4][6700/61790]	lr: 2.473e-05, eta: 5 days, 15:23:48, time: 0.461, data_time: 0.005, memory: 6601, loss_cls: 0.3791, loss_bbox: 0.6462, d0.loss_cls: 0.4272, d0.loss_bbox: 0.7743, d1.loss_cls: 0.4077, d1.loss_bbox: 0.6846, d2.loss_cls: 0.3926, d2.loss_bbox: 0.6640, d3.loss_cls: 0.3845, d3.loss_bbox: 0.6557, d4.loss_cls: 0.3798, d4.loss_bbox: 0.6496, aux_task0.loss_heatmap: 0.4996, aux_task0.loss_bbox: 0.2009, aux_task1.loss_heatmap: 0.7019, aux_task1.loss_bbox: 0.2710, aux_task2.loss_heatmap: 0.6592, aux_task2.loss_bbox: 0.2824, aux_task3.loss_heatmap: 0.5851, aux_task3.loss_bbox: 0.2750, aux_task4.loss_heatmap: 0.4016, aux_task4.loss_bbox: 0.2203, aux_task5.loss_heatmap: 0.4477, aux_task5.loss_bbox: 0.2788, loss: 11.2687, grad_norm: 85.0436
2025-04-05 21:15:13,144 - mmdet - INFO - Epoch [4][6750/61790]	lr: 2.474e-05, eta: 5 days, 15:23:15, time: 0.466, data_time: 0.006, memory: 6601, loss_cls: 0.3847, loss_bbox: 0.6357, d0.loss_cls: 0.4343, d0.loss_bbox: 0.7663, d1.loss_cls: 0.4153, d1.loss_bbox: 0.6762, d2.loss_cls: 0.3997, d2.loss_bbox: 0.6593, d3.loss_cls: 0.3891, d3.loss_bbox: 0.6475, d4.loss_cls: 0.3841, d4.loss_bbox: 0.6396, aux_task0.loss_heatmap: 0.5276, aux_task0.loss_bbox: 0.2062, aux_task1.loss_heatmap: 0.7332, aux_task1.loss_bbox: 0.2701, aux_task2.loss_heatmap: 0.6671, aux_task2.loss_bbox: 0.2870, aux_task3.loss_heatmap: 0.6298, aux_task3.loss_bbox: 0.2494, aux_task4.loss_heatmap: 0.3991, aux_task4.loss_bbox: 0.2204, aux_task5.loss_heatmap: 0.3979, aux_task5.loss_bbox: 0.2742, loss: 11.2939, grad_norm: 81.2263
2025-04-05 21:15:36,556 - mmdet - INFO - Epoch [4][6800/61790]	lr: 2.474e-05, eta: 5 days, 15:23:01, time: 0.468, data_time: 0.011, memory: 6601, loss_cls: 0.3613, loss_bbox: 0.6242, d0.loss_cls: 0.4180, d0.loss_bbox: 0.7568, d1.loss_cls: 0.3942, d1.loss_bbox: 0.6670, d2.loss_cls: 0.3767, d2.loss_bbox: 0.6481, d3.loss_cls: 0.3667, d3.loss_bbox: 0.6368, d4.loss_cls: 0.3600, d4.loss_bbox: 0.6300, aux_task0.loss_heatmap: 0.4936, aux_task0.loss_bbox: 0.1963, aux_task1.loss_heatmap: 0.7100, aux_task1.loss_bbox: 0.2644, aux_task2.loss_heatmap: 0.6735, aux_task2.loss_bbox: 0.2803, aux_task3.loss_heatmap: 0.5856, aux_task3.loss_bbox: 0.2557, aux_task4.loss_heatmap: 0.3576, aux_task4.loss_bbox: 0.2192, aux_task5.loss_heatmap: 0.4042, aux_task5.loss_bbox: 0.2699, loss: 10.9501, grad_norm: 75.4544
2025-04-05 21:16:00,001 - mmdet - INFO - Epoch [4][6850/61790]	lr: 2.475e-05, eta: 5 days, 15:22:52, time: 0.469, data_time: 0.012, memory: 6601, loss_cls: 0.3651, loss_bbox: 0.6342, d0.loss_cls: 0.4224, d0.loss_bbox: 0.7496, d1.loss_cls: 0.3984, d1.loss_bbox: 0.6657, d2.loss_cls: 0.3805, d2.loss_bbox: 0.6512, d3.loss_cls: 0.3701, d3.loss_bbox: 0.6444, d4.loss_cls: 0.3659, d4.loss_bbox: 0.6390, aux_task0.loss_heatmap: 0.5043, aux_task0.loss_bbox: 0.1991, aux_task1.loss_heatmap: 0.6927, aux_task1.loss_bbox: 0.2566, aux_task2.loss_heatmap: 0.7212, aux_task2.loss_bbox: 0.2862, aux_task3.loss_heatmap: 0.5245, aux_task3.loss_bbox: 0.2645, aux_task4.loss_heatmap: 0.4080, aux_task4.loss_bbox: 0.2236, aux_task5.loss_heatmap: 0.3692, aux_task5.loss_bbox: 0.2681, loss: 11.0044, grad_norm: 75.7569
2025-04-05 21:16:23,852 - mmdet - INFO - Epoch [4][6900/61790]	lr: 2.476e-05, eta: 5 days, 15:23:44, time: 0.477, data_time: 0.012, memory: 6601, loss_cls: 0.3708, loss_bbox: 0.6333, d0.loss_cls: 0.4184, d0.loss_bbox: 0.7594, d1.loss_cls: 0.3999, d1.loss_bbox: 0.6668, d2.loss_cls: 0.3826, d2.loss_bbox: 0.6519, d3.loss_cls: 0.3760, d3.loss_bbox: 0.6435, d4.loss_cls: 0.3719, d4.loss_bbox: 0.6381, aux_task0.loss_heatmap: 0.4874, aux_task0.loss_bbox: 0.1928, aux_task1.loss_heatmap: 0.6753, aux_task1.loss_bbox: 0.2592, aux_task2.loss_heatmap: 0.7164, aux_task2.loss_bbox: 0.2849, aux_task3.loss_heatmap: 0.4796, aux_task3.loss_bbox: 0.2544, aux_task4.loss_heatmap: 0.4024, aux_task4.loss_bbox: 0.2327, aux_task5.loss_heatmap: 0.4172, aux_task5.loss_bbox: 0.2692, loss: 10.9840, grad_norm: 78.6058
2025-04-05 21:16:47,481 - mmdet - INFO - Epoch [4][6950/61790]	lr: 2.477e-05, eta: 5 days, 15:24:02, time: 0.473, data_time: 0.011, memory: 6601, loss_cls: 0.3645, loss_bbox: 0.6445, d0.loss_cls: 0.4181, d0.loss_bbox: 0.7730, d1.loss_cls: 0.3964, d1.loss_bbox: 0.6856, d2.loss_cls: 0.3779, d2.loss_bbox: 0.6676, d3.loss_cls: 0.3703, d3.loss_bbox: 0.6579, d4.loss_cls: 0.3650, d4.loss_bbox: 0.6496, aux_task0.loss_heatmap: 0.4916, aux_task0.loss_bbox: 0.1958, aux_task1.loss_heatmap: 0.6644, aux_task1.loss_bbox: 0.2614, aux_task2.loss_heatmap: 0.7408, aux_task2.loss_bbox: 0.2855, aux_task3.loss_heatmap: 0.4785, aux_task3.loss_bbox: 0.2807, aux_task4.loss_heatmap: 0.3816, aux_task4.loss_bbox: 0.2174, aux_task5.loss_heatmap: 0.3817, aux_task5.loss_bbox: 0.2758, loss: 11.0256, grad_norm: 79.0686
2025-04-05 21:17:11,007 - mmdet - INFO - Epoch [4][7000/61790]	lr: 2.478e-05, eta: 5 days, 15:24:04, time: 0.471, data_time: 0.009, memory: 6601, loss_cls: 0.3699, loss_bbox: 0.6316, d0.loss_cls: 0.4190, d0.loss_bbox: 0.7606, d1.loss_cls: 0.3977, d1.loss_bbox: 0.6733, d2.loss_cls: 0.3819, d2.loss_bbox: 0.6568, d3.loss_cls: 0.3734, d3.loss_bbox: 0.6446, d4.loss_cls: 0.3702, d4.loss_bbox: 0.6383, aux_task0.loss_heatmap: 0.5022, aux_task0.loss_bbox: 0.2008, aux_task1.loss_heatmap: 0.7042, aux_task1.loss_bbox: 0.2682, aux_task2.loss_heatmap: 0.6937, aux_task2.loss_bbox: 0.2821, aux_task3.loss_heatmap: 0.5346, aux_task3.loss_bbox: 0.2699, aux_task4.loss_heatmap: 0.4071, aux_task4.loss_bbox: 0.2273, aux_task5.loss_heatmap: 0.3962, aux_task5.loss_bbox: 0.2692, loss: 11.0728, grad_norm: 78.4651
2025-04-05 21:17:34,569 - mmdet - INFO - Epoch [4][7050/61790]	lr: 2.479e-05, eta: 5 days, 15:24:11, time: 0.471, data_time: 0.010, memory: 6601, loss_cls: 0.3715, loss_bbox: 0.6476, d0.loss_cls: 0.4295, d0.loss_bbox: 0.7762, d1.loss_cls: 0.4075, d1.loss_bbox: 0.6906, d2.loss_cls: 0.3878, d2.loss_bbox: 0.6715, d3.loss_cls: 0.3783, d3.loss_bbox: 0.6623, d4.loss_cls: 0.3718, d4.loss_bbox: 0.6552, aux_task0.loss_heatmap: 0.5016, aux_task0.loss_bbox: 0.2121, aux_task1.loss_heatmap: 0.7351, aux_task1.loss_bbox: 0.2704, aux_task2.loss_heatmap: 0.7025, aux_task2.loss_bbox: 0.2884, aux_task3.loss_heatmap: 0.5616, aux_task3.loss_bbox: 0.2508, aux_task4.loss_heatmap: 0.3666, aux_task4.loss_bbox: 0.2226, aux_task5.loss_heatmap: 0.4275, aux_task5.loss_bbox: 0.2795, loss: 11.2686, grad_norm: 81.0183
2025-04-05 21:17:58,050 - mmdet - INFO - Epoch [4][7100/61790]	lr: 2.479e-05, eta: 5 days, 15:24:06, time: 0.470, data_time: 0.010, memory: 6601, loss_cls: 0.3690, loss_bbox: 0.6453, d0.loss_cls: 0.4252, d0.loss_bbox: 0.7717, d1.loss_cls: 0.4015, d1.loss_bbox: 0.6870, d2.loss_cls: 0.3875, d2.loss_bbox: 0.6670, d3.loss_cls: 0.3753, d3.loss_bbox: 0.6560, d4.loss_cls: 0.3694, d4.loss_bbox: 0.6523, aux_task0.loss_heatmap: 0.5299, aux_task0.loss_bbox: 0.1991, aux_task1.loss_heatmap: 0.7243, aux_task1.loss_bbox: 0.2678, aux_task2.loss_heatmap: 0.6956, aux_task2.loss_bbox: 0.2918, aux_task3.loss_heatmap: 0.5027, aux_task3.loss_bbox: 0.2648, aux_task4.loss_heatmap: 0.3890, aux_task4.loss_bbox: 0.2223, aux_task5.loss_heatmap: 0.4089, aux_task5.loss_bbox: 0.2717, loss: 11.1750, grad_norm: 78.9556
2025-04-05 21:18:21,549 - mmdet - INFO - Epoch [4][7150/61790]	lr: 2.480e-05, eta: 5 days, 15:24:02, time: 0.470, data_time: 0.010, memory: 6601, loss_cls: 0.3716, loss_bbox: 0.6400, d0.loss_cls: 0.4268, d0.loss_bbox: 0.7670, d1.loss_cls: 0.4092, d1.loss_bbox: 0.6770, d2.loss_cls: 0.3905, d2.loss_bbox: 0.6607, d3.loss_cls: 0.3795, d3.loss_bbox: 0.6510, d4.loss_cls: 0.3710, d4.loss_bbox: 0.6466, aux_task0.loss_heatmap: 0.4845, aux_task0.loss_bbox: 0.1910, aux_task1.loss_heatmap: 0.7547, aux_task1.loss_bbox: 0.2795, aux_task2.loss_heatmap: 0.6970, aux_task2.loss_bbox: 0.2893, aux_task3.loss_heatmap: 0.4974, aux_task3.loss_bbox: 0.2712, aux_task4.loss_heatmap: 0.3910, aux_task4.loss_bbox: 0.2252, aux_task5.loss_heatmap: 0.3914, aux_task5.loss_bbox: 0.2774, loss: 11.1405, grad_norm: 82.6552
2025-04-05 21:18:45,079 - mmdet - INFO - Epoch [4][7200/61790]	lr: 2.481e-05, eta: 5 days, 15:24:04, time: 0.471, data_time: 0.011, memory: 6601, loss_cls: 0.3666, loss_bbox: 0.6261, d0.loss_cls: 0.4184, d0.loss_bbox: 0.7580, d1.loss_cls: 0.3988, d1.loss_bbox: 0.6697, d2.loss_cls: 0.3805, d2.loss_bbox: 0.6508, d3.loss_cls: 0.3713, d3.loss_bbox: 0.6398, d4.loss_cls: 0.3676, d4.loss_bbox: 0.6316, aux_task0.loss_heatmap: 0.4844, aux_task0.loss_bbox: 0.1987, aux_task1.loss_heatmap: 0.6975, aux_task1.loss_bbox: 0.2843, aux_task2.loss_heatmap: 0.7125, aux_task2.loss_bbox: 0.2913, aux_task3.loss_heatmap: 0.4766, aux_task3.loss_bbox: 0.2494, aux_task4.loss_heatmap: 0.4006, aux_task4.loss_bbox: 0.2279, aux_task5.loss_heatmap: 0.3777, aux_task5.loss_bbox: 0.2756, loss: 10.9555, grad_norm: 77.4403
2025-04-05 21:19:08,675 - mmdet - INFO - Epoch [4][7250/61790]	lr: 2.482e-05, eta: 5 days, 15:24:14, time: 0.472, data_time: 0.011, memory: 6601, loss_cls: 0.3690, loss_bbox: 0.6364, d0.loss_cls: 0.4286, d0.loss_bbox: 0.7625, d1.loss_cls: 0.4069, d1.loss_bbox: 0.6744, d2.loss_cls: 0.3865, d2.loss_bbox: 0.6570, d3.loss_cls: 0.3744, d3.loss_bbox: 0.6471, d4.loss_cls: 0.3677, d4.loss_bbox: 0.6433, aux_task0.loss_heatmap: 0.4875, aux_task0.loss_bbox: 0.1969, aux_task1.loss_heatmap: 0.7233, aux_task1.loss_bbox: 0.2658, aux_task2.loss_heatmap: 0.6652, aux_task2.loss_bbox: 0.2767, aux_task3.loss_heatmap: 0.4969, aux_task3.loss_bbox: 0.2670, aux_task4.loss_heatmap: 0.3731, aux_task4.loss_bbox: 0.2220, aux_task5.loss_heatmap: 0.4373, aux_task5.loss_bbox: 0.2750, loss: 11.0405, grad_norm: 83.2536
2025-04-05 21:19:32,738 - mmdet - INFO - Epoch [4][7300/61790]	lr: 2.483e-05, eta: 5 days, 15:25:30, time: 0.481, data_time: 0.021, memory: 6601, loss_cls: 0.3698, loss_bbox: 0.6500, d0.loss_cls: 0.4249, d0.loss_bbox: 0.7694, d1.loss_cls: 0.4042, d1.loss_bbox: 0.6870, d2.loss_cls: 0.3840, d2.loss_bbox: 0.6708, d3.loss_cls: 0.3754, d3.loss_bbox: 0.6597, d4.loss_cls: 0.3703, d4.loss_bbox: 0.6542, aux_task0.loss_heatmap: 0.5090, aux_task0.loss_bbox: 0.1994, aux_task1.loss_heatmap: 0.7155, aux_task1.loss_bbox: 0.2672, aux_task2.loss_heatmap: 0.6967, aux_task2.loss_bbox: 0.2877, aux_task3.loss_heatmap: 0.5260, aux_task3.loss_bbox: 0.2642, aux_task4.loss_heatmap: 0.3866, aux_task4.loss_bbox: 0.2217, aux_task5.loss_heatmap: 0.4094, aux_task5.loss_bbox: 0.2735, loss: 11.1766, grad_norm: 76.4606
2025-04-05 21:19:56,323 - mmdet - INFO - Epoch [4][7350/61790]	lr: 2.484e-05, eta: 5 days, 15:25:38, time: 0.472, data_time: 0.009, memory: 6601, loss_cls: 0.3650, loss_bbox: 0.6459, d0.loss_cls: 0.4193, d0.loss_bbox: 0.7732, d1.loss_cls: 0.4009, d1.loss_bbox: 0.6833, d2.loss_cls: 0.3804, d2.loss_bbox: 0.6675, d3.loss_cls: 0.3704, d3.loss_bbox: 0.6574, d4.loss_cls: 0.3665, d4.loss_bbox: 0.6512, aux_task0.loss_heatmap: 0.5048, aux_task0.loss_bbox: 0.2010, aux_task1.loss_heatmap: 0.7226, aux_task1.loss_bbox: 0.2753, aux_task2.loss_heatmap: 0.7188, aux_task2.loss_bbox: 0.2840, aux_task3.loss_heatmap: 0.4786, aux_task3.loss_bbox: 0.2531, aux_task4.loss_heatmap: 0.3878, aux_task4.loss_bbox: 0.2229, aux_task5.loss_heatmap: 0.3737, aux_task5.loss_bbox: 0.2674, loss: 11.0708, grad_norm: 80.7989
2025-04-05 21:20:19,986 - mmdet - INFO - Epoch [4][7400/61790]	lr: 2.485e-05, eta: 5 days, 15:25:56, time: 0.473, data_time: 0.008, memory: 6601, loss_cls: 0.3564, loss_bbox: 0.6336, d0.loss_cls: 0.4075, d0.loss_bbox: 0.7628, d1.loss_cls: 0.3857, d1.loss_bbox: 0.6733, d2.loss_cls: 0.3698, d2.loss_bbox: 0.6562, d3.loss_cls: 0.3604, d3.loss_bbox: 0.6471, d4.loss_cls: 0.3554, d4.loss_bbox: 0.6408, aux_task0.loss_heatmap: 0.5021, aux_task0.loss_bbox: 0.1993, aux_task1.loss_heatmap: 0.7110, aux_task1.loss_bbox: 0.2696, aux_task2.loss_heatmap: 0.6847, aux_task2.loss_bbox: 0.2810, aux_task3.loss_heatmap: 0.5228, aux_task3.loss_bbox: 0.2695, aux_task4.loss_heatmap: 0.3708, aux_task4.loss_bbox: 0.2186, aux_task5.loss_heatmap: 0.3955, aux_task5.loss_bbox: 0.2675, loss: 10.9417, grad_norm: 75.0262
2025-04-05 21:20:43,743 - mmdet - INFO - Epoch [4][7450/61790]	lr: 2.485e-05, eta: 5 days, 15:26:26, time: 0.475, data_time: 0.009, memory: 6601, loss_cls: 0.3724, loss_bbox: 0.6386, d0.loss_cls: 0.4279, d0.loss_bbox: 0.7699, d1.loss_cls: 0.4048, d1.loss_bbox: 0.6805, d2.loss_cls: 0.3861, d2.loss_bbox: 0.6628, d3.loss_cls: 0.3756, d3.loss_bbox: 0.6520, d4.loss_cls: 0.3724, d4.loss_bbox: 0.6455, aux_task0.loss_heatmap: 0.4906, aux_task0.loss_bbox: 0.1939, aux_task1.loss_heatmap: 0.7059, aux_task1.loss_bbox: 0.2741, aux_task2.loss_heatmap: 0.6969, aux_task2.loss_bbox: 0.2943, aux_task3.loss_heatmap: 0.6001, aux_task3.loss_bbox: 0.2727, aux_task4.loss_heatmap: 0.4274, aux_task4.loss_bbox: 0.2281, aux_task5.loss_heatmap: 0.3928, aux_task5.loss_bbox: 0.2800, loss: 11.2454, grad_norm: 83.0172
2025-04-05 21:21:07,151 - mmdet - INFO - Epoch [4][7500/61790]	lr: 2.486e-05, eta: 5 days, 15:26:07, time: 0.468, data_time: 0.008, memory: 6601, loss_cls: 0.3824, loss_bbox: 0.6505, d0.loss_cls: 0.4370, d0.loss_bbox: 0.7764, d1.loss_cls: 0.4129, d1.loss_bbox: 0.6889, d2.loss_cls: 0.3961, d2.loss_bbox: 0.6713, d3.loss_cls: 0.3862, d3.loss_bbox: 0.6630, d4.loss_cls: 0.3829, d4.loss_bbox: 0.6577, aux_task0.loss_heatmap: 0.5075, aux_task0.loss_bbox: 0.2008, aux_task1.loss_heatmap: 0.7051, aux_task1.loss_bbox: 0.2731, aux_task2.loss_heatmap: 0.7372, aux_task2.loss_bbox: 0.2840, aux_task3.loss_heatmap: 0.5481, aux_task3.loss_bbox: 0.2639, aux_task4.loss_heatmap: 0.3935, aux_task4.loss_bbox: 0.2248, aux_task5.loss_heatmap: 0.3992, aux_task5.loss_bbox: 0.2719, loss: 11.3143, grad_norm: 82.2247
2025-04-05 21:21:30,498 - mmdet - INFO - Epoch [4][7550/61790]	lr: 2.487e-05, eta: 5 days, 15:25:40, time: 0.467, data_time: 0.011, memory: 6601, loss_cls: 0.3663, loss_bbox: 0.6292, d0.loss_cls: 0.4219, d0.loss_bbox: 0.7521, d1.loss_cls: 0.3997, d1.loss_bbox: 0.6666, d2.loss_cls: 0.3847, d2.loss_bbox: 0.6485, d3.loss_cls: 0.3724, d3.loss_bbox: 0.6409, d4.loss_cls: 0.3665, d4.loss_bbox: 0.6350, aux_task0.loss_heatmap: 0.5029, aux_task0.loss_bbox: 0.2011, aux_task1.loss_heatmap: 0.7330, aux_task1.loss_bbox: 0.2656, aux_task2.loss_heatmap: 0.7061, aux_task2.loss_bbox: 0.2843, aux_task3.loss_heatmap: 0.5082, aux_task3.loss_bbox: 0.2733, aux_task4.loss_heatmap: 0.3825, aux_task4.loss_bbox: 0.2144, aux_task5.loss_heatmap: 0.4147, aux_task5.loss_bbox: 0.2669, loss: 11.0368, grad_norm: 77.3888
2025-04-05 21:21:55,886 - mmdet - INFO - Epoch [4][7600/61790]	lr: 2.488e-05, eta: 5 days, 15:29:53, time: 0.508, data_time: 0.010, memory: 6601, loss_cls: 0.3689, loss_bbox: 0.6386, d0.loss_cls: 0.4220, d0.loss_bbox: 0.7663, d1.loss_cls: 0.3996, d1.loss_bbox: 0.6781, d2.loss_cls: 0.3842, d2.loss_bbox: 0.6590, d3.loss_cls: 0.3747, d3.loss_bbox: 0.6506, d4.loss_cls: 0.3687, d4.loss_bbox: 0.6432, aux_task0.loss_heatmap: 0.5062, aux_task0.loss_bbox: 0.1957, aux_task1.loss_heatmap: 0.7002, aux_task1.loss_bbox: 0.2600, aux_task2.loss_heatmap: 0.7311, aux_task2.loss_bbox: 0.2850, aux_task3.loss_heatmap: 0.4181, aux_task3.loss_bbox: 0.2466, aux_task4.loss_heatmap: 0.3868, aux_task4.loss_bbox: 0.2242, aux_task5.loss_heatmap: 0.4098, aux_task5.loss_bbox: 0.2750, loss: 10.9926, grad_norm: 81.1228
2025-04-05 21:22:19,203 - mmdet - INFO - Epoch [4][7650/61790]	lr: 2.489e-05, eta: 5 days, 15:29:20, time: 0.466, data_time: 0.008, memory: 6601, loss_cls: 0.3661, loss_bbox: 0.6437, d0.loss_cls: 0.4237, d0.loss_bbox: 0.7707, d1.loss_cls: 0.4022, d1.loss_bbox: 0.6812, d2.loss_cls: 0.3835, d2.loss_bbox: 0.6659, d3.loss_cls: 0.3738, d3.loss_bbox: 0.6549, d4.loss_cls: 0.3677, d4.loss_bbox: 0.6484, aux_task0.loss_heatmap: 0.4905, aux_task0.loss_bbox: 0.1944, aux_task1.loss_heatmap: 0.7060, aux_task1.loss_bbox: 0.2723, aux_task2.loss_heatmap: 0.7130, aux_task2.loss_bbox: 0.2924, aux_task3.loss_heatmap: 0.5062, aux_task3.loss_bbox: 0.2840, aux_task4.loss_heatmap: 0.3622, aux_task4.loss_bbox: 0.2194, aux_task5.loss_heatmap: 0.4166, aux_task5.loss_bbox: 0.2708, loss: 11.1092, grad_norm: 77.6834
2025-04-05 21:22:43,456 - mmdet - INFO - Epoch [4][7700/61790]	lr: 2.490e-05, eta: 5 days, 15:30:53, time: 0.485, data_time: 0.022, memory: 6601, loss_cls: 0.3616, loss_bbox: 0.6331, d0.loss_cls: 0.4155, d0.loss_bbox: 0.7624, d1.loss_cls: 0.3939, d1.loss_bbox: 0.6740, d2.loss_cls: 0.3765, d2.loss_bbox: 0.6545, d3.loss_cls: 0.3683, d3.loss_bbox: 0.6436, d4.loss_cls: 0.3609, d4.loss_bbox: 0.6390, aux_task0.loss_heatmap: 0.4717, aux_task0.loss_bbox: 0.1975, aux_task1.loss_heatmap: 0.6687, aux_task1.loss_bbox: 0.2556, aux_task2.loss_heatmap: 0.7121, aux_task2.loss_bbox: 0.2817, aux_task3.loss_heatmap: 0.4772, aux_task3.loss_bbox: 0.2653, aux_task4.loss_heatmap: 0.3845, aux_task4.loss_bbox: 0.2206, aux_task5.loss_heatmap: 0.4229, aux_task5.loss_bbox: 0.2836, loss: 10.9247, grad_norm: 76.1038
2025-04-05 21:23:06,834 - mmdet - INFO - Epoch [4][7750/61790]	lr: 2.490e-05, eta: 5 days, 15:30:28, time: 0.468, data_time: 0.011, memory: 6601, loss_cls: 0.3818, loss_bbox: 0.6446, d0.loss_cls: 0.4417, d0.loss_bbox: 0.7687, d1.loss_cls: 0.4203, d1.loss_bbox: 0.6807, d2.loss_cls: 0.3998, d2.loss_bbox: 0.6646, d3.loss_cls: 0.3877, d3.loss_bbox: 0.6546, d4.loss_cls: 0.3823, d4.loss_bbox: 0.6498, aux_task0.loss_heatmap: 0.5041, aux_task0.loss_bbox: 0.2081, aux_task1.loss_heatmap: 0.7104, aux_task1.loss_bbox: 0.2659, aux_task2.loss_heatmap: 0.7278, aux_task2.loss_bbox: 0.2850, aux_task3.loss_heatmap: 0.5255, aux_task3.loss_bbox: 0.2728, aux_task4.loss_heatmap: 0.3913, aux_task4.loss_bbox: 0.2274, aux_task5.loss_heatmap: 0.4665, aux_task5.loss_bbox: 0.2729, loss: 11.3345, grad_norm: 85.2251
2025-04-05 21:23:30,683 - mmdet - INFO - Epoch [4][7800/61790]	lr: 2.491e-05, eta: 5 days, 15:31:06, time: 0.477, data_time: 0.010, memory: 6601, loss_cls: 0.3610, loss_bbox: 0.6387, d0.loss_cls: 0.4162, d0.loss_bbox: 0.7683, d1.loss_cls: 0.3959, d1.loss_bbox: 0.6776, d2.loss_cls: 0.3773, d2.loss_bbox: 0.6577, d3.loss_cls: 0.3674, d3.loss_bbox: 0.6491, d4.loss_cls: 0.3620, d4.loss_bbox: 0.6434, aux_task0.loss_heatmap: 0.5365, aux_task0.loss_bbox: 0.1969, aux_task1.loss_heatmap: 0.6770, aux_task1.loss_bbox: 0.2706, aux_task2.loss_heatmap: 0.6471, aux_task2.loss_bbox: 0.2678, aux_task3.loss_heatmap: 0.4924, aux_task3.loss_bbox: 0.2674, aux_task4.loss_heatmap: 0.4079, aux_task4.loss_bbox: 0.2239, aux_task5.loss_heatmap: 0.4028, aux_task5.loss_bbox: 0.2708, loss: 10.9756, grad_norm: 78.3053
2025-04-05 21:23:54,445 - mmdet - INFO - Epoch [4][7850/61790]	lr: 2.492e-05, eta: 5 days, 15:31:31, time: 0.475, data_time: 0.010, memory: 6601, loss_cls: 0.3609, loss_bbox: 0.6317, d0.loss_cls: 0.4123, d0.loss_bbox: 0.7581, d1.loss_cls: 0.3970, d1.loss_bbox: 0.6697, d2.loss_cls: 0.3784, d2.loss_bbox: 0.6548, d3.loss_cls: 0.3683, d3.loss_bbox: 0.6447, d4.loss_cls: 0.3612, d4.loss_bbox: 0.6382, aux_task0.loss_heatmap: 0.4843, aux_task0.loss_bbox: 0.1897, aux_task1.loss_heatmap: 0.7153, aux_task1.loss_bbox: 0.2678, aux_task2.loss_heatmap: 0.7295, aux_task2.loss_bbox: 0.2814, aux_task3.loss_heatmap: 0.5282, aux_task3.loss_bbox: 0.2551, aux_task4.loss_heatmap: 0.3899, aux_task4.loss_bbox: 0.2177, aux_task5.loss_heatmap: 0.4101, aux_task5.loss_bbox: 0.2777, loss: 11.0220, grad_norm: 80.0020
2025-04-05 21:24:18,074 - mmdet - INFO - Epoch [4][7900/61790]	lr: 2.493e-05, eta: 5 days, 15:31:38, time: 0.473, data_time: 0.009, memory: 6601, loss_cls: 0.3703, loss_bbox: 0.6286, d0.loss_cls: 0.4263, d0.loss_bbox: 0.7625, d1.loss_cls: 0.4037, d1.loss_bbox: 0.6738, d2.loss_cls: 0.3854, d2.loss_bbox: 0.6526, d3.loss_cls: 0.3760, d3.loss_bbox: 0.6414, d4.loss_cls: 0.3695, d4.loss_bbox: 0.6351, aux_task0.loss_heatmap: 0.4912, aux_task0.loss_bbox: 0.2036, aux_task1.loss_heatmap: 0.7092, aux_task1.loss_bbox: 0.2705, aux_task2.loss_heatmap: 0.6654, aux_task2.loss_bbox: 0.2786, aux_task3.loss_heatmap: 0.5047, aux_task3.loss_bbox: 0.2424, aux_task4.loss_heatmap: 0.4117, aux_task4.loss_bbox: 0.2286, aux_task5.loss_heatmap: 0.3949, aux_task5.loss_bbox: 0.2682, loss: 10.9942, grad_norm: 78.0025
2025-04-05 21:24:41,877 - mmdet - INFO - Epoch [4][7950/61790]	lr: 2.494e-05, eta: 5 days, 15:32:07, time: 0.476, data_time: 0.010, memory: 6601, loss_cls: 0.3638, loss_bbox: 0.6294, d0.loss_cls: 0.4210, d0.loss_bbox: 0.7545, d1.loss_cls: 0.3984, d1.loss_bbox: 0.6689, d2.loss_cls: 0.3823, d2.loss_bbox: 0.6493, d3.loss_cls: 0.3700, d3.loss_bbox: 0.6390, d4.loss_cls: 0.3637, d4.loss_bbox: 0.6344, aux_task0.loss_heatmap: 0.4985, aux_task0.loss_bbox: 0.1919, aux_task1.loss_heatmap: 0.7094, aux_task1.loss_bbox: 0.2717, aux_task2.loss_heatmap: 0.6800, aux_task2.loss_bbox: 0.2800, aux_task3.loss_heatmap: 0.4881, aux_task3.loss_bbox: 0.2847, aux_task4.loss_heatmap: 0.3831, aux_task4.loss_bbox: 0.2231, aux_task5.loss_heatmap: 0.3924, aux_task5.loss_bbox: 0.2668, loss: 10.9445, grad_norm: 78.4865
2025-04-05 21:25:05,150 - mmdet - INFO - Epoch [4][8000/61790]	lr: 2.495e-05, eta: 5 days, 15:31:27, time: 0.465, data_time: 0.009, memory: 6601, loss_cls: 0.3682, loss_bbox: 0.6410, d0.loss_cls: 0.4288, d0.loss_bbox: 0.7652, d1.loss_cls: 0.4040, d1.loss_bbox: 0.6792, d2.loss_cls: 0.3835, d2.loss_bbox: 0.6625, d3.loss_cls: 0.3750, d3.loss_bbox: 0.6520, d4.loss_cls: 0.3689, d4.loss_bbox: 0.6456, aux_task0.loss_heatmap: 0.5009, aux_task0.loss_bbox: 0.2045, aux_task1.loss_heatmap: 0.6969, aux_task1.loss_bbox: 0.2589, aux_task2.loss_heatmap: 0.6728, aux_task2.loss_bbox: 0.2808, aux_task3.loss_heatmap: 0.5732, aux_task3.loss_bbox: 0.2661, aux_task4.loss_heatmap: 0.3749, aux_task4.loss_bbox: 0.2188, aux_task5.loss_heatmap: 0.3842, aux_task5.loss_bbox: 0.2737, loss: 11.0794, grad_norm: 85.3581
2025-04-05 21:25:28,548 - mmdet - INFO - Epoch [4][8050/61790]	lr: 2.495e-05, eta: 5 days, 15:31:03, time: 0.468, data_time: 0.009, memory: 6601, loss_cls: 0.3554, loss_bbox: 0.6304, d0.loss_cls: 0.4084, d0.loss_bbox: 0.7648, d1.loss_cls: 0.3881, d1.loss_bbox: 0.6757, d2.loss_cls: 0.3718, d2.loss_bbox: 0.6564, d3.loss_cls: 0.3619, d3.loss_bbox: 0.6470, d4.loss_cls: 0.3559, d4.loss_bbox: 0.6387, aux_task0.loss_heatmap: 0.4847, aux_task0.loss_bbox: 0.2045, aux_task1.loss_heatmap: 0.7163, aux_task1.loss_bbox: 0.2674, aux_task2.loss_heatmap: 0.6949, aux_task2.loss_bbox: 0.2880, aux_task3.loss_heatmap: 0.4671, aux_task3.loss_bbox: 0.2609, aux_task4.loss_heatmap: 0.3825, aux_task4.loss_bbox: 0.2151, aux_task5.loss_heatmap: 0.3770, aux_task5.loss_bbox: 0.2709, loss: 10.8838, grad_norm: 73.5865
2025-04-05 21:25:52,380 - mmdet - INFO - Epoch [4][8100/61790]	lr: 2.496e-05, eta: 5 days, 15:31:35, time: 0.477, data_time: 0.013, memory: 6601, loss_cls: 0.3560, loss_bbox: 0.6351, d0.loss_cls: 0.4126, d0.loss_bbox: 0.7631, d1.loss_cls: 0.3913, d1.loss_bbox: 0.6727, d2.loss_cls: 0.3742, d2.loss_bbox: 0.6543, d3.loss_cls: 0.3636, d3.loss_bbox: 0.6463, d4.loss_cls: 0.3572, d4.loss_bbox: 0.6408, aux_task0.loss_heatmap: 0.4942, aux_task0.loss_bbox: 0.1976, aux_task1.loss_heatmap: 0.7158, aux_task1.loss_bbox: 0.2621, aux_task2.loss_heatmap: 0.7206, aux_task2.loss_bbox: 0.2876, aux_task3.loss_heatmap: 0.4640, aux_task3.loss_bbox: 0.2697, aux_task4.loss_heatmap: 0.3928, aux_task4.loss_bbox: 0.2220, aux_task5.loss_heatmap: 0.4154, aux_task5.loss_bbox: 0.2725, loss: 10.9816, grad_norm: 81.9556
2025-04-05 21:26:15,598 - mmdet - INFO - Epoch [4][8150/61790]	lr: 2.497e-05, eta: 5 days, 15:30:48, time: 0.464, data_time: 0.009, memory: 6601, loss_cls: 0.3603, loss_bbox: 0.6320, d0.loss_cls: 0.4249, d0.loss_bbox: 0.7568, d1.loss_cls: 0.3992, d1.loss_bbox: 0.6695, d2.loss_cls: 0.3800, d2.loss_bbox: 0.6486, d3.loss_cls: 0.3699, d3.loss_bbox: 0.6403, d4.loss_cls: 0.3622, d4.loss_bbox: 0.6369, aux_task0.loss_heatmap: 0.4553, aux_task0.loss_bbox: 0.1886, aux_task1.loss_heatmap: 0.7025, aux_task1.loss_bbox: 0.2743, aux_task2.loss_heatmap: 0.7235, aux_task2.loss_bbox: 0.2907, aux_task3.loss_heatmap: 0.5231, aux_task3.loss_bbox: 0.2713, aux_task4.loss_heatmap: 0.3818, aux_task4.loss_bbox: 0.2193, aux_task5.loss_heatmap: 0.4198, aux_task5.loss_bbox: 0.2711, loss: 11.0018, grad_norm: 78.7119
2025-04-05 21:26:38,898 - mmdet - INFO - Epoch [4][8200/61790]	lr: 2.498e-05, eta: 5 days, 15:30:11, time: 0.466, data_time: 0.010, memory: 6601, loss_cls: 0.3701, loss_bbox: 0.6385, d0.loss_cls: 0.4209, d0.loss_bbox: 0.7689, d1.loss_cls: 0.4017, d1.loss_bbox: 0.6774, d2.loss_cls: 0.3826, d2.loss_bbox: 0.6605, d3.loss_cls: 0.3751, d3.loss_bbox: 0.6508, d4.loss_cls: 0.3697, d4.loss_bbox: 0.6448, aux_task0.loss_heatmap: 0.5178, aux_task0.loss_bbox: 0.1988, aux_task1.loss_heatmap: 0.6919, aux_task1.loss_bbox: 0.2632, aux_task2.loss_heatmap: 0.6994, aux_task2.loss_bbox: 0.2818, aux_task3.loss_heatmap: 0.5247, aux_task3.loss_bbox: 0.2701, aux_task4.loss_heatmap: 0.3690, aux_task4.loss_bbox: 0.2225, aux_task5.loss_heatmap: 0.3924, aux_task5.loss_bbox: 0.2747, loss: 11.0672, grad_norm: 79.7316
2025-04-05 21:27:02,415 - mmdet - INFO - Epoch [4][8250/61790]	lr: 2.499e-05, eta: 5 days, 15:30:02, time: 0.470, data_time: 0.011, memory: 6601, loss_cls: 0.3591, loss_bbox: 0.6367, d0.loss_cls: 0.4165, d0.loss_bbox: 0.7635, d1.loss_cls: 0.3922, d1.loss_bbox: 0.6756, d2.loss_cls: 0.3734, d2.loss_bbox: 0.6554, d3.loss_cls: 0.3657, d3.loss_bbox: 0.6462, d4.loss_cls: 0.3592, d4.loss_bbox: 0.6424, aux_task0.loss_heatmap: 0.4808, aux_task0.loss_bbox: 0.1987, aux_task1.loss_heatmap: 0.7114, aux_task1.loss_bbox: 0.2809, aux_task2.loss_heatmap: 0.7351, aux_task2.loss_bbox: 0.2942, aux_task3.loss_heatmap: 0.5743, aux_task3.loss_bbox: 0.2740, aux_task4.loss_heatmap: 0.3687, aux_task4.loss_bbox: 0.2146, aux_task5.loss_heatmap: 0.4271, aux_task5.loss_bbox: 0.2739, loss: 11.1199, grad_norm: 78.3426
2025-04-05 21:27:25,894 - mmdet - INFO - Epoch [4][8300/61790]	lr: 2.500e-05, eta: 5 days, 15:29:49, time: 0.470, data_time: 0.010, memory: 6601, loss_cls: 0.3716, loss_bbox: 0.6406, d0.loss_cls: 0.4276, d0.loss_bbox: 0.7787, d1.loss_cls: 0.4039, d1.loss_bbox: 0.6866, d2.loss_cls: 0.3874, d2.loss_bbox: 0.6650, d3.loss_cls: 0.3755, d3.loss_bbox: 0.6523, d4.loss_cls: 0.3710, d4.loss_bbox: 0.6473, aux_task0.loss_heatmap: 0.5257, aux_task0.loss_bbox: 0.2101, aux_task1.loss_heatmap: 0.7083, aux_task1.loss_bbox: 0.2675, aux_task2.loss_heatmap: 0.7260, aux_task2.loss_bbox: 0.2859, aux_task3.loss_heatmap: 0.4532, aux_task3.loss_bbox: 0.2643, aux_task4.loss_heatmap: 0.3955, aux_task4.loss_bbox: 0.2253, aux_task5.loss_heatmap: 0.4069, aux_task5.loss_bbox: 0.2642, loss: 11.1406, grad_norm: 76.1921
2025-04-05 21:27:49,163 - mmdet - INFO - Epoch [4][8350/61790]	lr: 2.501e-05, eta: 5 days, 15:29:08, time: 0.465, data_time: 0.008, memory: 6601, loss_cls: 0.3604, loss_bbox: 0.6307, d0.loss_cls: 0.4157, d0.loss_bbox: 0.7606, d1.loss_cls: 0.3925, d1.loss_bbox: 0.6720, d2.loss_cls: 0.3760, d2.loss_bbox: 0.6521, d3.loss_cls: 0.3634, d3.loss_bbox: 0.6431, d4.loss_cls: 0.3587, d4.loss_bbox: 0.6357, aux_task0.loss_heatmap: 0.4624, aux_task0.loss_bbox: 0.1983, aux_task1.loss_heatmap: 0.6926, aux_task1.loss_bbox: 0.2668, aux_task2.loss_heatmap: 0.6803, aux_task2.loss_bbox: 0.2778, aux_task3.loss_heatmap: 0.4574, aux_task3.loss_bbox: 0.2564, aux_task4.loss_heatmap: 0.3766, aux_task4.loss_bbox: 0.2261, aux_task5.loss_heatmap: 0.4048, aux_task5.loss_bbox: 0.2746, loss: 10.8352, grad_norm: 79.7273
2025-04-05 21:28:12,844 - mmdet - INFO - Epoch [4][8400/61790]	lr: 2.501e-05, eta: 5 days, 15:29:19, time: 0.474, data_time: 0.008, memory: 6601, loss_cls: 0.3728, loss_bbox: 0.6361, d0.loss_cls: 0.4227, d0.loss_bbox: 0.7670, d1.loss_cls: 0.4039, d1.loss_bbox: 0.6750, d2.loss_cls: 0.3859, d2.loss_bbox: 0.6596, d3.loss_cls: 0.3788, d3.loss_bbox: 0.6490, d4.loss_cls: 0.3743, d4.loss_bbox: 0.6423, aux_task0.loss_heatmap: 0.5171, aux_task0.loss_bbox: 0.1953, aux_task1.loss_heatmap: 0.7105, aux_task1.loss_bbox: 0.2607, aux_task2.loss_heatmap: 0.7114, aux_task2.loss_bbox: 0.2886, aux_task3.loss_heatmap: 0.5417, aux_task3.loss_bbox: 0.2526, aux_task4.loss_heatmap: 0.3865, aux_task4.loss_bbox: 0.2244, aux_task5.loss_heatmap: 0.3864, aux_task5.loss_bbox: 0.2723, loss: 11.1149, grad_norm: 77.6022
2025-04-05 21:28:36,164 - mmdet - INFO - Epoch [4][8450/61790]	lr: 2.502e-05, eta: 5 days, 15:28:46, time: 0.466, data_time: 0.010, memory: 6601, loss_cls: 0.3561, loss_bbox: 0.6258, d0.loss_cls: 0.4088, d0.loss_bbox: 0.7563, d1.loss_cls: 0.3893, d1.loss_bbox: 0.6654, d2.loss_cls: 0.3729, d2.loss_bbox: 0.6454, d3.loss_cls: 0.3619, d3.loss_bbox: 0.6370, d4.loss_cls: 0.3562, d4.loss_bbox: 0.6331, aux_task0.loss_heatmap: 0.4804, aux_task0.loss_bbox: 0.1994, aux_task1.loss_heatmap: 0.6694, aux_task1.loss_bbox: 0.2619, aux_task2.loss_heatmap: 0.6840, aux_task2.loss_bbox: 0.2805, aux_task3.loss_heatmap: 0.4891, aux_task3.loss_bbox: 0.2573, aux_task4.loss_heatmap: 0.3819, aux_task4.loss_bbox: 0.2187, aux_task5.loss_heatmap: 0.4148, aux_task5.loss_bbox: 0.2740, loss: 10.8197, grad_norm: 77.8372
2025-04-05 21:28:59,672 - mmdet - INFO - Epoch [4][8500/61790]	lr: 2.503e-05, eta: 5 days, 15:28:35, time: 0.470, data_time: 0.010, memory: 6601, loss_cls: 0.3690, loss_bbox: 0.6451, d0.loss_cls: 0.4248, d0.loss_bbox: 0.7653, d1.loss_cls: 0.4043, d1.loss_bbox: 0.6799, d2.loss_cls: 0.3864, d2.loss_bbox: 0.6645, d3.loss_cls: 0.3740, d3.loss_bbox: 0.6563, d4.loss_cls: 0.3698, d4.loss_bbox: 0.6496, aux_task0.loss_heatmap: 0.5495, aux_task0.loss_bbox: 0.2097, aux_task1.loss_heatmap: 0.7132, aux_task1.loss_bbox: 0.2731, aux_task2.loss_heatmap: 0.6829, aux_task2.loss_bbox: 0.2855, aux_task3.loss_heatmap: 0.4525, aux_task3.loss_bbox: 0.2780, aux_task4.loss_heatmap: 0.3939, aux_task4.loss_bbox: 0.2171, aux_task5.loss_heatmap: 0.4024, aux_task5.loss_bbox: 0.2693, loss: 11.1162, grad_norm: 78.9196
2025-04-05 21:29:23,022 - mmdet - INFO - Epoch [4][8550/61790]	lr: 2.504e-05, eta: 5 days, 15:28:05, time: 0.467, data_time: 0.008, memory: 6601, loss_cls: 0.3685, loss_bbox: 0.6332, d0.loss_cls: 0.4188, d0.loss_bbox: 0.7673, d1.loss_cls: 0.4020, d1.loss_bbox: 0.6741, d2.loss_cls: 0.3832, d2.loss_bbox: 0.6559, d3.loss_cls: 0.3754, d3.loss_bbox: 0.6445, d4.loss_cls: 0.3698, d4.loss_bbox: 0.6379, aux_task0.loss_heatmap: 0.4861, aux_task0.loss_bbox: 0.1982, aux_task1.loss_heatmap: 0.6808, aux_task1.loss_bbox: 0.2566, aux_task2.loss_heatmap: 0.7260, aux_task2.loss_bbox: 0.2923, aux_task3.loss_heatmap: 0.5478, aux_task3.loss_bbox: 0.2631, aux_task4.loss_heatmap: 0.3841, aux_task4.loss_bbox: 0.2217, aux_task5.loss_heatmap: 0.3864, aux_task5.loss_bbox: 0.2725, loss: 11.0465, grad_norm: 80.2250
2025-04-05 21:29:46,184 - mmdet - INFO - Epoch [4][8600/61790]	lr: 2.505e-05, eta: 5 days, 15:27:12, time: 0.463, data_time: 0.009, memory: 6601, loss_cls: 0.3679, loss_bbox: 0.6449, d0.loss_cls: 0.4231, d0.loss_bbox: 0.7729, d1.loss_cls: 0.4024, d1.loss_bbox: 0.6829, d2.loss_cls: 0.3831, d2.loss_bbox: 0.6643, d3.loss_cls: 0.3746, d3.loss_bbox: 0.6555, d4.loss_cls: 0.3676, d4.loss_bbox: 0.6512, aux_task0.loss_heatmap: 0.5057, aux_task0.loss_bbox: 0.1985, aux_task1.loss_heatmap: 0.6951, aux_task1.loss_bbox: 0.2689, aux_task2.loss_heatmap: 0.6757, aux_task2.loss_bbox: 0.2681, aux_task3.loss_heatmap: 0.5649, aux_task3.loss_bbox: 0.2782, aux_task4.loss_heatmap: 0.3805, aux_task4.loss_bbox: 0.2245, aux_task5.loss_heatmap: 0.3624, aux_task5.loss_bbox: 0.2632, loss: 11.0761, grad_norm: 80.3889
2025-04-05 21:30:09,347 - mmdet - INFO - Epoch [4][8650/61790]	lr: 2.506e-05, eta: 5 days, 15:26:20, time: 0.463, data_time: 0.008, memory: 6601, loss_cls: 0.3672, loss_bbox: 0.6396, d0.loss_cls: 0.4247, d0.loss_bbox: 0.7699, d1.loss_cls: 0.4012, d1.loss_bbox: 0.6792, d2.loss_cls: 0.3835, d2.loss_bbox: 0.6616, d3.loss_cls: 0.3739, d3.loss_bbox: 0.6506, d4.loss_cls: 0.3682, d4.loss_bbox: 0.6450, aux_task0.loss_heatmap: 0.5320, aux_task0.loss_bbox: 0.2087, aux_task1.loss_heatmap: 0.6957, aux_task1.loss_bbox: 0.2651, aux_task2.loss_heatmap: 0.7033, aux_task2.loss_bbox: 0.2844, aux_task3.loss_heatmap: 0.5116, aux_task3.loss_bbox: 0.2566, aux_task4.loss_heatmap: 0.3981, aux_task4.loss_bbox: 0.2216, aux_task5.loss_heatmap: 0.4166, aux_task5.loss_bbox: 0.2804, loss: 11.1388, grad_norm: 79.6905
2025-04-05 21:30:32,761 - mmdet - INFO - Epoch [4][8700/61790]	lr: 2.506e-05, eta: 5 days, 15:25:58, time: 0.468, data_time: 0.009, memory: 6601, loss_cls: 0.3714, loss_bbox: 0.6284, d0.loss_cls: 0.4303, d0.loss_bbox: 0.7634, d1.loss_cls: 0.4102, d1.loss_bbox: 0.6719, d2.loss_cls: 0.3902, d2.loss_bbox: 0.6550, d3.loss_cls: 0.3774, d3.loss_bbox: 0.6423, d4.loss_cls: 0.3710, d4.loss_bbox: 0.6357, aux_task0.loss_heatmap: 0.5174, aux_task0.loss_bbox: 0.2002, aux_task1.loss_heatmap: 0.6945, aux_task1.loss_bbox: 0.2638, aux_task2.loss_heatmap: 0.6951, aux_task2.loss_bbox: 0.2816, aux_task3.loss_heatmap: 0.5601, aux_task3.loss_bbox: 0.2631, aux_task4.loss_heatmap: 0.4139, aux_task4.loss_bbox: 0.2207, aux_task5.loss_heatmap: 0.3860, aux_task5.loss_bbox: 0.2678, loss: 11.1112, grad_norm: 81.1580
2025-04-05 21:30:56,705 - mmdet - INFO - Epoch [4][8750/61790]	lr: 2.507e-05, eta: 5 days, 15:26:39, time: 0.479, data_time: 0.013, memory: 6638, loss_cls: 0.3662, loss_bbox: 0.6372, d0.loss_cls: 0.4213, d0.loss_bbox: 0.7667, d1.loss_cls: 0.3990, d1.loss_bbox: 0.6788, d2.loss_cls: 0.3812, d2.loss_bbox: 0.6579, d3.loss_cls: 0.3731, d3.loss_bbox: 0.6484, d4.loss_cls: 0.3672, d4.loss_bbox: 0.6427, aux_task0.loss_heatmap: 0.5060, aux_task0.loss_bbox: 0.2050, aux_task1.loss_heatmap: 0.6901, aux_task1.loss_bbox: 0.2664, aux_task2.loss_heatmap: 0.6752, aux_task2.loss_bbox: 0.2787, aux_task3.loss_heatmap: 0.5853, aux_task3.loss_bbox: 0.2629, aux_task4.loss_heatmap: 0.3938, aux_task4.loss_bbox: 0.2273, aux_task5.loss_heatmap: 0.4207, aux_task5.loss_bbox: 0.2751, loss: 11.1259, grad_norm: 78.6089
