2025-05-04 17:13:32,798 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.20 | packaged by conda-forge | (default, Sep 30 2024, 17:52:49) [GCC 13.3.0]
CUDA available: True
GPU 0,1: NVIDIA GeForce RTX 4090 D
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.6, V11.6.55
GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0
PyTorch: 1.13.0
PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2022.1-Product Build 20220311 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.6
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.14.0
OpenCV: 4.11.0
MMCV: 1.7.0
MMCV Compiler: GCC 9.4
MMCV CUDA Compiler: 11.6
MMDetection: 2.27.0
MMSegmentation: 0.30.0
MMDetection3D: 1.0.0rc6+637e2ea
spconv2.0: True
------------------------------------------------------------

2025-05-04 17:13:33,621 - mmdet - INFO - 分布式训练: True
2025-05-04 17:13:34,418 - mmdet - INFO - 配置:
point_cloud_range = [-54, -54, -5.0, 54, 54, 3.0]
class_names = [
    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',
    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
]
dataset_type = 'NuScenesDataset'
data_root = 'data/nuscenes/'
input_modality = dict(
    use_lidar=True,
    use_camera=False,
    use_radar=False,
    use_map=False,
    use_external=False)
file_client_args = dict(backend='disk')
train_pipeline = [
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        file_client_args=dict(backend='disk')),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=9,
        use_dim=[0, 1, 2, 3, 4],
        file_client_args=dict(backend='disk'),
        pad_empty_sweeps=True,
        remove_close=True),
    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),
    dict(
        type='ObjectSample',
        db_sampler=dict(
            data_root='data/nuscenes/',
            info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',
            rate=1.0,
            prepare=dict(
                filter_by_difficulty=[-1],
                filter_by_min_points=dict(
                    car=5,
                    truck=5,
                    bus=5,
                    trailer=5,
                    construction_vehicle=5,
                    traffic_cone=5,
                    barrier=5,
                    motorcycle=5,
                    bicycle=5,
                    pedestrian=5)),
            classes=[
                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                'traffic_cone'
            ],
            sample_groups=dict(
                car=2,
                truck=3,
                construction_vehicle=7,
                bus=4,
                trailer=6,
                barrier=2,
                motorcycle=6,
                bicycle=6,
                pedestrian=2,
                traffic_cone=2),
            points_loader=dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=[0, 1, 2, 3, 4],
                file_client_args=dict(backend='disk')))),
    dict(
        type='GlobalRotScaleTrans',
        rot_range=[-0.785, 0.785],
        scale_ratio_range=[0.9, 1.1],
        translation_std=[0.5, 0.5, 0.5]),
    dict(
        type='RandomFlip3D',
        sync_2d=False,
        flip_ratio_bev_horizontal=0.5,
        flip_ratio_bev_vertical=0.5),
    dict(
        type='PointsRangeFilter',
        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
    dict(
        type='ObjectRangeFilter',
        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
    dict(
        type='ObjectNameFilter',
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ]),
    dict(type='PointShuffle'),
    dict(
        type='DefaultFormatBundle3D',
        class_names=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ]),
    dict(type='Collect3D', keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])
]
test_pipeline = [
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        file_client_args=dict(backend='disk')),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=9,
        use_dim=[0, 1, 2, 3, 4],
        file_client_args=dict(backend='disk'),
        pad_empty_sweeps=True,
        remove_close=True),
    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),
    dict(
        type='MultiScaleFlipAug3D',
        img_scale=(1333, 800),
        pts_scale_ratio=1,
        flip=False,
        transforms=[
            dict(
                type='GlobalRotScaleTrans',
                rot_range=[0, 0],
                scale_ratio_range=[1.0, 1.0],
                translation_std=[0, 0, 0]),
            dict(type='RandomFlip3D'),
            dict(
                type='PointsRangeFilter',
                point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
            dict(
                type='DefaultFormatBundle3D',
                class_names=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ],
                with_label=False),
            dict(
                type='Collect3D',
                keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])
        ])
]
eval_pipeline = [
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        file_client_args=dict(backend='disk')),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=9,
        use_dim=[0, 1, 2, 3, 4],
        file_client_args=dict(backend='disk'),
        pad_empty_sweeps=True,
        remove_close=True),
    dict(
        type='DefaultFormatBundle3D',
        class_names=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        with_label=False),
    dict(type='Collect3D', keys=['points'])
]
data = dict(
    samples_per_gpu=2,
    workers_per_gpu=4,
    train=dict(
        type='CBGSDataset',
        data_root='data/nuscenes/',
        ann_file='data/nuscenes/nuscenes_infos_train.pkl',
        pipeline=[
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                file_client_args=dict(backend='disk')),
            dict(
                type='LoadPointsFromMultiSweeps',
                sweeps_num=10,
                file_client_args=dict(backend='disk')),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True),
            dict(
                type='GlobalRotScaleTrans',
                rot_range=[-0.3925, 0.3925],
                scale_ratio_range=[0.95, 1.05],
                translation_std=[0, 0, 0]),
            dict(type='RandomFlip3D', flip_ratio_bev_horizontal=0.5),
            dict(
                type='PointsRangeFilter',
                point_cloud_range=[-50, -50, -5, 50, 50, 3]),
            dict(
                type='ObjectRangeFilter',
                point_cloud_range=[-50, -50, -5, 50, 50, 3]),
            dict(
                type='ObjectNameFilter',
                classes=[
                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',
                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',
                    'barrier'
                ]),
            dict(type='PointShuffle'),
            dict(
                type='DefaultFormatBundle3D',
                class_names=[
                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',
                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',
                    'barrier'
                ]),
            dict(
                type='Collect3D',
                keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])
        ],
        classes=[
            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',
            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=False,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=False,
        box_type_3d='LiDAR',
        split=14,
        dataset=dict(
            type='NuScenesDataset',
            data_root='data/nuscenes/',
            ann_file='data/nuscenes/nuscenes_infos_train.pkl',
            pipeline=[
                dict(
                    type='LoadPointsFromFile',
                    coord_type='LIDAR',
                    load_dim=5,
                    use_dim=5,
                    file_client_args=dict(backend='disk')),
                dict(
                    type='LoadPointsFromMultiSweeps',
                    sweeps_num=9,
                    use_dim=[0, 1, 2, 3, 4],
                    file_client_args=dict(backend='disk'),
                    pad_empty_sweeps=True,
                    remove_close=True),
                dict(
                    type='LoadAnnotations3D',
                    with_bbox_3d=True,
                    with_label_3d=True),
                dict(
                    type='ObjectSample',
                    db_sampler=dict(
                        data_root='data/nuscenes/',
                        info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',
                        rate=1.0,
                        prepare=dict(
                            filter_by_difficulty=[-1],
                            filter_by_min_points=dict(
                                car=5,
                                truck=5,
                                bus=5,
                                trailer=5,
                                construction_vehicle=5,
                                traffic_cone=5,
                                barrier=5,
                                motorcycle=5,
                                bicycle=5,
                                pedestrian=5)),
                        classes=[
                            'car', 'truck', 'construction_vehicle', 'bus',
                            'trailer', 'barrier', 'motorcycle', 'bicycle',
                            'pedestrian', 'traffic_cone'
                        ],
                        sample_groups=dict(
                            car=2,
                            truck=3,
                            construction_vehicle=7,
                            bus=4,
                            trailer=6,
                            barrier=2,
                            motorcycle=6,
                            bicycle=6,
                            pedestrian=2,
                            traffic_cone=2),
                        points_loader=dict(
                            type='LoadPointsFromFile',
                            coord_type='LIDAR',
                            load_dim=5,
                            use_dim=[0, 1, 2, 3, 4],
                            file_client_args=dict(backend='disk')))),
                dict(
                    type='GlobalRotScaleTrans',
                    rot_range=[-0.785, 0.785],
                    scale_ratio_range=[0.9, 1.1],
                    translation_std=[0.5, 0.5, 0.5]),
                dict(
                    type='RandomFlip3D',
                    sync_2d=False,
                    flip_ratio_bev_horizontal=0.5,
                    flip_ratio_bev_vertical=0.5),
                dict(
                    type='PointsRangeFilter',
                    point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
                dict(
                    type='ObjectRangeFilter',
                    point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
                dict(
                    type='ObjectNameFilter',
                    classes=[
                        'car', 'truck', 'construction_vehicle', 'bus',
                        'trailer', 'barrier', 'motorcycle', 'bicycle',
                        'pedestrian', 'traffic_cone'
                    ]),
                dict(type='PointShuffle'),
                dict(
                    type='DefaultFormatBundle3D',
                    class_names=[
                        'car', 'truck', 'construction_vehicle', 'bus',
                        'trailer', 'barrier', 'motorcycle', 'bicycle',
                        'pedestrian', 'traffic_cone'
                    ]),
                dict(
                    type='Collect3D',
                    keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])
            ],
            classes=[
                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                'traffic_cone'
            ],
            test_mode=False,
            use_valid_flag=True,
            box_type_3d='LiDAR')),
    val=dict(
        type='NuScenesDataset',
        data_root='data/nuscenes/',
        ann_file='data/nuscenes/nuscenes_infos_val.pkl',
        pipeline=[
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                file_client_args=dict(backend='disk')),
            dict(
                type='LoadPointsFromMultiSweeps',
                sweeps_num=9,
                use_dim=[0, 1, 2, 3, 4],
                file_client_args=dict(backend='disk'),
                pad_empty_sweeps=True,
                remove_close=True),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True),
            dict(
                type='MultiScaleFlipAug3D',
                img_scale=(1333, 800),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type='GlobalRotScaleTrans',
                        rot_range=[0, 0],
                        scale_ratio_range=[1.0, 1.0],
                        translation_std=[0, 0, 0]),
                    dict(type='RandomFlip3D'),
                    dict(
                        type='PointsRangeFilter',
                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
                    dict(
                        type='DefaultFormatBundle3D',
                        class_names=[
                            'car', 'truck', 'construction_vehicle', 'bus',
                            'trailer', 'barrier', 'motorcycle', 'bicycle',
                            'pedestrian', 'traffic_cone'
                        ],
                        with_label=False),
                    dict(
                        type='Collect3D',
                        keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])
                ])
        ],
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=False,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=True,
        box_type_3d='LiDAR'),
    test=dict(
        type='NuScenesDataset',
        data_root='data/nuscenes/',
        ann_file='data/nuscenes/nuscenes_infos_val.pkl',
        pipeline=[
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                file_client_args=dict(backend='disk')),
            dict(
                type='LoadPointsFromMultiSweeps',
                sweeps_num=9,
                use_dim=[0, 1, 2, 3, 4],
                file_client_args=dict(backend='disk'),
                pad_empty_sweeps=True,
                remove_close=True),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True),
            dict(
                type='MultiScaleFlipAug3D',
                img_scale=(1333, 800),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type='GlobalRotScaleTrans',
                        rot_range=[0, 0],
                        scale_ratio_range=[1.0, 1.0],
                        translation_std=[0, 0, 0]),
                    dict(type='RandomFlip3D'),
                    dict(
                        type='PointsRangeFilter',
                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
                    dict(
                        type='DefaultFormatBundle3D',
                        class_names=[
                            'car', 'truck', 'construction_vehicle', 'bus',
                            'trailer', 'barrier', 'motorcycle', 'bicycle',
                            'pedestrian', 'traffic_cone'
                        ],
                        with_label=False),
                    dict(
                        type='Collect3D',
                        keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])
                ])
        ],
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=False,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=True,
        box_type_3d='LiDAR'))
evaluation = dict(
    interval=5,
    pipeline=[
        dict(
            type='LoadPointsFromFile',
            coord_type='LIDAR',
            load_dim=5,
            use_dim=5,
            file_client_args=dict(backend='disk')),
        dict(
            type='LoadPointsFromMultiSweeps',
            sweeps_num=10,
            file_client_args=dict(backend='disk')),
        dict(
            type='DefaultFormatBundle3D',
            class_names=[
                'car', 'truck', 'trailer', 'bus', 'construction_vehicle',
                'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',
                'barrier'
            ],
            with_label=False),
        dict(type='Collect3D', keys=['points'])
    ])
optimizer = dict(type='AdamW', lr=1.25e-05, weight_decay=0.01)
optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))
lr_config = dict(
    policy='cyclic',
    target_ratio=(10, 0.0001),
    cyclic_times=1,
    step_ratio_up=0.4)
momentum_config = dict(
    policy='cyclic',
    target_ratio=(0.8947368421052632, 1),
    cyclic_times=1,
    step_ratio_up=0.4)
runner = dict(type='EpochBasedRunner', max_epochs=20)
checkpoint_config = dict(interval=1, max_keep_ckpts=1)
log_config = dict(
    interval=50,
    hooks=[dict(type='TextLoggerHook'),
           dict(type='TensorboardLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
work_dir = './work_dirs/lidar_0075v_900q_split14_cascadeded_secondmamba2/两张卡每张卡2'
load_from = None
resume_from = None
workflow = [('train', 1)]
opencv_num_threads = 0
mp_start_method = 'fork'
plugin = 'plugin/futr3d'
voxel_size = [0.075, 0.075, 0.2]
center_head = dict(
    type='CenterHead',
    in_channels=512,
    tasks=[
        dict(num_class=1, class_names=['car']),
        dict(num_class=2, class_names=['truck', 'construction_vehicle']),
        dict(num_class=2, class_names=['bus', 'trailer']),
        dict(num_class=1, class_names=['barrier']),
        dict(num_class=2, class_names=['motorcycle', 'bicycle']),
        dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])
    ],
    common_heads=dict(
        reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),
    share_conv_channel=64,
    bbox_coder=dict(
        type='CenterPointBBoxCoder',
        pc_range=[-54, -54],
        post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],
        max_num=500,
        score_threshold=0.1,
        out_size_factor=8,
        voxel_size=[0.075, 0.075],
        code_size=9),
    separate_head=dict(type='SeparateHead', init_bias=-2.19, final_kernel=3),
    loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),
    loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),
    norm_bbox=True)
model = dict(
    type='FUTR3D',
    aux_weight=0.5,
    pts_voxel_layer=dict(
        max_num_points=10,
        voxel_size=[0.075, 0.075, 0.2],
        max_voxels=(120000, 160000),
        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
    pts_voxel_encoder=dict(type='HardSimpleVFE', num_features=5),
    pts_middle_encoder=dict(
        type='SparseEncoder',
        in_channels=5,
        sparse_shape=[41, 1440, 1440],
        output_channels=128,
        order=('conv', 'norm', 'act'),
        encoder_channels=((16, 16, 32), (32, 32, 64), (64, 64, 128), (128,
                                                                      128)),
        encoder_paddings=((0, 0, 1), (0, 0, 1), (0, 0, [0, 1, 1]), (0, 0)),
        block_type='basicblock'),
    pts_backbone=dict(
        type='CascadeDEDBackbone',
        in_channels=256,
        model_cfg=dict(
            USE_SECONDMAMBA=True,
            SECONDMAMBA_NUM_LAYERS=2,
            FEATURE_DIM=256,
            NUM_LAYERS=2,
            NUM_SBB=[2, 1, 1],
            DOWN_STRIDES=[1, 2, 2])),
    pts_neck=dict(
        type='FPN',
        norm_cfg=dict(type='BN2d', eps=0.001, momentum=0.01),
        act_cfg=dict(type='ReLU', inplace=False),
        in_channels=[256],
        out_channels=256,
        start_level=0,
        add_extra_convs=True,
        num_outs=4,
        relu_before_extra_convs=True),
    pts_bbox_head=dict(
        type='FUTR3DHead',
        use_dab=True,
        anchor_size=3,
        use_aux=True,
        aux_head=dict(
            type='CenterHead',
            in_channels=512,
            tasks=[
                dict(num_class=1, class_names=['car']),
                dict(
                    num_class=2, class_names=['truck',
                                              'construction_vehicle']),
                dict(num_class=2, class_names=['bus', 'trailer']),
                dict(num_class=1, class_names=['barrier']),
                dict(num_class=2, class_names=['motorcycle', 'bicycle']),
                dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])
            ],
            common_heads=dict(
                reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),
            share_conv_channel=64,
            bbox_coder=dict(
                type='CenterPointBBoxCoder',
                pc_range=[-54, -54],
                post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],
                max_num=500,
                score_threshold=0.1,
                out_size_factor=8,
                voxel_size=[0.075, 0.075],
                code_size=9),
            separate_head=dict(
                type='SeparateHead', init_bias=-2.19, final_kernel=3),
            loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),
            loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),
            norm_bbox=True),
        mix_selection=False,
        num_query=900,
        num_classes=10,
        in_channels=256,
        pc_range=[-54, -54, -5.0, 54, 54, 3.0],
        sync_cls_avg_factor=True,
        with_box_refine=True,
        as_two_stage=False,
        code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],
        transformer=dict(
            type='FUTR3DTransformer',
            use_dab=True,
            decoder=dict(
                type='FUTR3DTransformerDecoder',
                num_layers=6,
                use_dab=True,
                anchor_size=3,
                return_intermediate=True,
                transformerlayers=dict(
                    type='DetrTransformerDecoderLayer',
                    attn_cfgs=[
                        dict(
                            type='MultiheadAttention',
                            embed_dims=256,
                            num_heads=8,
                            dropout=0.1),
                        dict(type='FUTR3DAttention', embed_dims=256)
                    ],
                    feedforward_channels=1024,
                    ffn_dropout=0.1,
                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',
                                     'ffn', 'norm')))),
        positional_encoding=dict(
            type='SinePositionalEncoding',
            num_feats=128,
            normalize=True,
            offset=-0.5),
        loss_cls=dict(
            type='FocalLoss',
            use_sigmoid=True,
            gamma=2.0,
            alpha=0.25,
            loss_weight=2.0),
        loss_bbox=dict(type='L1Loss', loss_weight=0.25),
        loss_iou=dict(type='GIoULoss', loss_weight=0)),
    train_cfg=dict(
        pts=dict(
            point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0],
            pc_range=[-54, -54, -5.0, 54, 54, 3.0],
            grid_size=[1440, 1440, 40],
            voxel_size=[0.075, 0.075, 0.2],
            out_size_factor=8,
            dense_reg=1,
            gaussian_overlap=0.1,
            max_objs=500,
            min_radius=2,
            code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],
            assigner=dict(
                type='HungarianAssigner3D',
                cls_cost=dict(type='FocalLossCost', weight=2.0),
                reg_cost=dict(type='BBox3DL1Cost', weight=0.25),
                iou_cost=dict(type='IoUCost', weight=0)))),
    test_cfg=dict(
        pts=dict(
            pc_range=[-54, -54],
            post_center_limit_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],
            max_per_img=500,
            max_pool_nms=False,
            min_radius=[4, 12, 10, 1, 0.85, 0.175],
            out_size_factor=8,
            voxel_size=[0.075, 0.075],
            nms_type='circle',
            pre_max_size=1000,
            post_max_size=83,
            nms_thr=0.2,
            max_num=300,
            score_threshold=0,
            post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0])))
db_sampler = dict(
    data_root='data/nuscenes/',
    info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',
    rate=1.0,
    prepare=dict(
        filter_by_difficulty=[-1],
        filter_by_min_points=dict(
            car=5,
            truck=5,
            bus=5,
            trailer=5,
            construction_vehicle=5,
            traffic_cone=5,
            barrier=5,
            motorcycle=5,
            bicycle=5,
            pedestrian=5)),
    classes=[
        'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',
        'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
    ],
    sample_groups=dict(
        car=2,
        truck=3,
        construction_vehicle=7,
        bus=4,
        trailer=6,
        barrier=2,
        motorcycle=6,
        bicycle=6,
        pedestrian=2,
        traffic_cone=2),
    points_loader=dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=[0, 1, 2, 3, 4],
        file_client_args=dict(backend='disk')))
find_unused_parameters = True
custom_hooks = [dict(type='FadeOjectSampleHook', num_last_epochs=5)]
gpu_ids = range(0, 2)

2025-05-04 17:13:34,418 - mmdet - INFO - 设置随机种子为 0, deterministic: False
2025-05-04 17:13:34,891 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
Name of parameter - Initialization information

pts_middle_encoder.conv_input.0.weight - torch.Size([16, 3, 3, 3, 5]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv_input.1.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv_input.1.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.0.conv1.weight - torch.Size([16, 3, 3, 3, 16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.0.bn1.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.0.bn1.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.0.conv2.weight - torch.Size([16, 3, 3, 3, 16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.0.bn2.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.0.bn2.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.1.conv1.weight - torch.Size([16, 3, 3, 3, 16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.1.bn1.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.1.bn1.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.1.conv2.weight - torch.Size([16, 3, 3, 3, 16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.1.bn2.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.1.bn2.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.2.0.weight - torch.Size([32, 3, 3, 3, 16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.2.1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.2.1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.0.conv1.weight - torch.Size([32, 3, 3, 3, 32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.0.bn1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.0.bn1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.0.conv2.weight - torch.Size([32, 3, 3, 3, 32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.0.bn2.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.0.bn2.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.1.conv1.weight - torch.Size([32, 3, 3, 3, 32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.1.bn1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.1.bn1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.1.conv2.weight - torch.Size([32, 3, 3, 3, 32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.1.bn2.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.1.bn2.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.2.0.weight - torch.Size([64, 3, 3, 3, 32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.2.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.2.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.0.conv1.weight - torch.Size([64, 3, 3, 3, 64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.0.conv2.weight - torch.Size([64, 3, 3, 3, 64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.0.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.1.conv1.weight - torch.Size([64, 3, 3, 3, 64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.1.conv2.weight - torch.Size([64, 3, 3, 3, 64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.2.0.weight - torch.Size([128, 3, 3, 3, 64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.2.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.2.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.0.conv1.weight - torch.Size([128, 3, 3, 3, 128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.0.conv2.weight - torch.Size([128, 3, 3, 3, 128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.1.conv1.weight - torch.Size([128, 3, 3, 3, 128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.1.conv2.weight - torch.Size([128, 3, 3, 3, 128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv_out.0.weight - torch.Size([128, 3, 1, 1, 128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv_out.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv_out.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.0.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.0.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.downsample_layer.0.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.downsample_layer.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.0.downsample_layer.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.1.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.downsample_layer.0.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.downsample_layer.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.0.downsample_layer.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.encoder.2.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder.0.0.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder.0.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder.0.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder.1.0.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder.1.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder.1.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder_norm.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder_norm.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder_norm.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.0.decoder_norm.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.0.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.0.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.downsample_layer.0.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.downsample_layer.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.0.downsample_layer.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.1.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.downsample_layer.0.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.downsample_layer.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.0.downsample_layer.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.1.conv1.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.encoder.2.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder.0.0.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder.0.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder.0.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder.1.0.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder.1.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder.1.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder_norm.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder_norm.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder_norm.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.layers.1.decoder_norm.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.0.dt_bias_H - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.0.dt_bias_V - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.0.A_log_H - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.0.A_log_V - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.0.D_H - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.0.D_V - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.0.pos_embed - torch.Size([1, 256, 180, 180]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.0.in_proj_H.weight - torch.Size([524, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.0.in_proj_V.weight - torch.Size([524, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.0.out_proj.weight - torch.Size([256, 512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.0.out_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.0.out_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.0.sincos_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.0.sincos_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.3.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.6.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.6.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.7.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.9.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.9.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.10.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.0.10.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.0.dt_bias_H - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.0.dt_bias_V - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.0.A_log_H - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.0.A_log_V - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.0.D_H - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.0.D_V - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.0.pos_embed - torch.Size([1, 256, 180, 180]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.0.in_proj_H.weight - torch.Size([524, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.0.in_proj_V.weight - torch.Size([524, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.0.out_proj.weight - torch.Size([256, 512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.0.out_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.0.out_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.0.conv1d_H.weight - torch.Size([256, 256, 4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.0.conv1d_V.weight - torch.Size([256, 256, 4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.0.sincos_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.0.sincos_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.3.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.6.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.6.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.7.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.9.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.9.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.10.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.1.10.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.0.dt_bias_H - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.0.dt_bias_V - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.0.A_log_H - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.0.A_log_V - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.0.D_H - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.0.D_V - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.0.pos_embed - torch.Size([1, 256, 90, 90]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.0.in_proj_H.weight - torch.Size([524, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.0.in_proj_V.weight - torch.Size([524, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.0.out_proj.weight - torch.Size([256, 512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.0.out_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.0.out_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.0.conv1d_H.weight - torch.Size([256, 256, 4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.0.conv1d_V.weight - torch.Size([256, 256, 4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.0.sincos_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.0.sincos_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.3.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.6.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.6.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.7.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.9.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.9.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.10.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.2.10.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.3.0.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.3.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.3.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.4.0.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.4.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.blocks.4.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.norm_1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.norm_1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.norm_2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.0.norm_2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.0.dt_bias_H - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.0.dt_bias_V - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.0.A_log_H - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.0.A_log_V - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.0.D_H - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.0.D_V - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.0.pos_embed - torch.Size([1, 256, 180, 180]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.0.in_proj_H.weight - torch.Size([524, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.0.in_proj_V.weight - torch.Size([524, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.0.out_proj.weight - torch.Size([256, 512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.0.out_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.0.out_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.0.sincos_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.0.sincos_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.3.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.6.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.6.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.7.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.9.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.9.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.10.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.0.10.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.0.dt_bias_H - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.0.dt_bias_V - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.0.A_log_H - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.0.A_log_V - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.0.D_H - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.0.D_V - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.0.pos_embed - torch.Size([1, 256, 180, 180]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.0.in_proj_H.weight - torch.Size([524, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.0.in_proj_V.weight - torch.Size([524, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.0.out_proj.weight - torch.Size([256, 512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.0.out_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.0.out_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.0.conv1d_H.weight - torch.Size([256, 256, 4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.0.conv1d_V.weight - torch.Size([256, 256, 4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.0.sincos_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.0.sincos_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.3.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.6.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.6.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.7.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.9.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.9.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.10.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.1.10.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.0.dt_bias_H - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.0.dt_bias_V - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.0.A_log_H - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.0.A_log_V - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.0.D_H - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.0.D_V - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.0.pos_embed - torch.Size([1, 256, 90, 90]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.0.in_proj_H.weight - torch.Size([524, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.0.in_proj_V.weight - torch.Size([524, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.0.out_proj.weight - torch.Size([256, 512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.0.out_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.0.out_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.0.conv1d_H.weight - torch.Size([256, 256, 4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.0.conv1d_V.weight - torch.Size([256, 256, 4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.0.sincos_proj.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.0.sincos_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.3.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.6.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.6.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.7.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.9.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.9.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.10.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.2.10.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.3.0.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.3.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.3.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.4.0.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.4.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.blocks.4.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.norm_1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.norm_1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.norm_2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.secondmamba.1.norm_2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.lateral_convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.lateral_convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.fpn_convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.fpn_convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.fpn_convs.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.fpn_convs.3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.level_embeds - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.query_scale.layers.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.query_scale.layers.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.query_scale.layers.1.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.query_scale.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.ref_point_head.layers.0.weight - torch.Size([256, 384]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.ref_point_head.layers.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.ref_point_head.layers.1.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.ref_point_head.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.0.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.0.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.cls_branches.1.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.1.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.cls_branches.2.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.2.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.cls_branches.3.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.3.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.cls_branches.4.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.cls_branches.5.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.5.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.0.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.0.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.0.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.0.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.0.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.0.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.1.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.1.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.1.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.1.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.1.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.1.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.2.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.2.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.2.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.2.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.2.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.2.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.3.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.3.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.3.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.3.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.3.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.3.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.4.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.4.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.4.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.4.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.4.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.4.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.5.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.5.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.5.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.5.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.5.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.5.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.tgt_embed.weight - torch.Size([900, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.refpoint_embed.weight - torch.Size([900, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.shared_conv.conv.weight - torch.Size([64, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.shared_conv.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.shared_conv.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.heatmap.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.heatmap.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.heatmap.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.heatmap.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.heatmap.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.heatmap.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.heatmap.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.heatmap.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.heatmap.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.heatmap.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.heatmap.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.heatmap.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  
2025-05-04 17:13:34,917 - mmdet - INFO - Model:
FUTR3D(
  (pts_voxel_layer): Voxelization(voxel_size=[0.075, 0.075, 0.2], point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0], max_num_points=10, max_voxels=(120000, 160000), deterministic=True)
  (pts_voxel_encoder): HardSimpleVFE()
  (pts_middle_encoder): SparseEncoder(
    (conv_input): SparseSequential(
      (0): SubMConv3d(5, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
      (1): SyncBatchNorm(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
    (encoder_layers): SparseSequential(
      (encoder_layer1): SparseSequential(
        (0): SparseBasicBlock(
          (conv1): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn1): SyncBatchNorm(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (conv2): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn2): SyncBatchNorm(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (1): SparseBasicBlock(
          (conv1): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn1): SyncBatchNorm(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (conv2): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn2): SyncBatchNorm(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): SparseSequential(
          (0): SparseConv3d(16, 32, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
      (encoder_layer2): SparseSequential(
        (0): SparseBasicBlock(
          (conv1): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn1): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (conv2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn2): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (1): SparseBasicBlock(
          (conv1): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn1): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (conv2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn2): SyncBatchNorm(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): SparseSequential(
          (0): SparseConv3d(32, 64, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
      (encoder_layer3): SparseSequential(
        (0): SparseBasicBlock(
          (conv1): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (conv2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn2): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (1): SparseBasicBlock(
          (conv1): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn1): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (conv2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn2): SyncBatchNorm(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): SparseSequential(
          (0): SparseConv3d(64, 128, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[0, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
      (encoder_layer4): SparseSequential(
        (0): SparseBasicBlock(
          (conv1): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (conv2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (1): SparseBasicBlock(
          (conv1): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (conv2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn2): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
      )
    )
    (conv_out): SparseSequential(
      (0): SparseConv3d(128, 128, kernel_size=[3, 1, 1], stride=[2, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
      (1): SyncBatchNorm(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
  )
  (pts_backbone): CascadeDEDBackbone(
    (layers): ModuleList(
      (0): DEDBackbone(
        (encoder): ModuleList(
          (0): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
            (1): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
          (1): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
              (downsample_layer): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
            (1): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
          (2): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
              (downsample_layer): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
            (1): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
        )
        (decoder): ModuleList(
          (0): Sequential(
            (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (1): Sequential(
            (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
        )
        (decoder_norm): ModuleList(
          (0): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
      (1): DEDBackbone(
        (encoder): ModuleList(
          (0): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
            (1): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
          (1): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
              (downsample_layer): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
            (1): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
          (2): Sequential(
            (0): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
              (downsample_layer): Sequential(
                (0): Conv2d(256, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
                (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              )
            )
            (1): BasicBlock(
              (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu1): ReLU()
              (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
              (relu2): ReLU()
            )
          )
        )
        (decoder): ModuleList(
          (0): Sequential(
            (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (1): Sequential(
            (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
        )
        (decoder_norm): ModuleList(
          (0): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        )
      )
    )
    (secondmamba): Sequential(
      (0): SECONDMamba(
        (blocks): ModuleList(
          (0): Sequential(
            (0): SECONDMambaBlock(
              (in_proj_H): Linear(in_features=256, out_features=524, bias=False)
              (in_proj_V): Linear(in_features=256, out_features=524, bias=False)
              (act): SiLU()
              (out_proj): Linear(in_features=512, out_features=256, bias=False)
              (out_norm): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
              (sincos_proj): Linear(in_features=256, out_features=256, bias=True)
            )
            (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
            (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (4): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (5): ReLU()
            (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (7): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (8): ReLU()
            (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (10): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (11): ReLU()
          )
          (1): Sequential(
            (0): SECONDMambaBlock(
              (in_proj_H): Linear(in_features=256, out_features=524, bias=False)
              (in_proj_V): Linear(in_features=256, out_features=524, bias=False)
              (act): SiLU()
              (out_proj): Linear(in_features=512, out_features=256, bias=False)
              (out_norm): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
              (conv1d_H): Conv1d(256, 256, kernel_size=(4,), stride=(4,), bias=False)
              (conv1d_V): Conv1d(256, 256, kernel_size=(4,), stride=(4,), bias=False)
              (sincos_proj): Linear(in_features=256, out_features=256, bias=True)
            )
            (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
            (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (4): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (5): ReLU()
            (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (7): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (8): ReLU()
            (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (10): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (11): ReLU()
          )
          (2): Sequential(
            (0): SECONDMambaBlock(
              (in_proj_H): Linear(in_features=256, out_features=524, bias=False)
              (in_proj_V): Linear(in_features=256, out_features=524, bias=False)
              (act): SiLU()
              (out_proj): Linear(in_features=512, out_features=256, bias=False)
              (out_norm): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
              (conv1d_H): Conv1d(256, 256, kernel_size=(4,), stride=(4,), bias=False)
              (conv1d_V): Conv1d(256, 256, kernel_size=(4,), stride=(4,), bias=False)
              (sincos_proj): Linear(in_features=256, out_features=256, bias=True)
            )
            (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
            (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (4): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (5): ReLU()
            (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (7): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (8): ReLU()
            (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (10): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (11): ReLU()
          )
          (3): Sequential(
            (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (4): Sequential(
            (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
        )
        (norm_1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (norm_2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      )
      (1): SECONDMamba(
        (blocks): ModuleList(
          (0): Sequential(
            (0): SECONDMambaBlock(
              (in_proj_H): Linear(in_features=256, out_features=524, bias=False)
              (in_proj_V): Linear(in_features=256, out_features=524, bias=False)
              (act): SiLU()
              (out_proj): Linear(in_features=512, out_features=256, bias=False)
              (out_norm): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
              (sincos_proj): Linear(in_features=256, out_features=256, bias=True)
            )
            (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
            (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (4): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (5): ReLU()
            (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (7): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (8): ReLU()
            (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (10): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (11): ReLU()
          )
          (1): Sequential(
            (0): SECONDMambaBlock(
              (in_proj_H): Linear(in_features=256, out_features=524, bias=False)
              (in_proj_V): Linear(in_features=256, out_features=524, bias=False)
              (act): SiLU()
              (out_proj): Linear(in_features=512, out_features=256, bias=False)
              (out_norm): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
              (conv1d_H): Conv1d(256, 256, kernel_size=(4,), stride=(4,), bias=False)
              (conv1d_V): Conv1d(256, 256, kernel_size=(4,), stride=(4,), bias=False)
              (sincos_proj): Linear(in_features=256, out_features=256, bias=True)
            )
            (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
            (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (4): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (5): ReLU()
            (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (7): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (8): ReLU()
            (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (10): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (11): ReLU()
          )
          (2): Sequential(
            (0): SECONDMambaBlock(
              (in_proj_H): Linear(in_features=256, out_features=524, bias=False)
              (in_proj_V): Linear(in_features=256, out_features=524, bias=False)
              (act): SiLU()
              (out_proj): Linear(in_features=512, out_features=256, bias=False)
              (out_norm): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
              (conv1d_H): Conv1d(256, 256, kernel_size=(4,), stride=(4,), bias=False)
              (conv1d_V): Conv1d(256, 256, kernel_size=(4,), stride=(4,), bias=False)
              (sincos_proj): Linear(in_features=256, out_features=256, bias=True)
            )
            (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
            (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (4): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (5): ReLU()
            (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (7): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (8): ReLU()
            (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            (10): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (11): ReLU()
          )
          (3): Sequential(
            (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
          (4): Sequential(
            (0): ConvTranspose2d(256, 256, kernel_size=(2, 2), stride=(2, 2), bias=False)
            (1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
            (2): ReLU()
          )
        )
        (norm_1): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (norm_2): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      )
    )
  )
  (pts_neck): FPN(
    (lateral_convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
    )
    (fpn_convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
      (1): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
      (2): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
      (3): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): SyncBatchNorm(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
    )
  )
  init_cfg={'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
  (pts_bbox_head): FUTR3DHead(
    (loss_cls): FocalLoss()
    (loss_bbox): L1Loss()
    (loss_iou): GIoULoss()
    (activate): ReLU(inplace=True)
    (positional_encoding): SinePositionalEncoding(num_feats=128, temperature=10000, normalize=True, scale=6.283185307179586, eps=1e-06)
    (transformer): FUTR3DTransformer(
      (decoder): FUTR3DTransformerDecoder(
        (layers): ModuleList(
          (0): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (1): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (2): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (3): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (4): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (5): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): MultiheadAttention(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.0, inplace=False)
                (dropout_layer): Dropout(p=0.1, inplace=False)
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
        (query_scale): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=256, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
          )
        )
        (ref_point_head): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=384, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
          )
        )
      )
    )
    (cls_branches): ModuleList(
      (0): Linear(in_features=256, out_features=10, bias=True)
      (1): Linear(in_features=256, out_features=10, bias=True)
      (2): Linear(in_features=256, out_features=10, bias=True)
      (3): Linear(in_features=256, out_features=10, bias=True)
      (4): Linear(in_features=256, out_features=10, bias=True)
      (5): Linear(in_features=256, out_features=10, bias=True)
    )
    (reg_branches): ModuleList(
      (0): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (1): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (2): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (3): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (4): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (5): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
    )
    (tgt_embed): Embedding(900, 256)
    (refpoint_embed): Embedding(900, 3)
    (aux_head): CenterHead(
      (loss_cls): GaussianFocalLoss()
      (loss_bbox): L1Loss()
      (shared_conv): ConvModule(
        (conv): Conv2d(512, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (task_heads): ModuleList(
        (0): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
        (1): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
        (2): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
        (3): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
        (4): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
        (5): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): SyncBatchNorm(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
      )
    )
  )
)
2025-05-04 17:13:59,631 - mmdet - INFO - Start running, host: ubuntu@ubuntu, work_dir: /home/ubuntu/jxcao/hdd/jxc/FUTR3D/work_dirs/lidar_0075v_900q_split14_cascadeded_secondmamba2/两张卡每张卡2
2025-05-04 17:13:59,631 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CyclicLrUpdaterHook                
(HIGH        ) CyclicMomentumUpdaterHook          
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CyclicLrUpdaterHook                
(HIGH        ) CyclicMomentumUpdaterHook          
(NORMAL      ) FadeOjectSampleHook                
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CyclicLrUpdaterHook                
(HIGH        ) CyclicMomentumUpdaterHook          
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_epoch:
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
2025-05-04 17:13:59,652 - mmdet - INFO - workflow: [('train', 1)], max: 20 epochs
2025-05-04 17:13:59,652 - mmdet - INFO - Checkpoints will be saved to /home/ubuntu/jxcao/hdd/jxc/FUTR3D/work_dirs/lidar_0075v_900q_split14_cascadeded_secondmamba2/两张卡每张卡2 by HardDiskBackend.
2025-05-04 17:15:10,388 - mmdet - INFO - Epoch [1][50/2207]	lr: 1.250e-05, eta: 17:17:37, time: 1.412, data_time: 0.149, memory: 15855, loss_cls: 1.4927, loss_bbox: 2.2834, d0.loss_cls: 1.8681, d0.loss_bbox: 4.4817, d1.loss_cls: 1.7267, d1.loss_bbox: 2.3283, d2.loss_cls: 1.6603, d2.loss_bbox: 2.3083, d3.loss_cls: 1.5786, d3.loss_bbox: 2.2906, d4.loss_cls: 1.5342, d4.loss_bbox: 2.2851, aux_task0.loss_heatmap: 445.1571, aux_task0.loss_bbox: 0.8047, aux_task1.loss_heatmap: 882.0852, aux_task1.loss_bbox: 1.0261, aux_task2.loss_heatmap: 947.7987, aux_task2.loss_bbox: 1.1443, aux_task3.loss_heatmap: 1574.3083, aux_task3.loss_bbox: 0.7698, aux_task4.loss_heatmap: 281.8860, aux_task4.loss_bbox: 0.6285, aux_task5.loss_heatmap: 908.5623, aux_task5.loss_bbox: 0.6796, loss: 5070.6887, grad_norm: 702581.2538
2025-05-04 17:16:03,074 - mmdet - INFO - Epoch [1][100/2207]	lr: 1.251e-05, eta: 15:04:55, time: 1.054, data_time: 0.007, memory: 15857, loss_cls: 1.1851, loss_bbox: 2.2047, d0.loss_cls: 1.6356, d0.loss_bbox: 4.3662, d1.loss_cls: 1.3754, d1.loss_bbox: 2.2720, d2.loss_cls: 1.2670, d2.loss_bbox: 2.2457, d3.loss_cls: 1.2261, d3.loss_bbox: 2.2260, d4.loss_cls: 1.1974, d4.loss_bbox: 2.2137, aux_task0.loss_heatmap: 375.1979, aux_task0.loss_bbox: 0.7700, aux_task1.loss_heatmap: 720.0759, aux_task1.loss_bbox: 0.9345, aux_task2.loss_heatmap: 791.7958, aux_task2.loss_bbox: 1.0617, aux_task3.loss_heatmap: 1030.5298, aux_task3.loss_bbox: 0.7007, aux_task4.loss_heatmap: 208.2828, aux_task4.loss_bbox: 0.5910, aux_task5.loss_heatmap: 651.9452, aux_task5.loss_bbox: 0.6392, loss: 3805.9392, grad_norm: 496051.3772
2025-05-04 17:16:55,799 - mmdet - INFO - Epoch [1][150/2207]	lr: 1.252e-05, eta: 14:20:18, time: 1.054, data_time: 0.010, memory: 15857, loss_cls: 1.1842, loss_bbox: 2.1204, d0.loss_cls: 1.4128, d0.loss_bbox: 4.3663, d1.loss_cls: 1.2298, d1.loss_bbox: 2.2455, d2.loss_cls: 1.1892, d2.loss_bbox: 2.2065, d3.loss_cls: 1.1865, d3.loss_bbox: 2.1741, d4.loss_cls: 1.1843, d4.loss_bbox: 2.1452, aux_task0.loss_heatmap: 277.7033, aux_task0.loss_bbox: 0.7240, aux_task1.loss_heatmap: 482.3355, aux_task1.loss_bbox: 0.8541, aux_task2.loss_heatmap: 571.7231, aux_task2.loss_bbox: 0.9665, aux_task3.loss_heatmap: 935.0365, aux_task3.loss_bbox: 0.6530, aux_task4.loss_heatmap: 144.3176, aux_task4.loss_bbox: 0.5628, aux_task5.loss_heatmap: 550.3063, aux_task5.loss_bbox: 0.5800, loss: 2988.4077, grad_norm: 298679.6516
2025-05-04 17:17:48,250 - mmdet - INFO - Epoch [1][200/2207]	lr: 1.254e-05, eta: 13:56:33, time: 1.049, data_time: 0.007, memory: 15886, loss_cls: 1.1913, loss_bbox: 1.8855, d0.loss_cls: 1.2510, d0.loss_bbox: 4.0785, d1.loss_cls: 1.1821, d1.loss_bbox: 2.1098, d2.loss_cls: 1.1839, d2.loss_bbox: 2.0361, d3.loss_cls: 1.1876, d3.loss_bbox: 1.9776, d4.loss_cls: 1.1905, d4.loss_bbox: 1.9209, aux_task0.loss_heatmap: 189.8880, aux_task0.loss_bbox: 0.6629, aux_task1.loss_heatmap: 301.2105, aux_task1.loss_bbox: 0.7654, aux_task2.loss_heatmap: 313.8427, aux_task2.loss_bbox: 0.9064, aux_task3.loss_heatmap: 513.9721, aux_task3.loss_bbox: 0.5379, aux_task4.loss_heatmap: 81.9901, aux_task4.loss_bbox: 0.5157, aux_task5.loss_heatmap: 332.9636, aux_task5.loss_bbox: 0.5300, loss: 1758.9800, grad_norm: 135822.6273
2025-05-04 17:18:44,244 - mmdet - INFO - Epoch [1][250/2207]	lr: 1.256e-05, eta: 13:52:19, time: 1.120, data_time: 0.007, memory: 15886, loss_cls: 1.1639, loss_bbox: 1.8791, d0.loss_cls: 1.1611, d0.loss_bbox: 3.1989, d1.loss_cls: 1.1546, d1.loss_bbox: 1.8506, d2.loss_cls: 1.1593, d2.loss_bbox: 1.7909, d3.loss_cls: 1.1634, d3.loss_bbox: 1.7886, d4.loss_cls: 1.1641, d4.loss_bbox: 1.8230, aux_task0.loss_heatmap: 72.7040, aux_task0.loss_bbox: 0.5885, aux_task1.loss_heatmap: 156.0541, aux_task1.loss_bbox: 0.6556, aux_task2.loss_heatmap: 166.9687, aux_task2.loss_bbox: 0.7755, aux_task3.loss_heatmap: 197.3642, aux_task3.loss_bbox: 0.4889, aux_task4.loss_heatmap: 44.2989, aux_task4.loss_bbox: 0.4647, aux_task5.loss_heatmap: 145.2799, aux_task5.loss_bbox: 0.5031, loss: 805.4438, grad_norm: 55819.7915
2025-05-04 17:19:36,700 - mmdet - INFO - Epoch [1][300/2207]	lr: 1.258e-05, eta: 13:40:34, time: 1.049, data_time: 0.006, memory: 15886, loss_cls: 1.1627, loss_bbox: 1.9970, d0.loss_cls: 1.1532, d0.loss_bbox: 1.9990, d1.loss_cls: 1.1584, d1.loss_bbox: 1.7672, d2.loss_cls: 1.1605, d2.loss_bbox: 1.8305, d3.loss_cls: 1.1613, d3.loss_bbox: 1.9003, d4.loss_cls: 1.1607, d4.loss_bbox: 1.9551, aux_task0.loss_heatmap: 37.5522, aux_task0.loss_bbox: 0.5121, aux_task1.loss_heatmap: 79.8466, aux_task1.loss_bbox: 0.5689, aux_task2.loss_heatmap: 81.5689, aux_task2.loss_bbox: 0.6936, aux_task3.loss_heatmap: 111.8453, aux_task3.loss_bbox: 0.4457, aux_task4.loss_heatmap: 20.4221, aux_task4.loss_bbox: 0.4358, aux_task5.loss_heatmap: 84.6688, aux_task5.loss_bbox: 0.4732, loss: 437.4391, grad_norm: 23997.9567
2025-05-04 17:20:29,275 - mmdet - INFO - Epoch [1][350/2207]	lr: 1.261e-05, eta: 13:32:10, time: 1.052, data_time: 0.006, memory: 15886, loss_cls: 1.1668, loss_bbox: 1.8339, d0.loss_cls: 1.1650, d0.loss_bbox: 1.7734, d1.loss_cls: 1.1662, d1.loss_bbox: 1.7659, d2.loss_cls: 1.1626, d2.loss_bbox: 1.7944, d3.loss_cls: 1.1639, d3.loss_bbox: 1.8172, d4.loss_cls: 1.1677, d4.loss_bbox: 1.8326, aux_task0.loss_heatmap: 25.4523, aux_task0.loss_bbox: 0.4764, aux_task1.loss_heatmap: 41.0092, aux_task1.loss_bbox: 0.5334, aux_task2.loss_heatmap: 44.1340, aux_task2.loss_bbox: 0.5920, aux_task3.loss_heatmap: 60.8925, aux_task3.loss_bbox: 0.4197, aux_task4.loss_heatmap: 10.4311, aux_task4.loss_bbox: 0.4284, aux_task5.loss_heatmap: 43.3355, aux_task5.loss_bbox: 0.4637, loss: 245.9778, grad_norm: 12412.5707
2025-05-04 17:21:21,752 - mmdet - INFO - Epoch [1][400/2207]	lr: 1.264e-05, eta: 13:25:28, time: 1.050, data_time: 0.009, memory: 15886, loss_cls: 1.1386, loss_bbox: 1.7296, d0.loss_cls: 1.1447, d0.loss_bbox: 1.7510, d1.loss_cls: 1.1408, d1.loss_bbox: 1.7376, d2.loss_cls: 1.1339, d2.loss_bbox: 1.7423, d3.loss_cls: 1.1359, d3.loss_bbox: 1.7432, d4.loss_cls: 1.1379, d4.loss_bbox: 1.7378, aux_task0.loss_heatmap: 9.5720, aux_task0.loss_bbox: 0.4479, aux_task1.loss_heatmap: 20.4190, aux_task1.loss_bbox: 0.5224, aux_task2.loss_heatmap: 21.6112, aux_task2.loss_bbox: 0.5594, aux_task3.loss_heatmap: 32.3602, aux_task3.loss_bbox: 0.4308, aux_task4.loss_heatmap: 5.4543, aux_task4.loss_bbox: 0.4266, aux_task5.loss_heatmap: 20.0170, aux_task5.loss_bbox: 0.4718, loss: 129.5659, grad_norm: 3989.8031
2025-05-04 17:22:14,592 - mmdet - INFO - Epoch [1][450/2207]	lr: 1.268e-05, eta: 13:20:39, time: 1.057, data_time: 0.006, memory: 15886, loss_cls: 1.1404, loss_bbox: 1.7423, d0.loss_cls: 1.1468, d0.loss_bbox: 1.7668, d1.loss_cls: 1.1431, d1.loss_bbox: 1.7439, d2.loss_cls: 1.1373, d2.loss_bbox: 1.7388, d3.loss_cls: 1.1375, d3.loss_bbox: 1.7350, d4.loss_cls: 1.1401, d4.loss_bbox: 1.7369, aux_task0.loss_heatmap: 6.7326, aux_task0.loss_bbox: 0.4362, aux_task1.loss_heatmap: 9.9967, aux_task1.loss_bbox: 0.4987, aux_task2.loss_heatmap: 10.0680, aux_task2.loss_bbox: 0.5170, aux_task3.loss_heatmap: 13.1942, aux_task3.loss_bbox: 0.4171, aux_task4.loss_heatmap: 3.1392, aux_task4.loss_bbox: 0.4329, aux_task5.loss_heatmap: 9.6495, aux_task5.loss_bbox: 0.4647, loss: 72.8557, grad_norm: 1874.2687
2025-05-04 17:23:06,903 - mmdet - INFO - Epoch [1][500/2207]	lr: 1.272e-05, eta: 13:15:52, time: 1.046, data_time: 0.006, memory: 15886, loss_cls: 1.1253, loss_bbox: 1.7254, d0.loss_cls: 1.1342, d0.loss_bbox: 1.7473, d1.loss_cls: 1.1312, d1.loss_bbox: 1.7277, d2.loss_cls: 1.1267, d2.loss_bbox: 1.7211, d3.loss_cls: 1.1271, d3.loss_bbox: 1.7206, d4.loss_cls: 1.1274, d4.loss_bbox: 1.7208, aux_task0.loss_heatmap: 3.3848, aux_task0.loss_bbox: 0.4485, aux_task1.loss_heatmap: 5.7797, aux_task1.loss_bbox: 0.4955, aux_task2.loss_heatmap: 6.5096, aux_task2.loss_bbox: 0.5015, aux_task3.loss_heatmap: 7.5503, aux_task3.loss_bbox: 0.4053, aux_task4.loss_heatmap: 2.2391, aux_task4.loss_bbox: 0.4329, aux_task5.loss_heatmap: 5.8961, aux_task5.loss_bbox: 0.4784, loss: 51.2566, grad_norm: 1026.0005
2025-05-04 17:23:59,277 - mmdet - INFO - Epoch [1][550/2207]	lr: 1.277e-05, eta: 13:11:52, time: 1.047, data_time: 0.006, memory: 15886, loss_cls: 1.1240, loss_bbox: 1.7254, d0.loss_cls: 1.1269, d0.loss_bbox: 1.7463, d1.loss_cls: 1.1242, d1.loss_bbox: 1.7290, d2.loss_cls: 1.1208, d2.loss_bbox: 1.7247, d3.loss_cls: 1.1220, d3.loss_bbox: 1.7261, d4.loss_cls: 1.1207, d4.loss_bbox: 1.7267, aux_task0.loss_heatmap: 2.5917, aux_task0.loss_bbox: 0.4510, aux_task1.loss_heatmap: 3.6347, aux_task1.loss_bbox: 0.4979, aux_task2.loss_heatmap: 3.8369, aux_task2.loss_bbox: 0.5142, aux_task3.loss_heatmap: 5.0687, aux_task3.loss_bbox: 0.4131, aux_task4.loss_heatmap: 1.8939, aux_task4.loss_bbox: 0.4170, aux_task5.loss_heatmap: 3.7691, aux_task5.loss_bbox: 0.4649, loss: 40.6696, grad_norm: 741.3566
2025-05-04 17:24:51,855 - mmdet - INFO - Epoch [1][600/2207]	lr: 1.282e-05, eta: 13:08:38, time: 1.052, data_time: 0.009, memory: 15947, loss_cls: 1.1277, loss_bbox: 1.7198, d0.loss_cls: 1.1418, d0.loss_bbox: 1.7392, d1.loss_cls: 1.1342, d1.loss_bbox: 1.7234, d2.loss_cls: 1.1280, d2.loss_bbox: 1.7216, d3.loss_cls: 1.1281, d3.loss_bbox: 1.7169, d4.loss_cls: 1.1261, d4.loss_bbox: 1.7183, aux_task0.loss_heatmap: 2.1710, aux_task0.loss_bbox: 0.4546, aux_task1.loss_heatmap: 2.8457, aux_task1.loss_bbox: 0.5014, aux_task2.loss_heatmap: 2.9514, aux_task2.loss_bbox: 0.5127, aux_task3.loss_heatmap: 4.3349, aux_task3.loss_bbox: 0.4182, aux_task4.loss_heatmap: 1.7475, aux_task4.loss_bbox: 0.4255, aux_task5.loss_heatmap: 3.0230, aux_task5.loss_bbox: 0.4676, loss: 36.9787, grad_norm: 656.5390
2025-05-04 17:25:44,052 - mmdet - INFO - Epoch [1][650/2207]	lr: 1.287e-05, eta: 13:05:20, time: 1.044, data_time: 0.007, memory: 15947, loss_cls: 1.1193, loss_bbox: 1.7173, d0.loss_cls: 1.1368, d0.loss_bbox: 1.7480, d1.loss_cls: 1.1260, d1.loss_bbox: 1.7195, d2.loss_cls: 1.1203, d2.loss_bbox: 1.7182, d3.loss_cls: 1.1216, d3.loss_bbox: 1.7151, d4.loss_cls: 1.1177, d4.loss_bbox: 1.7144, aux_task0.loss_heatmap: 1.9651, aux_task0.loss_bbox: 0.4657, aux_task1.loss_heatmap: 2.4296, aux_task1.loss_bbox: 0.5107, aux_task2.loss_heatmap: 2.4697, aux_task2.loss_bbox: 0.5146, aux_task3.loss_heatmap: 3.1366, aux_task3.loss_bbox: 0.4289, aux_task4.loss_heatmap: 1.6711, aux_task4.loss_bbox: 0.4293, aux_task5.loss_heatmap: 2.4957, aux_task5.loss_bbox: 0.4701, loss: 34.0613, grad_norm: 576.6763
2025-05-04 17:26:36,282 - mmdet - INFO - Epoch [1][700/2207]	lr: 1.293e-05, eta: 13:02:25, time: 1.045, data_time: 0.006, memory: 15947, loss_cls: 1.1093, loss_bbox: 1.7096, d0.loss_cls: 1.1248, d0.loss_bbox: 1.7382, d1.loss_cls: 1.1170, d1.loss_bbox: 1.7144, d2.loss_cls: 1.1121, d2.loss_bbox: 1.7136, d3.loss_cls: 1.1104, d3.loss_bbox: 1.7109, d4.loss_cls: 1.1073, d4.loss_bbox: 1.7113, aux_task0.loss_heatmap: 1.7580, aux_task0.loss_bbox: 0.4528, aux_task1.loss_heatmap: 2.1744, aux_task1.loss_bbox: 0.5144, aux_task2.loss_heatmap: 2.2854, aux_task2.loss_bbox: 0.4897, aux_task3.loss_heatmap: 2.9239, aux_task3.loss_bbox: 0.4183, aux_task4.loss_heatmap: 1.6418, aux_task4.loss_bbox: 0.4279, aux_task5.loss_heatmap: 2.1968, aux_task5.loss_bbox: 0.4698, loss: 32.7319, grad_norm: 583.2860
2025-05-04 17:27:28,788 - mmdet - INFO - Epoch [1][750/2207]	lr: 1.300e-05, eta: 13:00:03, time: 1.050, data_time: 0.007, memory: 15947, loss_cls: 1.1018, loss_bbox: 1.6979, d0.loss_cls: 1.1163, d0.loss_bbox: 1.7265, d1.loss_cls: 1.1057, d1.loss_bbox: 1.6987, d2.loss_cls: 1.1021, d2.loss_bbox: 1.6997, d3.loss_cls: 1.1035, d3.loss_bbox: 1.7008, d4.loss_cls: 1.1005, d4.loss_bbox: 1.6978, aux_task0.loss_heatmap: 1.7203, aux_task0.loss_bbox: 0.4476, aux_task1.loss_heatmap: 2.0182, aux_task1.loss_bbox: 0.4980, aux_task2.loss_heatmap: 2.1341, aux_task2.loss_bbox: 0.4852, aux_task3.loss_heatmap: 2.3358, aux_task3.loss_bbox: 0.4248, aux_task4.loss_heatmap: 1.6095, aux_task4.loss_bbox: 0.4355, aux_task5.loss_heatmap: 2.0617, aux_task5.loss_bbox: 0.4663, loss: 31.4884, grad_norm: 547.3260
2025-05-04 17:28:21,278 - mmdet - INFO - Epoch [1][800/2207]	lr: 1.307e-05, eta: 12:57:51, time: 1.050, data_time: 0.007, memory: 15947, loss_cls: 1.0814, loss_bbox: 1.6776, d0.loss_cls: 1.1042, d0.loss_bbox: 1.7066, d1.loss_cls: 1.0870, d1.loss_bbox: 1.6847, d2.loss_cls: 1.0826, d2.loss_bbox: 1.6840, d3.loss_cls: 1.0860, d3.loss_bbox: 1.6801, d4.loss_cls: 1.0808, d4.loss_bbox: 1.6789, aux_task0.loss_heatmap: 1.5940, aux_task0.loss_bbox: 0.4552, aux_task1.loss_heatmap: 1.8842, aux_task1.loss_bbox: 0.4914, aux_task2.loss_heatmap: 2.0514, aux_task2.loss_bbox: 0.4875, aux_task3.loss_heatmap: 2.3647, aux_task3.loss_bbox: 0.4006, aux_task4.loss_heatmap: 1.5845, aux_task4.loss_bbox: 0.4244, aux_task5.loss_heatmap: 1.9367, aux_task5.loss_bbox: 0.4639, loss: 30.7724, grad_norm: 481.0287
2025-05-04 17:29:13,789 - mmdet - INFO - Epoch [1][850/2207]	lr: 1.314e-05, eta: 12:55:49, time: 1.050, data_time: 0.006, memory: 15947, loss_cls: 1.1018, loss_bbox: 1.6925, d0.loss_cls: 1.1178, d0.loss_bbox: 1.7225, d1.loss_cls: 1.1033, d1.loss_bbox: 1.6995, d2.loss_cls: 1.1025, d2.loss_bbox: 1.6966, d3.loss_cls: 1.1045, d3.loss_bbox: 1.6943, d4.loss_cls: 1.1010, d4.loss_bbox: 1.6937, aux_task0.loss_heatmap: 1.6161, aux_task0.loss_bbox: 0.4360, aux_task1.loss_heatmap: 1.8369, aux_task1.loss_bbox: 0.5030, aux_task2.loss_heatmap: 1.9433, aux_task2.loss_bbox: 0.5028, aux_task3.loss_heatmap: 2.0909, aux_task3.loss_bbox: 0.4082, aux_task4.loss_heatmap: 1.5696, aux_task4.loss_bbox: 0.4256, aux_task5.loss_heatmap: 1.9156, aux_task5.loss_bbox: 0.4605, loss: 30.5388, grad_norm: 426.7197
2025-05-04 17:30:06,178 - mmdet - INFO - Epoch [1][900/2207]	lr: 1.322e-05, eta: 12:53:49, time: 1.048, data_time: 0.006, memory: 15947, loss_cls: 1.0994, loss_bbox: 1.7017, d0.loss_cls: 1.1169, d0.loss_bbox: 1.7321, d1.loss_cls: 1.1051, d1.loss_bbox: 1.7061, d2.loss_cls: 1.0992, d2.loss_bbox: 1.7058, d3.loss_cls: 1.1014, d3.loss_bbox: 1.7014, d4.loss_cls: 1.0979, d4.loss_bbox: 1.7028, aux_task0.loss_heatmap: 1.5655, aux_task0.loss_bbox: 0.4488, aux_task1.loss_heatmap: 1.7905, aux_task1.loss_bbox: 0.5033, aux_task2.loss_heatmap: 1.9126, aux_task2.loss_bbox: 0.5084, aux_task3.loss_heatmap: 2.0344, aux_task3.loss_bbox: 0.4055, aux_task4.loss_heatmap: 1.5576, aux_task4.loss_bbox: 0.4275, aux_task5.loss_heatmap: 1.7873, aux_task5.loss_bbox: 0.4682, loss: 30.2796, grad_norm: 404.7354
2025-05-04 17:30:58,692 - mmdet - INFO - Epoch [1][950/2207]	lr: 1.330e-05, eta: 12:52:02, time: 1.050, data_time: 0.007, memory: 15960, loss_cls: 1.0815, loss_bbox: 1.7027, d0.loss_cls: 1.0997, d0.loss_bbox: 1.7368, d1.loss_cls: 1.0830, d1.loss_bbox: 1.7107, d2.loss_cls: 1.0786, d2.loss_bbox: 1.7093, d3.loss_cls: 1.0825, d3.loss_bbox: 1.7041, d4.loss_cls: 1.0791, d4.loss_bbox: 1.7045, aux_task0.loss_heatmap: 1.5462, aux_task0.loss_bbox: 0.4582, aux_task1.loss_heatmap: 1.7296, aux_task1.loss_bbox: 0.5099, aux_task2.loss_heatmap: 1.8072, aux_task2.loss_bbox: 0.4815, aux_task3.loss_heatmap: 1.8551, aux_task3.loss_bbox: 0.4066, aux_task4.loss_heatmap: 1.5303, aux_task4.loss_bbox: 0.4228, aux_task5.loss_heatmap: 1.7089, aux_task5.loss_bbox: 0.4607, loss: 29.6895, grad_norm: 357.0310
2025-05-04 17:31:51,251 - mmdet - INFO - Exp name: lidar_0075v_900q_split14_cascadeded_secondmamba2.py
2025-05-04 17:31:51,251 - mmdet - INFO - Epoch [1][1000/2207]	lr: 1.339e-05, eta: 12:50:22, time: 1.051, data_time: 0.007, memory: 15960, loss_cls: 1.0918, loss_bbox: 1.6857, d0.loss_cls: 1.1096, d0.loss_bbox: 1.7238, d1.loss_cls: 1.0957, d1.loss_bbox: 1.6896, d2.loss_cls: 1.0899, d2.loss_bbox: 1.6872, d3.loss_cls: 1.0923, d3.loss_bbox: 1.6839, d4.loss_cls: 1.0920, d4.loss_bbox: 1.6859, aux_task0.loss_heatmap: 1.5740, aux_task0.loss_bbox: 0.4567, aux_task1.loss_heatmap: 1.6736, aux_task1.loss_bbox: 0.4938, aux_task2.loss_heatmap: 1.8347, aux_task2.loss_bbox: 0.4907, aux_task3.loss_heatmap: 1.9044, aux_task3.loss_bbox: 0.4169, aux_task4.loss_heatmap: 1.5195, aux_task4.loss_bbox: 0.4238, aux_task5.loss_heatmap: 1.7150, aux_task5.loss_bbox: 0.4655, loss: 29.6959, grad_norm: 353.4302
2025-05-04 17:32:43,824 - mmdet - INFO - Epoch [1][1050/2207]	lr: 1.348e-05, eta: 12:48:48, time: 1.051, data_time: 0.007, memory: 15960, loss_cls: 1.0735, loss_bbox: 1.7068, d0.loss_cls: 1.0949, d0.loss_bbox: 1.7394, d1.loss_cls: 1.0785, d1.loss_bbox: 1.7131, d2.loss_cls: 1.0717, d2.loss_bbox: 1.7103, d3.loss_cls: 1.0740, d3.loss_bbox: 1.7071, d4.loss_cls: 1.0726, d4.loss_bbox: 1.7074, aux_task0.loss_heatmap: 1.4977, aux_task0.loss_bbox: 0.4586, aux_task1.loss_heatmap: 1.6339, aux_task1.loss_bbox: 0.5035, aux_task2.loss_heatmap: 1.7748, aux_task2.loss_bbox: 0.5036, aux_task3.loss_heatmap: 1.7628, aux_task3.loss_bbox: 0.4159, aux_task4.loss_heatmap: 1.5154, aux_task4.loss_bbox: 0.4319, aux_task5.loss_heatmap: 1.6919, aux_task5.loss_bbox: 0.4701, loss: 29.4093, grad_norm: 309.1518
2025-05-04 17:33:36,194 - mmdet - INFO - Epoch [1][1100/2207]	lr: 1.357e-05, eta: 12:47:09, time: 1.047, data_time: 0.006, memory: 15960, loss_cls: 1.0681, loss_bbox: 1.7008, d0.loss_cls: 1.0862, d0.loss_bbox: 1.7387, d1.loss_cls: 1.0695, d1.loss_bbox: 1.7120, d2.loss_cls: 1.0652, d2.loss_bbox: 1.7074, d3.loss_cls: 1.0676, d3.loss_bbox: 1.7018, d4.loss_cls: 1.0648, d4.loss_bbox: 1.7016, aux_task0.loss_heatmap: 1.4892, aux_task0.loss_bbox: 0.4586, aux_task1.loss_heatmap: 1.6240, aux_task1.loss_bbox: 0.5151, aux_task2.loss_heatmap: 1.7907, aux_task2.loss_bbox: 0.5022, aux_task3.loss_heatmap: 1.7464, aux_task3.loss_bbox: 0.4174, aux_task4.loss_heatmap: 1.4985, aux_task4.loss_bbox: 0.4298, aux_task5.loss_heatmap: 1.6242, aux_task5.loss_bbox: 0.4664, loss: 29.2461, grad_norm: 280.0618
2025-05-04 17:34:28,670 - mmdet - INFO - Epoch [1][1150/2207]	lr: 1.367e-05, eta: 12:45:38, time: 1.049, data_time: 0.007, memory: 15960, loss_cls: 1.0672, loss_bbox: 1.6751, d0.loss_cls: 1.0811, d0.loss_bbox: 1.7211, d1.loss_cls: 1.0677, d1.loss_bbox: 1.6880, d2.loss_cls: 1.0629, d2.loss_bbox: 1.6839, d3.loss_cls: 1.0642, d3.loss_bbox: 1.6799, d4.loss_cls: 1.0650, d4.loss_bbox: 1.6772, aux_task0.loss_heatmap: 1.4736, aux_task0.loss_bbox: 0.4462, aux_task1.loss_heatmap: 1.5995, aux_task1.loss_bbox: 0.4980, aux_task2.loss_heatmap: 1.7642, aux_task2.loss_bbox: 0.5014, aux_task3.loss_heatmap: 1.6953, aux_task3.loss_bbox: 0.4143, aux_task4.loss_heatmap: 1.4879, aux_task4.loss_bbox: 0.4298, aux_task5.loss_heatmap: 1.6246, aux_task5.loss_bbox: 0.4641, loss: 28.9323, grad_norm: 247.4703
2025-05-04 17:35:21,283 - mmdet - INFO - Epoch [1][1200/2207]	lr: 1.378e-05, eta: 12:44:15, time: 1.052, data_time: 0.007, memory: 15960, loss_cls: 1.0640, loss_bbox: 1.6476, d0.loss_cls: 1.0779, d0.loss_bbox: 1.7016, d1.loss_cls: 1.0608, d1.loss_bbox: 1.6644, d2.loss_cls: 1.0565, d2.loss_bbox: 1.6559, d3.loss_cls: 1.0579, d3.loss_bbox: 1.6527, d4.loss_cls: 1.0613, d4.loss_bbox: 1.6502, aux_task0.loss_heatmap: 1.4473, aux_task0.loss_bbox: 0.4428, aux_task1.loss_heatmap: 1.5827, aux_task1.loss_bbox: 0.4913, aux_task2.loss_heatmap: 1.7483, aux_task2.loss_bbox: 0.4930, aux_task3.loss_heatmap: 1.6914, aux_task3.loss_bbox: 0.4061, aux_task4.loss_heatmap: 1.4767, aux_task4.loss_bbox: 0.4299, aux_task5.loss_heatmap: 1.6002, aux_task5.loss_bbox: 0.4697, loss: 28.6306, grad_norm: 239.8918
2025-05-04 17:36:13,942 - mmdet - INFO - Epoch [1][1250/2207]	lr: 1.388e-05, eta: 12:42:57, time: 1.053, data_time: 0.007, memory: 15960, loss_cls: 1.0658, loss_bbox: 1.6626, d0.loss_cls: 1.0856, d0.loss_bbox: 1.7205, d1.loss_cls: 1.0668, d1.loss_bbox: 1.6861, d2.loss_cls: 1.0565, d2.loss_bbox: 1.6745, d3.loss_cls: 1.0551, d3.loss_bbox: 1.6700, d4.loss_cls: 1.0586, d4.loss_bbox: 1.6669, aux_task0.loss_heatmap: 1.5211, aux_task0.loss_bbox: 0.4666, aux_task1.loss_heatmap: 1.5530, aux_task1.loss_bbox: 0.4945, aux_task2.loss_heatmap: 1.7327, aux_task2.loss_bbox: 0.5016, aux_task3.loss_heatmap: 1.6739, aux_task3.loss_bbox: 0.4096, aux_task4.loss_heatmap: 1.4591, aux_task4.loss_bbox: 0.4396, aux_task5.loss_heatmap: 1.6083, aux_task5.loss_bbox: 0.4681, loss: 28.7972, grad_norm: 241.5212
2025-05-04 17:37:06,250 - mmdet - INFO - Epoch [1][1300/2207]	lr: 1.400e-05, eta: 12:41:29, time: 1.046, data_time: 0.007, memory: 15960, loss_cls: 1.0386, loss_bbox: 1.6275, d0.loss_cls: 1.0649, d0.loss_bbox: 1.7063, d1.loss_cls: 1.0477, d1.loss_bbox: 1.6624, d2.loss_cls: 1.0300, d2.loss_bbox: 1.6461, d3.loss_cls: 1.0251, d3.loss_bbox: 1.6393, d4.loss_cls: 1.0310, d4.loss_bbox: 1.6327, aux_task0.loss_heatmap: 1.4512, aux_task0.loss_bbox: 0.4495, aux_task1.loss_heatmap: 1.5334, aux_task1.loss_bbox: 0.5046, aux_task2.loss_heatmap: 1.7388, aux_task2.loss_bbox: 0.5139, aux_task3.loss_heatmap: 1.6702, aux_task3.loss_bbox: 0.4118, aux_task4.loss_heatmap: 1.4431, aux_task4.loss_bbox: 0.4298, aux_task5.loss_heatmap: 1.5688, aux_task5.loss_bbox: 0.4633, loss: 28.3298, grad_norm: 215.1072
2025-05-04 17:37:58,721 - mmdet - INFO - Epoch [1][1350/2207]	lr: 1.411e-05, eta: 12:40:08, time: 1.049, data_time: 0.006, memory: 15960, loss_cls: 1.0077, loss_bbox: 1.6166, d0.loss_cls: 1.0569, d0.loss_bbox: 1.7140, d1.loss_cls: 1.0405, d1.loss_bbox: 1.6678, d2.loss_cls: 1.0152, d2.loss_bbox: 1.6399, d3.loss_cls: 1.0039, d3.loss_bbox: 1.6294, d4.loss_cls: 1.0029, d4.loss_bbox: 1.6210, aux_task0.loss_heatmap: 1.4261, aux_task0.loss_bbox: 0.4644, aux_task1.loss_heatmap: 1.5248, aux_task1.loss_bbox: 0.4987, aux_task2.loss_heatmap: 1.7193, aux_task2.loss_bbox: 0.5099, aux_task3.loss_heatmap: 1.5893, aux_task3.loss_bbox: 0.4140, aux_task4.loss_heatmap: 1.4185, aux_task4.loss_bbox: 0.4252, aux_task5.loss_heatmap: 1.5514, aux_task5.loss_bbox: 0.4672, loss: 28.0245, grad_norm: 188.9545
2025-05-04 17:38:51,393 - mmdet - INFO - Epoch [1][1400/2207]	lr: 1.423e-05, eta: 12:38:56, time: 1.053, data_time: 0.006, memory: 15960, loss_cls: 0.9953, loss_bbox: 1.6109, d0.loss_cls: 1.0593, d0.loss_bbox: 1.7196, d1.loss_cls: 1.0379, d1.loss_bbox: 1.6695, d2.loss_cls: 1.0054, d2.loss_bbox: 1.6269, d3.loss_cls: 0.9934, d3.loss_bbox: 1.6174, d4.loss_cls: 0.9938, d4.loss_bbox: 1.6139, aux_task0.loss_heatmap: 1.4597, aux_task0.loss_bbox: 0.4644, aux_task1.loss_heatmap: 1.5115, aux_task1.loss_bbox: 0.4919, aux_task2.loss_heatmap: 1.7329, aux_task2.loss_bbox: 0.4925, aux_task3.loss_heatmap: 1.5825, aux_task3.loss_bbox: 0.4129, aux_task4.loss_heatmap: 1.3977, aux_task4.loss_bbox: 0.4322, aux_task5.loss_heatmap: 1.5349, aux_task5.loss_bbox: 0.4589, loss: 27.9153, grad_norm: 178.9029
2025-05-04 17:39:43,768 - mmdet - INFO - Epoch [1][1450/2207]	lr: 1.436e-05, eta: 12:37:36, time: 1.047, data_time: 0.006, memory: 15960, loss_cls: 0.9887, loss_bbox: 1.5962, d0.loss_cls: 1.0510, d0.loss_bbox: 1.7158, d1.loss_cls: 1.0315, d1.loss_bbox: 1.6571, d2.loss_cls: 0.9978, d2.loss_bbox: 1.6092, d3.loss_cls: 0.9846, d3.loss_bbox: 1.6034, d4.loss_cls: 0.9835, d4.loss_bbox: 1.6012, aux_task0.loss_heatmap: 1.4319, aux_task0.loss_bbox: 0.4538, aux_task1.loss_heatmap: 1.5244, aux_task1.loss_bbox: 0.4937, aux_task2.loss_heatmap: 1.7209, aux_task2.loss_bbox: 0.5028, aux_task3.loss_heatmap: 1.5621, aux_task3.loss_bbox: 0.4125, aux_task4.loss_heatmap: 1.3678, aux_task4.loss_bbox: 0.4324, aux_task5.loss_heatmap: 1.5333, aux_task5.loss_bbox: 0.4698, loss: 27.7256, grad_norm: 162.7417
2025-05-04 17:40:36,360 - mmdet - INFO - Epoch [1][1500/2207]	lr: 1.449e-05, eta: 12:36:25, time: 1.052, data_time: 0.007, memory: 15962, loss_cls: 0.9848, loss_bbox: 1.5847, d0.loss_cls: 1.0485, d0.loss_bbox: 1.7136, d1.loss_cls: 1.0277, d1.loss_bbox: 1.6461, d2.loss_cls: 0.9935, d2.loss_bbox: 1.5992, d3.loss_cls: 0.9821, d3.loss_bbox: 1.5930, d4.loss_cls: 0.9814, d4.loss_bbox: 1.5866, aux_task0.loss_heatmap: 1.4328, aux_task0.loss_bbox: 0.4407, aux_task1.loss_heatmap: 1.5052, aux_task1.loss_bbox: 0.4922, aux_task2.loss_heatmap: 1.7269, aux_task2.loss_bbox: 0.4797, aux_task3.loss_heatmap: 1.5542, aux_task3.loss_bbox: 0.4155, aux_task4.loss_heatmap: 1.3752, aux_task4.loss_bbox: 0.4402, aux_task5.loss_heatmap: 1.5393, aux_task5.loss_bbox: 0.4617, loss: 27.6047, grad_norm: 152.8164
2025-05-04 17:41:28,611 - mmdet - INFO - Epoch [1][1550/2207]	lr: 1.462e-05, eta: 12:35:05, time: 1.045, data_time: 0.007, memory: 15962, loss_cls: 0.9831, loss_bbox: 1.5669, d0.loss_cls: 1.0458, d0.loss_bbox: 1.7167, d1.loss_cls: 1.0218, d1.loss_bbox: 1.6365, d2.loss_cls: 0.9844, d2.loss_bbox: 1.5854, d3.loss_cls: 0.9764, d3.loss_bbox: 1.5827, d4.loss_cls: 0.9791, d4.loss_bbox: 1.5725, aux_task0.loss_heatmap: 1.4091, aux_task0.loss_bbox: 0.4482, aux_task1.loss_heatmap: 1.5157, aux_task1.loss_bbox: 0.4892, aux_task2.loss_heatmap: 1.7293, aux_task2.loss_bbox: 0.4925, aux_task3.loss_heatmap: 1.4967, aux_task3.loss_bbox: 0.4055, aux_task4.loss_heatmap: 1.3360, aux_task4.loss_bbox: 0.4201, aux_task5.loss_heatmap: 1.4921, aux_task5.loss_bbox: 0.4547, loss: 27.3402, grad_norm: 144.9661
2025-05-04 17:42:21,056 - mmdet - INFO - Epoch [1][1600/2207]	lr: 1.476e-05, eta: 12:33:52, time: 1.049, data_time: 0.006, memory: 15962, loss_cls: 0.9723, loss_bbox: 1.5367, d0.loss_cls: 1.0334, d0.loss_bbox: 1.6962, d1.loss_cls: 1.0070, d1.loss_bbox: 1.6035, d2.loss_cls: 0.9704, d2.loss_bbox: 1.5559, d3.loss_cls: 0.9638, d3.loss_bbox: 1.5569, d4.loss_cls: 0.9683, d4.loss_bbox: 1.5460, aux_task0.loss_heatmap: 1.3892, aux_task0.loss_bbox: 0.4596, aux_task1.loss_heatmap: 1.4965, aux_task1.loss_bbox: 0.4877, aux_task2.loss_heatmap: 1.7174, aux_task2.loss_bbox: 0.4847, aux_task3.loss_heatmap: 1.5143, aux_task3.loss_bbox: 0.4141, aux_task4.loss_heatmap: 1.3123, aux_task4.loss_bbox: 0.4290, aux_task5.loss_heatmap: 1.4768, aux_task5.loss_bbox: 0.4556, loss: 27.0475, grad_norm: 138.8819
2025-05-04 17:43:13,398 - mmdet - INFO - Epoch [1][1650/2207]	lr: 1.490e-05, eta: 12:32:37, time: 1.047, data_time: 0.006, memory: 15962, loss_cls: 0.9843, loss_bbox: 1.5305, d0.loss_cls: 1.0358, d0.loss_bbox: 1.7012, d1.loss_cls: 1.0060, d1.loss_bbox: 1.6044, d2.loss_cls: 0.9773, d2.loss_bbox: 1.5567, d3.loss_cls: 0.9740, d3.loss_bbox: 1.5532, d4.loss_cls: 0.9816, d4.loss_bbox: 1.5367, aux_task0.loss_heatmap: 1.3795, aux_task0.loss_bbox: 0.4438, aux_task1.loss_heatmap: 1.4779, aux_task1.loss_bbox: 0.4953, aux_task2.loss_heatmap: 1.6902, aux_task2.loss_bbox: 0.4967, aux_task3.loss_heatmap: 1.5373, aux_task3.loss_bbox: 0.4124, aux_task4.loss_heatmap: 1.2870, aux_task4.loss_bbox: 0.4307, aux_task5.loss_heatmap: 1.4892, aux_task5.loss_bbox: 0.4635, loss: 27.0451, grad_norm: 123.7648
2025-05-04 17:44:05,720 - mmdet - INFO - Epoch [1][1700/2207]	lr: 1.505e-05, eta: 12:31:24, time: 1.046, data_time: 0.006, memory: 15962, loss_cls: 0.9730, loss_bbox: 1.5167, d0.loss_cls: 1.0265, d0.loss_bbox: 1.6936, d1.loss_cls: 0.9994, d1.loss_bbox: 1.5921, d2.loss_cls: 0.9687, d2.loss_bbox: 1.5467, d3.loss_cls: 0.9638, d3.loss_bbox: 1.5426, d4.loss_cls: 0.9692, d4.loss_bbox: 1.5244, aux_task0.loss_heatmap: 1.3914, aux_task0.loss_bbox: 0.4493, aux_task1.loss_heatmap: 1.4898, aux_task1.loss_bbox: 0.4960, aux_task2.loss_heatmap: 1.6929, aux_task2.loss_bbox: 0.4997, aux_task3.loss_heatmap: 1.5257, aux_task3.loss_bbox: 0.4122, aux_task4.loss_heatmap: 1.2631, aux_task4.loss_bbox: 0.4179, aux_task5.loss_heatmap: 1.4468, aux_task5.loss_bbox: 0.4595, loss: 26.8609, grad_norm: 109.7838
2025-05-04 17:44:58,422 - mmdet - INFO - Epoch [1][1750/2207]	lr: 1.520e-05, eta: 12:30:21, time: 1.054, data_time: 0.007, memory: 16025, loss_cls: 0.9790, loss_bbox: 1.5292, d0.loss_cls: 1.0295, d0.loss_bbox: 1.6958, d1.loss_cls: 0.9967, d1.loss_bbox: 1.5924, d2.loss_cls: 0.9737, d2.loss_bbox: 1.5512, d3.loss_cls: 0.9723, d3.loss_bbox: 1.5485, d4.loss_cls: 0.9742, d4.loss_bbox: 1.5315, aux_task0.loss_heatmap: 1.3682, aux_task0.loss_bbox: 0.4584, aux_task1.loss_heatmap: 1.4983, aux_task1.loss_bbox: 0.4863, aux_task2.loss_heatmap: 1.6956, aux_task2.loss_bbox: 0.5087, aux_task3.loss_heatmap: 1.4889, aux_task3.loss_bbox: 0.4235, aux_task4.loss_heatmap: 1.2729, aux_task4.loss_bbox: 0.4247, aux_task5.loss_heatmap: 1.4577, aux_task5.loss_bbox: 0.4635, loss: 26.9207, grad_norm: 104.7988
2025-05-04 17:45:50,786 - mmdet - INFO - Epoch [1][1800/2207]	lr: 1.536e-05, eta: 12:29:10, time: 1.047, data_time: 0.006, memory: 16025, loss_cls: 0.9832, loss_bbox: 1.4968, d0.loss_cls: 1.0381, d0.loss_bbox: 1.6877, d1.loss_cls: 0.9979, d1.loss_bbox: 1.5670, d2.loss_cls: 0.9800, d2.loss_bbox: 1.5289, d3.loss_cls: 0.9768, d3.loss_bbox: 1.5250, d4.loss_cls: 0.9781, d4.loss_bbox: 1.5059, aux_task0.loss_heatmap: 1.3980, aux_task0.loss_bbox: 0.4640, aux_task1.loss_heatmap: 1.4573, aux_task1.loss_bbox: 0.4827, aux_task2.loss_heatmap: 1.6920, aux_task2.loss_bbox: 0.5027, aux_task3.loss_heatmap: 1.5135, aux_task3.loss_bbox: 0.4280, aux_task4.loss_heatmap: 1.2515, aux_task4.loss_bbox: 0.4343, aux_task5.loss_heatmap: 1.4524, aux_task5.loss_bbox: 0.4735, loss: 26.8153, grad_norm: 104.4710
2025-05-04 17:46:43,063 - mmdet - INFO - Epoch [1][1850/2207]	lr: 1.552e-05, eta: 12:27:59, time: 1.046, data_time: 0.006, memory: 16025, loss_cls: 0.9631, loss_bbox: 1.5005, d0.loss_cls: 1.0214, d0.loss_bbox: 1.6882, d1.loss_cls: 0.9767, d1.loss_bbox: 1.5642, d2.loss_cls: 0.9626, d2.loss_bbox: 1.5276, d3.loss_cls: 0.9605, d3.loss_bbox: 1.5227, d4.loss_cls: 0.9643, d4.loss_bbox: 1.5049, aux_task0.loss_heatmap: 1.3579, aux_task0.loss_bbox: 0.4582, aux_task1.loss_heatmap: 1.4743, aux_task1.loss_bbox: 0.4842, aux_task2.loss_heatmap: 1.6978, aux_task2.loss_bbox: 0.4968, aux_task3.loss_heatmap: 1.4622, aux_task3.loss_bbox: 0.4119, aux_task4.loss_heatmap: 1.2069, aux_task4.loss_bbox: 0.4277, aux_task5.loss_heatmap: 1.4354, aux_task5.loss_bbox: 0.4687, loss: 26.5385, grad_norm: 92.5771
2025-05-04 17:47:35,251 - mmdet - INFO - Epoch [1][1900/2207]	lr: 1.568e-05, eta: 12:26:46, time: 1.044, data_time: 0.006, memory: 16025, loss_cls: 0.9759, loss_bbox: 1.4563, d0.loss_cls: 1.0210, d0.loss_bbox: 1.6626, d1.loss_cls: 0.9803, d1.loss_bbox: 1.5291, d2.loss_cls: 0.9692, d2.loss_bbox: 1.4918, d3.loss_cls: 0.9670, d3.loss_bbox: 1.4860, d4.loss_cls: 0.9714, d4.loss_bbox: 1.4648, aux_task0.loss_heatmap: 1.3590, aux_task0.loss_bbox: 0.4592, aux_task1.loss_heatmap: 1.4520, aux_task1.loss_bbox: 0.4737, aux_task2.loss_heatmap: 1.6865, aux_task2.loss_bbox: 0.4978, aux_task3.loss_heatmap: 1.4591, aux_task3.loss_bbox: 0.4314, aux_task4.loss_heatmap: 1.2015, aux_task4.loss_bbox: 0.4232, aux_task5.loss_heatmap: 1.4244, aux_task5.loss_bbox: 0.4556, loss: 26.2990, grad_norm: 91.5577
2025-05-04 17:48:27,580 - mmdet - INFO - Epoch [1][1950/2207]	lr: 1.585e-05, eta: 12:25:38, time: 1.047, data_time: 0.006, memory: 16025, loss_cls: 0.9685, loss_bbox: 1.4676, d0.loss_cls: 1.0179, d0.loss_bbox: 1.6632, d1.loss_cls: 0.9691, d1.loss_bbox: 1.5387, d2.loss_cls: 0.9617, d2.loss_bbox: 1.4977, d3.loss_cls: 0.9593, d3.loss_bbox: 1.4904, d4.loss_cls: 0.9619, d4.loss_bbox: 1.4733, aux_task0.loss_heatmap: 1.3447, aux_task0.loss_bbox: 0.4523, aux_task1.loss_heatmap: 1.4441, aux_task1.loss_bbox: 0.4877, aux_task2.loss_heatmap: 1.6941, aux_task2.loss_bbox: 0.4938, aux_task3.loss_heatmap: 1.4609, aux_task3.loss_bbox: 0.4115, aux_task4.loss_heatmap: 1.2092, aux_task4.loss_bbox: 0.4288, aux_task5.loss_heatmap: 1.4183, aux_task5.loss_bbox: 0.4642, loss: 26.2789, grad_norm: 88.9565
2025-05-04 17:49:20,011 - mmdet - INFO - Exp name: lidar_0075v_900q_split14_cascadeded_secondmamba2.py
2025-05-04 17:49:20,011 - mmdet - INFO - Epoch [1][2000/2207]	lr: 1.602e-05, eta: 12:24:32, time: 1.049, data_time: 0.006, memory: 16025, loss_cls: 0.9541, loss_bbox: 1.4634, d0.loss_cls: 1.0076, d0.loss_bbox: 1.6737, d1.loss_cls: 0.9571, d1.loss_bbox: 1.5259, d2.loss_cls: 0.9507, d2.loss_bbox: 1.4921, d3.loss_cls: 0.9489, d3.loss_bbox: 1.4868, d4.loss_cls: 0.9509, d4.loss_bbox: 1.4700, aux_task0.loss_heatmap: 1.3503, aux_task0.loss_bbox: 0.4550, aux_task1.loss_heatmap: 1.4502, aux_task1.loss_bbox: 0.4843, aux_task2.loss_heatmap: 1.6446, aux_task2.loss_bbox: 0.5010, aux_task3.loss_heatmap: 1.4156, aux_task3.loss_bbox: 0.4113, aux_task4.loss_heatmap: 1.1701, aux_task4.loss_bbox: 0.4300, aux_task5.loss_heatmap: 1.3744, aux_task5.loss_bbox: 0.4572, loss: 26.0253, grad_norm: 88.3396
2025-05-04 17:50:12,491 - mmdet - INFO - Epoch [1][2050/2207]	lr: 1.620e-05, eta: 12:23:29, time: 1.050, data_time: 0.009, memory: 16025, loss_cls: 0.9453, loss_bbox: 1.4128, d0.loss_cls: 0.9972, d0.loss_bbox: 1.6206, d1.loss_cls: 0.9472, d1.loss_bbox: 1.4731, d2.loss_cls: 0.9412, d2.loss_bbox: 1.4329, d3.loss_cls: 0.9380, d3.loss_bbox: 1.4287, d4.loss_cls: 0.9396, d4.loss_bbox: 1.4152, aux_task0.loss_heatmap: 1.3006, aux_task0.loss_bbox: 0.4365, aux_task1.loss_heatmap: 1.4209, aux_task1.loss_bbox: 0.4776, aux_task2.loss_heatmap: 1.6757, aux_task2.loss_bbox: 0.4852, aux_task3.loss_heatmap: 1.4275, aux_task3.loss_bbox: 0.4125, aux_task4.loss_heatmap: 1.1491, aux_task4.loss_bbox: 0.4187, aux_task5.loss_heatmap: 1.3838, aux_task5.loss_bbox: 0.4527, loss: 25.5326, grad_norm: 88.2117
2025-05-04 17:51:04,905 - mmdet - INFO - Epoch [1][2100/2207]	lr: 1.638e-05, eta: 12:22:24, time: 1.048, data_time: 0.006, memory: 16025, loss_cls: 0.9361, loss_bbox: 1.4361, d0.loss_cls: 0.9955, d0.loss_bbox: 1.6609, d1.loss_cls: 0.9396, d1.loss_bbox: 1.4983, d2.loss_cls: 0.9342, d2.loss_bbox: 1.4628, d3.loss_cls: 0.9314, d3.loss_bbox: 1.4557, d4.loss_cls: 0.9314, d4.loss_bbox: 1.4406, aux_task0.loss_heatmap: 1.2991, aux_task0.loss_bbox: 0.4594, aux_task1.loss_heatmap: 1.4347, aux_task1.loss_bbox: 0.4770, aux_task2.loss_heatmap: 1.6524, aux_task2.loss_bbox: 0.4722, aux_task3.loss_heatmap: 1.4079, aux_task3.loss_bbox: 0.4105, aux_task4.loss_heatmap: 1.1589, aux_task4.loss_bbox: 0.4268, aux_task5.loss_heatmap: 1.3554, aux_task5.loss_bbox: 0.4579, loss: 25.6349, grad_norm: 88.9940
2025-05-04 17:51:57,628 - mmdet - INFO - Epoch [1][2150/2207]	lr: 1.656e-05, eta: 12:21:26, time: 1.054, data_time: 0.007, memory: 16025, loss_cls: 0.9441, loss_bbox: 1.4268, d0.loss_cls: 0.9963, d0.loss_bbox: 1.6640, d1.loss_cls: 0.9457, d1.loss_bbox: 1.4962, d2.loss_cls: 0.9402, d2.loss_bbox: 1.4585, d3.loss_cls: 0.9394, d3.loss_bbox: 1.4483, d4.loss_cls: 0.9397, d4.loss_bbox: 1.4331, aux_task0.loss_heatmap: 1.3010, aux_task0.loss_bbox: 0.4530, aux_task1.loss_heatmap: 1.4267, aux_task1.loss_bbox: 0.4688, aux_task2.loss_heatmap: 1.6615, aux_task2.loss_bbox: 0.4927, aux_task3.loss_heatmap: 1.4091, aux_task3.loss_bbox: 0.4179, aux_task4.loss_heatmap: 1.1295, aux_task4.loss_bbox: 0.4289, aux_task5.loss_heatmap: 1.3522, aux_task5.loss_bbox: 0.4518, loss: 25.6252, grad_norm: 91.1508
2025-05-04 17:52:50,254 - mmdet - INFO - Epoch [1][2200/2207]	lr: 1.675e-05, eta: 12:20:26, time: 1.053, data_time: 0.007, memory: 16025, loss_cls: 0.9442, loss_bbox: 1.4179, d0.loss_cls: 1.0003, d0.loss_bbox: 1.6522, d1.loss_cls: 0.9472, d1.loss_bbox: 1.4878, d2.loss_cls: 0.9413, d2.loss_bbox: 1.4467, d3.loss_cls: 0.9383, d3.loss_bbox: 1.4394, d4.loss_cls: 0.9398, d4.loss_bbox: 1.4258, aux_task0.loss_heatmap: 1.3213, aux_task0.loss_bbox: 0.4431, aux_task1.loss_heatmap: 1.4187, aux_task1.loss_bbox: 0.4685, aux_task2.loss_heatmap: 1.6466, aux_task2.loss_bbox: 0.4965, aux_task3.loss_heatmap: 1.3851, aux_task3.loss_bbox: 0.4030, aux_task4.loss_heatmap: 1.1617, aux_task4.loss_bbox: 0.4310, aux_task5.loss_heatmap: 1.3337, aux_task5.loss_bbox: 0.4527, loss: 25.5428, grad_norm: 91.2075
2025-05-04 17:52:57,870 - mmdet - INFO - Saving checkpoint at 1 epochs
2025-05-04 17:54:03,656 - mmdet - INFO - Epoch [2][50/2207]	lr: 1.697e-05, eta: 12:18:01, time: 1.115, data_time: 0.072, memory: 16025, loss_cls: 0.9417, loss_bbox: 1.3993, d0.loss_cls: 0.9960, d0.loss_bbox: 1.6396, d1.loss_cls: 0.9447, d1.loss_bbox: 1.4661, d2.loss_cls: 0.9366, d2.loss_bbox: 1.4253, d3.loss_cls: 0.9355, d3.loss_bbox: 1.4177, d4.loss_cls: 0.9393, d4.loss_bbox: 1.4043, aux_task0.loss_heatmap: 1.2739, aux_task0.loss_bbox: 0.4377, aux_task1.loss_heatmap: 1.4119, aux_task1.loss_bbox: 0.4574, aux_task2.loss_heatmap: 1.6515, aux_task2.loss_bbox: 0.4912, aux_task3.loss_heatmap: 1.3800, aux_task3.loss_bbox: 0.4028, aux_task4.loss_heatmap: 1.1148, aux_task4.loss_bbox: 0.4215, aux_task5.loss_heatmap: 1.3095, aux_task5.loss_bbox: 0.4521, loss: 25.2505, grad_norm: 89.3184
2025-05-04 17:54:56,116 - mmdet - INFO - Epoch [2][100/2207]	lr: 1.717e-05, eta: 12:17:00, time: 1.049, data_time: 0.007, memory: 16025, loss_cls: 0.9381, loss_bbox: 1.3789, d0.loss_cls: 0.9926, d0.loss_bbox: 1.6250, d1.loss_cls: 0.9424, d1.loss_bbox: 1.4469, d2.loss_cls: 0.9329, d2.loss_bbox: 1.4045, d3.loss_cls: 0.9324, d3.loss_bbox: 1.3972, d4.loss_cls: 0.9343, d4.loss_bbox: 1.3835, aux_task0.loss_heatmap: 1.2891, aux_task0.loss_bbox: 0.4392, aux_task1.loss_heatmap: 1.4010, aux_task1.loss_bbox: 0.4483, aux_task2.loss_heatmap: 1.6314, aux_task2.loss_bbox: 0.4987, aux_task3.loss_heatmap: 1.3575, aux_task3.loss_bbox: 0.4075, aux_task4.loss_heatmap: 1.1141, aux_task4.loss_bbox: 0.4211, aux_task5.loss_heatmap: 1.3306, aux_task5.loss_bbox: 0.4499, loss: 25.0972, grad_norm: 83.0332
2025-05-04 17:55:48,667 - mmdet - INFO - Epoch [2][150/2207]	lr: 1.737e-05, eta: 12:16:02, time: 1.051, data_time: 0.006, memory: 16025, loss_cls: 0.9468, loss_bbox: 1.3722, d0.loss_cls: 0.9924, d0.loss_bbox: 1.6080, d1.loss_cls: 0.9500, d1.loss_bbox: 1.4369, d2.loss_cls: 0.9407, d2.loss_bbox: 1.3968, d3.loss_cls: 0.9401, d3.loss_bbox: 1.3889, d4.loss_cls: 0.9428, d4.loss_bbox: 1.3788, aux_task0.loss_heatmap: 1.2385, aux_task0.loss_bbox: 0.4357, aux_task1.loss_heatmap: 1.4030, aux_task1.loss_bbox: 0.4525, aux_task2.loss_heatmap: 1.6297, aux_task2.loss_bbox: 0.4644, aux_task3.loss_heatmap: 1.3957, aux_task3.loss_bbox: 0.4004, aux_task4.loss_heatmap: 1.1173, aux_task4.loss_bbox: 0.4208, aux_task5.loss_heatmap: 1.3380, aux_task5.loss_bbox: 0.4465, loss: 25.0369, grad_norm: 83.6257
2025-05-04 17:56:41,119 - mmdet - INFO - Epoch [2][200/2207]	lr: 1.758e-05, eta: 12:15:02, time: 1.049, data_time: 0.007, memory: 16025, loss_cls: 0.9280, loss_bbox: 1.3876, d0.loss_cls: 0.9790, d0.loss_bbox: 1.6476, d1.loss_cls: 0.9302, d1.loss_bbox: 1.4656, d2.loss_cls: 0.9224, d2.loss_bbox: 1.4183, d3.loss_cls: 0.9225, d3.loss_bbox: 1.4100, d4.loss_cls: 0.9255, d4.loss_bbox: 1.3958, aux_task0.loss_heatmap: 1.2675, aux_task0.loss_bbox: 0.4487, aux_task1.loss_heatmap: 1.4223, aux_task1.loss_bbox: 0.4499, aux_task2.loss_heatmap: 1.6424, aux_task2.loss_bbox: 0.4894, aux_task3.loss_heatmap: 1.3462, aux_task3.loss_bbox: 0.4102, aux_task4.loss_heatmap: 1.0764, aux_task4.loss_bbox: 0.4261, aux_task5.loss_heatmap: 1.3017, aux_task5.loss_bbox: 0.4454, loss: 25.0588, grad_norm: 75.9562
2025-05-04 17:57:33,688 - mmdet - INFO - Epoch [2][250/2207]	lr: 1.779e-05, eta: 12:14:05, time: 1.051, data_time: 0.006, memory: 16025, loss_cls: 0.9340, loss_bbox: 1.3566, d0.loss_cls: 0.9807, d0.loss_bbox: 1.6222, d1.loss_cls: 0.9351, d1.loss_bbox: 1.4291, d2.loss_cls: 0.9262, d2.loss_bbox: 1.3869, d3.loss_cls: 0.9253, d3.loss_bbox: 1.3779, d4.loss_cls: 0.9282, d4.loss_bbox: 1.3621, aux_task0.loss_heatmap: 1.2846, aux_task0.loss_bbox: 0.4370, aux_task1.loss_heatmap: 1.3918, aux_task1.loss_bbox: 0.4498, aux_task2.loss_heatmap: 1.6056, aux_task2.loss_bbox: 0.4750, aux_task3.loss_heatmap: 1.3639, aux_task3.loss_bbox: 0.4092, aux_task4.loss_heatmap: 1.0844, aux_task4.loss_bbox: 0.4231, aux_task5.loss_heatmap: 1.3052, aux_task5.loss_bbox: 0.4426, loss: 24.8368, grad_norm: 76.4779
2025-05-04 17:58:26,044 - mmdet - INFO - Epoch [2][300/2207]	lr: 1.800e-05, eta: 12:13:04, time: 1.047, data_time: 0.006, memory: 16025, loss_cls: 0.9083, loss_bbox: 1.3479, d0.loss_cls: 0.9616, d0.loss_bbox: 1.6123, d1.loss_cls: 0.9145, d1.loss_bbox: 1.4221, d2.loss_cls: 0.9048, d2.loss_bbox: 1.3755, d3.loss_cls: 0.9048, d3.loss_bbox: 1.3661, d4.loss_cls: 0.9071, d4.loss_bbox: 1.3531, aux_task0.loss_heatmap: 1.2017, aux_task0.loss_bbox: 0.4234, aux_task1.loss_heatmap: 1.4079, aux_task1.loss_bbox: 0.4428, aux_task2.loss_heatmap: 1.6019, aux_task2.loss_bbox: 0.4809, aux_task3.loss_heatmap: 1.3346, aux_task3.loss_bbox: 0.3976, aux_task4.loss_heatmap: 1.0471, aux_task4.loss_bbox: 0.4035, aux_task5.loss_heatmap: 1.2782, aux_task5.loss_bbox: 0.4385, loss: 24.4359, grad_norm: 71.1125
2025-05-04 17:59:18,643 - mmdet - INFO - Epoch [2][350/2207]	lr: 1.822e-05, eta: 12:12:08, time: 1.052, data_time: 0.006, memory: 16025, loss_cls: 0.9264, loss_bbox: 1.3374, d0.loss_cls: 0.9735, d0.loss_bbox: 1.6081, d1.loss_cls: 0.9246, d1.loss_bbox: 1.4154, d2.loss_cls: 0.9182, d2.loss_bbox: 1.3671, d3.loss_cls: 0.9151, d3.loss_bbox: 1.3595, d4.loss_cls: 0.9194, d4.loss_bbox: 1.3448, aux_task0.loss_heatmap: 1.2116, aux_task0.loss_bbox: 0.4209, aux_task1.loss_heatmap: 1.3895, aux_task1.loss_bbox: 0.4301, aux_task2.loss_heatmap: 1.6087, aux_task2.loss_bbox: 0.4547, aux_task3.loss_heatmap: 1.3822, aux_task3.loss_bbox: 0.3912, aux_task4.loss_heatmap: 1.0736, aux_task4.loss_bbox: 0.3949, aux_task5.loss_heatmap: 1.2865, aux_task5.loss_bbox: 0.4324, loss: 24.4858, grad_norm: 72.7094
2025-05-04 18:00:11,021 - mmdet - INFO - Epoch [2][400/2207]	lr: 1.844e-05, eta: 12:11:08, time: 1.048, data_time: 0.007, memory: 16025, loss_cls: 0.9276, loss_bbox: 1.3518, d0.loss_cls: 0.9758, d0.loss_bbox: 1.6187, d1.loss_cls: 0.9300, d1.loss_bbox: 1.4260, d2.loss_cls: 0.9211, d2.loss_bbox: 1.3768, d3.loss_cls: 0.9217, d3.loss_bbox: 1.3704, d4.loss_cls: 0.9228, d4.loss_bbox: 1.3563, aux_task0.loss_heatmap: 1.2369, aux_task0.loss_bbox: 0.4152, aux_task1.loss_heatmap: 1.3892, aux_task1.loss_bbox: 0.4419, aux_task2.loss_heatmap: 1.6101, aux_task2.loss_bbox: 0.4825, aux_task3.loss_heatmap: 1.3249, aux_task3.loss_bbox: 0.3837, aux_task4.loss_heatmap: 1.0368, aux_task4.loss_bbox: 0.3960, aux_task5.loss_heatmap: 1.2950, aux_task5.loss_bbox: 0.4292, loss: 24.5405, grad_norm: 68.6035
2025-05-04 18:01:03,377 - mmdet - INFO - Epoch [2][450/2207]	lr: 1.867e-05, eta: 12:10:08, time: 1.047, data_time: 0.006, memory: 16025, loss_cls: 0.9234, loss_bbox: 1.3200, d0.loss_cls: 0.9700, d0.loss_bbox: 1.5900, d1.loss_cls: 0.9238, d1.loss_bbox: 1.3986, d2.loss_cls: 0.9159, d2.loss_bbox: 1.3501, d3.loss_cls: 0.9154, d3.loss_bbox: 1.3430, d4.loss_cls: 0.9200, d4.loss_bbox: 1.3261, aux_task0.loss_heatmap: 1.2135, aux_task0.loss_bbox: 0.4180, aux_task1.loss_heatmap: 1.3707, aux_task1.loss_bbox: 0.4335, aux_task2.loss_heatmap: 1.5911, aux_task2.loss_bbox: 0.4479, aux_task3.loss_heatmap: 1.3217, aux_task3.loss_bbox: 0.3795, aux_task4.loss_heatmap: 1.0586, aux_task4.loss_bbox: 0.3983, aux_task5.loss_heatmap: 1.2823, aux_task5.loss_bbox: 0.4200, loss: 24.2312, grad_norm: 68.3429
2025-05-04 18:01:55,607 - mmdet - INFO - Epoch [2][500/2207]	lr: 1.890e-05, eta: 12:09:06, time: 1.045, data_time: 0.007, memory: 16025, loss_cls: 0.9147, loss_bbox: 1.3031, d0.loss_cls: 0.9623, d0.loss_bbox: 1.5929, d1.loss_cls: 0.9136, d1.loss_bbox: 1.3911, d2.loss_cls: 0.9040, d2.loss_bbox: 1.3395, d3.loss_cls: 0.9066, d3.loss_bbox: 1.3290, d4.loss_cls: 0.9103, d4.loss_bbox: 1.3113, aux_task0.loss_heatmap: 1.2196, aux_task0.loss_bbox: 0.3992, aux_task1.loss_heatmap: 1.4024, aux_task1.loss_bbox: 0.4262, aux_task2.loss_heatmap: 1.6119, aux_task2.loss_bbox: 0.4592, aux_task3.loss_heatmap: 1.3142, aux_task3.loss_bbox: 0.3729, aux_task4.loss_heatmap: 1.0328, aux_task4.loss_bbox: 0.3957, aux_task5.loss_heatmap: 1.2605, aux_task5.loss_bbox: 0.4116, loss: 24.0846, grad_norm: 69.3924
2025-05-04 18:02:48,056 - mmdet - INFO - Epoch [2][550/2207]	lr: 1.913e-05, eta: 12:08:08, time: 1.049, data_time: 0.007, memory: 16025, loss_cls: 0.9163, loss_bbox: 1.3266, d0.loss_cls: 0.9602, d0.loss_bbox: 1.5947, d1.loss_cls: 0.9189, d1.loss_bbox: 1.3998, d2.loss_cls: 0.9079, d2.loss_bbox: 1.3472, d3.loss_cls: 0.9082, d3.loss_bbox: 1.3392, d4.loss_cls: 0.9133, d4.loss_bbox: 1.3285, aux_task0.loss_heatmap: 1.1963, aux_task0.loss_bbox: 0.4038, aux_task1.loss_heatmap: 1.3796, aux_task1.loss_bbox: 0.4197, aux_task2.loss_heatmap: 1.6081, aux_task2.loss_bbox: 0.4644, aux_task3.loss_heatmap: 1.2950, aux_task3.loss_bbox: 0.3637, aux_task4.loss_heatmap: 1.0168, aux_task4.loss_bbox: 0.3797, aux_task5.loss_heatmap: 1.2591, aux_task5.loss_bbox: 0.4089, loss: 24.0560, grad_norm: 65.2813
