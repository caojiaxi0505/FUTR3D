{"env_info": "sys.platform: linux\nPython: 3.8.20 | packaged by conda-forge | (default, Sep 30 2024, 17:52:49) [GCC 13.3.0]\nCUDA available: True\nGPU 0,1: NVIDIA GeForce RTX 4090 D\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.6, V11.6.55\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0\nPyTorch: 1.13.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2022.1-Product Build 20220311 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.6\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.14.0\nOpenCV: 4.11.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.4\nMMCV CUDA Compiler: 11.6\nMMDetection: 2.27.0\nMMSegmentation: 0.30.0\nMMDetection3D: 1.0.0rc6+637e2ea\nspconv2.0: True", "config": "point_cloud_range = [-54, -54, -5.0, 54, 54, 3.0]\nclass_names = [\n    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n]\ndataset_type = 'NuScenesDataset'\ndata_root = 'data/nuscenes/'\ninput_modality = dict(\n    use_lidar=True,\n    use_camera=False,\n    use_radar=False,\n    use_map=False,\n    use_external=False)\nfile_client_args = dict(backend='disk')\ntrain_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),\n    dict(\n        type='ObjectSample',\n        db_sampler=dict(\n            data_root='data/nuscenes/',\n            info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',\n            rate=1.0,\n            prepare=dict(\n                filter_by_difficulty=[-1],\n                filter_by_min_points=dict(\n                    car=5,\n                    truck=5,\n                    bus=5,\n                    trailer=5,\n                    construction_vehicle=5,\n                    traffic_cone=5,\n                    barrier=5,\n                    motorcycle=5,\n                    bicycle=5,\n                    pedestrian=5)),\n            classes=[\n                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                'traffic_cone'\n            ],\n            sample_groups=dict(\n                car=2,\n                truck=3,\n                construction_vehicle=7,\n                bus=4,\n                trailer=6,\n                barrier=2,\n                motorcycle=6,\n                bicycle=6,\n                pedestrian=2,\n                traffic_cone=2),\n            points_loader=dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk')))),\n    dict(\n        type='GlobalRotScaleTrans',\n        rot_range=[-0.785, 0.785],\n        scale_ratio_range=[0.9, 1.1],\n        translation_std=[0.5, 0.5, 0.5]),\n    dict(\n        type='RandomFlip3D',\n        sync_2d=False,\n        flip_ratio_bev_horizontal=0.5,\n        flip_ratio_bev_vertical=0.5),\n    dict(\n        type='PointsRangeFilter',\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    dict(\n        type='ObjectRangeFilter',\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    dict(\n        type='ObjectNameFilter',\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(type='PointShuffle'),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(type='Collect3D', keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n]\ntest_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),\n    dict(\n        type='MultiScaleFlipAug3D',\n        img_scale=(1333, 800),\n        pts_scale_ratio=1,\n        flip=False,\n        transforms=[\n            dict(\n                type='GlobalRotScaleTrans',\n                rot_range=[0, 0],\n                scale_ratio_range=[1.0, 1.0],\n                translation_std=[0, 0, 0]),\n            dict(type='RandomFlip3D'),\n            dict(\n                type='PointsRangeFilter',\n                point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ],\n                with_label=False),\n            dict(\n                type='Collect3D',\n                keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n        ])\n]\neval_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        with_label=False),\n    dict(type='Collect3D', keys=['points'])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=4,\n    train=dict(\n        type='CBGSDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_train.pkl',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=10,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadAnnotations3D',\n                with_bbox_3d=True,\n                with_label_3d=True),\n            dict(\n                type='GlobalRotScaleTrans',\n                rot_range=[-0.3925, 0.3925],\n                scale_ratio_range=[0.95, 1.05],\n                translation_std=[0, 0, 0]),\n            dict(type='RandomFlip3D', flip_ratio_bev_horizontal=0.5),\n            dict(\n                type='PointsRangeFilter',\n                point_cloud_range=[-50, -50, -5, 50, 50, 3]),\n            dict(\n                type='ObjectRangeFilter',\n                point_cloud_range=[-50, -50, -5, 50, 50, 3]),\n            dict(\n                type='ObjectNameFilter',\n                classes=[\n                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                    'barrier'\n                ]),\n            dict(type='PointShuffle'),\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                    'barrier'\n                ]),\n            dict(\n                type='Collect3D',\n                keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n        ],\n        classes=[\n            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=False,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=False,\n        box_type_3d='LiDAR',\n        split=14,\n        dataset=dict(\n            type='NuScenesDataset',\n            data_root='data/nuscenes/',\n            ann_file='data/nuscenes/nuscenes_infos_train.pkl',\n            pipeline=[\n                dict(\n                    type='LoadPointsFromFile',\n                    coord_type='LIDAR',\n                    load_dim=5,\n                    use_dim=5,\n                    file_client_args=dict(backend='disk')),\n                dict(\n                    type='LoadPointsFromMultiSweeps',\n                    sweeps_num=9,\n                    use_dim=[0, 1, 2, 3, 4],\n                    file_client_args=dict(backend='disk'),\n                    pad_empty_sweeps=True,\n                    remove_close=True),\n                dict(\n                    type='LoadAnnotations3D',\n                    with_bbox_3d=True,\n                    with_label_3d=True),\n                dict(\n                    type='ObjectSample',\n                    db_sampler=dict(\n                        data_root='data/nuscenes/',\n                        info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',\n                        rate=1.0,\n                        prepare=dict(\n                            filter_by_difficulty=[-1],\n                            filter_by_min_points=dict(\n                                car=5,\n                                truck=5,\n                                bus=5,\n                                trailer=5,\n                                construction_vehicle=5,\n                                traffic_cone=5,\n                                barrier=5,\n                                motorcycle=5,\n                                bicycle=5,\n                                pedestrian=5)),\n                        classes=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        sample_groups=dict(\n                            car=2,\n                            truck=3,\n                            construction_vehicle=7,\n                            bus=4,\n                            trailer=6,\n                            barrier=2,\n                            motorcycle=6,\n                            bicycle=6,\n                            pedestrian=2,\n                            traffic_cone=2),\n                        points_loader=dict(\n                            type='LoadPointsFromFile',\n                            coord_type='LIDAR',\n                            load_dim=5,\n                            use_dim=[0, 1, 2, 3, 4],\n                            file_client_args=dict(backend='disk')))),\n                dict(\n                    type='GlobalRotScaleTrans',\n                    rot_range=[-0.785, 0.785],\n                    scale_ratio_range=[0.9, 1.1],\n                    translation_std=[0.5, 0.5, 0.5]),\n                dict(\n                    type='RandomFlip3D',\n                    sync_2d=False,\n                    flip_ratio_bev_horizontal=0.5,\n                    flip_ratio_bev_vertical=0.5),\n                dict(\n                    type='PointsRangeFilter',\n                    point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                dict(\n                    type='ObjectRangeFilter',\n                    point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                dict(\n                    type='ObjectNameFilter',\n                    classes=[\n                        'car', 'truck', 'construction_vehicle', 'bus',\n                        'trailer', 'barrier', 'motorcycle', 'bicycle',\n                        'pedestrian', 'traffic_cone'\n                    ]),\n                dict(type='PointShuffle'),\n                dict(\n                    type='DefaultFormatBundle3D',\n                    class_names=[\n                        'car', 'truck', 'construction_vehicle', 'bus',\n                        'trailer', 'barrier', 'motorcycle', 'bicycle',\n                        'pedestrian', 'traffic_cone'\n                    ]),\n                dict(\n                    type='Collect3D',\n                    keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n            ],\n            classes=[\n                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                'traffic_cone'\n            ],\n            test_mode=False,\n            use_valid_flag=True,\n            box_type_3d='LiDAR')),\n    val=dict(\n        type='NuScenesDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_val.pkl',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=9,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk'),\n                pad_empty_sweeps=True,\n                remove_close=True),\n            dict(\n                type='LoadAnnotations3D',\n                with_bbox_3d=True,\n                with_label_3d=True),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1333, 800),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='GlobalRotScaleTrans',\n                        rot_range=[0, 0],\n                        scale_ratio_range=[1.0, 1.0],\n                        translation_std=[0, 0, 0]),\n                    dict(type='RandomFlip3D'),\n                    dict(\n                        type='PointsRangeFilter',\n                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(\n                        type='Collect3D',\n                        keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=False,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=True,\n        box_type_3d='LiDAR'),\n    test=dict(\n        type='NuScenesDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_val.pkl',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=9,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk'),\n                pad_empty_sweeps=True,\n                remove_close=True),\n            dict(\n                type='LoadAnnotations3D',\n                with_bbox_3d=True,\n                with_label_3d=True),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1333, 800),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='GlobalRotScaleTrans',\n                        rot_range=[0, 0],\n                        scale_ratio_range=[1.0, 1.0],\n                        translation_std=[0, 0, 0]),\n                    dict(type='RandomFlip3D'),\n                    dict(\n                        type='PointsRangeFilter',\n                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(\n                        type='Collect3D',\n                        keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=False,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=True,\n        box_type_3d='LiDAR'))\nevaluation = dict(\n    interval=5,\n    pipeline=[\n        dict(\n            type='LoadPointsFromFile',\n            coord_type='LIDAR',\n            load_dim=5,\n            use_dim=5,\n            file_client_args=dict(backend='disk')),\n        dict(\n            type='LoadPointsFromMultiSweeps',\n            sweeps_num=10,\n            file_client_args=dict(backend='disk')),\n        dict(\n            type='DefaultFormatBundle3D',\n            class_names=[\n                'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                'barrier'\n            ],\n            with_label=False),\n        dict(type='Collect3D', keys=['points'])\n    ])\noptimizer = dict(type='AdamW', lr=1.25e-05, weight_decay=0.01)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='cyclic',\n    target_ratio=(10, 0.0001),\n    cyclic_times=1,\n    step_ratio_up=0.4)\nmomentum_config = dict(\n    policy='cyclic',\n    target_ratio=(0.8947368421052632, 1),\n    cyclic_times=1,\n    step_ratio_up=0.4)\nrunner = dict(type='EpochBasedRunner', max_epochs=20)\ncheckpoint_config = dict(interval=1, max_keep_ckpts=1)\nlog_config = dict(\n    interval=50,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nwork_dir = './work_dirs/lidar_0075v_900q_split14_cascadeded_secondmamba2/\u4e24\u5f20\u5361\u6bcf\u5f20\u53612'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nplugin = 'plugin/futr3d'\nvoxel_size = [0.075, 0.075, 0.2]\ncenter_head = dict(\n    type='CenterHead',\n    in_channels=512,\n    tasks=[\n        dict(num_class=1, class_names=['car']),\n        dict(num_class=2, class_names=['truck', 'construction_vehicle']),\n        dict(num_class=2, class_names=['bus', 'trailer']),\n        dict(num_class=1, class_names=['barrier']),\n        dict(num_class=2, class_names=['motorcycle', 'bicycle']),\n        dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])\n    ],\n    common_heads=dict(\n        reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),\n    share_conv_channel=64,\n    bbox_coder=dict(\n        type='CenterPointBBoxCoder',\n        pc_range=[-54, -54],\n        post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n        max_num=500,\n        score_threshold=0.1,\n        out_size_factor=8,\n        voxel_size=[0.075, 0.075],\n        code_size=9),\n    separate_head=dict(type='SeparateHead', init_bias=-2.19, final_kernel=3),\n    loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),\n    loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),\n    norm_bbox=True)\nmodel = dict(\n    type='FUTR3D',\n    aux_weight=0.5,\n    pts_voxel_layer=dict(\n        max_num_points=10,\n        voxel_size=[0.075, 0.075, 0.2],\n        max_voxels=(120000, 160000),\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    pts_voxel_encoder=dict(type='HardSimpleVFE', num_features=5),\n    pts_middle_encoder=dict(\n        type='SparseEncoder',\n        in_channels=5,\n        sparse_shape=[41, 1440, 1440],\n        output_channels=128,\n        order=('conv', 'norm', 'act'),\n        encoder_channels=((16, 16, 32), (32, 32, 64), (64, 64, 128), (128,\n                                                                      128)),\n        encoder_paddings=((0, 0, 1), (0, 0, 1), (0, 0, [0, 1, 1]), (0, 0)),\n        block_type='basicblock'),\n    pts_backbone=dict(\n        type='CascadeDEDBackbone',\n        in_channels=256,\n        model_cfg=dict(\n            USE_SECONDMAMBA=True,\n            SECONDMAMBA_NUM_LAYERS=2,\n            FEATURE_DIM=256,\n            NUM_LAYERS=2,\n            NUM_SBB=[2, 1, 1],\n            DOWN_STRIDES=[1, 2, 2])),\n    pts_neck=dict(\n        type='FPN',\n        norm_cfg=dict(type='BN2d', eps=0.001, momentum=0.01),\n        act_cfg=dict(type='ReLU', inplace=False),\n        in_channels=[256],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs=True,\n        num_outs=4,\n        relu_before_extra_convs=True),\n    pts_bbox_head=dict(\n        type='FUTR3DHead',\n        use_dab=True,\n        anchor_size=3,\n        use_aux=True,\n        aux_head=dict(\n            type='CenterHead',\n            in_channels=512,\n            tasks=[\n                dict(num_class=1, class_names=['car']),\n                dict(\n                    num_class=2, class_names=['truck',\n                                              'construction_vehicle']),\n                dict(num_class=2, class_names=['bus', 'trailer']),\n                dict(num_class=1, class_names=['barrier']),\n                dict(num_class=2, class_names=['motorcycle', 'bicycle']),\n                dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])\n            ],\n            common_heads=dict(\n                reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),\n            share_conv_channel=64,\n            bbox_coder=dict(\n                type='CenterPointBBoxCoder',\n                pc_range=[-54, -54],\n                post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n                max_num=500,\n                score_threshold=0.1,\n                out_size_factor=8,\n                voxel_size=[0.075, 0.075],\n                code_size=9),\n            separate_head=dict(\n                type='SeparateHead', init_bias=-2.19, final_kernel=3),\n            loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),\n            loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),\n            norm_bbox=True),\n        mix_selection=False,\n        num_query=900,\n        num_classes=10,\n        in_channels=256,\n        pc_range=[-54, -54, -5.0, 54, 54, 3.0],\n        sync_cls_avg_factor=True,\n        with_box_refine=True,\n        as_two_stage=False,\n        code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],\n        transformer=dict(\n            type='FUTR3DTransformer',\n            use_dab=True,\n            decoder=dict(\n                type='FUTR3DTransformerDecoder',\n                num_layers=6,\n                use_dab=True,\n                anchor_size=3,\n                return_intermediate=True,\n                transformerlayers=dict(\n                    type='DetrTransformerDecoderLayer',\n                    attn_cfgs=[\n                        dict(\n                            type='MultiheadAttention',\n                            embed_dims=256,\n                            num_heads=8,\n                            dropout=0.1),\n                        dict(type='FUTR3DAttention', embed_dims=256)\n                    ],\n                    feedforward_channels=1024,\n                    ffn_dropout=0.1,\n                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',\n                                     'ffn', 'norm')))),\n        positional_encoding=dict(\n            type='SinePositionalEncoding',\n            num_feats=128,\n            normalize=True,\n            offset=-0.5),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=2.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=0.25),\n        loss_iou=dict(type='GIoULoss', loss_weight=0)),\n    train_cfg=dict(\n        pts=dict(\n            point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0],\n            pc_range=[-54, -54, -5.0, 54, 54, 3.0],\n            grid_size=[1440, 1440, 40],\n            voxel_size=[0.075, 0.075, 0.2],\n            out_size_factor=8,\n            dense_reg=1,\n            gaussian_overlap=0.1,\n            max_objs=500,\n            min_radius=2,\n            code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],\n            assigner=dict(\n                type='HungarianAssigner3D',\n                cls_cost=dict(type='FocalLossCost', weight=2.0),\n                reg_cost=dict(type='BBox3DL1Cost', weight=0.25),\n                iou_cost=dict(type='IoUCost', weight=0)))),\n    test_cfg=dict(\n        pts=dict(\n            pc_range=[-54, -54],\n            post_center_limit_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n            max_per_img=500,\n            max_pool_nms=False,\n            min_radius=[4, 12, 10, 1, 0.85, 0.175],\n            out_size_factor=8,\n            voxel_size=[0.075, 0.075],\n            nms_type='circle',\n            pre_max_size=1000,\n            post_max_size=83,\n            nms_thr=0.2,\n            max_num=300,\n            score_threshold=0,\n            post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0])))\ndb_sampler = dict(\n    data_root='data/nuscenes/',\n    info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',\n    rate=1.0,\n    prepare=dict(\n        filter_by_difficulty=[-1],\n        filter_by_min_points=dict(\n            car=5,\n            truck=5,\n            bus=5,\n            trailer=5,\n            construction_vehicle=5,\n            traffic_cone=5,\n            barrier=5,\n            motorcycle=5,\n            bicycle=5,\n            pedestrian=5)),\n    classes=[\n        'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n        'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n    ],\n    sample_groups=dict(\n        car=2,\n        truck=3,\n        construction_vehicle=7,\n        bus=4,\n        trailer=6,\n        barrier=2,\n        motorcycle=6,\n        bicycle=6,\n        pedestrian=2,\n        traffic_cone=2),\n    points_loader=dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk')))\nfind_unused_parameters = True\ncustom_hooks = [dict(type='FadeOjectSampleHook', num_last_epochs=5)]\ngpu_ids = range(0, 2)\n", "seed": 0, "exp_name": "lidar_0075v_900q_split14_cascadeded_secondmamba2.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 1e-05, "memory": 15855, "data_time": 0.14926, "loss_cls": 1.49269, "loss_bbox": 2.28342, "d0.loss_cls": 1.86812, "d0.loss_bbox": 4.48168, "d1.loss_cls": 1.72674, "d1.loss_bbox": 2.32826, "d2.loss_cls": 1.66032, "d2.loss_bbox": 2.30829, "d3.loss_cls": 1.57858, "d3.loss_bbox": 2.29062, "d4.loss_cls": 1.53421, "d4.loss_bbox": 2.28514, "aux_task0.loss_heatmap": 445.15709, "aux_task0.loss_bbox": 0.80467, "aux_task1.loss_heatmap": 882.0852, "aux_task1.loss_bbox": 1.02611, "aux_task2.loss_heatmap": 947.79872, "aux_task2.loss_bbox": 1.14433, "aux_task3.loss_heatmap": 1574.30825, "aux_task3.loss_bbox": 0.76979, "aux_task4.loss_heatmap": 281.886, "aux_task4.loss_bbox": 0.62854, "aux_task5.loss_heatmap": 908.56232, "aux_task5.loss_bbox": 0.67961, "loss": 5070.68867, "grad_norm": 702581.25375, "time": 1.41205}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 1e-05, "memory": 15857, "data_time": 0.00709, "loss_cls": 1.18512, "loss_bbox": 2.2047, "d0.loss_cls": 1.63556, "d0.loss_bbox": 4.36624, "d1.loss_cls": 1.37538, "d1.loss_bbox": 2.27196, "d2.loss_cls": 1.26702, "d2.loss_bbox": 2.24568, "d3.loss_cls": 1.22611, "d3.loss_bbox": 2.22596, "d4.loss_cls": 1.19739, "d4.loss_bbox": 2.21367, "aux_task0.loss_heatmap": 375.19791, "aux_task0.loss_bbox": 0.77001, "aux_task1.loss_heatmap": 720.07591, "aux_task1.loss_bbox": 0.93447, "aux_task2.loss_heatmap": 791.79579, "aux_task2.loss_bbox": 1.06168, "aux_task3.loss_heatmap": 1030.52976, "aux_task3.loss_bbox": 0.70066, "aux_task4.loss_heatmap": 208.28275, "aux_task4.loss_bbox": 0.59096, "aux_task5.loss_heatmap": 651.94521, "aux_task5.loss_bbox": 0.63924, "loss": 3805.93917, "grad_norm": 496051.37719, "time": 1.05371}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 15857, "data_time": 0.01014, "loss_cls": 1.18423, "loss_bbox": 2.12044, "d0.loss_cls": 1.4128, "d0.loss_bbox": 4.3663, "d1.loss_cls": 1.22976, "d1.loss_bbox": 2.24555, "d2.loss_cls": 1.18916, "d2.loss_bbox": 2.20651, "d3.loss_cls": 1.18649, "d3.loss_bbox": 2.17414, "d4.loss_cls": 1.1843, "d4.loss_bbox": 2.14523, "aux_task0.loss_heatmap": 277.70326, "aux_task0.loss_bbox": 0.72401, "aux_task1.loss_heatmap": 482.33552, "aux_task1.loss_bbox": 0.85409, "aux_task2.loss_heatmap": 571.72314, "aux_task2.loss_bbox": 0.96647, "aux_task3.loss_heatmap": 935.03654, "aux_task3.loss_bbox": 0.65297, "aux_task4.loss_heatmap": 144.31758, "aux_task4.loss_bbox": 0.56285, "aux_task5.loss_heatmap": 550.30632, "aux_task5.loss_bbox": 0.58001, "loss": 2988.40768, "grad_norm": 298679.65156, "time": 1.05448}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 1e-05, "memory": 15886, "data_time": 0.00709, "loss_cls": 1.19127, "loss_bbox": 1.88546, "d0.loss_cls": 1.25096, "d0.loss_bbox": 4.07854, "d1.loss_cls": 1.18212, "d1.loss_bbox": 2.10979, "d2.loss_cls": 1.18393, "d2.loss_bbox": 2.03613, "d3.loss_cls": 1.18759, "d3.loss_bbox": 1.97756, "d4.loss_cls": 1.19046, "d4.loss_bbox": 1.92094, "aux_task0.loss_heatmap": 189.88805, "aux_task0.loss_bbox": 0.66291, "aux_task1.loss_heatmap": 301.21046, "aux_task1.loss_bbox": 0.76543, "aux_task2.loss_heatmap": 313.84267, "aux_task2.loss_bbox": 0.90643, "aux_task3.loss_heatmap": 513.97209, "aux_task3.loss_bbox": 0.53789, "aux_task4.loss_heatmap": 81.99005, "aux_task4.loss_bbox": 0.51567, "aux_task5.loss_heatmap": 332.96356, "aux_task5.loss_bbox": 0.53003, "loss": 1758.97999, "grad_norm": 135822.62727, "time": 1.04901}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 1e-05, "memory": 15886, "data_time": 0.00742, "loss_cls": 1.16394, "loss_bbox": 1.87909, "d0.loss_cls": 1.16107, "d0.loss_bbox": 3.19885, "d1.loss_cls": 1.15463, "d1.loss_bbox": 1.85063, "d2.loss_cls": 1.15928, "d2.loss_bbox": 1.7909, "d3.loss_cls": 1.16344, "d3.loss_bbox": 1.78857, "d4.loss_cls": 1.16413, "d4.loss_bbox": 1.823, "aux_task0.loss_heatmap": 72.70403, "aux_task0.loss_bbox": 0.58852, "aux_task1.loss_heatmap": 156.0541, "aux_task1.loss_bbox": 0.65557, "aux_task2.loss_heatmap": 166.96872, "aux_task2.loss_bbox": 0.77554, "aux_task3.loss_heatmap": 197.36422, "aux_task3.loss_bbox": 0.48891, "aux_task4.loss_heatmap": 44.29894, "aux_task4.loss_bbox": 0.46466, "aux_task5.loss_heatmap": 145.27992, "aux_task5.loss_bbox": 0.50314, "loss": 805.44382, "grad_norm": 55819.79154, "time": 1.11989}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 1e-05, "memory": 15886, "data_time": 0.00635, "loss_cls": 1.16272, "loss_bbox": 1.99702, "d0.loss_cls": 1.1532, "d0.loss_bbox": 1.99896, "d1.loss_cls": 1.15836, "d1.loss_bbox": 1.7672, "d2.loss_cls": 1.16053, "d2.loss_bbox": 1.83051, "d3.loss_cls": 1.1613, "d3.loss_bbox": 1.90032, "d4.loss_cls": 1.16074, "d4.loss_bbox": 1.95512, "aux_task0.loss_heatmap": 37.55217, "aux_task0.loss_bbox": 0.5121, "aux_task1.loss_heatmap": 79.84655, "aux_task1.loss_bbox": 0.56885, "aux_task2.loss_heatmap": 81.56893, "aux_task2.loss_bbox": 0.69365, "aux_task3.loss_heatmap": 111.84526, "aux_task3.loss_bbox": 0.4457, "aux_task4.loss_heatmap": 20.42214, "aux_task4.loss_bbox": 0.43577, "aux_task5.loss_heatmap": 84.66883, "aux_task5.loss_bbox": 0.47317, "loss": 437.43908, "grad_norm": 23997.95666, "time": 1.0491}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 1e-05, "memory": 15886, "data_time": 0.00608, "loss_cls": 1.16679, "loss_bbox": 1.83391, "d0.loss_cls": 1.16496, "d0.loss_bbox": 1.77336, "d1.loss_cls": 1.16619, "d1.loss_bbox": 1.76589, "d2.loss_cls": 1.16265, "d2.loss_bbox": 1.79442, "d3.loss_cls": 1.16386, "d3.loss_bbox": 1.81719, "d4.loss_cls": 1.16769, "d4.loss_bbox": 1.83263, "aux_task0.loss_heatmap": 25.45235, "aux_task0.loss_bbox": 0.4764, "aux_task1.loss_heatmap": 41.00921, "aux_task1.loss_bbox": 0.53337, "aux_task2.loss_heatmap": 44.13404, "aux_task2.loss_bbox": 0.59196, "aux_task3.loss_heatmap": 60.8925, "aux_task3.loss_bbox": 0.41973, "aux_task4.loss_heatmap": 10.43114, "aux_task4.loss_bbox": 0.42837, "aux_task5.loss_heatmap": 43.3355, "aux_task5.loss_bbox": 0.46365, "loss": 245.97776, "grad_norm": 12412.57072, "time": 1.0515}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 1e-05, "memory": 15886, "data_time": 0.0088, "loss_cls": 1.13856, "loss_bbox": 1.72959, "d0.loss_cls": 1.14469, "d0.loss_bbox": 1.75097, "d1.loss_cls": 1.14079, "d1.loss_bbox": 1.73762, "d2.loss_cls": 1.13388, "d2.loss_bbox": 1.74227, "d3.loss_cls": 1.13588, "d3.loss_bbox": 1.74321, "d4.loss_cls": 1.13792, "d4.loss_bbox": 1.73783, "aux_task0.loss_heatmap": 9.57204, "aux_task0.loss_bbox": 0.44791, "aux_task1.loss_heatmap": 20.41895, "aux_task1.loss_bbox": 0.52239, "aux_task2.loss_heatmap": 21.61122, "aux_task2.loss_bbox": 0.55936, "aux_task3.loss_heatmap": 32.36016, "aux_task3.loss_bbox": 0.43084, "aux_task4.loss_heatmap": 5.45432, "aux_task4.loss_bbox": 0.42663, "aux_task5.loss_heatmap": 20.01699, "aux_task5.loss_bbox": 0.47185, "loss": 129.56587, "grad_norm": 3989.80313, "time": 1.04952}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 1e-05, "memory": 15886, "data_time": 0.00636, "loss_cls": 1.14038, "loss_bbox": 1.74234, "d0.loss_cls": 1.14683, "d0.loss_bbox": 1.76681, "d1.loss_cls": 1.14305, "d1.loss_bbox": 1.74388, "d2.loss_cls": 1.1373, "d2.loss_bbox": 1.73878, "d3.loss_cls": 1.13751, "d3.loss_bbox": 1.73503, "d4.loss_cls": 1.14013, "d4.loss_bbox": 1.73694, "aux_task0.loss_heatmap": 6.73262, "aux_task0.loss_bbox": 0.43624, "aux_task1.loss_heatmap": 9.99673, "aux_task1.loss_bbox": 0.4987, "aux_task2.loss_heatmap": 10.06799, "aux_task2.loss_bbox": 0.51699, "aux_task3.loss_heatmap": 13.19418, "aux_task3.loss_bbox": 0.41709, "aux_task4.loss_heatmap": 3.1392, "aux_task4.loss_bbox": 0.43285, "aux_task5.loss_heatmap": 9.64947, "aux_task5.loss_bbox": 0.46468, "loss": 72.85572, "grad_norm": 1874.26867, "time": 1.05681}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 1e-05, "memory": 15886, "data_time": 0.00649, "loss_cls": 1.12533, "loss_bbox": 1.72537, "d0.loss_cls": 1.13425, "d0.loss_bbox": 1.74731, "d1.loss_cls": 1.1312, "d1.loss_bbox": 1.72766, "d2.loss_cls": 1.1267, "d2.loss_bbox": 1.72106, "d3.loss_cls": 1.1271, "d3.loss_bbox": 1.7206, "d4.loss_cls": 1.12741, "d4.loss_bbox": 1.72084, "aux_task0.loss_heatmap": 3.38484, "aux_task0.loss_bbox": 0.44851, "aux_task1.loss_heatmap": 5.7797, "aux_task1.loss_bbox": 0.49554, "aux_task2.loss_heatmap": 6.50962, "aux_task2.loss_bbox": 0.50151, "aux_task3.loss_heatmap": 7.55026, "aux_task3.loss_bbox": 0.40533, "aux_task4.loss_heatmap": 2.2391, "aux_task4.loss_bbox": 0.43292, "aux_task5.loss_heatmap": 5.8961, "aux_task5.loss_bbox": 0.47835, "loss": 51.25662, "grad_norm": 1026.0005, "time": 1.04621}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 1e-05, "memory": 15886, "data_time": 0.0064, "loss_cls": 1.12396, "loss_bbox": 1.72537, "d0.loss_cls": 1.12686, "d0.loss_bbox": 1.74628, "d1.loss_cls": 1.12416, "d1.loss_bbox": 1.72895, "d2.loss_cls": 1.12079, "d2.loss_bbox": 1.7247, "d3.loss_cls": 1.12202, "d3.loss_bbox": 1.72608, "d4.loss_cls": 1.12069, "d4.loss_bbox": 1.72669, "aux_task0.loss_heatmap": 2.59169, "aux_task0.loss_bbox": 0.45104, "aux_task1.loss_heatmap": 3.63467, "aux_task1.loss_bbox": 0.4979, "aux_task2.loss_heatmap": 3.83687, "aux_task2.loss_bbox": 0.5142, "aux_task3.loss_heatmap": 5.06871, "aux_task3.loss_bbox": 0.41314, "aux_task4.loss_heatmap": 1.89394, "aux_task4.loss_bbox": 0.41695, "aux_task5.loss_heatmap": 3.76906, "aux_task5.loss_bbox": 0.46485, "loss": 40.66959, "grad_norm": 741.35658, "time": 1.04747}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 1e-05, "memory": 15947, "data_time": 0.00914, "loss_cls": 1.1277, "loss_bbox": 1.71982, "d0.loss_cls": 1.1418, "d0.loss_bbox": 1.73919, "d1.loss_cls": 1.13423, "d1.loss_bbox": 1.72344, "d2.loss_cls": 1.12798, "d2.loss_bbox": 1.72163, "d3.loss_cls": 1.1281, "d3.loss_bbox": 1.71693, "d4.loss_cls": 1.12612, "d4.loss_bbox": 1.71831, "aux_task0.loss_heatmap": 2.17099, "aux_task0.loss_bbox": 0.45459, "aux_task1.loss_heatmap": 2.84574, "aux_task1.loss_bbox": 0.50142, "aux_task2.loss_heatmap": 2.95143, "aux_task2.loss_bbox": 0.51267, "aux_task3.loss_heatmap": 4.3349, "aux_task3.loss_bbox": 0.41816, "aux_task4.loss_heatmap": 1.74747, "aux_task4.loss_bbox": 0.42547, "aux_task5.loss_heatmap": 3.02299, "aux_task5.loss_bbox": 0.46759, "loss": 36.97868, "grad_norm": 656.53904, "time": 1.05156}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 1e-05, "memory": 15947, "data_time": 0.00653, "loss_cls": 1.11927, "loss_bbox": 1.71725, "d0.loss_cls": 1.13683, "d0.loss_bbox": 1.74802, "d1.loss_cls": 1.12597, "d1.loss_bbox": 1.71947, "d2.loss_cls": 1.1203, "d2.loss_bbox": 1.71819, "d3.loss_cls": 1.12165, "d3.loss_bbox": 1.71507, "d4.loss_cls": 1.11765, "d4.loss_bbox": 1.71444, "aux_task0.loss_heatmap": 1.96509, "aux_task0.loss_bbox": 0.46571, "aux_task1.loss_heatmap": 2.42958, "aux_task1.loss_bbox": 0.51071, "aux_task2.loss_heatmap": 2.46972, "aux_task2.loss_bbox": 0.51462, "aux_task3.loss_heatmap": 3.13658, "aux_task3.loss_bbox": 0.42891, "aux_task4.loss_heatmap": 1.67108, "aux_task4.loss_bbox": 0.42932, "aux_task5.loss_heatmap": 2.49574, "aux_task5.loss_bbox": 0.47012, "loss": 34.06128, "grad_norm": 576.67627, "time": 1.04393}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 1e-05, "memory": 15947, "data_time": 0.00626, "loss_cls": 1.10927, "loss_bbox": 1.70959, "d0.loss_cls": 1.12479, "d0.loss_bbox": 1.73815, "d1.loss_cls": 1.117, "d1.loss_bbox": 1.71436, "d2.loss_cls": 1.11208, "d2.loss_bbox": 1.71356, "d3.loss_cls": 1.1104, "d3.loss_bbox": 1.7109, "d4.loss_cls": 1.10734, "d4.loss_bbox": 1.71134, "aux_task0.loss_heatmap": 1.75804, "aux_task0.loss_bbox": 0.45277, "aux_task1.loss_heatmap": 2.17441, "aux_task1.loss_bbox": 0.51439, "aux_task2.loss_heatmap": 2.28539, "aux_task2.loss_bbox": 0.48966, "aux_task3.loss_heatmap": 2.92391, "aux_task3.loss_bbox": 0.41826, "aux_task4.loss_heatmap": 1.6418, "aux_task4.loss_bbox": 0.42792, "aux_task5.loss_heatmap": 2.19679, "aux_task5.loss_bbox": 0.46975, "loss": 32.73188, "grad_norm": 583.28598, "time": 1.0446}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 1e-05, "memory": 15947, "data_time": 0.00672, "loss_cls": 1.10181, "loss_bbox": 1.69786, "d0.loss_cls": 1.1163, "d0.loss_bbox": 1.72655, "d1.loss_cls": 1.10573, "d1.loss_bbox": 1.69872, "d2.loss_cls": 1.10206, "d2.loss_bbox": 1.69969, "d3.loss_cls": 1.1035, "d3.loss_bbox": 1.70082, "d4.loss_cls": 1.10052, "d4.loss_bbox": 1.69779, "aux_task0.loss_heatmap": 1.72034, "aux_task0.loss_bbox": 0.44763, "aux_task1.loss_heatmap": 2.0182, "aux_task1.loss_bbox": 0.498, "aux_task2.loss_heatmap": 2.13407, "aux_task2.loss_bbox": 0.48519, "aux_task3.loss_heatmap": 2.33578, "aux_task3.loss_bbox": 0.42479, "aux_task4.loss_heatmap": 1.60953, "aux_task4.loss_bbox": 0.43547, "aux_task5.loss_heatmap": 2.06172, "aux_task5.loss_bbox": 0.46626, "loss": 31.48837, "grad_norm": 547.32597, "time": 1.05012}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 1e-05, "memory": 15947, "data_time": 0.00669, "loss_cls": 1.08143, "loss_bbox": 1.67758, "d0.loss_cls": 1.10421, "d0.loss_bbox": 1.7066, "d1.loss_cls": 1.08701, "d1.loss_bbox": 1.68471, "d2.loss_cls": 1.08262, "d2.loss_bbox": 1.68402, "d3.loss_cls": 1.08597, "d3.loss_bbox": 1.68009, "d4.loss_cls": 1.08079, "d4.loss_bbox": 1.67888, "aux_task0.loss_heatmap": 1.59402, "aux_task0.loss_bbox": 0.45522, "aux_task1.loss_heatmap": 1.88422, "aux_task1.loss_bbox": 0.4914, "aux_task2.loss_heatmap": 2.05139, "aux_task2.loss_bbox": 0.4875, "aux_task3.loss_heatmap": 2.36475, "aux_task3.loss_bbox": 0.40059, "aux_task4.loss_heatmap": 1.58445, "aux_task4.loss_bbox": 0.42437, "aux_task5.loss_heatmap": 1.93671, "aux_task5.loss_bbox": 0.46391, "loss": 30.77242, "grad_norm": 481.02869, "time": 1.04979}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 1e-05, "memory": 15947, "data_time": 0.00613, "loss_cls": 1.10184, "loss_bbox": 1.69254, "d0.loss_cls": 1.11775, "d0.loss_bbox": 1.72245, "d1.loss_cls": 1.10329, "d1.loss_bbox": 1.69948, "d2.loss_cls": 1.10249, "d2.loss_bbox": 1.69657, "d3.loss_cls": 1.10447, "d3.loss_bbox": 1.69433, "d4.loss_cls": 1.10104, "d4.loss_bbox": 1.69368, "aux_task0.loss_heatmap": 1.61613, "aux_task0.loss_bbox": 0.43605, "aux_task1.loss_heatmap": 1.83692, "aux_task1.loss_bbox": 0.50304, "aux_task2.loss_heatmap": 1.94334, "aux_task2.loss_bbox": 0.50276, "aux_task3.loss_heatmap": 2.09095, "aux_task3.loss_bbox": 0.40822, "aux_task4.loss_heatmap": 1.56965, "aux_task4.loss_bbox": 0.4256, "aux_task5.loss_heatmap": 1.91563, "aux_task5.loss_bbox": 0.46055, "loss": 30.53876, "grad_norm": 426.71974, "time": 1.05021}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 1e-05, "memory": 15947, "data_time": 0.00628, "loss_cls": 1.09942, "loss_bbox": 1.70174, "d0.loss_cls": 1.11691, "d0.loss_bbox": 1.73214, "d1.loss_cls": 1.10512, "d1.loss_bbox": 1.70609, "d2.loss_cls": 1.09922, "d2.loss_bbox": 1.70577, "d3.loss_cls": 1.10143, "d3.loss_bbox": 1.70139, "d4.loss_cls": 1.09795, "d4.loss_bbox": 1.70285, "aux_task0.loss_heatmap": 1.56546, "aux_task0.loss_bbox": 0.44882, "aux_task1.loss_heatmap": 1.79045, "aux_task1.loss_bbox": 0.50329, "aux_task2.loss_heatmap": 1.91262, "aux_task2.loss_bbox": 0.50839, "aux_task3.loss_heatmap": 2.03436, "aux_task3.loss_bbox": 0.40546, "aux_task4.loss_heatmap": 1.55763, "aux_task4.loss_bbox": 0.42752, "aux_task5.loss_heatmap": 1.78734, "aux_task5.loss_bbox": 0.46824, "loss": 30.27959, "grad_norm": 404.73541, "time": 1.04779}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 1e-05, "memory": 15960, "data_time": 0.00661, "loss_cls": 1.08149, "loss_bbox": 1.70272, "d0.loss_cls": 1.09973, "d0.loss_bbox": 1.73679, "d1.loss_cls": 1.08296, "d1.loss_bbox": 1.71074, "d2.loss_cls": 1.07862, "d2.loss_bbox": 1.70928, "d3.loss_cls": 1.08251, "d3.loss_bbox": 1.70412, "d4.loss_cls": 1.07906, "d4.loss_bbox": 1.70454, "aux_task0.loss_heatmap": 1.5462, "aux_task0.loss_bbox": 0.45823, "aux_task1.loss_heatmap": 1.72956, "aux_task1.loss_bbox": 0.50988, "aux_task2.loss_heatmap": 1.80724, "aux_task2.loss_bbox": 0.48152, "aux_task3.loss_heatmap": 1.85505, "aux_task3.loss_bbox": 0.40663, "aux_task4.loss_heatmap": 1.53031, "aux_task4.loss_bbox": 0.42283, "aux_task5.loss_heatmap": 1.70885, "aux_task5.loss_bbox": 0.46068, "loss": 29.68952, "grad_norm": 357.03098, "time": 1.05026}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 1e-05, "memory": 15960, "data_time": 0.00718, "loss_cls": 1.09184, "loss_bbox": 1.68566, "d0.loss_cls": 1.10956, "d0.loss_bbox": 1.72376, "d1.loss_cls": 1.09566, "d1.loss_bbox": 1.68955, "d2.loss_cls": 1.08993, "d2.loss_bbox": 1.6872, "d3.loss_cls": 1.09227, "d3.loss_bbox": 1.68391, "d4.loss_cls": 1.09204, "d4.loss_bbox": 1.68586, "aux_task0.loss_heatmap": 1.57402, "aux_task0.loss_bbox": 0.45675, "aux_task1.loss_heatmap": 1.67359, "aux_task1.loss_bbox": 0.49377, "aux_task2.loss_heatmap": 1.83475, "aux_task2.loss_bbox": 0.49074, "aux_task3.loss_heatmap": 1.90439, "aux_task3.loss_bbox": 0.41691, "aux_task4.loss_heatmap": 1.51948, "aux_task4.loss_bbox": 0.42385, "aux_task5.loss_heatmap": 1.71497, "aux_task5.loss_bbox": 0.46547, "loss": 29.69591, "grad_norm": 353.43022, "time": 1.05118}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 1e-05, "memory": 15960, "data_time": 0.00662, "loss_cls": 1.07349, "loss_bbox": 1.70676, "d0.loss_cls": 1.09485, "d0.loss_bbox": 1.73944, "d1.loss_cls": 1.07846, "d1.loss_bbox": 1.71312, "d2.loss_cls": 1.07175, "d2.loss_bbox": 1.71027, "d3.loss_cls": 1.07397, "d3.loss_bbox": 1.70708, "d4.loss_cls": 1.07258, "d4.loss_bbox": 1.70737, "aux_task0.loss_heatmap": 1.49773, "aux_task0.loss_bbox": 0.45856, "aux_task1.loss_heatmap": 1.63395, "aux_task1.loss_bbox": 0.50354, "aux_task2.loss_heatmap": 1.77483, "aux_task2.loss_bbox": 0.50357, "aux_task3.loss_heatmap": 1.76279, "aux_task3.loss_bbox": 0.41586, "aux_task4.loss_heatmap": 1.5154, "aux_task4.loss_bbox": 0.43195, "aux_task5.loss_heatmap": 1.69188, "aux_task5.loss_bbox": 0.4701, "loss": 29.40931, "grad_norm": 309.15185, "time": 1.05147}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 1e-05, "memory": 15960, "data_time": 0.00627, "loss_cls": 1.06812, "loss_bbox": 1.70078, "d0.loss_cls": 1.08616, "d0.loss_bbox": 1.73874, "d1.loss_cls": 1.06951, "d1.loss_bbox": 1.71204, "d2.loss_cls": 1.06518, "d2.loss_bbox": 1.70744, "d3.loss_cls": 1.06756, "d3.loss_bbox": 1.70178, "d4.loss_cls": 1.06476, "d4.loss_bbox": 1.70163, "aux_task0.loss_heatmap": 1.48918, "aux_task0.loss_bbox": 0.45861, "aux_task1.loss_heatmap": 1.624, "aux_task1.loss_bbox": 0.51505, "aux_task2.loss_heatmap": 1.79066, "aux_task2.loss_bbox": 0.50216, "aux_task3.loss_heatmap": 1.74642, "aux_task3.loss_bbox": 0.41741, "aux_task4.loss_heatmap": 1.49855, "aux_task4.loss_bbox": 0.42976, "aux_task5.loss_heatmap": 1.62421, "aux_task5.loss_bbox": 0.46635, "loss": 29.24607, "grad_norm": 280.06182, "time": 1.0474}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 1e-05, "memory": 15960, "data_time": 0.00706, "loss_cls": 1.06719, "loss_bbox": 1.67513, "d0.loss_cls": 1.08106, "d0.loss_bbox": 1.72108, "d1.loss_cls": 1.06772, "d1.loss_bbox": 1.68796, "d2.loss_cls": 1.06294, "d2.loss_bbox": 1.68392, "d3.loss_cls": 1.06419, "d3.loss_bbox": 1.67991, "d4.loss_cls": 1.06498, "d4.loss_bbox": 1.67724, "aux_task0.loss_heatmap": 1.47359, "aux_task0.loss_bbox": 0.44619, "aux_task1.loss_heatmap": 1.59953, "aux_task1.loss_bbox": 0.498, "aux_task2.loss_heatmap": 1.76424, "aux_task2.loss_bbox": 0.50136, "aux_task3.loss_heatmap": 1.69534, "aux_task3.loss_bbox": 0.41427, "aux_task4.loss_heatmap": 1.48792, "aux_task4.loss_bbox": 0.42984, "aux_task5.loss_heatmap": 1.62464, "aux_task5.loss_bbox": 0.46409, "loss": 28.93231, "grad_norm": 247.47031, "time": 1.0495}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 1e-05, "memory": 15960, "data_time": 0.0068, "loss_cls": 1.06399, "loss_bbox": 1.64763, "d0.loss_cls": 1.07789, "d0.loss_bbox": 1.70158, "d1.loss_cls": 1.0608, "d1.loss_bbox": 1.66442, "d2.loss_cls": 1.05654, "d2.loss_bbox": 1.65593, "d3.loss_cls": 1.05793, "d3.loss_bbox": 1.65273, "d4.loss_cls": 1.06131, "d4.loss_bbox": 1.65022, "aux_task0.loss_heatmap": 1.44734, "aux_task0.loss_bbox": 0.44281, "aux_task1.loss_heatmap": 1.58269, "aux_task1.loss_bbox": 0.49135, "aux_task2.loss_heatmap": 1.74834, "aux_task2.loss_bbox": 0.49296, "aux_task3.loss_heatmap": 1.69142, "aux_task3.loss_bbox": 0.40608, "aux_task4.loss_heatmap": 1.47671, "aux_task4.loss_bbox": 0.42994, "aux_task5.loss_heatmap": 1.60024, "aux_task5.loss_bbox": 0.46972, "loss": 28.63059, "grad_norm": 239.89183, "time": 1.05226}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 1e-05, "memory": 15960, "data_time": 0.00661, "loss_cls": 1.06581, "loss_bbox": 1.66265, "d0.loss_cls": 1.08559, "d0.loss_bbox": 1.72052, "d1.loss_cls": 1.06684, "d1.loss_bbox": 1.68609, "d2.loss_cls": 1.05655, "d2.loss_bbox": 1.67454, "d3.loss_cls": 1.05509, "d3.loss_bbox": 1.66997, "d4.loss_cls": 1.05857, "d4.loss_bbox": 1.66694, "aux_task0.loss_heatmap": 1.52107, "aux_task0.loss_bbox": 0.46659, "aux_task1.loss_heatmap": 1.55303, "aux_task1.loss_bbox": 0.49446, "aux_task2.loss_heatmap": 1.73269, "aux_task2.loss_bbox": 0.50162, "aux_task3.loss_heatmap": 1.67389, "aux_task3.loss_bbox": 0.40962, "aux_task4.loss_heatmap": 1.45909, "aux_task4.loss_bbox": 0.43956, "aux_task5.loss_heatmap": 1.60827, "aux_task5.loss_bbox": 0.46814, "loss": 28.79719, "grad_norm": 241.52125, "time": 1.05317}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 1e-05, "memory": 15960, "data_time": 0.00668, "loss_cls": 1.03863, "loss_bbox": 1.62752, "d0.loss_cls": 1.06488, "d0.loss_bbox": 1.70627, "d1.loss_cls": 1.04766, "d1.loss_bbox": 1.66238, "d2.loss_cls": 1.02997, "d2.loss_bbox": 1.64613, "d3.loss_cls": 1.02511, "d3.loss_bbox": 1.63929, "d4.loss_cls": 1.03103, "d4.loss_bbox": 1.63271, "aux_task0.loss_heatmap": 1.45123, "aux_task0.loss_bbox": 0.44952, "aux_task1.loss_heatmap": 1.53339, "aux_task1.loss_bbox": 0.50455, "aux_task2.loss_heatmap": 1.73875, "aux_task2.loss_bbox": 0.51387, "aux_task3.loss_heatmap": 1.67015, "aux_task3.loss_bbox": 0.41175, "aux_task4.loss_heatmap": 1.44312, "aux_task4.loss_bbox": 0.42984, "aux_task5.loss_heatmap": 1.56876, "aux_task5.loss_bbox": 0.46333, "loss": 28.32982, "grad_norm": 215.10716, "time": 1.04616}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 1e-05, "memory": 15960, "data_time": 0.00648, "loss_cls": 1.00772, "loss_bbox": 1.61656, "d0.loss_cls": 1.05687, "d0.loss_bbox": 1.71396, "d1.loss_cls": 1.04055, "d1.loss_bbox": 1.66781, "d2.loss_cls": 1.01521, "d2.loss_bbox": 1.63989, "d3.loss_cls": 1.00387, "d3.loss_bbox": 1.62937, "d4.loss_cls": 1.00293, "d4.loss_bbox": 1.62104, "aux_task0.loss_heatmap": 1.42613, "aux_task0.loss_bbox": 0.46436, "aux_task1.loss_heatmap": 1.52485, "aux_task1.loss_bbox": 0.49867, "aux_task2.loss_heatmap": 1.71926, "aux_task2.loss_bbox": 0.50991, "aux_task3.loss_heatmap": 1.58933, "aux_task3.loss_bbox": 0.41396, "aux_task4.loss_heatmap": 1.41846, "aux_task4.loss_bbox": 0.4252, "aux_task5.loss_heatmap": 1.55137, "aux_task5.loss_bbox": 0.46724, "loss": 28.0245, "grad_norm": 188.95448, "time": 1.04941}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 1e-05, "memory": 15960, "data_time": 0.00645, "loss_cls": 0.99533, "loss_bbox": 1.61087, "d0.loss_cls": 1.05934, "d0.loss_bbox": 1.71958, "d1.loss_cls": 1.03786, "d1.loss_bbox": 1.66947, "d2.loss_cls": 1.00543, "d2.loss_bbox": 1.62686, "d3.loss_cls": 0.99335, "d3.loss_bbox": 1.61743, "d4.loss_cls": 0.99379, "d4.loss_bbox": 1.61395, "aux_task0.loss_heatmap": 1.45965, "aux_task0.loss_bbox": 0.46436, "aux_task1.loss_heatmap": 1.51152, "aux_task1.loss_bbox": 0.49191, "aux_task2.loss_heatmap": 1.73289, "aux_task2.loss_bbox": 0.49252, "aux_task3.loss_heatmap": 1.5825, "aux_task3.loss_bbox": 0.41286, "aux_task4.loss_heatmap": 1.39768, "aux_task4.loss_bbox": 0.43224, "aux_task5.loss_heatmap": 1.53491, "aux_task5.loss_bbox": 0.45894, "loss": 27.91526, "grad_norm": 178.90294, "time": 1.05345}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 1e-05, "memory": 15960, "data_time": 0.00615, "loss_cls": 0.98874, "loss_bbox": 1.5962, "d0.loss_cls": 1.05097, "d0.loss_bbox": 1.71582, "d1.loss_cls": 1.03154, "d1.loss_bbox": 1.65712, "d2.loss_cls": 0.9978, "d2.loss_bbox": 1.60924, "d3.loss_cls": 0.98459, "d3.loss_bbox": 1.60343, "d4.loss_cls": 0.98351, "d4.loss_bbox": 1.60115, "aux_task0.loss_heatmap": 1.43188, "aux_task0.loss_bbox": 0.4538, "aux_task1.loss_heatmap": 1.52443, "aux_task1.loss_bbox": 0.49371, "aux_task2.loss_heatmap": 1.72095, "aux_task2.loss_bbox": 0.50278, "aux_task3.loss_heatmap": 1.56208, "aux_task3.loss_bbox": 0.41253, "aux_task4.loss_heatmap": 1.36785, "aux_task4.loss_bbox": 0.4324, "aux_task5.loss_heatmap": 1.53327, "aux_task5.loss_bbox": 0.46981, "loss": 27.7256, "grad_norm": 162.74172, "time": 1.04749}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 1e-05, "memory": 15962, "data_time": 0.00652, "loss_cls": 0.98477, "loss_bbox": 1.58466, "d0.loss_cls": 1.04854, "d0.loss_bbox": 1.71355, "d1.loss_cls": 1.0277, "d1.loss_bbox": 1.64607, "d2.loss_cls": 0.99346, "d2.loss_bbox": 1.59919, "d3.loss_cls": 0.98213, "d3.loss_bbox": 1.593, "d4.loss_cls": 0.98136, "d4.loss_bbox": 1.58656, "aux_task0.loss_heatmap": 1.43284, "aux_task0.loss_bbox": 0.44073, "aux_task1.loss_heatmap": 1.50518, "aux_task1.loss_bbox": 0.49218, "aux_task2.loss_heatmap": 1.72692, "aux_task2.loss_bbox": 0.47971, "aux_task3.loss_heatmap": 1.55424, "aux_task3.loss_bbox": 0.4155, "aux_task4.loss_heatmap": 1.37516, "aux_task4.loss_bbox": 0.44022, "aux_task5.loss_heatmap": 1.53934, "aux_task5.loss_bbox": 0.46168, "loss": 27.60467, "grad_norm": 152.81643, "time": 1.05183}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 1e-05, "memory": 15962, "data_time": 0.00684, "loss_cls": 0.98311, "loss_bbox": 1.56687, "d0.loss_cls": 1.04584, "d0.loss_bbox": 1.71666, "d1.loss_cls": 1.02182, "d1.loss_bbox": 1.63647, "d2.loss_cls": 0.9844, "d2.loss_bbox": 1.58539, "d3.loss_cls": 0.97639, "d3.loss_bbox": 1.58267, "d4.loss_cls": 0.9791, "d4.loss_bbox": 1.57249, "aux_task0.loss_heatmap": 1.40907, "aux_task0.loss_bbox": 0.44819, "aux_task1.loss_heatmap": 1.51572, "aux_task1.loss_bbox": 0.48918, "aux_task2.loss_heatmap": 1.72934, "aux_task2.loss_bbox": 0.49246, "aux_task3.loss_heatmap": 1.49673, "aux_task3.loss_bbox": 0.40548, "aux_task4.loss_heatmap": 1.33598, "aux_task4.loss_bbox": 0.42008, "aux_task5.loss_heatmap": 1.49208, "aux_task5.loss_bbox": 0.45469, "loss": 27.3402, "grad_norm": 144.9661, "time": 1.04502}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 1e-05, "memory": 15962, "data_time": 0.00636, "loss_cls": 0.97229, "loss_bbox": 1.53668, "d0.loss_cls": 1.03338, "d0.loss_bbox": 1.69616, "d1.loss_cls": 1.00701, "d1.loss_bbox": 1.60352, "d2.loss_cls": 0.97038, "d2.loss_bbox": 1.55592, "d3.loss_cls": 0.96384, "d3.loss_bbox": 1.55689, "d4.loss_cls": 0.96833, "d4.loss_bbox": 1.54602, "aux_task0.loss_heatmap": 1.38917, "aux_task0.loss_bbox": 0.45956, "aux_task1.loss_heatmap": 1.49651, "aux_task1.loss_bbox": 0.48771, "aux_task2.loss_heatmap": 1.71737, "aux_task2.loss_bbox": 0.48471, "aux_task3.loss_heatmap": 1.51427, "aux_task3.loss_bbox": 0.41405, "aux_task4.loss_heatmap": 1.31231, "aux_task4.loss_bbox": 0.42895, "aux_task5.loss_heatmap": 1.47681, "aux_task5.loss_bbox": 0.45562, "loss": 27.04747, "grad_norm": 138.88187, "time": 1.0489}
{"mode": "train", "epoch": 1, "iter": 1650, "lr": 1e-05, "memory": 15962, "data_time": 0.00584, "loss_cls": 0.98429, "loss_bbox": 1.53051, "d0.loss_cls": 1.03581, "d0.loss_bbox": 1.70124, "d1.loss_cls": 1.00602, "d1.loss_bbox": 1.60439, "d2.loss_cls": 0.97725, "d2.loss_bbox": 1.55667, "d3.loss_cls": 0.97404, "d3.loss_bbox": 1.55324, "d4.loss_cls": 0.98162, "d4.loss_bbox": 1.53673, "aux_task0.loss_heatmap": 1.37947, "aux_task0.loss_bbox": 0.44377, "aux_task1.loss_heatmap": 1.47793, "aux_task1.loss_bbox": 0.49526, "aux_task2.loss_heatmap": 1.69017, "aux_task2.loss_bbox": 0.49669, "aux_task3.loss_heatmap": 1.53727, "aux_task3.loss_bbox": 0.41239, "aux_task4.loss_heatmap": 1.28696, "aux_task4.loss_bbox": 0.43066, "aux_task5.loss_heatmap": 1.48923, "aux_task5.loss_bbox": 0.46345, "loss": 27.04507, "grad_norm": 123.76484, "time": 1.04683}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 2e-05, "memory": 15962, "data_time": 0.00609, "loss_cls": 0.97301, "loss_bbox": 1.51674, "d0.loss_cls": 1.02655, "d0.loss_bbox": 1.69361, "d1.loss_cls": 0.99937, "d1.loss_bbox": 1.59211, "d2.loss_cls": 0.96873, "d2.loss_bbox": 1.54668, "d3.loss_cls": 0.96378, "d3.loss_bbox": 1.54257, "d4.loss_cls": 0.96919, "d4.loss_bbox": 1.52439, "aux_task0.loss_heatmap": 1.39135, "aux_task0.loss_bbox": 0.44926, "aux_task1.loss_heatmap": 1.48984, "aux_task1.loss_bbox": 0.49596, "aux_task2.loss_heatmap": 1.69285, "aux_task2.loss_bbox": 0.49968, "aux_task3.loss_heatmap": 1.5257, "aux_task3.loss_bbox": 0.41223, "aux_task4.loss_heatmap": 1.26311, "aux_task4.loss_bbox": 0.41795, "aux_task5.loss_heatmap": 1.44681, "aux_task5.loss_bbox": 0.45947, "loss": 26.86095, "grad_norm": 109.78384, "time": 1.04644}
{"mode": "train", "epoch": 1, "iter": 1750, "lr": 2e-05, "memory": 16025, "data_time": 0.00652, "loss_cls": 0.97899, "loss_bbox": 1.52922, "d0.loss_cls": 1.02954, "d0.loss_bbox": 1.69576, "d1.loss_cls": 0.9967, "d1.loss_bbox": 1.59244, "d2.loss_cls": 0.97371, "d2.loss_bbox": 1.55116, "d3.loss_cls": 0.97233, "d3.loss_bbox": 1.54846, "d4.loss_cls": 0.97419, "d4.loss_bbox": 1.53146, "aux_task0.loss_heatmap": 1.3682, "aux_task0.loss_bbox": 0.45844, "aux_task1.loss_heatmap": 1.49829, "aux_task1.loss_bbox": 0.48628, "aux_task2.loss_heatmap": 1.6956, "aux_task2.loss_bbox": 0.50873, "aux_task3.loss_heatmap": 1.48885, "aux_task3.loss_bbox": 0.42355, "aux_task4.loss_heatmap": 1.27288, "aux_task4.loss_bbox": 0.42474, "aux_task5.loss_heatmap": 1.45773, "aux_task5.loss_bbox": 0.46349, "loss": 26.92072, "grad_norm": 104.79885, "time": 1.05404}
{"mode": "train", "epoch": 1, "iter": 1800, "lr": 2e-05, "memory": 16025, "data_time": 0.0062, "loss_cls": 0.98318, "loss_bbox": 1.49682, "d0.loss_cls": 1.03814, "d0.loss_bbox": 1.68767, "d1.loss_cls": 0.99791, "d1.loss_bbox": 1.56702, "d2.loss_cls": 0.97999, "d2.loss_bbox": 1.52888, "d3.loss_cls": 0.97675, "d3.loss_bbox": 1.52498, "d4.loss_cls": 0.97807, "d4.loss_bbox": 1.50586, "aux_task0.loss_heatmap": 1.39797, "aux_task0.loss_bbox": 0.46401, "aux_task1.loss_heatmap": 1.45731, "aux_task1.loss_bbox": 0.48268, "aux_task2.loss_heatmap": 1.692, "aux_task2.loss_bbox": 0.50267, "aux_task3.loss_heatmap": 1.51355, "aux_task3.loss_bbox": 0.42805, "aux_task4.loss_heatmap": 1.25154, "aux_task4.loss_bbox": 0.43431, "aux_task5.loss_heatmap": 1.45242, "aux_task5.loss_bbox": 0.47354, "loss": 26.81532, "grad_norm": 104.47099, "time": 1.04727}
{"mode": "train", "epoch": 1, "iter": 1850, "lr": 2e-05, "memory": 16025, "data_time": 0.0057, "loss_cls": 0.96314, "loss_bbox": 1.50045, "d0.loss_cls": 1.0214, "d0.loss_bbox": 1.68825, "d1.loss_cls": 0.97674, "d1.loss_bbox": 1.56417, "d2.loss_cls": 0.96259, "d2.loss_bbox": 1.52759, "d3.loss_cls": 0.96054, "d3.loss_bbox": 1.52267, "d4.loss_cls": 0.96428, "d4.loss_bbox": 1.50492, "aux_task0.loss_heatmap": 1.35792, "aux_task0.loss_bbox": 0.45815, "aux_task1.loss_heatmap": 1.47428, "aux_task1.loss_bbox": 0.48417, "aux_task2.loss_heatmap": 1.69779, "aux_task2.loss_bbox": 0.49678, "aux_task3.loss_heatmap": 1.46222, "aux_task3.loss_bbox": 0.41187, "aux_task4.loss_heatmap": 1.20688, "aux_task4.loss_bbox": 0.42766, "aux_task5.loss_heatmap": 1.43537, "aux_task5.loss_bbox": 0.46866, "loss": 26.53849, "grad_norm": 92.57709, "time": 1.04554}
{"mode": "train", "epoch": 1, "iter": 1900, "lr": 2e-05, "memory": 16025, "data_time": 0.00613, "loss_cls": 0.97594, "loss_bbox": 1.45633, "d0.loss_cls": 1.02104, "d0.loss_bbox": 1.66264, "d1.loss_cls": 0.9803, "d1.loss_bbox": 1.52909, "d2.loss_cls": 0.96922, "d2.loss_bbox": 1.4918, "d3.loss_cls": 0.96704, "d3.loss_bbox": 1.48603, "d4.loss_cls": 0.97138, "d4.loss_bbox": 1.46479, "aux_task0.loss_heatmap": 1.359, "aux_task0.loss_bbox": 0.45916, "aux_task1.loss_heatmap": 1.45202, "aux_task1.loss_bbox": 0.47366, "aux_task2.loss_heatmap": 1.68649, "aux_task2.loss_bbox": 0.49783, "aux_task3.loss_heatmap": 1.45911, "aux_task3.loss_bbox": 0.4314, "aux_task4.loss_heatmap": 1.20152, "aux_task4.loss_bbox": 0.42324, "aux_task5.loss_heatmap": 1.42438, "aux_task5.loss_bbox": 0.45558, "loss": 26.29899, "grad_norm": 91.55771, "time": 1.04375}
{"mode": "train", "epoch": 1, "iter": 1950, "lr": 2e-05, "memory": 16025, "data_time": 0.00643, "loss_cls": 0.9685, "loss_bbox": 1.46764, "d0.loss_cls": 1.01794, "d0.loss_bbox": 1.66323, "d1.loss_cls": 0.9691, "d1.loss_bbox": 1.5387, "d2.loss_cls": 0.96173, "d2.loss_bbox": 1.49773, "d3.loss_cls": 0.95933, "d3.loss_bbox": 1.49041, "d4.loss_cls": 0.96192, "d4.loss_bbox": 1.47327, "aux_task0.loss_heatmap": 1.34468, "aux_task0.loss_bbox": 0.45229, "aux_task1.loss_heatmap": 1.44408, "aux_task1.loss_bbox": 0.48766, "aux_task2.loss_heatmap": 1.69408, "aux_task2.loss_bbox": 0.49376, "aux_task3.loss_heatmap": 1.4609, "aux_task3.loss_bbox": 0.41152, "aux_task4.loss_heatmap": 1.20916, "aux_task4.loss_bbox": 0.42878, "aux_task5.loss_heatmap": 1.41827, "aux_task5.loss_bbox": 0.46423, "loss": 26.27889, "grad_norm": 88.95651, "time": 1.04657}
{"mode": "train", "epoch": 1, "iter": 2000, "lr": 2e-05, "memory": 16025, "data_time": 0.00589, "loss_cls": 0.95413, "loss_bbox": 1.46342, "d0.loss_cls": 1.00764, "d0.loss_bbox": 1.67368, "d1.loss_cls": 0.95709, "d1.loss_bbox": 1.52592, "d2.loss_cls": 0.95074, "d2.loss_bbox": 1.49213, "d3.loss_cls": 0.94892, "d3.loss_bbox": 1.48677, "d4.loss_cls": 0.95091, "d4.loss_bbox": 1.46997, "aux_task0.loss_heatmap": 1.35029, "aux_task0.loss_bbox": 0.45499, "aux_task1.loss_heatmap": 1.45018, "aux_task1.loss_bbox": 0.48432, "aux_task2.loss_heatmap": 1.6446, "aux_task2.loss_bbox": 0.501, "aux_task3.loss_heatmap": 1.41564, "aux_task3.loss_bbox": 0.41126, "aux_task4.loss_heatmap": 1.17013, "aux_task4.loss_bbox": 0.42995, "aux_task5.loss_heatmap": 1.3744, "aux_task5.loss_bbox": 0.45723, "loss": 26.02533, "grad_norm": 88.33961, "time": 1.04862}
{"mode": "train", "epoch": 1, "iter": 2050, "lr": 2e-05, "memory": 16025, "data_time": 0.00932, "loss_cls": 0.94533, "loss_bbox": 1.41276, "d0.loss_cls": 0.99722, "d0.loss_bbox": 1.62065, "d1.loss_cls": 0.94716, "d1.loss_bbox": 1.47309, "d2.loss_cls": 0.94118, "d2.loss_bbox": 1.43294, "d3.loss_cls": 0.93801, "d3.loss_bbox": 1.42867, "d4.loss_cls": 0.93963, "d4.loss_bbox": 1.41519, "aux_task0.loss_heatmap": 1.30064, "aux_task0.loss_bbox": 0.4365, "aux_task1.loss_heatmap": 1.42089, "aux_task1.loss_bbox": 0.47762, "aux_task2.loss_heatmap": 1.67566, "aux_task2.loss_bbox": 0.48516, "aux_task3.loss_heatmap": 1.42752, "aux_task3.loss_bbox": 0.41248, "aux_task4.loss_heatmap": 1.14913, "aux_task4.loss_bbox": 0.41866, "aux_task5.loss_heatmap": 1.38375, "aux_task5.loss_bbox": 0.45268, "loss": 25.53255, "grad_norm": 88.21166, "time": 1.04959}
{"mode": "train", "epoch": 1, "iter": 2100, "lr": 2e-05, "memory": 16025, "data_time": 0.00642, "loss_cls": 0.93609, "loss_bbox": 1.43609, "d0.loss_cls": 0.99548, "d0.loss_bbox": 1.6609, "d1.loss_cls": 0.93964, "d1.loss_bbox": 1.49832, "d2.loss_cls": 0.93422, "d2.loss_bbox": 1.46282, "d3.loss_cls": 0.9314, "d3.loss_bbox": 1.45566, "d4.loss_cls": 0.93144, "d4.loss_bbox": 1.44063, "aux_task0.loss_heatmap": 1.2991, "aux_task0.loss_bbox": 0.45944, "aux_task1.loss_heatmap": 1.43467, "aux_task1.loss_bbox": 0.47699, "aux_task2.loss_heatmap": 1.65237, "aux_task2.loss_bbox": 0.47222, "aux_task3.loss_heatmap": 1.40787, "aux_task3.loss_bbox": 0.41052, "aux_task4.loss_heatmap": 1.15891, "aux_task4.loss_bbox": 0.42679, "aux_task5.loss_heatmap": 1.35538, "aux_task5.loss_bbox": 0.4579, "loss": 25.63486, "grad_norm": 88.99396, "time": 1.04828}
{"mode": "train", "epoch": 1, "iter": 2150, "lr": 2e-05, "memory": 16025, "data_time": 0.00749, "loss_cls": 0.94407, "loss_bbox": 1.42678, "d0.loss_cls": 0.99625, "d0.loss_bbox": 1.66398, "d1.loss_cls": 0.94568, "d1.loss_bbox": 1.49616, "d2.loss_cls": 0.94025, "d2.loss_bbox": 1.45847, "d3.loss_cls": 0.93942, "d3.loss_bbox": 1.44831, "d4.loss_cls": 0.93969, "d4.loss_bbox": 1.43306, "aux_task0.loss_heatmap": 1.301, "aux_task0.loss_bbox": 0.45303, "aux_task1.loss_heatmap": 1.4267, "aux_task1.loss_bbox": 0.46884, "aux_task2.loss_heatmap": 1.66146, "aux_task2.loss_bbox": 0.4927, "aux_task3.loss_heatmap": 1.40906, "aux_task3.loss_bbox": 0.41786, "aux_task4.loss_heatmap": 1.12952, "aux_task4.loss_bbox": 0.42893, "aux_task5.loss_heatmap": 1.35216, "aux_task5.loss_bbox": 0.45185, "loss": 25.62524, "grad_norm": 91.15083, "time": 1.05446}
{"mode": "train", "epoch": 1, "iter": 2200, "lr": 2e-05, "memory": 16025, "data_time": 0.00681, "loss_cls": 0.94417, "loss_bbox": 1.41791, "d0.loss_cls": 1.00026, "d0.loss_bbox": 1.65225, "d1.loss_cls": 0.94719, "d1.loss_bbox": 1.48775, "d2.loss_cls": 0.94133, "d2.loss_bbox": 1.44667, "d3.loss_cls": 0.93825, "d3.loss_bbox": 1.43941, "d4.loss_cls": 0.93978, "d4.loss_bbox": 1.42584, "aux_task0.loss_heatmap": 1.32134, "aux_task0.loss_bbox": 0.44307, "aux_task1.loss_heatmap": 1.41868, "aux_task1.loss_bbox": 0.46854, "aux_task2.loss_heatmap": 1.64663, "aux_task2.loss_bbox": 0.4965, "aux_task3.loss_heatmap": 1.3851, "aux_task3.loss_bbox": 0.40298, "aux_task4.loss_heatmap": 1.16166, "aux_task4.loss_bbox": 0.43099, "aux_task5.loss_heatmap": 1.3337, "aux_task5.loss_bbox": 0.45274, "loss": 25.54276, "grad_norm": 91.20751, "time": 1.05252}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 2e-05, "memory": 16025, "data_time": 0.07213, "loss_cls": 0.94173, "loss_bbox": 1.39934, "d0.loss_cls": 0.99602, "d0.loss_bbox": 1.63962, "d1.loss_cls": 0.94471, "d1.loss_bbox": 1.46611, "d2.loss_cls": 0.93656, "d2.loss_bbox": 1.42531, "d3.loss_cls": 0.93546, "d3.loss_bbox": 1.41767, "d4.loss_cls": 0.93926, "d4.loss_bbox": 1.40434, "aux_task0.loss_heatmap": 1.27394, "aux_task0.loss_bbox": 0.4377, "aux_task1.loss_heatmap": 1.41187, "aux_task1.loss_bbox": 0.45737, "aux_task2.loss_heatmap": 1.65151, "aux_task2.loss_bbox": 0.49115, "aux_task3.loss_heatmap": 1.38004, "aux_task3.loss_bbox": 0.40276, "aux_task4.loss_heatmap": 1.11481, "aux_task4.loss_bbox": 0.42152, "aux_task5.loss_heatmap": 1.30952, "aux_task5.loss_bbox": 0.45214, "loss": 25.25047, "grad_norm": 89.31836, "time": 1.11539}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 2e-05, "memory": 16025, "data_time": 0.00663, "loss_cls": 0.93815, "loss_bbox": 1.37891, "d0.loss_cls": 0.9926, "d0.loss_bbox": 1.62502, "d1.loss_cls": 0.94237, "d1.loss_bbox": 1.44686, "d2.loss_cls": 0.93293, "d2.loss_bbox": 1.40449, "d3.loss_cls": 0.93241, "d3.loss_bbox": 1.39718, "d4.loss_cls": 0.93427, "d4.loss_bbox": 1.38354, "aux_task0.loss_heatmap": 1.28905, "aux_task0.loss_bbox": 0.43919, "aux_task1.loss_heatmap": 1.40096, "aux_task1.loss_bbox": 0.44833, "aux_task2.loss_heatmap": 1.63144, "aux_task2.loss_bbox": 0.49866, "aux_task3.loss_heatmap": 1.35753, "aux_task3.loss_bbox": 0.40751, "aux_task4.loss_heatmap": 1.11415, "aux_task4.loss_bbox": 0.42111, "aux_task5.loss_heatmap": 1.33062, "aux_task5.loss_bbox": 0.44988, "loss": 25.09717, "grad_norm": 83.03323, "time": 1.0492}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 2e-05, "memory": 16025, "data_time": 0.0064, "loss_cls": 0.94676, "loss_bbox": 1.37218, "d0.loss_cls": 0.99241, "d0.loss_bbox": 1.60803, "d1.loss_cls": 0.95001, "d1.loss_bbox": 1.43685, "d2.loss_cls": 0.94069, "d2.loss_bbox": 1.39683, "d3.loss_cls": 0.94006, "d3.loss_bbox": 1.38891, "d4.loss_cls": 0.94282, "d4.loss_bbox": 1.37877, "aux_task0.loss_heatmap": 1.23847, "aux_task0.loss_bbox": 0.43567, "aux_task1.loss_heatmap": 1.40304, "aux_task1.loss_bbox": 0.45249, "aux_task2.loss_heatmap": 1.62972, "aux_task2.loss_bbox": 0.46443, "aux_task3.loss_heatmap": 1.39574, "aux_task3.loss_bbox": 0.40035, "aux_task4.loss_heatmap": 1.1173, "aux_task4.loss_bbox": 0.42082, "aux_task5.loss_heatmap": 1.33804, "aux_task5.loss_bbox": 0.44648, "loss": 25.0369, "grad_norm": 83.62567, "time": 1.05101}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 2e-05, "memory": 16025, "data_time": 0.00651, "loss_cls": 0.92805, "loss_bbox": 1.38761, "d0.loss_cls": 0.97904, "d0.loss_bbox": 1.64757, "d1.loss_cls": 0.93022, "d1.loss_bbox": 1.4656, "d2.loss_cls": 0.92236, "d2.loss_bbox": 1.4183, "d3.loss_cls": 0.92248, "d3.loss_bbox": 1.40997, "d4.loss_cls": 0.92549, "d4.loss_bbox": 1.3958, "aux_task0.loss_heatmap": 1.2675, "aux_task0.loss_bbox": 0.4487, "aux_task1.loss_heatmap": 1.42234, "aux_task1.loss_bbox": 0.44992, "aux_task2.loss_heatmap": 1.64245, "aux_task2.loss_bbox": 0.48939, "aux_task3.loss_heatmap": 1.34622, "aux_task3.loss_bbox": 0.41017, "aux_task4.loss_heatmap": 1.0764, "aux_task4.loss_bbox": 0.42613, "aux_task5.loss_heatmap": 1.30169, "aux_task5.loss_bbox": 0.44539, "loss": 25.05879, "grad_norm": 75.95624, "time": 1.04904}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 2e-05, "memory": 16025, "data_time": 0.00605, "loss_cls": 0.93404, "loss_bbox": 1.35661, "d0.loss_cls": 0.98069, "d0.loss_bbox": 1.62217, "d1.loss_cls": 0.93511, "d1.loss_bbox": 1.42913, "d2.loss_cls": 0.92622, "d2.loss_bbox": 1.38694, "d3.loss_cls": 0.92534, "d3.loss_bbox": 1.37794, "d4.loss_cls": 0.92825, "d4.loss_bbox": 1.36207, "aux_task0.loss_heatmap": 1.28457, "aux_task0.loss_bbox": 0.43695, "aux_task1.loss_heatmap": 1.39185, "aux_task1.loss_bbox": 0.44982, "aux_task2.loss_heatmap": 1.60559, "aux_task2.loss_bbox": 0.47501, "aux_task3.loss_heatmap": 1.36391, "aux_task3.loss_bbox": 0.40923, "aux_task4.loss_heatmap": 1.08442, "aux_task4.loss_bbox": 0.42311, "aux_task5.loss_heatmap": 1.30518, "aux_task5.loss_bbox": 0.44262, "loss": 24.83677, "grad_norm": 76.47789, "time": 1.05137}
{"mode": "train", "epoch": 2, "iter": 300, "lr": 2e-05, "memory": 16025, "data_time": 0.0062, "loss_cls": 0.90833, "loss_bbox": 1.34793, "d0.loss_cls": 0.96161, "d0.loss_bbox": 1.61233, "d1.loss_cls": 0.91453, "d1.loss_bbox": 1.42208, "d2.loss_cls": 0.90476, "d2.loss_bbox": 1.37552, "d3.loss_cls": 0.90477, "d3.loss_bbox": 1.36613, "d4.loss_cls": 0.90706, "d4.loss_bbox": 1.35305, "aux_task0.loss_heatmap": 1.20172, "aux_task0.loss_bbox": 0.42342, "aux_task1.loss_heatmap": 1.40786, "aux_task1.loss_bbox": 0.44276, "aux_task2.loss_heatmap": 1.60186, "aux_task2.loss_bbox": 0.48093, "aux_task3.loss_heatmap": 1.33461, "aux_task3.loss_bbox": 0.39755, "aux_task4.loss_heatmap": 1.04705, "aux_task4.loss_bbox": 0.40347, "aux_task5.loss_heatmap": 1.27818, "aux_task5.loss_bbox": 0.43846, "loss": 24.43594, "grad_norm": 71.11246, "time": 1.0471}
{"mode": "train", "epoch": 2, "iter": 350, "lr": 2e-05, "memory": 16025, "data_time": 0.00635, "loss_cls": 0.92645, "loss_bbox": 1.33745, "d0.loss_cls": 0.97346, "d0.loss_bbox": 1.60808, "d1.loss_cls": 0.92456, "d1.loss_bbox": 1.4154, "d2.loss_cls": 0.91822, "d2.loss_bbox": 1.36714, "d3.loss_cls": 0.91512, "d3.loss_bbox": 1.35954, "d4.loss_cls": 0.91936, "d4.loss_bbox": 1.34483, "aux_task0.loss_heatmap": 1.21158, "aux_task0.loss_bbox": 0.42093, "aux_task1.loss_heatmap": 1.38953, "aux_task1.loss_bbox": 0.43006, "aux_task2.loss_heatmap": 1.60874, "aux_task2.loss_bbox": 0.45472, "aux_task3.loss_heatmap": 1.38217, "aux_task3.loss_bbox": 0.39116, "aux_task4.loss_heatmap": 1.07357, "aux_task4.loss_bbox": 0.39494, "aux_task5.loss_heatmap": 1.28646, "aux_task5.loss_bbox": 0.4324, "loss": 24.48584, "grad_norm": 72.70935, "time": 1.05199}
{"mode": "train", "epoch": 2, "iter": 400, "lr": 2e-05, "memory": 16025, "data_time": 0.00674, "loss_cls": 0.92762, "loss_bbox": 1.35185, "d0.loss_cls": 0.97582, "d0.loss_bbox": 1.61869, "d1.loss_cls": 0.93, "d1.loss_bbox": 1.42602, "d2.loss_cls": 0.9211, "d2.loss_bbox": 1.37682, "d3.loss_cls": 0.92175, "d3.loss_bbox": 1.37045, "d4.loss_cls": 0.92282, "d4.loss_bbox": 1.35626, "aux_task0.loss_heatmap": 1.23686, "aux_task0.loss_bbox": 0.41523, "aux_task1.loss_heatmap": 1.3892, "aux_task1.loss_bbox": 0.44192, "aux_task2.loss_heatmap": 1.61009, "aux_task2.loss_bbox": 0.48248, "aux_task3.loss_heatmap": 1.32492, "aux_task3.loss_bbox": 0.38366, "aux_task4.loss_heatmap": 1.03678, "aux_task4.loss_bbox": 0.39598, "aux_task5.loss_heatmap": 1.29498, "aux_task5.loss_bbox": 0.42917, "loss": 24.54046, "grad_norm": 68.60352, "time": 1.04754}
{"mode": "train", "epoch": 2, "iter": 450, "lr": 2e-05, "memory": 16025, "data_time": 0.00648, "loss_cls": 0.92343, "loss_bbox": 1.31999, "d0.loss_cls": 0.97003, "d0.loss_bbox": 1.59001, "d1.loss_cls": 0.92375, "d1.loss_bbox": 1.39865, "d2.loss_cls": 0.91589, "d2.loss_bbox": 1.35011, "d3.loss_cls": 0.91535, "d3.loss_bbox": 1.343, "d4.loss_cls": 0.92001, "d4.loss_bbox": 1.32606, "aux_task0.loss_heatmap": 1.21346, "aux_task0.loss_bbox": 0.41803, "aux_task1.loss_heatmap": 1.37068, "aux_task1.loss_bbox": 0.43348, "aux_task2.loss_heatmap": 1.5911, "aux_task2.loss_bbox": 0.44786, "aux_task3.loss_heatmap": 1.32173, "aux_task3.loss_bbox": 0.37947, "aux_task4.loss_heatmap": 1.05862, "aux_task4.loss_bbox": 0.39828, "aux_task5.loss_heatmap": 1.28226, "aux_task5.loss_bbox": 0.41998, "loss": 24.23124, "grad_norm": 68.34288, "time": 1.04711}
{"mode": "train", "epoch": 2, "iter": 500, "lr": 2e-05, "memory": 16025, "data_time": 0.00671, "loss_cls": 0.91473, "loss_bbox": 1.30312, "d0.loss_cls": 0.96235, "d0.loss_bbox": 1.59286, "d1.loss_cls": 0.91358, "d1.loss_bbox": 1.3911, "d2.loss_cls": 0.90402, "d2.loss_bbox": 1.3395, "d3.loss_cls": 0.90664, "d3.loss_bbox": 1.329, "d4.loss_cls": 0.91026, "d4.loss_bbox": 1.31135, "aux_task0.loss_heatmap": 1.21961, "aux_task0.loss_bbox": 0.39923, "aux_task1.loss_heatmap": 1.40236, "aux_task1.loss_bbox": 0.42617, "aux_task2.loss_heatmap": 1.61187, "aux_task2.loss_bbox": 0.45916, "aux_task3.loss_heatmap": 1.31415, "aux_task3.loss_bbox": 0.37293, "aux_task4.loss_heatmap": 1.03279, "aux_task4.loss_bbox": 0.39572, "aux_task5.loss_heatmap": 1.2605, "aux_task5.loss_bbox": 0.41159, "loss": 24.08457, "grad_norm": 69.39239, "time": 1.04462}
{"mode": "train", "epoch": 2, "iter": 550, "lr": 2e-05, "memory": 16025, "data_time": 0.00664, "loss_cls": 0.91626, "loss_bbox": 1.32663, "d0.loss_cls": 0.96018, "d0.loss_bbox": 1.59467, "d1.loss_cls": 0.91889, "d1.loss_bbox": 1.39983, "d2.loss_cls": 0.90792, "d2.loss_bbox": 1.34723, "d3.loss_cls": 0.90819, "d3.loss_bbox": 1.33916, "d4.loss_cls": 0.91332, "d4.loss_bbox": 1.3285, "aux_task0.loss_heatmap": 1.19628, "aux_task0.loss_bbox": 0.40384, "aux_task1.loss_heatmap": 1.3796, "aux_task1.loss_bbox": 0.41973, "aux_task2.loss_heatmap": 1.6081, "aux_task2.loss_bbox": 0.46442, "aux_task3.loss_heatmap": 1.29496, "aux_task3.loss_bbox": 0.36368, "aux_task4.loss_heatmap": 1.01677, "aux_task4.loss_bbox": 0.37972, "aux_task5.loss_heatmap": 1.25914, "aux_task5.loss_bbox": 0.40892, "loss": 24.05596, "grad_norm": 65.28134, "time": 1.04897}
