2025-04-23 13:09:23,295 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.20 | packaged by conda-forge | (default, Sep 30 2024, 17:52:49) [GCC 13.3.0]
CUDA available: True
GPU 0,1: NVIDIA GeForce RTX 4090 D
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.6, V11.6.55
GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0
PyTorch: 1.13.0
PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2022.1-Product Build 20220311 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.6
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.14.0
OpenCV: 4.11.0
MMCV: 1.7.0
MMCV Compiler: GCC 9.4
MMCV CUDA Compiler: 11.6
MMDetection: 2.27.0
MMSegmentation: 0.30.0
MMDetection3D: 1.0.0rc6+637e2ea
spconv2.0: True
------------------------------------------------------------

2025-04-23 13:09:24,132 - mmdet - INFO - 分布式训练: True
2025-04-23 13:09:24,954 - mmdet - INFO - 配置:
point_cloud_range = [-54, -54, -5.0, 54, 54, 3.0]
class_names = [
    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',
    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
]
dataset_type = 'NuScenesDataset'
data_root = 'data/nuscenes/'
input_modality = dict(
    use_lidar=True,
    use_camera=False,
    use_radar=False,
    use_map=False,
    use_external=False)
file_client_args = dict(backend='disk')
train_pipeline = [
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        file_client_args=dict(backend='disk')),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=9,
        use_dim=[0, 1, 2, 3, 4],
        file_client_args=dict(backend='disk'),
        pad_empty_sweeps=True,
        remove_close=True),
    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),
    dict(
        type='ObjectSample',
        db_sampler=dict(
            data_root='data/nuscenes/',
            info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',
            rate=1.0,
            prepare=dict(
                filter_by_difficulty=[-1],
                filter_by_min_points=dict(
                    car=5,
                    truck=5,
                    bus=5,
                    trailer=5,
                    construction_vehicle=5,
                    traffic_cone=5,
                    barrier=5,
                    motorcycle=5,
                    bicycle=5,
                    pedestrian=5)),
            classes=[
                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                'traffic_cone'
            ],
            sample_groups=dict(
                car=2,
                truck=3,
                construction_vehicle=7,
                bus=4,
                trailer=6,
                barrier=2,
                motorcycle=6,
                bicycle=6,
                pedestrian=2,
                traffic_cone=2),
            points_loader=dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=[0, 1, 2, 3, 4],
                file_client_args=dict(backend='disk')))),
    dict(
        type='GlobalRotScaleTrans',
        rot_range=[-0.785, 0.785],
        scale_ratio_range=[0.9, 1.1],
        translation_std=[0.5, 0.5, 0.5]),
    dict(
        type='RandomFlip3D',
        sync_2d=False,
        flip_ratio_bev_horizontal=0.5,
        flip_ratio_bev_vertical=0.5),
    dict(
        type='PointsRangeFilter',
        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
    dict(
        type='ObjectRangeFilter',
        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
    dict(
        type='ObjectNameFilter',
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ]),
    dict(type='PointShuffle'),
    dict(
        type='DefaultFormatBundle3D',
        class_names=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ]),
    dict(type='Collect3D', keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])
]
test_pipeline = [
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        file_client_args=dict(backend='disk')),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=9,
        use_dim=[0, 1, 2, 3, 4],
        file_client_args=dict(backend='disk'),
        pad_empty_sweeps=True,
        remove_close=True),
    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),
    dict(
        type='MultiScaleFlipAug3D',
        img_scale=(1333, 800),
        pts_scale_ratio=1,
        flip=False,
        transforms=[
            dict(
                type='GlobalRotScaleTrans',
                rot_range=[0, 0],
                scale_ratio_range=[1.0, 1.0],
                translation_std=[0, 0, 0]),
            dict(type='RandomFlip3D'),
            dict(
                type='PointsRangeFilter',
                point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
            dict(
                type='DefaultFormatBundle3D',
                class_names=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ],
                with_label=False),
            dict(
                type='Collect3D',
                keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])
        ])
]
eval_pipeline = [
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        file_client_args=dict(backend='disk')),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=9,
        use_dim=[0, 1, 2, 3, 4],
        file_client_args=dict(backend='disk'),
        pad_empty_sweeps=True,
        remove_close=True),
    dict(
        type='DefaultFormatBundle3D',
        class_names=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        with_label=False),
    dict(type='Collect3D', keys=['points'])
]
data = dict(
    samples_per_gpu=4,
    workers_per_gpu=4,
    train=dict(
        type='CBGSDataset',
        data_root='data/nuscenes/',
        ann_file='data/nuscenes/nuscenes_infos_train.pkl',
        pipeline=[
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                file_client_args=dict(backend='disk')),
            dict(
                type='LoadPointsFromMultiSweeps',
                sweeps_num=10,
                file_client_args=dict(backend='disk')),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True),
            dict(
                type='GlobalRotScaleTrans',
                rot_range=[-0.3925, 0.3925],
                scale_ratio_range=[0.95, 1.05],
                translation_std=[0, 0, 0]),
            dict(type='RandomFlip3D', flip_ratio_bev_horizontal=0.5),
            dict(
                type='PointsRangeFilter',
                point_cloud_range=[-50, -50, -5, 50, 50, 3]),
            dict(
                type='ObjectRangeFilter',
                point_cloud_range=[-50, -50, -5, 50, 50, 3]),
            dict(
                type='ObjectNameFilter',
                classes=[
                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',
                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',
                    'barrier'
                ]),
            dict(type='PointShuffle'),
            dict(
                type='DefaultFormatBundle3D',
                class_names=[
                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',
                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',
                    'barrier'
                ]),
            dict(
                type='Collect3D',
                keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])
        ],
        classes=[
            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',
            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=False,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=False,
        box_type_3d='LiDAR',
        split=14,
        dataset=dict(
            type='NuScenesDataset',
            data_root='data/nuscenes/',
            ann_file='data/nuscenes/nuscenes_infos_train.pkl',
            pipeline=[
                dict(
                    type='LoadPointsFromFile',
                    coord_type='LIDAR',
                    load_dim=5,
                    use_dim=5,
                    file_client_args=dict(backend='disk')),
                dict(
                    type='LoadPointsFromMultiSweeps',
                    sweeps_num=9,
                    use_dim=[0, 1, 2, 3, 4],
                    file_client_args=dict(backend='disk'),
                    pad_empty_sweeps=True,
                    remove_close=True),
                dict(
                    type='LoadAnnotations3D',
                    with_bbox_3d=True,
                    with_label_3d=True),
                dict(
                    type='ObjectSample',
                    db_sampler=dict(
                        data_root='data/nuscenes/',
                        info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',
                        rate=1.0,
                        prepare=dict(
                            filter_by_difficulty=[-1],
                            filter_by_min_points=dict(
                                car=5,
                                truck=5,
                                bus=5,
                                trailer=5,
                                construction_vehicle=5,
                                traffic_cone=5,
                                barrier=5,
                                motorcycle=5,
                                bicycle=5,
                                pedestrian=5)),
                        classes=[
                            'car', 'truck', 'construction_vehicle', 'bus',
                            'trailer', 'barrier', 'motorcycle', 'bicycle',
                            'pedestrian', 'traffic_cone'
                        ],
                        sample_groups=dict(
                            car=2,
                            truck=3,
                            construction_vehicle=7,
                            bus=4,
                            trailer=6,
                            barrier=2,
                            motorcycle=6,
                            bicycle=6,
                            pedestrian=2,
                            traffic_cone=2),
                        points_loader=dict(
                            type='LoadPointsFromFile',
                            coord_type='LIDAR',
                            load_dim=5,
                            use_dim=[0, 1, 2, 3, 4],
                            file_client_args=dict(backend='disk')))),
                dict(
                    type='GlobalRotScaleTrans',
                    rot_range=[-0.785, 0.785],
                    scale_ratio_range=[0.9, 1.1],
                    translation_std=[0.5, 0.5, 0.5]),
                dict(
                    type='RandomFlip3D',
                    sync_2d=False,
                    flip_ratio_bev_horizontal=0.5,
                    flip_ratio_bev_vertical=0.5),
                dict(
                    type='PointsRangeFilter',
                    point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
                dict(
                    type='ObjectRangeFilter',
                    point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
                dict(
                    type='ObjectNameFilter',
                    classes=[
                        'car', 'truck', 'construction_vehicle', 'bus',
                        'trailer', 'barrier', 'motorcycle', 'bicycle',
                        'pedestrian', 'traffic_cone'
                    ]),
                dict(type='PointShuffle'),
                dict(
                    type='DefaultFormatBundle3D',
                    class_names=[
                        'car', 'truck', 'construction_vehicle', 'bus',
                        'trailer', 'barrier', 'motorcycle', 'bicycle',
                        'pedestrian', 'traffic_cone'
                    ]),
                dict(
                    type='Collect3D',
                    keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])
            ],
            classes=[
                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                'traffic_cone'
            ],
            test_mode=False,
            use_valid_flag=True,
            box_type_3d='LiDAR')),
    val=dict(
        type='NuScenesDataset',
        data_root='data/nuscenes/',
        ann_file='data/nuscenes/nuscenes_infos_val.pkl',
        pipeline=[
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                file_client_args=dict(backend='disk')),
            dict(
                type='LoadPointsFromMultiSweeps',
                sweeps_num=9,
                use_dim=[0, 1, 2, 3, 4],
                file_client_args=dict(backend='disk'),
                pad_empty_sweeps=True,
                remove_close=True),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True),
            dict(
                type='MultiScaleFlipAug3D',
                img_scale=(1333, 800),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type='GlobalRotScaleTrans',
                        rot_range=[0, 0],
                        scale_ratio_range=[1.0, 1.0],
                        translation_std=[0, 0, 0]),
                    dict(type='RandomFlip3D'),
                    dict(
                        type='PointsRangeFilter',
                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
                    dict(
                        type='DefaultFormatBundle3D',
                        class_names=[
                            'car', 'truck', 'construction_vehicle', 'bus',
                            'trailer', 'barrier', 'motorcycle', 'bicycle',
                            'pedestrian', 'traffic_cone'
                        ],
                        with_label=False),
                    dict(
                        type='Collect3D',
                        keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])
                ])
        ],
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=False,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=True,
        box_type_3d='LiDAR'),
    test=dict(
        type='NuScenesDataset',
        data_root='data/nuscenes/',
        ann_file='data/nuscenes/nuscenes_infos_val.pkl',
        pipeline=[
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                file_client_args=dict(backend='disk')),
            dict(
                type='LoadPointsFromMultiSweeps',
                sweeps_num=9,
                use_dim=[0, 1, 2, 3, 4],
                file_client_args=dict(backend='disk'),
                pad_empty_sweeps=True,
                remove_close=True),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True),
            dict(
                type='MultiScaleFlipAug3D',
                img_scale=(1333, 800),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type='GlobalRotScaleTrans',
                        rot_range=[0, 0],
                        scale_ratio_range=[1.0, 1.0],
                        translation_std=[0, 0, 0]),
                    dict(type='RandomFlip3D'),
                    dict(
                        type='PointsRangeFilter',
                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
                    dict(
                        type='DefaultFormatBundle3D',
                        class_names=[
                            'car', 'truck', 'construction_vehicle', 'bus',
                            'trailer', 'barrier', 'motorcycle', 'bicycle',
                            'pedestrian', 'traffic_cone'
                        ],
                        with_label=False),
                    dict(
                        type='Collect3D',
                        keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])
                ])
        ],
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=False,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=True,
        box_type_3d='LiDAR'))
evaluation = dict(
    interval=1,
    pipeline=[
        dict(
            type='LoadPointsFromFile',
            coord_type='LIDAR',
            load_dim=5,
            use_dim=5,
            file_client_args=dict(backend='disk')),
        dict(
            type='LoadPointsFromMultiSweeps',
            sweeps_num=10,
            file_client_args=dict(backend='disk')),
        dict(
            type='DefaultFormatBundle3D',
            class_names=[
                'car', 'truck', 'trailer', 'bus', 'construction_vehicle',
                'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',
                'barrier'
            ],
            with_label=False),
        dict(type='Collect3D', keys=['points'])
    ])
optimizer = dict(type='AdamW', lr=2.5e-05, weight_decay=0.01)
optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))
lr_config = dict(
    policy='cyclic',
    target_ratio=(10, 0.0001),
    cyclic_times=1,
    step_ratio_up=0.4)
momentum_config = dict(
    policy='cyclic',
    target_ratio=(0.8947368421052632, 1),
    cyclic_times=1,
    step_ratio_up=0.4)
runner = dict(type='EpochBasedRunner', max_epochs=20)
checkpoint_config = dict(interval=1)
log_config = dict(
    interval=50,
    hooks=[dict(type='TextLoggerHook'),
           dict(type='TensorboardLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
work_dir = './work_dirs/secondmambadss_split14/second替换掉'
load_from = None
resume_from = None
workflow = [('train', 1)]
opencv_num_threads = 0
mp_start_method = 'fork'
plugin = 'plugin/futr3d'
voxel_size = [0.075, 0.075, 0.2]
center_head = dict(
    type='CenterHead',
    in_channels=512,
    tasks=[
        dict(num_class=1, class_names=['car']),
        dict(num_class=2, class_names=['truck', 'construction_vehicle']),
        dict(num_class=2, class_names=['bus', 'trailer']),
        dict(num_class=1, class_names=['barrier']),
        dict(num_class=2, class_names=['motorcycle', 'bicycle']),
        dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])
    ],
    common_heads=dict(
        reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),
    share_conv_channel=64,
    bbox_coder=dict(
        type='CenterPointBBoxCoder',
        pc_range=[-54, -54],
        post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],
        max_num=500,
        score_threshold=0.1,
        out_size_factor=8,
        voxel_size=[0.075, 0.075],
        code_size=9),
    separate_head=dict(type='SeparateHead', init_bias=-2.19, final_kernel=3),
    loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),
    loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),
    norm_bbox=True)
model = dict(
    type='FUTR3D',
    aux_weight=0.5,
    pts_voxel_layer=dict(
        max_num_points=10,
        voxel_size=[0.075, 0.075, 0.2],
        max_voxels=(120000, 160000),
        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
    pts_voxel_encoder=dict(type='HardSimpleVFE', num_features=5),
    pts_middle_encoder=dict(
        type='SparseEncoder',
        in_channels=5,
        sparse_shape=[41, 1440, 1440],
        output_channels=128,
        order=('conv', 'norm', 'act'),
        encoder_channels=((16, 16, 32), (32, 32, 64), (64, 64, 128), (128,
                                                                      128)),
        encoder_paddings=((0, 0, 1), (0, 0, 1), (0, 0, [0, 1, 1]), (0, 0)),
        block_type='basicblock'),
    pts_backbone=dict(type='SECONDMamba'),
    pts_neck=dict(
        type='FPN',
        norm_cfg=dict(type='BN2d', eps=0.001, momentum=0.01),
        act_cfg=dict(type='ReLU', inplace=False),
        in_channels=[128, 256],
        out_channels=256,
        start_level=0,
        add_extra_convs=True,
        num_outs=4,
        relu_before_extra_convs=True),
    pts_bbox_head=dict(
        type='FUTR3DHead',
        use_dab=True,
        use_dss=True,
        use_hybrid=False,
        hybrid=None,
        dss_batch_first=False,
        dss_drop_prob=0.1,
        dss_mamba_prenorm=False,
        dss_mamba_cfg=dict(),
        dss_mamba_version='DSSMamba_Tiny',
        dss_num_layers=2,
        dss_rope=False,
        dss_morton_rearrange=True,
        dss_conv_path=False,
        dss_xy=True,
        dss_deepseek_format=False,
        use_mss=False,
        anchor_size=3,
        use_aux=True,
        aux_head=dict(
            type='CenterHead',
            in_channels=512,
            tasks=[
                dict(num_class=1, class_names=['car']),
                dict(
                    num_class=2, class_names=['truck',
                                              'construction_vehicle']),
                dict(num_class=2, class_names=['bus', 'trailer']),
                dict(num_class=1, class_names=['barrier']),
                dict(num_class=2, class_names=['motorcycle', 'bicycle']),
                dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])
            ],
            common_heads=dict(
                reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),
            share_conv_channel=64,
            bbox_coder=dict(
                type='CenterPointBBoxCoder',
                pc_range=[-54, -54],
                post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],
                max_num=500,
                score_threshold=0.1,
                out_size_factor=8,
                voxel_size=[0.075, 0.075],
                code_size=9),
            separate_head=dict(
                type='SeparateHead', init_bias=-2.19, final_kernel=3),
            loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),
            loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),
            norm_bbox=True),
        mix_selection=False,
        num_query=900,
        num_classes=10,
        in_channels=256,
        pc_range=[-54, -54, -5.0, 54, 54, 3.0],
        sync_cls_avg_factor=True,
        with_box_refine=True,
        as_two_stage=False,
        code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],
        transformer=dict(
            type='FUTR3DTransformer',
            use_dab=True,
            decoder=dict(
                type='FUTR3DTransformerDecoder',
                num_layers=6,
                use_dab=True,
                anchor_size=3,
                return_intermediate=True,
                transformerlayers=dict(
                    type='DetrTransformerDecoderLayer',
                    attn_cfgs=[
                        dict(
                            type='MultiheadAttention',
                            embed_dims=256,
                            num_heads=8,
                            dropout=0.1),
                        dict(type='FUTR3DAttention', embed_dims=256)
                    ],
                    feedforward_channels=1024,
                    ffn_dropout=0.1,
                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',
                                     'ffn', 'norm')))),
        positional_encoding=dict(
            type='SinePositionalEncoding',
            num_feats=128,
            normalize=True,
            offset=-0.5),
        loss_cls=dict(
            type='FocalLoss',
            use_sigmoid=True,
            gamma=2.0,
            alpha=0.25,
            loss_weight=2.0),
        loss_bbox=dict(type='L1Loss', loss_weight=0.25),
        loss_iou=dict(type='GIoULoss', loss_weight=0)),
    train_cfg=dict(
        pts=dict(
            point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0],
            pc_range=[-54, -54, -5.0, 54, 54, 3.0],
            grid_size=[1440, 1440, 40],
            voxel_size=[0.075, 0.075, 0.2],
            out_size_factor=8,
            dense_reg=1,
            gaussian_overlap=0.1,
            max_objs=500,
            min_radius=2,
            code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],
            assigner=dict(
                type='HungarianAssigner3D',
                cls_cost=dict(type='FocalLossCost', weight=2.0),
                reg_cost=dict(type='BBox3DL1Cost', weight=0.25),
                iou_cost=dict(type='IoUCost', weight=0)))),
    test_cfg=dict(
        pts=dict(
            pc_range=[-54, -54],
            post_center_limit_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],
            max_per_img=500,
            max_pool_nms=False,
            min_radius=[4, 12, 10, 1, 0.85, 0.175],
            out_size_factor=8,
            voxel_size=[0.075, 0.075],
            nms_type='circle',
            pre_max_size=1000,
            post_max_size=83,
            nms_thr=0.2,
            max_num=300,
            score_threshold=0,
            post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0])))
db_sampler = dict(
    data_root='data/nuscenes/',
    info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',
    rate=1.0,
    prepare=dict(
        filter_by_difficulty=[-1],
        filter_by_min_points=dict(
            car=5,
            truck=5,
            bus=5,
            trailer=5,
            construction_vehicle=5,
            traffic_cone=5,
            barrier=5,
            motorcycle=5,
            bicycle=5,
            pedestrian=5)),
    classes=[
        'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',
        'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
    ],
    sample_groups=dict(
        car=2,
        truck=3,
        construction_vehicle=7,
        bus=4,
        trailer=6,
        barrier=2,
        motorcycle=6,
        bicycle=6,
        pedestrian=2,
        traffic_cone=2),
    points_loader=dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=[0, 1, 2, 3, 4],
        file_client_args=dict(backend='disk')))
find_unused_parameters = True
custom_hooks = [dict(type='FadeOjectSampleHook', num_last_epochs=5)]
gpu_ids = range(0, 2)

2025-04-23 13:09:24,955 - mmdet - INFO - 设置随机种子为 0, deterministic: False
2025-04-23 13:09:25,113 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
Name of parameter - Initialization information

pts_middle_encoder.conv_input.0.weight - torch.Size([16, 3, 3, 3, 5]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv_input.1.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv_input.1.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.0.conv1.weight - torch.Size([16, 3, 3, 3, 16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.0.bn1.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.0.bn1.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.0.conv2.weight - torch.Size([16, 3, 3, 3, 16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.0.bn2.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.0.bn2.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.1.conv1.weight - torch.Size([16, 3, 3, 3, 16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.1.bn1.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.1.bn1.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.1.conv2.weight - torch.Size([16, 3, 3, 3, 16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.1.bn2.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.1.bn2.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.2.0.weight - torch.Size([32, 3, 3, 3, 16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.2.1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.2.1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.0.conv1.weight - torch.Size([32, 3, 3, 3, 32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.0.bn1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.0.bn1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.0.conv2.weight - torch.Size([32, 3, 3, 3, 32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.0.bn2.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.0.bn2.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.1.conv1.weight - torch.Size([32, 3, 3, 3, 32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.1.bn1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.1.bn1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.1.conv2.weight - torch.Size([32, 3, 3, 3, 32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.1.bn2.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.1.bn2.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.2.0.weight - torch.Size([64, 3, 3, 3, 32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.2.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.2.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.0.conv1.weight - torch.Size([64, 3, 3, 3, 64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.0.conv2.weight - torch.Size([64, 3, 3, 3, 64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.0.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.1.conv1.weight - torch.Size([64, 3, 3, 3, 64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.1.conv2.weight - torch.Size([64, 3, 3, 3, 64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.2.0.weight - torch.Size([128, 3, 3, 3, 64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.2.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.2.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.0.conv1.weight - torch.Size([128, 3, 3, 3, 128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.0.conv2.weight - torch.Size([128, 3, 3, 3, 128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.1.conv1.weight - torch.Size([128, 3, 3, 3, 128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.1.conv2.weight - torch.Size([128, 3, 3, 3, 128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv_out.0.weight - torch.Size([128, 3, 1, 1, 128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv_out.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv_out.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.0.0.dt_bias_H - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.0.0.dt_bias_V - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.0.0.A_log_H - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.0.0.A_log_V - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.0.0.D_H - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.0.0.D_V - torch.Size([4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.0.0.in_proj_H.weight - torch.Size([524, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.0.0.in_proj_V.weight - torch.Size([524, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.0.0.out_proj.weight - torch.Size([128, 512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.0.0.out_norm.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.0.0.out_norm.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.0.0.conv1d_H.weight - torch.Size([512, 256, 4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.0.0.conv1d_V.weight - torch.Size([512, 256, 4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.0.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.0.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.1.0.dt_bias_H - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.1.0.dt_bias_V - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.1.0.A_log_H - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.1.0.A_log_V - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.1.0.D_H - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.1.0.D_V - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.1.0.in_proj_H.weight - torch.Size([266, 128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.1.0.in_proj_V.weight - torch.Size([266, 128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.1.0.out_proj.weight - torch.Size([256, 512]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.1.0.out_norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.1.0.out_norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.1.0.conv1d_H.weight - torch.Size([256, 128, 4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.1.0.conv1d_V.weight - torch.Size([256, 128, 4]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.1.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.1.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.lateral_convs.0.conv.weight - torch.Size([256, 128, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.lateral_convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.lateral_convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.lateral_convs.1.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.lateral_convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.lateral_convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.fpn_convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.fpn_convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.fpn_convs.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.fpn_convs.3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.level_embeds - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.mamba.A_log_f - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.mamba.A_log_b - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.mamba.D_f - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.mamba.D_b - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.mamba.A_log_f_xy - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.mamba.A_log_b_xy - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.mamba.D_f_xy - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.mamba.D_b_xy - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.mamba.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.mamba.in_proj_xy.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.mamba.x_proj_f.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.mamba.x_proj_b.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.mamba.dt_proj_f.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.mamba.dt_proj_f.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.mamba.dt_proj_b.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.mamba.dt_proj_b.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.mamba.x_proj_f_xy.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.mamba.x_proj_b_xy.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.mamba.dt_proj_f_xy.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.mamba.dt_proj_f_xy.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.mamba.dt_proj_b_xy.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.mamba.dt_proj_b_xy.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.mamba.out_proj.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.mamba.global_proj.weight - torch.Size([1024, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.mamba.global_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.1.mamba.A_log_f - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.1.mamba.A_log_b - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.1.mamba.D_f - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.1.mamba.D_b - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.1.mamba.A_log_f_xy - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.1.mamba.A_log_b_xy - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.1.mamba.D_f_xy - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.1.mamba.D_b_xy - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.1.mamba.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.1.mamba.in_proj_xy.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.1.mamba.x_proj_f.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.1.mamba.x_proj_b.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.1.mamba.dt_proj_f.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.1.mamba.dt_proj_f.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.1.mamba.dt_proj_b.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.1.mamba.dt_proj_b.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.1.mamba.x_proj_f_xy.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.1.mamba.x_proj_b_xy.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.1.mamba.dt_proj_f_xy.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.1.mamba.dt_proj_f_xy.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.1.mamba.dt_proj_b_xy.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.1.mamba.dt_proj_b_xy.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.1.mamba.out_proj.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.1.mamba.global_proj.weight - torch.Size([1024, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.1.mamba.global_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.mamba.A_log_f - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.mamba.A_log_b - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.mamba.D_f - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.mamba.D_b - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.mamba.A_log_f_xy - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.mamba.A_log_b_xy - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.mamba.D_f_xy - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.mamba.D_b_xy - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.mamba.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.mamba.in_proj_xy.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.mamba.x_proj_f.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.mamba.x_proj_b.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.mamba.dt_proj_f.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.mamba.dt_proj_f.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.mamba.dt_proj_b.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.mamba.dt_proj_b.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.mamba.x_proj_f_xy.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.mamba.x_proj_b_xy.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.mamba.dt_proj_f_xy.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.mamba.dt_proj_f_xy.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.mamba.dt_proj_b_xy.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.mamba.dt_proj_b_xy.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.mamba.out_proj.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.mamba.global_proj.weight - torch.Size([1024, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.mamba.global_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.1.mamba.A_log_f - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.1.mamba.A_log_b - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.1.mamba.D_f - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.1.mamba.D_b - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.1.mamba.A_log_f_xy - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.1.mamba.A_log_b_xy - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.1.mamba.D_f_xy - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.1.mamba.D_b_xy - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.1.mamba.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.1.mamba.in_proj_xy.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.1.mamba.x_proj_f.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.1.mamba.x_proj_b.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.1.mamba.dt_proj_f.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.1.mamba.dt_proj_f.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.1.mamba.dt_proj_b.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.1.mamba.dt_proj_b.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.1.mamba.x_proj_f_xy.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.1.mamba.x_proj_b_xy.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.1.mamba.dt_proj_f_xy.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.1.mamba.dt_proj_f_xy.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.1.mamba.dt_proj_b_xy.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.1.mamba.dt_proj_b_xy.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.1.mamba.out_proj.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.1.mamba.global_proj.weight - torch.Size([1024, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.1.mamba.global_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.mamba.A_log_f - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.mamba.A_log_b - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.mamba.D_f - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.mamba.D_b - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.mamba.A_log_f_xy - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.mamba.A_log_b_xy - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.mamba.D_f_xy - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.mamba.D_b_xy - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.mamba.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.mamba.in_proj_xy.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.mamba.x_proj_f.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.mamba.x_proj_b.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.mamba.dt_proj_f.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.mamba.dt_proj_f.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.mamba.dt_proj_b.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.mamba.dt_proj_b.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.mamba.x_proj_f_xy.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.mamba.x_proj_b_xy.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.mamba.dt_proj_f_xy.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.mamba.dt_proj_f_xy.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.mamba.dt_proj_b_xy.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.mamba.dt_proj_b_xy.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.mamba.out_proj.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.mamba.global_proj.weight - torch.Size([1024, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.mamba.global_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.1.mamba.A_log_f - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.1.mamba.A_log_b - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.1.mamba.D_f - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.1.mamba.D_b - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.1.mamba.A_log_f_xy - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.1.mamba.A_log_b_xy - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.1.mamba.D_f_xy - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.1.mamba.D_b_xy - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.1.mamba.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.1.mamba.in_proj_xy.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.1.mamba.x_proj_f.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.1.mamba.x_proj_b.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.1.mamba.dt_proj_f.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.1.mamba.dt_proj_f.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.1.mamba.dt_proj_b.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.1.mamba.dt_proj_b.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.1.mamba.x_proj_f_xy.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.1.mamba.x_proj_b_xy.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.1.mamba.dt_proj_f_xy.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.1.mamba.dt_proj_f_xy.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.1.mamba.dt_proj_b_xy.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.1.mamba.dt_proj_b_xy.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.1.mamba.out_proj.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.1.mamba.global_proj.weight - torch.Size([1024, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.1.mamba.global_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.mamba.A_log_f - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.mamba.A_log_b - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.mamba.D_f - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.mamba.D_b - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.mamba.A_log_f_xy - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.mamba.A_log_b_xy - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.mamba.D_f_xy - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.mamba.D_b_xy - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.mamba.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.mamba.in_proj_xy.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.mamba.x_proj_f.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.mamba.x_proj_b.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.mamba.dt_proj_f.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.mamba.dt_proj_f.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.mamba.dt_proj_b.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.mamba.dt_proj_b.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.mamba.x_proj_f_xy.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.mamba.x_proj_b_xy.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.mamba.dt_proj_f_xy.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.mamba.dt_proj_f_xy.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.mamba.dt_proj_b_xy.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.mamba.dt_proj_b_xy.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.mamba.out_proj.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.mamba.global_proj.weight - torch.Size([1024, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.mamba.global_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.1.mamba.A_log_f - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.1.mamba.A_log_b - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.1.mamba.D_f - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.1.mamba.D_b - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.1.mamba.A_log_f_xy - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.1.mamba.A_log_b_xy - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.1.mamba.D_f_xy - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.1.mamba.D_b_xy - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.1.mamba.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.1.mamba.in_proj_xy.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.1.mamba.x_proj_f.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.1.mamba.x_proj_b.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.1.mamba.dt_proj_f.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.1.mamba.dt_proj_f.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.1.mamba.dt_proj_b.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.1.mamba.dt_proj_b.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.1.mamba.x_proj_f_xy.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.1.mamba.x_proj_b_xy.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.1.mamba.dt_proj_f_xy.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.1.mamba.dt_proj_f_xy.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.1.mamba.dt_proj_b_xy.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.1.mamba.dt_proj_b_xy.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.1.mamba.out_proj.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.1.mamba.global_proj.weight - torch.Size([1024, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.1.mamba.global_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.mamba.A_log_f - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.mamba.A_log_b - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.mamba.D_f - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.mamba.D_b - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.mamba.A_log_f_xy - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.mamba.A_log_b_xy - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.mamba.D_f_xy - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.mamba.D_b_xy - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.mamba.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.mamba.in_proj_xy.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.mamba.x_proj_f.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.mamba.x_proj_b.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.mamba.dt_proj_f.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.mamba.dt_proj_f.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.mamba.dt_proj_b.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.mamba.dt_proj_b.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.mamba.x_proj_f_xy.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.mamba.x_proj_b_xy.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.mamba.dt_proj_f_xy.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.mamba.dt_proj_f_xy.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.mamba.dt_proj_b_xy.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.mamba.dt_proj_b_xy.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.mamba.out_proj.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.mamba.global_proj.weight - torch.Size([1024, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.mamba.global_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.1.mamba.A_log_f - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.1.mamba.A_log_b - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.1.mamba.D_f - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.1.mamba.D_b - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.1.mamba.A_log_f_xy - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.1.mamba.A_log_b_xy - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.1.mamba.D_f_xy - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.1.mamba.D_b_xy - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.1.mamba.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.1.mamba.in_proj_xy.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.1.mamba.x_proj_f.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.1.mamba.x_proj_b.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.1.mamba.dt_proj_f.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.1.mamba.dt_proj_f.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.1.mamba.dt_proj_b.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.1.mamba.dt_proj_b.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.1.mamba.x_proj_f_xy.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.1.mamba.x_proj_b_xy.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.1.mamba.dt_proj_f_xy.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.1.mamba.dt_proj_f_xy.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.1.mamba.dt_proj_b_xy.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.1.mamba.dt_proj_b_xy.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.1.mamba.out_proj.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.1.mamba.global_proj.weight - torch.Size([1024, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.1.mamba.global_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.mamba.A_log_f - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.mamba.A_log_b - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.mamba.D_f - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.mamba.D_b - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.mamba.A_log_f_xy - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.mamba.A_log_b_xy - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.mamba.D_f_xy - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.mamba.D_b_xy - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.mamba.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.mamba.in_proj_xy.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.mamba.x_proj_f.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.mamba.x_proj_b.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.mamba.dt_proj_f.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.mamba.dt_proj_f.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.mamba.dt_proj_b.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.mamba.dt_proj_b.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.mamba.x_proj_f_xy.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.mamba.x_proj_b_xy.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.mamba.dt_proj_f_xy.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.mamba.dt_proj_f_xy.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.mamba.dt_proj_b_xy.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.mamba.dt_proj_b_xy.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.mamba.out_proj.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.mamba.global_proj.weight - torch.Size([1024, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.mamba.global_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.1.mamba.A_log_f - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.1.mamba.A_log_b - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.1.mamba.D_f - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.1.mamba.D_b - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.1.mamba.A_log_f_xy - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.1.mamba.A_log_b_xy - torch.Size([256, 4]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.1.mamba.D_f_xy - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.1.mamba.D_b_xy - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.1.mamba.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.1.mamba.in_proj_xy.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.1.mamba.x_proj_f.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.1.mamba.x_proj_b.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.1.mamba.dt_proj_f.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.1.mamba.dt_proj_f.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.1.mamba.dt_proj_b.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.1.mamba.dt_proj_b.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.1.mamba.x_proj_f_xy.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.1.mamba.x_proj_b_xy.weight - torch.Size([24, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.1.mamba.dt_proj_f_xy.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.1.mamba.dt_proj_f_xy.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.1.mamba.dt_proj_b_xy.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.1.mamba.dt_proj_b_xy.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.1.mamba.out_proj.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.1.mamba.global_proj.weight - torch.Size([1024, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.1.mamba.global_proj.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.query_scale.layers.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.query_scale.layers.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.query_scale.layers.1.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.query_scale.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.ref_point_head.layers.0.weight - torch.Size([256, 384]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.ref_point_head.layers.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.ref_point_head.layers.1.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.ref_point_head.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.0.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.0.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.cls_branches.1.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.1.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.cls_branches.2.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.2.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.cls_branches.3.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.3.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.cls_branches.4.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.cls_branches.5.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.5.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.0.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.0.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.0.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.0.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.0.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.0.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.1.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.1.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.1.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.1.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.1.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.1.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.2.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.2.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.2.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.2.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.2.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.2.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.3.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.3.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.3.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.3.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.3.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.3.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.4.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.4.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.4.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.4.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.4.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.4.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.5.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.5.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.5.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.5.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.5.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.5.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.tgt_embed.weight - torch.Size([900, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.refpoint_embed.weight - torch.Size([900, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.shared_conv.conv.weight - torch.Size([64, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.shared_conv.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.shared_conv.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.heatmap.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.heatmap.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.heatmap.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.heatmap.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.heatmap.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.heatmap.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.heatmap.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.heatmap.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.heatmap.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.heatmap.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.heatmap.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.heatmap.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  
2025-04-23 13:09:25,190 - mmdet - INFO - Model:
FUTR3D(
  (pts_voxel_layer): Voxelization(voxel_size=[0.075, 0.075, 0.2], point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0], max_num_points=10, max_voxels=(120000, 160000), deterministic=True)
  (pts_voxel_encoder): HardSimpleVFE()
  (pts_middle_encoder): SparseEncoder(
    (conv_input): SparseSequential(
      (0): SubMConv3d(5, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
    (encoder_layers): SparseSequential(
      (encoder_layer1): SparseSequential(
        (0): SparseBasicBlock(
          (conv1): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (conv2): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (1): SparseBasicBlock(
          (conv1): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (conv2): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): SparseSequential(
          (0): SparseConv3d(16, 32, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
      (encoder_layer2): SparseSequential(
        (0): SparseBasicBlock(
          (conv1): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (conv2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (1): SparseBasicBlock(
          (conv1): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (conv2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): SparseSequential(
          (0): SparseConv3d(32, 64, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
      (encoder_layer3): SparseSequential(
        (0): SparseBasicBlock(
          (conv1): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (conv2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (1): SparseBasicBlock(
          (conv1): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (conv2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): SparseSequential(
          (0): SparseConv3d(64, 128, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[0, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
      (encoder_layer4): SparseSequential(
        (0): SparseBasicBlock(
          (conv1): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (conv2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (1): SparseBasicBlock(
          (conv1): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (conv2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
      )
    )
    (conv_out): SparseSequential(
      (0): SparseConv3d(128, 128, kernel_size=[3, 1, 1], stride=[2, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
      (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
  )
  (pts_backbone): SECONDMamba(
    (blocks): ModuleList(
      (0): Sequential(
        (0): SECONDMambaBlock(
          (in_proj_H): Linear(in_features=256, out_features=524, bias=False)
          (in_proj_V): Linear(in_features=256, out_features=524, bias=False)
          (act): SiLU()
          (out_proj): Linear(in_features=512, out_features=128, bias=False)
          (out_norm): LayerNorm((128,), eps=1e-06, elementwise_affine=True)
          (conv1d_H): Conv1d(256, 512, kernel_size=(4,), stride=(4,), bias=False)
          (conv1d_V): Conv1d(256, 512, kernel_size=(4,), stride=(4,), bias=False)
        )
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
      )
      (1): Sequential(
        (0): SECONDMambaBlock(
          (in_proj_H): Linear(in_features=128, out_features=266, bias=False)
          (in_proj_V): Linear(in_features=128, out_features=266, bias=False)
          (act): SiLU()
          (out_proj): Linear(in_features=512, out_features=256, bias=False)
          (out_norm): LayerNorm((256,), eps=1e-06, elementwise_affine=True)
          (conv1d_H): Conv1d(128, 256, kernel_size=(4,), stride=(4,), bias=False)
          (conv1d_V): Conv1d(128, 256, kernel_size=(4,), stride=(4,), bias=False)
        )
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
  (pts_neck): FPN(
    (lateral_convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
      (1): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
    )
    (fpn_convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
      (1): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
      (2): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
      (3): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
    )
  )
  init_cfg={'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
  (pts_bbox_head): FUTR3DHead(
    (loss_cls): FocalLoss()
    (loss_bbox): L1Loss()
    (loss_iou): GIoULoss()
    (activate): ReLU(inplace=True)
    (positional_encoding): SinePositionalEncoding(num_feats=128, temperature=10000, normalize=True, scale=6.283185307179586, eps=1e-06)
    (transformer): FUTR3DTransformer(
      (decoder): FUTR3DTransformerDecoder(
        (layers): ModuleList(
          (0): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): DSS(
                (layers): ModuleList(
                  (0): ModuleDict(
                    (mamba): DSSMamba(
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (in_proj_xy): Linear(in_features=256, out_features=1024, bias=False)
                      (act_f): SiLU()
                      (act_b): SiLU()
                      (x_proj_f): Linear(in_features=256, out_features=24, bias=False)
                      (x_proj_b): Linear(in_features=256, out_features=24, bias=False)
                      (dt_proj_f): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b): Linear(in_features=16, out_features=256, bias=True)
                      (act_f_xy): SiLU()
                      (act_b_xy): SiLU()
                      (x_proj_f_xy): Linear(in_features=256, out_features=24, bias=False)
                      (x_proj_b_xy): Linear(in_features=256, out_features=24, bias=False)
                      (dt_proj_f_xy): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b_xy): Linear(in_features=16, out_features=256, bias=True)
                      (out_proj): Linear(in_features=1024, out_features=256, bias=False)
                      (global_proj): Linear(in_features=1024, out_features=1024, bias=True)
                    )
                    (dropout): Identity()
                    (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  )
                  (1): ModuleDict(
                    (mamba): DSSMamba(
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (in_proj_xy): Linear(in_features=256, out_features=1024, bias=False)
                      (act_f): SiLU()
                      (act_b): SiLU()
                      (x_proj_f): Linear(in_features=256, out_features=24, bias=False)
                      (x_proj_b): Linear(in_features=256, out_features=24, bias=False)
                      (dt_proj_f): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b): Linear(in_features=16, out_features=256, bias=True)
                      (act_f_xy): SiLU()
                      (act_b_xy): SiLU()
                      (x_proj_f_xy): Linear(in_features=256, out_features=24, bias=False)
                      (x_proj_b_xy): Linear(in_features=256, out_features=24, bias=False)
                      (dt_proj_f_xy): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b_xy): Linear(in_features=16, out_features=256, bias=True)
                      (out_proj): Linear(in_features=1024, out_features=256, bias=False)
                      (global_proj): Linear(in_features=1024, out_features=1024, bias=True)
                    )
                    (dropout): DropPath(drop_prob=0.100)
                    (norm): Identity()
                  )
                )
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (1): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): DSS(
                (layers): ModuleList(
                  (0): ModuleDict(
                    (mamba): DSSMamba(
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (in_proj_xy): Linear(in_features=256, out_features=1024, bias=False)
                      (act_f): SiLU()
                      (act_b): SiLU()
                      (x_proj_f): Linear(in_features=256, out_features=24, bias=False)
                      (x_proj_b): Linear(in_features=256, out_features=24, bias=False)
                      (dt_proj_f): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b): Linear(in_features=16, out_features=256, bias=True)
                      (act_f_xy): SiLU()
                      (act_b_xy): SiLU()
                      (x_proj_f_xy): Linear(in_features=256, out_features=24, bias=False)
                      (x_proj_b_xy): Linear(in_features=256, out_features=24, bias=False)
                      (dt_proj_f_xy): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b_xy): Linear(in_features=16, out_features=256, bias=True)
                      (out_proj): Linear(in_features=1024, out_features=256, bias=False)
                      (global_proj): Linear(in_features=1024, out_features=1024, bias=True)
                    )
                    (dropout): Identity()
                    (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  )
                  (1): ModuleDict(
                    (mamba): DSSMamba(
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (in_proj_xy): Linear(in_features=256, out_features=1024, bias=False)
                      (act_f): SiLU()
                      (act_b): SiLU()
                      (x_proj_f): Linear(in_features=256, out_features=24, bias=False)
                      (x_proj_b): Linear(in_features=256, out_features=24, bias=False)
                      (dt_proj_f): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b): Linear(in_features=16, out_features=256, bias=True)
                      (act_f_xy): SiLU()
                      (act_b_xy): SiLU()
                      (x_proj_f_xy): Linear(in_features=256, out_features=24, bias=False)
                      (x_proj_b_xy): Linear(in_features=256, out_features=24, bias=False)
                      (dt_proj_f_xy): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b_xy): Linear(in_features=16, out_features=256, bias=True)
                      (out_proj): Linear(in_features=1024, out_features=256, bias=False)
                      (global_proj): Linear(in_features=1024, out_features=1024, bias=True)
                    )
                    (dropout): DropPath(drop_prob=0.100)
                    (norm): Identity()
                  )
                )
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (2): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): DSS(
                (layers): ModuleList(
                  (0): ModuleDict(
                    (mamba): DSSMamba(
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (in_proj_xy): Linear(in_features=256, out_features=1024, bias=False)
                      (act_f): SiLU()
                      (act_b): SiLU()
                      (x_proj_f): Linear(in_features=256, out_features=24, bias=False)
                      (x_proj_b): Linear(in_features=256, out_features=24, bias=False)
                      (dt_proj_f): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b): Linear(in_features=16, out_features=256, bias=True)
                      (act_f_xy): SiLU()
                      (act_b_xy): SiLU()
                      (x_proj_f_xy): Linear(in_features=256, out_features=24, bias=False)
                      (x_proj_b_xy): Linear(in_features=256, out_features=24, bias=False)
                      (dt_proj_f_xy): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b_xy): Linear(in_features=16, out_features=256, bias=True)
                      (out_proj): Linear(in_features=1024, out_features=256, bias=False)
                      (global_proj): Linear(in_features=1024, out_features=1024, bias=True)
                    )
                    (dropout): Identity()
                    (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  )
                  (1): ModuleDict(
                    (mamba): DSSMamba(
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (in_proj_xy): Linear(in_features=256, out_features=1024, bias=False)
                      (act_f): SiLU()
                      (act_b): SiLU()
                      (x_proj_f): Linear(in_features=256, out_features=24, bias=False)
                      (x_proj_b): Linear(in_features=256, out_features=24, bias=False)
                      (dt_proj_f): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b): Linear(in_features=16, out_features=256, bias=True)
                      (act_f_xy): SiLU()
                      (act_b_xy): SiLU()
                      (x_proj_f_xy): Linear(in_features=256, out_features=24, bias=False)
                      (x_proj_b_xy): Linear(in_features=256, out_features=24, bias=False)
                      (dt_proj_f_xy): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b_xy): Linear(in_features=16, out_features=256, bias=True)
                      (out_proj): Linear(in_features=1024, out_features=256, bias=False)
                      (global_proj): Linear(in_features=1024, out_features=1024, bias=True)
                    )
                    (dropout): DropPath(drop_prob=0.100)
                    (norm): Identity()
                  )
                )
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (3): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): DSS(
                (layers): ModuleList(
                  (0): ModuleDict(
                    (mamba): DSSMamba(
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (in_proj_xy): Linear(in_features=256, out_features=1024, bias=False)
                      (act_f): SiLU()
                      (act_b): SiLU()
                      (x_proj_f): Linear(in_features=256, out_features=24, bias=False)
                      (x_proj_b): Linear(in_features=256, out_features=24, bias=False)
                      (dt_proj_f): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b): Linear(in_features=16, out_features=256, bias=True)
                      (act_f_xy): SiLU()
                      (act_b_xy): SiLU()
                      (x_proj_f_xy): Linear(in_features=256, out_features=24, bias=False)
                      (x_proj_b_xy): Linear(in_features=256, out_features=24, bias=False)
                      (dt_proj_f_xy): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b_xy): Linear(in_features=16, out_features=256, bias=True)
                      (out_proj): Linear(in_features=1024, out_features=256, bias=False)
                      (global_proj): Linear(in_features=1024, out_features=1024, bias=True)
                    )
                    (dropout): Identity()
                    (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  )
                  (1): ModuleDict(
                    (mamba): DSSMamba(
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (in_proj_xy): Linear(in_features=256, out_features=1024, bias=False)
                      (act_f): SiLU()
                      (act_b): SiLU()
                      (x_proj_f): Linear(in_features=256, out_features=24, bias=False)
                      (x_proj_b): Linear(in_features=256, out_features=24, bias=False)
                      (dt_proj_f): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b): Linear(in_features=16, out_features=256, bias=True)
                      (act_f_xy): SiLU()
                      (act_b_xy): SiLU()
                      (x_proj_f_xy): Linear(in_features=256, out_features=24, bias=False)
                      (x_proj_b_xy): Linear(in_features=256, out_features=24, bias=False)
                      (dt_proj_f_xy): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b_xy): Linear(in_features=16, out_features=256, bias=True)
                      (out_proj): Linear(in_features=1024, out_features=256, bias=False)
                      (global_proj): Linear(in_features=1024, out_features=1024, bias=True)
                    )
                    (dropout): DropPath(drop_prob=0.100)
                    (norm): Identity()
                  )
                )
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (4): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): DSS(
                (layers): ModuleList(
                  (0): ModuleDict(
                    (mamba): DSSMamba(
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (in_proj_xy): Linear(in_features=256, out_features=1024, bias=False)
                      (act_f): SiLU()
                      (act_b): SiLU()
                      (x_proj_f): Linear(in_features=256, out_features=24, bias=False)
                      (x_proj_b): Linear(in_features=256, out_features=24, bias=False)
                      (dt_proj_f): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b): Linear(in_features=16, out_features=256, bias=True)
                      (act_f_xy): SiLU()
                      (act_b_xy): SiLU()
                      (x_proj_f_xy): Linear(in_features=256, out_features=24, bias=False)
                      (x_proj_b_xy): Linear(in_features=256, out_features=24, bias=False)
                      (dt_proj_f_xy): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b_xy): Linear(in_features=16, out_features=256, bias=True)
                      (out_proj): Linear(in_features=1024, out_features=256, bias=False)
                      (global_proj): Linear(in_features=1024, out_features=1024, bias=True)
                    )
                    (dropout): Identity()
                    (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  )
                  (1): ModuleDict(
                    (mamba): DSSMamba(
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (in_proj_xy): Linear(in_features=256, out_features=1024, bias=False)
                      (act_f): SiLU()
                      (act_b): SiLU()
                      (x_proj_f): Linear(in_features=256, out_features=24, bias=False)
                      (x_proj_b): Linear(in_features=256, out_features=24, bias=False)
                      (dt_proj_f): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b): Linear(in_features=16, out_features=256, bias=True)
                      (act_f_xy): SiLU()
                      (act_b_xy): SiLU()
                      (x_proj_f_xy): Linear(in_features=256, out_features=24, bias=False)
                      (x_proj_b_xy): Linear(in_features=256, out_features=24, bias=False)
                      (dt_proj_f_xy): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b_xy): Linear(in_features=16, out_features=256, bias=True)
                      (out_proj): Linear(in_features=1024, out_features=256, bias=False)
                      (global_proj): Linear(in_features=1024, out_features=1024, bias=True)
                    )
                    (dropout): DropPath(drop_prob=0.100)
                    (norm): Identity()
                  )
                )
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (5): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): DSS(
                (layers): ModuleList(
                  (0): ModuleDict(
                    (mamba): DSSMamba(
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (in_proj_xy): Linear(in_features=256, out_features=1024, bias=False)
                      (act_f): SiLU()
                      (act_b): SiLU()
                      (x_proj_f): Linear(in_features=256, out_features=24, bias=False)
                      (x_proj_b): Linear(in_features=256, out_features=24, bias=False)
                      (dt_proj_f): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b): Linear(in_features=16, out_features=256, bias=True)
                      (act_f_xy): SiLU()
                      (act_b_xy): SiLU()
                      (x_proj_f_xy): Linear(in_features=256, out_features=24, bias=False)
                      (x_proj_b_xy): Linear(in_features=256, out_features=24, bias=False)
                      (dt_proj_f_xy): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b_xy): Linear(in_features=16, out_features=256, bias=True)
                      (out_proj): Linear(in_features=1024, out_features=256, bias=False)
                      (global_proj): Linear(in_features=1024, out_features=1024, bias=True)
                    )
                    (dropout): Identity()
                    (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  )
                  (1): ModuleDict(
                    (mamba): DSSMamba(
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (in_proj_xy): Linear(in_features=256, out_features=1024, bias=False)
                      (act_f): SiLU()
                      (act_b): SiLU()
                      (x_proj_f): Linear(in_features=256, out_features=24, bias=False)
                      (x_proj_b): Linear(in_features=256, out_features=24, bias=False)
                      (dt_proj_f): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b): Linear(in_features=16, out_features=256, bias=True)
                      (act_f_xy): SiLU()
                      (act_b_xy): SiLU()
                      (x_proj_f_xy): Linear(in_features=256, out_features=24, bias=False)
                      (x_proj_b_xy): Linear(in_features=256, out_features=24, bias=False)
                      (dt_proj_f_xy): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b_xy): Linear(in_features=16, out_features=256, bias=True)
                      (out_proj): Linear(in_features=1024, out_features=256, bias=False)
                      (global_proj): Linear(in_features=1024, out_features=1024, bias=True)
                    )
                    (dropout): DropPath(drop_prob=0.100)
                    (norm): Identity()
                  )
                )
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
        (query_scale): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=256, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
          )
        )
        (ref_point_head): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=384, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
          )
        )
      )
    )
    (cls_branches): ModuleList(
      (0): Linear(in_features=256, out_features=10, bias=True)
      (1): Linear(in_features=256, out_features=10, bias=True)
      (2): Linear(in_features=256, out_features=10, bias=True)
      (3): Linear(in_features=256, out_features=10, bias=True)
      (4): Linear(in_features=256, out_features=10, bias=True)
      (5): Linear(in_features=256, out_features=10, bias=True)
    )
    (reg_branches): ModuleList(
      (0): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (1): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (2): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (3): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (4): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (5): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
    )
    (tgt_embed): Embedding(900, 256)
    (refpoint_embed): Embedding(900, 3)
    (aux_head): CenterHead(
      (loss_cls): GaussianFocalLoss()
      (loss_bbox): L1Loss()
      (shared_conv): ConvModule(
        (conv): Conv2d(512, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (task_heads): ModuleList(
        (0): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
        (1): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
        (2): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
        (3): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
        (4): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
        (5): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
      )
    )
  )
)
2025-04-23 13:09:38,060 - mmdet - INFO - Start running, host: ubuntu@ubuntu, work_dir: /home/ubuntu/jxcao/hdd/jxc/FUTR3D/work_dirs/secondmambadss_split14/second替换掉
2025-04-23 13:09:38,060 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CyclicLrUpdaterHook                
(HIGH        ) CyclicMomentumUpdaterHook          
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CyclicLrUpdaterHook                
(HIGH        ) CyclicMomentumUpdaterHook          
(NORMAL      ) FadeOjectSampleHook                
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CyclicLrUpdaterHook                
(HIGH        ) CyclicMomentumUpdaterHook          
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_epoch:
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
2025-04-23 13:09:38,084 - mmdet - INFO - workflow: [('train', 1)], max: 20 epochs
2025-04-23 13:09:38,138 - mmdet - INFO - Checkpoints will be saved to /home/ubuntu/jxcao/hdd/jxc/FUTR3D/work_dirs/secondmambadss_split14/second替换掉 by HardDiskBackend.
2025-04-23 13:10:45,695 - mmdet - INFO - Epoch [1][50/1104]	lr: 2.502e-05, eta: 8:15:15, time: 1.349, data_time: 0.096, memory: 15034, loss_cls: 1.3408, loss_bbox: 2.2380, d0.loss_cls: 1.6285, d0.loss_bbox: 4.4177, d1.loss_cls: 1.4333, d1.loss_bbox: 2.2821, d2.loss_cls: 1.3943, d2.loss_bbox: 2.2670, d3.loss_cls: 1.3736, d3.loss_bbox: 2.2556, d4.loss_cls: 1.3529, d4.loss_bbox: 2.2436, aux_task0.loss_heatmap: 343.1787, aux_task0.loss_bbox: 0.8139, aux_task1.loss_heatmap: 708.3123, aux_task1.loss_bbox: 0.9275, aux_task2.loss_heatmap: 831.1343, aux_task2.loss_bbox: 1.0940, aux_task3.loss_heatmap: 802.3523, aux_task3.loss_bbox: 0.6782, aux_task4.loss_heatmap: 511.0243, aux_task4.loss_bbox: 0.8090, aux_task5.loss_heatmap: 470.2831, aux_task5.loss_bbox: 0.7755, loss: 3695.6104, grad_norm: 18059.5103
2025-04-23 13:11:35,390 - mmdet - INFO - Epoch [1][100/1104]	lr: 2.507e-05, eta: 7:09:06, time: 0.994, data_time: 0.008, memory: 15034, loss_cls: 1.1469, loss_bbox: 1.9443, d0.loss_cls: 1.1754, d0.loss_bbox: 3.9836, d1.loss_cls: 1.1549, d1.loss_bbox: 2.0890, d2.loss_cls: 1.1488, d2.loss_bbox: 2.0344, d3.loss_cls: 1.1455, d3.loss_bbox: 1.9929, d4.loss_cls: 1.1453, d4.loss_bbox: 1.9624, aux_task0.loss_heatmap: 184.9130, aux_task0.loss_bbox: 0.6316, aux_task1.loss_heatmap: 351.6114, aux_task1.loss_bbox: 0.6942, aux_task2.loss_heatmap: 429.5560, aux_task2.loss_bbox: 0.8745, aux_task3.loss_heatmap: 350.7196, aux_task3.loss_bbox: 0.5423, aux_task4.loss_heatmap: 258.9724, aux_task4.loss_bbox: 0.5589, aux_task5.loss_heatmap: 240.1894, aux_task5.loss_bbox: 0.5777, loss: 1840.7644, grad_norm: 9825.8659
2025-04-23 13:12:24,885 - mmdet - INFO - Epoch [1][150/1104]	lr: 2.516e-05, eta: 6:46:01, time: 0.990, data_time: 0.008, memory: 15034, loss_cls: 1.1111, loss_bbox: 1.9690, d0.loss_cls: 1.1508, d0.loss_bbox: 2.2745, d1.loss_cls: 1.1324, d1.loss_bbox: 1.8008, d2.loss_cls: 1.1222, d2.loss_bbox: 1.8337, d3.loss_cls: 1.1162, d3.loss_bbox: 1.8806, d4.loss_cls: 1.1114, d4.loss_bbox: 1.9282, aux_task0.loss_heatmap: 89.8088, aux_task0.loss_bbox: 0.5430, aux_task1.loss_heatmap: 166.5302, aux_task1.loss_bbox: 0.5931, aux_task2.loss_heatmap: 205.7983, aux_task2.loss_bbox: 0.7061, aux_task3.loss_heatmap: 178.4529, aux_task3.loss_bbox: 0.4806, aux_task4.loss_heatmap: 124.4372, aux_task4.loss_bbox: 0.4808, aux_task5.loss_heatmap: 103.9723, aux_task5.loss_bbox: 0.5132, loss: 890.7475, grad_norm: 5550.0060
2025-04-23 13:13:14,241 - mmdet - INFO - Epoch [1][200/1104]	lr: 2.528e-05, eta: 6:33:49, time: 0.987, data_time: 0.008, memory: 15237, loss_cls: 1.0843, loss_bbox: 1.7760, d0.loss_cls: 1.1353, d0.loss_bbox: 1.7576, d1.loss_cls: 1.1113, d1.loss_bbox: 1.7598, d2.loss_cls: 1.0948, d2.loss_bbox: 1.7775, d3.loss_cls: 1.0852, d3.loss_bbox: 1.7850, d4.loss_cls: 1.0829, d4.loss_bbox: 1.7838, aux_task0.loss_heatmap: 40.7197, aux_task0.loss_bbox: 0.5099, aux_task1.loss_heatmap: 82.1239, aux_task1.loss_bbox: 0.5639, aux_task2.loss_heatmap: 106.4017, aux_task2.loss_bbox: 0.6190, aux_task3.loss_heatmap: 82.6939, aux_task3.loss_bbox: 0.4546, aux_task4.loss_heatmap: 59.1329, aux_task4.loss_bbox: 0.4596, aux_task5.loss_heatmap: 55.2630, aux_task5.loss_bbox: 0.4952, loss: 446.6709, grad_norm: 2983.8843
2025-04-23 13:14:03,597 - mmdet - INFO - Epoch [1][250/1104]	lr: 2.544e-05, eta: 6:26:09, time: 0.987, data_time: 0.007, memory: 15237, loss_cls: 1.0851, loss_bbox: 1.7067, d0.loss_cls: 1.1285, d0.loss_bbox: 1.7320, d1.loss_cls: 1.1058, d1.loss_bbox: 1.7216, d2.loss_cls: 1.0878, d2.loss_bbox: 1.7208, d3.loss_cls: 1.0826, d3.loss_bbox: 1.7145, d4.loss_cls: 1.0844, d4.loss_bbox: 1.7084, aux_task0.loss_heatmap: 19.8892, aux_task0.loss_bbox: 0.4737, aux_task1.loss_heatmap: 37.4939, aux_task1.loss_bbox: 0.5364, aux_task2.loss_heatmap: 47.4750, aux_task2.loss_bbox: 0.5720, aux_task3.loss_heatmap: 50.4917, aux_task3.loss_bbox: 0.4424, aux_task4.loss_heatmap: 28.2001, aux_task4.loss_bbox: 0.4535, aux_task5.loss_heatmap: 26.4455, aux_task5.loss_bbox: 0.4842, loss: 229.8361, grad_norm: 1667.5187
2025-04-23 13:14:52,963 - mmdet - INFO - Epoch [1][300/1104]	lr: 2.564e-05, eta: 6:20:47, time: 0.987, data_time: 0.007, memory: 15237, loss_cls: 1.0656, loss_bbox: 1.6879, d0.loss_cls: 1.1215, d0.loss_bbox: 1.7346, d1.loss_cls: 1.1048, d1.loss_bbox: 1.7072, d2.loss_cls: 1.0809, d2.loss_bbox: 1.7006, d3.loss_cls: 1.0663, d3.loss_bbox: 1.6992, d4.loss_cls: 1.0668, d4.loss_bbox: 1.6914, aux_task0.loss_heatmap: 9.7576, aux_task0.loss_bbox: 0.4584, aux_task1.loss_heatmap: 18.0795, aux_task1.loss_bbox: 0.5137, aux_task2.loss_heatmap: 20.3367, aux_task2.loss_bbox: 0.5581, aux_task3.loss_heatmap: 25.3089, aux_task3.loss_bbox: 0.4293, aux_task4.loss_heatmap: 13.1651, aux_task4.loss_bbox: 0.4369, aux_task5.loss_heatmap: 12.2788, aux_task5.loss_bbox: 0.4748, loss: 118.5245, grad_norm: 868.9240
2025-04-23 13:15:42,372 - mmdet - INFO - Epoch [1][350/1104]	lr: 2.587e-05, eta: 6:16:46, time: 0.988, data_time: 0.007, memory: 15237, loss_cls: 1.0405, loss_bbox: 1.6695, d0.loss_cls: 1.1256, d0.loss_bbox: 1.7359, d1.loss_cls: 1.1050, d1.loss_bbox: 1.6930, d2.loss_cls: 1.0747, d2.loss_bbox: 1.6835, d3.loss_cls: 1.0489, d3.loss_bbox: 1.6760, d4.loss_cls: 1.0444, d4.loss_bbox: 1.6675, aux_task0.loss_heatmap: 5.6501, aux_task0.loss_bbox: 0.4555, aux_task1.loss_heatmap: 8.2187, aux_task1.loss_bbox: 0.5145, aux_task2.loss_heatmap: 8.9182, aux_task2.loss_bbox: 0.5254, aux_task3.loss_heatmap: 10.3551, aux_task3.loss_bbox: 0.4251, aux_task4.loss_heatmap: 6.0810, aux_task4.loss_bbox: 0.4421, aux_task5.loss_heatmap: 5.7397, aux_task5.loss_bbox: 0.4764, loss: 64.3665, grad_norm: 379.8996
2025-04-23 13:16:32,113 - mmdet - INFO - Epoch [1][400/1104]	lr: 2.613e-05, eta: 6:13:51, time: 0.995, data_time: 0.008, memory: 15237, loss_cls: 1.0125, loss_bbox: 1.6237, d0.loss_cls: 1.0998, d0.loss_bbox: 1.7194, d1.loss_cls: 1.0789, d1.loss_bbox: 1.6615, d2.loss_cls: 1.0313, d2.loss_bbox: 1.6306, d3.loss_cls: 1.0071, d3.loss_bbox: 1.6288, d4.loss_cls: 1.0080, d4.loss_bbox: 1.6267, aux_task0.loss_heatmap: 3.0682, aux_task0.loss_bbox: 0.4497, aux_task1.loss_heatmap: 4.1361, aux_task1.loss_bbox: 0.4974, aux_task2.loss_heatmap: 4.6859, aux_task2.loss_bbox: 0.4920, aux_task3.loss_heatmap: 5.3666, aux_task3.loss_bbox: 0.4334, aux_task4.loss_heatmap: 3.2823, aux_task4.loss_bbox: 0.4359, aux_task5.loss_heatmap: 3.1111, aux_task5.loss_bbox: 0.4707, loss: 42.5574, grad_norm: 181.3513
2025-04-23 13:17:21,759 - mmdet - INFO - Epoch [1][450/1104]	lr: 2.643e-05, eta: 6:11:19, time: 0.993, data_time: 0.007, memory: 15237, loss_cls: 1.0004, loss_bbox: 1.6136, d0.loss_cls: 1.0755, d0.loss_bbox: 1.7429, d1.loss_cls: 1.0574, d1.loss_bbox: 1.6755, d2.loss_cls: 1.0054, d2.loss_bbox: 1.6345, d3.loss_cls: 0.9927, d3.loss_bbox: 1.6255, d4.loss_cls: 0.9961, d4.loss_bbox: 1.6167, aux_task0.loss_heatmap: 2.0440, aux_task0.loss_bbox: 0.4508, aux_task1.loss_heatmap: 2.4927, aux_task1.loss_bbox: 0.4887, aux_task2.loss_heatmap: 2.7637, aux_task2.loss_bbox: 0.5019, aux_task3.loss_heatmap: 2.7412, aux_task3.loss_bbox: 0.4130, aux_task4.loss_heatmap: 2.0601, aux_task4.loss_bbox: 0.4277, aux_task5.loss_heatmap: 1.9958, aux_task5.loss_bbox: 0.4675, loss: 32.8834, grad_norm: 75.9786
2025-04-23 13:18:11,205 - mmdet - INFO - Epoch [1][500/1104]	lr: 2.677e-05, eta: 6:08:58, time: 0.989, data_time: 0.008, memory: 15237, loss_cls: 0.9906, loss_bbox: 1.5721, d0.loss_cls: 1.0590, d0.loss_bbox: 1.7355, d1.loss_cls: 1.0330, d1.loss_bbox: 1.6402, d2.loss_cls: 0.9871, d2.loss_bbox: 1.5907, d3.loss_cls: 0.9807, d3.loss_bbox: 1.5720, d4.loss_cls: 0.9848, d4.loss_bbox: 1.5698, aux_task0.loss_heatmap: 1.5549, aux_task0.loss_bbox: 0.4299, aux_task1.loss_heatmap: 1.8615, aux_task1.loss_bbox: 0.4610, aux_task2.loss_heatmap: 2.0350, aux_task2.loss_bbox: 0.4791, aux_task3.loss_heatmap: 2.0427, aux_task3.loss_bbox: 0.3923, aux_task4.loss_heatmap: 1.5736, aux_task4.loss_bbox: 0.3995, aux_task5.loss_heatmap: 1.6565, aux_task5.loss_bbox: 0.4320, loss: 29.0334, grad_norm: 41.5004
2025-04-23 13:19:00,396 - mmdet - INFO - Epoch [1][550/1104]	lr: 2.714e-05, eta: 6:06:45, time: 0.984, data_time: 0.008, memory: 15237, loss_cls: 0.9612, loss_bbox: 1.5239, d0.loss_cls: 1.0219, d0.loss_bbox: 1.7160, d1.loss_cls: 0.9820, d1.loss_bbox: 1.5950, d2.loss_cls: 0.9580, d2.loss_bbox: 1.5411, d3.loss_cls: 0.9537, d3.loss_bbox: 1.5272, d4.loss_cls: 0.9598, d4.loss_bbox: 1.5248, aux_task0.loss_heatmap: 1.4091, aux_task0.loss_bbox: 0.4054, aux_task1.loss_heatmap: 1.6368, aux_task1.loss_bbox: 0.4354, aux_task2.loss_heatmap: 1.8548, aux_task2.loss_bbox: 0.4742, aux_task3.loss_heatmap: 1.6654, aux_task3.loss_bbox: 0.3721, aux_task4.loss_heatmap: 1.3576, aux_task4.loss_bbox: 0.3947, aux_task5.loss_heatmap: 1.4702, aux_task5.loss_bbox: 0.4093, loss: 27.1497, grad_norm: 32.0113
2025-04-23 13:19:50,043 - mmdet - INFO - Epoch [1][600/1104]	lr: 2.754e-05, eta: 6:05:01, time: 0.993, data_time: 0.008, memory: 15237, loss_cls: 0.9424, loss_bbox: 1.4653, d0.loss_cls: 1.0013, d0.loss_bbox: 1.7027, d1.loss_cls: 0.9601, d1.loss_bbox: 1.5525, d2.loss_cls: 0.9454, d2.loss_bbox: 1.4960, d3.loss_cls: 0.9418, d3.loss_bbox: 1.4751, d4.loss_cls: 0.9416, d4.loss_bbox: 1.4701, aux_task0.loss_heatmap: 1.3664, aux_task0.loss_bbox: 0.4044, aux_task1.loss_heatmap: 1.5945, aux_task1.loss_bbox: 0.4278, aux_task2.loss_heatmap: 1.7914, aux_task2.loss_bbox: 0.4657, aux_task3.loss_heatmap: 1.4575, aux_task3.loss_bbox: 0.3662, aux_task4.loss_heatmap: 1.2059, aux_task4.loss_bbox: 0.3808, aux_task5.loss_heatmap: 1.3568, aux_task5.loss_bbox: 0.4003, loss: 26.1118, grad_norm: 30.1619
2025-04-23 13:20:39,628 - mmdet - INFO - Epoch [1][650/1104]	lr: 2.798e-05, eta: 6:03:24, time: 0.992, data_time: 0.008, memory: 15333, loss_cls: 0.9141, loss_bbox: 1.4267, d0.loss_cls: 0.9784, d0.loss_bbox: 1.6735, d1.loss_cls: 0.9316, d1.loss_bbox: 1.5207, d2.loss_cls: 0.9200, d2.loss_bbox: 1.4592, d3.loss_cls: 0.9145, d3.loss_bbox: 1.4344, d4.loss_cls: 0.9127, d4.loss_bbox: 1.4290, aux_task0.loss_heatmap: 1.2864, aux_task0.loss_bbox: 0.3837, aux_task1.loss_heatmap: 1.5092, aux_task1.loss_bbox: 0.4254, aux_task2.loss_heatmap: 1.7434, aux_task2.loss_bbox: 0.4614, aux_task3.loss_heatmap: 1.4308, aux_task3.loss_bbox: 0.3667, aux_task4.loss_heatmap: 1.1416, aux_task4.loss_bbox: 0.3786, aux_task5.loss_heatmap: 1.2487, aux_task5.loss_bbox: 0.3872, loss: 25.2777, grad_norm: 29.7381
2025-04-23 13:21:29,225 - mmdet - INFO - Epoch [1][700/1104]	lr: 2.846e-05, eta: 6:01:55, time: 0.992, data_time: 0.008, memory: 15333, loss_cls: 0.9015, loss_bbox: 1.3723, d0.loss_cls: 0.9713, d0.loss_bbox: 1.6422, d1.loss_cls: 0.9228, d1.loss_bbox: 1.4721, d2.loss_cls: 0.9100, d2.loss_bbox: 1.4112, d3.loss_cls: 0.9036, d3.loss_bbox: 1.3853, d4.loss_cls: 0.9034, d4.loss_bbox: 1.3775, aux_task0.loss_heatmap: 1.2609, aux_task0.loss_bbox: 0.3852, aux_task1.loss_heatmap: 1.4868, aux_task1.loss_bbox: 0.4145, aux_task2.loss_heatmap: 1.7068, aux_task2.loss_bbox: 0.4545, aux_task3.loss_heatmap: 1.2512, aux_task3.loss_bbox: 0.3541, aux_task4.loss_heatmap: 1.0481, aux_task4.loss_bbox: 0.3690, aux_task5.loss_heatmap: 1.1986, aux_task5.loss_bbox: 0.3826, loss: 24.4855, grad_norm: 26.7173
2025-04-23 13:22:18,954 - mmdet - INFO - Epoch [1][750/1104]	lr: 2.897e-05, eta: 6:00:34, time: 0.995, data_time: 0.007, memory: 15333, loss_cls: 0.8883, loss_bbox: 1.3389, d0.loss_cls: 0.9618, d0.loss_bbox: 1.6062, d1.loss_cls: 0.9122, d1.loss_bbox: 1.4371, d2.loss_cls: 0.8989, d2.loss_bbox: 1.3764, d3.loss_cls: 0.8900, d3.loss_bbox: 1.3522, d4.loss_cls: 0.8897, d4.loss_bbox: 1.3462, aux_task0.loss_heatmap: 1.2384, aux_task0.loss_bbox: 0.3750, aux_task1.loss_heatmap: 1.4734, aux_task1.loss_bbox: 0.4159, aux_task2.loss_heatmap: 1.6983, aux_task2.loss_bbox: 0.4477, aux_task3.loss_heatmap: 1.2449, aux_task3.loss_bbox: 0.3446, aux_task4.loss_heatmap: 1.0255, aux_task4.loss_bbox: 0.3671, aux_task5.loss_heatmap: 1.1620, aux_task5.loss_bbox: 0.3757, loss: 24.0665, grad_norm: 29.6440
2025-04-23 13:23:08,175 - mmdet - INFO - Epoch [1][800/1104]	lr: 2.951e-05, eta: 5:59:03, time: 0.984, data_time: 0.007, memory: 15333, loss_cls: 0.8882, loss_bbox: 1.3159, d0.loss_cls: 0.9557, d0.loss_bbox: 1.5821, d1.loss_cls: 0.9078, d1.loss_bbox: 1.4135, d2.loss_cls: 0.8918, d2.loss_bbox: 1.3545, d3.loss_cls: 0.8856, d3.loss_bbox: 1.3318, d4.loss_cls: 0.8863, d4.loss_bbox: 1.3255, aux_task0.loss_heatmap: 1.1951, aux_task0.loss_bbox: 0.3693, aux_task1.loss_heatmap: 1.4561, aux_task1.loss_bbox: 0.4133, aux_task2.loss_heatmap: 1.6761, aux_task2.loss_bbox: 0.4496, aux_task3.loss_heatmap: 1.2889, aux_task3.loss_bbox: 0.3492, aux_task4.loss_heatmap: 0.9838, aux_task4.loss_bbox: 0.3567, aux_task5.loss_heatmap: 1.1326, aux_task5.loss_bbox: 0.3710, loss: 23.7801, grad_norm: 30.0016
2025-04-23 13:23:57,517 - mmdet - INFO - Epoch [1][850/1104]	lr: 3.009e-05, eta: 5:57:41, time: 0.987, data_time: 0.008, memory: 15333, loss_cls: 0.8719, loss_bbox: 1.2921, d0.loss_cls: 0.9459, d0.loss_bbox: 1.5575, d1.loss_cls: 0.8938, d1.loss_bbox: 1.3947, d2.loss_cls: 0.8802, d2.loss_bbox: 1.3322, d3.loss_cls: 0.8737, d3.loss_bbox: 1.3074, d4.loss_cls: 0.8724, d4.loss_bbox: 1.3003, aux_task0.loss_heatmap: 1.1884, aux_task0.loss_bbox: 0.3668, aux_task1.loss_heatmap: 1.4243, aux_task1.loss_bbox: 0.4090, aux_task2.loss_heatmap: 1.6555, aux_task2.loss_bbox: 0.4525, aux_task3.loss_heatmap: 1.2379, aux_task3.loss_bbox: 0.3433, aux_task4.loss_heatmap: 0.9630, aux_task4.loss_bbox: 0.3539, aux_task5.loss_heatmap: 1.1151, aux_task5.loss_bbox: 0.3674, loss: 23.3991, grad_norm: 29.9052
2025-04-23 13:24:48,996 - mmdet - INFO - Epoch [1][900/1104]	lr: 3.070e-05, eta: 5:57:12, time: 1.030, data_time: 0.008, memory: 15333, loss_cls: 0.8675, loss_bbox: 1.2733, d0.loss_cls: 0.9368, d0.loss_bbox: 1.5364, d1.loss_cls: 0.8878, d1.loss_bbox: 1.3732, d2.loss_cls: 0.8705, d2.loss_bbox: 1.3116, d3.loss_cls: 0.8657, d3.loss_bbox: 1.2889, d4.loss_cls: 0.8656, d4.loss_bbox: 1.2815, aux_task0.loss_heatmap: 1.1596, aux_task0.loss_bbox: 0.3611, aux_task1.loss_heatmap: 1.4166, aux_task1.loss_bbox: 0.4083, aux_task2.loss_heatmap: 1.6371, aux_task2.loss_bbox: 0.4510, aux_task3.loss_heatmap: 1.1889, aux_task3.loss_bbox: 0.3446, aux_task4.loss_heatmap: 0.9397, aux_task4.loss_bbox: 0.3511, aux_task5.loss_heatmap: 1.0788, aux_task5.loss_bbox: 0.3711, loss: 23.0666, grad_norm: 30.7627
2025-04-23 13:25:38,525 - mmdet - INFO - Epoch [1][950/1104]	lr: 3.135e-05, eta: 5:55:58, time: 0.991, data_time: 0.008, memory: 15333, loss_cls: 0.8584, loss_bbox: 1.2536, d0.loss_cls: 0.9246, d0.loss_bbox: 1.5198, d1.loss_cls: 0.8762, d1.loss_bbox: 1.3586, d2.loss_cls: 0.8606, d2.loss_bbox: 1.2972, d3.loss_cls: 0.8571, d3.loss_bbox: 1.2715, d4.loss_cls: 0.8566, d4.loss_bbox: 1.2611, aux_task0.loss_heatmap: 1.1635, aux_task0.loss_bbox: 0.3717, aux_task1.loss_heatmap: 1.4100, aux_task1.loss_bbox: 0.4086, aux_task2.loss_heatmap: 1.6423, aux_task2.loss_bbox: 0.4401, aux_task3.loss_heatmap: 1.1475, aux_task3.loss_bbox: 0.3372, aux_task4.loss_heatmap: 0.9194, aux_task4.loss_bbox: 0.3537, aux_task5.loss_heatmap: 1.0298, aux_task5.loss_bbox: 0.3570, loss: 22.7759, grad_norm: 29.1868
2025-04-23 13:26:28,105 - mmdet - INFO - Exp name: secondmambadss_split14.py
2025-04-23 13:26:28,105 - mmdet - INFO - Epoch [1][1000/1104]	lr: 3.203e-05, eta: 5:54:47, time: 0.992, data_time: 0.008, memory: 15333, loss_cls: 0.8544, loss_bbox: 1.2326, d0.loss_cls: 0.9212, d0.loss_bbox: 1.5008, d1.loss_cls: 0.8730, d1.loss_bbox: 1.3349, d2.loss_cls: 0.8563, d2.loss_bbox: 1.2757, d3.loss_cls: 0.8510, d3.loss_bbox: 1.2517, d4.loss_cls: 0.8515, d4.loss_bbox: 1.2425, aux_task0.loss_heatmap: 1.1667, aux_task0.loss_bbox: 0.3689, aux_task1.loss_heatmap: 1.3945, aux_task1.loss_bbox: 0.4086, aux_task2.loss_heatmap: 1.6330, aux_task2.loss_bbox: 0.4431, aux_task3.loss_heatmap: 1.1732, aux_task3.loss_bbox: 0.3390, aux_task4.loss_heatmap: 0.8953, aux_task4.loss_bbox: 0.3514, aux_task5.loss_heatmap: 1.0224, aux_task5.loss_bbox: 0.3584, loss: 22.6001, grad_norm: 29.9178
2025-04-23 13:27:17,336 - mmdet - INFO - Epoch [1][1050/1104]	lr: 3.274e-05, eta: 5:53:31, time: 0.985, data_time: 0.008, memory: 15333, loss_cls: 0.8519, loss_bbox: 1.2325, d0.loss_cls: 0.9168, d0.loss_bbox: 1.4960, d1.loss_cls: 0.8688, d1.loss_bbox: 1.3233, d2.loss_cls: 0.8524, d2.loss_bbox: 1.2707, d3.loss_cls: 0.8488, d3.loss_bbox: 1.2489, d4.loss_cls: 0.8497, d4.loss_bbox: 1.2393, aux_task0.loss_heatmap: 1.1492, aux_task0.loss_bbox: 0.3650, aux_task1.loss_heatmap: 1.3879, aux_task1.loss_bbox: 0.4111, aux_task2.loss_heatmap: 1.6189, aux_task2.loss_bbox: 0.4409, aux_task3.loss_heatmap: 1.1525, aux_task3.loss_bbox: 0.3414, aux_task4.loss_heatmap: 0.9084, aux_task4.loss_bbox: 0.3519, aux_task5.loss_heatmap: 1.0070, aux_task5.loss_bbox: 0.3595, loss: 22.4928, grad_norm: 28.9990
2025-04-23 13:28:07,179 - mmdet - INFO - Epoch [1][1100/1104]	lr: 3.349e-05, eta: 5:52:30, time: 0.997, data_time: 0.008, memory: 15333, loss_cls: 0.8298, loss_bbox: 1.2152, d0.loss_cls: 0.8930, d0.loss_bbox: 1.4857, d1.loss_cls: 0.8482, d1.loss_bbox: 1.3079, d2.loss_cls: 0.8318, d2.loss_bbox: 1.2540, d3.loss_cls: 0.8282, d3.loss_bbox: 1.2296, d4.loss_cls: 0.8270, d4.loss_bbox: 1.2231, aux_task0.loss_heatmap: 1.1134, aux_task0.loss_bbox: 0.3605, aux_task1.loss_heatmap: 1.3838, aux_task1.loss_bbox: 0.4082, aux_task2.loss_heatmap: 1.6085, aux_task2.loss_bbox: 0.4468, aux_task3.loss_heatmap: 1.1250, aux_task3.loss_bbox: 0.3359, aux_task4.loss_heatmap: 0.8953, aux_task4.loss_bbox: 0.3583, aux_task5.loss_heatmap: 0.9862, aux_task5.loss_bbox: 0.3545, loss: 22.1498, grad_norm: 30.9603
2025-04-23 13:28:11,397 - mmdet - INFO - Saving checkpoint at 1 epochs
2025-04-23 13:39:52,693 - mmdet - INFO - Exp name: secondmambadss_split14.py
2025-04-23 13:39:52,693 - mmdet - INFO - Epoch(val) [1][3010]	pts_bbox_NuScenes/car_AP_dist_0.5: 0.0016, pts_bbox_NuScenes/car_AP_dist_1.0: 0.0430, pts_bbox_NuScenes/car_AP_dist_2.0: 0.1104, pts_bbox_NuScenes/car_AP_dist_4.0: 0.1674, pts_bbox_NuScenes/car_trans_err: 0.8534, pts_bbox_NuScenes/car_scale_err: 0.2059, pts_bbox_NuScenes/car_orient_err: 1.2867, pts_bbox_NuScenes/car_vel_err: 1.7201, pts_bbox_NuScenes/car_attr_err: 0.4860, pts_bbox_NuScenes/mATE: 0.8419, pts_bbox_NuScenes/mASE: 0.5509, pts_bbox_NuScenes/mAOE: 1.3102, pts_bbox_NuScenes/mAVE: 1.2763, pts_bbox_NuScenes/mAAE: 0.5776, pts_bbox_NuScenes/truck_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/truck_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/truck_AP_dist_2.0: 0.0000, pts_bbox_NuScenes/truck_AP_dist_4.0: 0.0020, pts_bbox_NuScenes/truck_trans_err: 1.1511, pts_bbox_NuScenes/truck_scale_err: 0.3706, pts_bbox_NuScenes/truck_orient_err: 1.5331, pts_bbox_NuScenes/truck_vel_err: 1.3554, pts_bbox_NuScenes/truck_attr_err: 0.4275, pts_bbox_NuScenes/construction_vehicle_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/construction_vehicle_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/construction_vehicle_AP_dist_2.0: 0.0000, pts_bbox_NuScenes/construction_vehicle_AP_dist_4.0: 0.0000, pts_bbox_NuScenes/construction_vehicle_trans_err: 1.0111, pts_bbox_NuScenes/construction_vehicle_scale_err: 0.6084, pts_bbox_NuScenes/construction_vehicle_orient_err: 1.4976, pts_bbox_NuScenes/construction_vehicle_vel_err: 0.1189, pts_bbox_NuScenes/construction_vehicle_attr_err: 0.3437, pts_bbox_NuScenes/bus_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/bus_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/bus_AP_dist_2.0: 0.0000, pts_bbox_NuScenes/bus_AP_dist_4.0: 0.0000, pts_bbox_NuScenes/bus_trans_err: 1.1873, pts_bbox_NuScenes/bus_scale_err: 0.3736, pts_bbox_NuScenes/bus_orient_err: 1.2743, pts_bbox_NuScenes/bus_vel_err: 3.5397, pts_bbox_NuScenes/bus_attr_err: 0.7504, pts_bbox_NuScenes/trailer_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/trailer_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/trailer_AP_dist_2.0: 0.0000, pts_bbox_NuScenes/trailer_AP_dist_4.0: 0.0000, pts_bbox_NuScenes/trailer_trans_err: 1.0000, pts_bbox_NuScenes/trailer_scale_err: 1.0000, pts_bbox_NuScenes/trailer_orient_err: 1.0000, pts_bbox_NuScenes/trailer_vel_err: 1.0000, pts_bbox_NuScenes/trailer_attr_err: 1.0000, pts_bbox_NuScenes/barrier_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/barrier_AP_dist_1.0: 0.0046, pts_bbox_NuScenes/barrier_AP_dist_2.0: 0.0270, pts_bbox_NuScenes/barrier_AP_dist_4.0: 0.0527, pts_bbox_NuScenes/barrier_trans_err: 0.9010, pts_bbox_NuScenes/barrier_scale_err: 0.8010, pts_bbox_NuScenes/barrier_orient_err: 0.8735, pts_bbox_NuScenes/barrier_vel_err: nan, pts_bbox_NuScenes/barrier_attr_err: nan, pts_bbox_NuScenes/motorcycle_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/motorcycle_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/motorcycle_AP_dist_2.0: 0.0000, pts_bbox_NuScenes/motorcycle_AP_dist_4.0: 0.0000, pts_bbox_NuScenes/motorcycle_trans_err: 0.4547, pts_bbox_NuScenes/motorcycle_scale_err: 0.5042, pts_bbox_NuScenes/motorcycle_orient_err: 1.3598, pts_bbox_NuScenes/motorcycle_vel_err: 1.0577, pts_bbox_NuScenes/motorcycle_attr_err: 0.6014, pts_bbox_NuScenes/bicycle_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/bicycle_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/bicycle_AP_dist_2.0: 0.0000, pts_bbox_NuScenes/bicycle_AP_dist_4.0: 0.0000, pts_bbox_NuScenes/bicycle_trans_err: 0.7531, pts_bbox_NuScenes/bicycle_scale_err: 0.5680, pts_bbox_NuScenes/bicycle_orient_err: 1.4764, pts_bbox_NuScenes/bicycle_vel_err: 0.3642, pts_bbox_NuScenes/bicycle_attr_err: 0.1502, pts_bbox_NuScenes/pedestrian_AP_dist_0.5: 0.0133, pts_bbox_NuScenes/pedestrian_AP_dist_1.0: 0.0434, pts_bbox_NuScenes/pedestrian_AP_dist_2.0: 0.0529, pts_bbox_NuScenes/pedestrian_AP_dist_4.0: 0.0730, pts_bbox_NuScenes/pedestrian_trans_err: 0.4786, pts_bbox_NuScenes/pedestrian_scale_err: 0.4815, pts_bbox_NuScenes/pedestrian_orient_err: 1.4902, pts_bbox_NuScenes/pedestrian_vel_err: 1.0545, pts_bbox_NuScenes/pedestrian_attr_err: 0.8615, pts_bbox_NuScenes/traffic_cone_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/traffic_cone_AP_dist_1.0: 0.0005, pts_bbox_NuScenes/traffic_cone_AP_dist_2.0: 0.0028, pts_bbox_NuScenes/traffic_cone_AP_dist_4.0: 0.0154, pts_bbox_NuScenes/traffic_cone_trans_err: 0.6287, pts_bbox_NuScenes/traffic_cone_scale_err: 0.5953, pts_bbox_NuScenes/traffic_cone_orient_err: nan, pts_bbox_NuScenes/traffic_cone_vel_err: nan, pts_bbox_NuScenes/traffic_cone_attr_err: nan, pts_bbox_NuScenes/NDS: 0.1106, pts_bbox_NuScenes/mAP: 0.0152
2025-04-23 13:40:47,382 - mmdet - INFO - Epoch [2][50/1104]	lr: 3.433e-05, eta: 5:51:21, time: 1.074, data_time: 0.092, memory: 15333, loss_cls: 0.8208, loss_bbox: 1.1950, d0.loss_cls: 0.8866, d0.loss_bbox: 1.4524, d1.loss_cls: 0.8378, d1.loss_bbox: 1.2828, d2.loss_cls: 0.8241, d2.loss_bbox: 1.2308, d3.loss_cls: 0.8193, d3.loss_bbox: 1.2094, d4.loss_cls: 0.8177, d4.loss_bbox: 1.2015, aux_task0.loss_heatmap: 1.0903, aux_task0.loss_bbox: 0.3573, aux_task1.loss_heatmap: 1.3539, aux_task1.loss_bbox: 0.3999, aux_task2.loss_heatmap: 1.5981, aux_task2.loss_bbox: 0.4444, aux_task3.loss_heatmap: 1.0985, aux_task3.loss_bbox: 0.3339, aux_task4.loss_heatmap: 0.8781, aux_task4.loss_bbox: 0.3509, aux_task5.loss_heatmap: 0.9584, aux_task5.loss_bbox: 0.3519, loss: 21.7941, grad_norm: 30.4998
2025-04-23 13:41:36,628 - mmdet - INFO - Epoch [2][100/1104]	lr: 3.514e-05, eta: 5:50:12, time: 0.985, data_time: 0.008, memory: 15333, loss_cls: 0.8226, loss_bbox: 1.1949, d0.loss_cls: 0.8837, d0.loss_bbox: 1.4384, d1.loss_cls: 0.8393, d1.loss_bbox: 1.2698, d2.loss_cls: 0.8260, d2.loss_bbox: 1.2216, d3.loss_cls: 0.8201, d3.loss_bbox: 1.2024, d4.loss_cls: 0.8205, d4.loss_bbox: 1.1968, aux_task0.loss_heatmap: 1.0947, aux_task0.loss_bbox: 0.3524, aux_task1.loss_heatmap: 1.3712, aux_task1.loss_bbox: 0.4016, aux_task2.loss_heatmap: 1.5954, aux_task2.loss_bbox: 0.4300, aux_task3.loss_heatmap: 1.1232, aux_task3.loss_bbox: 0.3276, aux_task4.loss_heatmap: 0.8558, aux_task4.loss_bbox: 0.3504, aux_task5.loss_heatmap: 0.9326, aux_task5.loss_bbox: 0.3500, loss: 21.7207, grad_norm: 34.3774
2025-04-23 13:42:26,430 - mmdet - INFO - Epoch [2][150/1104]	lr: 3.599e-05, eta: 5:49:12, time: 0.996, data_time: 0.008, memory: 15405, loss_cls: 0.8197, loss_bbox: 1.1873, d0.loss_cls: 0.8795, d0.loss_bbox: 1.4394, d1.loss_cls: 0.8349, d1.loss_bbox: 1.2710, d2.loss_cls: 0.8211, d2.loss_bbox: 1.2243, d3.loss_cls: 0.8187, d3.loss_bbox: 1.2038, d4.loss_cls: 0.8172, d4.loss_bbox: 1.1954, aux_task0.loss_heatmap: 1.1227, aux_task0.loss_bbox: 0.3656, aux_task1.loss_heatmap: 1.3397, aux_task1.loss_bbox: 0.3988, aux_task2.loss_heatmap: 1.5716, aux_task2.loss_bbox: 0.4314, aux_task3.loss_heatmap: 1.0914, aux_task3.loss_bbox: 0.3370, aux_task4.loss_heatmap: 0.8412, aux_task4.loss_bbox: 0.3462, aux_task5.loss_heatmap: 0.9150, aux_task5.loss_bbox: 0.3503, loss: 21.6233, grad_norm: 31.9021
2025-04-23 13:43:15,754 - mmdet - INFO - Epoch [2][200/1104]	lr: 3.687e-05, eta: 5:48:07, time: 0.986, data_time: 0.008, memory: 15405, loss_cls: 0.8129, loss_bbox: 1.1758, d0.loss_cls: 0.8738, d0.loss_bbox: 1.4328, d1.loss_cls: 0.8317, d1.loss_bbox: 1.2639, d2.loss_cls: 0.8165, d2.loss_bbox: 1.2146, d3.loss_cls: 0.8118, d3.loss_bbox: 1.1903, d4.loss_cls: 0.8103, d4.loss_bbox: 1.1797, aux_task0.loss_heatmap: 1.0971, aux_task0.loss_bbox: 0.3589, aux_task1.loss_heatmap: 1.3286, aux_task1.loss_bbox: 0.3992, aux_task2.loss_heatmap: 1.5627, aux_task2.loss_bbox: 0.4314, aux_task3.loss_heatmap: 1.0680, aux_task3.loss_bbox: 0.3299, aux_task4.loss_heatmap: 0.8325, aux_task4.loss_bbox: 0.3463, aux_task5.loss_heatmap: 0.9340, aux_task5.loss_bbox: 0.3551, loss: 21.4577, grad_norm: 32.2925
2025-04-23 13:44:05,077 - mmdet - INFO - Epoch [2][250/1104]	lr: 3.778e-05, eta: 5:47:02, time: 0.986, data_time: 0.008, memory: 15405, loss_cls: 0.7997, loss_bbox: 1.1555, d0.loss_cls: 0.8543, d0.loss_bbox: 1.4024, d1.loss_cls: 0.8160, d1.loss_bbox: 1.2351, d2.loss_cls: 0.8023, d2.loss_bbox: 1.1885, d3.loss_cls: 0.7973, d3.loss_bbox: 1.1704, d4.loss_cls: 0.7983, d4.loss_bbox: 1.1606, aux_task0.loss_heatmap: 1.0704, aux_task0.loss_bbox: 0.3473, aux_task1.loss_heatmap: 1.3097, aux_task1.loss_bbox: 0.4011, aux_task2.loss_heatmap: 1.5540, aux_task2.loss_bbox: 0.4261, aux_task3.loss_heatmap: 1.0523, aux_task3.loss_bbox: 0.3263, aux_task4.loss_heatmap: 0.8330, aux_task4.loss_bbox: 0.3462, aux_task5.loss_heatmap: 0.8933, aux_task5.loss_bbox: 0.3476, loss: 21.0877, grad_norm: 32.2363
2025-04-23 13:44:54,673 - mmdet - INFO - Epoch [2][300/1104]	lr: 3.872e-05, eta: 5:46:02, time: 0.992, data_time: 0.008, memory: 15405, loss_cls: 0.7988, loss_bbox: 1.1593, d0.loss_cls: 0.8544, d0.loss_bbox: 1.4098, d1.loss_cls: 0.8133, d1.loss_bbox: 1.2419, d2.loss_cls: 0.7998, d2.loss_bbox: 1.1948, d3.loss_cls: 0.7957, d3.loss_bbox: 1.1724, d4.loss_cls: 0.7939, d4.loss_bbox: 1.1643, aux_task0.loss_heatmap: 1.0633, aux_task0.loss_bbox: 0.3575, aux_task1.loss_heatmap: 1.3389, aux_task1.loss_bbox: 0.3983, aux_task2.loss_heatmap: 1.5480, aux_task2.loss_bbox: 0.4432, aux_task3.loss_heatmap: 1.0882, aux_task3.loss_bbox: 0.3281, aux_task4.loss_heatmap: 0.8319, aux_task4.loss_bbox: 0.3355, aux_task5.loss_heatmap: 0.8582, aux_task5.loss_bbox: 0.3464, loss: 21.1360, grad_norm: 30.8033
2025-04-23 13:45:44,036 - mmdet - INFO - Epoch [2][350/1104]	lr: 3.969e-05, eta: 5:45:00, time: 0.987, data_time: 0.008, memory: 15405, loss_cls: 0.7941, loss_bbox: 1.1367, d0.loss_cls: 0.8443, d0.loss_bbox: 1.3771, d1.loss_cls: 0.8085, d1.loss_bbox: 1.2192, d2.loss_cls: 0.7937, d2.loss_bbox: 1.1729, d3.loss_cls: 0.7924, d3.loss_bbox: 1.1512, d4.loss_cls: 0.7893, d4.loss_bbox: 1.1430, aux_task0.loss_heatmap: 1.0596, aux_task0.loss_bbox: 0.3479, aux_task1.loss_heatmap: 1.3187, aux_task1.loss_bbox: 0.3999, aux_task2.loss_heatmap: 1.5344, aux_task2.loss_bbox: 0.4321, aux_task3.loss_heatmap: 1.0692, aux_task3.loss_bbox: 0.3334, aux_task4.loss_heatmap: 0.8286, aux_task4.loss_bbox: 0.3438, aux_task5.loss_heatmap: 0.8576, aux_task5.loss_bbox: 0.3433, loss: 20.8910, grad_norm: 34.0936
2025-04-23 13:46:33,538 - mmdet - INFO - Epoch [2][400/1104]	lr: 4.070e-05, eta: 5:44:00, time: 0.990, data_time: 0.008, memory: 15405, loss_cls: 0.7799, loss_bbox: 1.1300, d0.loss_cls: 0.8344, d0.loss_bbox: 1.3610, d1.loss_cls: 0.7968, d1.loss_bbox: 1.2067, d2.loss_cls: 0.7843, d2.loss_bbox: 1.1618, d3.loss_cls: 0.7809, d3.loss_bbox: 1.1430, d4.loss_cls: 0.7789, d4.loss_bbox: 1.1355, aux_task0.loss_heatmap: 1.0381, aux_task0.loss_bbox: 0.3468, aux_task1.loss_heatmap: 1.2987, aux_task1.loss_bbox: 0.3933, aux_task2.loss_heatmap: 1.5548, aux_task2.loss_bbox: 0.4258, aux_task3.loss_heatmap: 1.0443, aux_task3.loss_bbox: 0.3321, aux_task4.loss_heatmap: 0.8086, aux_task4.loss_bbox: 0.3418, aux_task5.loss_heatmap: 0.8378, aux_task5.loss_bbox: 0.3446, loss: 20.6594, grad_norm: 34.3897
2025-04-23 13:47:22,973 - mmdet - INFO - Epoch [2][450/1104]	lr: 4.173e-05, eta: 5:43:01, time: 0.989, data_time: 0.008, memory: 15405, loss_cls: 0.7717, loss_bbox: 1.1289, d0.loss_cls: 0.8268, d0.loss_bbox: 1.3504, d1.loss_cls: 0.7895, d1.loss_bbox: 1.2054, d2.loss_cls: 0.7754, d2.loss_bbox: 1.1586, d3.loss_cls: 0.7708, d3.loss_bbox: 1.1416, d4.loss_cls: 0.7696, d4.loss_bbox: 1.1336, aux_task0.loss_heatmap: 1.0463, aux_task0.loss_bbox: 0.3437, aux_task1.loss_heatmap: 1.2992, aux_task1.loss_bbox: 0.3938, aux_task2.loss_heatmap: 1.5188, aux_task2.loss_bbox: 0.4339, aux_task3.loss_heatmap: 1.0266, aux_task3.loss_bbox: 0.3301, aux_task4.loss_heatmap: 0.8374, aux_task4.loss_bbox: 0.3443, aux_task5.loss_heatmap: 0.8092, aux_task5.loss_bbox: 0.3436, loss: 20.5492, grad_norm: 32.8099
2025-04-23 13:48:12,373 - mmdet - INFO - Epoch [2][500/1104]	lr: 4.280e-05, eta: 5:42:01, time: 0.988, data_time: 0.008, memory: 15405, loss_cls: 0.7612, loss_bbox: 1.1063, d0.loss_cls: 0.8157, d0.loss_bbox: 1.3307, d1.loss_cls: 0.7800, d1.loss_bbox: 1.1881, d2.loss_cls: 0.7663, d2.loss_bbox: 1.1399, d3.loss_cls: 0.7621, d3.loss_bbox: 1.1211, d4.loss_cls: 0.7580, d4.loss_bbox: 1.1127, aux_task0.loss_heatmap: 1.0237, aux_task0.loss_bbox: 0.3463, aux_task1.loss_heatmap: 1.3084, aux_task1.loss_bbox: 0.3920, aux_task2.loss_heatmap: 1.4932, aux_task2.loss_bbox: 0.4237, aux_task3.loss_heatmap: 1.0933, aux_task3.loss_bbox: 0.3288, aux_task4.loss_heatmap: 0.8029, aux_task4.loss_bbox: 0.3372, aux_task5.loss_heatmap: 0.7974, aux_task5.loss_bbox: 0.3396, loss: 20.3284, grad_norm: 33.8420
2025-04-23 13:49:01,786 - mmdet - INFO - Epoch [2][550/1104]	lr: 4.389e-05, eta: 5:41:03, time: 0.988, data_time: 0.009, memory: 15405, loss_cls: 0.7699, loss_bbox: 1.1120, d0.loss_cls: 0.8162, d0.loss_bbox: 1.3404, d1.loss_cls: 0.7845, d1.loss_bbox: 1.1974, d2.loss_cls: 0.7701, d2.loss_bbox: 1.1531, d3.loss_cls: 0.7679, d3.loss_bbox: 1.1306, d4.loss_cls: 0.7670, d4.loss_bbox: 1.1184, aux_task0.loss_heatmap: 1.0300, aux_task0.loss_bbox: 0.3479, aux_task1.loss_heatmap: 1.2611, aux_task1.loss_bbox: 0.3900, aux_task2.loss_heatmap: 1.5241, aux_task2.loss_bbox: 0.4315, aux_task3.loss_heatmap: 1.0113, aux_task3.loss_bbox: 0.3250, aux_task4.loss_heatmap: 0.7866, aux_task4.loss_bbox: 0.3426, aux_task5.loss_heatmap: 0.8123, aux_task5.loss_bbox: 0.3376, loss: 20.3276, grad_norm: 36.9752
2025-04-23 13:49:51,519 - mmdet - INFO - Epoch [2][600/1104]	lr: 4.502e-05, eta: 5:40:08, time: 0.995, data_time: 0.008, memory: 15405, loss_cls: 0.7541, loss_bbox: 1.1004, d0.loss_cls: 0.8004, d0.loss_bbox: 1.3251, d1.loss_cls: 0.7663, d1.loss_bbox: 1.1782, d2.loss_cls: 0.7542, d2.loss_bbox: 1.1339, d3.loss_cls: 0.7515, d3.loss_bbox: 1.1142, d4.loss_cls: 0.7513, d4.loss_bbox: 1.1049, aux_task0.loss_heatmap: 1.0103, aux_task0.loss_bbox: 0.3433, aux_task1.loss_heatmap: 1.2877, aux_task1.loss_bbox: 0.3905, aux_task2.loss_heatmap: 1.4973, aux_task2.loss_bbox: 0.4311, aux_task3.loss_heatmap: 1.0315, aux_task3.loss_bbox: 0.3228, aux_task4.loss_heatmap: 0.7661, aux_task4.loss_bbox: 0.3378, aux_task5.loss_heatmap: 0.7798, aux_task5.loss_bbox: 0.3393, loss: 20.0719, grad_norm: 32.5817
2025-04-23 13:50:41,312 - mmdet - INFO - Epoch [2][650/1104]	lr: 4.617e-05, eta: 5:39:15, time: 0.996, data_time: 0.008, memory: 15405, loss_cls: 0.7566, loss_bbox: 1.0934, d0.loss_cls: 0.8023, d0.loss_bbox: 1.3041, d1.loss_cls: 0.7725, d1.loss_bbox: 1.1709, d2.loss_cls: 0.7585, d2.loss_bbox: 1.1274, d3.loss_cls: 0.7552, d3.loss_bbox: 1.1081, d4.loss_cls: 0.7537, d4.loss_bbox: 1.0980, aux_task0.loss_heatmap: 0.9907, aux_task0.loss_bbox: 0.3343, aux_task1.loss_heatmap: 1.2283, aux_task1.loss_bbox: 0.3879, aux_task2.loss_heatmap: 1.5141, aux_task2.loss_bbox: 0.4282, aux_task3.loss_heatmap: 1.0615, aux_task3.loss_bbox: 0.3280, aux_task4.loss_heatmap: 0.8090, aux_task4.loss_bbox: 0.3387, aux_task5.loss_heatmap: 0.7635, aux_task5.loss_bbox: 0.3364, loss: 20.0213, grad_norm: 33.1569
2025-04-23 13:51:31,097 - mmdet - INFO - Epoch [2][700/1104]	lr: 4.735e-05, eta: 5:38:21, time: 0.996, data_time: 0.009, memory: 15405, loss_cls: 0.7410, loss_bbox: 1.0862, d0.loss_cls: 0.7934, d0.loss_bbox: 1.3046, d1.loss_cls: 0.7605, d1.loss_bbox: 1.1647, d2.loss_cls: 0.7453, d2.loss_bbox: 1.1203, d3.loss_cls: 0.7417, d3.loss_bbox: 1.1006, d4.loss_cls: 0.7388, d4.loss_bbox: 1.0920, aux_task0.loss_heatmap: 1.0279, aux_task0.loss_bbox: 0.3402, aux_task1.loss_heatmap: 1.2468, aux_task1.loss_bbox: 0.3912, aux_task2.loss_heatmap: 1.5006, aux_task2.loss_bbox: 0.4274, aux_task3.loss_heatmap: 0.9829, aux_task3.loss_bbox: 0.3239, aux_task4.loss_heatmap: 0.7704, aux_task4.loss_bbox: 0.3378, aux_task5.loss_heatmap: 0.7420, aux_task5.loss_bbox: 0.3318, loss: 19.8117, grad_norm: 32.9675
2025-04-23 13:52:20,547 - mmdet - INFO - Epoch [2][750/1104]	lr: 4.857e-05, eta: 5:37:25, time: 0.989, data_time: 0.008, memory: 15405, loss_cls: 0.7419, loss_bbox: 1.0918, d0.loss_cls: 0.7928, d0.loss_bbox: 1.2989, d1.loss_cls: 0.7580, d1.loss_bbox: 1.1580, d2.loss_cls: 0.7454, d2.loss_bbox: 1.1200, d3.loss_cls: 0.7415, d3.loss_bbox: 1.1035, d4.loss_cls: 0.7404, d4.loss_bbox: 1.0932, aux_task0.loss_heatmap: 0.9991, aux_task0.loss_bbox: 0.3435, aux_task1.loss_heatmap: 1.2506, aux_task1.loss_bbox: 0.3889, aux_task2.loss_heatmap: 1.4728, aux_task2.loss_bbox: 0.4219, aux_task3.loss_heatmap: 1.0190, aux_task3.loss_bbox: 0.3214, aux_task4.loss_heatmap: 0.7637, aux_task4.loss_bbox: 0.3390, aux_task5.loss_heatmap: 0.7505, aux_task5.loss_bbox: 0.3302, loss: 19.7860, grad_norm: 37.6913
2025-04-23 13:53:09,923 - mmdet - INFO - Epoch [2][800/1104]	lr: 4.980e-05, eta: 5:36:28, time: 0.988, data_time: 0.008, memory: 15405, loss_cls: 0.7311, loss_bbox: 1.0787, d0.loss_cls: 0.7815, d0.loss_bbox: 1.2871, d1.loss_cls: 0.7490, d1.loss_bbox: 1.1548, d2.loss_cls: 0.7359, d2.loss_bbox: 1.1134, d3.loss_cls: 0.7313, d3.loss_bbox: 1.0951, d4.loss_cls: 0.7286, d4.loss_bbox: 1.0816, aux_task0.loss_heatmap: 0.9843, aux_task0.loss_bbox: 0.3374, aux_task1.loss_heatmap: 1.2386, aux_task1.loss_bbox: 0.3866, aux_task2.loss_heatmap: 1.4723, aux_task2.loss_bbox: 0.4205, aux_task3.loss_heatmap: 1.0098, aux_task3.loss_bbox: 0.3255, aux_task4.loss_heatmap: 0.7692, aux_task4.loss_bbox: 0.3323, aux_task5.loss_heatmap: 0.7307, aux_task5.loss_bbox: 0.3302, loss: 19.6056, grad_norm: 35.4950
2025-04-23 13:54:05,994 - mmdet - INFO - Epoch [2][850/1104]	lr: 5.107e-05, eta: 5:36:40, time: 1.121, data_time: 0.008, memory: 15405, loss_cls: 0.7157, loss_bbox: 1.0463, d0.loss_cls: 0.7639, d0.loss_bbox: 1.2657, d1.loss_cls: 0.7314, d1.loss_bbox: 1.1284, d2.loss_cls: 0.7177, d2.loss_bbox: 1.0883, d3.loss_cls: 0.7129, d3.loss_bbox: 1.0696, d4.loss_cls: 0.7136, d4.loss_bbox: 1.0510, aux_task0.loss_heatmap: 0.9511, aux_task0.loss_bbox: 0.3379, aux_task1.loss_heatmap: 1.2462, aux_task1.loss_bbox: 0.3859, aux_task2.loss_heatmap: 1.4641, aux_task2.loss_bbox: 0.4202, aux_task3.loss_heatmap: 0.9714, aux_task3.loss_bbox: 0.3201, aux_task4.loss_heatmap: 0.7562, aux_task4.loss_bbox: 0.3292, aux_task5.loss_heatmap: 0.6970, aux_task5.loss_bbox: 0.3280, loss: 19.2115, grad_norm: 34.8785
2025-04-23 13:54:55,705 - mmdet - INFO - Epoch [2][900/1104]	lr: 5.237e-05, eta: 5:35:45, time: 0.994, data_time: 0.008, memory: 15405, loss_cls: 0.7305, loss_bbox: 1.0682, d0.loss_cls: 0.7791, d0.loss_bbox: 1.2810, d1.loss_cls: 0.7496, d1.loss_bbox: 1.1466, d2.loss_cls: 0.7378, d2.loss_bbox: 1.1078, d3.loss_cls: 0.7323, d3.loss_bbox: 1.0885, d4.loss_cls: 0.7294, d4.loss_bbox: 1.0737, aux_task0.loss_heatmap: 0.9717, aux_task0.loss_bbox: 0.3314, aux_task1.loss_heatmap: 1.2721, aux_task1.loss_bbox: 0.3850, aux_task2.loss_heatmap: 1.4693, aux_task2.loss_bbox: 0.4228, aux_task3.loss_heatmap: 0.9668, aux_task3.loss_bbox: 0.3245, aux_task4.loss_heatmap: 0.7764, aux_task4.loss_bbox: 0.3278, aux_task5.loss_heatmap: 0.7325, aux_task5.loss_bbox: 0.3270, loss: 19.5316, grad_norm: 37.8844
2025-04-23 13:55:45,622 - mmdet - INFO - Epoch [2][950/1104]	lr: 5.369e-05, eta: 5:34:52, time: 0.998, data_time: 0.007, memory: 15405, loss_cls: 0.7186, loss_bbox: 1.0645, d0.loss_cls: 0.7675, d0.loss_bbox: 1.2745, d1.loss_cls: 0.7353, d1.loss_bbox: 1.1438, d2.loss_cls: 0.7248, d2.loss_bbox: 1.1024, d3.loss_cls: 0.7190, d3.loss_bbox: 1.0811, d4.loss_cls: 0.7170, d4.loss_bbox: 1.0677, aux_task0.loss_heatmap: 0.9918, aux_task0.loss_bbox: 0.3411, aux_task1.loss_heatmap: 1.2587, aux_task1.loss_bbox: 0.3865, aux_task2.loss_heatmap: 1.4719, aux_task2.loss_bbox: 0.4190, aux_task3.loss_heatmap: 0.9381, aux_task3.loss_bbox: 0.3175, aux_task4.loss_heatmap: 0.7317, aux_task4.loss_bbox: 0.3303, aux_task5.loss_heatmap: 0.7290, aux_task5.loss_bbox: 0.3277, loss: 19.3595, grad_norm: 34.1527
2025-04-23 13:56:34,762 - mmdet - INFO - Epoch [2][1000/1104]	lr: 5.504e-05, eta: 5:33:52, time: 0.983, data_time: 0.008, memory: 15405, loss_cls: 0.7149, loss_bbox: 1.0573, d0.loss_cls: 0.7695, d0.loss_bbox: 1.2727, d1.loss_cls: 0.7328, d1.loss_bbox: 1.1404, d2.loss_cls: 0.7194, d2.loss_bbox: 1.0967, d3.loss_cls: 0.7160, d3.loss_bbox: 1.0731, d4.loss_cls: 0.7124, d4.loss_bbox: 1.0631, aux_task0.loss_heatmap: 0.9530, aux_task0.loss_bbox: 0.3342, aux_task1.loss_heatmap: 1.2581, aux_task1.loss_bbox: 0.3838, aux_task2.loss_heatmap: 1.4620, aux_task2.loss_bbox: 0.4176, aux_task3.loss_heatmap: 0.9586, aux_task3.loss_bbox: 0.3217, aux_task4.loss_heatmap: 0.7300, aux_task4.loss_bbox: 0.3316, aux_task5.loss_heatmap: 0.7192, aux_task5.loss_bbox: 0.3314, loss: 19.2696, grad_norm: 35.0646
2025-04-23 13:57:24,427 - mmdet - INFO - Epoch [2][1050/1104]	lr: 5.641e-05, eta: 5:32:58, time: 0.993, data_time: 0.008, memory: 15405, loss_cls: 0.7026, loss_bbox: 1.0407, d0.loss_cls: 0.7550, d0.loss_bbox: 1.2618, d1.loss_cls: 0.7206, d1.loss_bbox: 1.1256, d2.loss_cls: 0.7088, d2.loss_bbox: 1.0790, d3.loss_cls: 0.7020, d3.loss_bbox: 1.0576, d4.loss_cls: 0.7012, d4.loss_bbox: 1.0466, aux_task0.loss_heatmap: 0.9507, aux_task0.loss_bbox: 0.3338, aux_task1.loss_heatmap: 1.2260, aux_task1.loss_bbox: 0.3911, aux_task2.loss_heatmap: 1.4470, aux_task2.loss_bbox: 0.4138, aux_task3.loss_heatmap: 0.9173, aux_task3.loss_bbox: 0.3154, aux_task4.loss_heatmap: 0.7461, aux_task4.loss_bbox: 0.3294, aux_task5.loss_heatmap: 0.6834, aux_task5.loss_bbox: 0.3233, loss: 18.9789, grad_norm: 34.9697
2025-04-23 13:58:13,944 - mmdet - INFO - Epoch [2][1100/1104]	lr: 5.781e-05, eta: 5:32:02, time: 0.990, data_time: 0.008, memory: 15405, loss_cls: 0.6889, loss_bbox: 1.0471, d0.loss_cls: 0.7419, d0.loss_bbox: 1.2483, d1.loss_cls: 0.7096, d1.loss_bbox: 1.1173, d2.loss_cls: 0.6971, d2.loss_bbox: 1.0760, d3.loss_cls: 0.6889, d3.loss_bbox: 1.0579, d4.loss_cls: 0.6854, d4.loss_bbox: 1.0528, aux_task0.loss_heatmap: 0.9308, aux_task0.loss_bbox: 0.3290, aux_task1.loss_heatmap: 1.2351, aux_task1.loss_bbox: 0.3878, aux_task2.loss_heatmap: 1.4444, aux_task2.loss_bbox: 0.4267, aux_task3.loss_heatmap: 0.9036, aux_task3.loss_bbox: 0.3192, aux_task4.loss_heatmap: 0.7386, aux_task4.loss_bbox: 0.3352, aux_task5.loss_heatmap: 0.6698, aux_task5.loss_bbox: 0.3212, loss: 18.8527, grad_norm: 36.2738
2025-04-23 13:58:18,461 - mmdet - INFO - Saving checkpoint at 2 epochs
2025-04-23 14:09:43,519 - mmdet - INFO - Exp name: secondmambadss_split14.py
2025-04-23 14:09:43,519 - mmdet - INFO - Epoch(val) [2][3010]	pts_bbox_NuScenes/car_AP_dist_0.5: 0.0474, pts_bbox_NuScenes/car_AP_dist_1.0: 0.1973, pts_bbox_NuScenes/car_AP_dist_2.0: 0.3585, pts_bbox_NuScenes/car_AP_dist_4.0: 0.4713, pts_bbox_NuScenes/car_trans_err: 0.6736, pts_bbox_NuScenes/car_scale_err: 0.2445, pts_bbox_NuScenes/car_orient_err: 1.4652, pts_bbox_NuScenes/car_vel_err: 1.3981, pts_bbox_NuScenes/car_attr_err: 0.4358, pts_bbox_NuScenes/mATE: 0.7773, pts_bbox_NuScenes/mASE: 0.3729, pts_bbox_NuScenes/mAOE: 1.4438, pts_bbox_NuScenes/mAVE: 1.3194, pts_bbox_NuScenes/mAAE: 0.4747, pts_bbox_NuScenes/truck_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/truck_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/truck_AP_dist_2.0: 0.0134, pts_bbox_NuScenes/truck_AP_dist_4.0: 0.0410, pts_bbox_NuScenes/truck_trans_err: 0.9844, pts_bbox_NuScenes/truck_scale_err: 0.3216, pts_bbox_NuScenes/truck_orient_err: 1.5397, pts_bbox_NuScenes/truck_vel_err: 1.1785, pts_bbox_NuScenes/truck_attr_err: 0.3944, pts_bbox_NuScenes/construction_vehicle_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/construction_vehicle_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/construction_vehicle_AP_dist_2.0: 0.0000, pts_bbox_NuScenes/construction_vehicle_AP_dist_4.0: 0.0000, pts_bbox_NuScenes/construction_vehicle_trans_err: 0.8856, pts_bbox_NuScenes/construction_vehicle_scale_err: 0.5707, pts_bbox_NuScenes/construction_vehicle_orient_err: 1.6431, pts_bbox_NuScenes/construction_vehicle_vel_err: 0.1377, pts_bbox_NuScenes/construction_vehicle_attr_err: 0.3457, pts_bbox_NuScenes/bus_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/bus_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/bus_AP_dist_2.0: 0.0023, pts_bbox_NuScenes/bus_AP_dist_4.0: 0.0260, pts_bbox_NuScenes/bus_trans_err: 1.1648, pts_bbox_NuScenes/bus_scale_err: 0.3019, pts_bbox_NuScenes/bus_orient_err: 1.5681, pts_bbox_NuScenes/bus_vel_err: 3.5817, pts_bbox_NuScenes/bus_attr_err: 0.7570, pts_bbox_NuScenes/trailer_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/trailer_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/trailer_AP_dist_2.0: 0.0000, pts_bbox_NuScenes/trailer_AP_dist_4.0: 0.0000, pts_bbox_NuScenes/trailer_trans_err: 1.2184, pts_bbox_NuScenes/trailer_scale_err: 0.3497, pts_bbox_NuScenes/trailer_orient_err: 1.4523, pts_bbox_NuScenes/trailer_vel_err: 0.7437, pts_bbox_NuScenes/trailer_attr_err: 0.3209, pts_bbox_NuScenes/barrier_AP_dist_0.5: 0.0091, pts_bbox_NuScenes/barrier_AP_dist_1.0: 0.0941, pts_bbox_NuScenes/barrier_AP_dist_2.0: 0.1925, pts_bbox_NuScenes/barrier_AP_dist_4.0: 0.2684, pts_bbox_NuScenes/barrier_trans_err: 0.8879, pts_bbox_NuScenes/barrier_scale_err: 0.3944, pts_bbox_NuScenes/barrier_orient_err: 0.6779, pts_bbox_NuScenes/barrier_vel_err: nan, pts_bbox_NuScenes/barrier_attr_err: nan, pts_bbox_NuScenes/motorcycle_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/motorcycle_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/motorcycle_AP_dist_2.0: 0.0004, pts_bbox_NuScenes/motorcycle_AP_dist_4.0: 0.0005, pts_bbox_NuScenes/motorcycle_trans_err: 0.4203, pts_bbox_NuScenes/motorcycle_scale_err: 0.3222, pts_bbox_NuScenes/motorcycle_orient_err: 1.7001, pts_bbox_NuScenes/motorcycle_vel_err: 2.0051, pts_bbox_NuScenes/motorcycle_attr_err: 0.5794, pts_bbox_NuScenes/bicycle_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/bicycle_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/bicycle_AP_dist_2.0: 0.0000, pts_bbox_NuScenes/bicycle_AP_dist_4.0: 0.0000, pts_bbox_NuScenes/bicycle_trans_err: 0.5399, pts_bbox_NuScenes/bicycle_scale_err: 0.3942, pts_bbox_NuScenes/bicycle_orient_err: 1.5579, pts_bbox_NuScenes/bicycle_vel_err: 0.5521, pts_bbox_NuScenes/bicycle_attr_err: 0.1496, pts_bbox_NuScenes/pedestrian_AP_dist_0.5: 0.1156, pts_bbox_NuScenes/pedestrian_AP_dist_1.0: 0.3120, pts_bbox_NuScenes/pedestrian_AP_dist_2.0: 0.3690, pts_bbox_NuScenes/pedestrian_AP_dist_4.0: 0.4120, pts_bbox_NuScenes/pedestrian_trans_err: 0.5292, pts_bbox_NuScenes/pedestrian_scale_err: 0.3190, pts_bbox_NuScenes/pedestrian_orient_err: 1.3894, pts_bbox_NuScenes/pedestrian_vel_err: 0.9587, pts_bbox_NuScenes/pedestrian_attr_err: 0.8153, pts_bbox_NuScenes/traffic_cone_AP_dist_0.5: 0.0369, pts_bbox_NuScenes/traffic_cone_AP_dist_1.0: 0.0588, pts_bbox_NuScenes/traffic_cone_AP_dist_2.0: 0.0832, pts_bbox_NuScenes/traffic_cone_AP_dist_4.0: 0.1383, pts_bbox_NuScenes/traffic_cone_trans_err: 0.4689, pts_bbox_NuScenes/traffic_cone_scale_err: 0.5107, pts_bbox_NuScenes/traffic_cone_orient_err: nan, pts_bbox_NuScenes/traffic_cone_vel_err: nan, pts_bbox_NuScenes/traffic_cone_attr_err: nan, pts_bbox_NuScenes/NDS: 0.1781, pts_bbox_NuScenes/mAP: 0.0812
2025-04-23 14:10:38,002 - mmdet - INFO - Epoch [3][50/1104]	lr: 5.935e-05, eta: 5:31:04, time: 1.074, data_time: 0.088, memory: 15405, loss_cls: 0.6961, loss_bbox: 1.0290, d0.loss_cls: 0.7481, d0.loss_bbox: 1.2397, d1.loss_cls: 0.7150, d1.loss_bbox: 1.1057, d2.loss_cls: 0.7055, d2.loss_bbox: 1.0623, d3.loss_cls: 0.6993, d3.loss_bbox: 1.0434, d4.loss_cls: 0.6955, d4.loss_bbox: 1.0349, aux_task0.loss_heatmap: 0.9570, aux_task0.loss_bbox: 0.3310, aux_task1.loss_heatmap: 1.2157, aux_task1.loss_bbox: 0.3781, aux_task2.loss_heatmap: 1.4496, aux_task2.loss_bbox: 0.4167, aux_task3.loss_heatmap: 0.9183, aux_task3.loss_bbox: 0.3195, aux_task4.loss_heatmap: 0.7321, aux_task4.loss_bbox: 0.3299, aux_task5.loss_heatmap: 0.6786, aux_task5.loss_bbox: 0.3244, loss: 18.8252, grad_norm: 34.4620
2025-04-23 14:11:27,342 - mmdet - INFO - Epoch [3][100/1104]	lr: 6.080e-05, eta: 5:30:08, time: 0.987, data_time: 0.008, memory: 15405, loss_cls: 0.6887, loss_bbox: 1.0292, d0.loss_cls: 0.7433, d0.loss_bbox: 1.2400, d1.loss_cls: 0.7093, d1.loss_bbox: 1.1091, d2.loss_cls: 0.6987, d2.loss_bbox: 1.0652, d3.loss_cls: 0.6896, d3.loss_bbox: 1.0452, d4.loss_cls: 0.6870, d4.loss_bbox: 1.0365, aux_task0.loss_heatmap: 0.9392, aux_task0.loss_bbox: 0.3340, aux_task1.loss_heatmap: 1.2367, aux_task1.loss_bbox: 0.3836, aux_task2.loss_heatmap: 1.4340, aux_task2.loss_bbox: 0.4113, aux_task3.loss_heatmap: 0.8981, aux_task3.loss_bbox: 0.3239, aux_task4.loss_heatmap: 0.7108, aux_task4.loss_bbox: 0.3341, aux_task5.loss_heatmap: 0.6633, aux_task5.loss_bbox: 0.3190, loss: 18.7298, grad_norm: 32.7878
2025-04-23 14:12:16,654 - mmdet - INFO - Epoch [3][150/1104]	lr: 6.228e-05, eta: 5:29:11, time: 0.986, data_time: 0.008, memory: 15405, loss_cls: 0.6780, loss_bbox: 1.0138, d0.loss_cls: 0.7280, d0.loss_bbox: 1.2096, d1.loss_cls: 0.7004, d1.loss_bbox: 1.0828, d2.loss_cls: 0.6883, d2.loss_bbox: 1.0437, d3.loss_cls: 0.6818, d3.loss_bbox: 1.0253, d4.loss_cls: 0.6777, d4.loss_bbox: 1.0186, aux_task0.loss_heatmap: 0.9135, aux_task0.loss_bbox: 0.3309, aux_task1.loss_heatmap: 1.1951, aux_task1.loss_bbox: 0.3802, aux_task2.loss_heatmap: 1.4260, aux_task2.loss_bbox: 0.4136, aux_task3.loss_heatmap: 0.8798, aux_task3.loss_bbox: 0.3230, aux_task4.loss_heatmap: 0.6976, aux_task4.loss_bbox: 0.3266, aux_task5.loss_heatmap: 0.6423, aux_task5.loss_bbox: 0.3220, loss: 18.3987, grad_norm: 34.3750
2025-04-23 14:13:06,200 - mmdet - INFO - Epoch [3][200/1104]	lr: 6.378e-05, eta: 5:28:17, time: 0.991, data_time: 0.008, memory: 15405, loss_cls: 0.6876, loss_bbox: 1.0325, d0.loss_cls: 0.7384, d0.loss_bbox: 1.2351, d1.loss_cls: 0.7084, d1.loss_bbox: 1.1022, d2.loss_cls: 0.6948, d2.loss_bbox: 1.0642, d3.loss_cls: 0.6886, d3.loss_bbox: 1.0453, d4.loss_cls: 0.6854, d4.loss_bbox: 1.0384, aux_task0.loss_heatmap: 0.9296, aux_task0.loss_bbox: 0.3387, aux_task1.loss_heatmap: 1.1917, aux_task1.loss_bbox: 0.3825, aux_task2.loss_heatmap: 1.4051, aux_task2.loss_bbox: 0.4154, aux_task3.loss_heatmap: 0.9367, aux_task3.loss_bbox: 0.3175, aux_task4.loss_heatmap: 0.7006, aux_task4.loss_bbox: 0.3282, aux_task5.loss_heatmap: 0.6643, aux_task5.loss_bbox: 0.3265, loss: 18.6577, grad_norm: 36.4277
2025-04-23 14:13:55,771 - mmdet - INFO - Epoch [3][250/1104]	lr: 6.530e-05, eta: 5:27:23, time: 0.991, data_time: 0.008, memory: 15405, loss_cls: 0.6799, loss_bbox: 1.0176, d0.loss_cls: 0.7338, d0.loss_bbox: 1.2214, d1.loss_cls: 0.7038, d1.loss_bbox: 1.0862, d2.loss_cls: 0.6912, d2.loss_bbox: 1.0475, d3.loss_cls: 0.6839, d3.loss_bbox: 1.0299, d4.loss_cls: 0.6781, d4.loss_bbox: 1.0240, aux_task0.loss_heatmap: 0.9332, aux_task0.loss_bbox: 0.3318, aux_task1.loss_heatmap: 1.1842, aux_task1.loss_bbox: 0.3855, aux_task2.loss_heatmap: 1.4189, aux_task2.loss_bbox: 0.4160, aux_task3.loss_heatmap: 0.8925, aux_task3.loss_bbox: 0.3153, aux_task4.loss_heatmap: 0.7267, aux_task4.loss_bbox: 0.3308, aux_task5.loss_heatmap: 0.6639, aux_task5.loss_bbox: 0.3214, loss: 18.5178, grad_norm: 34.5686
2025-04-23 14:14:45,390 - mmdet - INFO - Epoch [3][300/1104]	lr: 6.684e-05, eta: 5:26:29, time: 0.992, data_time: 0.008, memory: 15405, loss_cls: 0.6766, loss_bbox: 1.0117, d0.loss_cls: 0.7297, d0.loss_bbox: 1.2091, d1.loss_cls: 0.7007, d1.loss_bbox: 1.0780, d2.loss_cls: 0.6878, d2.loss_bbox: 1.0412, d3.loss_cls: 0.6804, d3.loss_bbox: 1.0238, d4.loss_cls: 0.6766, d4.loss_bbox: 1.0160, aux_task0.loss_heatmap: 0.8823, aux_task0.loss_bbox: 0.3249, aux_task1.loss_heatmap: 1.2112, aux_task1.loss_bbox: 0.3813, aux_task2.loss_heatmap: 1.4074, aux_task2.loss_bbox: 0.4168, aux_task3.loss_heatmap: 0.9304, aux_task3.loss_bbox: 0.3140, aux_task4.loss_heatmap: 0.7101, aux_task4.loss_bbox: 0.3199, aux_task5.loss_heatmap: 0.6558, aux_task5.loss_bbox: 0.3183, loss: 18.4041, grad_norm: 34.0521
2025-04-23 14:15:34,587 - mmdet - INFO - Epoch [3][350/1104]	lr: 6.841e-05, eta: 5:25:33, time: 0.984, data_time: 0.007, memory: 15405, loss_cls: 0.6826, loss_bbox: 1.0143, d0.loss_cls: 0.7322, d0.loss_bbox: 1.2087, d1.loss_cls: 0.7056, d1.loss_bbox: 1.0766, d2.loss_cls: 0.6930, d2.loss_bbox: 1.0440, d3.loss_cls: 0.6875, d3.loss_bbox: 1.0247, d4.loss_cls: 0.6829, d4.loss_bbox: 1.0189, aux_task0.loss_heatmap: 0.9069, aux_task0.loss_bbox: 0.3262, aux_task1.loss_heatmap: 1.1934, aux_task1.loss_bbox: 0.3825, aux_task2.loss_heatmap: 1.4352, aux_task2.loss_bbox: 0.4196, aux_task3.loss_heatmap: 0.9026, aux_task3.loss_bbox: 0.3140, aux_task4.loss_heatmap: 0.7084, aux_task4.loss_bbox: 0.3311, aux_task5.loss_heatmap: 0.6391, aux_task5.loss_bbox: 0.3136, loss: 18.4438, grad_norm: 32.3556
2025-04-23 14:16:24,089 - mmdet - INFO - Epoch [3][400/1104]	lr: 7.000e-05, eta: 5:24:39, time: 0.990, data_time: 0.009, memory: 15405, loss_cls: 0.6664, loss_bbox: 1.0095, d0.loss_cls: 0.7172, d0.loss_bbox: 1.2031, d1.loss_cls: 0.6894, d1.loss_bbox: 1.0720, d2.loss_cls: 0.6795, d2.loss_bbox: 1.0377, d3.loss_cls: 0.6729, d3.loss_bbox: 1.0193, d4.loss_cls: 0.6676, d4.loss_bbox: 1.0143, aux_task0.loss_heatmap: 0.8843, aux_task0.loss_bbox: 0.3257, aux_task1.loss_heatmap: 1.1716, aux_task1.loss_bbox: 0.3761, aux_task2.loss_heatmap: 1.4252, aux_task2.loss_bbox: 0.4012, aux_task3.loss_heatmap: 0.8642, aux_task3.loss_bbox: 0.3164, aux_task4.loss_heatmap: 0.6770, aux_task4.loss_bbox: 0.3262, aux_task5.loss_heatmap: 0.6619, aux_task5.loss_bbox: 0.3141, loss: 18.1927, grad_norm: 36.6394
2025-04-23 14:17:13,490 - mmdet - INFO - Epoch [3][450/1104]	lr: 7.161e-05, eta: 5:23:44, time: 0.988, data_time: 0.008, memory: 15405, loss_cls: 0.6619, loss_bbox: 0.9968, d0.loss_cls: 0.7176, d0.loss_bbox: 1.1869, d1.loss_cls: 0.6903, d1.loss_bbox: 1.0606, d2.loss_cls: 0.6781, d2.loss_bbox: 1.0282, d3.loss_cls: 0.6684, d3.loss_bbox: 1.0093, d4.loss_cls: 0.6627, d4.loss_bbox: 1.0019, aux_task0.loss_heatmap: 0.8945, aux_task0.loss_bbox: 0.3263, aux_task1.loss_heatmap: 1.1758, aux_task1.loss_bbox: 0.3771, aux_task2.loss_heatmap: 1.4138, aux_task2.loss_bbox: 0.4140, aux_task3.loss_heatmap: 0.8833, aux_task3.loss_bbox: 0.3050, aux_task4.loss_heatmap: 0.7207, aux_task4.loss_bbox: 0.3275, aux_task5.loss_heatmap: 0.6474, aux_task5.loss_bbox: 0.3204, loss: 18.1687, grad_norm: 32.7974
2025-04-23 14:18:03,213 - mmdet - INFO - Epoch [3][500/1104]	lr: 7.325e-05, eta: 5:22:52, time: 0.994, data_time: 0.008, memory: 15405, loss_cls: 0.6627, loss_bbox: 0.9950, d0.loss_cls: 0.7125, d0.loss_bbox: 1.1872, d1.loss_cls: 0.6871, d1.loss_bbox: 1.0568, d2.loss_cls: 0.6762, d2.loss_bbox: 1.0238, d3.loss_cls: 0.6689, d3.loss_bbox: 1.0057, d4.loss_cls: 0.6608, d4.loss_bbox: 0.9998, aux_task0.loss_heatmap: 0.9129, aux_task0.loss_bbox: 0.3242, aux_task1.loss_heatmap: 1.1748, aux_task1.loss_bbox: 0.3744, aux_task2.loss_heatmap: 1.3728, aux_task2.loss_bbox: 0.4027, aux_task3.loss_heatmap: 0.8591, aux_task3.loss_bbox: 0.3125, aux_task4.loss_heatmap: 0.6805, aux_task4.loss_bbox: 0.3226, aux_task5.loss_heatmap: 0.6305, aux_task5.loss_bbox: 0.3219, loss: 18.0255, grad_norm: 34.6738
2025-04-23 14:18:52,870 - mmdet - INFO - Epoch [3][550/1104]	lr: 7.490e-05, eta: 5:22:00, time: 0.993, data_time: 0.008, memory: 15405, loss_cls: 0.6481, loss_bbox: 0.9916, d0.loss_cls: 0.7031, d0.loss_bbox: 1.1837, d1.loss_cls: 0.6755, d1.loss_bbox: 1.0564, d2.loss_cls: 0.6631, d2.loss_bbox: 1.0221, d3.loss_cls: 0.6525, d3.loss_bbox: 1.0037, d4.loss_cls: 0.6462, d4.loss_bbox: 0.9991, aux_task0.loss_heatmap: 0.9024, aux_task0.loss_bbox: 0.3294, aux_task1.loss_heatmap: 1.1389, aux_task1.loss_bbox: 0.3769, aux_task2.loss_heatmap: 1.4296, aux_task2.loss_bbox: 0.4080, aux_task3.loss_heatmap: 0.8183, aux_task3.loss_bbox: 0.3128, aux_task4.loss_heatmap: 0.6774, aux_task4.loss_bbox: 0.3280, aux_task5.loss_heatmap: 0.6016, aux_task5.loss_bbox: 0.3154, loss: 17.8838, grad_norm: 35.0104
2025-04-23 14:19:42,285 - mmdet - INFO - Epoch [3][600/1104]	lr: 7.657e-05, eta: 5:21:06, time: 0.988, data_time: 0.009, memory: 15405, loss_cls: 0.6450, loss_bbox: 0.9936, d0.loss_cls: 0.7073, d0.loss_bbox: 1.1711, d1.loss_cls: 0.6780, d1.loss_bbox: 1.0514, d2.loss_cls: 0.6637, d2.loss_bbox: 1.0176, d3.loss_cls: 0.6540, d3.loss_bbox: 1.0013, d4.loss_cls: 0.6468, d4.loss_bbox: 0.9965, aux_task0.loss_heatmap: 0.8714, aux_task0.loss_bbox: 0.3193, aux_task1.loss_heatmap: 1.1646, aux_task1.loss_bbox: 0.3770, aux_task2.loss_heatmap: 1.3962, aux_task2.loss_bbox: 0.4106, aux_task3.loss_heatmap: 0.9010, aux_task3.loss_bbox: 0.3127, aux_task4.loss_heatmap: 0.6548, aux_task4.loss_bbox: 0.3214, aux_task5.loss_heatmap: 0.6351, aux_task5.loss_bbox: 0.3166, loss: 17.9071, grad_norm: 32.0458
2025-04-23 14:20:31,631 - mmdet - INFO - Epoch [3][650/1104]	lr: 7.826e-05, eta: 5:20:11, time: 0.987, data_time: 0.008, memory: 15405, loss_cls: 0.6567, loss_bbox: 1.0054, d0.loss_cls: 0.7121, d0.loss_bbox: 1.1817, d1.loss_cls: 0.6868, d1.loss_bbox: 1.0590, d2.loss_cls: 0.6751, d2.loss_bbox: 1.0275, d3.loss_cls: 0.6645, d3.loss_bbox: 1.0136, d4.loss_cls: 0.6570, d4.loss_bbox: 1.0089, aux_task0.loss_heatmap: 0.8697, aux_task0.loss_bbox: 0.3271, aux_task1.loss_heatmap: 1.1212, aux_task1.loss_bbox: 0.3717, aux_task2.loss_heatmap: 1.4203, aux_task2.loss_bbox: 0.4135, aux_task3.loss_heatmap: 0.9349, aux_task3.loss_bbox: 0.3083, aux_task4.loss_heatmap: 0.7162, aux_task4.loss_bbox: 0.3251, aux_task5.loss_heatmap: 0.6343, aux_task5.loss_bbox: 0.3160, loss: 18.1065, grad_norm: 35.9930
2025-04-23 14:21:21,508 - mmdet - INFO - Epoch [3][700/1104]	lr: 7.997e-05, eta: 5:19:21, time: 0.998, data_time: 0.009, memory: 15405, loss_cls: 0.6466, loss_bbox: 0.9833, d0.loss_cls: 0.7032, d0.loss_bbox: 1.1610, d1.loss_cls: 0.6785, d1.loss_bbox: 1.0415, d2.loss_cls: 0.6634, d2.loss_bbox: 1.0098, d3.loss_cls: 0.6562, d3.loss_bbox: 0.9917, d4.loss_cls: 0.6471, d4.loss_bbox: 0.9876, aux_task0.loss_heatmap: 0.8823, aux_task0.loss_bbox: 0.3262, aux_task1.loss_heatmap: 1.1383, aux_task1.loss_bbox: 0.3755, aux_task2.loss_heatmap: 1.3723, aux_task2.loss_bbox: 0.4052, aux_task3.loss_heatmap: 0.8703, aux_task3.loss_bbox: 0.3130, aux_task4.loss_heatmap: 0.6572, aux_task4.loss_bbox: 0.3226, aux_task5.loss_heatmap: 0.6337, aux_task5.loss_bbox: 0.3137, loss: 17.7802, grad_norm: 34.4820
2025-04-23 14:22:11,110 - mmdet - INFO - Epoch [3][750/1104]	lr: 8.170e-05, eta: 5:18:28, time: 0.992, data_time: 0.008, memory: 15405, loss_cls: 0.6384, loss_bbox: 0.9838, d0.loss_cls: 0.6970, d0.loss_bbox: 1.1545, d1.loss_cls: 0.6712, d1.loss_bbox: 1.0383, d2.loss_cls: 0.6564, d2.loss_bbox: 1.0066, d3.loss_cls: 0.6450, d3.loss_bbox: 0.9912, d4.loss_cls: 0.6390, d4.loss_bbox: 0.9869, aux_task0.loss_heatmap: 0.8674, aux_task0.loss_bbox: 0.3213, aux_task1.loss_heatmap: 1.1348, aux_task1.loss_bbox: 0.3736, aux_task2.loss_heatmap: 1.3790, aux_task2.loss_bbox: 0.4090, aux_task3.loss_heatmap: 0.8671, aux_task3.loss_bbox: 0.3027, aux_task4.loss_heatmap: 0.6661, aux_task4.loss_bbox: 0.3265, aux_task5.loss_heatmap: 0.6406, aux_task5.loss_bbox: 0.3172, loss: 17.7137, grad_norm: 35.1171
2025-04-23 14:23:00,649 - mmdet - INFO - Epoch [3][800/1104]	lr: 8.345e-05, eta: 5:17:36, time: 0.991, data_time: 0.009, memory: 15405, loss_cls: 0.6431, loss_bbox: 0.9756, d0.loss_cls: 0.6991, d0.loss_bbox: 1.1462, d1.loss_cls: 0.6675, d1.loss_bbox: 1.0325, d2.loss_cls: 0.6555, d2.loss_bbox: 1.0003, d3.loss_cls: 0.6496, d3.loss_bbox: 0.9845, d4.loss_cls: 0.6420, d4.loss_bbox: 0.9812, aux_task0.loss_heatmap: 0.8403, aux_task0.loss_bbox: 0.3192, aux_task1.loss_heatmap: 1.1450, aux_task1.loss_bbox: 0.3722, aux_task2.loss_heatmap: 1.3920, aux_task2.loss_bbox: 0.4029, aux_task3.loss_heatmap: 0.8290, aux_task3.loss_bbox: 0.3103, aux_task4.loss_heatmap: 0.6764, aux_task4.loss_bbox: 0.3179, aux_task5.loss_heatmap: 0.6227, aux_task5.loss_bbox: 0.3129, loss: 17.6179, grad_norm: 35.4822
2025-04-23 14:23:49,952 - mmdet - INFO - Epoch [3][850/1104]	lr: 8.521e-05, eta: 5:16:42, time: 0.986, data_time: 0.009, memory: 15405, loss_cls: 0.6379, loss_bbox: 0.9741, d0.loss_cls: 0.6873, d0.loss_bbox: 1.1450, d1.loss_cls: 0.6681, d1.loss_bbox: 1.0276, d2.loss_cls: 0.6537, d2.loss_bbox: 0.9970, d3.loss_cls: 0.6465, d3.loss_bbox: 0.9812, d4.loss_cls: 0.6379, d4.loss_bbox: 0.9784, aux_task0.loss_heatmap: 0.8429, aux_task0.loss_bbox: 0.3199, aux_task1.loss_heatmap: 1.1253, aux_task1.loss_bbox: 0.3745, aux_task2.loss_heatmap: 1.3741, aux_task2.loss_bbox: 0.4085, aux_task3.loss_heatmap: 0.8456, aux_task3.loss_bbox: 0.3143, aux_task4.loss_heatmap: 0.6542, aux_task4.loss_bbox: 0.3182, aux_task5.loss_heatmap: 0.6207, aux_task5.loss_bbox: 0.3101, loss: 17.5430, grad_norm: 31.2040
2025-04-23 14:24:39,618 - mmdet - INFO - Epoch [3][900/1104]	lr: 8.699e-05, eta: 5:15:50, time: 0.993, data_time: 0.008, memory: 15405, loss_cls: 0.6475, loss_bbox: 0.9820, d0.loss_cls: 0.6993, d0.loss_bbox: 1.1476, d1.loss_cls: 0.6798, d1.loss_bbox: 1.0353, d2.loss_cls: 0.6676, d2.loss_bbox: 1.0057, d3.loss_cls: 0.6562, d3.loss_bbox: 0.9896, d4.loss_cls: 0.6478, d4.loss_bbox: 0.9867, aux_task0.loss_heatmap: 0.8618, aux_task0.loss_bbox: 0.3197, aux_task1.loss_heatmap: 1.1624, aux_task1.loss_bbox: 0.3688, aux_task2.loss_heatmap: 1.3816, aux_task2.loss_bbox: 0.4132, aux_task3.loss_heatmap: 0.8648, aux_task3.loss_bbox: 0.3114, aux_task4.loss_heatmap: 0.6891, aux_task4.loss_bbox: 0.3154, aux_task5.loss_heatmap: 0.5992, aux_task5.loss_bbox: 0.3119, loss: 17.7445, grad_norm: 32.6168
2025-04-23 14:25:28,921 - mmdet - INFO - Epoch [3][950/1104]	lr: 8.879e-05, eta: 5:14:56, time: 0.986, data_time: 0.008, memory: 15405, loss_cls: 0.6356, loss_bbox: 0.9747, d0.loss_cls: 0.6836, d0.loss_bbox: 1.1448, d1.loss_cls: 0.6642, d1.loss_bbox: 1.0290, d2.loss_cls: 0.6515, d2.loss_bbox: 0.9979, d3.loss_cls: 0.6409, d3.loss_bbox: 0.9845, d4.loss_cls: 0.6347, d4.loss_bbox: 0.9790, aux_task0.loss_heatmap: 0.8664, aux_task0.loss_bbox: 0.3181, aux_task1.loss_heatmap: 1.1628, aux_task1.loss_bbox: 0.3759, aux_task2.loss_heatmap: 1.3637, aux_task2.loss_bbox: 0.3992, aux_task3.loss_heatmap: 0.8117, aux_task3.loss_bbox: 0.3101, aux_task4.loss_heatmap: 0.6470, aux_task4.loss_bbox: 0.3175, aux_task5.loss_heatmap: 0.5936, aux_task5.loss_bbox: 0.3118, loss: 17.4982, grad_norm: 36.7285
2025-04-23 14:26:18,487 - mmdet - INFO - Epoch [3][1000/1104]	lr: 9.060e-05, eta: 5:14:04, time: 0.991, data_time: 0.009, memory: 15405, loss_cls: 0.6203, loss_bbox: 0.9641, d0.loss_cls: 0.6736, d0.loss_bbox: 1.1299, d1.loss_cls: 0.6524, d1.loss_bbox: 1.0193, d2.loss_cls: 0.6381, d2.loss_bbox: 0.9884, d3.loss_cls: 0.6286, d3.loss_bbox: 0.9709, d4.loss_cls: 0.6210, d4.loss_bbox: 0.9678, aux_task0.loss_heatmap: 0.8411, aux_task0.loss_bbox: 0.3169, aux_task1.loss_heatmap: 1.1461, aux_task1.loss_bbox: 0.3724, aux_task2.loss_heatmap: 1.3620, aux_task2.loss_bbox: 0.4071, aux_task3.loss_heatmap: 0.7925, aux_task3.loss_bbox: 0.3023, aux_task4.loss_heatmap: 0.6381, aux_task4.loss_bbox: 0.3166, aux_task5.loss_heatmap: 0.5946, aux_task5.loss_bbox: 0.3124, loss: 17.2762, grad_norm: 34.5043
2025-04-23 14:27:08,125 - mmdet - INFO - Epoch [3][1050/1104]	lr: 9.242e-05, eta: 5:13:13, time: 0.993, data_time: 0.009, memory: 15405, loss_cls: 0.6343, loss_bbox: 0.9817, d0.loss_cls: 0.6905, d0.loss_bbox: 1.1509, d1.loss_cls: 0.6714, d1.loss_bbox: 1.0363, d2.loss_cls: 0.6564, d2.loss_bbox: 1.0062, d3.loss_cls: 0.6438, d3.loss_bbox: 0.9920, d4.loss_cls: 0.6355, d4.loss_bbox: 0.9865, aux_task0.loss_heatmap: 0.8617, aux_task0.loss_bbox: 0.3213, aux_task1.loss_heatmap: 1.1464, aux_task1.loss_bbox: 0.3806, aux_task2.loss_heatmap: 1.3524, aux_task2.loss_bbox: 0.3953, aux_task3.loss_heatmap: 0.8572, aux_task3.loss_bbox: 0.3044, aux_task4.loss_heatmap: 0.6594, aux_task4.loss_bbox: 0.3171, aux_task5.loss_heatmap: 0.6040, aux_task5.loss_bbox: 0.3102, loss: 17.5955, grad_norm: 37.3215
2025-04-23 14:27:57,916 - mmdet - INFO - Epoch [3][1100/1104]	lr: 9.426e-05, eta: 5:12:22, time: 0.996, data_time: 0.008, memory: 15405, loss_cls: 0.6124, loss_bbox: 0.9668, d0.loss_cls: 0.6666, d0.loss_bbox: 1.1280, d1.loss_cls: 0.6451, d1.loss_bbox: 1.0224, d2.loss_cls: 0.6294, d2.loss_bbox: 0.9946, d3.loss_cls: 0.6219, d3.loss_bbox: 0.9771, d4.loss_cls: 0.6135, d4.loss_bbox: 0.9732, aux_task0.loss_heatmap: 0.8214, aux_task0.loss_bbox: 0.3140, aux_task1.loss_heatmap: 1.1222, aux_task1.loss_bbox: 0.3712, aux_task2.loss_heatmap: 1.3505, aux_task2.loss_bbox: 0.4053, aux_task3.loss_heatmap: 0.8496, aux_task3.loss_bbox: 0.3084, aux_task4.loss_heatmap: 0.6408, aux_task4.loss_bbox: 0.3220, aux_task5.loss_heatmap: 0.5888, aux_task5.loss_bbox: 0.3060, loss: 17.2513, grad_norm: 32.3061
2025-04-23 14:28:02,213 - mmdet - INFO - Saving checkpoint at 3 epochs
2025-04-23 14:39:07,177 - mmdet - INFO - Exp name: secondmambadss_split14.py
2025-04-23 14:39:07,177 - mmdet - INFO - Epoch(val) [3][3010]	pts_bbox_NuScenes/car_AP_dist_0.5: 0.1045, pts_bbox_NuScenes/car_AP_dist_1.0: 0.3131, pts_bbox_NuScenes/car_AP_dist_2.0: 0.4767, pts_bbox_NuScenes/car_AP_dist_4.0: 0.5751, pts_bbox_NuScenes/car_trans_err: 0.5770, pts_bbox_NuScenes/car_scale_err: 0.1999, pts_bbox_NuScenes/car_orient_err: 1.4835, pts_bbox_NuScenes/car_vel_err: 1.1129, pts_bbox_NuScenes/car_attr_err: 0.4038, pts_bbox_NuScenes/mATE: 0.7372, pts_bbox_NuScenes/mASE: 0.3517, pts_bbox_NuScenes/mAOE: 1.4104, pts_bbox_NuScenes/mAVE: 1.2460, pts_bbox_NuScenes/mAAE: 0.4587, pts_bbox_NuScenes/truck_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/truck_AP_dist_1.0: 0.0085, pts_bbox_NuScenes/truck_AP_dist_2.0: 0.0646, pts_bbox_NuScenes/truck_AP_dist_4.0: 0.1132, pts_bbox_NuScenes/truck_trans_err: 0.9313, pts_bbox_NuScenes/truck_scale_err: 0.3366, pts_bbox_NuScenes/truck_orient_err: 1.4736, pts_bbox_NuScenes/truck_vel_err: 0.9500, pts_bbox_NuScenes/truck_attr_err: 0.3982, pts_bbox_NuScenes/construction_vehicle_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/construction_vehicle_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/construction_vehicle_AP_dist_2.0: 0.0033, pts_bbox_NuScenes/construction_vehicle_AP_dist_4.0: 0.0079, pts_bbox_NuScenes/construction_vehicle_trans_err: 0.9206, pts_bbox_NuScenes/construction_vehicle_scale_err: 0.5377, pts_bbox_NuScenes/construction_vehicle_orient_err: 1.6832, pts_bbox_NuScenes/construction_vehicle_vel_err: 0.1366, pts_bbox_NuScenes/construction_vehicle_attr_err: 0.3718, pts_bbox_NuScenes/bus_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/bus_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/bus_AP_dist_2.0: 0.0213, pts_bbox_NuScenes/bus_AP_dist_4.0: 0.0847, pts_bbox_NuScenes/bus_trans_err: 1.1786, pts_bbox_NuScenes/bus_scale_err: 0.3090, pts_bbox_NuScenes/bus_orient_err: 1.5415, pts_bbox_NuScenes/bus_vel_err: 3.2552, pts_bbox_NuScenes/bus_attr_err: 0.7047, pts_bbox_NuScenes/trailer_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/trailer_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/trailer_AP_dist_2.0: 0.0003, pts_bbox_NuScenes/trailer_AP_dist_4.0: 0.0107, pts_bbox_NuScenes/trailer_trans_err: 1.1454, pts_bbox_NuScenes/trailer_scale_err: 0.3380, pts_bbox_NuScenes/trailer_orient_err: 1.1848, pts_bbox_NuScenes/trailer_vel_err: 0.8227, pts_bbox_NuScenes/trailer_attr_err: 0.2950, pts_bbox_NuScenes/barrier_AP_dist_0.5: 0.0438, pts_bbox_NuScenes/barrier_AP_dist_1.0: 0.1779, pts_bbox_NuScenes/barrier_AP_dist_2.0: 0.2900, pts_bbox_NuScenes/barrier_AP_dist_4.0: 0.3830, pts_bbox_NuScenes/barrier_trans_err: 0.7948, pts_bbox_NuScenes/barrier_scale_err: 0.3711, pts_bbox_NuScenes/barrier_orient_err: 0.7711, pts_bbox_NuScenes/barrier_vel_err: nan, pts_bbox_NuScenes/barrier_attr_err: nan, pts_bbox_NuScenes/motorcycle_AP_dist_0.5: 0.0163, pts_bbox_NuScenes/motorcycle_AP_dist_1.0: 0.0436, pts_bbox_NuScenes/motorcycle_AP_dist_2.0: 0.0612, pts_bbox_NuScenes/motorcycle_AP_dist_4.0: 0.0707, pts_bbox_NuScenes/motorcycle_trans_err: 0.4499, pts_bbox_NuScenes/motorcycle_scale_err: 0.3218, pts_bbox_NuScenes/motorcycle_orient_err: 1.6896, pts_bbox_NuScenes/motorcycle_vel_err: 2.0630, pts_bbox_NuScenes/motorcycle_attr_err: 0.5449, pts_bbox_NuScenes/bicycle_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/bicycle_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/bicycle_AP_dist_2.0: 0.0000, pts_bbox_NuScenes/bicycle_AP_dist_4.0: 0.0000, pts_bbox_NuScenes/bicycle_trans_err: 0.4726, pts_bbox_NuScenes/bicycle_scale_err: 0.3502, pts_bbox_NuScenes/bicycle_orient_err: 1.4999, pts_bbox_NuScenes/bicycle_vel_err: 0.7122, pts_bbox_NuScenes/bicycle_attr_err: 0.1714, pts_bbox_NuScenes/pedestrian_AP_dist_0.5: 0.2301, pts_bbox_NuScenes/pedestrian_AP_dist_1.0: 0.4683, pts_bbox_NuScenes/pedestrian_AP_dist_2.0: 0.5393, pts_bbox_NuScenes/pedestrian_AP_dist_4.0: 0.5830, pts_bbox_NuScenes/pedestrian_trans_err: 0.5010, pts_bbox_NuScenes/pedestrian_scale_err: 0.2943, pts_bbox_NuScenes/pedestrian_orient_err: 1.3664, pts_bbox_NuScenes/pedestrian_vel_err: 0.9154, pts_bbox_NuScenes/pedestrian_attr_err: 0.7800, pts_bbox_NuScenes/traffic_cone_AP_dist_0.5: 0.1214, pts_bbox_NuScenes/traffic_cone_AP_dist_1.0: 0.1534, pts_bbox_NuScenes/traffic_cone_AP_dist_2.0: 0.1833, pts_bbox_NuScenes/traffic_cone_AP_dist_4.0: 0.2489, pts_bbox_NuScenes/traffic_cone_trans_err: 0.4004, pts_bbox_NuScenes/traffic_cone_scale_err: 0.4588, pts_bbox_NuScenes/traffic_cone_orient_err: nan, pts_bbox_NuScenes/traffic_cone_vel_err: nan, pts_bbox_NuScenes/traffic_cone_attr_err: nan, pts_bbox_NuScenes/NDS: 0.2127, pts_bbox_NuScenes/mAP: 0.1350
2025-04-23 14:40:01,858 - mmdet - INFO - Epoch [4][50/1104]	lr: 9.627e-05, eta: 5:11:28, time: 1.079, data_time: 0.088, memory: 15405, loss_cls: 0.6196, loss_bbox: 0.9648, d0.loss_cls: 0.6761, d0.loss_bbox: 1.1247, d1.loss_cls: 0.6531, d1.loss_bbox: 1.0150, d2.loss_cls: 0.6370, d2.loss_bbox: 0.9865, d3.loss_cls: 0.6275, d3.loss_bbox: 0.9716, d4.loss_cls: 0.6200, d4.loss_bbox: 0.9692, aux_task0.loss_heatmap: 0.8325, aux_task0.loss_bbox: 0.3186, aux_task1.loss_heatmap: 1.1197, aux_task1.loss_bbox: 0.3663, aux_task2.loss_heatmap: 1.3740, aux_task2.loss_bbox: 0.4082, aux_task3.loss_heatmap: 0.8240, aux_task3.loss_bbox: 0.2964, aux_task4.loss_heatmap: 0.6558, aux_task4.loss_bbox: 0.3185, aux_task5.loss_heatmap: 0.5713, aux_task5.loss_bbox: 0.3076, loss: 17.2578, grad_norm: 37.2651
2025-04-23 14:40:51,530 - mmdet - INFO - Epoch [4][100/1104]	lr: 9.813e-05, eta: 5:10:37, time: 0.993, data_time: 0.008, memory: 15405, loss_cls: 0.6168, loss_bbox: 0.9629, d0.loss_cls: 0.6702, d0.loss_bbox: 1.1190, d1.loss_cls: 0.6500, d1.loss_bbox: 1.0157, d2.loss_cls: 0.6370, d2.loss_bbox: 0.9838, d3.loss_cls: 0.6265, d3.loss_bbox: 0.9708, d4.loss_cls: 0.6196, d4.loss_bbox: 0.9668, aux_task0.loss_heatmap: 0.8275, aux_task0.loss_bbox: 0.3191, aux_task1.loss_heatmap: 1.1380, aux_task1.loss_bbox: 0.3718, aux_task2.loss_heatmap: 1.3532, aux_task2.loss_bbox: 0.3948, aux_task3.loss_heatmap: 0.8551, aux_task3.loss_bbox: 0.3081, aux_task4.loss_heatmap: 0.6499, aux_task4.loss_bbox: 0.3226, aux_task5.loss_heatmap: 0.5787, aux_task5.loss_bbox: 0.3080, loss: 17.2658, grad_norm: 31.5420
2025-04-23 14:41:40,628 - mmdet - INFO - Epoch [4][150/1104]	lr: 1.000e-04, eta: 5:09:42, time: 0.982, data_time: 0.008, memory: 15405, loss_cls: 0.6113, loss_bbox: 0.9560, d0.loss_cls: 0.6680, d0.loss_bbox: 1.1084, d1.loss_cls: 0.6423, d1.loss_bbox: 1.0040, d2.loss_cls: 0.6284, d2.loss_bbox: 0.9758, d3.loss_cls: 0.6203, d3.loss_bbox: 0.9619, d4.loss_cls: 0.6106, d4.loss_bbox: 0.9597, aux_task0.loss_heatmap: 0.8031, aux_task0.loss_bbox: 0.3120, aux_task1.loss_heatmap: 1.1084, aux_task1.loss_bbox: 0.3734, aux_task2.loss_heatmap: 1.3320, aux_task2.loss_bbox: 0.4019, aux_task3.loss_heatmap: 0.8178, aux_task3.loss_bbox: 0.3117, aux_task4.loss_heatmap: 0.6270, aux_task4.loss_bbox: 0.3158, aux_task5.loss_heatmap: 0.5712, aux_task5.loss_bbox: 0.3083, loss: 17.0295, grad_norm: 34.3324
2025-04-23 14:42:29,595 - mmdet - INFO - Epoch [4][200/1104]	lr: 1.019e-04, eta: 5:08:48, time: 0.979, data_time: 0.008, memory: 15405, loss_cls: 0.6077, loss_bbox: 0.9498, d0.loss_cls: 0.6676, d0.loss_bbox: 1.1060, d1.loss_cls: 0.6447, d1.loss_bbox: 1.0016, d2.loss_cls: 0.6290, d2.loss_bbox: 0.9740, d3.loss_cls: 0.6172, d3.loss_bbox: 0.9614, d4.loss_cls: 0.6094, d4.loss_bbox: 0.9556, aux_task0.loss_heatmap: 0.8328, aux_task0.loss_bbox: 0.3198, aux_task1.loss_heatmap: 1.0945, aux_task1.loss_bbox: 0.3705, aux_task2.loss_heatmap: 1.3231, aux_task2.loss_bbox: 0.3938, aux_task3.loss_heatmap: 0.8248, aux_task3.loss_bbox: 0.3067, aux_task4.loss_heatmap: 0.6166, aux_task4.loss_bbox: 0.3148, aux_task5.loss_heatmap: 0.5972, aux_task5.loss_bbox: 0.3112, loss: 17.0300, grad_norm: 33.7546
2025-04-23 14:43:19,045 - mmdet - INFO - Epoch [4][250/1104]	lr: 1.038e-04, eta: 5:07:55, time: 0.989, data_time: 0.008, memory: 15405, loss_cls: 0.6113, loss_bbox: 0.9527, d0.loss_cls: 0.6693, d0.loss_bbox: 1.1076, d1.loss_cls: 0.6481, d1.loss_bbox: 1.0000, d2.loss_cls: 0.6314, d2.loss_bbox: 0.9736, d3.loss_cls: 0.6203, d3.loss_bbox: 0.9599, d4.loss_cls: 0.6128, d4.loss_bbox: 0.9556, aux_task0.loss_heatmap: 0.8048, aux_task0.loss_bbox: 0.3125, aux_task1.loss_heatmap: 1.1156, aux_task1.loss_bbox: 0.3696, aux_task2.loss_heatmap: 1.3296, aux_task2.loss_bbox: 0.3999, aux_task3.loss_heatmap: 0.8377, aux_task3.loss_bbox: 0.3067, aux_task4.loss_heatmap: 0.6342, aux_task4.loss_bbox: 0.3198, aux_task5.loss_heatmap: 0.6023, aux_task5.loss_bbox: 0.3065, loss: 17.0817, grad_norm: 33.4450
2025-04-23 14:44:08,474 - mmdet - INFO - Epoch [4][300/1104]	lr: 1.057e-04, eta: 5:07:03, time: 0.989, data_time: 0.008, memory: 15405, loss_cls: 0.6010, loss_bbox: 0.9459, d0.loss_cls: 0.6587, d0.loss_bbox: 1.1035, d1.loss_cls: 0.6378, d1.loss_bbox: 0.9965, d2.loss_cls: 0.6224, d2.loss_bbox: 0.9692, d3.loss_cls: 0.6118, d3.loss_bbox: 0.9536, d4.loss_cls: 0.6016, d4.loss_bbox: 0.9492, aux_task0.loss_heatmap: 0.8169, aux_task0.loss_bbox: 0.3144, aux_task1.loss_heatmap: 1.1048, aux_task1.loss_bbox: 0.3672, aux_task2.loss_heatmap: 1.3242, aux_task2.loss_bbox: 0.4076, aux_task3.loss_heatmap: 0.7916, aux_task3.loss_bbox: 0.3053, aux_task4.loss_heatmap: 0.6339, aux_task4.loss_bbox: 0.3081, aux_task5.loss_heatmap: 0.5602, aux_task5.loss_bbox: 0.3101, loss: 16.8955, grad_norm: 37.7640
2025-04-23 14:44:58,025 - mmdet - INFO - Epoch [4][350/1104]	lr: 1.076e-04, eta: 5:06:12, time: 0.991, data_time: 0.008, memory: 15405, loss_cls: 0.6086, loss_bbox: 0.9541, d0.loss_cls: 0.6675, d0.loss_bbox: 1.1047, d1.loss_cls: 0.6449, d1.loss_bbox: 1.0006, d2.loss_cls: 0.6293, d2.loss_bbox: 0.9714, d3.loss_cls: 0.6159, d3.loss_bbox: 0.9601, d4.loss_cls: 0.6066, d4.loss_bbox: 0.9572, aux_task0.loss_heatmap: 0.8171, aux_task0.loss_bbox: 0.3176, aux_task1.loss_heatmap: 1.1218, aux_task1.loss_bbox: 0.3707, aux_task2.loss_heatmap: 1.3483, aux_task2.loss_bbox: 0.4038, aux_task3.loss_heatmap: 0.8097, aux_task3.loss_bbox: 0.3043, aux_task4.loss_heatmap: 0.6582, aux_task4.loss_bbox: 0.3171, aux_task5.loss_heatmap: 0.5699, aux_task5.loss_bbox: 0.3077, loss: 17.0670, grad_norm: 32.8882
2025-04-23 14:45:47,619 - mmdet - INFO - Epoch [4][400/1104]	lr: 1.096e-04, eta: 5:05:20, time: 0.992, data_time: 0.008, memory: 15405, loss_cls: 0.6010, loss_bbox: 0.9460, d0.loss_cls: 0.6649, d0.loss_bbox: 1.0937, d1.loss_cls: 0.6411, d1.loss_bbox: 0.9914, d2.loss_cls: 0.6236, d2.loss_bbox: 0.9691, d3.loss_cls: 0.6101, d3.loss_bbox: 0.9569, d4.loss_cls: 0.5998, d4.loss_bbox: 0.9524, aux_task0.loss_heatmap: 0.8327, aux_task0.loss_bbox: 0.3121, aux_task1.loss_heatmap: 1.0863, aux_task1.loss_bbox: 0.3645, aux_task2.loss_heatmap: 1.3467, aux_task2.loss_bbox: 0.3898, aux_task3.loss_heatmap: 0.7990, aux_task3.loss_bbox: 0.3040, aux_task4.loss_heatmap: 0.6036, aux_task4.loss_bbox: 0.3158, aux_task5.loss_heatmap: 0.5836, aux_task5.loss_bbox: 0.3082, loss: 16.8966, grad_norm: 35.4601
2025-04-23 14:46:37,242 - mmdet - INFO - Epoch [4][450/1104]	lr: 1.115e-04, eta: 5:04:29, time: 0.992, data_time: 0.008, memory: 15405, loss_cls: 0.5924, loss_bbox: 0.9425, d0.loss_cls: 0.6541, d0.loss_bbox: 1.0856, d1.loss_cls: 0.6345, d1.loss_bbox: 0.9866, d2.loss_cls: 0.6169, d2.loss_bbox: 0.9604, d3.loss_cls: 0.6033, d3.loss_bbox: 0.9490, d4.loss_cls: 0.5944, d4.loss_bbox: 0.9453, aux_task0.loss_heatmap: 0.8111, aux_task0.loss_bbox: 0.3102, aux_task1.loss_heatmap: 1.0762, aux_task1.loss_bbox: 0.3663, aux_task2.loss_heatmap: 1.3389, aux_task2.loss_bbox: 0.3947, aux_task3.loss_heatmap: 0.7665, aux_task3.loss_bbox: 0.2970, aux_task4.loss_heatmap: 0.6636, aux_task4.loss_bbox: 0.3158, aux_task5.loss_heatmap: 0.5670, aux_task5.loss_bbox: 0.3078, loss: 16.7802, grad_norm: 33.6203
2025-04-23 14:47:26,373 - mmdet - INFO - Epoch [4][500/1104]	lr: 1.135e-04, eta: 5:03:36, time: 0.983, data_time: 0.008, memory: 15405, loss_cls: 0.5874, loss_bbox: 0.9419, d0.loss_cls: 0.6500, d0.loss_bbox: 1.0906, d1.loss_cls: 0.6294, d1.loss_bbox: 0.9886, d2.loss_cls: 0.6127, d2.loss_bbox: 0.9623, d3.loss_cls: 0.5979, d3.loss_bbox: 0.9492, d4.loss_cls: 0.5880, d4.loss_bbox: 0.9480, aux_task0.loss_heatmap: 0.8003, aux_task0.loss_bbox: 0.3090, aux_task1.loss_heatmap: 1.0910, aux_task1.loss_bbox: 0.3610, aux_task2.loss_heatmap: 1.2891, aux_task2.loss_bbox: 0.3906, aux_task3.loss_heatmap: 0.8052, aux_task3.loss_bbox: 0.3058, aux_task4.loss_heatmap: 0.6197, aux_task4.loss_bbox: 0.3139, aux_task5.loss_heatmap: 0.5618, aux_task5.loss_bbox: 0.3095, loss: 16.7029, grad_norm: 36.9750
2025-04-23 14:48:16,029 - mmdet - INFO - Epoch [4][550/1104]	lr: 1.154e-04, eta: 5:02:45, time: 0.993, data_time: 0.008, memory: 15405, loss_cls: 0.5846, loss_bbox: 0.9344, d0.loss_cls: 0.6447, d0.loss_bbox: 1.0819, d1.loss_cls: 0.6228, d1.loss_bbox: 0.9857, d2.loss_cls: 0.6051, d2.loss_bbox: 0.9596, d3.loss_cls: 0.5935, d3.loss_bbox: 0.9454, d4.loss_cls: 0.5852, d4.loss_bbox: 0.9392, aux_task0.loss_heatmap: 0.7933, aux_task0.loss_bbox: 0.3130, aux_task1.loss_heatmap: 1.0473, aux_task1.loss_bbox: 0.3568, aux_task2.loss_heatmap: 1.3360, aux_task2.loss_bbox: 0.3991, aux_task3.loss_heatmap: 0.7809, aux_task3.loss_bbox: 0.3055, aux_task4.loss_heatmap: 0.6093, aux_task4.loss_bbox: 0.3162, aux_task5.loss_heatmap: 0.5694, aux_task5.loss_bbox: 0.3076, loss: 16.6165, grad_norm: 38.1584
2025-04-23 14:49:05,805 - mmdet - INFO - Epoch [4][600/1104]	lr: 1.174e-04, eta: 5:01:55, time: 0.996, data_time: 0.008, memory: 15405, loss_cls: 0.5812, loss_bbox: 0.9315, d0.loss_cls: 0.6397, d0.loss_bbox: 1.0702, d1.loss_cls: 0.6216, d1.loss_bbox: 0.9746, d2.loss_cls: 0.6035, d2.loss_bbox: 0.9486, d3.loss_cls: 0.5910, d3.loss_bbox: 0.9357, d4.loss_cls: 0.5832, d4.loss_bbox: 0.9334, aux_task0.loss_heatmap: 0.7903, aux_task0.loss_bbox: 0.3058, aux_task1.loss_heatmap: 1.0975, aux_task1.loss_bbox: 0.3664, aux_task2.loss_heatmap: 1.3100, aux_task2.loss_bbox: 0.4030, aux_task3.loss_heatmap: 0.8339, aux_task3.loss_bbox: 0.3067, aux_task4.loss_heatmap: 0.5867, aux_task4.loss_bbox: 0.3054, aux_task5.loss_heatmap: 0.5797, aux_task5.loss_bbox: 0.3045, loss: 16.6038, grad_norm: 37.2038
2025-04-23 14:49:55,522 - mmdet - INFO - Epoch [4][650/1104]	lr: 1.194e-04, eta: 5:01:04, time: 0.994, data_time: 0.008, memory: 15405, loss_cls: 0.5870, loss_bbox: 0.9398, d0.loss_cls: 0.6453, d0.loss_bbox: 1.0846, d1.loss_cls: 0.6224, d1.loss_bbox: 0.9911, d2.loss_cls: 0.6079, d2.loss_bbox: 0.9640, d3.loss_cls: 0.5960, d3.loss_bbox: 0.9493, d4.loss_cls: 0.5872, d4.loss_bbox: 0.9459, aux_task0.loss_heatmap: 0.7951, aux_task0.loss_bbox: 0.3118, aux_task1.loss_heatmap: 1.0370, aux_task1.loss_bbox: 0.3618, aux_task2.loss_heatmap: 1.3501, aux_task2.loss_bbox: 0.3966, aux_task3.loss_heatmap: 0.7941, aux_task3.loss_bbox: 0.3058, aux_task4.loss_heatmap: 0.6405, aux_task4.loss_bbox: 0.3112, aux_task5.loss_heatmap: 0.5741, aux_task5.loss_bbox: 0.3071, loss: 16.7055, grad_norm: 34.1629
2025-04-23 14:50:44,980 - mmdet - INFO - Epoch [4][700/1104]	lr: 1.213e-04, eta: 5:00:13, time: 0.989, data_time: 0.008, memory: 15405, loss_cls: 0.5887, loss_bbox: 0.9390, d0.loss_cls: 0.6460, d0.loss_bbox: 1.0792, d1.loss_cls: 0.6250, d1.loss_bbox: 0.9837, d2.loss_cls: 0.6080, d2.loss_bbox: 0.9574, d3.loss_cls: 0.5970, d3.loss_bbox: 0.9455, d4.loss_cls: 0.5889, d4.loss_bbox: 0.9412, aux_task0.loss_heatmap: 0.7938, aux_task0.loss_bbox: 0.3094, aux_task1.loss_heatmap: 1.0584, aux_task1.loss_bbox: 0.3666, aux_task2.loss_heatmap: 1.2867, aux_task2.loss_bbox: 0.3919, aux_task3.loss_heatmap: 0.7954, aux_task3.loss_bbox: 0.3055, aux_task4.loss_heatmap: 0.5938, aux_task4.loss_bbox: 0.3130, aux_task5.loss_heatmap: 0.5736, aux_task5.loss_bbox: 0.3078, loss: 16.5958, grad_norm: 35.9974
2025-04-23 14:51:34,101 - mmdet - INFO - Epoch [4][750/1104]	lr: 1.233e-04, eta: 4:59:20, time: 0.982, data_time: 0.009, memory: 15405, loss_cls: 0.5847, loss_bbox: 0.9245, d0.loss_cls: 0.6466, d0.loss_bbox: 1.0700, d1.loss_cls: 0.6270, d1.loss_bbox: 0.9717, d2.loss_cls: 0.6079, d2.loss_bbox: 0.9478, d3.loss_cls: 0.5929, d3.loss_bbox: 0.9353, d4.loss_cls: 0.5859, d4.loss_bbox: 0.9295, aux_task0.loss_heatmap: 0.7922, aux_task0.loss_bbox: 0.3075, aux_task1.loss_heatmap: 1.0771, aux_task1.loss_bbox: 0.3629, aux_task2.loss_heatmap: 1.2898, aux_task2.loss_bbox: 0.3908, aux_task3.loss_heatmap: 0.8165, aux_task3.loss_bbox: 0.3060, aux_task4.loss_heatmap: 0.6147, aux_task4.loss_bbox: 0.3144, aux_task5.loss_heatmap: 0.5684, aux_task5.loss_bbox: 0.3037, loss: 16.5677, grad_norm: 34.3284
2025-04-23 14:52:23,426 - mmdet - INFO - Epoch [4][800/1104]	lr: 1.253e-04, eta: 4:58:27, time: 0.986, data_time: 0.008, memory: 15405, loss_cls: 0.5782, loss_bbox: 0.9244, d0.loss_cls: 0.6416, d0.loss_bbox: 1.0656, d1.loss_cls: 0.6166, d1.loss_bbox: 0.9733, d2.loss_cls: 0.5988, d2.loss_bbox: 0.9494, d3.loss_cls: 0.5877, d3.loss_bbox: 0.9349, d4.loss_cls: 0.5782, d4.loss_bbox: 0.9304, aux_task0.loss_heatmap: 0.7705, aux_task0.loss_bbox: 0.3069, aux_task1.loss_heatmap: 1.0647, aux_task1.loss_bbox: 0.3615, aux_task2.loss_heatmap: 1.3116, aux_task2.loss_bbox: 0.3902, aux_task3.loss_heatmap: 0.7766, aux_task3.loss_bbox: 0.2988, aux_task4.loss_heatmap: 0.6252, aux_task4.loss_bbox: 0.3077, aux_task5.loss_heatmap: 0.5648, aux_task5.loss_bbox: 0.3063, loss: 16.4638, grad_norm: 31.5744
2025-04-23 14:53:12,945 - mmdet - INFO - Epoch [4][850/1104]	lr: 1.273e-04, eta: 4:57:36, time: 0.990, data_time: 0.008, memory: 15405, loss_cls: 0.5629, loss_bbox: 0.9126, d0.loss_cls: 0.6283, d0.loss_bbox: 1.0552, d1.loss_cls: 0.6063, d1.loss_bbox: 0.9565, d2.loss_cls: 0.5860, d2.loss_bbox: 0.9315, d3.loss_cls: 0.5727, d3.loss_bbox: 0.9190, d4.loss_cls: 0.5649, d4.loss_bbox: 0.9149, aux_task0.loss_heatmap: 0.7464, aux_task0.loss_bbox: 0.3028, aux_task1.loss_heatmap: 1.0658, aux_task1.loss_bbox: 0.3655, aux_task2.loss_heatmap: 1.2871, aux_task2.loss_bbox: 0.3971, aux_task3.loss_heatmap: 0.7443, aux_task3.loss_bbox: 0.2999, aux_task4.loss_heatmap: 0.5909, aux_task4.loss_bbox: 0.3050, aux_task5.loss_heatmap: 0.5618, aux_task5.loss_bbox: 0.3033, loss: 16.1804, grad_norm: 32.0526
2025-04-23 14:54:02,930 - mmdet - INFO - Epoch [4][900/1104]	lr: 1.293e-04, eta: 4:56:47, time: 1.000, data_time: 0.008, memory: 15405, loss_cls: 0.5786, loss_bbox: 0.9224, d0.loss_cls: 0.6446, d0.loss_bbox: 1.0642, d1.loss_cls: 0.6227, d1.loss_bbox: 0.9709, d2.loss_cls: 0.6006, d2.loss_bbox: 0.9458, d3.loss_cls: 0.5898, d3.loss_bbox: 0.9307, d4.loss_cls: 0.5810, d4.loss_bbox: 0.9257, aux_task0.loss_heatmap: 0.7641, aux_task0.loss_bbox: 0.3099, aux_task1.loss_heatmap: 1.0730, aux_task1.loss_bbox: 0.3573, aux_task2.loss_heatmap: 1.2831, aux_task2.loss_bbox: 0.3985, aux_task3.loss_heatmap: 0.7830, aux_task3.loss_bbox: 0.3112, aux_task4.loss_heatmap: 0.6222, aux_task4.loss_bbox: 0.3025, aux_task5.loss_heatmap: 0.5497, aux_task5.loss_bbox: 0.3053, loss: 16.4366, grad_norm: 32.1884
2025-04-23 14:54:52,364 - mmdet - INFO - Epoch [4][950/1104]	lr: 1.313e-04, eta: 4:55:56, time: 0.989, data_time: 0.008, memory: 15405, loss_cls: 0.5788, loss_bbox: 0.9218, d0.loss_cls: 0.6425, d0.loss_bbox: 1.0578, d1.loss_cls: 0.6189, d1.loss_bbox: 0.9677, d2.loss_cls: 0.6018, d2.loss_bbox: 0.9430, d3.loss_cls: 0.5894, d3.loss_bbox: 0.9301, d4.loss_cls: 0.5788, d4.loss_bbox: 0.9275, aux_task0.loss_heatmap: 0.7854, aux_task0.loss_bbox: 0.3079, aux_task1.loss_heatmap: 1.0888, aux_task1.loss_bbox: 0.3646, aux_task2.loss_heatmap: 1.3135, aux_task2.loss_bbox: 0.3925, aux_task3.loss_heatmap: 0.7853, aux_task3.loss_bbox: 0.3015, aux_task4.loss_heatmap: 0.5917, aux_task4.loss_bbox: 0.3073, aux_task5.loss_heatmap: 0.5599, aux_task5.loss_bbox: 0.3056, loss: 16.4622, grad_norm: 34.8400
2025-04-23 14:55:41,977 - mmdet - INFO - Epoch [4][1000/1104]	lr: 1.333e-04, eta: 4:55:05, time: 0.992, data_time: 0.008, memory: 15405, loss_cls: 0.5649, loss_bbox: 0.9179, d0.loss_cls: 0.6244, d0.loss_bbox: 1.0645, d1.loss_cls: 0.6058, d1.loss_bbox: 0.9646, d2.loss_cls: 0.5872, d2.loss_bbox: 0.9383, d3.loss_cls: 0.5743, d3.loss_bbox: 0.9253, d4.loss_cls: 0.5670, d4.loss_bbox: 0.9205, aux_task0.loss_heatmap: 0.7803, aux_task0.loss_bbox: 0.3104, aux_task1.loss_heatmap: 1.0798, aux_task1.loss_bbox: 0.3619, aux_task2.loss_heatmap: 1.2958, aux_task2.loss_bbox: 0.3933, aux_task3.loss_heatmap: 0.7544, aux_task3.loss_bbox: 0.3015, aux_task4.loss_heatmap: 0.5776, aux_task4.loss_bbox: 0.3043, aux_task5.loss_heatmap: 0.5326, aux_task5.loss_bbox: 0.3010, loss: 16.2478, grad_norm: 38.8097
2025-04-23 14:56:31,510 - mmdet - INFO - Epoch [4][1050/1104]	lr: 1.353e-04, eta: 4:54:14, time: 0.991, data_time: 0.008, memory: 15405, loss_cls: 0.5772, loss_bbox: 0.9152, d0.loss_cls: 0.6367, d0.loss_bbox: 1.0640, d1.loss_cls: 0.6181, d1.loss_bbox: 0.9650, d2.loss_cls: 0.6010, d2.loss_bbox: 0.9396, d3.loss_cls: 0.5851, d3.loss_bbox: 0.9267, d4.loss_cls: 0.5777, d4.loss_bbox: 0.9207, aux_task0.loss_heatmap: 0.7705, aux_task0.loss_bbox: 0.3061, aux_task1.loss_heatmap: 1.0621, aux_task1.loss_bbox: 0.3625, aux_task2.loss_heatmap: 1.2864, aux_task2.loss_bbox: 0.3869, aux_task3.loss_heatmap: 0.8021, aux_task3.loss_bbox: 0.3015, aux_task4.loss_heatmap: 0.6053, aux_task4.loss_bbox: 0.3057, aux_task5.loss_heatmap: 0.5568, aux_task5.loss_bbox: 0.3038, loss: 16.3770, grad_norm: 34.0230
2025-04-23 14:57:21,414 - mmdet - INFO - Epoch [4][1100/1104]	lr: 1.373e-04, eta: 4:53:24, time: 0.998, data_time: 0.008, memory: 15426, loss_cls: 0.5667, loss_bbox: 0.9278, d0.loss_cls: 0.6314, d0.loss_bbox: 1.0652, d1.loss_cls: 0.6095, d1.loss_bbox: 0.9703, d2.loss_cls: 0.5901, d2.loss_bbox: 0.9478, d3.loss_cls: 0.5751, d3.loss_bbox: 0.9356, d4.loss_cls: 0.5669, d4.loss_bbox: 0.9313, aux_task0.loss_heatmap: 0.7997, aux_task0.loss_bbox: 0.3059, aux_task1.loss_heatmap: 1.0541, aux_task1.loss_bbox: 0.3615, aux_task2.loss_heatmap: 1.2762, aux_task2.loss_bbox: 0.3953, aux_task3.loss_heatmap: 0.7522, aux_task3.loss_bbox: 0.2982, aux_task4.loss_heatmap: 0.6020, aux_task4.loss_bbox: 0.3121, aux_task5.loss_heatmap: 0.5412, aux_task5.loss_bbox: 0.3059, loss: 16.3222, grad_norm: 30.9528
2025-04-23 14:57:25,818 - mmdet - INFO - Saving checkpoint at 4 epochs
2025-04-23 15:08:59,651 - mmdet - INFO - Exp name: secondmambadss_split14.py
2025-04-23 15:08:59,651 - mmdet - INFO - Epoch(val) [4][3010]	pts_bbox_NuScenes/car_AP_dist_0.5: 0.1937, pts_bbox_NuScenes/car_AP_dist_1.0: 0.4208, pts_bbox_NuScenes/car_AP_dist_2.0: 0.5677, pts_bbox_NuScenes/car_AP_dist_4.0: 0.6517, pts_bbox_NuScenes/car_trans_err: 0.4900, pts_bbox_NuScenes/car_scale_err: 0.2069, pts_bbox_NuScenes/car_orient_err: 1.4444, pts_bbox_NuScenes/car_vel_err: 1.1163, pts_bbox_NuScenes/car_attr_err: 0.3938, pts_bbox_NuScenes/mATE: 0.6518, pts_bbox_NuScenes/mASE: 0.3388, pts_bbox_NuScenes/mAOE: 1.3456, pts_bbox_NuScenes/mAVE: 1.2278, pts_bbox_NuScenes/mAAE: 0.4652, pts_bbox_NuScenes/truck_AP_dist_0.5: 0.0001, pts_bbox_NuScenes/truck_AP_dist_1.0: 0.0350, pts_bbox_NuScenes/truck_AP_dist_2.0: 0.1224, pts_bbox_NuScenes/truck_AP_dist_4.0: 0.1802, pts_bbox_NuScenes/truck_trans_err: 0.8579, pts_bbox_NuScenes/truck_scale_err: 0.3076, pts_bbox_NuScenes/truck_orient_err: 1.5103, pts_bbox_NuScenes/truck_vel_err: 1.0781, pts_bbox_NuScenes/truck_attr_err: 0.3893, pts_bbox_NuScenes/construction_vehicle_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/construction_vehicle_AP_dist_1.0: 0.0007, pts_bbox_NuScenes/construction_vehicle_AP_dist_2.0: 0.0127, pts_bbox_NuScenes/construction_vehicle_AP_dist_4.0: 0.0216, pts_bbox_NuScenes/construction_vehicle_trans_err: 0.8743, pts_bbox_NuScenes/construction_vehicle_scale_err: 0.5397, pts_bbox_NuScenes/construction_vehicle_orient_err: 1.4611, pts_bbox_NuScenes/construction_vehicle_vel_err: 0.1428, pts_bbox_NuScenes/construction_vehicle_attr_err: 0.3797, pts_bbox_NuScenes/bus_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/bus_AP_dist_1.0: 0.0186, pts_bbox_NuScenes/bus_AP_dist_2.0: 0.1127, pts_bbox_NuScenes/bus_AP_dist_4.0: 0.2172, pts_bbox_NuScenes/bus_trans_err: 0.9576, pts_bbox_NuScenes/bus_scale_err: 0.2584, pts_bbox_NuScenes/bus_orient_err: 1.0500, pts_bbox_NuScenes/bus_vel_err: 2.8722, pts_bbox_NuScenes/bus_attr_err: 0.6954, pts_bbox_NuScenes/trailer_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/trailer_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/trailer_AP_dist_2.0: 0.0077, pts_bbox_NuScenes/trailer_AP_dist_4.0: 0.0347, pts_bbox_NuScenes/trailer_trans_err: 0.9880, pts_bbox_NuScenes/trailer_scale_err: 0.3052, pts_bbox_NuScenes/trailer_orient_err: 1.3907, pts_bbox_NuScenes/trailer_vel_err: 0.6728, pts_bbox_NuScenes/trailer_attr_err: 0.3138, pts_bbox_NuScenes/barrier_AP_dist_0.5: 0.0415, pts_bbox_NuScenes/barrier_AP_dist_1.0: 0.2348, pts_bbox_NuScenes/barrier_AP_dist_2.0: 0.3988, pts_bbox_NuScenes/barrier_AP_dist_4.0: 0.4768, pts_bbox_NuScenes/barrier_trans_err: 0.6956, pts_bbox_NuScenes/barrier_scale_err: 0.3840, pts_bbox_NuScenes/barrier_orient_err: 0.8413, pts_bbox_NuScenes/barrier_vel_err: nan, pts_bbox_NuScenes/barrier_attr_err: nan, pts_bbox_NuScenes/motorcycle_AP_dist_0.5: 0.0469, pts_bbox_NuScenes/motorcycle_AP_dist_1.0: 0.0920, pts_bbox_NuScenes/motorcycle_AP_dist_2.0: 0.1170, pts_bbox_NuScenes/motorcycle_AP_dist_4.0: 0.1308, pts_bbox_NuScenes/motorcycle_trans_err: 0.4029, pts_bbox_NuScenes/motorcycle_scale_err: 0.2877, pts_bbox_NuScenes/motorcycle_orient_err: 1.4288, pts_bbox_NuScenes/motorcycle_vel_err: 2.1522, pts_bbox_NuScenes/motorcycle_attr_err: 0.5400, pts_bbox_NuScenes/bicycle_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/bicycle_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/bicycle_AP_dist_2.0: 0.0000, pts_bbox_NuScenes/bicycle_AP_dist_4.0: 0.0000, pts_bbox_NuScenes/bicycle_trans_err: 0.4783, pts_bbox_NuScenes/bicycle_scale_err: 0.3232, pts_bbox_NuScenes/bicycle_orient_err: 1.4289, pts_bbox_NuScenes/bicycle_vel_err: 0.8092, pts_bbox_NuScenes/bicycle_attr_err: 0.1950, pts_bbox_NuScenes/pedestrian_AP_dist_0.5: 0.2977, pts_bbox_NuScenes/pedestrian_AP_dist_1.0: 0.5515, pts_bbox_NuScenes/pedestrian_AP_dist_2.0: 0.6073, pts_bbox_NuScenes/pedestrian_AP_dist_4.0: 0.6381, pts_bbox_NuScenes/pedestrian_trans_err: 0.4424, pts_bbox_NuScenes/pedestrian_scale_err: 0.3233, pts_bbox_NuScenes/pedestrian_orient_err: 1.5546, pts_bbox_NuScenes/pedestrian_vel_err: 0.9789, pts_bbox_NuScenes/pedestrian_attr_err: 0.8144, pts_bbox_NuScenes/traffic_cone_AP_dist_0.5: 0.1581, pts_bbox_NuScenes/traffic_cone_AP_dist_1.0: 0.2043, pts_bbox_NuScenes/traffic_cone_AP_dist_2.0: 0.2364, pts_bbox_NuScenes/traffic_cone_AP_dist_4.0: 0.2867, pts_bbox_NuScenes/traffic_cone_trans_err: 0.3313, pts_bbox_NuScenes/traffic_cone_scale_err: 0.4515, pts_bbox_NuScenes/traffic_cone_orient_err: nan, pts_bbox_NuScenes/traffic_cone_vel_err: nan, pts_bbox_NuScenes/traffic_cone_attr_err: nan, pts_bbox_NuScenes/NDS: 0.2434, pts_bbox_NuScenes/mAP: 0.1779
2025-04-23 15:09:55,479 - mmdet - INFO - Epoch [5][50/1104]	lr: 1.395e-04, eta: 4:52:35, time: 1.100, data_time: 0.104, memory: 15426, loss_cls: 0.5576, loss_bbox: 0.9087, d0.loss_cls: 0.6257, d0.loss_bbox: 1.0462, d1.loss_cls: 0.6029, d1.loss_bbox: 0.9559, d2.loss_cls: 0.5814, d2.loss_bbox: 0.9324, d3.loss_cls: 0.5676, d3.loss_bbox: 0.9194, d4.loss_cls: 0.5572, d4.loss_bbox: 0.9153, aux_task0.loss_heatmap: 0.7499, aux_task0.loss_bbox: 0.2997, aux_task1.loss_heatmap: 1.0601, aux_task1.loss_bbox: 0.3559, aux_task2.loss_heatmap: 1.2781, aux_task2.loss_bbox: 0.3933, aux_task3.loss_heatmap: 0.7582, aux_task3.loss_bbox: 0.3050, aux_task4.loss_heatmap: 0.6028, aux_task4.loss_bbox: 0.3045, aux_task5.loss_heatmap: 0.5282, aux_task5.loss_bbox: 0.3019, loss: 16.1081, grad_norm: 31.7406
2025-04-23 15:10:45,613 - mmdet - INFO - Epoch [5][100/1104]	lr: 1.415e-04, eta: 4:51:47, time: 1.003, data_time: 0.008, memory: 15426, loss_cls: 0.5659, loss_bbox: 0.9112, d0.loss_cls: 0.6268, d0.loss_bbox: 1.0511, d1.loss_cls: 0.6071, d1.loss_bbox: 0.9543, d2.loss_cls: 0.5868, d2.loss_bbox: 0.9330, d3.loss_cls: 0.5758, d3.loss_bbox: 0.9191, d4.loss_cls: 0.5677, d4.loss_bbox: 0.9151, aux_task0.loss_heatmap: 0.7520, aux_task0.loss_bbox: 0.2997, aux_task1.loss_heatmap: 1.0769, aux_task1.loss_bbox: 0.3587, aux_task2.loss_heatmap: 1.2499, aux_task2.loss_bbox: 0.3826, aux_task3.loss_heatmap: 0.7902, aux_task3.loss_bbox: 0.3021, aux_task4.loss_heatmap: 0.5932, aux_task4.loss_bbox: 0.3103, aux_task5.loss_heatmap: 0.5551, aux_task5.loss_bbox: 0.3022, loss: 16.1871, grad_norm: 38.2690
2025-04-23 15:11:35,474 - mmdet - INFO - Epoch [5][150/1104]	lr: 1.435e-04, eta: 4:50:57, time: 0.997, data_time: 0.009, memory: 15426, loss_cls: 0.5588, loss_bbox: 0.9156, d0.loss_cls: 0.6274, d0.loss_bbox: 1.0503, d1.loss_cls: 0.6055, d1.loss_bbox: 0.9598, d2.loss_cls: 0.5861, d2.loss_bbox: 0.9333, d3.loss_cls: 0.5714, d3.loss_bbox: 0.9218, d4.loss_cls: 0.5603, d4.loss_bbox: 0.9189, aux_task0.loss_heatmap: 0.7570, aux_task0.loss_bbox: 0.2994, aux_task1.loss_heatmap: 1.0554, aux_task1.loss_bbox: 0.3581, aux_task2.loss_heatmap: 1.2878, aux_task2.loss_bbox: 0.3897, aux_task3.loss_heatmap: 0.8041, aux_task3.loss_bbox: 0.3031, aux_task4.loss_heatmap: 0.5795, aux_task4.loss_bbox: 0.3060, aux_task5.loss_heatmap: 0.5422, aux_task5.loss_bbox: 0.3017, loss: 16.1934, grad_norm: 30.3925
