{"env_info": "sys.platform: linux\nPython: 3.8.20 | packaged by conda-forge | (default, Sep 30 2024, 17:52:49) [GCC 13.3.0]\nCUDA available: True\nGPU 0,1: NVIDIA GeForce RTX 4090 D\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.6, V11.6.55\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0\nPyTorch: 1.13.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2022.1-Product Build 20220311 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.6\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.14.0\nOpenCV: 4.11.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.4\nMMCV CUDA Compiler: 11.6\nMMDetection: 2.27.0\nMMSegmentation: 0.30.0\nMMDetection3D: 1.0.0rc6+637e2ea\nspconv2.0: True", "config": "point_cloud_range = [-54, -54, -5.0, 54, 54, 3.0]\nclass_names = [\n    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n]\ndataset_type = 'NuScenesDataset'\ndata_root = 'data/nuscenes/'\ninput_modality = dict(\n    use_lidar=True,\n    use_camera=False,\n    use_radar=False,\n    use_map=False,\n    use_external=False)\nfile_client_args = dict(backend='disk')\ntrain_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),\n    dict(\n        type='ObjectSample',\n        db_sampler=dict(\n            data_root='data/nuscenes/',\n            info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',\n            rate=1.0,\n            prepare=dict(\n                filter_by_difficulty=[-1],\n                filter_by_min_points=dict(\n                    car=5,\n                    truck=5,\n                    bus=5,\n                    trailer=5,\n                    construction_vehicle=5,\n                    traffic_cone=5,\n                    barrier=5,\n                    motorcycle=5,\n                    bicycle=5,\n                    pedestrian=5)),\n            classes=[\n                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                'traffic_cone'\n            ],\n            sample_groups=dict(\n                car=2,\n                truck=3,\n                construction_vehicle=7,\n                bus=4,\n                trailer=6,\n                barrier=2,\n                motorcycle=6,\n                bicycle=6,\n                pedestrian=2,\n                traffic_cone=2),\n            points_loader=dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk')))),\n    dict(\n        type='GlobalRotScaleTrans',\n        rot_range=[-0.785, 0.785],\n        scale_ratio_range=[0.9, 1.1],\n        translation_std=[0.5, 0.5, 0.5]),\n    dict(\n        type='RandomFlip3D',\n        sync_2d=False,\n        flip_ratio_bev_horizontal=0.5,\n        flip_ratio_bev_vertical=0.5),\n    dict(\n        type='PointsRangeFilter',\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    dict(\n        type='ObjectRangeFilter',\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    dict(\n        type='ObjectNameFilter',\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(type='PointShuffle'),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(type='Collect3D', keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n]\ntest_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),\n    dict(\n        type='MultiScaleFlipAug3D',\n        img_scale=(1333, 800),\n        pts_scale_ratio=1,\n        flip=False,\n        transforms=[\n            dict(\n                type='GlobalRotScaleTrans',\n                rot_range=[0, 0],\n                scale_ratio_range=[1.0, 1.0],\n                translation_std=[0, 0, 0]),\n            dict(type='RandomFlip3D'),\n            dict(\n                type='PointsRangeFilter',\n                point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ],\n                with_label=False),\n            dict(\n                type='Collect3D',\n                keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n        ])\n]\neval_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        with_label=False),\n    dict(type='Collect3D', keys=['points'])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=4,\n    train=dict(\n        type='CBGSDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_train.pkl',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=10,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadAnnotations3D',\n                with_bbox_3d=True,\n                with_label_3d=True),\n            dict(\n                type='GlobalRotScaleTrans',\n                rot_range=[-0.3925, 0.3925],\n                scale_ratio_range=[0.95, 1.05],\n                translation_std=[0, 0, 0]),\n            dict(type='RandomFlip3D', flip_ratio_bev_horizontal=0.5),\n            dict(\n                type='PointsRangeFilter',\n                point_cloud_range=[-50, -50, -5, 50, 50, 3]),\n            dict(\n                type='ObjectRangeFilter',\n                point_cloud_range=[-50, -50, -5, 50, 50, 3]),\n            dict(\n                type='ObjectNameFilter',\n                classes=[\n                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                    'barrier'\n                ]),\n            dict(type='PointShuffle'),\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                    'barrier'\n                ]),\n            dict(\n                type='Collect3D',\n                keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n        ],\n        classes=[\n            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=False,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=False,\n        box_type_3d='LiDAR',\n        split=14,\n        dataset=dict(\n            type='NuScenesDataset',\n            data_root='data/nuscenes/',\n            ann_file='data/nuscenes/nuscenes_infos_train.pkl',\n            pipeline=[\n                dict(\n                    type='LoadPointsFromFile',\n                    coord_type='LIDAR',\n                    load_dim=5,\n                    use_dim=5,\n                    file_client_args=dict(backend='disk')),\n                dict(\n                    type='LoadPointsFromMultiSweeps',\n                    sweeps_num=9,\n                    use_dim=[0, 1, 2, 3, 4],\n                    file_client_args=dict(backend='disk'),\n                    pad_empty_sweeps=True,\n                    remove_close=True),\n                dict(\n                    type='LoadAnnotations3D',\n                    with_bbox_3d=True,\n                    with_label_3d=True),\n                dict(\n                    type='ObjectSample',\n                    db_sampler=dict(\n                        data_root='data/nuscenes/',\n                        info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',\n                        rate=1.0,\n                        prepare=dict(\n                            filter_by_difficulty=[-1],\n                            filter_by_min_points=dict(\n                                car=5,\n                                truck=5,\n                                bus=5,\n                                trailer=5,\n                                construction_vehicle=5,\n                                traffic_cone=5,\n                                barrier=5,\n                                motorcycle=5,\n                                bicycle=5,\n                                pedestrian=5)),\n                        classes=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        sample_groups=dict(\n                            car=2,\n                            truck=3,\n                            construction_vehicle=7,\n                            bus=4,\n                            trailer=6,\n                            barrier=2,\n                            motorcycle=6,\n                            bicycle=6,\n                            pedestrian=2,\n                            traffic_cone=2),\n                        points_loader=dict(\n                            type='LoadPointsFromFile',\n                            coord_type='LIDAR',\n                            load_dim=5,\n                            use_dim=[0, 1, 2, 3, 4],\n                            file_client_args=dict(backend='disk')))),\n                dict(\n                    type='GlobalRotScaleTrans',\n                    rot_range=[-0.785, 0.785],\n                    scale_ratio_range=[0.9, 1.1],\n                    translation_std=[0.5, 0.5, 0.5]),\n                dict(\n                    type='RandomFlip3D',\n                    sync_2d=False,\n                    flip_ratio_bev_horizontal=0.5,\n                    flip_ratio_bev_vertical=0.5),\n                dict(\n                    type='PointsRangeFilter',\n                    point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                dict(\n                    type='ObjectRangeFilter',\n                    point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                dict(\n                    type='ObjectNameFilter',\n                    classes=[\n                        'car', 'truck', 'construction_vehicle', 'bus',\n                        'trailer', 'barrier', 'motorcycle', 'bicycle',\n                        'pedestrian', 'traffic_cone'\n                    ]),\n                dict(type='PointShuffle'),\n                dict(\n                    type='DefaultFormatBundle3D',\n                    class_names=[\n                        'car', 'truck', 'construction_vehicle', 'bus',\n                        'trailer', 'barrier', 'motorcycle', 'bicycle',\n                        'pedestrian', 'traffic_cone'\n                    ]),\n                dict(\n                    type='Collect3D',\n                    keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n            ],\n            classes=[\n                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                'traffic_cone'\n            ],\n            test_mode=False,\n            use_valid_flag=True,\n            box_type_3d='LiDAR')),\n    val=dict(\n        type='NuScenesDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_val.pkl',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=9,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk'),\n                pad_empty_sweeps=True,\n                remove_close=True),\n            dict(\n                type='LoadAnnotations3D',\n                with_bbox_3d=True,\n                with_label_3d=True),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1333, 800),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='GlobalRotScaleTrans',\n                        rot_range=[0, 0],\n                        scale_ratio_range=[1.0, 1.0],\n                        translation_std=[0, 0, 0]),\n                    dict(type='RandomFlip3D'),\n                    dict(\n                        type='PointsRangeFilter',\n                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(\n                        type='Collect3D',\n                        keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=False,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=True,\n        box_type_3d='LiDAR'),\n    test=dict(\n        type='NuScenesDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_val.pkl',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=9,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk'),\n                pad_empty_sweeps=True,\n                remove_close=True),\n            dict(\n                type='LoadAnnotations3D',\n                with_bbox_3d=True,\n                with_label_3d=True),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1333, 800),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='GlobalRotScaleTrans',\n                        rot_range=[0, 0],\n                        scale_ratio_range=[1.0, 1.0],\n                        translation_std=[0, 0, 0]),\n                    dict(type='RandomFlip3D'),\n                    dict(\n                        type='PointsRangeFilter',\n                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(\n                        type='Collect3D',\n                        keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=False,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=True,\n        box_type_3d='LiDAR'))\nevaluation = dict(\n    interval=1,\n    pipeline=[\n        dict(\n            type='LoadPointsFromFile',\n            coord_type='LIDAR',\n            load_dim=5,\n            use_dim=5,\n            file_client_args=dict(backend='disk')),\n        dict(\n            type='LoadPointsFromMultiSweeps',\n            sweeps_num=10,\n            file_client_args=dict(backend='disk')),\n        dict(\n            type='DefaultFormatBundle3D',\n            class_names=[\n                'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                'barrier'\n            ],\n            with_label=False),\n        dict(type='Collect3D', keys=['points'])\n    ])\noptimizer = dict(type='AdamW', lr=2.5e-05, weight_decay=0.01)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='cyclic',\n    target_ratio=(10, 0.0001),\n    cyclic_times=1,\n    step_ratio_up=0.4)\nmomentum_config = dict(\n    policy='cyclic',\n    target_ratio=(0.8947368421052632, 1),\n    cyclic_times=1,\n    step_ratio_up=0.4)\nrunner = dict(type='EpochBasedRunner', max_epochs=20)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(\n    interval=50,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nwork_dir = './work_dirs/secondmambadss_split14/second\u589e\u5f3a\u7248'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nplugin = 'plugin/futr3d'\nvoxel_size = [0.075, 0.075, 0.2]\ncenter_head = dict(\n    type='CenterHead',\n    in_channels=512,\n    tasks=[\n        dict(num_class=1, class_names=['car']),\n        dict(num_class=2, class_names=['truck', 'construction_vehicle']),\n        dict(num_class=2, class_names=['bus', 'trailer']),\n        dict(num_class=1, class_names=['barrier']),\n        dict(num_class=2, class_names=['motorcycle', 'bicycle']),\n        dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])\n    ],\n    common_heads=dict(\n        reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),\n    share_conv_channel=64,\n    bbox_coder=dict(\n        type='CenterPointBBoxCoder',\n        pc_range=[-54, -54],\n        post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n        max_num=500,\n        score_threshold=0.1,\n        out_size_factor=8,\n        voxel_size=[0.075, 0.075],\n        code_size=9),\n    separate_head=dict(type='SeparateHead', init_bias=-2.19, final_kernel=3),\n    loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),\n    loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),\n    norm_bbox=True)\nmodel = dict(\n    type='FUTR3D',\n    aux_weight=0.5,\n    pts_voxel_layer=dict(\n        max_num_points=10,\n        voxel_size=[0.075, 0.075, 0.2],\n        max_voxels=(120000, 160000),\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    pts_voxel_encoder=dict(type='HardSimpleVFE', num_features=5),\n    pts_middle_encoder=dict(\n        type='SparseEncoder',\n        in_channels=5,\n        sparse_shape=[41, 1440, 1440],\n        output_channels=128,\n        order=('conv', 'norm', 'act'),\n        encoder_channels=((16, 16, 32), (32, 32, 64), (64, 64, 128), (128,\n                                                                      128)),\n        encoder_paddings=((0, 0, 1), (0, 0, 1), (0, 0, [0, 1, 1]), (0, 0)),\n        block_type='basicblock'),\n    pts_backbone=dict(type='SECONDMamba'),\n    pts_neck=dict(\n        type='FPN',\n        norm_cfg=dict(type='BN2d', eps=0.001, momentum=0.01),\n        act_cfg=dict(type='ReLU', inplace=False),\n        in_channels=[128, 256],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs=True,\n        num_outs=4,\n        relu_before_extra_convs=True),\n    pts_bbox_head=dict(\n        type='FUTR3DHead',\n        use_dab=True,\n        use_dss=True,\n        use_hybrid=False,\n        hybrid=None,\n        dss_batch_first=False,\n        dss_drop_prob=0.1,\n        dss_mamba_prenorm=False,\n        dss_mamba_cfg=dict(),\n        dss_mamba_version='DSSMamba_Tiny',\n        dss_num_layers=2,\n        dss_rope=False,\n        dss_morton_rearrange=True,\n        dss_conv_path=False,\n        dss_xy=True,\n        dss_deepseek_format=False,\n        use_mss=False,\n        anchor_size=3,\n        use_aux=True,\n        aux_head=dict(\n            type='CenterHead',\n            in_channels=512,\n            tasks=[\n                dict(num_class=1, class_names=['car']),\n                dict(\n                    num_class=2, class_names=['truck',\n                                              'construction_vehicle']),\n                dict(num_class=2, class_names=['bus', 'trailer']),\n                dict(num_class=1, class_names=['barrier']),\n                dict(num_class=2, class_names=['motorcycle', 'bicycle']),\n                dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])\n            ],\n            common_heads=dict(\n                reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),\n            share_conv_channel=64,\n            bbox_coder=dict(\n                type='CenterPointBBoxCoder',\n                pc_range=[-54, -54],\n                post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n                max_num=500,\n                score_threshold=0.1,\n                out_size_factor=8,\n                voxel_size=[0.075, 0.075],\n                code_size=9),\n            separate_head=dict(\n                type='SeparateHead', init_bias=-2.19, final_kernel=3),\n            loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),\n            loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),\n            norm_bbox=True),\n        mix_selection=False,\n        num_query=900,\n        num_classes=10,\n        in_channels=256,\n        pc_range=[-54, -54, -5.0, 54, 54, 3.0],\n        sync_cls_avg_factor=True,\n        with_box_refine=True,\n        as_two_stage=False,\n        code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],\n        transformer=dict(\n            type='FUTR3DTransformer',\n            use_dab=True,\n            decoder=dict(\n                type='FUTR3DTransformerDecoder',\n                num_layers=6,\n                use_dab=True,\n                anchor_size=3,\n                return_intermediate=True,\n                transformerlayers=dict(\n                    type='DetrTransformerDecoderLayer',\n                    attn_cfgs=[\n                        dict(\n                            type='MultiheadAttention',\n                            embed_dims=256,\n                            num_heads=8,\n                            dropout=0.1),\n                        dict(type='FUTR3DAttention', embed_dims=256)\n                    ],\n                    feedforward_channels=1024,\n                    ffn_dropout=0.1,\n                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',\n                                     'ffn', 'norm')))),\n        positional_encoding=dict(\n            type='SinePositionalEncoding',\n            num_feats=128,\n            normalize=True,\n            offset=-0.5),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=2.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=0.25),\n        loss_iou=dict(type='GIoULoss', loss_weight=0)),\n    train_cfg=dict(\n        pts=dict(\n            point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0],\n            pc_range=[-54, -54, -5.0, 54, 54, 3.0],\n            grid_size=[1440, 1440, 40],\n            voxel_size=[0.075, 0.075, 0.2],\n            out_size_factor=8,\n            dense_reg=1,\n            gaussian_overlap=0.1,\n            max_objs=500,\n            min_radius=2,\n            code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],\n            assigner=dict(\n                type='HungarianAssigner3D',\n                cls_cost=dict(type='FocalLossCost', weight=2.0),\n                reg_cost=dict(type='BBox3DL1Cost', weight=0.25),\n                iou_cost=dict(type='IoUCost', weight=0)))),\n    test_cfg=dict(\n        pts=dict(\n            pc_range=[-54, -54],\n            post_center_limit_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n            max_per_img=500,\n            max_pool_nms=False,\n            min_radius=[4, 12, 10, 1, 0.85, 0.175],\n            out_size_factor=8,\n            voxel_size=[0.075, 0.075],\n            nms_type='circle',\n            pre_max_size=1000,\n            post_max_size=83,\n            nms_thr=0.2,\n            max_num=300,\n            score_threshold=0,\n            post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0])))\ndb_sampler = dict(\n    data_root='data/nuscenes/',\n    info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',\n    rate=1.0,\n    prepare=dict(\n        filter_by_difficulty=[-1],\n        filter_by_min_points=dict(\n            car=5,\n            truck=5,\n            bus=5,\n            trailer=5,\n            construction_vehicle=5,\n            traffic_cone=5,\n            barrier=5,\n            motorcycle=5,\n            bicycle=5,\n            pedestrian=5)),\n    classes=[\n        'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n        'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n    ],\n    sample_groups=dict(\n        car=2,\n        truck=3,\n        construction_vehicle=7,\n        bus=4,\n        trailer=6,\n        barrier=2,\n        motorcycle=6,\n        bicycle=6,\n        pedestrian=2,\n        traffic_cone=2),\n    points_loader=dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk')))\nfind_unused_parameters = True\ncustom_hooks = [dict(type='FadeOjectSampleHook', num_last_epochs=5)]\ngpu_ids = range(0, 2)\n", "seed": 0, "exp_name": "secondmambadss_split14.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 3e-05, "memory": 12935, "data_time": 0.07942, "loss_cls": 1.36901, "loss_bbox": 2.21057, "d0.loss_cls": 1.62111, "d0.loss_bbox": 4.39452, "d1.loss_cls": 1.4245, "d1.loss_bbox": 2.25905, "d2.loss_cls": 1.39886, "d2.loss_bbox": 2.2404, "d3.loss_cls": 1.37243, "d3.loss_bbox": 2.23015, "d4.loss_cls": 1.36727, "d4.loss_bbox": 2.21861, "aux_task0.loss_heatmap": 188.52897, "aux_task0.loss_bbox": 0.84603, "aux_task1.loss_heatmap": 638.67565, "aux_task1.loss_bbox": 0.97237, "aux_task2.loss_heatmap": 534.43628, "aux_task2.loss_bbox": 1.1267, "aux_task3.loss_heatmap": 324.47359, "aux_task3.loss_bbox": 0.78776, "aux_task4.loss_heatmap": 404.91245, "aux_task4.loss_bbox": 0.69615, "aux_task5.loss_heatmap": 516.51057, "aux_task5.loss_bbox": 0.72725, "loss": 2636.80028, "grad_norm": 11447.57046, "time": 1.28025}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 3e-05, "memory": 12935, "data_time": 0.00833, "loss_cls": 1.15233, "loss_bbox": 1.91939, "d0.loss_cls": 1.17457, "d0.loss_bbox": 3.92906, "d1.loss_cls": 1.16361, "d1.loss_bbox": 2.04062, "d2.loss_cls": 1.16119, "d2.loss_bbox": 1.98893, "d3.loss_cls": 1.15622, "d3.loss_bbox": 1.94871, "d4.loss_cls": 1.15189, "d4.loss_bbox": 1.92649, "aux_task0.loss_heatmap": 73.08625, "aux_task0.loss_bbox": 0.60505, "aux_task1.loss_heatmap": 239.88993, "aux_task1.loss_bbox": 0.68796, "aux_task2.loss_heatmap": 178.49471, "aux_task2.loss_bbox": 0.9307, "aux_task3.loss_heatmap": 80.26476, "aux_task3.loss_bbox": 0.53549, "aux_task4.loss_heatmap": 153.02288, "aux_task4.loss_bbox": 0.50415, "aux_task5.loss_heatmap": 233.49628, "aux_task5.loss_bbox": 0.52991, "loss": 982.76108, "grad_norm": 5474.3677, "time": 0.93916}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 3e-05, "memory": 12935, "data_time": 0.00744, "loss_cls": 1.13684, "loss_bbox": 1.96848, "d0.loss_cls": 1.15461, "d0.loss_bbox": 2.22459, "d1.loss_cls": 1.15207, "d1.loss_bbox": 1.79424, "d2.loss_cls": 1.14867, "d2.loss_bbox": 1.83226, "d3.loss_cls": 1.1446, "d3.loss_bbox": 1.88387, "d4.loss_cls": 1.1385, "d4.loss_bbox": 1.93051, "aux_task0.loss_heatmap": 29.69801, "aux_task0.loss_bbox": 0.47947, "aux_task1.loss_heatmap": 113.74765, "aux_task1.loss_bbox": 0.5667, "aux_task2.loss_heatmap": 79.74381, "aux_task2.loss_bbox": 0.76409, "aux_task3.loss_heatmap": 33.37016, "aux_task3.loss_bbox": 0.44877, "aux_task4.loss_heatmap": 71.62921, "aux_task4.loss_bbox": 0.45513, "aux_task5.loss_heatmap": 103.88602, "aux_task5.loss_bbox": 0.48391, "loss": 453.78218, "grad_norm": 2921.96292, "time": 0.93346}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 3e-05, "memory": 13141, "data_time": 0.0075, "loss_cls": 1.11994, "loss_bbox": 1.76684, "d0.loss_cls": 1.14855, "d0.loss_bbox": 1.75374, "d1.loss_cls": 1.14232, "d1.loss_bbox": 1.75817, "d2.loss_cls": 1.13405, "d2.loss_bbox": 1.77041, "d3.loss_cls": 1.12816, "d3.loss_bbox": 1.7758, "d4.loss_cls": 1.1223, "d4.loss_bbox": 1.7704, "aux_task0.loss_heatmap": 13.91909, "aux_task0.loss_bbox": 0.4693, "aux_task1.loss_heatmap": 59.5241, "aux_task1.loss_bbox": 0.52385, "aux_task2.loss_heatmap": 41.56555, "aux_task2.loss_bbox": 0.63051, "aux_task3.loss_heatmap": 14.68028, "aux_task3.loss_bbox": 0.41017, "aux_task4.loss_heatmap": 32.74143, "aux_task4.loss_bbox": 0.43421, "aux_task5.loss_heatmap": 58.2407, "aux_task5.loss_bbox": 0.46385, "loss": 240.99371, "grad_norm": 1685.64704, "time": 0.93164}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 3e-05, "memory": 13141, "data_time": 0.00796, "loss_cls": 1.11321, "loss_bbox": 1.71989, "d0.loss_cls": 1.14771, "d0.loss_bbox": 1.72727, "d1.loss_cls": 1.14055, "d1.loss_bbox": 1.71961, "d2.loss_cls": 1.12975, "d2.loss_bbox": 1.72104, "d3.loss_cls": 1.12069, "d3.loss_bbox": 1.71813, "d4.loss_cls": 1.1134, "d4.loss_bbox": 1.7167, "aux_task0.loss_heatmap": 7.31682, "aux_task0.loss_bbox": 0.44352, "aux_task1.loss_heatmap": 28.6795, "aux_task1.loss_bbox": 0.51026, "aux_task2.loss_heatmap": 20.09031, "aux_task2.loss_bbox": 0.54638, "aux_task3.loss_heatmap": 9.69818, "aux_task3.loss_bbox": 0.41633, "aux_task4.loss_heatmap": 16.08652, "aux_task4.loss_bbox": 0.43595, "aux_task5.loss_heatmap": 29.95415, "aux_task5.loss_bbox": 0.46118, "loss": 131.72707, "grad_norm": 923.68077, "time": 0.93149}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 3e-05, "memory": 13141, "data_time": 0.00858, "loss_cls": 1.0879, "loss_bbox": 1.7015, "d0.loss_cls": 1.14642, "d0.loss_bbox": 1.72575, "d1.loss_cls": 1.13213, "d1.loss_bbox": 1.71619, "d2.loss_cls": 1.11548, "d2.loss_bbox": 1.71934, "d3.loss_cls": 1.10066, "d3.loss_bbox": 1.70771, "d4.loss_cls": 1.08693, "d4.loss_bbox": 1.7054, "aux_task0.loss_heatmap": 3.83211, "aux_task0.loss_bbox": 0.43379, "aux_task1.loss_heatmap": 14.52606, "aux_task1.loss_bbox": 0.49024, "aux_task2.loss_heatmap": 9.77774, "aux_task2.loss_bbox": 0.52395, "aux_task3.loss_heatmap": 5.50246, "aux_task3.loss_bbox": 0.41, "aux_task4.loss_heatmap": 8.08208, "aux_task4.loss_bbox": 0.42434, "aux_task5.loss_heatmap": 14.23535, "aux_task5.loss_bbox": 0.46069, "loss": 75.64422, "grad_norm": 457.05461, "time": 0.93167}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 3e-05, "memory": 13141, "data_time": 0.00789, "loss_cls": 1.05683, "loss_bbox": 1.68199, "d0.loss_cls": 1.1481, "d0.loss_bbox": 1.72921, "d1.loss_cls": 1.1146, "d1.loss_bbox": 1.71348, "d2.loss_cls": 1.09457, "d2.loss_bbox": 1.71094, "d3.loss_cls": 1.06405, "d3.loss_bbox": 1.69768, "d4.loss_cls": 1.05307, "d4.loss_bbox": 1.68996, "aux_task0.loss_heatmap": 2.52318, "aux_task0.loss_bbox": 0.43434, "aux_task1.loss_heatmap": 7.01074, "aux_task1.loss_bbox": 0.4899, "aux_task2.loss_heatmap": 5.02463, "aux_task2.loss_bbox": 0.49269, "aux_task3.loss_heatmap": 2.96876, "aux_task3.loss_bbox": 0.40928, "aux_task4.loss_heatmap": 4.13044, "aux_task4.loss_bbox": 0.43163, "aux_task5.loss_heatmap": 6.59795, "aux_task5.loss_bbox": 0.46486, "loss": 47.73288, "grad_norm": 207.77377, "time": 0.93365}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 3e-05, "memory": 13141, "data_time": 0.00844, "loss_cls": 1.03647, "loss_bbox": 1.6512, "d0.loss_cls": 1.12412, "d0.loss_bbox": 1.71761, "d1.loss_cls": 1.05718, "d1.loss_bbox": 1.68396, "d2.loss_cls": 1.03685, "d2.loss_bbox": 1.67501, "d3.loss_cls": 1.03059, "d3.loss_bbox": 1.65955, "d4.loss_cls": 1.02996, "d4.loss_bbox": 1.65884, "aux_task0.loss_heatmap": 1.78187, "aux_task0.loss_bbox": 0.42767, "aux_task1.loss_heatmap": 3.55532, "aux_task1.loss_bbox": 0.48175, "aux_task2.loss_heatmap": 2.95573, "aux_task2.loss_bbox": 0.47237, "aux_task3.loss_heatmap": 2.10097, "aux_task3.loss_bbox": 0.40909, "aux_task4.loss_heatmap": 2.45693, "aux_task4.loss_bbox": 0.4292, "aux_task5.loss_heatmap": 3.27862, "aux_task5.loss_bbox": 0.45913, "loss": 35.16998, "grad_norm": 88.4369, "time": 0.94049}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 3e-05, "memory": 13141, "data_time": 0.00871, "loss_cls": 1.01997, "loss_bbox": 1.6353, "d0.loss_cls": 1.10301, "d0.loss_bbox": 1.72957, "d1.loss_cls": 1.01819, "d1.loss_bbox": 1.66619, "d2.loss_cls": 1.01165, "d2.loss_bbox": 1.65481, "d3.loss_cls": 1.01274, "d3.loss_bbox": 1.64111, "d4.loss_cls": 1.01438, "d4.loss_bbox": 1.64053, "aux_task0.loss_heatmap": 1.54918, "aux_task0.loss_bbox": 0.42474, "aux_task1.loss_heatmap": 2.2728, "aux_task1.loss_bbox": 0.47332, "aux_task2.loss_heatmap": 2.09548, "aux_task2.loss_bbox": 0.48255, "aux_task3.loss_heatmap": 1.65213, "aux_task3.loss_bbox": 0.40082, "aux_task4.loss_heatmap": 1.79564, "aux_task4.loss_bbox": 0.42535, "aux_task5.loss_heatmap": 1.99996, "aux_task5.loss_bbox": 0.45417, "loss": 30.1736, "grad_norm": 41.46566, "time": 0.93997}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 3e-05, "memory": 13141, "data_time": 0.00826, "loss_cls": 1.0034, "loss_bbox": 1.6099, "d0.loss_cls": 1.08751, "d0.loss_bbox": 1.7232, "d1.loss_cls": 0.99503, "d1.loss_bbox": 1.63711, "d2.loss_cls": 0.99522, "d2.loss_bbox": 1.62759, "d3.loss_cls": 1.00023, "d3.loss_bbox": 1.6172, "d4.loss_cls": 1.0006, "d4.loss_bbox": 1.61811, "aux_task0.loss_heatmap": 1.42387, "aux_task0.loss_bbox": 0.42062, "aux_task1.loss_heatmap": 1.84561, "aux_task1.loss_bbox": 0.46089, "aux_task2.loss_heatmap": 1.83115, "aux_task2.loss_bbox": 0.47282, "aux_task3.loss_heatmap": 1.54377, "aux_task3.loss_bbox": 0.39768, "aux_task4.loss_heatmap": 1.51352, "aux_task4.loss_bbox": 0.41379, "aux_task5.loss_heatmap": 1.67974, "aux_task5.loss_bbox": 0.44403, "loss": 28.36259, "grad_norm": 29.68058, "time": 0.93441}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 3e-05, "memory": 13141, "data_time": 0.00772, "loss_cls": 0.96112, "loss_bbox": 1.57802, "d0.loss_cls": 1.04744, "d0.loss_bbox": 1.71713, "d1.loss_cls": 0.96109, "d1.loss_bbox": 1.60858, "d2.loss_cls": 0.95483, "d2.loss_bbox": 1.59627, "d3.loss_cls": 0.95619, "d3.loss_bbox": 1.58851, "d4.loss_cls": 0.9564, "d4.loss_bbox": 1.58043, "aux_task0.loss_heatmap": 1.34554, "aux_task0.loss_bbox": 0.39693, "aux_task1.loss_heatmap": 1.65161, "aux_task1.loss_bbox": 0.4397, "aux_task2.loss_heatmap": 1.76862, "aux_task2.loss_bbox": 0.47863, "aux_task3.loss_heatmap": 1.41977, "aux_task3.loss_bbox": 0.38592, "aux_task4.loss_heatmap": 1.30231, "aux_task4.loss_bbox": 0.40722, "aux_task5.loss_heatmap": 1.49908, "aux_task5.loss_bbox": 0.42036, "loss": 27.02172, "grad_norm": 25.11018, "time": 0.92957}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 3e-05, "memory": 13141, "data_time": 0.00899, "loss_cls": 0.94638, "loss_bbox": 1.5495, "d0.loss_cls": 1.03075, "d0.loss_bbox": 1.7124, "d1.loss_cls": 0.94995, "d1.loss_bbox": 1.58626, "d2.loss_cls": 0.94407, "d2.loss_bbox": 1.56667, "d3.loss_cls": 0.94105, "d3.loss_bbox": 1.55625, "d4.loss_cls": 0.9408, "d4.loss_bbox": 1.55246, "aux_task0.loss_heatmap": 1.3264, "aux_task0.loss_bbox": 0.39692, "aux_task1.loss_heatmap": 1.6109, "aux_task1.loss_bbox": 0.42851, "aux_task2.loss_heatmap": 1.75164, "aux_task2.loss_bbox": 0.47458, "aux_task3.loss_heatmap": 1.33403, "aux_task3.loss_bbox": 0.36744, "aux_task4.loss_heatmap": 1.15306, "aux_task4.loss_bbox": 0.38785, "aux_task5.loss_heatmap": 1.38491, "aux_task5.loss_bbox": 0.40938, "loss": 26.30217, "grad_norm": 25.95597, "time": 0.93949}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 3e-05, "memory": 13228, "data_time": 0.00776, "loss_cls": 0.92966, "loss_bbox": 1.51221, "d0.loss_cls": 1.00357, "d0.loss_bbox": 1.70801, "d1.loss_cls": 0.93265, "d1.loss_bbox": 1.55663, "d2.loss_cls": 0.92626, "d2.loss_bbox": 1.52688, "d3.loss_cls": 0.92442, "d3.loss_bbox": 1.5152, "d4.loss_cls": 0.92212, "d4.loss_bbox": 1.51132, "aux_task0.loss_heatmap": 1.25274, "aux_task0.loss_bbox": 0.37793, "aux_task1.loss_heatmap": 1.51892, "aux_task1.loss_bbox": 0.42388, "aux_task2.loss_heatmap": 1.72919, "aux_task2.loss_bbox": 0.46848, "aux_task3.loss_heatmap": 1.33834, "aux_task3.loss_bbox": 0.36334, "aux_task4.loss_heatmap": 1.1097, "aux_task4.loss_bbox": 0.38095, "aux_task5.loss_heatmap": 1.28364, "aux_task5.loss_bbox": 0.38848, "loss": 25.60453, "grad_norm": 25.71342, "time": 0.93804}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 3e-05, "memory": 13228, "data_time": 0.00968, "loss_cls": 0.91805, "loss_bbox": 1.46983, "d0.loss_cls": 0.9834, "d0.loss_bbox": 1.68684, "d1.loss_cls": 0.91804, "d1.loss_bbox": 1.5134, "d2.loss_cls": 0.91432, "d2.loss_bbox": 1.47957, "d3.loss_cls": 0.91445, "d3.loss_bbox": 1.46899, "d4.loss_cls": 0.91297, "d4.loss_bbox": 1.46932, "aux_task0.loss_heatmap": 1.22604, "aux_task0.loss_bbox": 0.38093, "aux_task1.loss_heatmap": 1.47462, "aux_task1.loss_bbox": 0.41446, "aux_task2.loss_heatmap": 1.69702, "aux_task2.loss_bbox": 0.45445, "aux_task3.loss_heatmap": 1.21612, "aux_task3.loss_bbox": 0.35575, "aux_task4.loss_heatmap": 1.01009, "aux_task4.loss_bbox": 0.37001, "aux_task5.loss_heatmap": 1.23589, "aux_task5.loss_bbox": 0.38499, "loss": 24.86955, "grad_norm": 26.93003, "time": 0.93931}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 3e-05, "memory": 13228, "data_time": 0.00764, "loss_cls": 0.90497, "loss_bbox": 1.4132, "d0.loss_cls": 0.97214, "d0.loss_bbox": 1.64941, "d1.loss_cls": 0.91063, "d1.loss_bbox": 1.4604, "d2.loss_cls": 0.90582, "d2.loss_bbox": 1.42384, "d3.loss_cls": 0.90461, "d3.loss_bbox": 1.4111, "d4.loss_cls": 0.89999, "d4.loss_bbox": 1.41357, "aux_task0.loss_heatmap": 1.18894, "aux_task0.loss_bbox": 0.37129, "aux_task1.loss_heatmap": 1.45653, "aux_task1.loss_bbox": 0.41615, "aux_task2.loss_heatmap": 1.68878, "aux_task2.loss_bbox": 0.44762, "aux_task3.loss_heatmap": 1.19384, "aux_task3.loss_bbox": 0.34463, "aux_task4.loss_heatmap": 0.98907, "aux_task4.loss_bbox": 0.37311, "aux_task5.loss_heatmap": 1.18869, "aux_task5.loss_bbox": 0.37719, "loss": 24.30553, "grad_norm": 28.83548, "time": 0.9393}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 3e-05, "memory": 13228, "data_time": 0.00819, "loss_cls": 0.90478, "loss_bbox": 1.3909, "d0.loss_cls": 0.96846, "d0.loss_bbox": 1.62162, "d1.loss_cls": 0.9091, "d1.loss_bbox": 1.43106, "d2.loss_cls": 0.90316, "d2.loss_bbox": 1.38798, "d3.loss_cls": 0.89979, "d3.loss_bbox": 1.37885, "d4.loss_cls": 0.8991, "d4.loss_bbox": 1.38362, "aux_task0.loss_heatmap": 1.13867, "aux_task0.loss_bbox": 0.36769, "aux_task1.loss_heatmap": 1.42786, "aux_task1.loss_bbox": 0.41137, "aux_task2.loss_heatmap": 1.6696, "aux_task2.loss_bbox": 0.448, "aux_task3.loss_heatmap": 1.23768, "aux_task3.loss_bbox": 0.35046, "aux_task4.loss_heatmap": 0.95234, "aux_task4.loss_bbox": 0.36041, "aux_task5.loss_heatmap": 1.16539, "aux_task5.loss_bbox": 0.37282, "loss": 23.9807, "grad_norm": 33.8038, "time": 0.9304}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 3e-05, "memory": 13228, "data_time": 0.00765, "loss_cls": 0.88309, "loss_bbox": 1.33887, "d0.loss_cls": 0.94914, "d0.loss_bbox": 1.58926, "d1.loss_cls": 0.89197, "d1.loss_bbox": 1.41173, "d2.loss_cls": 0.88645, "d2.loss_bbox": 1.35251, "d3.loss_cls": 0.88348, "d3.loss_bbox": 1.3398, "d4.loss_cls": 0.88133, "d4.loss_bbox": 1.33686, "aux_task0.loss_heatmap": 1.12146, "aux_task0.loss_bbox": 0.36688, "aux_task1.loss_heatmap": 1.38369, "aux_task1.loss_bbox": 0.40647, "aux_task2.loss_heatmap": 1.64153, "aux_task2.loss_bbox": 0.45419, "aux_task3.loss_heatmap": 1.21256, "aux_task3.loss_bbox": 0.34603, "aux_task4.loss_heatmap": 0.93332, "aux_task4.loss_bbox": 0.35871, "aux_task5.loss_heatmap": 1.13378, "aux_task5.loss_bbox": 0.37014, "loss": 23.47325, "grad_norm": 31.36275, "time": 0.93277}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 3e-05, "memory": 13228, "data_time": 0.00814, "loss_cls": 0.87926, "loss_bbox": 1.29908, "d0.loss_cls": 0.93391, "d0.loss_bbox": 1.55767, "d1.loss_cls": 0.88449, "d1.loss_bbox": 1.37695, "d2.loss_cls": 0.87629, "d2.loss_bbox": 1.31427, "d3.loss_cls": 0.87526, "d3.loss_bbox": 1.3005, "d4.loss_cls": 0.87717, "d4.loss_bbox": 1.29662, "aux_task0.loss_heatmap": 1.09712, "aux_task0.loss_bbox": 0.35952, "aux_task1.loss_heatmap": 1.36412, "aux_task1.loss_bbox": 0.40021, "aux_task2.loss_heatmap": 1.61993, "aux_task2.loss_bbox": 0.44785, "aux_task3.loss_heatmap": 1.16156, "aux_task3.loss_bbox": 0.3448, "aux_task4.loss_heatmap": 0.91044, "aux_task4.loss_bbox": 0.35443, "aux_task5.loss_heatmap": 1.09334, "aux_task5.loss_bbox": 0.37039, "loss": 22.9952, "grad_norm": 34.29153, "time": 0.93888}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 3e-05, "memory": 13228, "data_time": 0.00853, "loss_cls": 0.86125, "loss_bbox": 1.27441, "d0.loss_cls": 0.91191, "d0.loss_bbox": 1.53661, "d1.loss_cls": 0.86801, "d1.loss_bbox": 1.36155, "d2.loss_cls": 0.86276, "d2.loss_bbox": 1.29752, "d3.loss_cls": 0.86022, "d3.loss_bbox": 1.28441, "d4.loss_cls": 0.86021, "d4.loss_bbox": 1.27659, "aux_task0.loss_heatmap": 1.0916, "aux_task0.loss_bbox": 0.3716, "aux_task1.loss_heatmap": 1.34494, "aux_task1.loss_bbox": 0.40026, "aux_task2.loss_heatmap": 1.61219, "aux_task2.loss_bbox": 0.43789, "aux_task3.loss_heatmap": 1.13306, "aux_task3.loss_bbox": 0.3445, "aux_task4.loss_heatmap": 0.88406, "aux_task4.loss_bbox": 0.35719, "aux_task5.loss_heatmap": 1.03933, "aux_task5.loss_bbox": 0.35654, "loss": 22.62861, "grad_norm": 33.5839, "time": 0.9364}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 3e-05, "memory": 13228, "data_time": 0.00771, "loss_cls": 0.86337, "loss_bbox": 1.25185, "d0.loss_cls": 0.90555, "d0.loss_bbox": 1.50466, "d1.loss_cls": 0.86709, "d1.loss_bbox": 1.34022, "d2.loss_cls": 0.86325, "d2.loss_bbox": 1.2771, "d3.loss_cls": 0.86066, "d3.loss_bbox": 1.26172, "d4.loss_cls": 0.86171, "d4.loss_bbox": 1.25389, "aux_task0.loss_heatmap": 1.09563, "aux_task0.loss_bbox": 0.37053, "aux_task1.loss_heatmap": 1.33441, "aux_task1.loss_bbox": 0.40437, "aux_task2.loss_heatmap": 1.60013, "aux_task2.loss_bbox": 0.43693, "aux_task3.loss_heatmap": 1.12679, "aux_task3.loss_bbox": 0.34127, "aux_task4.loss_heatmap": 0.86762, "aux_task4.loss_bbox": 0.35496, "aux_task5.loss_heatmap": 1.02363, "aux_task5.loss_bbox": 0.35833, "loss": 22.42565, "grad_norm": 35.12569, "time": 0.93628}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 3e-05, "memory": 13228, "data_time": 0.0082, "loss_cls": 0.86008, "loss_bbox": 1.24636, "d0.loss_cls": 0.89712, "d0.loss_bbox": 1.4775, "d1.loss_cls": 0.86332, "d1.loss_bbox": 1.3248, "d2.loss_cls": 0.85756, "d2.loss_bbox": 1.26471, "d3.loss_cls": 0.85594, "d3.loss_bbox": 1.25203, "d4.loss_cls": 0.85804, "d4.loss_bbox": 1.24639, "aux_task0.loss_heatmap": 1.07484, "aux_task0.loss_bbox": 0.3643, "aux_task1.loss_heatmap": 1.32165, "aux_task1.loss_bbox": 0.4039, "aux_task2.loss_heatmap": 1.59276, "aux_task2.loss_bbox": 0.43749, "aux_task3.loss_heatmap": 1.12403, "aux_task3.loss_bbox": 0.34051, "aux_task4.loss_heatmap": 0.87698, "aux_task4.loss_bbox": 0.35344, "aux_task5.loss_heatmap": 1.00718, "aux_task5.loss_bbox": 0.35717, "loss": 22.25807, "grad_norm": 36.10172, "time": 0.93027}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 3e-05, "memory": 13228, "data_time": 0.01, "loss_cls": 0.8345, "loss_bbox": 1.22798, "d0.loss_cls": 0.87102, "d0.loss_bbox": 1.46819, "d1.loss_cls": 0.83739, "d1.loss_bbox": 1.30694, "d2.loss_cls": 0.83239, "d2.loss_bbox": 1.25207, "d3.loss_cls": 0.82999, "d3.loss_bbox": 1.23701, "d4.loss_cls": 0.83258, "d4.loss_bbox": 1.23062, "aux_task0.loss_heatmap": 1.04451, "aux_task0.loss_bbox": 0.35814, "aux_task1.loss_heatmap": 1.30758, "aux_task1.loss_bbox": 0.40056, "aux_task2.loss_heatmap": 1.56699, "aux_task2.loss_bbox": 0.43767, "aux_task3.loss_heatmap": 1.07696, "aux_task3.loss_bbox": 0.33623, "aux_task4.loss_heatmap": 0.86247, "aux_task4.loss_bbox": 0.35968, "aux_task5.loss_heatmap": 0.99137, "aux_task5.loss_bbox": 0.35414, "loss": 21.85698, "grad_norm": 36.00553, "time": 0.94576}
{"mode": "val", "epoch": 1, "iter": 3010, "lr": 3e-05, "pts_bbox_NuScenes/car_AP_dist_0.5": 0.0037, "pts_bbox_NuScenes/car_AP_dist_1.0": 0.0382, "pts_bbox_NuScenes/car_AP_dist_2.0": 0.0949, "pts_bbox_NuScenes/car_AP_dist_4.0": 0.1432, "pts_bbox_NuScenes/car_trans_err": 0.8426, "pts_bbox_NuScenes/car_scale_err": 0.2325, "pts_bbox_NuScenes/car_orient_err": 1.655, "pts_bbox_NuScenes/car_vel_err": 1.7523, "pts_bbox_NuScenes/car_attr_err": 0.4804, "pts_bbox_NuScenes/mATE": 0.89, "pts_bbox_NuScenes/mASE": 0.4822, "pts_bbox_NuScenes/mAOE": 1.4117, "pts_bbox_NuScenes/mAVE": 1.077, "pts_bbox_NuScenes/mAAE": 0.4863, "pts_bbox_NuScenes/truck_AP_dist_0.5": 0.0, "pts_bbox_NuScenes/truck_AP_dist_1.0": 0.0, "pts_bbox_NuScenes/truck_AP_dist_2.0": 0.0001, "pts_bbox_NuScenes/truck_AP_dist_4.0": 0.0042, "pts_bbox_NuScenes/truck_trans_err": 1.0551, "pts_bbox_NuScenes/truck_scale_err": 0.3461, "pts_bbox_NuScenes/truck_orient_err": 1.6644, "pts_bbox_NuScenes/truck_vel_err": 0.9534, "pts_bbox_NuScenes/truck_attr_err": 0.4181, "pts_bbox_NuScenes/construction_vehicle_AP_dist_0.5": 0.0, "pts_bbox_NuScenes/construction_vehicle_AP_dist_1.0": 0.0, "pts_bbox_NuScenes/construction_vehicle_AP_dist_2.0": 0.0, "pts_bbox_NuScenes/construction_vehicle_AP_dist_4.0": 0.0, "pts_bbox_NuScenes/construction_vehicle_trans_err": 1.034, "pts_bbox_NuScenes/construction_vehicle_scale_err": 0.5875, "pts_bbox_NuScenes/construction_vehicle_orient_err": 1.4472, "pts_bbox_NuScenes/construction_vehicle_vel_err": 0.1351, "pts_bbox_NuScenes/construction_vehicle_attr_err": 0.3895, "pts_bbox_NuScenes/bus_AP_dist_0.5": 0.0, "pts_bbox_NuScenes/bus_AP_dist_1.0": 0.0, "pts_bbox_NuScenes/bus_AP_dist_2.0": 0.0, "pts_bbox_NuScenes/bus_AP_dist_4.0": 0.0, "pts_bbox_NuScenes/bus_trans_err": 1.2009, "pts_bbox_NuScenes/bus_scale_err": 0.3329, "pts_bbox_NuScenes/bus_orient_err": 1.3897, "pts_bbox_NuScenes/bus_vel_err": 2.6128, "pts_bbox_NuScenes/bus_attr_err": 0.6292, "pts_bbox_NuScenes/trailer_AP_dist_0.5": 0.0, "pts_bbox_NuScenes/trailer_AP_dist_1.0": 0.0, "pts_bbox_NuScenes/trailer_AP_dist_2.0": 0.0, "pts_bbox_NuScenes/trailer_AP_dist_4.0": 0.0, "pts_bbox_NuScenes/trailer_trans_err": 1.3817, "pts_bbox_NuScenes/trailer_scale_err": 0.3671, "pts_bbox_NuScenes/trailer_orient_err": 1.3726, "pts_bbox_NuScenes/trailer_vel_err": 0.646, "pts_bbox_NuScenes/trailer_attr_err": 0.4543, "pts_bbox_NuScenes/barrier_AP_dist_0.5": 0.0, "pts_bbox_NuScenes/barrier_AP_dist_1.0": 0.003, "pts_bbox_NuScenes/barrier_AP_dist_2.0": 0.0237, "pts_bbox_NuScenes/barrier_AP_dist_4.0": 0.0495, "pts_bbox_NuScenes/barrier_trans_err": 0.9494, "pts_bbox_NuScenes/barrier_scale_err": 0.7929, "pts_bbox_NuScenes/barrier_orient_err": 0.8383, "pts_bbox_NuScenes/barrier_vel_err": NaN, "pts_bbox_NuScenes/barrier_attr_err": NaN, "pts_bbox_NuScenes/motorcycle_AP_dist_0.5": 0.0, "pts_bbox_NuScenes/motorcycle_AP_dist_1.0": 0.0, "pts_bbox_NuScenes/motorcycle_AP_dist_2.0": 0.0, "pts_bbox_NuScenes/motorcycle_AP_dist_4.0": 0.0, "pts_bbox_NuScenes/motorcycle_trans_err": 0.489, "pts_bbox_NuScenes/motorcycle_scale_err": 0.4797, "pts_bbox_NuScenes/motorcycle_orient_err": 1.3798, "pts_bbox_NuScenes/motorcycle_vel_err": 1.1447, "pts_bbox_NuScenes/motorcycle_attr_err": 0.5687, "pts_bbox_NuScenes/bicycle_AP_dist_0.5": 0.0, "pts_bbox_NuScenes/bicycle_AP_dist_1.0": 0.0, "pts_bbox_NuScenes/bicycle_AP_dist_2.0": 0.0, "pts_bbox_NuScenes/bicycle_AP_dist_4.0": 0.0, "pts_bbox_NuScenes/bicycle_trans_err": 0.7472, "pts_bbox_NuScenes/bicycle_scale_err": 0.5797, "pts_bbox_NuScenes/bicycle_orient_err": 1.4894, "pts_bbox_NuScenes/bicycle_vel_err": 0.4349, "pts_bbox_NuScenes/bicycle_attr_err": 0.1357, "pts_bbox_NuScenes/pedestrian_AP_dist_0.5": 0.0027, "pts_bbox_NuScenes/pedestrian_AP_dist_1.0": 0.0297, "pts_bbox_NuScenes/pedestrian_AP_dist_2.0": 0.0433, "pts_bbox_NuScenes/pedestrian_AP_dist_4.0": 0.0673, "pts_bbox_NuScenes/pedestrian_trans_err": 0.5632, "pts_bbox_NuScenes/pedestrian_scale_err": 0.4732, "pts_bbox_NuScenes/pedestrian_orient_err": 1.4686, "pts_bbox_NuScenes/pedestrian_vel_err": 0.9371, "pts_bbox_NuScenes/pedestrian_attr_err": 0.8143, "pts_bbox_NuScenes/traffic_cone_AP_dist_0.5": 0.0, "pts_bbox_NuScenes/traffic_cone_AP_dist_1.0": 0.0016, "pts_bbox_NuScenes/traffic_cone_AP_dist_2.0": 0.0069, "pts_bbox_NuScenes/traffic_cone_AP_dist_4.0": 0.0291, "pts_bbox_NuScenes/traffic_cone_trans_err": 0.6364, "pts_bbox_NuScenes/traffic_cone_scale_err": 0.63, "pts_bbox_NuScenes/traffic_cone_orient_err": NaN, "pts_bbox_NuScenes/traffic_cone_vel_err": NaN, "pts_bbox_NuScenes/traffic_cone_attr_err": NaN, "pts_bbox_NuScenes/NDS": 0.12092, "pts_bbox_NuScenes/mAP": 0.01353}
