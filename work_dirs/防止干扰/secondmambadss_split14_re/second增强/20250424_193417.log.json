{"env_info": "sys.platform: linux\nPython: 3.8.20 | packaged by conda-forge | (default, Sep 30 2024, 17:52:49) [GCC 13.3.0]\nCUDA available: True\nGPU 0,1: NVIDIA GeForce RTX 4090 D\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.6, V11.6.55\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0\nPyTorch: 1.13.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2022.1-Product Build 20220311 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.6\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.14.0\nOpenCV: 4.11.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.4\nMMCV CUDA Compiler: 11.6\nMMDetection: 2.27.0\nMMSegmentation: 0.30.0\nMMDetection3D: 1.0.0rc6+637e2ea\nspconv2.0: True", "config": "point_cloud_range = [-54, -54, -5.0, 54, 54, 3.0]\nclass_names = [\n    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n]\ndataset_type = 'NuScenesDataset'\ndata_root = 'data/nuscenes/'\ninput_modality = dict(\n    use_lidar=True,\n    use_camera=False,\n    use_radar=False,\n    use_map=False,\n    use_external=False)\nfile_client_args = dict(backend='disk')\ntrain_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),\n    dict(\n        type='ObjectSample',\n        db_sampler=dict(\n            data_root='data/nuscenes/',\n            info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',\n            rate=1.0,\n            prepare=dict(\n                filter_by_difficulty=[-1],\n                filter_by_min_points=dict(\n                    car=5,\n                    truck=5,\n                    bus=5,\n                    trailer=5,\n                    construction_vehicle=5,\n                    traffic_cone=5,\n                    barrier=5,\n                    motorcycle=5,\n                    bicycle=5,\n                    pedestrian=5)),\n            classes=[\n                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                'traffic_cone'\n            ],\n            sample_groups=dict(\n                car=2,\n                truck=3,\n                construction_vehicle=7,\n                bus=4,\n                trailer=6,\n                barrier=2,\n                motorcycle=6,\n                bicycle=6,\n                pedestrian=2,\n                traffic_cone=2),\n            points_loader=dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk')))),\n    dict(\n        type='GlobalRotScaleTrans',\n        rot_range=[-0.785, 0.785],\n        scale_ratio_range=[0.9, 1.1],\n        translation_std=[0.5, 0.5, 0.5]),\n    dict(\n        type='RandomFlip3D',\n        sync_2d=False,\n        flip_ratio_bev_horizontal=0.5,\n        flip_ratio_bev_vertical=0.5),\n    dict(\n        type='PointsRangeFilter',\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    dict(\n        type='ObjectRangeFilter',\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    dict(\n        type='ObjectNameFilter',\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(type='PointShuffle'),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(type='Collect3D', keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n]\ntest_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),\n    dict(\n        type='MultiScaleFlipAug3D',\n        img_scale=(1333, 800),\n        pts_scale_ratio=1,\n        flip=False,\n        transforms=[\n            dict(\n                type='GlobalRotScaleTrans',\n                rot_range=[0, 0],\n                scale_ratio_range=[1.0, 1.0],\n                translation_std=[0, 0, 0]),\n            dict(type='RandomFlip3D'),\n            dict(\n                type='PointsRangeFilter',\n                point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ],\n                with_label=False),\n            dict(\n                type='Collect3D',\n                keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n        ])\n]\neval_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        with_label=False),\n    dict(type='Collect3D', keys=['points'])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=4,\n    train=dict(\n        type='CBGSDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_train.pkl',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=10,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadAnnotations3D',\n                with_bbox_3d=True,\n                with_label_3d=True),\n            dict(\n                type='GlobalRotScaleTrans',\n                rot_range=[-0.3925, 0.3925],\n                scale_ratio_range=[0.95, 1.05],\n                translation_std=[0, 0, 0]),\n            dict(type='RandomFlip3D', flip_ratio_bev_horizontal=0.5),\n            dict(\n                type='PointsRangeFilter',\n                point_cloud_range=[-50, -50, -5, 50, 50, 3]),\n            dict(\n                type='ObjectRangeFilter',\n                point_cloud_range=[-50, -50, -5, 50, 50, 3]),\n            dict(\n                type='ObjectNameFilter',\n                classes=[\n                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                    'barrier'\n                ]),\n            dict(type='PointShuffle'),\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                    'barrier'\n                ]),\n            dict(\n                type='Collect3D',\n                keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n        ],\n        classes=[\n            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=False,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=False,\n        box_type_3d='LiDAR',\n        split=14,\n        dataset=dict(\n            type='NuScenesDataset',\n            data_root='data/nuscenes/',\n            ann_file='data/nuscenes/nuscenes_infos_train.pkl',\n            pipeline=[\n                dict(\n                    type='LoadPointsFromFile',\n                    coord_type='LIDAR',\n                    load_dim=5,\n                    use_dim=5,\n                    file_client_args=dict(backend='disk')),\n                dict(\n                    type='LoadPointsFromMultiSweeps',\n                    sweeps_num=9,\n                    use_dim=[0, 1, 2, 3, 4],\n                    file_client_args=dict(backend='disk'),\n                    pad_empty_sweeps=True,\n                    remove_close=True),\n                dict(\n                    type='LoadAnnotations3D',\n                    with_bbox_3d=True,\n                    with_label_3d=True),\n                dict(\n                    type='ObjectSample',\n                    db_sampler=dict(\n                        data_root='data/nuscenes/',\n                        info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',\n                        rate=1.0,\n                        prepare=dict(\n                            filter_by_difficulty=[-1],\n                            filter_by_min_points=dict(\n                                car=5,\n                                truck=5,\n                                bus=5,\n                                trailer=5,\n                                construction_vehicle=5,\n                                traffic_cone=5,\n                                barrier=5,\n                                motorcycle=5,\n                                bicycle=5,\n                                pedestrian=5)),\n                        classes=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        sample_groups=dict(\n                            car=2,\n                            truck=3,\n                            construction_vehicle=7,\n                            bus=4,\n                            trailer=6,\n                            barrier=2,\n                            motorcycle=6,\n                            bicycle=6,\n                            pedestrian=2,\n                            traffic_cone=2),\n                        points_loader=dict(\n                            type='LoadPointsFromFile',\n                            coord_type='LIDAR',\n                            load_dim=5,\n                            use_dim=[0, 1, 2, 3, 4],\n                            file_client_args=dict(backend='disk')))),\n                dict(\n                    type='GlobalRotScaleTrans',\n                    rot_range=[-0.785, 0.785],\n                    scale_ratio_range=[0.9, 1.1],\n                    translation_std=[0.5, 0.5, 0.5]),\n                dict(\n                    type='RandomFlip3D',\n                    sync_2d=False,\n                    flip_ratio_bev_horizontal=0.5,\n                    flip_ratio_bev_vertical=0.5),\n                dict(\n                    type='PointsRangeFilter',\n                    point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                dict(\n                    type='ObjectRangeFilter',\n                    point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                dict(\n                    type='ObjectNameFilter',\n                    classes=[\n                        'car', 'truck', 'construction_vehicle', 'bus',\n                        'trailer', 'barrier', 'motorcycle', 'bicycle',\n                        'pedestrian', 'traffic_cone'\n                    ]),\n                dict(type='PointShuffle'),\n                dict(\n                    type='DefaultFormatBundle3D',\n                    class_names=[\n                        'car', 'truck', 'construction_vehicle', 'bus',\n                        'trailer', 'barrier', 'motorcycle', 'bicycle',\n                        'pedestrian', 'traffic_cone'\n                    ]),\n                dict(\n                    type='Collect3D',\n                    keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n            ],\n            classes=[\n                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                'traffic_cone'\n            ],\n            test_mode=False,\n            use_valid_flag=True,\n            box_type_3d='LiDAR')),\n    val=dict(\n        type='NuScenesDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_val.pkl',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=9,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk'),\n                pad_empty_sweeps=True,\n                remove_close=True),\n            dict(\n                type='LoadAnnotations3D',\n                with_bbox_3d=True,\n                with_label_3d=True),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1333, 800),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='GlobalRotScaleTrans',\n                        rot_range=[0, 0],\n                        scale_ratio_range=[1.0, 1.0],\n                        translation_std=[0, 0, 0]),\n                    dict(type='RandomFlip3D'),\n                    dict(\n                        type='PointsRangeFilter',\n                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(\n                        type='Collect3D',\n                        keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=False,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=True,\n        box_type_3d='LiDAR'),\n    test=dict(\n        type='NuScenesDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_val.pkl',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=9,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk'),\n                pad_empty_sweeps=True,\n                remove_close=True),\n            dict(\n                type='LoadAnnotations3D',\n                with_bbox_3d=True,\n                with_label_3d=True),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1333, 800),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='GlobalRotScaleTrans',\n                        rot_range=[0, 0],\n                        scale_ratio_range=[1.0, 1.0],\n                        translation_std=[0, 0, 0]),\n                    dict(type='RandomFlip3D'),\n                    dict(\n                        type='PointsRangeFilter',\n                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(\n                        type='Collect3D',\n                        keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=False,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=True,\n        box_type_3d='LiDAR'))\nevaluation = dict(\n    interval=1,\n    pipeline=[\n        dict(\n            type='LoadPointsFromFile',\n            coord_type='LIDAR',\n            load_dim=5,\n            use_dim=5,\n            file_client_args=dict(backend='disk')),\n        dict(\n            type='LoadPointsFromMultiSweeps',\n            sweeps_num=10,\n            file_client_args=dict(backend='disk')),\n        dict(\n            type='DefaultFormatBundle3D',\n            class_names=[\n                'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                'barrier'\n            ],\n            with_label=False),\n        dict(type='Collect3D', keys=['points'])\n    ])\noptimizer = dict(type='AdamW', lr=2.5e-05, weight_decay=0.01)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='cyclic',\n    target_ratio=(10, 0.0001),\n    cyclic_times=1,\n    step_ratio_up=0.4)\nmomentum_config = dict(\n    policy='cyclic',\n    target_ratio=(0.8947368421052632, 1),\n    cyclic_times=1,\n    step_ratio_up=0.4)\nrunner = dict(type='EpochBasedRunner', max_epochs=20)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(\n    interval=50,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nwork_dir = './work_dirs/secondmambadss_split14_re/second\u589e\u5f3a'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nplugin = 'plugin/futr3d'\nvoxel_size = [0.075, 0.075, 0.2]\ncenter_head = dict(\n    type='CenterHead',\n    in_channels=512,\n    tasks=[\n        dict(num_class=1, class_names=['car']),\n        dict(num_class=2, class_names=['truck', 'construction_vehicle']),\n        dict(num_class=2, class_names=['bus', 'trailer']),\n        dict(num_class=1, class_names=['barrier']),\n        dict(num_class=2, class_names=['motorcycle', 'bicycle']),\n        dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])\n    ],\n    common_heads=dict(\n        reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),\n    share_conv_channel=64,\n    bbox_coder=dict(\n        type='CenterPointBBoxCoder',\n        pc_range=[-54, -54],\n        post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n        max_num=500,\n        score_threshold=0.1,\n        out_size_factor=8,\n        voxel_size=[0.075, 0.075],\n        code_size=9),\n    separate_head=dict(type='SeparateHead', init_bias=-2.19, final_kernel=3),\n    loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),\n    loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),\n    norm_bbox=True)\nmodel = dict(\n    type='FUTR3D',\n    aux_weight=0.5,\n    pts_voxel_layer=dict(\n        max_num_points=10,\n        voxel_size=[0.075, 0.075, 0.2],\n        max_voxels=(120000, 160000),\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    pts_voxel_encoder=dict(type='HardSimpleVFE', num_features=5),\n    pts_middle_encoder=dict(\n        type='SparseEncoder',\n        in_channels=5,\n        sparse_shape=[41, 1440, 1440],\n        output_channels=128,\n        order=('conv', 'norm', 'act'),\n        encoder_channels=((16, 16, 32), (32, 32, 64), (64, 64, 128), (128,\n                                                                      128)),\n        encoder_paddings=((0, 0, 1), (0, 0, 1), (0, 0, [0, 1, 1]), (0, 0)),\n        block_type='basicblock'),\n    pts_backbone=dict(type='SECONDMamba'),\n    pts_neck=dict(\n        type='FPN',\n        norm_cfg=dict(type='BN2d', eps=0.001, momentum=0.01),\n        act_cfg=dict(type='ReLU', inplace=False),\n        in_channels=[256, 256],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs=True,\n        num_outs=4,\n        relu_before_extra_convs=True),\n    pts_bbox_head=dict(\n        type='FUTR3DHead',\n        use_dab=True,\n        use_dss=True,\n        use_hybrid=False,\n        hybrid=None,\n        dss_batch_first=False,\n        dss_drop_prob=0.1,\n        dss_mamba_prenorm=False,\n        dss_mamba_cfg=dict(),\n        dss_mamba_version='DSSMamba_Tiny',\n        dss_num_layers=2,\n        dss_rope=False,\n        dss_morton_rearrange=True,\n        dss_conv_path=False,\n        dss_xy=True,\n        dss_deepseek_format=False,\n        use_mss=False,\n        anchor_size=3,\n        use_aux=True,\n        aux_head=dict(\n            type='CenterHead',\n            in_channels=512,\n            tasks=[\n                dict(num_class=1, class_names=['car']),\n                dict(\n                    num_class=2, class_names=['truck',\n                                              'construction_vehicle']),\n                dict(num_class=2, class_names=['bus', 'trailer']),\n                dict(num_class=1, class_names=['barrier']),\n                dict(num_class=2, class_names=['motorcycle', 'bicycle']),\n                dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])\n            ],\n            common_heads=dict(\n                reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),\n            share_conv_channel=64,\n            bbox_coder=dict(\n                type='CenterPointBBoxCoder',\n                pc_range=[-54, -54],\n                post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n                max_num=500,\n                score_threshold=0.1,\n                out_size_factor=8,\n                voxel_size=[0.075, 0.075],\n                code_size=9),\n            separate_head=dict(\n                type='SeparateHead', init_bias=-2.19, final_kernel=3),\n            loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),\n            loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),\n            norm_bbox=True),\n        mix_selection=False,\n        num_query=900,\n        num_classes=10,\n        in_channels=256,\n        pc_range=[-54, -54, -5.0, 54, 54, 3.0],\n        sync_cls_avg_factor=True,\n        with_box_refine=True,\n        as_two_stage=False,\n        code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],\n        transformer=dict(\n            type='FUTR3DTransformer',\n            use_dab=True,\n            decoder=dict(\n                type='FUTR3DTransformerDecoder',\n                num_layers=6,\n                use_dab=True,\n                anchor_size=3,\n                return_intermediate=True,\n                transformerlayers=dict(\n                    type='DetrTransformerDecoderLayer',\n                    attn_cfgs=[\n                        dict(\n                            type='MultiheadAttention',\n                            embed_dims=256,\n                            num_heads=8,\n                            dropout=0.1),\n                        dict(type='FUTR3DAttention', embed_dims=256)\n                    ],\n                    feedforward_channels=1024,\n                    ffn_dropout=0.1,\n                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',\n                                     'ffn', 'norm')))),\n        positional_encoding=dict(\n            type='SinePositionalEncoding',\n            num_feats=128,\n            normalize=True,\n            offset=-0.5),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=2.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=0.25),\n        loss_iou=dict(type='GIoULoss', loss_weight=0)),\n    train_cfg=dict(\n        pts=dict(\n            point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0],\n            pc_range=[-54, -54, -5.0, 54, 54, 3.0],\n            grid_size=[1440, 1440, 40],\n            voxel_size=[0.075, 0.075, 0.2],\n            out_size_factor=8,\n            dense_reg=1,\n            gaussian_overlap=0.1,\n            max_objs=500,\n            min_radius=2,\n            code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],\n            assigner=dict(\n                type='HungarianAssigner3D',\n                cls_cost=dict(type='FocalLossCost', weight=2.0),\n                reg_cost=dict(type='BBox3DL1Cost', weight=0.25),\n                iou_cost=dict(type='IoUCost', weight=0)))),\n    test_cfg=dict(\n        pts=dict(\n            pc_range=[-54, -54],\n            post_center_limit_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n            max_per_img=500,\n            max_pool_nms=False,\n            min_radius=[4, 12, 10, 1, 0.85, 0.175],\n            out_size_factor=8,\n            voxel_size=[0.075, 0.075],\n            nms_type='circle',\n            pre_max_size=1000,\n            post_max_size=83,\n            nms_thr=0.2,\n            max_num=300,\n            score_threshold=0,\n            post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0])))\ndb_sampler = dict(\n    data_root='data/nuscenes/',\n    info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',\n    rate=1.0,\n    prepare=dict(\n        filter_by_difficulty=[-1],\n        filter_by_min_points=dict(\n            car=5,\n            truck=5,\n            bus=5,\n            trailer=5,\n            construction_vehicle=5,\n            traffic_cone=5,\n            barrier=5,\n            motorcycle=5,\n            bicycle=5,\n            pedestrian=5)),\n    classes=[\n        'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n        'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n    ],\n    sample_groups=dict(\n        car=2,\n        truck=3,\n        construction_vehicle=7,\n        bus=4,\n        trailer=6,\n        barrier=2,\n        motorcycle=6,\n        bicycle=6,\n        pedestrian=2,\n        traffic_cone=2),\n    points_loader=dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk')))\nfind_unused_parameters = True\ncustom_hooks = [dict(type='FadeOjectSampleHook', num_last_epochs=5)]\ngpu_ids = range(0, 2)\n", "seed": 0, "exp_name": "secondmambadss_split14_re.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 3e-05, "memory": 19822, "data_time": 0.10001, "loss_cls": 1.34203, "loss_bbox": 2.25132, "d0.loss_cls": 1.63952, "d0.loss_bbox": 4.43685, "d1.loss_cls": 1.49194, "d1.loss_bbox": 2.29938, "d2.loss_cls": 1.4458, "d2.loss_bbox": 2.28561, "d3.loss_cls": 1.4115, "d3.loss_bbox": 2.27223, "d4.loss_cls": 1.36987, "d4.loss_bbox": 2.26169, "aux_task0.loss_heatmap": 300.0256, "aux_task0.loss_bbox": 0.87752, "aux_task1.loss_heatmap": 753.17469, "aux_task1.loss_bbox": 1.0053, "aux_task2.loss_heatmap": 984.47704, "aux_task2.loss_bbox": 1.14379, "aux_task3.loss_heatmap": 851.07149, "aux_task3.loss_bbox": 0.70732, "aux_task4.loss_heatmap": 529.91009, "aux_task4.loss_bbox": 0.68016, "aux_task5.loss_heatmap": 662.37708, "aux_task5.loss_bbox": 0.736, "loss": 4110.6938, "grad_norm": 131691.49277, "time": 1.4908}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 3e-05, "memory": 19822, "data_time": 0.00833, "loss_cls": 1.17592, "loss_bbox": 2.02465, "d0.loss_cls": 1.19096, "d0.loss_bbox": 4.18943, "d1.loss_cls": 1.18443, "d1.loss_bbox": 2.16028, "d2.loss_cls": 1.18537, "d2.loss_bbox": 2.11963, "d3.loss_cls": 1.18313, "d3.loss_bbox": 2.08437, "d4.loss_cls": 1.17952, "d4.loss_bbox": 2.05641, "aux_task0.loss_heatmap": 300.77015, "aux_task0.loss_bbox": 0.86441, "aux_task1.loss_heatmap": 687.78438, "aux_task1.loss_bbox": 0.96732, "aux_task2.loss_heatmap": 952.31485, "aux_task2.loss_bbox": 1.11134, "aux_task3.loss_heatmap": 722.81203, "aux_task3.loss_bbox": 0.69358, "aux_task4.loss_heatmap": 503.73559, "aux_task4.loss_bbox": 0.66664, "aux_task5.loss_heatmap": 655.08136, "aux_task5.loss_bbox": 0.73496, "loss": 3849.27074, "grad_norm": 100220.57914, "time": 1.11607}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 3e-05, "memory": 19822, "data_time": 0.00789, "loss_cls": 1.16989, "loss_bbox": 1.91005, "d0.loss_cls": 1.17483, "d0.loss_bbox": 2.92599, "d1.loss_cls": 1.18118, "d1.loss_bbox": 1.84866, "d2.loss_cls": 1.17899, "d2.loss_bbox": 1.82962, "d3.loss_cls": 1.17653, "d3.loss_bbox": 1.84748, "d4.loss_cls": 1.17037, "d4.loss_bbox": 1.87647, "aux_task0.loss_heatmap": 290.71502, "aux_task0.loss_bbox": 0.84983, "aux_task1.loss_heatmap": 637.38886, "aux_task1.loss_bbox": 0.96516, "aux_task2.loss_heatmap": 902.02966, "aux_task2.loss_bbox": 1.12207, "aux_task3.loss_heatmap": 693.25195, "aux_task3.loss_bbox": 0.68381, "aux_task4.loss_heatmap": 477.27548, "aux_task4.loss_bbox": 0.65528, "aux_task5.loss_heatmap": 574.45998, "aux_task5.loss_bbox": 0.7074, "loss": 3599.39457, "grad_norm": 82175.62766, "time": 1.11104}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 3e-05, "memory": 20027, "data_time": 0.00844, "loss_cls": 1.1341, "loss_bbox": 1.89728, "d0.loss_cls": 1.18032, "d0.loss_bbox": 1.80768, "d1.loss_cls": 1.18018, "d1.loss_bbox": 1.78331, "d2.loss_cls": 1.169, "d2.loss_bbox": 1.82505, "d3.loss_cls": 1.15462, "d3.loss_bbox": 1.85923, "d4.loss_cls": 1.13467, "d4.loss_bbox": 1.88519, "aux_task0.loss_heatmap": 267.53106, "aux_task0.loss_bbox": 0.84338, "aux_task1.loss_heatmap": 626.18747, "aux_task1.loss_bbox": 0.95618, "aux_task2.loss_heatmap": 923.80367, "aux_task2.loss_bbox": 1.08314, "aux_task3.loss_heatmap": 577.66963, "aux_task3.loss_bbox": 0.69487, "aux_task4.loss_heatmap": 441.55117, "aux_task4.loss_bbox": 0.64997, "aux_task5.loss_heatmap": 598.76971, "aux_task5.loss_bbox": 0.71192, "loss": 3458.4628, "grad_norm": 57557.55005, "time": 1.10822}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 3e-05, "memory": 20027, "data_time": 0.00779, "loss_cls": 1.12502, "loss_bbox": 1.76781, "d0.loss_cls": 1.17375, "d0.loss_bbox": 1.74952, "d1.loss_cls": 1.16376, "d1.loss_bbox": 1.75411, "d2.loss_cls": 1.14772, "d2.loss_bbox": 1.76872, "d3.loss_cls": 1.13552, "d3.loss_bbox": 1.77763, "d4.loss_cls": 1.11939, "d4.loss_bbox": 1.77706, "aux_task0.loss_heatmap": 251.81975, "aux_task0.loss_bbox": 0.81957, "aux_task1.loss_heatmap": 587.61991, "aux_task1.loss_bbox": 0.93657, "aux_task2.loss_heatmap": 867.0537, "aux_task2.loss_bbox": 1.05591, "aux_task3.loss_heatmap": 689.53981, "aux_task3.loss_bbox": 0.63746, "aux_task4.loss_heatmap": 415.88863, "aux_task4.loss_bbox": 0.62727, "aux_task5.loss_heatmap": 605.68956, "aux_task5.loss_bbox": 0.67815, "loss": 3439.82631, "grad_norm": 61027.24598, "time": 1.10873}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 3e-05, "memory": 20027, "data_time": 0.0079, "loss_cls": 1.11724, "loss_bbox": 1.75101, "d0.loss_cls": 1.17415, "d0.loss_bbox": 1.74999, "d1.loss_cls": 1.15623, "d1.loss_bbox": 1.75796, "d2.loss_cls": 1.13314, "d2.loss_bbox": 1.77067, "d3.loss_cls": 1.12734, "d3.loss_bbox": 1.76621, "d4.loss_cls": 1.10872, "d4.loss_bbox": 1.7444, "aux_task0.loss_heatmap": 220.66681, "aux_task0.loss_bbox": 0.79409, "aux_task1.loss_heatmap": 578.67481, "aux_task1.loss_bbox": 0.94014, "aux_task2.loss_heatmap": 797.56889, "aux_task2.loss_bbox": 1.05928, "aux_task3.loss_heatmap": 726.53985, "aux_task3.loss_bbox": 0.65128, "aux_task4.loss_heatmap": 389.73914, "aux_task4.loss_bbox": 0.61485, "aux_task5.loss_heatmap": 584.9227, "aux_task5.loss_bbox": 0.66663, "loss": 3320.19556, "grad_norm": 52235.57887, "time": 1.10951}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 3e-05, "memory": 20027, "data_time": 0.00769, "loss_cls": 1.09588, "loss_bbox": 1.7238, "d0.loss_cls": 1.1784, "d0.loss_bbox": 1.76384, "d1.loss_cls": 1.15537, "d1.loss_bbox": 1.76597, "d2.loss_cls": 1.12253, "d2.loss_bbox": 1.75775, "d3.loss_cls": 1.11991, "d3.loss_bbox": 1.74453, "d4.loss_cls": 1.08918, "d4.loss_bbox": 1.72724, "aux_task0.loss_heatmap": 228.1928, "aux_task0.loss_bbox": 0.77968, "aux_task1.loss_heatmap": 538.61465, "aux_task1.loss_bbox": 0.91384, "aux_task2.loss_heatmap": 716.77616, "aux_task2.loss_bbox": 1.04496, "aux_task3.loss_heatmap": 605.77428, "aux_task3.loss_bbox": 0.64376, "aux_task4.loss_heatmap": 351.18846, "aux_task4.loss_bbox": 0.61173, "aux_task5.loss_heatmap": 532.5485, "aux_task5.loss_bbox": 0.66429, "loss": 2994.99745, "grad_norm": 24968.01281, "time": 1.10979}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 3e-05, "memory": 20027, "data_time": 0.00738, "loss_cls": 1.06433, "loss_bbox": 1.70485, "d0.loss_cls": 1.17025, "d0.loss_bbox": 1.74323, "d1.loss_cls": 1.13938, "d1.loss_bbox": 1.73986, "d2.loss_cls": 1.08792, "d2.loss_bbox": 1.71479, "d3.loss_cls": 1.08288, "d3.loss_bbox": 1.6993, "d4.loss_cls": 1.06454, "d4.loss_bbox": 1.70241, "aux_task0.loss_heatmap": 98.73942, "aux_task0.loss_bbox": 0.67259, "aux_task1.loss_heatmap": 239.57063, "aux_task1.loss_bbox": 0.83211, "aux_task2.loss_heatmap": 288.0495, "aux_task2.loss_bbox": 0.9418, "aux_task3.loss_heatmap": 327.88623, "aux_task3.loss_bbox": 0.56763, "aux_task4.loss_heatmap": 133.20091, "aux_task4.loss_bbox": 0.54366, "aux_task5.loss_heatmap": 242.98238, "aux_task5.loss_bbox": 0.61832, "loss": 1351.51889, "grad_norm": 81176.33017, "time": 1.11544}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 3e-05, "memory": 20027, "data_time": 0.0078, "loss_cls": 1.06657, "loss_bbox": 1.71256, "d0.loss_cls": 1.16256, "d0.loss_bbox": 1.75862, "d1.loss_cls": 1.12992, "d1.loss_bbox": 1.74852, "d2.loss_cls": 1.07371, "d2.loss_bbox": 1.72796, "d3.loss_cls": 1.07099, "d3.loss_bbox": 1.71809, "d4.loss_cls": 1.06218, "d4.loss_bbox": 1.71359, "aux_task0.loss_heatmap": 16.86869, "aux_task0.loss_bbox": 0.51821, "aux_task1.loss_heatmap": 41.14197, "aux_task1.loss_bbox": 0.65854, "aux_task2.loss_heatmap": 35.092, "aux_task2.loss_bbox": 0.75828, "aux_task3.loss_heatmap": 64.27717, "aux_task3.loss_bbox": 0.43056, "aux_task4.loss_heatmap": 15.37586, "aux_task4.loss_bbox": 0.45441, "aux_task5.loss_heatmap": 41.43978, "aux_task5.loss_bbox": 0.51049, "loss": 234.47122, "grad_norm": 8234.91471, "time": 1.11535}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 3e-05, "memory": 20027, "data_time": 0.00789, "loss_cls": 1.06175, "loss_bbox": 1.68233, "d0.loss_cls": 1.15373, "d0.loss_bbox": 1.74845, "d1.loss_cls": 1.09713, "d1.loss_bbox": 1.71282, "d2.loss_cls": 1.05818, "d2.loss_bbox": 1.68576, "d3.loss_cls": 1.06339, "d3.loss_bbox": 1.67903, "d4.loss_cls": 1.0595, "d4.loss_bbox": 1.67796, "aux_task0.loss_heatmap": 4.60101, "aux_task0.loss_bbox": 0.44708, "aux_task1.loss_heatmap": 9.99634, "aux_task1.loss_bbox": 0.55745, "aux_task2.loss_heatmap": 7.76942, "aux_task2.loss_bbox": 0.60963, "aux_task3.loss_heatmap": 23.22006, "aux_task3.loss_bbox": 0.42466, "aux_task4.loss_heatmap": 3.87639, "aux_task4.loss_bbox": 0.43209, "aux_task5.loss_heatmap": 12.05013, "aux_task5.loss_bbox": 0.47246, "loss": 81.13675, "grad_norm": 1226.65366, "time": 1.11015}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 3e-05, "memory": 20027, "data_time": 0.00778, "loss_cls": 1.04704, "loss_bbox": 1.66715, "d0.loss_cls": 1.12914, "d0.loss_bbox": 1.75487, "d1.loss_cls": 1.05735, "d1.loss_bbox": 1.68699, "d2.loss_cls": 1.03687, "d2.loss_bbox": 1.66921, "d3.loss_cls": 1.04163, "d3.loss_bbox": 1.66765, "d4.loss_cls": 1.04649, "d4.loss_bbox": 1.67012, "aux_task0.loss_heatmap": 2.33675, "aux_task0.loss_bbox": 0.44704, "aux_task1.loss_heatmap": 3.94123, "aux_task1.loss_bbox": 0.52233, "aux_task2.loss_heatmap": 3.52998, "aux_task2.loss_bbox": 0.57155, "aux_task3.loss_heatmap": 7.70238, "aux_task3.loss_bbox": 0.42196, "aux_task4.loss_heatmap": 2.14701, "aux_task4.loss_bbox": 0.43792, "aux_task5.loss_heatmap": 4.76458, "aux_task5.loss_bbox": 0.47617, "loss": 43.7734, "grad_norm": 450.45503, "time": 1.10567}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 3e-05, "memory": 20027, "data_time": 0.00879, "loss_cls": 1.04267, "loss_bbox": 1.65627, "d0.loss_cls": 1.10961, "d0.loss_bbox": 1.7518, "d1.loss_cls": 1.03835, "d1.loss_bbox": 1.67124, "d2.loss_cls": 1.03526, "d2.loss_bbox": 1.66328, "d3.loss_cls": 1.03856, "d3.loss_bbox": 1.65971, "d4.loss_cls": 1.04032, "d4.loss_bbox": 1.65852, "aux_task0.loss_heatmap": 1.78615, "aux_task0.loss_bbox": 0.46163, "aux_task1.loss_heatmap": 2.41941, "aux_task1.loss_bbox": 0.5088, "aux_task2.loss_heatmap": 2.30662, "aux_task2.loss_bbox": 0.53306, "aux_task3.loss_heatmap": 3.4838, "aux_task3.loss_bbox": 0.42455, "aux_task4.loss_heatmap": 1.75826, "aux_task4.loss_bbox": 0.43671, "aux_task5.loss_heatmap": 2.64419, "aux_task5.loss_bbox": 0.47257, "loss": 33.60131, "grad_norm": 179.36985, "time": 1.11586}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 3e-05, "memory": 20122, "data_time": 0.00815, "loss_cls": 1.02766, "loss_bbox": 1.65083, "d0.loss_cls": 1.09027, "d0.loss_bbox": 1.74711, "d1.loss_cls": 1.02341, "d1.loss_bbox": 1.66654, "d2.loss_cls": 1.01908, "d2.loss_bbox": 1.6583, "d3.loss_cls": 1.0236, "d3.loss_bbox": 1.65243, "d4.loss_cls": 1.02603, "d4.loss_bbox": 1.64863, "aux_task0.loss_heatmap": 1.5837, "aux_task0.loss_bbox": 0.44769, "aux_task1.loss_heatmap": 1.93189, "aux_task1.loss_bbox": 0.50365, "aux_task2.loss_heatmap": 1.94096, "aux_task2.loss_bbox": 0.52036, "aux_task3.loss_heatmap": 2.62666, "aux_task3.loss_bbox": 0.4269, "aux_task4.loss_heatmap": 1.69156, "aux_task4.loss_bbox": 0.43946, "aux_task5.loss_heatmap": 1.95732, "aux_task5.loss_bbox": 0.47352, "loss": 30.77753, "grad_norm": 69.44965, "time": 1.11451}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 3e-05, "memory": 20122, "data_time": 0.00913, "loss_cls": 1.02398, "loss_bbox": 1.6299, "d0.loss_cls": 1.07951, "d0.loss_bbox": 1.73643, "d1.loss_cls": 1.01931, "d1.loss_bbox": 1.64979, "d2.loss_cls": 1.01688, "d2.loss_bbox": 1.6421, "d3.loss_cls": 1.018, "d3.loss_bbox": 1.64317, "d4.loss_cls": 1.01983, "d4.loss_bbox": 1.63531, "aux_task0.loss_heatmap": 1.56147, "aux_task0.loss_bbox": 0.45513, "aux_task1.loss_heatmap": 1.79198, "aux_task1.loss_bbox": 0.50657, "aux_task2.loss_heatmap": 1.84923, "aux_task2.loss_bbox": 0.51404, "aux_task3.loss_heatmap": 1.88802, "aux_task3.loss_bbox": 0.42378, "aux_task4.loss_heatmap": 1.67247, "aux_task4.loss_bbox": 0.4331, "aux_task5.loss_heatmap": 1.789, "aux_task5.loss_bbox": 0.4767, "loss": 29.4757, "grad_norm": 139.86506, "time": 1.1152}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 3e-05, "memory": 20122, "data_time": 0.00809, "loss_cls": 1.01964, "loss_bbox": 1.62579, "d0.loss_cls": 1.07261, "d0.loss_bbox": 1.72747, "d1.loss_cls": 1.01261, "d1.loss_bbox": 1.64197, "d2.loss_cls": 1.00877, "d2.loss_bbox": 1.63294, "d3.loss_cls": 1.01196, "d3.loss_bbox": 1.62959, "d4.loss_cls": 1.01427, "d4.loss_bbox": 1.62536, "aux_task0.loss_heatmap": 1.56686, "aux_task0.loss_bbox": 0.44687, "aux_task1.loss_heatmap": 1.75731, "aux_task1.loss_bbox": 0.5012, "aux_task2.loss_heatmap": 1.83408, "aux_task2.loss_bbox": 0.50227, "aux_task3.loss_heatmap": 1.83844, "aux_task3.loss_bbox": 0.40945, "aux_task4.loss_heatmap": 1.6684, "aux_task4.loss_bbox": 0.43685, "aux_task5.loss_heatmap": 1.74129, "aux_task5.loss_bbox": 0.46884, "loss": 29.19484, "grad_norm": 102.62071, "time": 1.11764}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 3e-05, "memory": 20122, "data_time": 0.00791, "loss_cls": 1.03382, "loss_bbox": 1.61119, "d0.loss_cls": 1.07793, "d0.loss_bbox": 1.71151, "d1.loss_cls": 1.02128, "d1.loss_bbox": 1.63541, "d2.loss_cls": 1.02299, "d2.loss_bbox": 1.62549, "d3.loss_cls": 1.02731, "d3.loss_bbox": 1.61703, "d4.loss_cls": 1.0305, "d4.loss_bbox": 1.61474, "aux_task0.loss_heatmap": 1.5465, "aux_task0.loss_bbox": 0.4438, "aux_task1.loss_heatmap": 1.7406, "aux_task1.loss_bbox": 0.50087, "aux_task2.loss_heatmap": 1.82125, "aux_task2.loss_bbox": 0.50165, "aux_task3.loss_heatmap": 1.92013, "aux_task3.loss_bbox": 0.42904, "aux_task4.loss_heatmap": 1.67151, "aux_task4.loss_bbox": 0.42694, "aux_task5.loss_heatmap": 1.74643, "aux_task5.loss_bbox": 0.46839, "loss": 29.24632, "grad_norm": 47.01152, "time": 1.10605}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 3e-05, "memory": 20122, "data_time": 0.0075, "loss_cls": 1.02164, "loss_bbox": 1.62582, "d0.loss_cls": 1.06487, "d0.loss_bbox": 1.71121, "d1.loss_cls": 1.01442, "d1.loss_bbox": 1.63841, "d2.loss_cls": 1.01475, "d2.loss_bbox": 1.63667, "d3.loss_cls": 1.01555, "d3.loss_bbox": 1.63588, "d4.loss_cls": 1.01838, "d4.loss_bbox": 1.62589, "aux_task0.loss_heatmap": 1.56295, "aux_task0.loss_bbox": 0.44335, "aux_task1.loss_heatmap": 1.73918, "aux_task1.loss_bbox": 0.50798, "aux_task2.loss_heatmap": 1.81211, "aux_task2.loss_bbox": 0.50806, "aux_task3.loss_heatmap": 1.79084, "aux_task3.loss_bbox": 0.41592, "aux_task4.loss_heatmap": 1.67356, "aux_task4.loss_bbox": 0.42747, "aux_task5.loss_heatmap": 1.73258, "aux_task5.loss_bbox": 0.46966, "loss": 29.10717, "grad_norm": 157.94446, "time": 1.10914}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 3e-05, "memory": 20122, "data_time": 0.0074, "loss_cls": 1.0175, "loss_bbox": 1.60385, "d0.loss_cls": 1.04868, "d0.loss_bbox": 1.69437, "d1.loss_cls": 1.00682, "d1.loss_bbox": 1.62315, "d2.loss_cls": 1.0086, "d2.loss_bbox": 1.61099, "d3.loss_cls": 1.01219, "d3.loss_bbox": 1.60567, "d4.loss_cls": 1.01323, "d4.loss_bbox": 1.60463, "aux_task0.loss_heatmap": 1.54913, "aux_task0.loss_bbox": 0.43998, "aux_task1.loss_heatmap": 1.72258, "aux_task1.loss_bbox": 0.50171, "aux_task2.loss_heatmap": 1.798, "aux_task2.loss_bbox": 0.51523, "aux_task3.loss_heatmap": 1.76764, "aux_task3.loss_bbox": 0.41267, "aux_task4.loss_heatmap": 1.6708, "aux_task4.loss_bbox": 0.42504, "aux_task5.loss_heatmap": 1.70933, "aux_task5.loss_bbox": 0.46512, "loss": 28.82691, "grad_norm": 43.47767, "time": 1.1137}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 3e-05, "memory": 20122, "data_time": 0.00754, "loss_cls": 1.01596, "loss_bbox": 1.61332, "d0.loss_cls": 1.04234, "d0.loss_bbox": 1.70053, "d1.loss_cls": 1.01088, "d1.loss_bbox": 1.63544, "d2.loss_cls": 1.01041, "d2.loss_bbox": 1.62408, "d3.loss_cls": 1.01179, "d3.loss_bbox": 1.61896, "d4.loss_cls": 1.01126, "d4.loss_bbox": 1.61833, "aux_task0.loss_heatmap": 1.56143, "aux_task0.loss_bbox": 0.4533, "aux_task1.loss_heatmap": 1.74202, "aux_task1.loss_bbox": 0.50291, "aux_task2.loss_heatmap": 1.81283, "aux_task2.loss_bbox": 0.49916, "aux_task3.loss_heatmap": 1.72969, "aux_task3.loss_bbox": 0.41674, "aux_task4.loss_heatmap": 1.67005, "aux_task4.loss_bbox": 0.42994, "aux_task5.loss_heatmap": 1.69616, "aux_task5.loss_bbox": 0.46407, "loss": 28.8916, "grad_norm": 60.26937, "time": 1.1119}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 3e-05, "memory": 20122, "data_time": 0.00758, "loss_cls": 1.0183, "loss_bbox": 1.60051, "d0.loss_cls": 1.0395, "d0.loss_bbox": 1.68791, "d1.loss_cls": 1.01079, "d1.loss_bbox": 1.62433, "d2.loss_cls": 1.01355, "d2.loss_bbox": 1.60634, "d3.loss_cls": 1.01425, "d3.loss_bbox": 1.60305, "d4.loss_cls": 1.01674, "d4.loss_bbox": 1.59845, "aux_task0.loss_heatmap": 1.57092, "aux_task0.loss_bbox": 0.44716, "aux_task1.loss_heatmap": 1.73289, "aux_task1.loss_bbox": 0.50784, "aux_task2.loss_heatmap": 1.81102, "aux_task2.loss_bbox": 0.50641, "aux_task3.loss_heatmap": 1.71951, "aux_task3.loss_bbox": 0.41495, "aux_task4.loss_heatmap": 1.66973, "aux_task4.loss_bbox": 0.42892, "aux_task5.loss_heatmap": 1.69772, "aux_task5.loss_bbox": 0.46648, "loss": 28.80727, "grad_norm": 66.06885, "time": 1.11254}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 3e-05, "memory": 20122, "data_time": 0.00752, "loss_cls": 1.02356, "loss_bbox": 1.59196, "d0.loss_cls": 1.03959, "d0.loss_bbox": 1.67614, "d1.loss_cls": 1.01511, "d1.loss_bbox": 1.61536, "d2.loss_cls": 1.01629, "d2.loss_bbox": 1.6034, "d3.loss_cls": 1.01801, "d3.loss_bbox": 1.59882, "d4.loss_cls": 1.02019, "d4.loss_bbox": 1.59409, "aux_task0.loss_heatmap": 1.57393, "aux_task0.loss_bbox": 0.44709, "aux_task1.loss_heatmap": 1.73116, "aux_task1.loss_bbox": 0.50638, "aux_task2.loss_heatmap": 1.81449, "aux_task2.loss_bbox": 0.49676, "aux_task3.loss_heatmap": 1.73663, "aux_task3.loss_bbox": 0.40963, "aux_task4.loss_heatmap": 1.66757, "aux_task4.loss_bbox": 0.42895, "aux_task5.loss_heatmap": 1.69565, "aux_task5.loss_bbox": 0.46651, "loss": 28.78725, "grad_norm": 50.34908, "time": 1.10564}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 3e-05, "memory": 20122, "data_time": 0.00754, "loss_cls": 1.01441, "loss_bbox": 1.59509, "d0.loss_cls": 1.02752, "d0.loss_bbox": 1.6747, "d1.loss_cls": 1.00784, "d1.loss_bbox": 1.62032, "d2.loss_cls": 1.00813, "d2.loss_bbox": 1.60789, "d3.loss_cls": 1.01115, "d3.loss_bbox": 1.60774, "d4.loss_cls": 1.01124, "d4.loss_bbox": 1.6035, "aux_task0.loss_heatmap": 1.55375, "aux_task0.loss_bbox": 0.45026, "aux_task1.loss_heatmap": 1.72487, "aux_task1.loss_bbox": 0.5029, "aux_task2.loss_heatmap": 1.80923, "aux_task2.loss_bbox": 0.50701, "aux_task3.loss_heatmap": 1.73935, "aux_task3.loss_bbox": 0.41491, "aux_task4.loss_heatmap": 1.66832, "aux_task4.loss_bbox": 0.43574, "aux_task5.loss_heatmap": 1.70911, "aux_task5.loss_bbox": 0.46019, "loss": 28.76516, "grad_norm": 45.79957, "time": 1.11699}
