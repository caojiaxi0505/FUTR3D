{"env_info": "sys.platform: linux\nPython: 3.8.20 | packaged by conda-forge | (default, Sep 30 2024, 17:52:49) [GCC 13.3.0]\nCUDA available: True\nGPU 0,1: NVIDIA GeForce RTX 4090 D\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.6, V11.6.55\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0\nPyTorch: 1.13.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2022.1-Product Build 20220311 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.6\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.14.0\nOpenCV: 4.11.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.4\nMMCV CUDA Compiler: 11.6\nMMDetection: 2.27.0\nMMSegmentation: 0.30.0\nMMDetection3D: 1.0.0rc6+637e2ea\nspconv2.0: True", "config": "point_cloud_range = [-54, -54, -5.0, 54, 54, 3.0]\nclass_names = [\n    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n]\ndataset_type = 'NuScenesDataset'\ndata_root = 'data/nuscenes/'\ninput_modality = dict(\n    use_lidar=True,\n    use_camera=False,\n    use_radar=False,\n    use_map=False,\n    use_external=False)\nfile_client_args = dict(backend='disk')\ntrain_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),\n    dict(\n        type='ObjectSample',\n        db_sampler=dict(\n            data_root='data/nuscenes/',\n            info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',\n            rate=1.0,\n            prepare=dict(\n                filter_by_difficulty=[-1],\n                filter_by_min_points=dict(\n                    car=5,\n                    truck=5,\n                    bus=5,\n                    trailer=5,\n                    construction_vehicle=5,\n                    traffic_cone=5,\n                    barrier=5,\n                    motorcycle=5,\n                    bicycle=5,\n                    pedestrian=5)),\n            classes=[\n                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                'traffic_cone'\n            ],\n            sample_groups=dict(\n                car=2,\n                truck=3,\n                construction_vehicle=7,\n                bus=4,\n                trailer=6,\n                barrier=2,\n                motorcycle=6,\n                bicycle=6,\n                pedestrian=2,\n                traffic_cone=2),\n            points_loader=dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk')))),\n    dict(\n        type='GlobalRotScaleTrans',\n        rot_range=[-0.785, 0.785],\n        scale_ratio_range=[0.9, 1.1],\n        translation_std=[0.5, 0.5, 0.5]),\n    dict(\n        type='RandomFlip3D',\n        sync_2d=False,\n        flip_ratio_bev_horizontal=0.5,\n        flip_ratio_bev_vertical=0.5),\n    dict(\n        type='PointsRangeFilter',\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    dict(\n        type='ObjectRangeFilter',\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    dict(\n        type='ObjectNameFilter',\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(type='PointShuffle'),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(type='Collect3D', keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n]\ntest_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(\n        type='MultiScaleFlipAug3D',\n        img_scale=(1333, 800),\n        pts_scale_ratio=1,\n        flip=False,\n        transforms=[\n            dict(\n                type='GlobalRotScaleTrans',\n                rot_range=[0, 0],\n                scale_ratio_range=[1.0, 1.0],\n                translation_std=[0, 0, 0]),\n            dict(type='RandomFlip3D'),\n            dict(\n                type='PointsRangeFilter',\n                point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ],\n                with_label=False),\n            dict(type='Collect3D', keys=['points'])\n        ])\n]\neval_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        with_label=False),\n    dict(type='Collect3D', keys=['points'])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=4,\n    train=dict(\n        type='CBGSDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_train.pkl',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=10,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadAnnotations3D',\n                with_bbox_3d=True,\n                with_label_3d=True),\n            dict(\n                type='GlobalRotScaleTrans',\n                rot_range=[-0.3925, 0.3925],\n                scale_ratio_range=[0.95, 1.05],\n                translation_std=[0, 0, 0]),\n            dict(type='RandomFlip3D', flip_ratio_bev_horizontal=0.5),\n            dict(\n                type='PointsRangeFilter',\n                point_cloud_range=[-50, -50, -5, 50, 50, 3]),\n            dict(\n                type='ObjectRangeFilter',\n                point_cloud_range=[-50, -50, -5, 50, 50, 3]),\n            dict(\n                type='ObjectNameFilter',\n                classes=[\n                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                    'barrier'\n                ]),\n            dict(type='PointShuffle'),\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                    'barrier'\n                ]),\n            dict(\n                type='Collect3D',\n                keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n        ],\n        classes=[\n            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=False,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=False,\n        box_type_3d='LiDAR',\n        split=14,\n        dataset=dict(\n            type='NuScenesDataset',\n            data_root='data/nuscenes/',\n            ann_file='data/nuscenes/nuscenes_infos_train.pkl',\n            pipeline=[\n                dict(\n                    type='LoadPointsFromFile',\n                    coord_type='LIDAR',\n                    load_dim=5,\n                    use_dim=5,\n                    file_client_args=dict(backend='disk')),\n                dict(\n                    type='LoadPointsFromMultiSweeps',\n                    sweeps_num=9,\n                    use_dim=[0, 1, 2, 3, 4],\n                    file_client_args=dict(backend='disk'),\n                    pad_empty_sweeps=True,\n                    remove_close=True),\n                dict(\n                    type='LoadAnnotations3D',\n                    with_bbox_3d=True,\n                    with_label_3d=True),\n                dict(\n                    type='ObjectSample',\n                    db_sampler=dict(\n                        data_root='data/nuscenes/',\n                        info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',\n                        rate=1.0,\n                        prepare=dict(\n                            filter_by_difficulty=[-1],\n                            filter_by_min_points=dict(\n                                car=5,\n                                truck=5,\n                                bus=5,\n                                trailer=5,\n                                construction_vehicle=5,\n                                traffic_cone=5,\n                                barrier=5,\n                                motorcycle=5,\n                                bicycle=5,\n                                pedestrian=5)),\n                        classes=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        sample_groups=dict(\n                            car=2,\n                            truck=3,\n                            construction_vehicle=7,\n                            bus=4,\n                            trailer=6,\n                            barrier=2,\n                            motorcycle=6,\n                            bicycle=6,\n                            pedestrian=2,\n                            traffic_cone=2),\n                        points_loader=dict(\n                            type='LoadPointsFromFile',\n                            coord_type='LIDAR',\n                            load_dim=5,\n                            use_dim=[0, 1, 2, 3, 4],\n                            file_client_args=dict(backend='disk')))),\n                dict(\n                    type='GlobalRotScaleTrans',\n                    rot_range=[-0.785, 0.785],\n                    scale_ratio_range=[0.9, 1.1],\n                    translation_std=[0.5, 0.5, 0.5]),\n                dict(\n                    type='RandomFlip3D',\n                    sync_2d=False,\n                    flip_ratio_bev_horizontal=0.5,\n                    flip_ratio_bev_vertical=0.5),\n                dict(\n                    type='PointsRangeFilter',\n                    point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                dict(\n                    type='ObjectRangeFilter',\n                    point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                dict(\n                    type='ObjectNameFilter',\n                    classes=[\n                        'car', 'truck', 'construction_vehicle', 'bus',\n                        'trailer', 'barrier', 'motorcycle', 'bicycle',\n                        'pedestrian', 'traffic_cone'\n                    ]),\n                dict(type='PointShuffle'),\n                dict(\n                    type='DefaultFormatBundle3D',\n                    class_names=[\n                        'car', 'truck', 'construction_vehicle', 'bus',\n                        'trailer', 'barrier', 'motorcycle', 'bicycle',\n                        'pedestrian', 'traffic_cone'\n                    ]),\n                dict(\n                    type='Collect3D',\n                    keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n            ],\n            classes=[\n                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                'traffic_cone'\n            ],\n            test_mode=False,\n            use_valid_flag=True,\n            box_type_3d='LiDAR')),\n    val=dict(\n        type='NuScenesDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_val.pkl',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=9,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk'),\n                pad_empty_sweeps=True,\n                remove_close=True),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1333, 800),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='GlobalRotScaleTrans',\n                        rot_range=[0, 0],\n                        scale_ratio_range=[1.0, 1.0],\n                        translation_std=[0, 0, 0]),\n                    dict(type='RandomFlip3D'),\n                    dict(\n                        type='PointsRangeFilter',\n                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(type='Collect3D', keys=['points'])\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=False,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=True,\n        box_type_3d='LiDAR'),\n    test=dict(\n        type='NuScenesDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_val.pkl',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=9,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk'),\n                pad_empty_sweeps=True,\n                remove_close=True),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1333, 800),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='GlobalRotScaleTrans',\n                        rot_range=[0, 0],\n                        scale_ratio_range=[1.0, 1.0],\n                        translation_std=[0, 0, 0]),\n                    dict(type='RandomFlip3D'),\n                    dict(\n                        type='PointsRangeFilter',\n                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(type='Collect3D', keys=['points'])\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=False,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=True,\n        box_type_3d='LiDAR'))\nevaluation = dict(\n    interval=1,\n    pipeline=[\n        dict(\n            type='LoadPointsFromFile',\n            coord_type='LIDAR',\n            load_dim=5,\n            use_dim=5,\n            file_client_args=dict(backend='disk')),\n        dict(\n            type='LoadPointsFromMultiSweeps',\n            sweeps_num=10,\n            file_client_args=dict(backend='disk')),\n        dict(\n            type='DefaultFormatBundle3D',\n            class_names=[\n                'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                'barrier'\n            ],\n            with_label=False),\n        dict(type='Collect3D', keys=['points'])\n    ])\noptimizer = dict(type='AdamW', lr=2.5e-05, weight_decay=0.01)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='cyclic',\n    target_ratio=(10, 0.0001),\n    cyclic_times=1,\n    step_ratio_up=0.4)\nmomentum_config = dict(\n    policy='cyclic',\n    target_ratio=(0.8947368421052632, 1),\n    cyclic_times=1,\n    step_ratio_up=0.4)\nrunner = dict(type='EpochBasedRunner', max_epochs=20)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(\n    interval=50,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nwork_dir = './work_dirs/dssmss/\u4e24\u5f20\u5361\u6bcf\u5f20\u53614'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nplugin = 'plugin/futr3d'\nvoxel_size = [0.075, 0.075, 0.2]\ncenter_head = dict(\n    type='CenterHead',\n    in_channels=512,\n    tasks=[\n        dict(num_class=1, class_names=['car']),\n        dict(num_class=2, class_names=['truck', 'construction_vehicle']),\n        dict(num_class=2, class_names=['bus', 'trailer']),\n        dict(num_class=1, class_names=['barrier']),\n        dict(num_class=2, class_names=['motorcycle', 'bicycle']),\n        dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])\n    ],\n    common_heads=dict(\n        reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),\n    share_conv_channel=64,\n    bbox_coder=dict(\n        type='CenterPointBBoxCoder',\n        pc_range=[-54, -54],\n        post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n        max_num=500,\n        score_threshold=0.1,\n        out_size_factor=8,\n        voxel_size=[0.075, 0.075],\n        code_size=9),\n    separate_head=dict(type='SeparateHead', init_bias=-2.19, final_kernel=3),\n    loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),\n    loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),\n    norm_bbox=True)\nmodel = dict(\n    type='FUTR3D',\n    aux_weight=0.5,\n    pts_voxel_layer=dict(\n        max_num_points=10,\n        voxel_size=[0.075, 0.075, 0.2],\n        max_voxels=(120000, 160000),\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    pts_voxel_encoder=dict(type='HardSimpleVFE', num_features=5),\n    pts_middle_encoder=dict(\n        type='SparseEncoder',\n        in_channels=5,\n        sparse_shape=[41, 1440, 1440],\n        output_channels=128,\n        order=('conv', 'norm', 'act'),\n        encoder_channels=((16, 16, 32), (32, 32, 64), (64, 64, 128), (128,\n                                                                      128)),\n        encoder_paddings=((0, 0, 1), (0, 0, 1), (0, 0, [0, 1, 1]), (0, 0)),\n        block_type='basicblock'),\n    pts_backbone=dict(\n        type='SECOND',\n        in_channels=256,\n        out_channels=[128, 256],\n        layer_nums=[5, 5],\n        layer_strides=[1, 2],\n        norm_cfg=dict(type='BN', eps=0.001, momentum=0.01),\n        conv_cfg=dict(type='Conv2d', bias=False)),\n    pts_neck=dict(\n        type='FPN',\n        norm_cfg=dict(type='BN2d', eps=0.001, momentum=0.01),\n        act_cfg=dict(type='ReLU', inplace=False),\n        in_channels=[128, 256],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs=True,\n        num_outs=4,\n        relu_before_extra_convs=True),\n    pts_bbox_head=dict(\n        type='FUTR3DHead',\n        use_dab=True,\n        use_dss=True,\n        dss_batch_first=False,\n        dss_drop_prob=0.1,\n        dss_mamba_prenorm=False,\n        dss_mamba_cfg=dict(),\n        dss_mamba_version='DSSMamba_Tiny',\n        dss_num_layers=2,\n        dss_rope=False,\n        dss_morton_rearrange=True,\n        dss_conv_path=False,\n        dss_xy=True,\n        use_mss=True,\n        mss_num_scales=4,\n        mss_fore_pred_net_in_channels=256,\n        mss_fore_pred_net_intermediate_channels=64,\n        mss_fore_pred_net_out_channels=1,\n        mss_dstate=4,\n        anchor_size=3,\n        use_aux=True,\n        aux_head=dict(\n            type='CenterHead',\n            in_channels=512,\n            tasks=[\n                dict(num_class=1, class_names=['car']),\n                dict(\n                    num_class=2, class_names=['truck',\n                                              'construction_vehicle']),\n                dict(num_class=2, class_names=['bus', 'trailer']),\n                dict(num_class=1, class_names=['barrier']),\n                dict(num_class=2, class_names=['motorcycle', 'bicycle']),\n                dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])\n            ],\n            common_heads=dict(\n                reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),\n            share_conv_channel=64,\n            bbox_coder=dict(\n                type='CenterPointBBoxCoder',\n                pc_range=[-54, -54],\n                post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n                max_num=500,\n                score_threshold=0.1,\n                out_size_factor=8,\n                voxel_size=[0.075, 0.075],\n                code_size=9),\n            separate_head=dict(\n                type='SeparateHead', init_bias=-2.19, final_kernel=3),\n            loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),\n            loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),\n            norm_bbox=True),\n        mix_selection=False,\n        num_query=900,\n        num_classes=10,\n        in_channels=256,\n        pc_range=[-54, -54, -5.0, 54, 54, 3.0],\n        sync_cls_avg_factor=True,\n        with_box_refine=True,\n        as_two_stage=False,\n        code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],\n        transformer=dict(\n            type='FUTR3DTransformer',\n            use_dab=True,\n            decoder=dict(\n                type='FUTR3DTransformerDecoder',\n                num_layers=6,\n                use_dab=True,\n                anchor_size=3,\n                return_intermediate=True,\n                transformerlayers=dict(\n                    type='DetrTransformerDecoderLayer',\n                    attn_cfgs=[\n                        dict(\n                            type='MultiheadAttention',\n                            embed_dims=256,\n                            num_heads=8,\n                            dropout=0.1),\n                        dict(type='FUTR3DAttention', embed_dims=256)\n                    ],\n                    feedforward_channels=1024,\n                    ffn_dropout=0.1,\n                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',\n                                     'ffn', 'norm')))),\n        positional_encoding=dict(\n            type='SinePositionalEncoding',\n            num_feats=128,\n            normalize=True,\n            offset=-0.5),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=2.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=0.25),\n        loss_iou=dict(type='GIoULoss', loss_weight=0)),\n    train_cfg=dict(\n        pts=dict(\n            point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0],\n            pc_range=[-54, -54, -5.0, 54, 54, 3.0],\n            grid_size=[1440, 1440, 40],\n            voxel_size=[0.075, 0.075, 0.2],\n            out_size_factor=8,\n            dense_reg=1,\n            gaussian_overlap=0.1,\n            max_objs=500,\n            min_radius=2,\n            code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],\n            assigner=dict(\n                type='HungarianAssigner3D',\n                cls_cost=dict(type='FocalLossCost', weight=2.0),\n                reg_cost=dict(type='BBox3DL1Cost', weight=0.25),\n                iou_cost=dict(type='IoUCost', weight=0)))),\n    test_cfg=dict(\n        pts=dict(\n            pc_range=[-54, -54],\n            post_center_limit_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n            max_per_img=500,\n            max_pool_nms=False,\n            min_radius=[4, 12, 10, 1, 0.85, 0.175],\n            out_size_factor=8,\n            voxel_size=[0.075, 0.075],\n            nms_type='circle',\n            pre_max_size=1000,\n            post_max_size=83,\n            nms_thr=0.2,\n            max_num=300,\n            score_threshold=0,\n            post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0])))\ndb_sampler = dict(\n    data_root='data/nuscenes/',\n    info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',\n    rate=1.0,\n    prepare=dict(\n        filter_by_difficulty=[-1],\n        filter_by_min_points=dict(\n            car=5,\n            truck=5,\n            bus=5,\n            trailer=5,\n            construction_vehicle=5,\n            traffic_cone=5,\n            barrier=5,\n            motorcycle=5,\n            bicycle=5,\n            pedestrian=5)),\n    classes=[\n        'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n        'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n    ],\n    sample_groups=dict(\n        car=2,\n        truck=3,\n        construction_vehicle=7,\n        bus=4,\n        trailer=6,\n        barrier=2,\n        motorcycle=6,\n        bicycle=6,\n        pedestrian=2,\n        traffic_cone=2),\n    points_loader=dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk')))\nfind_unused_parameters = True\ncustom_hooks = [dict(type='FadeOjectSampleHook', num_last_epochs=5)]\ngpu_ids = range(0, 2)\n", "seed": 0, "exp_name": "dssmss.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 3e-05, "memory": 19115, "data_time": 0.07873, "loss_cls": 1.3115, "loss_bbox": 2.2122, "d0.loss_cls": 1.69971, "d0.loss_bbox": 4.39657, "d1.loss_cls": 1.4893, "d1.loss_bbox": 2.26387, "d2.loss_cls": 1.42748, "d2.loss_bbox": 2.24688, "d3.loss_cls": 1.3706, "d3.loss_bbox": 2.23163, "d4.loss_cls": 1.33162, "d4.loss_bbox": 2.21878, "fore_pred_0": 0.73138, "fore_pred_1": 0.65441, "fore_pred_2": 0.67598, "fore_pred_3": 0.73072, "aux_task0.loss_heatmap": 205.42783, "aux_task0.loss_bbox": 0.853, "aux_task1.loss_heatmap": 682.7337, "aux_task1.loss_bbox": 0.87785, "aux_task2.loss_heatmap": 638.51969, "aux_task2.loss_bbox": 1.11214, "aux_task3.loss_heatmap": 372.58399, "aux_task3.loss_bbox": 0.76275, "aux_task4.loss_heatmap": 429.61107, "aux_task4.loss_bbox": 0.74127, "aux_task5.loss_heatmap": 582.09277, "aux_task5.loss_bbox": 0.76594, "loss": 2940.28208, "grad_norm": 11608.01799, "time": 1.45755}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 3e-05, "memory": 19115, "data_time": 0.00813, "loss_cls": 1.16516, "loss_bbox": 1.91466, "d0.loss_cls": 1.24725, "d0.loss_bbox": 3.9791, "d1.loss_cls": 1.17339, "d1.loss_bbox": 2.05725, "d2.loss_cls": 1.17138, "d2.loss_bbox": 1.99662, "d3.loss_cls": 1.16768, "d3.loss_bbox": 1.95319, "d4.loss_cls": 1.16734, "d4.loss_bbox": 1.92359, "fore_pred_0": 0.72768, "fore_pred_1": 0.64699, "fore_pred_2": 0.67394, "fore_pred_3": 0.73686, "aux_task0.loss_heatmap": 73.47333, "aux_task0.loss_bbox": 0.62021, "aux_task1.loss_heatmap": 267.60774, "aux_task1.loss_bbox": 0.61859, "aux_task2.loss_heatmap": 210.58494, "aux_task2.loss_bbox": 0.8623, "aux_task3.loss_heatmap": 91.7455, "aux_task3.loss_bbox": 0.52136, "aux_task4.loss_heatmap": 162.00877, "aux_task4.loss_bbox": 0.51951, "aux_task5.loss_heatmap": 267.31363, "aux_task5.loss_bbox": 0.54887, "loss": 1097.34136, "grad_norm": 5946.51301, "time": 1.10103}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 3e-05, "memory": 19115, "data_time": 0.00791, "loss_cls": 1.14468, "loss_bbox": 1.9818, "d0.loss_cls": 1.1607, "d0.loss_bbox": 2.25356, "d1.loss_cls": 1.15515, "d1.loss_bbox": 1.80335, "d2.loss_cls": 1.15175, "d2.loss_bbox": 1.84452, "d3.loss_cls": 1.14693, "d3.loss_bbox": 1.89658, "d4.loss_cls": 1.14816, "d4.loss_bbox": 1.94325, "fore_pred_0": 0.73145, "fore_pred_1": 0.64023, "fore_pred_2": 0.6692, "fore_pred_3": 0.7436, "aux_task0.loss_heatmap": 29.87222, "aux_task0.loss_bbox": 0.49756, "aux_task1.loss_heatmap": 112.77516, "aux_task1.loss_bbox": 0.56474, "aux_task2.loss_heatmap": 83.08953, "aux_task2.loss_bbox": 0.69138, "aux_task3.loss_heatmap": 34.60648, "aux_task3.loss_bbox": 0.45603, "aux_task4.loss_heatmap": 70.84549, "aux_task4.loss_bbox": 0.45927, "aux_task5.loss_heatmap": 111.08309, "aux_task5.loss_bbox": 0.4956, "loss": 464.06696, "grad_norm": 2935.35329, "time": 1.10406}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 3e-05, "memory": 19279, "data_time": 0.00773, "loss_cls": 1.13156, "loss_bbox": 1.76821, "d0.loss_cls": 1.15046, "d0.loss_bbox": 1.75555, "d1.loss_cls": 1.14411, "d1.loss_bbox": 1.75923, "d2.loss_cls": 1.139, "d2.loss_bbox": 1.77129, "d3.loss_cls": 1.13205, "d3.loss_bbox": 1.77815, "d4.loss_cls": 1.13434, "d4.loss_bbox": 1.7741, "fore_pred_0": 0.73546, "fore_pred_1": 0.63715, "fore_pred_2": 0.6647, "fore_pred_3": 0.74904, "aux_task0.loss_heatmap": 13.79587, "aux_task0.loss_bbox": 0.47924, "aux_task1.loss_heatmap": 54.3414, "aux_task1.loss_bbox": 0.5314, "aux_task2.loss_heatmap": 40.42986, "aux_task2.loss_bbox": 0.5829, "aux_task3.loss_heatmap": 14.25865, "aux_task3.loss_bbox": 0.42258, "aux_task4.loss_heatmap": 33.29122, "aux_task4.loss_bbox": 0.43981, "aux_task5.loss_heatmap": 58.03154, "aux_task5.loss_bbox": 0.47106, "loss": 234.5136, "grad_norm": 1611.1616, "time": 1.11097}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 3e-05, "memory": 19279, "data_time": 0.00767, "loss_cls": 1.12499, "loss_bbox": 1.72089, "d0.loss_cls": 1.14732, "d0.loss_bbox": 1.72705, "d1.loss_cls": 1.14375, "d1.loss_bbox": 1.7261, "d2.loss_cls": 1.13652, "d2.loss_bbox": 1.7259, "d3.loss_cls": 1.12753, "d3.loss_bbox": 1.72167, "d4.loss_cls": 1.12956, "d4.loss_bbox": 1.71959, "fore_pred_0": 0.73763, "fore_pred_1": 0.63481, "fore_pred_2": 0.66571, "fore_pred_3": 0.74506, "aux_task0.loss_heatmap": 6.84205, "aux_task0.loss_bbox": 0.44713, "aux_task1.loss_heatmap": 25.04427, "aux_task1.loss_bbox": 0.51193, "aux_task2.loss_heatmap": 18.6846, "aux_task2.loss_bbox": 0.52995, "aux_task3.loss_heatmap": 9.0206, "aux_task3.loss_bbox": 0.41741, "aux_task4.loss_heatmap": 15.95974, "aux_task4.loss_bbox": 0.43877, "aux_task5.loss_heatmap": 28.0324, "aux_task5.loss_bbox": 0.46709, "loss": 123.54681, "grad_norm": 828.50049, "time": 1.11286}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 3e-05, "memory": 19279, "data_time": 0.00759, "loss_cls": 1.08208, "loss_bbox": 1.71088, "d0.loss_cls": 1.14759, "d0.loss_bbox": 1.72674, "d1.loss_cls": 1.14102, "d1.loss_bbox": 1.72003, "d2.loss_cls": 1.13017, "d2.loss_bbox": 1.71621, "d3.loss_cls": 1.10446, "d3.loss_bbox": 1.71959, "d4.loss_cls": 1.09623, "d4.loss_bbox": 1.71876, "fore_pred_0": 0.73876, "fore_pred_1": 0.63331, "fore_pred_2": 0.66118, "fore_pred_3": 0.743, "aux_task0.loss_heatmap": 3.51013, "aux_task0.loss_bbox": 0.44016, "aux_task1.loss_heatmap": 12.4705, "aux_task1.loss_bbox": 0.49168, "aux_task2.loss_heatmap": 9.10685, "aux_task2.loss_bbox": 0.53099, "aux_task3.loss_heatmap": 5.10041, "aux_task3.loss_bbox": 0.41183, "aux_task4.loss_heatmap": 7.85542, "aux_task4.loss_bbox": 0.42406, "aux_task5.loss_heatmap": 12.97077, "aux_task5.loss_bbox": 0.46386, "loss": 70.79041, "grad_norm": 406.18579, "time": 1.11345}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 3e-05, "memory": 19294, "data_time": 0.04375, "loss_cls": 1.05767, "loss_bbox": 1.69608, "d0.loss_cls": 1.14938, "d0.loss_bbox": 1.7296, "d1.loss_cls": 1.14289, "d1.loss_bbox": 1.71614, "d2.loss_cls": 1.11375, "d2.loss_bbox": 1.71496, "d3.loss_cls": 1.07835, "d3.loss_bbox": 1.70129, "d4.loss_cls": 1.0686, "d4.loss_bbox": 1.69452, "fore_pred_0": 0.73787, "fore_pred_1": 0.63152, "fore_pred_2": 0.67596, "fore_pred_3": 0.74914, "aux_task0.loss_heatmap": 2.35864, "aux_task0.loss_bbox": 0.43754, "aux_task1.loss_heatmap": 6.09158, "aux_task1.loss_bbox": 0.49077, "aux_task2.loss_heatmap": 4.66147, "aux_task2.loss_bbox": 0.50594, "aux_task3.loss_heatmap": 2.77835, "aux_task3.loss_bbox": 0.41067, "aux_task4.loss_heatmap": 3.97507, "aux_task4.loss_bbox": 0.43096, "aux_task5.loss_heatmap": 5.97281, "aux_task5.loss_bbox": 0.46493, "loss": 45.44197, "grad_norm": 179.91321, "time": 1.15083}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 3e-05, "memory": 19341, "data_time": 0.00847, "loss_cls": 1.03555, "loss_bbox": 1.64395, "d0.loss_cls": 1.12813, "d0.loss_bbox": 1.71646, "d1.loss_cls": 1.11366, "d1.loss_bbox": 1.6979, "d2.loss_cls": 1.06273, "d2.loss_bbox": 1.67377, "d3.loss_cls": 1.04121, "d3.loss_bbox": 1.66734, "d4.loss_cls": 1.03939, "d4.loss_bbox": 1.65447, "fore_pred_0": 0.73755, "fore_pred_1": 0.6304, "fore_pred_2": 0.67989, "fore_pred_3": 0.75136, "aux_task0.loss_heatmap": 1.71028, "aux_task0.loss_bbox": 0.42966, "aux_task1.loss_heatmap": 3.19691, "aux_task1.loss_bbox": 0.48292, "aux_task2.loss_heatmap": 2.77004, "aux_task2.loss_bbox": 0.47347, "aux_task3.loss_heatmap": 1.99789, "aux_task3.loss_bbox": 0.40905, "aux_task4.loss_heatmap": 2.36867, "aux_task4.loss_bbox": 0.42767, "aux_task5.loss_heatmap": 3.04888, "aux_task5.loss_bbox": 0.45728, "loss": 34.24727, "grad_norm": 76.0572, "time": 1.12139}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 3e-05, "memory": 19341, "data_time": 0.01001, "loss_cls": 1.02118, "loss_bbox": 1.64595, "d0.loss_cls": 1.10346, "d0.loss_bbox": 1.73881, "d1.loss_cls": 1.07751, "d1.loss_bbox": 1.71063, "d2.loss_cls": 1.02506, "d2.loss_bbox": 1.67295, "d3.loss_cls": 1.01694, "d3.loss_bbox": 1.65508, "d4.loss_cls": 1.02123, "d4.loss_bbox": 1.64715, "fore_pred_0": 0.73816, "fore_pred_1": 0.62846, "fore_pred_2": 0.6729, "fore_pred_3": 0.75123, "aux_task0.loss_heatmap": 1.524, "aux_task0.loss_bbox": 0.43183, "aux_task1.loss_heatmap": 2.12382, "aux_task1.loss_bbox": 0.47695, "aux_task2.loss_heatmap": 2.0417, "aux_task2.loss_bbox": 0.48599, "aux_task3.loss_heatmap": 1.61678, "aux_task3.loss_bbox": 0.39996, "aux_task4.loss_heatmap": 1.76468, "aux_task4.loss_bbox": 0.428, "aux_task5.loss_heatmap": 1.93305, "aux_task5.loss_bbox": 0.45888, "loss": 30.02159, "grad_norm": 36.37718, "time": 1.12178}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 3e-05, "memory": 19341, "data_time": 0.00869, "loss_cls": 1.0095, "loss_bbox": 1.61635, "d0.loss_cls": 1.08524, "d0.loss_bbox": 1.73307, "d1.loss_cls": 1.03708, "d1.loss_bbox": 1.67233, "d2.loss_cls": 1.00805, "d2.loss_bbox": 1.63754, "d3.loss_cls": 1.00502, "d3.loss_bbox": 1.62158, "d4.loss_cls": 1.00785, "d4.loss_bbox": 1.61879, "fore_pred_0": 0.73954, "fore_pred_1": 0.62807, "fore_pred_2": 0.66316, "fore_pred_3": 0.74804, "aux_task0.loss_heatmap": 1.419, "aux_task0.loss_bbox": 0.42352, "aux_task1.loss_heatmap": 1.76806, "aux_task1.loss_bbox": 0.45994, "aux_task2.loss_heatmap": 1.80847, "aux_task2.loss_bbox": 0.47105, "aux_task3.loss_heatmap": 1.52282, "aux_task3.loss_bbox": 0.39801, "aux_task4.loss_heatmap": 1.51982, "aux_task4.loss_bbox": 0.41671, "aux_task5.loss_heatmap": 1.65676, "aux_task5.loss_bbox": 0.44644, "loss": 28.363, "grad_norm": 25.83887, "time": 1.11214}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 3e-05, "memory": 19341, "data_time": 0.00826, "loss_cls": 0.97766, "loss_bbox": 1.59259, "d0.loss_cls": 1.05831, "d0.loss_bbox": 1.72322, "d1.loss_cls": 0.98967, "d1.loss_bbox": 1.64315, "d2.loss_cls": 0.98283, "d2.loss_bbox": 1.61648, "d3.loss_cls": 0.97191, "d3.loss_bbox": 1.60818, "d4.loss_cls": 0.9738, "d4.loss_bbox": 1.60128, "fore_pred_0": 0.74078, "fore_pred_1": 0.62678, "fore_pred_2": 0.66468, "fore_pred_3": 0.7424, "aux_task0.loss_heatmap": 1.36185, "aux_task0.loss_bbox": 0.41573, "aux_task1.loss_heatmap": 1.61825, "aux_task1.loss_bbox": 0.45615, "aux_task2.loss_heatmap": 1.76278, "aux_task2.loss_bbox": 0.47918, "aux_task3.loss_heatmap": 1.44022, "aux_task3.loss_bbox": 0.39517, "aux_task4.loss_heatmap": 1.35896, "aux_task4.loss_bbox": 0.41993, "aux_task5.loss_heatmap": 1.50948, "aux_task5.loss_bbox": 0.43795, "loss": 27.39474, "grad_norm": 22.77178, "time": 1.10579}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 3e-05, "memory": 19341, "data_time": 0.00805, "loss_cls": 0.9594, "loss_bbox": 1.58248, "d0.loss_cls": 1.03545, "d0.loss_bbox": 1.72411, "d1.loss_cls": 0.96419, "d1.loss_bbox": 1.62813, "d2.loss_cls": 0.96403, "d2.loss_bbox": 1.60987, "d3.loss_cls": 0.95539, "d3.loss_bbox": 1.59572, "d4.loss_cls": 0.95688, "d4.loss_bbox": 1.58704, "fore_pred_0": 0.74029, "fore_pred_1": 0.62774, "fore_pred_2": 0.66592, "fore_pred_3": 0.73914, "aux_task0.loss_heatmap": 1.35225, "aux_task0.loss_bbox": 0.40553, "aux_task1.loss_heatmap": 1.60128, "aux_task1.loss_bbox": 0.43527, "aux_task2.loss_heatmap": 1.74517, "aux_task2.loss_bbox": 0.47111, "aux_task3.loss_heatmap": 1.35418, "aux_task3.loss_bbox": 0.37447, "aux_task4.loss_heatmap": 1.2271, "aux_task4.loss_bbox": 0.40342, "aux_task5.loss_heatmap": 1.42208, "aux_task5.loss_bbox": 0.42071, "loss": 26.77525, "grad_norm": 23.1596, "time": 1.14906}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 3e-05, "memory": 19341, "data_time": 0.00838, "loss_cls": 0.93198, "loss_bbox": 1.54714, "d0.loss_cls": 1.00311, "d0.loss_bbox": 1.72375, "d1.loss_cls": 0.93819, "d1.loss_bbox": 1.60299, "d2.loss_cls": 0.93416, "d2.loss_bbox": 1.5731, "d3.loss_cls": 0.92555, "d3.loss_bbox": 1.55876, "d4.loss_cls": 0.92553, "d4.loss_bbox": 1.55206, "fore_pred_0": 0.74222, "fore_pred_1": 0.62591, "fore_pred_2": 0.66811, "fore_pred_3": 0.73427, "aux_task0.loss_heatmap": 1.29016, "aux_task0.loss_bbox": 0.38292, "aux_task1.loss_heatmap": 1.52658, "aux_task1.loss_bbox": 0.42952, "aux_task2.loss_heatmap": 1.72971, "aux_task2.loss_bbox": 0.469, "aux_task3.loss_heatmap": 1.35827, "aux_task3.loss_bbox": 0.37121, "aux_task4.loss_heatmap": 1.17911, "aux_task4.loss_bbox": 0.39158, "aux_task5.loss_heatmap": 1.3353, "aux_task5.loss_bbox": 0.40024, "loss": 26.07991, "grad_norm": 23.24408, "time": 1.11755}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 3e-05, "memory": 19341, "data_time": 0.00836, "loss_cls": 0.92576, "loss_bbox": 1.5, "d0.loss_cls": 0.98655, "d0.loss_bbox": 1.70936, "d1.loss_cls": 0.93245, "d1.loss_bbox": 1.55531, "d2.loss_cls": 0.92859, "d2.loss_bbox": 1.51968, "d3.loss_cls": 0.91971, "d3.loss_bbox": 1.50456, "d4.loss_cls": 0.92046, "d4.loss_bbox": 1.50051, "fore_pred_0": 0.74259, "fore_pred_1": 0.62543, "fore_pred_2": 0.67797, "fore_pred_3": 0.73536, "aux_task0.loss_heatmap": 1.27847, "aux_task0.loss_bbox": 0.38196, "aux_task1.loss_heatmap": 1.49773, "aux_task1.loss_bbox": 0.41606, "aux_task2.loss_heatmap": 1.7135, "aux_task2.loss_bbox": 0.45807, "aux_task3.loss_heatmap": 1.23285, "aux_task3.loss_bbox": 0.36242, "aux_task4.loss_heatmap": 1.0804, "aux_task4.loss_bbox": 0.37848, "aux_task5.loss_heatmap": 1.29404, "aux_task5.loss_bbox": 0.3948, "loss": 25.39172, "grad_norm": 23.49047, "time": 1.11482}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 3e-05, "memory": 19341, "data_time": 0.0084, "loss_cls": 0.92121, "loss_bbox": 1.44034, "d0.loss_cls": 0.97438, "d0.loss_bbox": 1.68736, "d1.loss_cls": 0.92604, "d1.loss_bbox": 1.50107, "d2.loss_cls": 0.91957, "d2.loss_bbox": 1.45995, "d3.loss_cls": 0.91649, "d3.loss_bbox": 1.44325, "d4.loss_cls": 0.91615, "d4.loss_bbox": 1.43981, "fore_pred_0": 0.74218, "fore_pred_1": 0.62319, "fore_pred_2": 0.67966, "fore_pred_3": 0.73269, "aux_task0.loss_heatmap": 1.24798, "aux_task0.loss_bbox": 0.37338, "aux_task1.loss_heatmap": 1.48594, "aux_task1.loss_bbox": 0.41778, "aux_task2.loss_heatmap": 1.71051, "aux_task2.loss_bbox": 0.44711, "aux_task3.loss_heatmap": 1.22404, "aux_task3.loss_bbox": 0.35136, "aux_task4.loss_heatmap": 1.04005, "aux_task4.loss_bbox": 0.3774, "aux_task5.loss_heatmap": 1.25396, "aux_task5.loss_bbox": 0.38753, "loss": 24.86267, "grad_norm": 24.7722, "time": 1.11543}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 3e-05, "memory": 19341, "data_time": 0.00822, "loss_cls": 0.91403, "loss_bbox": 1.41107, "d0.loss_cls": 0.97008, "d0.loss_bbox": 1.67194, "d1.loss_cls": 0.92377, "d1.loss_bbox": 1.47293, "d2.loss_cls": 0.91295, "d2.loss_bbox": 1.43618, "d3.loss_cls": 0.91094, "d3.loss_bbox": 1.41861, "d4.loss_cls": 0.91132, "d4.loss_bbox": 1.41206, "fore_pred_0": 0.74289, "fore_pred_1": 0.62314, "fore_pred_2": 0.67969, "fore_pred_3": 0.733, "aux_task0.loss_heatmap": 1.1931, "aux_task0.loss_bbox": 0.36731, "aux_task1.loss_heatmap": 1.46051, "aux_task1.loss_bbox": 0.41222, "aux_task2.loss_heatmap": 1.69873, "aux_task2.loss_bbox": 0.44915, "aux_task3.loss_heatmap": 1.28041, "aux_task3.loss_bbox": 0.35362, "aux_task4.loss_heatmap": 1.00095, "aux_task4.loss_bbox": 0.36465, "aux_task5.loss_heatmap": 1.23739, "aux_task5.loss_bbox": 0.38119, "loss": 24.56509, "grad_norm": 27.22125, "time": 1.10278}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 3e-05, "memory": 19341, "data_time": 0.01173, "loss_cls": 0.90658, "loss_bbox": 1.38306, "d0.loss_cls": 0.96093, "d0.loss_bbox": 1.64869, "d1.loss_cls": 0.91423, "d1.loss_bbox": 1.4497, "d2.loss_cls": 0.90636, "d2.loss_bbox": 1.40571, "d3.loss_cls": 0.90259, "d3.loss_bbox": 1.38442, "d4.loss_cls": 0.90378, "d4.loss_bbox": 1.37906, "fore_pred_0": 0.74568, "fore_pred_1": 0.62323, "fore_pred_2": 0.68006, "fore_pred_3": 0.73273, "aux_task0.loss_heatmap": 1.17988, "aux_task0.loss_bbox": 0.36733, "aux_task1.loss_heatmap": 1.42494, "aux_task1.loss_bbox": 0.40955, "aux_task2.loss_heatmap": 1.67796, "aux_task2.loss_bbox": 0.45512, "aux_task3.loss_heatmap": 1.24098, "aux_task3.loss_bbox": 0.34682, "aux_task4.loss_heatmap": 0.97302, "aux_task4.loss_bbox": 0.3625, "aux_task5.loss_heatmap": 1.19583, "aux_task5.loss_bbox": 0.37592, "loss": 24.15497, "grad_norm": 28.80654, "time": 1.11266}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 3e-05, "memory": 19341, "data_time": 0.03209, "loss_cls": 0.89427, "loss_bbox": 1.33439, "d0.loss_cls": 0.94614, "d0.loss_bbox": 1.61145, "d1.loss_cls": 0.89843, "d1.loss_bbox": 1.41034, "d2.loss_cls": 0.88923, "d2.loss_bbox": 1.36565, "d3.loss_cls": 0.88755, "d3.loss_bbox": 1.33944, "d4.loss_cls": 0.88898, "d4.loss_bbox": 1.33199, "fore_pred_0": 0.74374, "fore_pred_1": 0.62486, "fore_pred_2": 0.67962, "fore_pred_3": 0.733, "aux_task0.loss_heatmap": 1.14699, "aux_task0.loss_bbox": 0.36196, "aux_task1.loss_heatmap": 1.40369, "aux_task1.loss_bbox": 0.40408, "aux_task2.loss_heatmap": 1.65028, "aux_task2.loss_bbox": 0.44877, "aux_task3.loss_heatmap": 1.20105, "aux_task3.loss_bbox": 0.34825, "aux_task4.loss_heatmap": 0.94611, "aux_task4.loss_bbox": 0.3603, "aux_task5.loss_heatmap": 1.15848, "aux_task5.loss_bbox": 0.37749, "loss": 23.6053, "grad_norm": 28.02313, "time": 1.13605}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 3e-05, "memory": 19341, "data_time": 0.02959, "loss_cls": 0.88009, "loss_bbox": 1.3062, "d0.loss_cls": 0.9321, "d0.loss_bbox": 1.58597, "d1.loss_cls": 0.88587, "d1.loss_bbox": 1.38987, "d2.loss_cls": 0.87665, "d2.loss_bbox": 1.34207, "d3.loss_cls": 0.87515, "d3.loss_bbox": 1.31569, "d4.loss_cls": 0.87728, "d4.loss_bbox": 1.3081, "fore_pred_0": 0.74265, "fore_pred_1": 0.62465, "fore_pred_2": 0.68071, "fore_pred_3": 0.73337, "aux_task0.loss_heatmap": 1.14059, "aux_task0.loss_bbox": 0.37443, "aux_task1.loss_heatmap": 1.3932, "aux_task1.loss_bbox": 0.40376, "aux_task2.loss_heatmap": 1.6554, "aux_task2.loss_bbox": 0.43999, "aux_task3.loss_heatmap": 1.15944, "aux_task3.loss_bbox": 0.34577, "aux_task4.loss_heatmap": 0.91616, "aux_task4.loss_bbox": 0.36127, "aux_task5.loss_heatmap": 1.1114, "aux_task5.loss_bbox": 0.36594, "loss": 23.24239, "grad_norm": 28.91993, "time": 1.13339}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 3e-05, "memory": 19341, "data_time": 0.02024, "loss_cls": 0.8816, "loss_bbox": 1.27427, "d0.loss_cls": 0.92927, "d0.loss_bbox": 1.55111, "d1.loss_cls": 0.88839, "d1.loss_bbox": 1.36117, "d2.loss_cls": 0.87765, "d2.loss_bbox": 1.31351, "d3.loss_cls": 0.87325, "d3.loss_bbox": 1.28675, "d4.loss_cls": 0.87662, "d4.loss_bbox": 1.27826, "fore_pred_0": 0.74063, "fore_pred_1": 0.62506, "fore_pred_2": 0.6776, "fore_pred_3": 0.73255, "aux_task0.loss_heatmap": 1.13874, "aux_task0.loss_bbox": 0.3719, "aux_task1.loss_heatmap": 1.37851, "aux_task1.loss_bbox": 0.40534, "aux_task2.loss_heatmap": 1.64308, "aux_task2.loss_bbox": 0.4407, "aux_task3.loss_heatmap": 1.17258, "aux_task3.loss_bbox": 0.34361, "aux_task4.loss_heatmap": 0.89198, "aux_task4.loss_bbox": 0.35842, "aux_task5.loss_heatmap": 1.10333, "aux_task5.loss_bbox": 0.36645, "loss": 23.00651, "grad_norm": 29.18769, "time": 1.116}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 3e-05, "memory": 19341, "data_time": 0.02876, "loss_cls": 0.87216, "loss_bbox": 1.26965, "d0.loss_cls": 0.91823, "d0.loss_bbox": 1.5211, "d1.loss_cls": 0.88364, "d1.loss_bbox": 1.34529, "d2.loss_cls": 0.87145, "d2.loss_bbox": 1.29894, "d3.loss_cls": 0.86643, "d3.loss_bbox": 1.27448, "d4.loss_cls": 0.86901, "d4.loss_bbox": 1.26764, "fore_pred_0": 0.74178, "fore_pred_1": 0.62355, "fore_pred_2": 0.6728, "fore_pred_3": 0.73259, "aux_task0.loss_heatmap": 1.11851, "aux_task0.loss_bbox": 0.36467, "aux_task1.loss_heatmap": 1.35935, "aux_task1.loss_bbox": 0.4065, "aux_task2.loss_heatmap": 1.63198, "aux_task2.loss_bbox": 0.44014, "aux_task3.loss_heatmap": 1.15398, "aux_task3.loss_bbox": 0.33909, "aux_task4.loss_heatmap": 0.89968, "aux_task4.loss_bbox": 0.35684, "aux_task5.loss_heatmap": 1.07422, "aux_task5.loss_bbox": 0.36301, "loss": 22.76598, "grad_norm": 31.50413, "time": 1.11798}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 3e-05, "memory": 19341, "data_time": 0.02969, "loss_cls": 0.84374, "loss_bbox": 1.25926, "d0.loss_cls": 0.89184, "d0.loss_bbox": 1.50614, "d1.loss_cls": 0.85362, "d1.loss_bbox": 1.33434, "d2.loss_cls": 0.84278, "d2.loss_bbox": 1.28562, "d3.loss_cls": 0.83915, "d3.loss_bbox": 1.26154, "d4.loss_cls": 0.84174, "d4.loss_bbox": 1.25704, "fore_pred_0": 0.74218, "fore_pred_1": 0.62337, "fore_pred_2": 0.66976, "fore_pred_3": 0.73105, "aux_task0.loss_heatmap": 1.07916, "aux_task0.loss_bbox": 0.35922, "aux_task1.loss_heatmap": 1.34588, "aux_task1.loss_bbox": 0.4032, "aux_task2.loss_heatmap": 1.61958, "aux_task2.loss_bbox": 0.44059, "aux_task3.loss_heatmap": 1.12143, "aux_task3.loss_bbox": 0.33566, "aux_task4.loss_heatmap": 0.8864, "aux_task4.loss_bbox": 0.36487, "aux_task5.loss_heatmap": 1.05953, "aux_task5.loss_bbox": 0.35759, "loss": 22.38994, "grad_norm": 31.72516, "time": 1.13046}
