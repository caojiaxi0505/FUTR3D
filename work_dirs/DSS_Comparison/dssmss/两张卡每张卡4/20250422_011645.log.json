{"env_info": "sys.platform: linux\nPython: 3.8.20 | packaged by conda-forge | (default, Sep 30 2024, 17:52:49) [GCC 13.3.0]\nCUDA available: True\nGPU 0,1: NVIDIA GeForce RTX 4090 D\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.6, V11.6.55\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0\nPyTorch: 1.13.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2022.1-Product Build 20220311 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.6\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.14.0\nOpenCV: 4.11.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.4\nMMCV CUDA Compiler: 11.6\nMMDetection: 2.27.0\nMMSegmentation: 0.30.0\nMMDetection3D: 1.0.0rc6+637e2ea\nspconv2.0: True", "config": "point_cloud_range = [-54, -54, -5.0, 54, 54, 3.0]\nclass_names = [\n    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n]\ndataset_type = 'NuScenesDataset'\ndata_root = 'data/nuscenes/'\ninput_modality = dict(\n    use_lidar=True,\n    use_camera=False,\n    use_radar=False,\n    use_map=False,\n    use_external=False)\nfile_client_args = dict(backend='disk')\ntrain_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),\n    dict(\n        type='ObjectSample',\n        db_sampler=dict(\n            data_root='data/nuscenes/',\n            info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',\n            rate=1.0,\n            prepare=dict(\n                filter_by_difficulty=[-1],\n                filter_by_min_points=dict(\n                    car=5,\n                    truck=5,\n                    bus=5,\n                    trailer=5,\n                    construction_vehicle=5,\n                    traffic_cone=5,\n                    barrier=5,\n                    motorcycle=5,\n                    bicycle=5,\n                    pedestrian=5)),\n            classes=[\n                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                'traffic_cone'\n            ],\n            sample_groups=dict(\n                car=2,\n                truck=3,\n                construction_vehicle=7,\n                bus=4,\n                trailer=6,\n                barrier=2,\n                motorcycle=6,\n                bicycle=6,\n                pedestrian=2,\n                traffic_cone=2),\n            points_loader=dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk')))),\n    dict(\n        type='GlobalRotScaleTrans',\n        rot_range=[-0.785, 0.785],\n        scale_ratio_range=[0.9, 1.1],\n        translation_std=[0.5, 0.5, 0.5]),\n    dict(\n        type='RandomFlip3D',\n        sync_2d=False,\n        flip_ratio_bev_horizontal=0.5,\n        flip_ratio_bev_vertical=0.5),\n    dict(\n        type='PointsRangeFilter',\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    dict(\n        type='ObjectRangeFilter',\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    dict(\n        type='ObjectNameFilter',\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(type='PointShuffle'),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(type='Collect3D', keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n]\ntest_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(\n        type='MultiScaleFlipAug3D',\n        img_scale=(1333, 800),\n        pts_scale_ratio=1,\n        flip=False,\n        transforms=[\n            dict(\n                type='GlobalRotScaleTrans',\n                rot_range=[0, 0],\n                scale_ratio_range=[1.0, 1.0],\n                translation_std=[0, 0, 0]),\n            dict(type='RandomFlip3D'),\n            dict(\n                type='PointsRangeFilter',\n                point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ],\n                with_label=False),\n            dict(type='Collect3D', keys=['points'])\n        ])\n]\neval_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        with_label=False),\n    dict(type='Collect3D', keys=['points'])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=4,\n    train=dict(\n        type='CBGSDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_train.pkl',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=10,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadAnnotations3D',\n                with_bbox_3d=True,\n                with_label_3d=True),\n            dict(\n                type='GlobalRotScaleTrans',\n                rot_range=[-0.3925, 0.3925],\n                scale_ratio_range=[0.95, 1.05],\n                translation_std=[0, 0, 0]),\n            dict(type='RandomFlip3D', flip_ratio_bev_horizontal=0.5),\n            dict(\n                type='PointsRangeFilter',\n                point_cloud_range=[-50, -50, -5, 50, 50, 3]),\n            dict(\n                type='ObjectRangeFilter',\n                point_cloud_range=[-50, -50, -5, 50, 50, 3]),\n            dict(\n                type='ObjectNameFilter',\n                classes=[\n                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                    'barrier'\n                ]),\n            dict(type='PointShuffle'),\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                    'barrier'\n                ]),\n            dict(\n                type='Collect3D',\n                keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n        ],\n        classes=[\n            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=False,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=False,\n        box_type_3d='LiDAR',\n        split=14,\n        dataset=dict(\n            type='NuScenesDataset',\n            data_root='data/nuscenes/',\n            ann_file='data/nuscenes/nuscenes_infos_train.pkl',\n            pipeline=[\n                dict(\n                    type='LoadPointsFromFile',\n                    coord_type='LIDAR',\n                    load_dim=5,\n                    use_dim=5,\n                    file_client_args=dict(backend='disk')),\n                dict(\n                    type='LoadPointsFromMultiSweeps',\n                    sweeps_num=9,\n                    use_dim=[0, 1, 2, 3, 4],\n                    file_client_args=dict(backend='disk'),\n                    pad_empty_sweeps=True,\n                    remove_close=True),\n                dict(\n                    type='LoadAnnotations3D',\n                    with_bbox_3d=True,\n                    with_label_3d=True),\n                dict(\n                    type='ObjectSample',\n                    db_sampler=dict(\n                        data_root='data/nuscenes/',\n                        info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',\n                        rate=1.0,\n                        prepare=dict(\n                            filter_by_difficulty=[-1],\n                            filter_by_min_points=dict(\n                                car=5,\n                                truck=5,\n                                bus=5,\n                                trailer=5,\n                                construction_vehicle=5,\n                                traffic_cone=5,\n                                barrier=5,\n                                motorcycle=5,\n                                bicycle=5,\n                                pedestrian=5)),\n                        classes=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        sample_groups=dict(\n                            car=2,\n                            truck=3,\n                            construction_vehicle=7,\n                            bus=4,\n                            trailer=6,\n                            barrier=2,\n                            motorcycle=6,\n                            bicycle=6,\n                            pedestrian=2,\n                            traffic_cone=2),\n                        points_loader=dict(\n                            type='LoadPointsFromFile',\n                            coord_type='LIDAR',\n                            load_dim=5,\n                            use_dim=[0, 1, 2, 3, 4],\n                            file_client_args=dict(backend='disk')))),\n                dict(\n                    type='GlobalRotScaleTrans',\n                    rot_range=[-0.785, 0.785],\n                    scale_ratio_range=[0.9, 1.1],\n                    translation_std=[0.5, 0.5, 0.5]),\n                dict(\n                    type='RandomFlip3D',\n                    sync_2d=False,\n                    flip_ratio_bev_horizontal=0.5,\n                    flip_ratio_bev_vertical=0.5),\n                dict(\n                    type='PointsRangeFilter',\n                    point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                dict(\n                    type='ObjectRangeFilter',\n                    point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                dict(\n                    type='ObjectNameFilter',\n                    classes=[\n                        'car', 'truck', 'construction_vehicle', 'bus',\n                        'trailer', 'barrier', 'motorcycle', 'bicycle',\n                        'pedestrian', 'traffic_cone'\n                    ]),\n                dict(type='PointShuffle'),\n                dict(\n                    type='DefaultFormatBundle3D',\n                    class_names=[\n                        'car', 'truck', 'construction_vehicle', 'bus',\n                        'trailer', 'barrier', 'motorcycle', 'bicycle',\n                        'pedestrian', 'traffic_cone'\n                    ]),\n                dict(\n                    type='Collect3D',\n                    keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n            ],\n            classes=[\n                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                'traffic_cone'\n            ],\n            test_mode=False,\n            use_valid_flag=True,\n            box_type_3d='LiDAR')),\n    val=dict(\n        type='NuScenesDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_val.pkl',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=9,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk'),\n                pad_empty_sweeps=True,\n                remove_close=True),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1333, 800),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='GlobalRotScaleTrans',\n                        rot_range=[0, 0],\n                        scale_ratio_range=[1.0, 1.0],\n                        translation_std=[0, 0, 0]),\n                    dict(type='RandomFlip3D'),\n                    dict(\n                        type='PointsRangeFilter',\n                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(type='Collect3D', keys=['points'])\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=False,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=True,\n        box_type_3d='LiDAR'),\n    test=dict(\n        type='NuScenesDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_val.pkl',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=9,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk'),\n                pad_empty_sweeps=True,\n                remove_close=True),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1333, 800),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='GlobalRotScaleTrans',\n                        rot_range=[0, 0],\n                        scale_ratio_range=[1.0, 1.0],\n                        translation_std=[0, 0, 0]),\n                    dict(type='RandomFlip3D'),\n                    dict(\n                        type='PointsRangeFilter',\n                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(type='Collect3D', keys=['points'])\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=False,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=True,\n        box_type_3d='LiDAR'))\nevaluation = dict(\n    interval=1,\n    pipeline=[\n        dict(\n            type='LoadPointsFromFile',\n            coord_type='LIDAR',\n            load_dim=5,\n            use_dim=5,\n            file_client_args=dict(backend='disk')),\n        dict(\n            type='LoadPointsFromMultiSweeps',\n            sweeps_num=10,\n            file_client_args=dict(backend='disk')),\n        dict(\n            type='DefaultFormatBundle3D',\n            class_names=[\n                'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                'barrier'\n            ],\n            with_label=False),\n        dict(type='Collect3D', keys=['points'])\n    ])\noptimizer = dict(type='AdamW', lr=2.5e-05, weight_decay=0.01)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='cyclic',\n    target_ratio=(10, 0.0001),\n    cyclic_times=1,\n    step_ratio_up=0.4)\nmomentum_config = dict(\n    policy='cyclic',\n    target_ratio=(0.8947368421052632, 1),\n    cyclic_times=1,\n    step_ratio_up=0.4)\nrunner = dict(type='EpochBasedRunner', max_epochs=20)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(\n    interval=50,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nwork_dir = './work_dirs/dssmss/\u4e24\u5f20\u5361\u6bcf\u5f20\u53614'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nplugin = 'plugin/futr3d'\nvoxel_size = [0.075, 0.075, 0.2]\ncenter_head = dict(\n    type='CenterHead',\n    in_channels=512,\n    tasks=[\n        dict(num_class=1, class_names=['car']),\n        dict(num_class=2, class_names=['truck', 'construction_vehicle']),\n        dict(num_class=2, class_names=['bus', 'trailer']),\n        dict(num_class=1, class_names=['barrier']),\n        dict(num_class=2, class_names=['motorcycle', 'bicycle']),\n        dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])\n    ],\n    common_heads=dict(\n        reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),\n    share_conv_channel=64,\n    bbox_coder=dict(\n        type='CenterPointBBoxCoder',\n        pc_range=[-54, -54],\n        post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n        max_num=500,\n        score_threshold=0.1,\n        out_size_factor=8,\n        voxel_size=[0.075, 0.075],\n        code_size=9),\n    separate_head=dict(type='SeparateHead', init_bias=-2.19, final_kernel=3),\n    loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),\n    loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),\n    norm_bbox=True)\nmodel = dict(\n    type='FUTR3D',\n    aux_weight=0.5,\n    pts_voxel_layer=dict(\n        max_num_points=10,\n        voxel_size=[0.075, 0.075, 0.2],\n        max_voxels=(120000, 160000),\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    pts_voxel_encoder=dict(type='HardSimpleVFE', num_features=5),\n    pts_middle_encoder=dict(\n        type='SparseEncoder',\n        in_channels=5,\n        sparse_shape=[41, 1440, 1440],\n        output_channels=128,\n        order=('conv', 'norm', 'act'),\n        encoder_channels=((16, 16, 32), (32, 32, 64), (64, 64, 128), (128,\n                                                                      128)),\n        encoder_paddings=((0, 0, 1), (0, 0, 1), (0, 0, [0, 1, 1]), (0, 0)),\n        block_type='basicblock'),\n    pts_backbone=dict(\n        type='SECOND',\n        in_channels=256,\n        out_channels=[128, 256],\n        layer_nums=[5, 5],\n        layer_strides=[1, 2],\n        norm_cfg=dict(type='BN', eps=0.001, momentum=0.01),\n        conv_cfg=dict(type='Conv2d', bias=False)),\n    pts_neck=dict(\n        type='FPN',\n        norm_cfg=dict(type='BN2d', eps=0.001, momentum=0.01),\n        act_cfg=dict(type='ReLU', inplace=False),\n        in_channels=[128, 256],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs=True,\n        num_outs=4,\n        relu_before_extra_convs=True),\n    pts_bbox_head=dict(\n        type='FUTR3DHead',\n        use_dab=True,\n        use_dss=True,\n        dss_batch_first=False,\n        dss_drop_prob=0.1,\n        dss_mamba_prenorm=False,\n        dss_mamba_cfg=dict(),\n        dss_mamba_version='DSSMamba_Tiny',\n        dss_num_layers=2,\n        dss_rope=False,\n        dss_morton_rearrange=True,\n        dss_conv_path=False,\n        dss_xy=True,\n        use_mss=True,\n        mss_num_scales=4,\n        mss_fore_pred_net_in_channels=256,\n        mss_fore_pred_net_intermediate_channels=64,\n        mss_fore_pred_net_out_channels=1,\n        mss_dstate=4,\n        anchor_size=3,\n        use_aux=True,\n        aux_head=dict(\n            type='CenterHead',\n            in_channels=512,\n            tasks=[\n                dict(num_class=1, class_names=['car']),\n                dict(\n                    num_class=2, class_names=['truck',\n                                              'construction_vehicle']),\n                dict(num_class=2, class_names=['bus', 'trailer']),\n                dict(num_class=1, class_names=['barrier']),\n                dict(num_class=2, class_names=['motorcycle', 'bicycle']),\n                dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])\n            ],\n            common_heads=dict(\n                reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),\n            share_conv_channel=64,\n            bbox_coder=dict(\n                type='CenterPointBBoxCoder',\n                pc_range=[-54, -54],\n                post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n                max_num=500,\n                score_threshold=0.1,\n                out_size_factor=8,\n                voxel_size=[0.075, 0.075],\n                code_size=9),\n            separate_head=dict(\n                type='SeparateHead', init_bias=-2.19, final_kernel=3),\n            loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),\n            loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),\n            norm_bbox=True),\n        mix_selection=False,\n        num_query=900,\n        num_classes=10,\n        in_channels=256,\n        pc_range=[-54, -54, -5.0, 54, 54, 3.0],\n        sync_cls_avg_factor=True,\n        with_box_refine=True,\n        as_two_stage=False,\n        code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],\n        transformer=dict(\n            type='FUTR3DTransformer',\n            use_dab=True,\n            decoder=dict(\n                type='FUTR3DTransformerDecoder',\n                num_layers=6,\n                use_dab=True,\n                anchor_size=3,\n                return_intermediate=True,\n                transformerlayers=dict(\n                    type='DetrTransformerDecoderLayer',\n                    attn_cfgs=[\n                        dict(\n                            type='MultiheadAttention',\n                            embed_dims=256,\n                            num_heads=8,\n                            dropout=0.1),\n                        dict(type='FUTR3DAttention', embed_dims=256)\n                    ],\n                    feedforward_channels=1024,\n                    ffn_dropout=0.1,\n                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',\n                                     'ffn', 'norm')))),\n        positional_encoding=dict(\n            type='SinePositionalEncoding',\n            num_feats=128,\n            normalize=True,\n            offset=-0.5),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=2.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=0.25),\n        loss_iou=dict(type='GIoULoss', loss_weight=0)),\n    train_cfg=dict(\n        pts=dict(\n            point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0],\n            pc_range=[-54, -54, -5.0, 54, 54, 3.0],\n            grid_size=[1440, 1440, 40],\n            voxel_size=[0.075, 0.075, 0.2],\n            out_size_factor=8,\n            dense_reg=1,\n            gaussian_overlap=0.1,\n            max_objs=500,\n            min_radius=2,\n            code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],\n            assigner=dict(\n                type='HungarianAssigner3D',\n                cls_cost=dict(type='FocalLossCost', weight=2.0),\n                reg_cost=dict(type='BBox3DL1Cost', weight=0.25),\n                iou_cost=dict(type='IoUCost', weight=0)))),\n    test_cfg=dict(\n        pts=dict(\n            pc_range=[-54, -54],\n            post_center_limit_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n            max_per_img=500,\n            max_pool_nms=False,\n            min_radius=[4, 12, 10, 1, 0.85, 0.175],\n            out_size_factor=8,\n            voxel_size=[0.075, 0.075],\n            nms_type='circle',\n            pre_max_size=1000,\n            post_max_size=83,\n            nms_thr=0.2,\n            max_num=300,\n            score_threshold=0,\n            post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0])))\ndb_sampler = dict(\n    data_root='data/nuscenes/',\n    info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',\n    rate=1.0,\n    prepare=dict(\n        filter_by_difficulty=[-1],\n        filter_by_min_points=dict(\n            car=5,\n            truck=5,\n            bus=5,\n            trailer=5,\n            construction_vehicle=5,\n            traffic_cone=5,\n            barrier=5,\n            motorcycle=5,\n            bicycle=5,\n            pedestrian=5)),\n    classes=[\n        'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n        'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n    ],\n    sample_groups=dict(\n        car=2,\n        truck=3,\n        construction_vehicle=7,\n        bus=4,\n        trailer=6,\n        barrier=2,\n        motorcycle=6,\n        bicycle=6,\n        pedestrian=2,\n        traffic_cone=2),\n    points_loader=dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk')))\nfind_unused_parameters = True\ncustom_hooks = [dict(type='FadeOjectSampleHook', num_last_epochs=5)]\ngpu_ids = range(0, 2)\n", "seed": 0, "exp_name": "dssmss.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 3e-05, "memory": 17199, "data_time": 0.07707, "loss_cls": 1.31364, "loss_bbox": 2.21184, "d0.loss_cls": 1.75408, "d0.loss_bbox": 4.39991, "d1.loss_cls": 1.52122, "d1.loss_bbox": 2.26682, "d2.loss_cls": 1.43701, "d2.loss_bbox": 2.24842, "d3.loss_cls": 1.3738, "d3.loss_bbox": 2.23293, "d4.loss_cls": 1.33251, "d4.loss_bbox": 2.21955, "fore_pred_0": 0.69386, "fore_pred_1": 0.62455, "fore_pred_2": 0.67158, "fore_pred_3": 0.70577, "aux_task0.loss_heatmap": 206.2926, "aux_task0.loss_bbox": 0.84966, "aux_task1.loss_heatmap": 682.98615, "aux_task1.loss_bbox": 0.87306, "aux_task2.loss_heatmap": 638.69574, "aux_task2.loss_bbox": 1.11804, "aux_task3.loss_heatmap": 373.84739, "aux_task3.loss_bbox": 0.76635, "aux_task4.loss_heatmap": 430.25348, "aux_task4.loss_bbox": 0.74157, "aux_task5.loss_heatmap": 583.59842, "aux_task5.loss_bbox": 0.77056, "loss": 2945.10476, "grad_norm": 11592.81527, "time": 1.41967}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 3e-05, "memory": 17358, "data_time": 0.00812, "loss_cls": 1.16684, "loss_bbox": 1.91373, "d0.loss_cls": 1.35194, "d0.loss_bbox": 4.0434, "d1.loss_cls": 1.17906, "d1.loss_bbox": 2.07802, "d2.loss_cls": 1.17227, "d2.loss_bbox": 2.0066, "d3.loss_cls": 1.16858, "d3.loss_bbox": 1.95799, "d4.loss_cls": 1.16946, "d4.loss_bbox": 1.92619, "fore_pred_0": 0.68458, "fore_pred_1": 0.59794, "fore_pred_2": 0.66264, "fore_pred_3": 0.71027, "aux_task0.loss_heatmap": 74.61539, "aux_task0.loss_bbox": 0.61618, "aux_task1.loss_heatmap": 269.84389, "aux_task1.loss_bbox": 0.61912, "aux_task2.loss_heatmap": 211.62837, "aux_task2.loss_bbox": 0.87172, "aux_task3.loss_heatmap": 93.36289, "aux_task3.loss_bbox": 0.52301, "aux_task4.loss_heatmap": 163.56489, "aux_task4.loss_bbox": 0.51647, "aux_task5.loss_heatmap": 268.26815, "aux_task5.loss_bbox": 0.54884, "loss": 1106.11299, "grad_norm": 5961.41407, "time": 1.07707}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 3e-05, "memory": 17358, "data_time": 0.00823, "loss_cls": 1.14464, "loss_bbox": 1.99997, "d0.loss_cls": 1.1639, "d0.loss_bbox": 2.40181, "d1.loss_cls": 1.15434, "d1.loss_bbox": 1.82, "d2.loss_cls": 1.1527, "d2.loss_bbox": 1.84925, "d3.loss_cls": 1.1476, "d3.loss_bbox": 1.90429, "d4.loss_cls": 1.14984, "d4.loss_bbox": 1.95645, "fore_pred_0": 0.69007, "fore_pred_1": 0.57876, "fore_pred_2": 0.68059, "fore_pred_3": 0.71082, "aux_task0.loss_heatmap": 29.93507, "aux_task0.loss_bbox": 0.49513, "aux_task1.loss_heatmap": 112.48315, "aux_task1.loss_bbox": 0.56371, "aux_task2.loss_heatmap": 83.59368, "aux_task2.loss_bbox": 0.69254, "aux_task3.loss_heatmap": 34.84257, "aux_task3.loss_bbox": 0.45733, "aux_task4.loss_heatmap": 70.98339, "aux_task4.loss_bbox": 0.45687, "aux_task5.loss_heatmap": 110.91775, "aux_task5.loss_bbox": 0.49855, "loss": 464.76452, "grad_norm": 2940.402, "time": 1.06924}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 3e-05, "memory": 17358, "data_time": 0.00811, "loss_cls": 1.13368, "loss_bbox": 1.7811, "d0.loss_cls": 1.15037, "d0.loss_bbox": 1.76651, "d1.loss_cls": 1.1445, "d1.loss_bbox": 1.77164, "d2.loss_cls": 1.13993, "d2.loss_bbox": 1.78583, "d3.loss_cls": 1.13426, "d3.loss_bbox": 1.78931, "d4.loss_cls": 1.13593, "d4.loss_bbox": 1.78624, "fore_pred_0": 0.69942, "fore_pred_1": 0.57562, "fore_pred_2": 0.69518, "fore_pred_3": 0.71502, "aux_task0.loss_heatmap": 13.73431, "aux_task0.loss_bbox": 0.47836, "aux_task1.loss_heatmap": 53.69643, "aux_task1.loss_bbox": 0.5329, "aux_task2.loss_heatmap": 41.03632, "aux_task2.loss_bbox": 0.58431, "aux_task3.loss_heatmap": 14.18475, "aux_task3.loss_bbox": 0.42142, "aux_task4.loss_heatmap": 32.93882, "aux_task4.loss_bbox": 0.43706, "aux_task5.loss_heatmap": 57.72609, "aux_task5.loss_bbox": 0.47203, "loss": 233.76208, "grad_norm": 1605.4104, "time": 1.0628}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 3e-05, "memory": 17492, "data_time": 0.00869, "loss_cls": 1.12972, "loss_bbox": 1.72167, "d0.loss_cls": 1.14607, "d0.loss_bbox": 1.73047, "d1.loss_cls": 1.14582, "d1.loss_bbox": 1.72893, "d2.loss_cls": 1.13845, "d2.loss_bbox": 1.72536, "d3.loss_cls": 1.13314, "d3.loss_bbox": 1.72004, "d4.loss_cls": 1.13513, "d4.loss_bbox": 1.72264, "fore_pred_0": 0.7107, "fore_pred_1": 0.57685, "fore_pred_2": 0.68215, "fore_pred_3": 0.70916, "aux_task0.loss_heatmap": 6.79789, "aux_task0.loss_bbox": 0.44756, "aux_task1.loss_heatmap": 24.7985, "aux_task1.loss_bbox": 0.5111, "aux_task2.loss_heatmap": 19.06408, "aux_task2.loss_bbox": 0.52681, "aux_task3.loss_heatmap": 9.01329, "aux_task3.loss_bbox": 0.41837, "aux_task4.loss_heatmap": 15.59948, "aux_task4.loss_bbox": 0.43836, "aux_task5.loss_heatmap": 28.20213, "aux_task5.loss_bbox": 0.46678, "loss": 123.4618, "grad_norm": 831.99012, "time": 1.06545}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 3e-05, "memory": 17492, "data_time": 0.00851, "loss_cls": 1.09364, "loss_bbox": 1.71395, "d0.loss_cls": 1.14549, "d0.loss_bbox": 1.72904, "d1.loss_cls": 1.14163, "d1.loss_bbox": 1.7231, "d2.loss_cls": 1.13116, "d2.loss_bbox": 1.72026, "d3.loss_cls": 1.11615, "d3.loss_bbox": 1.72069, "d4.loss_cls": 1.11704, "d4.loss_bbox": 1.7161, "fore_pred_0": 0.71831, "fore_pred_1": 0.57486, "fore_pred_2": 0.66388, "fore_pred_3": 0.6948, "aux_task0.loss_heatmap": 3.50825, "aux_task0.loss_bbox": 0.44146, "aux_task1.loss_heatmap": 12.35354, "aux_task1.loss_bbox": 0.49219, "aux_task2.loss_heatmap": 9.19345, "aux_task2.loss_bbox": 0.52857, "aux_task3.loss_heatmap": 5.08544, "aux_task3.loss_bbox": 0.41398, "aux_task4.loss_heatmap": 7.65202, "aux_task4.loss_bbox": 0.42416, "aux_task5.loss_heatmap": 12.99419, "aux_task5.loss_bbox": 0.46457, "loss": 70.62009, "grad_norm": 405.09336, "time": 1.06365}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 3e-05, "memory": 17492, "data_time": 0.04414, "loss_cls": 1.05945, "loss_bbox": 1.7041, "d0.loss_cls": 1.14731, "d0.loss_bbox": 1.73233, "d1.loss_cls": 1.14103, "d1.loss_bbox": 1.71926, "d2.loss_cls": 1.11689, "d2.loss_bbox": 1.71739, "d3.loss_cls": 1.08226, "d3.loss_bbox": 1.71779, "d4.loss_cls": 1.07233, "d4.loss_bbox": 1.70785, "fore_pred_0": 0.723, "fore_pred_1": 0.57474, "fore_pred_2": 0.66546, "fore_pred_3": 0.67951, "aux_task0.loss_heatmap": 2.35432, "aux_task0.loss_bbox": 0.43865, "aux_task1.loss_heatmap": 5.99888, "aux_task1.loss_bbox": 0.49307, "aux_task2.loss_heatmap": 4.64256, "aux_task2.loss_bbox": 0.50504, "aux_task3.loss_heatmap": 2.76303, "aux_task3.loss_bbox": 0.41023, "aux_task4.loss_heatmap": 3.90111, "aux_task4.loss_bbox": 0.43148, "aux_task5.loss_heatmap": 5.95853, "aux_task5.loss_bbox": 0.46748, "loss": 45.28235, "grad_norm": 178.68894, "time": 1.10056}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 3e-05, "memory": 17492, "data_time": 0.00816, "loss_cls": 1.03272, "loss_bbox": 1.66403, "d0.loss_cls": 1.13096, "d0.loss_bbox": 1.71392, "d1.loss_cls": 1.11827, "d1.loss_bbox": 1.69423, "d2.loss_cls": 1.07361, "d2.loss_bbox": 1.67482, "d3.loss_cls": 1.0465, "d3.loss_bbox": 1.67724, "d4.loss_cls": 1.03814, "d4.loss_bbox": 1.6707, "fore_pred_0": 0.72734, "fore_pred_1": 0.57084, "fore_pred_2": 0.64396, "fore_pred_3": 0.6768, "aux_task0.loss_heatmap": 1.70608, "aux_task0.loss_bbox": 0.42896, "aux_task1.loss_heatmap": 3.13954, "aux_task1.loss_bbox": 0.48336, "aux_task2.loss_heatmap": 2.75561, "aux_task2.loss_bbox": 0.47284, "aux_task3.loss_heatmap": 1.9901, "aux_task3.loss_bbox": 0.40937, "aux_task4.loss_heatmap": 2.33892, "aux_task4.loss_bbox": 0.42789, "aux_task5.loss_heatmap": 3.03215, "aux_task5.loss_bbox": 0.45816, "loss": 34.17812, "grad_norm": 74.47603, "time": 1.06957}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 3e-05, "memory": 17492, "data_time": 0.00796, "loss_cls": 1.01777, "loss_bbox": 1.65757, "d0.loss_cls": 1.11143, "d0.loss_bbox": 1.73472, "d1.loss_cls": 1.08457, "d1.loss_bbox": 1.70883, "d2.loss_cls": 1.0266, "d2.loss_bbox": 1.6839, "d3.loss_cls": 1.01356, "d3.loss_bbox": 1.67412, "d4.loss_cls": 1.01431, "d4.loss_bbox": 1.66099, "fore_pred_0": 0.72735, "fore_pred_1": 0.56122, "fore_pred_2": 0.6431, "fore_pred_3": 0.68776, "aux_task0.loss_heatmap": 1.52498, "aux_task0.loss_bbox": 0.43041, "aux_task1.loss_heatmap": 2.10322, "aux_task1.loss_bbox": 0.47577, "aux_task2.loss_heatmap": 2.03236, "aux_task2.loss_bbox": 0.48527, "aux_task3.loss_heatmap": 1.61628, "aux_task3.loss_bbox": 0.40041, "aux_task4.loss_heatmap": 1.75883, "aux_task4.loss_bbox": 0.42927, "aux_task5.loss_heatmap": 1.92387, "aux_task5.loss_bbox": 0.4595, "loss": 30.02858, "grad_norm": 35.61942, "time": 1.07003}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 3e-05, "memory": 17492, "data_time": 0.00827, "loss_cls": 1.00781, "loss_bbox": 1.62272, "d0.loss_cls": 1.09627, "d0.loss_bbox": 1.73042, "d1.loss_cls": 1.04756, "d1.loss_bbox": 1.67287, "d2.loss_cls": 1.00424, "d2.loss_bbox": 1.64649, "d3.loss_cls": 1.00286, "d3.loss_bbox": 1.63385, "d4.loss_cls": 1.00667, "d4.loss_bbox": 1.62686, "fore_pred_0": 0.72964, "fore_pred_1": 0.55588, "fore_pred_2": 0.63443, "fore_pred_3": 0.6821, "aux_task0.loss_heatmap": 1.41218, "aux_task0.loss_bbox": 0.42283, "aux_task1.loss_heatmap": 1.76477, "aux_task1.loss_bbox": 0.45738, "aux_task2.loss_heatmap": 1.80628, "aux_task2.loss_bbox": 0.46937, "aux_task3.loss_heatmap": 1.51306, "aux_task3.loss_bbox": 0.39785, "aux_task4.loss_heatmap": 1.51204, "aux_task4.loss_bbox": 0.41597, "aux_task5.loss_heatmap": 1.64847, "aux_task5.loss_bbox": 0.44625, "loss": 28.36506, "grad_norm": 24.733, "time": 1.06335}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 3e-05, "memory": 17492, "data_time": 0.01016, "loss_cls": 0.96834, "loss_bbox": 1.59672, "d0.loss_cls": 1.0667, "d0.loss_bbox": 1.71696, "d1.loss_cls": 0.99551, "d1.loss_bbox": 1.6412, "d2.loss_cls": 0.9756, "d2.loss_bbox": 1.61887, "d3.loss_cls": 0.96586, "d3.loss_bbox": 1.60888, "d4.loss_cls": 0.97, "d4.loss_bbox": 1.60145, "fore_pred_0": 0.72888, "fore_pred_1": 0.5532, "fore_pred_2": 0.6303, "fore_pred_3": 0.68421, "aux_task0.loss_heatmap": 1.34994, "aux_task0.loss_bbox": 0.42163, "aux_task1.loss_heatmap": 1.61686, "aux_task1.loss_bbox": 0.45766, "aux_task2.loss_heatmap": 1.75882, "aux_task2.loss_bbox": 0.48002, "aux_task3.loss_heatmap": 1.4228, "aux_task3.loss_bbox": 0.40105, "aux_task4.loss_heatmap": 1.33524, "aux_task4.loss_bbox": 0.42062, "aux_task5.loss_heatmap": 1.49645, "aux_task5.loss_bbox": 0.44046, "loss": 27.32763, "grad_norm": 22.67734, "time": 1.06209}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 3e-05, "memory": 17494, "data_time": 0.00829, "loss_cls": 0.95169, "loss_bbox": 1.58449, "d0.loss_cls": 1.04922, "d0.loss_bbox": 1.72939, "d1.loss_cls": 0.965, "d1.loss_bbox": 1.64048, "d2.loss_cls": 0.95206, "d2.loss_bbox": 1.61565, "d3.loss_cls": 0.94815, "d3.loss_bbox": 1.5999, "d4.loss_cls": 0.95187, "d4.loss_bbox": 1.5895, "fore_pred_0": 0.72942, "fore_pred_1": 0.54804, "fore_pred_2": 0.64042, "fore_pred_3": 0.67743, "aux_task0.loss_heatmap": 1.33862, "aux_task0.loss_bbox": 0.426, "aux_task1.loss_heatmap": 1.592, "aux_task1.loss_bbox": 0.44853, "aux_task2.loss_heatmap": 1.74264, "aux_task2.loss_bbox": 0.47441, "aux_task3.loss_heatmap": 1.34441, "aux_task3.loss_bbox": 0.38609, "aux_task4.loss_heatmap": 1.20514, "aux_task4.loss_bbox": 0.4079, "aux_task5.loss_heatmap": 1.40892, "aux_task5.loss_bbox": 0.43079, "loss": 26.78284, "grad_norm": 22.83167, "time": 1.10569}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 3e-05, "memory": 17494, "data_time": 0.01118, "loss_cls": 0.92672, "loss_bbox": 1.53748, "d0.loss_cls": 1.02293, "d0.loss_bbox": 1.71432, "d1.loss_cls": 0.94191, "d1.loss_bbox": 1.60191, "d2.loss_cls": 0.92838, "d2.loss_bbox": 1.57244, "d3.loss_cls": 0.92312, "d3.loss_bbox": 1.55255, "d4.loss_cls": 0.92425, "d4.loss_bbox": 1.54251, "fore_pred_0": 0.7242, "fore_pred_1": 0.54779, "fore_pred_2": 0.6359, "fore_pred_3": 0.67215, "aux_task0.loss_heatmap": 1.27942, "aux_task0.loss_bbox": 0.39298, "aux_task1.loss_heatmap": 1.51562, "aux_task1.loss_bbox": 0.43683, "aux_task2.loss_heatmap": 1.72897, "aux_task2.loss_bbox": 0.4672, "aux_task3.loss_heatmap": 1.35692, "aux_task3.loss_bbox": 0.37087, "aux_task4.loss_heatmap": 1.16474, "aux_task4.loss_bbox": 0.39331, "aux_task5.loss_heatmap": 1.33444, "aux_task5.loss_bbox": 0.40576, "loss": 26.03557, "grad_norm": 22.74236, "time": 1.07126}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 3e-05, "memory": 17494, "data_time": 0.00858, "loss_cls": 0.92602, "loss_bbox": 1.4903, "d0.loss_cls": 1.00723, "d0.loss_bbox": 1.7034, "d1.loss_cls": 0.93031, "d1.loss_bbox": 1.56483, "d2.loss_cls": 0.92208, "d2.loss_bbox": 1.52127, "d3.loss_cls": 0.9168, "d3.loss_bbox": 1.50414, "d4.loss_cls": 0.9212, "d4.loss_bbox": 1.49811, "fore_pred_0": 0.7226, "fore_pred_1": 0.54516, "fore_pred_2": 0.64158, "fore_pred_3": 0.6809, "aux_task0.loss_heatmap": 1.26793, "aux_task0.loss_bbox": 0.3889, "aux_task1.loss_heatmap": 1.4877, "aux_task1.loss_bbox": 0.42182, "aux_task2.loss_heatmap": 1.70323, "aux_task2.loss_bbox": 0.45844, "aux_task3.loss_heatmap": 1.23332, "aux_task3.loss_bbox": 0.3624, "aux_task4.loss_heatmap": 1.07274, "aux_task4.loss_bbox": 0.37826, "aux_task5.loss_heatmap": 1.29219, "aux_task5.loss_bbox": 0.3958, "loss": 25.36841, "grad_norm": 24.0537, "time": 1.06856}
