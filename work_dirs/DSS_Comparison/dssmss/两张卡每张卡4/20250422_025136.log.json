{"env_info": "sys.platform: linux\nPython: 3.8.20 | packaged by conda-forge | (default, Sep 30 2024, 17:52:49) [GCC 13.3.0]\nCUDA available: True\nGPU 0,1: NVIDIA GeForce RTX 4090 D\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.6, V11.6.55\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0\nPyTorch: 1.13.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2022.1-Product Build 20220311 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.6\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.14.0\nOpenCV: 4.11.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.4\nMMCV CUDA Compiler: 11.6\nMMDetection: 2.27.0\nMMSegmentation: 0.30.0\nMMDetection3D: 1.0.0rc6+637e2ea\nspconv2.0: True", "config": "point_cloud_range = [-54, -54, -5.0, 54, 54, 3.0]\nclass_names = [\n    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n]\ndataset_type = 'NuScenesDataset'\ndata_root = 'data/nuscenes/'\ninput_modality = dict(\n    use_lidar=True,\n    use_camera=False,\n    use_radar=False,\n    use_map=False,\n    use_external=False)\nfile_client_args = dict(backend='disk')\ntrain_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),\n    dict(\n        type='ObjectSample',\n        db_sampler=dict(\n            data_root='data/nuscenes/',\n            info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',\n            rate=1.0,\n            prepare=dict(\n                filter_by_difficulty=[-1],\n                filter_by_min_points=dict(\n                    car=5,\n                    truck=5,\n                    bus=5,\n                    trailer=5,\n                    construction_vehicle=5,\n                    traffic_cone=5,\n                    barrier=5,\n                    motorcycle=5,\n                    bicycle=5,\n                    pedestrian=5)),\n            classes=[\n                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                'traffic_cone'\n            ],\n            sample_groups=dict(\n                car=2,\n                truck=3,\n                construction_vehicle=7,\n                bus=4,\n                trailer=6,\n                barrier=2,\n                motorcycle=6,\n                bicycle=6,\n                pedestrian=2,\n                traffic_cone=2),\n            points_loader=dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk')))),\n    dict(\n        type='GlobalRotScaleTrans',\n        rot_range=[-0.785, 0.785],\n        scale_ratio_range=[0.9, 1.1],\n        translation_std=[0.5, 0.5, 0.5]),\n    dict(\n        type='RandomFlip3D',\n        sync_2d=False,\n        flip_ratio_bev_horizontal=0.5,\n        flip_ratio_bev_vertical=0.5),\n    dict(\n        type='PointsRangeFilter',\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    dict(\n        type='ObjectRangeFilter',\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    dict(\n        type='ObjectNameFilter',\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(type='PointShuffle'),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(type='Collect3D', keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n]\ntest_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(\n        type='MultiScaleFlipAug3D',\n        img_scale=(1333, 800),\n        pts_scale_ratio=1,\n        flip=False,\n        transforms=[\n            dict(\n                type='GlobalRotScaleTrans',\n                rot_range=[0, 0],\n                scale_ratio_range=[1.0, 1.0],\n                translation_std=[0, 0, 0]),\n            dict(type='RandomFlip3D'),\n            dict(\n                type='PointsRangeFilter',\n                point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ],\n                with_label=False),\n            dict(type='Collect3D', keys=['points'])\n        ])\n]\neval_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        with_label=False),\n    dict(type='Collect3D', keys=['points'])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=4,\n    train=dict(\n        type='CBGSDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_train.pkl',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=10,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadAnnotations3D',\n                with_bbox_3d=True,\n                with_label_3d=True),\n            dict(\n                type='GlobalRotScaleTrans',\n                rot_range=[-0.3925, 0.3925],\n                scale_ratio_range=[0.95, 1.05],\n                translation_std=[0, 0, 0]),\n            dict(type='RandomFlip3D', flip_ratio_bev_horizontal=0.5),\n            dict(\n                type='PointsRangeFilter',\n                point_cloud_range=[-50, -50, -5, 50, 50, 3]),\n            dict(\n                type='ObjectRangeFilter',\n                point_cloud_range=[-50, -50, -5, 50, 50, 3]),\n            dict(\n                type='ObjectNameFilter',\n                classes=[\n                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                    'barrier'\n                ]),\n            dict(type='PointShuffle'),\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                    'barrier'\n                ]),\n            dict(\n                type='Collect3D',\n                keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n        ],\n        classes=[\n            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=False,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=False,\n        box_type_3d='LiDAR',\n        split=14,\n        dataset=dict(\n            type='NuScenesDataset',\n            data_root='data/nuscenes/',\n            ann_file='data/nuscenes/nuscenes_infos_train.pkl',\n            pipeline=[\n                dict(\n                    type='LoadPointsFromFile',\n                    coord_type='LIDAR',\n                    load_dim=5,\n                    use_dim=5,\n                    file_client_args=dict(backend='disk')),\n                dict(\n                    type='LoadPointsFromMultiSweeps',\n                    sweeps_num=9,\n                    use_dim=[0, 1, 2, 3, 4],\n                    file_client_args=dict(backend='disk'),\n                    pad_empty_sweeps=True,\n                    remove_close=True),\n                dict(\n                    type='LoadAnnotations3D',\n                    with_bbox_3d=True,\n                    with_label_3d=True),\n                dict(\n                    type='ObjectSample',\n                    db_sampler=dict(\n                        data_root='data/nuscenes/',\n                        info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',\n                        rate=1.0,\n                        prepare=dict(\n                            filter_by_difficulty=[-1],\n                            filter_by_min_points=dict(\n                                car=5,\n                                truck=5,\n                                bus=5,\n                                trailer=5,\n                                construction_vehicle=5,\n                                traffic_cone=5,\n                                barrier=5,\n                                motorcycle=5,\n                                bicycle=5,\n                                pedestrian=5)),\n                        classes=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        sample_groups=dict(\n                            car=2,\n                            truck=3,\n                            construction_vehicle=7,\n                            bus=4,\n                            trailer=6,\n                            barrier=2,\n                            motorcycle=6,\n                            bicycle=6,\n                            pedestrian=2,\n                            traffic_cone=2),\n                        points_loader=dict(\n                            type='LoadPointsFromFile',\n                            coord_type='LIDAR',\n                            load_dim=5,\n                            use_dim=[0, 1, 2, 3, 4],\n                            file_client_args=dict(backend='disk')))),\n                dict(\n                    type='GlobalRotScaleTrans',\n                    rot_range=[-0.785, 0.785],\n                    scale_ratio_range=[0.9, 1.1],\n                    translation_std=[0.5, 0.5, 0.5]),\n                dict(\n                    type='RandomFlip3D',\n                    sync_2d=False,\n                    flip_ratio_bev_horizontal=0.5,\n                    flip_ratio_bev_vertical=0.5),\n                dict(\n                    type='PointsRangeFilter',\n                    point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                dict(\n                    type='ObjectRangeFilter',\n                    point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                dict(\n                    type='ObjectNameFilter',\n                    classes=[\n                        'car', 'truck', 'construction_vehicle', 'bus',\n                        'trailer', 'barrier', 'motorcycle', 'bicycle',\n                        'pedestrian', 'traffic_cone'\n                    ]),\n                dict(type='PointShuffle'),\n                dict(\n                    type='DefaultFormatBundle3D',\n                    class_names=[\n                        'car', 'truck', 'construction_vehicle', 'bus',\n                        'trailer', 'barrier', 'motorcycle', 'bicycle',\n                        'pedestrian', 'traffic_cone'\n                    ]),\n                dict(\n                    type='Collect3D',\n                    keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n            ],\n            classes=[\n                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                'traffic_cone'\n            ],\n            test_mode=False,\n            use_valid_flag=True,\n            box_type_3d='LiDAR')),\n    val=dict(\n        type='NuScenesDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_val.pkl',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=9,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk'),\n                pad_empty_sweeps=True,\n                remove_close=True),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1333, 800),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='GlobalRotScaleTrans',\n                        rot_range=[0, 0],\n                        scale_ratio_range=[1.0, 1.0],\n                        translation_std=[0, 0, 0]),\n                    dict(type='RandomFlip3D'),\n                    dict(\n                        type='PointsRangeFilter',\n                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(type='Collect3D', keys=['points'])\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=False,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=True,\n        box_type_3d='LiDAR'),\n    test=dict(\n        type='NuScenesDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_val.pkl',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=9,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk'),\n                pad_empty_sweeps=True,\n                remove_close=True),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1333, 800),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='GlobalRotScaleTrans',\n                        rot_range=[0, 0],\n                        scale_ratio_range=[1.0, 1.0],\n                        translation_std=[0, 0, 0]),\n                    dict(type='RandomFlip3D'),\n                    dict(\n                        type='PointsRangeFilter',\n                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(type='Collect3D', keys=['points'])\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=False,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=True,\n        box_type_3d='LiDAR'))\nevaluation = dict(\n    interval=1,\n    pipeline=[\n        dict(\n            type='LoadPointsFromFile',\n            coord_type='LIDAR',\n            load_dim=5,\n            use_dim=5,\n            file_client_args=dict(backend='disk')),\n        dict(\n            type='LoadPointsFromMultiSweeps',\n            sweeps_num=10,\n            file_client_args=dict(backend='disk')),\n        dict(\n            type='DefaultFormatBundle3D',\n            class_names=[\n                'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                'barrier'\n            ],\n            with_label=False),\n        dict(type='Collect3D', keys=['points'])\n    ])\noptimizer = dict(type='AdamW', lr=2.5e-05, weight_decay=0.01)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='cyclic',\n    target_ratio=(10, 0.0001),\n    cyclic_times=1,\n    step_ratio_up=0.4)\nmomentum_config = dict(\n    policy='cyclic',\n    target_ratio=(0.8947368421052632, 1),\n    cyclic_times=1,\n    step_ratio_up=0.4)\nrunner = dict(type='EpochBasedRunner', max_epochs=20)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(\n    interval=50,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nwork_dir = './work_dirs/dssmss/\u4e24\u5f20\u5361\u6bcf\u5f20\u53614'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nplugin = 'plugin/futr3d'\nvoxel_size = [0.075, 0.075, 0.2]\ncenter_head = dict(\n    type='CenterHead',\n    in_channels=512,\n    tasks=[\n        dict(num_class=1, class_names=['car']),\n        dict(num_class=2, class_names=['truck', 'construction_vehicle']),\n        dict(num_class=2, class_names=['bus', 'trailer']),\n        dict(num_class=1, class_names=['barrier']),\n        dict(num_class=2, class_names=['motorcycle', 'bicycle']),\n        dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])\n    ],\n    common_heads=dict(\n        reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),\n    share_conv_channel=64,\n    bbox_coder=dict(\n        type='CenterPointBBoxCoder',\n        pc_range=[-54, -54],\n        post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n        max_num=500,\n        score_threshold=0.1,\n        out_size_factor=8,\n        voxel_size=[0.075, 0.075],\n        code_size=9),\n    separate_head=dict(type='SeparateHead', init_bias=-2.19, final_kernel=3),\n    loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),\n    loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),\n    norm_bbox=True)\nmodel = dict(\n    type='FUTR3D',\n    aux_weight=0.5,\n    pts_voxel_layer=dict(\n        max_num_points=10,\n        voxel_size=[0.075, 0.075, 0.2],\n        max_voxels=(120000, 160000),\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    pts_voxel_encoder=dict(type='HardSimpleVFE', num_features=5),\n    pts_middle_encoder=dict(\n        type='SparseEncoder',\n        in_channels=5,\n        sparse_shape=[41, 1440, 1440],\n        output_channels=128,\n        order=('conv', 'norm', 'act'),\n        encoder_channels=((16, 16, 32), (32, 32, 64), (64, 64, 128), (128,\n                                                                      128)),\n        encoder_paddings=((0, 0, 1), (0, 0, 1), (0, 0, [0, 1, 1]), (0, 0)),\n        block_type='basicblock'),\n    pts_backbone=dict(\n        type='SECOND',\n        in_channels=256,\n        out_channels=[128, 256],\n        layer_nums=[5, 5],\n        layer_strides=[1, 2],\n        norm_cfg=dict(type='BN', eps=0.001, momentum=0.01),\n        conv_cfg=dict(type='Conv2d', bias=False)),\n    pts_neck=dict(\n        type='FPN',\n        norm_cfg=dict(type='BN2d', eps=0.001, momentum=0.01),\n        act_cfg=dict(type='ReLU', inplace=False),\n        in_channels=[128, 256],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs=True,\n        num_outs=4,\n        relu_before_extra_convs=True),\n    pts_bbox_head=dict(\n        type='FUTR3DHead',\n        use_dab=True,\n        use_dss=True,\n        dss_batch_first=False,\n        dss_drop_prob=0.1,\n        dss_mamba_prenorm=False,\n        dss_mamba_cfg=dict(),\n        dss_mamba_version='DSSMamba_Tiny',\n        dss_num_layers=2,\n        dss_rope=False,\n        dss_morton_rearrange=True,\n        dss_conv_path=False,\n        dss_xy=True,\n        use_mss=True,\n        mss_num_scales=4,\n        mss_fore_pred_net_in_channels=256,\n        mss_fore_pred_net_intermediate_channels=64,\n        mss_fore_pred_net_out_channels=1,\n        mss_dstate=4,\n        anchor_size=3,\n        use_aux=True,\n        aux_head=dict(\n            type='CenterHead',\n            in_channels=512,\n            tasks=[\n                dict(num_class=1, class_names=['car']),\n                dict(\n                    num_class=2, class_names=['truck',\n                                              'construction_vehicle']),\n                dict(num_class=2, class_names=['bus', 'trailer']),\n                dict(num_class=1, class_names=['barrier']),\n                dict(num_class=2, class_names=['motorcycle', 'bicycle']),\n                dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])\n            ],\n            common_heads=dict(\n                reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),\n            share_conv_channel=64,\n            bbox_coder=dict(\n                type='CenterPointBBoxCoder',\n                pc_range=[-54, -54],\n                post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n                max_num=500,\n                score_threshold=0.1,\n                out_size_factor=8,\n                voxel_size=[0.075, 0.075],\n                code_size=9),\n            separate_head=dict(\n                type='SeparateHead', init_bias=-2.19, final_kernel=3),\n            loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),\n            loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),\n            norm_bbox=True),\n        mix_selection=False,\n        num_query=900,\n        num_classes=10,\n        in_channels=256,\n        pc_range=[-54, -54, -5.0, 54, 54, 3.0],\n        sync_cls_avg_factor=True,\n        with_box_refine=True,\n        as_two_stage=False,\n        code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],\n        transformer=dict(\n            type='FUTR3DTransformer',\n            use_dab=True,\n            decoder=dict(\n                type='FUTR3DTransformerDecoder',\n                num_layers=6,\n                use_dab=True,\n                anchor_size=3,\n                return_intermediate=True,\n                transformerlayers=dict(\n                    type='DetrTransformerDecoderLayer',\n                    attn_cfgs=[\n                        dict(\n                            type='MultiheadAttention',\n                            embed_dims=256,\n                            num_heads=8,\n                            dropout=0.1),\n                        dict(type='FUTR3DAttention', embed_dims=256)\n                    ],\n                    feedforward_channels=1024,\n                    ffn_dropout=0.1,\n                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',\n                                     'ffn', 'norm')))),\n        positional_encoding=dict(\n            type='SinePositionalEncoding',\n            num_feats=128,\n            normalize=True,\n            offset=-0.5),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=2.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=0.25),\n        loss_iou=dict(type='GIoULoss', loss_weight=0)),\n    train_cfg=dict(\n        pts=dict(\n            point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0],\n            pc_range=[-54, -54, -5.0, 54, 54, 3.0],\n            grid_size=[1440, 1440, 40],\n            voxel_size=[0.075, 0.075, 0.2],\n            out_size_factor=8,\n            dense_reg=1,\n            gaussian_overlap=0.1,\n            max_objs=500,\n            min_radius=2,\n            code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],\n            assigner=dict(\n                type='HungarianAssigner3D',\n                cls_cost=dict(type='FocalLossCost', weight=2.0),\n                reg_cost=dict(type='BBox3DL1Cost', weight=0.25),\n                iou_cost=dict(type='IoUCost', weight=0)))),\n    test_cfg=dict(\n        pts=dict(\n            pc_range=[-54, -54],\n            post_center_limit_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n            max_per_img=500,\n            max_pool_nms=False,\n            min_radius=[4, 12, 10, 1, 0.85, 0.175],\n            out_size_factor=8,\n            voxel_size=[0.075, 0.075],\n            nms_type='circle',\n            pre_max_size=1000,\n            post_max_size=83,\n            nms_thr=0.2,\n            max_num=300,\n            score_threshold=0,\n            post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0])))\ndb_sampler = dict(\n    data_root='data/nuscenes/',\n    info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',\n    rate=1.0,\n    prepare=dict(\n        filter_by_difficulty=[-1],\n        filter_by_min_points=dict(\n            car=5,\n            truck=5,\n            bus=5,\n            trailer=5,\n            construction_vehicle=5,\n            traffic_cone=5,\n            barrier=5,\n            motorcycle=5,\n            bicycle=5,\n            pedestrian=5)),\n    classes=[\n        'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n        'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n    ],\n    sample_groups=dict(\n        car=2,\n        truck=3,\n        construction_vehicle=7,\n        bus=4,\n        trailer=6,\n        barrier=2,\n        motorcycle=6,\n        bicycle=6,\n        pedestrian=2,\n        traffic_cone=2),\n    points_loader=dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk')))\nfind_unused_parameters = True\ncustom_hooks = [dict(type='FadeOjectSampleHook', num_last_epochs=5)]\ngpu_ids = range(0, 2)\n", "seed": 0, "exp_name": "dssmss.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 3e-05, "memory": 13483, "data_time": 0.0797, "loss_cls": 1.31385, "loss_bbox": 2.2114, "d0.loss_cls": 1.70174, "d0.loss_bbox": 4.39717, "d1.loss_cls": 1.49331, "d1.loss_bbox": 2.26479, "d2.loss_cls": 1.42815, "d2.loss_bbox": 2.24738, "d3.loss_cls": 1.37335, "d3.loss_bbox": 2.23184, "d4.loss_cls": 1.33235, "d4.loss_bbox": 2.21892, "fore_pred_0": 0.14551, "fore_pred_1": 0.11083, "fore_pred_2": 0.11976, "fore_pred_3": 0.14436, "aux_task0.loss_heatmap": 206.12984, "aux_task0.loss_bbox": 0.85358, "aux_task1.loss_heatmap": 683.06047, "aux_task1.loss_bbox": 0.87272, "aux_task2.loss_heatmap": 639.1246, "aux_task2.loss_bbox": 1.11542, "aux_task3.loss_heatmap": 373.55409, "aux_task3.loss_bbox": 0.76524, "aux_task4.loss_heatmap": 430.35707, "aux_task4.loss_bbox": 0.73836, "aux_task5.loss_heatmap": 582.83734, "aux_task5.loss_bbox": 0.76468, "loss": 2944.38768, "grad_norm": 11622.10238, "time": 1.34559}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 3e-05, "memory": 13483, "data_time": 0.00819, "loss_cls": 1.16546, "loss_bbox": 1.92243, "d0.loss_cls": 1.24605, "d0.loss_bbox": 3.96682, "d1.loss_cls": 1.17279, "d1.loss_bbox": 2.05627, "d2.loss_cls": 1.17054, "d2.loss_bbox": 1.99762, "d3.loss_cls": 1.16819, "d3.loss_bbox": 1.95691, "d4.loss_cls": 1.1689, "d4.loss_bbox": 1.92916, "fore_pred_0": 0.14328, "fore_pred_1": 0.10817, "fore_pred_2": 0.11732, "fore_pred_3": 0.1465, "aux_task0.loss_heatmap": 74.17397, "aux_task0.loss_bbox": 0.61554, "aux_task1.loss_heatmap": 268.61789, "aux_task1.loss_bbox": 0.61737, "aux_task2.loss_heatmap": 211.06193, "aux_task2.loss_bbox": 0.87172, "aux_task3.loss_heatmap": 92.73854, "aux_task3.loss_bbox": 0.51789, "aux_task4.loss_heatmap": 163.04269, "aux_task4.loss_bbox": 0.51695, "aux_task5.loss_heatmap": 267.15416, "aux_task5.loss_bbox": 0.54805, "loss": 1101.39784, "grad_norm": 5951.83982, "time": 1.00025}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 3e-05, "memory": 13483, "data_time": 0.0075, "loss_cls": 1.1414, "loss_bbox": 1.99431, "d0.loss_cls": 1.16014, "d0.loss_bbox": 2.22957, "d1.loss_cls": 1.15196, "d1.loss_bbox": 1.8042, "d2.loss_cls": 1.14887, "d2.loss_bbox": 1.84811, "d3.loss_cls": 1.14358, "d3.loss_bbox": 1.90251, "d4.loss_cls": 1.14586, "d4.loss_bbox": 1.95376, "fore_pred_0": 0.14395, "fore_pred_1": 0.1063, "fore_pred_2": 0.11614, "fore_pred_3": 0.15168, "aux_task0.loss_heatmap": 29.93328, "aux_task0.loss_bbox": 0.49445, "aux_task1.loss_heatmap": 112.57823, "aux_task1.loss_bbox": 0.56527, "aux_task2.loss_heatmap": 83.74872, "aux_task2.loss_bbox": 0.69297, "aux_task3.loss_heatmap": 34.8601, "aux_task3.loss_bbox": 0.45816, "aux_task4.loss_heatmap": 71.66117, "aux_task4.loss_bbox": 0.4566, "aux_task5.loss_heatmap": 110.6945, "aux_task5.loss_bbox": 0.49901, "loss": 465.26672, "grad_norm": 2935.69147, "time": 0.99547}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 3e-05, "memory": 13684, "data_time": 0.01133, "loss_cls": 1.12841, "loss_bbox": 1.76441, "d0.loss_cls": 1.14918, "d0.loss_bbox": 1.7539, "d1.loss_cls": 1.14043, "d1.loss_bbox": 1.75957, "d2.loss_cls": 1.13463, "d2.loss_bbox": 1.77051, "d3.loss_cls": 1.12694, "d3.loss_bbox": 1.77304, "d4.loss_cls": 1.12978, "d4.loss_bbox": 1.77254, "fore_pred_0": 0.14625, "fore_pred_1": 0.10495, "fore_pred_2": 0.11601, "fore_pred_3": 0.15447, "aux_task0.loss_heatmap": 13.84764, "aux_task0.loss_bbox": 0.47816, "aux_task1.loss_heatmap": 54.159, "aux_task1.loss_bbox": 0.5322, "aux_task2.loss_heatmap": 41.05614, "aux_task2.loss_bbox": 0.58751, "aux_task3.loss_heatmap": 14.20701, "aux_task3.loss_bbox": 0.41931, "aux_task4.loss_heatmap": 33.36077, "aux_task4.loss_bbox": 0.43693, "aux_task5.loss_heatmap": 57.76274, "aux_task5.loss_bbox": 0.47343, "loss": 234.7242, "grad_norm": 1610.55016, "time": 0.99734}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 3e-05, "memory": 13684, "data_time": 0.00846, "loss_cls": 1.11901, "loss_bbox": 1.71663, "d0.loss_cls": 1.14583, "d0.loss_bbox": 1.72417, "d1.loss_cls": 1.13971, "d1.loss_bbox": 1.7221, "d2.loss_cls": 1.12953, "d2.loss_bbox": 1.72259, "d3.loss_cls": 1.11628, "d3.loss_bbox": 1.71968, "d4.loss_cls": 1.12086, "d4.loss_bbox": 1.7188, "fore_pred_0": 0.14829, "fore_pred_1": 0.10374, "fore_pred_2": 0.1203, "fore_pred_3": 0.15386, "aux_task0.loss_heatmap": 6.87808, "aux_task0.loss_bbox": 0.44791, "aux_task1.loss_heatmap": 25.11564, "aux_task1.loss_bbox": 0.51193, "aux_task2.loss_heatmap": 18.92709, "aux_task2.loss_bbox": 0.52663, "aux_task3.loss_heatmap": 9.02128, "aux_task3.loss_bbox": 0.41857, "aux_task4.loss_heatmap": 15.6713, "aux_task4.loss_bbox": 0.43783, "aux_task5.loss_heatmap": 28.27565, "aux_task5.loss_bbox": 0.46875, "loss": 123.79586, "grad_norm": 833.31505, "time": 0.99341}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 3e-05, "memory": 13684, "data_time": 0.00864, "loss_cls": 1.07788, "loss_bbox": 1.70441, "d0.loss_cls": 1.1441, "d0.loss_bbox": 1.72669, "d1.loss_cls": 1.13652, "d1.loss_bbox": 1.71804, "d2.loss_cls": 1.116, "d2.loss_bbox": 1.71904, "d3.loss_cls": 1.08472, "d3.loss_bbox": 1.71397, "d4.loss_cls": 1.08588, "d4.loss_bbox": 1.70612, "fore_pred_0": 0.14993, "fore_pred_1": 0.10222, "fore_pred_2": 0.12106, "fore_pred_3": 0.15005, "aux_task0.loss_heatmap": 3.49213, "aux_task0.loss_bbox": 0.44118, "aux_task1.loss_heatmap": 12.28105, "aux_task1.loss_bbox": 0.49401, "aux_task2.loss_heatmap": 9.0631, "aux_task2.loss_bbox": 0.52727, "aux_task3.loss_heatmap": 5.08016, "aux_task3.loss_bbox": 0.4141, "aux_task4.loss_heatmap": 7.5836, "aux_task4.loss_bbox": 0.42558, "aux_task5.loss_heatmap": 12.99097, "aux_task5.loss_bbox": 0.46545, "loss": 70.19196, "grad_norm": 402.79392, "time": 0.99376}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 3e-05, "memory": 13684, "data_time": 0.00846, "loss_cls": 1.05125, "loss_bbox": 1.68675, "d0.loss_cls": 1.14481, "d0.loss_bbox": 1.73617, "d1.loss_cls": 1.13086, "d1.loss_bbox": 1.72135, "d2.loss_cls": 1.09564, "d2.loss_bbox": 1.71352, "d3.loss_cls": 1.05784, "d3.loss_bbox": 1.69952, "d4.loss_cls": 1.05722, "d4.loss_bbox": 1.68925, "fore_pred_0": 0.1506, "fore_pred_1": 0.10092, "fore_pred_2": 0.12231, "fore_pred_3": 0.14417, "aux_task0.loss_heatmap": 2.33301, "aux_task0.loss_bbox": 0.43937, "aux_task1.loss_heatmap": 5.91963, "aux_task1.loss_bbox": 0.49409, "aux_task2.loss_heatmap": 4.67313, "aux_task2.loss_bbox": 0.50331, "aux_task3.loss_heatmap": 2.76986, "aux_task3.loss_bbox": 0.41006, "aux_task4.loss_heatmap": 3.88141, "aux_task4.loss_bbox": 0.43252, "aux_task5.loss_heatmap": 5.91641, "aux_task5.loss_bbox": 0.46685, "loss": 45.02383, "grad_norm": 177.43274, "time": 1.02819}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 3e-05, "memory": 13684, "data_time": 0.00795, "loss_cls": 1.03092, "loss_bbox": 1.65225, "d0.loss_cls": 1.12789, "d0.loss_bbox": 1.71462, "d1.loss_cls": 1.10263, "d1.loss_bbox": 1.6963, "d2.loss_cls": 1.05384, "d2.loss_bbox": 1.67104, "d3.loss_cls": 1.03047, "d3.loss_bbox": 1.66355, "d4.loss_cls": 1.03093, "d4.loss_bbox": 1.65351, "fore_pred_0": 0.14936, "fore_pred_1": 0.09965, "fore_pred_2": 0.11759, "fore_pred_3": 0.14284, "aux_task0.loss_heatmap": 1.70225, "aux_task0.loss_bbox": 0.43007, "aux_task1.loss_heatmap": 3.1136, "aux_task1.loss_bbox": 0.48353, "aux_task2.loss_heatmap": 2.78004, "aux_task2.loss_bbox": 0.47348, "aux_task3.loss_heatmap": 1.99479, "aux_task3.loss_bbox": 0.40892, "aux_task4.loss_heatmap": 2.34378, "aux_task4.loss_bbox": 0.42934, "aux_task5.loss_heatmap": 3.01886, "aux_task5.loss_bbox": 0.46006, "loss": 34.06669, "grad_norm": 74.66368, "time": 0.99831}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 3e-05, "memory": 13684, "data_time": 0.00815, "loss_cls": 1.01657, "loss_bbox": 1.64625, "d0.loss_cls": 1.10824, "d0.loss_bbox": 1.73336, "d1.loss_cls": 1.05677, "d1.loss_bbox": 1.69952, "d2.loss_cls": 1.01781, "d2.loss_bbox": 1.66835, "d3.loss_cls": 1.01248, "d3.loss_bbox": 1.65066, "d4.loss_cls": 1.01634, "d4.loss_bbox": 1.64665, "fore_pred_0": 0.14796, "fore_pred_1": 0.09956, "fore_pred_2": 0.1159, "fore_pred_3": 0.14391, "aux_task0.loss_heatmap": 1.51742, "aux_task0.loss_bbox": 0.43091, "aux_task1.loss_heatmap": 2.08229, "aux_task1.loss_bbox": 0.47541, "aux_task2.loss_heatmap": 2.03095, "aux_task2.loss_bbox": 0.48473, "aux_task3.loss_heatmap": 1.61116, "aux_task3.loss_bbox": 0.39991, "aux_task4.loss_heatmap": 1.75536, "aux_task4.loss_bbox": 0.42827, "aux_task5.loss_heatmap": 1.91496, "aux_task5.loss_bbox": 0.45916, "loss": 29.86353, "grad_norm": 35.28092, "time": 1.00092}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 3e-05, "memory": 13684, "data_time": 0.00798, "loss_cls": 1.007, "loss_bbox": 1.62124, "d0.loss_cls": 1.09372, "d0.loss_bbox": 1.72985, "d1.loss_cls": 1.01619, "d1.loss_bbox": 1.6665, "d2.loss_cls": 1.0082, "d2.loss_bbox": 1.64515, "d3.loss_cls": 1.00195, "d3.loss_bbox": 1.63718, "d4.loss_cls": 1.00402, "d4.loss_bbox": 1.62898, "fore_pred_0": 0.14694, "fore_pred_1": 0.09852, "fore_pred_2": 0.11847, "fore_pred_3": 0.14339, "aux_task0.loss_heatmap": 1.41025, "aux_task0.loss_bbox": 0.42341, "aux_task1.loss_heatmap": 1.75929, "aux_task1.loss_bbox": 0.45887, "aux_task2.loss_heatmap": 1.80649, "aux_task2.loss_bbox": 0.46981, "aux_task3.loss_heatmap": 1.52807, "aux_task3.loss_bbox": 0.3978, "aux_task4.loss_heatmap": 1.52085, "aux_task4.loss_bbox": 0.4166, "aux_task5.loss_heatmap": 1.65105, "aux_task5.loss_bbox": 0.44575, "loss": 28.34823, "grad_norm": 25.4588, "time": 0.99328}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 3e-05, "memory": 13684, "data_time": 0.00753, "loss_cls": 0.97261, "loss_bbox": 1.59938, "d0.loss_cls": 1.06548, "d0.loss_bbox": 1.71622, "d1.loss_cls": 0.97813, "d1.loss_bbox": 1.63417, "d2.loss_cls": 0.98024, "d2.loss_bbox": 1.62141, "d3.loss_cls": 0.97024, "d3.loss_bbox": 1.614, "d4.loss_cls": 0.97299, "d4.loss_bbox": 1.60475, "fore_pred_0": 0.1472, "fore_pred_1": 0.09793, "fore_pred_2": 0.11965, "fore_pred_3": 0.1433, "aux_task0.loss_heatmap": 1.35203, "aux_task0.loss_bbox": 0.41521, "aux_task1.loss_heatmap": 1.61415, "aux_task1.loss_bbox": 0.45293, "aux_task2.loss_heatmap": 1.76136, "aux_task2.loss_bbox": 0.47532, "aux_task3.loss_heatmap": 1.44087, "aux_task3.loss_bbox": 0.39476, "aux_task4.loss_heatmap": 1.36325, "aux_task4.loss_bbox": 0.41853, "aux_task5.loss_heatmap": 1.51361, "aux_task5.loss_bbox": 0.43944, "loss": 27.37108, "grad_norm": 22.94105, "time": 0.99009}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 3e-05, "memory": 13684, "data_time": 0.00839, "loss_cls": 0.95448, "loss_bbox": 1.58754, "d0.loss_cls": 1.04676, "d0.loss_bbox": 1.72439, "d1.loss_cls": 0.96206, "d1.loss_bbox": 1.62812, "d2.loss_cls": 0.96032, "d2.loss_bbox": 1.61238, "d3.loss_cls": 0.95456, "d3.loss_bbox": 1.5983, "d4.loss_cls": 0.95523, "d4.loss_bbox": 1.58843, "fore_pred_0": 0.1482, "fore_pred_1": 0.09749, "fore_pred_2": 0.11876, "fore_pred_3": 0.1433, "aux_task0.loss_heatmap": 1.34094, "aux_task0.loss_bbox": 0.40961, "aux_task1.loss_heatmap": 1.58881, "aux_task1.loss_bbox": 0.43959, "aux_task2.loss_heatmap": 1.74633, "aux_task2.loss_bbox": 0.47279, "aux_task3.loss_heatmap": 1.35817, "aux_task3.loss_bbox": 0.37674, "aux_task4.loss_heatmap": 1.23123, "aux_task4.loss_bbox": 0.40259, "aux_task5.loss_heatmap": 1.42253, "aux_task5.loss_bbox": 0.42125, "loss": 26.78315, "grad_norm": 22.54913, "time": 0.99958}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 3e-05, "memory": 13783, "data_time": 0.00784, "loss_cls": 0.93222, "loss_bbox": 1.5476, "d0.loss_cls": 1.02157, "d0.loss_bbox": 1.72118, "d1.loss_cls": 0.93857, "d1.loss_bbox": 1.61287, "d2.loss_cls": 0.9376, "d2.loss_bbox": 1.58584, "d3.loss_cls": 0.93319, "d3.loss_bbox": 1.55933, "d4.loss_cls": 0.93388, "d4.loss_bbox": 1.54976, "fore_pred_0": 0.15039, "fore_pred_1": 0.09808, "fore_pred_2": 0.12252, "fore_pred_3": 0.14356, "aux_task0.loss_heatmap": 1.28565, "aux_task0.loss_bbox": 0.38439, "aux_task1.loss_heatmap": 1.51692, "aux_task1.loss_bbox": 0.42968, "aux_task2.loss_heatmap": 1.73065, "aux_task2.loss_bbox": 0.46848, "aux_task3.loss_heatmap": 1.36541, "aux_task3.loss_bbox": 0.37227, "aux_task4.loss_heatmap": 1.18369, "aux_task4.loss_bbox": 0.3909, "aux_task5.loss_heatmap": 1.34316, "aux_task5.loss_bbox": 0.40069, "loss": 26.14552, "grad_norm": 22.71821, "time": 1.03423}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 3e-05, "memory": 13783, "data_time": 0.00774, "loss_cls": 0.92663, "loss_bbox": 1.50351, "d0.loss_cls": 1.00853, "d0.loss_bbox": 1.71019, "d1.loss_cls": 0.92624, "d1.loss_bbox": 1.57787, "d2.loss_cls": 0.92536, "d2.loss_bbox": 1.54008, "d3.loss_cls": 0.92345, "d3.loss_bbox": 1.51197, "d4.loss_cls": 0.92542, "d4.loss_bbox": 1.50418, "fore_pred_0": 0.15121, "fore_pred_1": 0.09809, "fore_pred_2": 0.12503, "fore_pred_3": 0.14273, "aux_task0.loss_heatmap": 1.27391, "aux_task0.loss_bbox": 0.38373, "aux_task1.loss_heatmap": 1.48776, "aux_task1.loss_bbox": 0.41682, "aux_task2.loss_heatmap": 1.7043, "aux_task2.loss_bbox": 0.45824, "aux_task3.loss_heatmap": 1.23398, "aux_task3.loss_bbox": 0.36358, "aux_task4.loss_heatmap": 1.08721, "aux_task4.loss_bbox": 0.37738, "aux_task5.loss_heatmap": 1.29956, "aux_task5.loss_bbox": 0.3934, "loss": 25.4633, "grad_norm": 23.09837, "time": 0.99896}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 3e-05, "memory": 13783, "data_time": 0.00791, "loss_cls": 0.92175, "loss_bbox": 1.43761, "d0.loss_cls": 0.99538, "d0.loss_bbox": 1.69071, "d1.loss_cls": 0.92371, "d1.loss_bbox": 1.52091, "d2.loss_cls": 0.92329, "d2.loss_bbox": 1.47322, "d3.loss_cls": 0.91989, "d3.loss_bbox": 1.44808, "d4.loss_cls": 0.92113, "d4.loss_bbox": 1.44056, "fore_pred_0": 0.15172, "fore_pred_1": 0.09715, "fore_pred_2": 0.12378, "fore_pred_3": 0.14364, "aux_task0.loss_heatmap": 1.23771, "aux_task0.loss_bbox": 0.37455, "aux_task1.loss_heatmap": 1.47849, "aux_task1.loss_bbox": 0.41585, "aux_task2.loss_heatmap": 1.69895, "aux_task2.loss_bbox": 0.44812, "aux_task3.loss_heatmap": 1.22756, "aux_task3.loss_bbox": 0.34874, "aux_task4.loss_heatmap": 1.052, "aux_task4.loss_bbox": 0.37809, "aux_task5.loss_heatmap": 1.25781, "aux_task5.loss_bbox": 0.38437, "loss": 24.91847, "grad_norm": 24.40568, "time": 1.00074}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 3e-05, "memory": 13783, "data_time": 0.00786, "loss_cls": 0.91951, "loss_bbox": 1.40963, "d0.loss_cls": 0.99226, "d0.loss_bbox": 1.68225, "d1.loss_cls": 0.92627, "d1.loss_bbox": 1.49803, "d2.loss_cls": 0.92019, "d2.loss_bbox": 1.45068, "d3.loss_cls": 0.91619, "d3.loss_bbox": 1.42229, "d4.loss_cls": 0.91705, "d4.loss_bbox": 1.41504, "fore_pred_0": 0.15129, "fore_pred_1": 0.09697, "fore_pred_2": 0.12258, "fore_pred_3": 0.14283, "aux_task0.loss_heatmap": 1.19058, "aux_task0.loss_bbox": 0.36784, "aux_task1.loss_heatmap": 1.45257, "aux_task1.loss_bbox": 0.41311, "aux_task2.loss_heatmap": 1.68325, "aux_task2.loss_bbox": 0.44886, "aux_task3.loss_heatmap": 1.28144, "aux_task3.loss_bbox": 0.35242, "aux_task4.loss_heatmap": 1.00576, "aux_task4.loss_bbox": 0.36408, "aux_task5.loss_heatmap": 1.24067, "aux_task5.loss_bbox": 0.37856, "loss": 24.6485, "grad_norm": 26.42324, "time": 0.98959}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 3e-05, "memory": 13783, "data_time": 0.00762, "loss_cls": 0.90733, "loss_bbox": 1.37068, "d0.loss_cls": 0.97771, "d0.loss_bbox": 1.66036, "d1.loss_cls": 0.91571, "d1.loss_bbox": 1.46896, "d2.loss_cls": 0.91011, "d2.loss_bbox": 1.41911, "d3.loss_cls": 0.90473, "d3.loss_bbox": 1.38629, "d4.loss_cls": 0.90652, "d4.loss_bbox": 1.378, "fore_pred_0": 0.15039, "fore_pred_1": 0.0969, "fore_pred_2": 0.12033, "fore_pred_3": 0.14305, "aux_task0.loss_heatmap": 1.17568, "aux_task0.loss_bbox": 0.36831, "aux_task1.loss_heatmap": 1.41916, "aux_task1.loss_bbox": 0.40819, "aux_task2.loss_heatmap": 1.66502, "aux_task2.loss_bbox": 0.45336, "aux_task3.loss_heatmap": 1.25476, "aux_task3.loss_bbox": 0.34648, "aux_task4.loss_heatmap": 0.97916, "aux_task4.loss_bbox": 0.36145, "aux_task5.loss_heatmap": 1.21382, "aux_task5.loss_bbox": 0.37666, "loss": 24.22757, "grad_norm": 26.20975, "time": 0.99282}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 3e-05, "memory": 13783, "data_time": 0.00797, "loss_cls": 0.8915, "loss_bbox": 1.32703, "d0.loss_cls": 0.96056, "d0.loss_bbox": 1.62335, "d1.loss_cls": 0.89922, "d1.loss_bbox": 1.4356, "d2.loss_cls": 0.89006, "d2.loss_bbox": 1.38599, "d3.loss_cls": 0.88769, "d3.loss_bbox": 1.3476, "d4.loss_cls": 0.8891, "d4.loss_bbox": 1.33866, "fore_pred_0": 0.15016, "fore_pred_1": 0.09676, "fore_pred_2": 0.12024, "fore_pred_3": 0.14199, "aux_task0.loss_heatmap": 1.14707, "aux_task0.loss_bbox": 0.36213, "aux_task1.loss_heatmap": 1.39986, "aux_task1.loss_bbox": 0.4036, "aux_task2.loss_heatmap": 1.64387, "aux_task2.loss_bbox": 0.44736, "aux_task3.loss_heatmap": 1.21762, "aux_task3.loss_bbox": 0.3435, "aux_task4.loss_heatmap": 0.94857, "aux_task4.loss_bbox": 0.35839, "aux_task5.loss_heatmap": 1.16679, "aux_task5.loss_bbox": 0.37397, "loss": 23.68908, "grad_norm": 27.0011, "time": 0.99977}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 3e-05, "memory": 13783, "data_time": 0.0079, "loss_cls": 0.88336, "loss_bbox": 1.29895, "d0.loss_cls": 0.94294, "d0.loss_bbox": 1.58855, "d1.loss_cls": 0.89164, "d1.loss_bbox": 1.40742, "d2.loss_cls": 0.8824, "d2.loss_bbox": 1.35268, "d3.loss_cls": 0.87763, "d3.loss_bbox": 1.31793, "d4.loss_cls": 0.88158, "d4.loss_bbox": 1.30845, "fore_pred_0": 0.1488, "fore_pred_1": 0.09672, "fore_pred_2": 0.12006, "fore_pred_3": 0.14217, "aux_task0.loss_heatmap": 1.14475, "aux_task0.loss_bbox": 0.37387, "aux_task1.loss_heatmap": 1.39117, "aux_task1.loss_bbox": 0.40147, "aux_task2.loss_heatmap": 1.64341, "aux_task2.loss_bbox": 0.43745, "aux_task3.loss_heatmap": 1.16484, "aux_task3.loss_bbox": 0.34138, "aux_task4.loss_heatmap": 0.92329, "aux_task4.loss_bbox": 0.35888, "aux_task5.loss_heatmap": 1.11832, "aux_task5.loss_bbox": 0.36336, "loss": 23.29571, "grad_norm": 29.04175, "time": 0.99679}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 3e-05, "memory": 13783, "data_time": 0.00767, "loss_cls": 0.881, "loss_bbox": 1.28586, "d0.loss_cls": 0.93989, "d0.loss_bbox": 1.56188, "d1.loss_cls": 0.8876, "d1.loss_bbox": 1.39379, "d2.loss_cls": 0.88147, "d2.loss_bbox": 1.33357, "d3.loss_cls": 0.87725, "d3.loss_bbox": 1.29983, "d4.loss_cls": 0.8796, "d4.loss_bbox": 1.29405, "fore_pred_0": 0.14906, "fore_pred_1": 0.09653, "fore_pred_2": 0.11956, "fore_pred_3": 0.14164, "aux_task0.loss_heatmap": 1.14208, "aux_task0.loss_bbox": 0.37219, "aux_task1.loss_heatmap": 1.37495, "aux_task1.loss_bbox": 0.40419, "aux_task2.loss_heatmap": 1.63237, "aux_task2.loss_bbox": 0.43831, "aux_task3.loss_heatmap": 1.18238, "aux_task3.loss_bbox": 0.34031, "aux_task4.loss_heatmap": 0.89991, "aux_task4.loss_bbox": 0.3574, "aux_task5.loss_heatmap": 1.11257, "aux_task5.loss_bbox": 0.36697, "loss": 23.13943, "grad_norm": 32.80841, "time": 0.9974}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 3e-05, "memory": 13783, "data_time": 0.00829, "loss_cls": 0.87763, "loss_bbox": 1.26225, "d0.loss_cls": 0.92559, "d0.loss_bbox": 1.52035, "d1.loss_cls": 0.88473, "d1.loss_bbox": 1.35898, "d2.loss_cls": 0.87726, "d2.loss_bbox": 1.3037, "d3.loss_cls": 0.87466, "d3.loss_bbox": 1.27369, "d4.loss_cls": 0.87536, "d4.loss_bbox": 1.2692, "fore_pred_0": 0.14924, "fore_pred_1": 0.0965, "fore_pred_2": 0.11767, "fore_pred_3": 0.14213, "aux_task0.loss_heatmap": 1.12002, "aux_task0.loss_bbox": 0.36618, "aux_task1.loss_heatmap": 1.35795, "aux_task1.loss_bbox": 0.40419, "aux_task2.loss_heatmap": 1.62386, "aux_task2.loss_bbox": 0.43682, "aux_task3.loss_heatmap": 1.16172, "aux_task3.loss_bbox": 0.34092, "aux_task4.loss_heatmap": 0.90948, "aux_task4.loss_bbox": 0.3574, "aux_task5.loss_heatmap": 1.09477, "aux_task5.loss_bbox": 0.36304, "loss": 22.83975, "grad_norm": 32.20988, "time": 0.99053}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 3e-05, "memory": 13783, "data_time": 0.00842, "loss_cls": 0.85421, "loss_bbox": 1.24985, "d0.loss_cls": 0.90167, "d0.loss_bbox": 1.51451, "d1.loss_cls": 0.86412, "d1.loss_bbox": 1.34731, "d2.loss_cls": 0.85473, "d2.loss_bbox": 1.28943, "d3.loss_cls": 0.85093, "d3.loss_bbox": 1.26212, "d4.loss_cls": 0.85204, "d4.loss_bbox": 1.25856, "fore_pred_0": 0.14812, "fore_pred_1": 0.0965, "fore_pred_2": 0.11658, "fore_pred_3": 0.1424, "aux_task0.loss_heatmap": 1.0842, "aux_task0.loss_bbox": 0.36042, "aux_task1.loss_heatmap": 1.34832, "aux_task1.loss_bbox": 0.40105, "aux_task2.loss_heatmap": 1.61273, "aux_task2.loss_bbox": 0.44039, "aux_task3.loss_heatmap": 1.13886, "aux_task3.loss_bbox": 0.3353, "aux_task4.loss_heatmap": 0.89357, "aux_task4.loss_bbox": 0.36233, "aux_task5.loss_heatmap": 1.07987, "aux_task5.loss_bbox": 0.35835, "loss": 22.51488, "grad_norm": 34.47487, "time": 1.00366}
