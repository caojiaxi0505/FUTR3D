2025-04-15 20:11:44,047 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.20 | packaged by conda-forge | (default, Sep 30 2024, 17:52:49) [GCC 13.3.0]
CUDA available: True
GPU 0,1: NVIDIA GeForce RTX 4090 D
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.6, V11.6.55
GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0
PyTorch: 1.13.0
PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2022.1-Product Build 20220311 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.6
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.14.0
OpenCV: 4.11.0
MMCV: 1.7.0
MMCV Compiler: GCC 9.4
MMCV CUDA Compiler: 11.6
MMDetection: 2.27.0
MMSegmentation: 0.30.0
MMDetection3D: 1.0.0rc6+9130d71
spconv2.0: True
------------------------------------------------------------

2025-04-15 20:11:44,872 - mmdet - INFO - Distributed training: True
2025-04-15 20:11:45,694 - mmdet - INFO - Config:
point_cloud_range = [-54, -54, -5.0, 54, 54, 3.0]
class_names = [
    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',
    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
]
dataset_type = 'NuScenesDataset'
data_root = 'data/nuscenes/'
input_modality = dict(
    use_lidar=True,
    use_camera=False,
    use_radar=False,
    use_map=False,
    use_external=False)
file_client_args = dict(backend='disk')
train_pipeline = [
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        file_client_args=dict(backend='disk')),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=9,
        use_dim=[0, 1, 2, 3, 4],
        file_client_args=dict(backend='disk'),
        pad_empty_sweeps=True,
        remove_close=True),
    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),
    dict(
        type='ObjectSample',
        db_sampler=dict(
            data_root='data/nuscenes/',
            info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',
            rate=1.0,
            prepare=dict(
                filter_by_difficulty=[-1],
                filter_by_min_points=dict(
                    car=5,
                    truck=5,
                    bus=5,
                    trailer=5,
                    construction_vehicle=5,
                    traffic_cone=5,
                    barrier=5,
                    motorcycle=5,
                    bicycle=5,
                    pedestrian=5)),
            classes=[
                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                'traffic_cone'
            ],
            sample_groups=dict(
                car=2,
                truck=3,
                construction_vehicle=7,
                bus=4,
                trailer=6,
                barrier=2,
                motorcycle=6,
                bicycle=6,
                pedestrian=2,
                traffic_cone=2),
            points_loader=dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=[0, 1, 2, 3, 4],
                file_client_args=dict(backend='disk')))),
    dict(
        type='GlobalRotScaleTrans',
        rot_range=[-0.785, 0.785],
        scale_ratio_range=[0.9, 1.1],
        translation_std=[0.5, 0.5, 0.5]),
    dict(
        type='RandomFlip3D',
        sync_2d=False,
        flip_ratio_bev_horizontal=0.5,
        flip_ratio_bev_vertical=0.5),
    dict(
        type='PointsRangeFilter',
        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
    dict(
        type='ObjectRangeFilter',
        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
    dict(
        type='ObjectNameFilter',
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ]),
    dict(type='PointShuffle'),
    dict(
        type='DefaultFormatBundle3D',
        class_names=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ]),
    dict(type='Collect3D', keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])
]
test_pipeline = [
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        file_client_args=dict(backend='disk')),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=9,
        use_dim=[0, 1, 2, 3, 4],
        file_client_args=dict(backend='disk'),
        pad_empty_sweeps=True,
        remove_close=True),
    dict(
        type='MultiScaleFlipAug3D',
        img_scale=(1333, 800),
        pts_scale_ratio=1,
        flip=False,
        transforms=[
            dict(
                type='GlobalRotScaleTrans',
                rot_range=[0, 0],
                scale_ratio_range=[1.0, 1.0],
                translation_std=[0, 0, 0]),
            dict(type='RandomFlip3D'),
            dict(
                type='PointsRangeFilter',
                point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
            dict(
                type='DefaultFormatBundle3D',
                class_names=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ],
                with_label=False),
            dict(type='Collect3D', keys=['points'])
        ])
]
eval_pipeline = [
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        file_client_args=dict(backend='disk')),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=9,
        use_dim=[0, 1, 2, 3, 4],
        file_client_args=dict(backend='disk'),
        pad_empty_sweeps=True,
        remove_close=True),
    dict(
        type='DefaultFormatBundle3D',
        class_names=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        with_label=False),
    dict(type='Collect3D', keys=['points'])
]
data = dict(
    samples_per_gpu=4,
    workers_per_gpu=4,
    train=dict(
        type='CBGSDataset',
        data_root='data/nuscenes/',
        ann_file='data/nuscenes/nuscenes_infos_train.pkl',
        pipeline=[
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                file_client_args=dict(backend='disk')),
            dict(
                type='LoadPointsFromMultiSweeps',
                sweeps_num=10,
                file_client_args=dict(backend='disk')),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True),
            dict(
                type='GlobalRotScaleTrans',
                rot_range=[-0.3925, 0.3925],
                scale_ratio_range=[0.95, 1.05],
                translation_std=[0, 0, 0]),
            dict(type='RandomFlip3D', flip_ratio_bev_horizontal=0.5),
            dict(
                type='PointsRangeFilter',
                point_cloud_range=[-50, -50, -5, 50, 50, 3]),
            dict(
                type='ObjectRangeFilter',
                point_cloud_range=[-50, -50, -5, 50, 50, 3]),
            dict(
                type='ObjectNameFilter',
                classes=[
                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',
                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',
                    'barrier'
                ]),
            dict(type='PointShuffle'),
            dict(
                type='DefaultFormatBundle3D',
                class_names=[
                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',
                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',
                    'barrier'
                ]),
            dict(
                type='Collect3D',
                keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])
        ],
        classes=[
            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',
            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=False,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=False,
        box_type_3d='LiDAR',
        split=14,
        dataset=dict(
            type='NuScenesDataset',
            data_root='data/nuscenes/',
            ann_file='data/nuscenes/nuscenes_infos_train.pkl',
            pipeline=[
                dict(
                    type='LoadPointsFromFile',
                    coord_type='LIDAR',
                    load_dim=5,
                    use_dim=5,
                    file_client_args=dict(backend='disk')),
                dict(
                    type='LoadPointsFromMultiSweeps',
                    sweeps_num=9,
                    use_dim=[0, 1, 2, 3, 4],
                    file_client_args=dict(backend='disk'),
                    pad_empty_sweeps=True,
                    remove_close=True),
                dict(
                    type='LoadAnnotations3D',
                    with_bbox_3d=True,
                    with_label_3d=True),
                dict(
                    type='ObjectSample',
                    db_sampler=dict(
                        data_root='data/nuscenes/',
                        info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',
                        rate=1.0,
                        prepare=dict(
                            filter_by_difficulty=[-1],
                            filter_by_min_points=dict(
                                car=5,
                                truck=5,
                                bus=5,
                                trailer=5,
                                construction_vehicle=5,
                                traffic_cone=5,
                                barrier=5,
                                motorcycle=5,
                                bicycle=5,
                                pedestrian=5)),
                        classes=[
                            'car', 'truck', 'construction_vehicle', 'bus',
                            'trailer', 'barrier', 'motorcycle', 'bicycle',
                            'pedestrian', 'traffic_cone'
                        ],
                        sample_groups=dict(
                            car=2,
                            truck=3,
                            construction_vehicle=7,
                            bus=4,
                            trailer=6,
                            barrier=2,
                            motorcycle=6,
                            bicycle=6,
                            pedestrian=2,
                            traffic_cone=2),
                        points_loader=dict(
                            type='LoadPointsFromFile',
                            coord_type='LIDAR',
                            load_dim=5,
                            use_dim=[0, 1, 2, 3, 4],
                            file_client_args=dict(backend='disk')))),
                dict(
                    type='GlobalRotScaleTrans',
                    rot_range=[-0.785, 0.785],
                    scale_ratio_range=[0.9, 1.1],
                    translation_std=[0.5, 0.5, 0.5]),
                dict(
                    type='RandomFlip3D',
                    sync_2d=False,
                    flip_ratio_bev_horizontal=0.5,
                    flip_ratio_bev_vertical=0.5),
                dict(
                    type='PointsRangeFilter',
                    point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
                dict(
                    type='ObjectRangeFilter',
                    point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
                dict(
                    type='ObjectNameFilter',
                    classes=[
                        'car', 'truck', 'construction_vehicle', 'bus',
                        'trailer', 'barrier', 'motorcycle', 'bicycle',
                        'pedestrian', 'traffic_cone'
                    ]),
                dict(type='PointShuffle'),
                dict(
                    type='DefaultFormatBundle3D',
                    class_names=[
                        'car', 'truck', 'construction_vehicle', 'bus',
                        'trailer', 'barrier', 'motorcycle', 'bicycle',
                        'pedestrian', 'traffic_cone'
                    ]),
                dict(
                    type='Collect3D',
                    keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])
            ],
            classes=[
                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                'traffic_cone'
            ],
            test_mode=False,
            use_valid_flag=True,
            box_type_3d='LiDAR')),
    val=dict(
        type='NuScenesDataset',
        data_root='data/nuscenes/',
        ann_file='data/nuscenes/nuscenes_infos_val.pkl',
        pipeline=[
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                file_client_args=dict(backend='disk')),
            dict(
                type='LoadPointsFromMultiSweeps',
                sweeps_num=9,
                use_dim=[0, 1, 2, 3, 4],
                file_client_args=dict(backend='disk'),
                pad_empty_sweeps=True,
                remove_close=True),
            dict(
                type='MultiScaleFlipAug3D',
                img_scale=(1333, 800),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type='GlobalRotScaleTrans',
                        rot_range=[0, 0],
                        scale_ratio_range=[1.0, 1.0],
                        translation_std=[0, 0, 0]),
                    dict(type='RandomFlip3D'),
                    dict(
                        type='PointsRangeFilter',
                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
                    dict(
                        type='DefaultFormatBundle3D',
                        class_names=[
                            'car', 'truck', 'construction_vehicle', 'bus',
                            'trailer', 'barrier', 'motorcycle', 'bicycle',
                            'pedestrian', 'traffic_cone'
                        ],
                        with_label=False),
                    dict(type='Collect3D', keys=['points'])
                ])
        ],
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=False,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=True,
        box_type_3d='LiDAR'),
    test=dict(
        type='NuScenesDataset',
        data_root='data/nuscenes/',
        ann_file='data/nuscenes/nuscenes_infos_val.pkl',
        pipeline=[
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                file_client_args=dict(backend='disk')),
            dict(
                type='LoadPointsFromMultiSweeps',
                sweeps_num=9,
                use_dim=[0, 1, 2, 3, 4],
                file_client_args=dict(backend='disk'),
                pad_empty_sweeps=True,
                remove_close=True),
            dict(
                type='MultiScaleFlipAug3D',
                img_scale=(1333, 800),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type='GlobalRotScaleTrans',
                        rot_range=[0, 0],
                        scale_ratio_range=[1.0, 1.0],
                        translation_std=[0, 0, 0]),
                    dict(type='RandomFlip3D'),
                    dict(
                        type='PointsRangeFilter',
                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
                    dict(
                        type='DefaultFormatBundle3D',
                        class_names=[
                            'car', 'truck', 'construction_vehicle', 'bus',
                            'trailer', 'barrier', 'motorcycle', 'bicycle',
                            'pedestrian', 'traffic_cone'
                        ],
                        with_label=False),
                    dict(type='Collect3D', keys=['points'])
                ])
        ],
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=False,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=True,
        box_type_3d='LiDAR'))
evaluation = dict(
    interval=1,
    pipeline=[
        dict(
            type='LoadPointsFromFile',
            coord_type='LIDAR',
            load_dim=5,
            use_dim=5,
            file_client_args=dict(backend='disk')),
        dict(
            type='LoadPointsFromMultiSweeps',
            sweeps_num=10,
            file_client_args=dict(backend='disk')),
        dict(
            type='DefaultFormatBundle3D',
            class_names=[
                'car', 'truck', 'trailer', 'bus', 'construction_vehicle',
                'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',
                'barrier'
            ],
            with_label=False),
        dict(type='Collect3D', keys=['points'])
    ])
optimizer = dict(type='AdamW', lr=2.5e-05, weight_decay=0.01)
optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))
lr_config = dict(
    policy='cyclic',
    target_ratio=(10, 0.0001),
    cyclic_times=1,
    step_ratio_up=0.4)
momentum_config = dict(
    policy='cyclic',
    target_ratio=(0.8947368421052632, 1),
    cyclic_times=1,
    step_ratio_up=0.4)
runner = dict(type='EpochBasedRunner', max_epochs=20)
checkpoint_config = dict(interval=1)
log_config = dict(
    interval=50,
    hooks=[dict(type='TextLoggerHook'),
           dict(type='TensorboardLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
work_dir = './work_dirs/DSSMambaGigantic_layer3_rope_drop01/两张卡每张卡4'
load_from = None
resume_from = None
workflow = [('train', 1)]
opencv_num_threads = 0
mp_start_method = 'fork'
plugin = 'plugin/futr3d'
voxel_size = [0.075, 0.075, 0.2]
center_head = dict(
    type='CenterHead',
    in_channels=512,
    tasks=[
        dict(num_class=1, class_names=['car']),
        dict(num_class=2, class_names=['truck', 'construction_vehicle']),
        dict(num_class=2, class_names=['bus', 'trailer']),
        dict(num_class=1, class_names=['barrier']),
        dict(num_class=2, class_names=['motorcycle', 'bicycle']),
        dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])
    ],
    common_heads=dict(
        reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),
    share_conv_channel=64,
    bbox_coder=dict(
        type='CenterPointBBoxCoder',
        pc_range=[-54, -54],
        post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],
        max_num=500,
        score_threshold=0.1,
        out_size_factor=8,
        voxel_size=[0.075, 0.075],
        code_size=9),
    separate_head=dict(type='SeparateHead', init_bias=-2.19, final_kernel=3),
    loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),
    loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),
    norm_bbox=True)
model = dict(
    type='FUTR3D',
    aux_weight=0.5,
    pts_voxel_layer=dict(
        max_num_points=10,
        voxel_size=[0.075, 0.075, 0.2],
        max_voxels=(120000, 160000),
        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),
    pts_voxel_encoder=dict(type='HardSimpleVFE', num_features=5),
    pts_middle_encoder=dict(
        type='SparseEncoder',
        in_channels=5,
        sparse_shape=[41, 1440, 1440],
        output_channels=128,
        order=('conv', 'norm', 'act'),
        encoder_channels=((16, 16, 32), (32, 32, 64), (64, 64, 128), (128,
                                                                      128)),
        encoder_paddings=((0, 0, 1), (0, 0, 1), (0, 0, [0, 1, 1]), (0, 0)),
        block_type='basicblock'),
    pts_backbone=dict(
        type='SECOND',
        in_channels=256,
        out_channels=[128, 256],
        layer_nums=[5, 5],
        layer_strides=[1, 2],
        norm_cfg=dict(type='BN', eps=0.001, momentum=0.01),
        conv_cfg=dict(type='Conv2d', bias=False)),
    pts_neck=dict(
        type='FPN',
        norm_cfg=dict(type='BN2d', eps=0.001, momentum=0.01),
        act_cfg=dict(type='ReLU', inplace=False),
        in_channels=[128, 256],
        out_channels=256,
        start_level=0,
        add_extra_convs=True,
        num_outs=4,
        relu_before_extra_convs=True),
    pts_bbox_head=dict(
        type='FUTR3DHead',
        use_dab=True,
        use_dss=True,
        dss_batch_first=False,
        dss_drop_prob=0.1,
        dss_mamba_prenorm=False,
        dss_mamba_cfg=dict(),
        dss_mamba_version='DSSMamba_Gigantic',
        dss_num_layers=3,
        dss_rope=True,
        dss_morton_rearrange=False,
        dss_conv_path=False,
        anchor_size=3,
        use_aux=True,
        aux_head=dict(
            type='CenterHead',
            in_channels=512,
            tasks=[
                dict(num_class=1, class_names=['car']),
                dict(
                    num_class=2, class_names=['truck',
                                              'construction_vehicle']),
                dict(num_class=2, class_names=['bus', 'trailer']),
                dict(num_class=1, class_names=['barrier']),
                dict(num_class=2, class_names=['motorcycle', 'bicycle']),
                dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])
            ],
            common_heads=dict(
                reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),
            share_conv_channel=64,
            bbox_coder=dict(
                type='CenterPointBBoxCoder',
                pc_range=[-54, -54],
                post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],
                max_num=500,
                score_threshold=0.1,
                out_size_factor=8,
                voxel_size=[0.075, 0.075],
                code_size=9),
            separate_head=dict(
                type='SeparateHead', init_bias=-2.19, final_kernel=3),
            loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),
            loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),
            norm_bbox=True),
        mix_selection=False,
        num_query=900,
        num_classes=10,
        in_channels=256,
        pc_range=[-54, -54, -5.0, 54, 54, 3.0],
        sync_cls_avg_factor=True,
        with_box_refine=True,
        as_two_stage=False,
        code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],
        transformer=dict(
            type='FUTR3DTransformer',
            use_dab=True,
            decoder=dict(
                type='FUTR3DTransformerDecoder',
                num_layers=6,
                use_dab=True,
                anchor_size=3,
                return_intermediate=True,
                transformerlayers=dict(
                    type='DetrTransformerDecoderLayer',
                    attn_cfgs=[
                        dict(
                            type='MultiheadAttention',
                            embed_dims=256,
                            num_heads=8,
                            dropout=0.1),
                        dict(type='FUTR3DAttention', embed_dims=256)
                    ],
                    feedforward_channels=1024,
                    ffn_dropout=0.1,
                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',
                                     'ffn', 'norm')))),
        positional_encoding=dict(
            type='SinePositionalEncoding',
            num_feats=128,
            normalize=True,
            offset=-0.5),
        loss_cls=dict(
            type='FocalLoss',
            use_sigmoid=True,
            gamma=2.0,
            alpha=0.25,
            loss_weight=2.0),
        loss_bbox=dict(type='L1Loss', loss_weight=0.25),
        loss_iou=dict(type='GIoULoss', loss_weight=0)),
    train_cfg=dict(
        pts=dict(
            point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0],
            pc_range=[-54, -54, -5.0, 54, 54, 3.0],
            grid_size=[1440, 1440, 40],
            voxel_size=[0.075, 0.075, 0.2],
            out_size_factor=8,
            dense_reg=1,
            gaussian_overlap=0.1,
            max_objs=500,
            min_radius=2,
            code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],
            assigner=dict(
                type='HungarianAssigner3D',
                cls_cost=dict(type='FocalLossCost', weight=2.0),
                reg_cost=dict(type='BBox3DL1Cost', weight=0.25),
                iou_cost=dict(type='IoUCost', weight=0)))),
    test_cfg=dict(
        pts=dict(
            pc_range=[-54, -54],
            post_center_limit_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],
            max_per_img=500,
            max_pool_nms=False,
            min_radius=[4, 12, 10, 1, 0.85, 0.175],
            out_size_factor=8,
            voxel_size=[0.075, 0.075],
            nms_type='circle',
            pre_max_size=1000,
            post_max_size=83,
            nms_thr=0.2,
            max_num=300,
            score_threshold=0,
            post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0])))
db_sampler = dict(
    data_root='data/nuscenes/',
    info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',
    rate=1.0,
    prepare=dict(
        filter_by_difficulty=[-1],
        filter_by_min_points=dict(
            car=5,
            truck=5,
            bus=5,
            trailer=5,
            construction_vehicle=5,
            traffic_cone=5,
            barrier=5,
            motorcycle=5,
            bicycle=5,
            pedestrian=5)),
    classes=[
        'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',
        'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
    ],
    sample_groups=dict(
        car=2,
        truck=3,
        construction_vehicle=7,
        bus=4,
        trailer=6,
        barrier=2,
        motorcycle=6,
        bicycle=6,
        pedestrian=2,
        traffic_cone=2),
    points_loader=dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=[0, 1, 2, 3, 4],
        file_client_args=dict(backend='disk')))
find_unused_parameters = True
custom_hooks = [dict(type='FadeOjectSampleHook', num_last_epochs=5)]
gpu_ids = range(0, 2)

2025-04-15 20:11:45,694 - mmdet - INFO - Set random seed to 0, deterministic: False
2025-04-15 20:11:45,817 - mmdet - INFO - initialize SECOND with init_cfg {'type': 'Kaiming', 'layer': 'Conv2d'}
2025-04-15 20:11:45,828 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
Name of parameter - Initialization information

pts_middle_encoder.conv_input.0.weight - torch.Size([16, 3, 3, 3, 5]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv_input.1.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv_input.1.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.0.conv1.weight - torch.Size([16, 3, 3, 3, 16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.0.bn1.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.0.bn1.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.0.conv2.weight - torch.Size([16, 3, 3, 3, 16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.0.bn2.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.0.bn2.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.1.conv1.weight - torch.Size([16, 3, 3, 3, 16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.1.bn1.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.1.bn1.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.1.conv2.weight - torch.Size([16, 3, 3, 3, 16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.1.bn2.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.1.bn2.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.2.0.weight - torch.Size([32, 3, 3, 3, 16]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.2.1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer1.2.1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.0.conv1.weight - torch.Size([32, 3, 3, 3, 32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.0.bn1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.0.bn1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.0.conv2.weight - torch.Size([32, 3, 3, 3, 32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.0.bn2.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.0.bn2.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.1.conv1.weight - torch.Size([32, 3, 3, 3, 32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.1.bn1.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.1.bn1.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.1.conv2.weight - torch.Size([32, 3, 3, 3, 32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.1.bn2.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.1.bn2.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.2.0.weight - torch.Size([64, 3, 3, 3, 32]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.2.1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer2.2.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.0.conv1.weight - torch.Size([64, 3, 3, 3, 64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.0.conv2.weight - torch.Size([64, 3, 3, 3, 64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.0.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.1.conv1.weight - torch.Size([64, 3, 3, 3, 64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.1.conv2.weight - torch.Size([64, 3, 3, 3, 64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.2.0.weight - torch.Size([128, 3, 3, 3, 64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.2.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer3.2.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.0.conv1.weight - torch.Size([128, 3, 3, 3, 128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.0.conv2.weight - torch.Size([128, 3, 3, 3, 128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.1.conv1.weight - torch.Size([128, 3, 3, 3, 128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.1.conv2.weight - torch.Size([128, 3, 3, 3, 128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.encoder_layers.encoder_layer4.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv_out.0.weight - torch.Size([128, 3, 1, 1, 128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv_out.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_middle_encoder.conv_out.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.0.0.weight - torch.Size([128, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

pts_backbone.blocks.0.1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.0.1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.0.3.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

pts_backbone.blocks.0.4.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.0.4.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.0.6.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

pts_backbone.blocks.0.7.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.0.7.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.0.9.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

pts_backbone.blocks.0.10.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.0.10.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.0.12.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

pts_backbone.blocks.0.13.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.0.13.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.0.15.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

pts_backbone.blocks.0.16.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.0.16.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.1.0.weight - torch.Size([256, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

pts_backbone.blocks.1.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.1.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.1.3.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

pts_backbone.blocks.1.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.1.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.1.6.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

pts_backbone.blocks.1.7.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.1.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.1.9.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

pts_backbone.blocks.1.10.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.1.10.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.1.12.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

pts_backbone.blocks.1.13.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.1.13.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.1.15.weight - torch.Size([256, 256, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

pts_backbone.blocks.1.16.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_backbone.blocks.1.16.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.lateral_convs.0.conv.weight - torch.Size([256, 128, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.lateral_convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.lateral_convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.lateral_convs.1.conv.weight - torch.Size([256, 256, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.lateral_convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.lateral_convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.fpn_convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.fpn_convs.1.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.1.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.fpn_convs.2.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.2.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

pts_neck.fpn_convs.3.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_neck.fpn_convs.3.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.level_embeds - torch.Size([4, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.mamba.A_log_f - torch.Size([256, 128]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.mamba.A_log_b - torch.Size([256, 128]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.mamba.D_f - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.mamba.D_b - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.mamba.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.mamba.x_proj_f.weight - torch.Size([272, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.mamba.x_proj_b.weight - torch.Size([272, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.mamba.dt_proj_f.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.mamba.dt_proj_f.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.mamba.dt_proj_b.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.mamba.dt_proj_b.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.mamba.out_proj.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.0.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.1.mamba.A_log_f - torch.Size([256, 128]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.1.mamba.A_log_b - torch.Size([256, 128]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.1.mamba.D_f - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.1.mamba.D_b - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.1.mamba.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.1.mamba.x_proj_f.weight - torch.Size([272, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.1.mamba.x_proj_b.weight - torch.Size([272, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.1.mamba.dt_proj_f.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.1.mamba.dt_proj_f.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.1.mamba.dt_proj_b.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.1.mamba.dt_proj_b.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.1.mamba.out_proj.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.1.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.1.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.2.mamba.A_log_f - torch.Size([256, 128]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.2.mamba.A_log_b - torch.Size([256, 128]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.2.mamba.D_f - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.2.mamba.D_b - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.2.mamba.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.2.mamba.x_proj_f.weight - torch.Size([272, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.2.mamba.x_proj_b.weight - torch.Size([272, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.2.mamba.dt_proj_f.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.2.mamba.dt_proj_f.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.2.mamba.dt_proj_b.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.2.mamba.dt_proj_b.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.0.layers.2.mamba.out_proj.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.0.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.0.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.mamba.A_log_f - torch.Size([256, 128]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.mamba.A_log_b - torch.Size([256, 128]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.mamba.D_f - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.mamba.D_b - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.mamba.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.mamba.x_proj_f.weight - torch.Size([272, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.mamba.x_proj_b.weight - torch.Size([272, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.mamba.dt_proj_f.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.mamba.dt_proj_f.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.mamba.dt_proj_b.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.mamba.dt_proj_b.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.mamba.out_proj.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.0.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.1.mamba.A_log_f - torch.Size([256, 128]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.1.mamba.A_log_b - torch.Size([256, 128]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.1.mamba.D_f - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.1.mamba.D_b - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.1.mamba.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.1.mamba.x_proj_f.weight - torch.Size([272, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.1.mamba.x_proj_b.weight - torch.Size([272, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.1.mamba.dt_proj_f.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.1.mamba.dt_proj_f.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.1.mamba.dt_proj_b.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.1.mamba.dt_proj_b.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.1.mamba.out_proj.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.1.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.1.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.2.mamba.A_log_f - torch.Size([256, 128]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.2.mamba.A_log_b - torch.Size([256, 128]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.2.mamba.D_f - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.2.mamba.D_b - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.2.mamba.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.2.mamba.x_proj_f.weight - torch.Size([272, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.2.mamba.x_proj_b.weight - torch.Size([272, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.2.mamba.dt_proj_f.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.2.mamba.dt_proj_f.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.2.mamba.dt_proj_b.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.2.mamba.dt_proj_b.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.0.layers.2.mamba.out_proj.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.1.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.1.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.mamba.A_log_f - torch.Size([256, 128]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.mamba.A_log_b - torch.Size([256, 128]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.mamba.D_f - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.mamba.D_b - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.mamba.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.mamba.x_proj_f.weight - torch.Size([272, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.mamba.x_proj_b.weight - torch.Size([272, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.mamba.dt_proj_f.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.mamba.dt_proj_f.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.mamba.dt_proj_b.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.mamba.dt_proj_b.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.mamba.out_proj.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.0.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.1.mamba.A_log_f - torch.Size([256, 128]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.1.mamba.A_log_b - torch.Size([256, 128]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.1.mamba.D_f - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.1.mamba.D_b - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.1.mamba.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.1.mamba.x_proj_f.weight - torch.Size([272, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.1.mamba.x_proj_b.weight - torch.Size([272, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.1.mamba.dt_proj_f.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.1.mamba.dt_proj_f.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.1.mamba.dt_proj_b.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.1.mamba.dt_proj_b.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.1.mamba.out_proj.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.1.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.1.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.2.mamba.A_log_f - torch.Size([256, 128]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.2.mamba.A_log_b - torch.Size([256, 128]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.2.mamba.D_f - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.2.mamba.D_b - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.2.mamba.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.2.mamba.x_proj_f.weight - torch.Size([272, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.2.mamba.x_proj_b.weight - torch.Size([272, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.2.mamba.dt_proj_f.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.2.mamba.dt_proj_f.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.2.mamba.dt_proj_b.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.2.mamba.dt_proj_b.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.0.layers.2.mamba.out_proj.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.2.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.2.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.mamba.A_log_f - torch.Size([256, 128]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.mamba.A_log_b - torch.Size([256, 128]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.mamba.D_f - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.mamba.D_b - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.mamba.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.mamba.x_proj_f.weight - torch.Size([272, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.mamba.x_proj_b.weight - torch.Size([272, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.mamba.dt_proj_f.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.mamba.dt_proj_f.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.mamba.dt_proj_b.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.mamba.dt_proj_b.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.mamba.out_proj.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.0.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.1.mamba.A_log_f - torch.Size([256, 128]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.1.mamba.A_log_b - torch.Size([256, 128]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.1.mamba.D_f - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.1.mamba.D_b - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.1.mamba.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.1.mamba.x_proj_f.weight - torch.Size([272, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.1.mamba.x_proj_b.weight - torch.Size([272, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.1.mamba.dt_proj_f.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.1.mamba.dt_proj_f.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.1.mamba.dt_proj_b.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.1.mamba.dt_proj_b.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.1.mamba.out_proj.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.1.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.1.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.2.mamba.A_log_f - torch.Size([256, 128]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.2.mamba.A_log_b - torch.Size([256, 128]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.2.mamba.D_f - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.2.mamba.D_b - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.2.mamba.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.2.mamba.x_proj_f.weight - torch.Size([272, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.2.mamba.x_proj_b.weight - torch.Size([272, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.2.mamba.dt_proj_f.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.2.mamba.dt_proj_f.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.2.mamba.dt_proj_b.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.2.mamba.dt_proj_b.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.0.layers.2.mamba.out_proj.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.3.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.3.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.mamba.A_log_f - torch.Size([256, 128]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.mamba.A_log_b - torch.Size([256, 128]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.mamba.D_f - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.mamba.D_b - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.mamba.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.mamba.x_proj_f.weight - torch.Size([272, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.mamba.x_proj_b.weight - torch.Size([272, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.mamba.dt_proj_f.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.mamba.dt_proj_f.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.mamba.dt_proj_b.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.mamba.dt_proj_b.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.mamba.out_proj.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.0.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.1.mamba.A_log_f - torch.Size([256, 128]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.1.mamba.A_log_b - torch.Size([256, 128]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.1.mamba.D_f - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.1.mamba.D_b - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.1.mamba.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.1.mamba.x_proj_f.weight - torch.Size([272, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.1.mamba.x_proj_b.weight - torch.Size([272, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.1.mamba.dt_proj_f.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.1.mamba.dt_proj_f.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.1.mamba.dt_proj_b.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.1.mamba.dt_proj_b.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.1.mamba.out_proj.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.1.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.1.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.2.mamba.A_log_f - torch.Size([256, 128]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.2.mamba.A_log_b - torch.Size([256, 128]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.2.mamba.D_f - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.2.mamba.D_b - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.2.mamba.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.2.mamba.x_proj_f.weight - torch.Size([272, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.2.mamba.x_proj_b.weight - torch.Size([272, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.2.mamba.dt_proj_f.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.2.mamba.dt_proj_f.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.2.mamba.dt_proj_b.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.2.mamba.dt_proj_b.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.0.layers.2.mamba.out_proj.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.4.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.4.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.mamba.A_log_f - torch.Size([256, 128]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.mamba.A_log_b - torch.Size([256, 128]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.mamba.D_f - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.mamba.D_b - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.mamba.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.mamba.x_proj_f.weight - torch.Size([272, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.mamba.x_proj_b.weight - torch.Size([272, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.mamba.dt_proj_f.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.mamba.dt_proj_f.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.mamba.dt_proj_b.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.mamba.dt_proj_b.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.mamba.out_proj.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.0.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.1.mamba.A_log_f - torch.Size([256, 128]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.1.mamba.A_log_b - torch.Size([256, 128]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.1.mamba.D_f - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.1.mamba.D_b - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.1.mamba.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.1.mamba.x_proj_f.weight - torch.Size([272, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.1.mamba.x_proj_b.weight - torch.Size([272, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.1.mamba.dt_proj_f.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.1.mamba.dt_proj_f.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.1.mamba.dt_proj_b.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.1.mamba.dt_proj_b.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.1.mamba.out_proj.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.1.norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.1.norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.2.mamba.A_log_f - torch.Size([256, 128]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.2.mamba.A_log_b - torch.Size([256, 128]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.2.mamba.D_f - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.2.mamba.D_b - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.2.mamba.in_proj.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.2.mamba.x_proj_f.weight - torch.Size([272, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.2.mamba.x_proj_b.weight - torch.Size([272, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.2.mamba.dt_proj_f.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.2.mamba.dt_proj_f.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.2.mamba.dt_proj_b.weight - torch.Size([256, 16]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.2.mamba.dt_proj_b.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.0.layers.2.mamba.out_proj.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.sampling_offsets.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.sampling_offsets.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.attention_weights.weight - torch.Size([128, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.attention_weights.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.value_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.value_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.attentions.1.output_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.ffns.0.layers.0.0.weight - torch.Size([1024, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.ffns.0.layers.0.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.ffns.0.layers.1.weight - torch.Size([256, 1024]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.layers.5.ffns.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.0.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.layers.5.norms.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.query_scale.layers.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.query_scale.layers.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.query_scale.layers.1.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.query_scale.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.ref_point_head.layers.0.weight - torch.Size([256, 384]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.ref_point_head.layers.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.transformer.decoder.ref_point_head.layers.1.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.transformer.decoder.ref_point_head.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.0.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.0.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.cls_branches.1.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.1.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.cls_branches.2.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.2.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.cls_branches.3.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.3.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.cls_branches.4.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.cls_branches.5.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.cls_branches.5.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.0.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.0.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.0.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.0.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.0.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.0.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.1.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.1.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.1.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.1.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.1.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.1.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.2.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.2.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.2.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.2.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.2.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.2.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.3.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.3.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.3.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.3.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.3.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.3.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.4.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.4.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.4.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.4.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.4.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.4.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.5.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.5.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.5.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.5.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.reg_branches.5.4.weight - torch.Size([10, 256]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.reg_branches.5.4.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in FUTR3DHead  

pts_bbox_head.tgt_embed.weight - torch.Size([900, 256]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.refpoint_embed.weight - torch.Size([900, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.shared_conv.conv.weight - torch.Size([64, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.shared_conv.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.shared_conv.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.heatmap.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.0.heatmap.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.heatmap.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.1.heatmap.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.heatmap.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.2.heatmap.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.heatmap.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.3.heatmap.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.heatmap.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.4.heatmap.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.reg.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.reg.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.reg.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.reg.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.reg.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.height.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.height.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.height.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.height.1.weight - torch.Size([1, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.height.1.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.dim.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.dim.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.dim.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.dim.1.weight - torch.Size([3, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.dim.1.bias - torch.Size([3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.rot.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.rot.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.rot.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.rot.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.rot.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.vel.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.vel.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.vel.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.vel.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.vel.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.heatmap.0.conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.heatmap.0.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.heatmap.0.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.heatmap.1.weight - torch.Size([2, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of FUTR3D  

pts_bbox_head.aux_head.task_heads.5.heatmap.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FUTR3D  
2025-04-15 20:11:45,879 - mmdet - INFO - Model:
FUTR3D(
  (pts_voxel_layer): Voxelization(voxel_size=[0.075, 0.075, 0.2], point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0], max_num_points=10, max_voxels=(120000, 160000), deterministic=True)
  (pts_voxel_encoder): HardSimpleVFE()
  (pts_middle_encoder): SparseEncoder(
    (conv_input): SparseSequential(
      (0): SubMConv3d(5, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
    (encoder_layers): SparseSequential(
      (encoder_layer1): SparseSequential(
        (0): SparseBasicBlock(
          (conv1): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (conv2): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (1): SparseBasicBlock(
          (conv1): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (conv2): SubMConv3d(16, 16, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): SparseSequential(
          (0): SparseConv3d(16, 32, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
      (encoder_layer2): SparseSequential(
        (0): SparseBasicBlock(
          (conv1): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (conv2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (1): SparseBasicBlock(
          (conv1): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (conv2): SubMConv3d(32, 32, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): SparseSequential(
          (0): SparseConv3d(32, 64, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
      (encoder_layer3): SparseSequential(
        (0): SparseBasicBlock(
          (conv1): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (conv2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (1): SparseBasicBlock(
          (conv1): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (conv2): SubMConv3d(64, 64, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (2): SparseSequential(
          (0): SparseConv3d(64, 128, kernel_size=[3, 3, 3], stride=[2, 2, 2], padding=[0, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
        )
      )
      (encoder_layer4): SparseSequential(
        (0): SparseBasicBlock(
          (conv1): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (conv2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
        (1): SparseBasicBlock(
          (conv1): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (conv2): SubMConv3d(128, 128, kernel_size=[3, 3, 3], stride=[1, 1, 1], padding=[1, 1, 1], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
          (bn2): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
          (relu): ReLU(inplace=True)
        )
      )
    )
    (conv_out): SparseSequential(
      (0): SparseConv3d(128, 128, kernel_size=[3, 1, 1], stride=[2, 1, 1], padding=[0, 0, 0], dilation=[1, 1, 1], output_padding=[0, 0, 0], bias=False, algo=ConvAlgo.MaskImplicitGemm)
      (1): BatchNorm1d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU(inplace=True)
    )
  )
  (pts_backbone): SECOND(
    (blocks): ModuleList(
      (0): Sequential(
        (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (7): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (8): ReLU(inplace=True)
        (9): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (10): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (11): ReLU(inplace=True)
        (12): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (13): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (14): ReLU(inplace=True)
        (15): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (16): BatchNorm2d(128, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (17): ReLU(inplace=True)
      )
      (1): Sequential(
        (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (5): ReLU(inplace=True)
        (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (7): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (8): ReLU(inplace=True)
        (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (10): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (11): ReLU(inplace=True)
        (12): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (13): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (14): ReLU(inplace=True)
        (15): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (16): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (17): ReLU(inplace=True)
      )
    )
  )
  init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
  (pts_neck): FPN(
    (lateral_convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
      (1): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
    )
    (fpn_convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
      (1): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
      (2): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
      (3): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(256, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
        (activate): ReLU()
      )
    )
  )
  init_cfg={'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
  (pts_bbox_head): FUTR3DHead(
    (loss_cls): FocalLoss()
    (loss_bbox): L1Loss()
    (loss_iou): GIoULoss()
    (activate): ReLU(inplace=True)
    (positional_encoding): SinePositionalEncoding(num_feats=128, temperature=10000, normalize=True, scale=6.283185307179586, eps=1e-06)
    (transformer): FUTR3DTransformer(
      (decoder): FUTR3DTransformerDecoder(
        (layers): ModuleList(
          (0): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): DSS(
                (layers): ModuleList(
                  (0): ModuleDict(
                    (mamba): DSSMamba(
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (act_f): SiLU()
                      (act_b): SiLU()
                      (x_proj_f): Linear(in_features=256, out_features=272, bias=False)
                      (x_proj_b): Linear(in_features=256, out_features=272, bias=False)
                      (dt_proj_f): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b): Linear(in_features=16, out_features=256, bias=True)
                      (out_proj): Linear(in_features=512, out_features=256, bias=False)
                    )
                    (dropout): Identity()
                    (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  )
                  (1): ModuleDict(
                    (mamba): DSSMamba(
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (act_f): SiLU()
                      (act_b): SiLU()
                      (x_proj_f): Linear(in_features=256, out_features=272, bias=False)
                      (x_proj_b): Linear(in_features=256, out_features=272, bias=False)
                      (dt_proj_f): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b): Linear(in_features=16, out_features=256, bias=True)
                      (out_proj): Linear(in_features=512, out_features=256, bias=False)
                    )
                    (dropout): DropPath(drop_prob=0.050)
                    (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  )
                  (2): ModuleDict(
                    (mamba): DSSMamba(
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (act_f): SiLU()
                      (act_b): SiLU()
                      (x_proj_f): Linear(in_features=256, out_features=272, bias=False)
                      (x_proj_b): Linear(in_features=256, out_features=272, bias=False)
                      (dt_proj_f): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b): Linear(in_features=16, out_features=256, bias=True)
                      (out_proj): Linear(in_features=512, out_features=256, bias=False)
                    )
                    (dropout): DropPath(drop_prob=0.100)
                    (norm): Identity()
                  )
                )
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (1): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): DSS(
                (layers): ModuleList(
                  (0): ModuleDict(
                    (mamba): DSSMamba(
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (act_f): SiLU()
                      (act_b): SiLU()
                      (x_proj_f): Linear(in_features=256, out_features=272, bias=False)
                      (x_proj_b): Linear(in_features=256, out_features=272, bias=False)
                      (dt_proj_f): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b): Linear(in_features=16, out_features=256, bias=True)
                      (out_proj): Linear(in_features=512, out_features=256, bias=False)
                    )
                    (dropout): Identity()
                    (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  )
                  (1): ModuleDict(
                    (mamba): DSSMamba(
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (act_f): SiLU()
                      (act_b): SiLU()
                      (x_proj_f): Linear(in_features=256, out_features=272, bias=False)
                      (x_proj_b): Linear(in_features=256, out_features=272, bias=False)
                      (dt_proj_f): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b): Linear(in_features=16, out_features=256, bias=True)
                      (out_proj): Linear(in_features=512, out_features=256, bias=False)
                    )
                    (dropout): DropPath(drop_prob=0.050)
                    (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  )
                  (2): ModuleDict(
                    (mamba): DSSMamba(
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (act_f): SiLU()
                      (act_b): SiLU()
                      (x_proj_f): Linear(in_features=256, out_features=272, bias=False)
                      (x_proj_b): Linear(in_features=256, out_features=272, bias=False)
                      (dt_proj_f): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b): Linear(in_features=16, out_features=256, bias=True)
                      (out_proj): Linear(in_features=512, out_features=256, bias=False)
                    )
                    (dropout): DropPath(drop_prob=0.100)
                    (norm): Identity()
                  )
                )
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (2): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): DSS(
                (layers): ModuleList(
                  (0): ModuleDict(
                    (mamba): DSSMamba(
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (act_f): SiLU()
                      (act_b): SiLU()
                      (x_proj_f): Linear(in_features=256, out_features=272, bias=False)
                      (x_proj_b): Linear(in_features=256, out_features=272, bias=False)
                      (dt_proj_f): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b): Linear(in_features=16, out_features=256, bias=True)
                      (out_proj): Linear(in_features=512, out_features=256, bias=False)
                    )
                    (dropout): Identity()
                    (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  )
                  (1): ModuleDict(
                    (mamba): DSSMamba(
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (act_f): SiLU()
                      (act_b): SiLU()
                      (x_proj_f): Linear(in_features=256, out_features=272, bias=False)
                      (x_proj_b): Linear(in_features=256, out_features=272, bias=False)
                      (dt_proj_f): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b): Linear(in_features=16, out_features=256, bias=True)
                      (out_proj): Linear(in_features=512, out_features=256, bias=False)
                    )
                    (dropout): DropPath(drop_prob=0.050)
                    (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  )
                  (2): ModuleDict(
                    (mamba): DSSMamba(
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (act_f): SiLU()
                      (act_b): SiLU()
                      (x_proj_f): Linear(in_features=256, out_features=272, bias=False)
                      (x_proj_b): Linear(in_features=256, out_features=272, bias=False)
                      (dt_proj_f): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b): Linear(in_features=16, out_features=256, bias=True)
                      (out_proj): Linear(in_features=512, out_features=256, bias=False)
                    )
                    (dropout): DropPath(drop_prob=0.100)
                    (norm): Identity()
                  )
                )
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (3): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): DSS(
                (layers): ModuleList(
                  (0): ModuleDict(
                    (mamba): DSSMamba(
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (act_f): SiLU()
                      (act_b): SiLU()
                      (x_proj_f): Linear(in_features=256, out_features=272, bias=False)
                      (x_proj_b): Linear(in_features=256, out_features=272, bias=False)
                      (dt_proj_f): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b): Linear(in_features=16, out_features=256, bias=True)
                      (out_proj): Linear(in_features=512, out_features=256, bias=False)
                    )
                    (dropout): Identity()
                    (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  )
                  (1): ModuleDict(
                    (mamba): DSSMamba(
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (act_f): SiLU()
                      (act_b): SiLU()
                      (x_proj_f): Linear(in_features=256, out_features=272, bias=False)
                      (x_proj_b): Linear(in_features=256, out_features=272, bias=False)
                      (dt_proj_f): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b): Linear(in_features=16, out_features=256, bias=True)
                      (out_proj): Linear(in_features=512, out_features=256, bias=False)
                    )
                    (dropout): DropPath(drop_prob=0.050)
                    (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  )
                  (2): ModuleDict(
                    (mamba): DSSMamba(
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (act_f): SiLU()
                      (act_b): SiLU()
                      (x_proj_f): Linear(in_features=256, out_features=272, bias=False)
                      (x_proj_b): Linear(in_features=256, out_features=272, bias=False)
                      (dt_proj_f): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b): Linear(in_features=16, out_features=256, bias=True)
                      (out_proj): Linear(in_features=512, out_features=256, bias=False)
                    )
                    (dropout): DropPath(drop_prob=0.100)
                    (norm): Identity()
                  )
                )
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (4): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): DSS(
                (layers): ModuleList(
                  (0): ModuleDict(
                    (mamba): DSSMamba(
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (act_f): SiLU()
                      (act_b): SiLU()
                      (x_proj_f): Linear(in_features=256, out_features=272, bias=False)
                      (x_proj_b): Linear(in_features=256, out_features=272, bias=False)
                      (dt_proj_f): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b): Linear(in_features=16, out_features=256, bias=True)
                      (out_proj): Linear(in_features=512, out_features=256, bias=False)
                    )
                    (dropout): Identity()
                    (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  )
                  (1): ModuleDict(
                    (mamba): DSSMamba(
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (act_f): SiLU()
                      (act_b): SiLU()
                      (x_proj_f): Linear(in_features=256, out_features=272, bias=False)
                      (x_proj_b): Linear(in_features=256, out_features=272, bias=False)
                      (dt_proj_f): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b): Linear(in_features=16, out_features=256, bias=True)
                      (out_proj): Linear(in_features=512, out_features=256, bias=False)
                    )
                    (dropout): DropPath(drop_prob=0.050)
                    (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  )
                  (2): ModuleDict(
                    (mamba): DSSMamba(
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (act_f): SiLU()
                      (act_b): SiLU()
                      (x_proj_f): Linear(in_features=256, out_features=272, bias=False)
                      (x_proj_b): Linear(in_features=256, out_features=272, bias=False)
                      (dt_proj_f): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b): Linear(in_features=16, out_features=256, bias=True)
                      (out_proj): Linear(in_features=512, out_features=256, bias=False)
                    )
                    (dropout): DropPath(drop_prob=0.100)
                    (norm): Identity()
                  )
                )
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (5): DetrTransformerDecoderLayer(
            (attentions): ModuleList(
              (0): DSS(
                (layers): ModuleList(
                  (0): ModuleDict(
                    (mamba): DSSMamba(
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (act_f): SiLU()
                      (act_b): SiLU()
                      (x_proj_f): Linear(in_features=256, out_features=272, bias=False)
                      (x_proj_b): Linear(in_features=256, out_features=272, bias=False)
                      (dt_proj_f): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b): Linear(in_features=16, out_features=256, bias=True)
                      (out_proj): Linear(in_features=512, out_features=256, bias=False)
                    )
                    (dropout): Identity()
                    (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  )
                  (1): ModuleDict(
                    (mamba): DSSMamba(
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (act_f): SiLU()
                      (act_b): SiLU()
                      (x_proj_f): Linear(in_features=256, out_features=272, bias=False)
                      (x_proj_b): Linear(in_features=256, out_features=272, bias=False)
                      (dt_proj_f): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b): Linear(in_features=16, out_features=256, bias=True)
                      (out_proj): Linear(in_features=512, out_features=256, bias=False)
                    )
                    (dropout): DropPath(drop_prob=0.050)
                    (norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
                  )
                  (2): ModuleDict(
                    (mamba): DSSMamba(
                      (in_proj): Linear(in_features=256, out_features=1024, bias=False)
                      (act_f): SiLU()
                      (act_b): SiLU()
                      (x_proj_f): Linear(in_features=256, out_features=272, bias=False)
                      (x_proj_b): Linear(in_features=256, out_features=272, bias=False)
                      (dt_proj_f): Linear(in_features=16, out_features=256, bias=True)
                      (dt_proj_b): Linear(in_features=16, out_features=256, bias=True)
                      (out_proj): Linear(in_features=512, out_features=256, bias=False)
                    )
                    (dropout): DropPath(drop_prob=0.100)
                    (norm): Identity()
                  )
                )
              )
              (1): FUTR3DAttention(
                (dropout): Dropout(p=0.1, inplace=False)
                (sampling_offsets): Linear(in_features=256, out_features=256, bias=True)
                (attention_weights): Linear(in_features=256, out_features=128, bias=True)
                (value_proj): Linear(in_features=256, out_features=256, bias=True)
                (output_proj): Linear(in_features=256, out_features=256, bias=True)
              )
            )
            (ffns): ModuleList(
              (0): FFN(
                (activate): ReLU(inplace=True)
                (layers): Sequential(
                  (0): Sequential(
                    (0): Linear(in_features=256, out_features=1024, bias=True)
                    (1): ReLU(inplace=True)
                    (2): Dropout(p=0.1, inplace=False)
                  )
                  (1): Linear(in_features=1024, out_features=256, bias=True)
                  (2): Dropout(p=0.1, inplace=False)
                )
                (dropout_layer): Identity()
              )
            )
            (norms): ModuleList(
              (0): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
        (query_scale): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=256, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
          )
        )
        (ref_point_head): MLP(
          (layers): ModuleList(
            (0): Linear(in_features=384, out_features=256, bias=True)
            (1): Linear(in_features=256, out_features=256, bias=True)
          )
        )
      )
    )
    (cls_branches): ModuleList(
      (0): Linear(in_features=256, out_features=10, bias=True)
      (1): Linear(in_features=256, out_features=10, bias=True)
      (2): Linear(in_features=256, out_features=10, bias=True)
      (3): Linear(in_features=256, out_features=10, bias=True)
      (4): Linear(in_features=256, out_features=10, bias=True)
      (5): Linear(in_features=256, out_features=10, bias=True)
    )
    (reg_branches): ModuleList(
      (0): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (1): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (2): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (3): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (4): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (5): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
    )
    (tgt_embed): Embedding(900, 256)
    (refpoint_embed): Embedding(900, 3)
    (aux_head): CenterHead(
      (loss_cls): GaussianFocalLoss()
      (loss_bbox): L1Loss()
      (shared_conv): ConvModule(
        (conv): Conv2d(512, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (activate): ReLU(inplace=True)
      )
      (task_heads): ModuleList(
        (0): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
        (1): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
        (2): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
        (3): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
        (4): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
        (5): SeparateHead(
          (reg): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (height): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (dim): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (rot): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (vel): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (heatmap): Sequential(
            (0): ConvModule(
              (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
              (bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
              (activate): ReLU(inplace=True)
            )
            (1): Conv2d(64, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
        )
        init_cfg={'type': 'Kaiming', 'layer': 'Conv2d'}
      )
    )
  )
)
2025-04-15 20:12:01,116 - mmdet - INFO - Start running, host: ubuntu@ubuntu, work_dir: /home/ubuntu/jxcao/hdd/jxc/FUTR3D/work_dirs/DSSMambaGigantic_layer3_rope_drop01/两张卡每张卡4
2025-04-15 20:12:01,116 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CyclicLrUpdaterHook                
(HIGH        ) CyclicMomentumUpdaterHook          
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CyclicLrUpdaterHook                
(HIGH        ) CyclicMomentumUpdaterHook          
(NORMAL      ) FadeOjectSampleHook                
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CyclicLrUpdaterHook                
(HIGH        ) CyclicMomentumUpdaterHook          
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_epoch:
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
2025-04-15 20:12:01,116 - mmdet - INFO - workflow: [('train', 1)], max: 20 epochs
2025-04-15 20:12:01,116 - mmdet - INFO - Checkpoints will be saved to /home/ubuntu/jxcao/hdd/jxc/FUTR3D/work_dirs/DSSMambaGigantic_layer3_rope_drop01/两张卡每张卡4 by HardDiskBackend.
2025-04-15 20:13:07,020 - mmdet - INFO - Epoch [1][50/1104]	lr: 2.502e-05, eta: 8:03:02, time: 1.316, data_time: 0.109, memory: 12181, loss_cls: 1.5194, loss_bbox: 2.2388, d0.loss_cls: 1.7995, d0.loss_bbox: 4.4102, d1.loss_cls: 1.6959, d1.loss_bbox: 2.2838, d2.loss_cls: 1.6080, d2.loss_bbox: 2.2674, d3.loss_cls: 1.5877, d3.loss_bbox: 2.2600, d4.loss_cls: 1.5034, d4.loss_bbox: 2.2485, aux_task0.loss_heatmap: 197.2116, aux_task0.loss_bbox: 0.8591, aux_task1.loss_heatmap: 620.2177, aux_task1.loss_bbox: 0.9089, aux_task2.loss_heatmap: 555.8667, aux_task2.loss_bbox: 1.1178, aux_task3.loss_heatmap: 355.8671, aux_task3.loss_bbox: 0.7672, aux_task4.loss_heatmap: 430.8643, aux_task4.loss_bbox: 0.7279, aux_task5.loss_heatmap: 566.8380, aux_task5.loss_bbox: 0.7164, loss: 2757.3854, grad_norm: 11784.7849
2025-04-15 20:13:54,526 - mmdet - INFO - Epoch [1][100/1104]	lr: 2.507e-05, eta: 6:54:59, time: 0.950, data_time: 0.009, memory: 12181, loss_cls: 1.1648, loss_bbox: 1.9306, d0.loss_cls: 1.2971, d0.loss_bbox: 4.0323, d1.loss_cls: 1.1926, d1.loss_bbox: 2.0894, d2.loss_cls: 1.1855, d2.loss_bbox: 2.0198, d3.loss_cls: 1.1756, d3.loss_bbox: 1.9774, d4.loss_cls: 1.1647, d4.loss_bbox: 1.9473, aux_task0.loss_heatmap: 76.5573, aux_task0.loss_bbox: 0.6026, aux_task1.loss_heatmap: 241.6929, aux_task1.loss_bbox: 0.6405, aux_task2.loss_heatmap: 185.1364, aux_task2.loss_bbox: 0.8735, aux_task3.loss_heatmap: 93.5639, aux_task3.loss_bbox: 0.5148, aux_task4.loss_heatmap: 166.2836, aux_task4.loss_bbox: 0.5119, aux_task5.loss_heatmap: 259.0522, aux_task5.loss_bbox: 0.5311, loss: 1047.1376, grad_norm: 5759.7590
2025-04-15 20:14:42,032 - mmdet - INFO - Epoch [1][150/1104]	lr: 2.516e-05, eta: 6:31:47, time: 0.950, data_time: 0.012, memory: 12181, loss_cls: 1.1395, loss_bbox: 2.0033, d0.loss_cls: 1.1441, d0.loss_bbox: 2.4067, d1.loss_cls: 1.1499, d1.loss_bbox: 1.8261, d2.loss_cls: 1.1452, d2.loss_bbox: 1.8527, d3.loss_cls: 1.1429, d3.loss_bbox: 1.9049, d4.loss_cls: 1.1418, d4.loss_bbox: 1.9581, aux_task0.loss_heatmap: 30.3853, aux_task0.loss_bbox: 0.4849, aux_task1.loss_heatmap: 107.8754, aux_task1.loss_bbox: 0.5582, aux_task2.loss_heatmap: 80.7346, aux_task2.loss_bbox: 0.6694, aux_task3.loss_heatmap: 36.5337, aux_task3.loss_bbox: 0.4612, aux_task4.loss_heatmap: 71.5024, aux_task4.loss_bbox: 0.4578, aux_task5.loss_heatmap: 108.7710, aux_task5.loss_bbox: 0.4955, loss: 457.7447, grad_norm: 2919.2760
2025-04-15 20:15:29,117 - mmdet - INFO - Epoch [1][200/1104]	lr: 2.528e-05, eta: 6:19:01, time: 0.942, data_time: 0.008, memory: 12397, loss_cls: 1.1278, loss_bbox: 1.7863, d0.loss_cls: 1.1397, d0.loss_bbox: 1.7936, d1.loss_cls: 1.1378, d1.loss_bbox: 1.7736, d2.loss_cls: 1.1317, d2.loss_bbox: 1.7862, d3.loss_cls: 1.1329, d3.loss_bbox: 1.7908, d4.loss_cls: 1.1302, d4.loss_bbox: 1.7951, aux_task0.loss_heatmap: 13.6367, aux_task0.loss_bbox: 0.4810, aux_task1.loss_heatmap: 53.2680, aux_task1.loss_bbox: 0.5330, aux_task2.loss_heatmap: 40.6963, aux_task2.loss_bbox: 0.5647, aux_task3.loss_heatmap: 14.8745, aux_task3.loss_bbox: 0.4196, aux_task4.loss_heatmap: 32.9552, aux_task4.loss_bbox: 0.4383, aux_task5.loss_heatmap: 56.7145, aux_task5.loss_bbox: 0.4735, loss: 232.5810, grad_norm: 1604.5003
2025-04-15 20:16:16,225 - mmdet - INFO - Epoch [1][250/1104]	lr: 2.544e-05, eta: 6:11:05, time: 0.942, data_time: 0.007, memory: 12397, loss_cls: 1.1272, loss_bbox: 1.7277, d0.loss_cls: 1.1381, d0.loss_bbox: 1.7541, d1.loss_cls: 1.1320, d1.loss_bbox: 1.7312, d2.loss_cls: 1.1313, d2.loss_bbox: 1.7204, d3.loss_cls: 1.1312, d3.loss_bbox: 1.7185, d4.loss_cls: 1.1314, d4.loss_bbox: 1.7251, aux_task0.loss_heatmap: 6.8235, aux_task0.loss_bbox: 0.4519, aux_task1.loss_heatmap: 24.8146, aux_task1.loss_bbox: 0.5159, aux_task2.loss_heatmap: 19.0654, aux_task2.loss_bbox: 0.5267, aux_task3.loss_heatmap: 9.2459, aux_task3.loss_bbox: 0.4178, aux_task4.loss_heatmap: 15.9722, aux_task4.loss_bbox: 0.4380, aux_task5.loss_heatmap: 27.1340, aux_task5.loss_bbox: 0.4691, loss: 123.0433, grad_norm: 822.4396
2025-04-15 20:17:03,610 - mmdet - INFO - Epoch [1][300/1104]	lr: 2.564e-05, eta: 6:05:51, time: 0.948, data_time: 0.010, memory: 12397, loss_cls: 1.1330, loss_bbox: 1.7120, d0.loss_cls: 1.1327, d0.loss_bbox: 1.7434, d1.loss_cls: 1.1275, d1.loss_bbox: 1.7217, d2.loss_cls: 1.1276, d2.loss_bbox: 1.7134, d3.loss_cls: 1.1324, d3.loss_bbox: 1.7106, d4.loss_cls: 1.1332, d4.loss_bbox: 1.7152, aux_task0.loss_heatmap: 3.5881, aux_task0.loss_bbox: 0.4440, aux_task1.loss_heatmap: 12.3102, aux_task1.loss_bbox: 0.4961, aux_task2.loss_heatmap: 9.3677, aux_task2.loss_bbox: 0.5324, aux_task3.loss_heatmap: 5.2232, aux_task3.loss_bbox: 0.4123, aux_task4.loss_heatmap: 7.9273, aux_task4.loss_bbox: 0.4250, aux_task5.loss_heatmap: 12.7075, aux_task5.loss_bbox: 0.4636, loss: 71.0001, grad_norm: 407.7175
2025-04-15 20:17:50,894 - mmdet - INFO - Epoch [1][350/1104]	lr: 2.587e-05, eta: 6:01:48, time: 0.946, data_time: 0.008, memory: 12397, loss_cls: 1.1353, loss_bbox: 1.7027, d0.loss_cls: 1.1238, d0.loss_bbox: 1.7413, d1.loss_cls: 1.1276, d1.loss_bbox: 1.7095, d2.loss_cls: 1.1273, d2.loss_bbox: 1.7049, d3.loss_cls: 1.1334, d3.loss_bbox: 1.7035, d4.loss_cls: 1.1336, d4.loss_bbox: 1.7065, aux_task0.loss_heatmap: 2.3992, aux_task0.loss_bbox: 0.4433, aux_task1.loss_heatmap: 5.9373, aux_task1.loss_bbox: 0.4997, aux_task2.loss_heatmap: 4.7134, aux_task2.loss_bbox: 0.5101, aux_task3.loss_heatmap: 2.8224, aux_task3.loss_bbox: 0.4138, aux_task4.loss_heatmap: 4.0787, aux_task4.loss_bbox: 0.4328, aux_task5.loss_heatmap: 5.8727, aux_task5.loss_bbox: 0.4686, loss: 45.6416, grad_norm: 177.2590
2025-04-15 20:18:38,566 - mmdet - INFO - Epoch [1][400/1104]	lr: 2.613e-05, eta: 5:58:54, time: 0.953, data_time: 0.009, memory: 12397, loss_cls: 1.1121, loss_bbox: 1.6866, d0.loss_cls: 1.1000, d0.loss_bbox: 1.7214, d1.loss_cls: 1.0999, d1.loss_bbox: 1.6897, d2.loss_cls: 1.0965, d2.loss_bbox: 1.6890, d3.loss_cls: 1.1068, d3.loss_bbox: 1.6880, d4.loss_cls: 1.1067, d4.loss_bbox: 1.6896, aux_task0.loss_heatmap: 1.7291, aux_task0.loss_bbox: 0.4333, aux_task1.loss_heatmap: 3.1451, aux_task1.loss_bbox: 0.4865, aux_task2.loss_heatmap: 2.7713, aux_task2.loss_bbox: 0.4769, aux_task3.loss_heatmap: 2.0384, aux_task3.loss_bbox: 0.4118, aux_task4.loss_heatmap: 2.4448, aux_task4.loss_bbox: 0.4298, aux_task5.loss_heatmap: 3.0323, aux_task5.loss_bbox: 0.4611, loss: 34.6468, grad_norm: 75.0212
2025-04-15 20:19:26,173 - mmdet - INFO - Epoch [1][450/1104]	lr: 2.643e-05, eta: 5:56:26, time: 0.952, data_time: 0.008, memory: 12397, loss_cls: 1.0768, loss_bbox: 1.6867, d0.loss_cls: 1.0731, d0.loss_bbox: 1.7379, d1.loss_cls: 1.0585, d1.loss_bbox: 1.7054, d2.loss_cls: 1.0477, d2.loss_bbox: 1.7057, d3.loss_cls: 1.0565, d3.loss_bbox: 1.7031, d4.loss_cls: 1.0617, d4.loss_bbox: 1.6993, aux_task0.loss_heatmap: 1.5241, aux_task0.loss_bbox: 0.4361, aux_task1.loss_heatmap: 2.0868, aux_task1.loss_bbox: 0.4816, aux_task2.loss_heatmap: 2.0325, aux_task2.loss_bbox: 0.4884, aux_task3.loss_heatmap: 1.6321, aux_task3.loss_bbox: 0.4050, aux_task4.loss_heatmap: 1.7737, aux_task4.loss_bbox: 0.4290, aux_task5.loss_heatmap: 1.9355, aux_task5.loss_bbox: 0.4617, loss: 30.2990, grad_norm: 33.9062
2025-04-15 20:20:13,615 - mmdet - INFO - Epoch [1][500/1104]	lr: 2.677e-05, eta: 5:54:10, time: 0.949, data_time: 0.011, memory: 12397, loss_cls: 1.0300, loss_bbox: 1.6561, d0.loss_cls: 1.0474, d0.loss_bbox: 1.7278, d1.loss_cls: 1.0180, d1.loss_bbox: 1.6884, d2.loss_cls: 1.0024, d2.loss_bbox: 1.6814, d3.loss_cls: 1.0080, d3.loss_bbox: 1.6734, d4.loss_cls: 1.0111, d4.loss_bbox: 1.6679, aux_task0.loss_heatmap: 1.4122, aux_task0.loss_bbox: 0.4284, aux_task1.loss_heatmap: 1.7625, aux_task1.loss_bbox: 0.4642, aux_task2.loss_heatmap: 1.8060, aux_task2.loss_bbox: 0.4737, aux_task3.loss_heatmap: 1.5302, aux_task3.loss_bbox: 0.4008, aux_task4.loss_heatmap: 1.5014, aux_task4.loss_bbox: 0.4151, aux_task5.loss_heatmap: 1.6687, aux_task5.loss_bbox: 0.4481, loss: 28.5233, grad_norm: 24.6085
2025-04-15 20:21:02,636 - mmdet - INFO - Epoch [1][550/1104]	lr: 2.714e-05, eta: 5:53:12, time: 0.980, data_time: 0.011, memory: 12397, loss_cls: 0.9707, loss_bbox: 1.6186, d0.loss_cls: 1.0097, d0.loss_bbox: 1.7168, d1.loss_cls: 0.9774, d1.loss_bbox: 1.6681, d2.loss_cls: 0.9597, d2.loss_bbox: 1.6470, d3.loss_cls: 0.9602, d3.loss_bbox: 1.6336, d4.loss_cls: 0.9634, d4.loss_bbox: 1.6242, aux_task0.loss_heatmap: 1.3462, aux_task0.loss_bbox: 0.4078, aux_task1.loss_heatmap: 1.6115, aux_task1.loss_bbox: 0.4441, aux_task2.loss_heatmap: 1.7567, aux_task2.loss_bbox: 0.4797, aux_task3.loss_heatmap: 1.4301, aux_task3.loss_bbox: 0.3871, aux_task4.loss_heatmap: 1.3378, aux_task4.loss_bbox: 0.4057, aux_task5.loss_heatmap: 1.5239, aux_task5.loss_bbox: 0.4262, loss: 27.3060, grad_norm: 23.2476
2025-04-15 20:21:50,131 - mmdet - INFO - Epoch [1][600/1104]	lr: 2.754e-05, eta: 5:51:22, time: 0.950, data_time: 0.008, memory: 12397, loss_cls: 0.9557, loss_bbox: 1.5867, d0.loss_cls: 0.9965, d0.loss_bbox: 1.7153, d1.loss_cls: 0.9618, d1.loss_bbox: 1.6463, d2.loss_cls: 0.9435, d2.loss_bbox: 1.6183, d3.loss_cls: 0.9466, d3.loss_bbox: 1.5967, d4.loss_cls: 0.9495, d4.loss_bbox: 1.5898, aux_task0.loss_heatmap: 1.3361, aux_task0.loss_bbox: 0.4018, aux_task1.loss_heatmap: 1.5897, aux_task1.loss_bbox: 0.4275, aux_task2.loss_heatmap: 1.7378, aux_task2.loss_bbox: 0.4700, aux_task3.loss_heatmap: 1.3522, aux_task3.loss_bbox: 0.3685, aux_task4.loss_heatmap: 1.2161, aux_task4.loss_bbox: 0.3886, aux_task5.loss_heatmap: 1.4251, aux_task5.loss_bbox: 0.4107, loss: 26.6309, grad_norm: 23.4051
2025-04-15 20:22:37,594 - mmdet - INFO - Epoch [1][650/1104]	lr: 2.798e-05, eta: 5:49:39, time: 0.949, data_time: 0.008, memory: 12485, loss_cls: 0.9368, loss_bbox: 1.5486, d0.loss_cls: 0.9810, d0.loss_bbox: 1.7057, d1.loss_cls: 0.9391, d1.loss_bbox: 1.6243, d2.loss_cls: 0.9265, d2.loss_bbox: 1.5854, d3.loss_cls: 0.9311, d3.loss_bbox: 1.5594, d4.loss_cls: 0.9339, d4.loss_bbox: 1.5537, aux_task0.loss_heatmap: 1.2727, aux_task0.loss_bbox: 0.3817, aux_task1.loss_heatmap: 1.5120, aux_task1.loss_bbox: 0.4220, aux_task2.loss_heatmap: 1.7200, aux_task2.loss_bbox: 0.4621, aux_task3.loss_heatmap: 1.3447, aux_task3.loss_bbox: 0.3663, aux_task4.loss_heatmap: 1.1615, aux_task4.loss_bbox: 0.3815, aux_task5.loss_heatmap: 1.3400, aux_task5.loss_bbox: 0.3921, loss: 25.9821, grad_norm: 22.8397
2025-04-15 20:23:25,004 - mmdet - INFO - Epoch [1][700/1104]	lr: 2.846e-05, eta: 5:48:03, time: 0.948, data_time: 0.009, memory: 12485, loss_cls: 0.9333, loss_bbox: 1.4843, d0.loss_cls: 0.9663, d0.loss_bbox: 1.6891, d1.loss_cls: 0.9258, d1.loss_bbox: 1.5735, d2.loss_cls: 0.9170, d2.loss_bbox: 1.5345, d3.loss_cls: 0.9202, d3.loss_bbox: 1.5074, d4.loss_cls: 0.9266, d4.loss_bbox: 1.4971, aux_task0.loss_heatmap: 1.2650, aux_task0.loss_bbox: 0.3821, aux_task1.loss_heatmap: 1.4812, aux_task1.loss_bbox: 0.4141, aux_task2.loss_heatmap: 1.7069, aux_task2.loss_bbox: 0.4520, aux_task3.loss_heatmap: 1.2313, aux_task3.loss_bbox: 0.3642, aux_task4.loss_heatmap: 1.0660, aux_task4.loss_bbox: 0.3724, aux_task5.loss_heatmap: 1.2892, aux_task5.loss_bbox: 0.3865, loss: 25.2860, grad_norm: 24.4747
2025-04-15 20:24:12,549 - mmdet - INFO - Epoch [1][750/1104]	lr: 2.897e-05, eta: 5:46:38, time: 0.951, data_time: 0.008, memory: 12485, loss_cls: 0.9226, loss_bbox: 1.4232, d0.loss_cls: 0.9559, d0.loss_bbox: 1.6618, d1.loss_cls: 0.9202, d1.loss_bbox: 1.5179, d2.loss_cls: 0.9113, d2.loss_bbox: 1.4774, d3.loss_cls: 0.9143, d3.loss_bbox: 1.4475, d4.loss_cls: 0.9163, d4.loss_bbox: 1.4336, aux_task0.loss_heatmap: 1.2314, aux_task0.loss_bbox: 0.3736, aux_task1.loss_heatmap: 1.4734, aux_task1.loss_bbox: 0.4163, aux_task2.loss_heatmap: 1.6943, aux_task2.loss_bbox: 0.4442, aux_task3.loss_heatmap: 1.2163, aux_task3.loss_bbox: 0.3501, aux_task4.loss_heatmap: 1.0314, aux_task4.loss_bbox: 0.3730, aux_task5.loss_heatmap: 1.2455, aux_task5.loss_bbox: 0.3801, loss: 24.7316, grad_norm: 24.0079
2025-04-15 20:24:59,536 - mmdet - INFO - Epoch [1][800/1104]	lr: 2.951e-05, eta: 5:45:02, time: 0.940, data_time: 0.009, memory: 12485, loss_cls: 0.9210, loss_bbox: 1.3958, d0.loss_cls: 0.9572, d0.loss_bbox: 1.6515, d1.loss_cls: 0.9216, d1.loss_bbox: 1.4976, d2.loss_cls: 0.9105, d2.loss_bbox: 1.4487, d3.loss_cls: 0.9140, d3.loss_bbox: 1.4166, d4.loss_cls: 0.9154, d4.loss_bbox: 1.4024, aux_task0.loss_heatmap: 1.1793, aux_task0.loss_bbox: 0.3690, aux_task1.loss_heatmap: 1.4491, aux_task1.loss_bbox: 0.4131, aux_task2.loss_heatmap: 1.6807, aux_task2.loss_bbox: 0.4458, aux_task3.loss_heatmap: 1.2678, aux_task3.loss_bbox: 0.3550, aux_task4.loss_heatmap: 0.9955, aux_task4.loss_bbox: 0.3611, aux_task5.loss_heatmap: 1.2239, aux_task5.loss_bbox: 0.3744, loss: 24.4668, grad_norm: 26.5708
2025-04-15 20:25:48,627 - mmdet - INFO - Epoch [1][850/1104]	lr: 3.009e-05, eta: 5:44:25, time: 0.982, data_time: 0.008, memory: 12485, loss_cls: 0.9062, loss_bbox: 1.3686, d0.loss_cls: 0.9440, d0.loss_bbox: 1.6366, d1.loss_cls: 0.9087, d1.loss_bbox: 1.4732, d2.loss_cls: 0.9006, d2.loss_bbox: 1.4224, d3.loss_cls: 0.9017, d3.loss_bbox: 1.3890, d4.loss_cls: 0.9032, d4.loss_bbox: 1.3748, aux_task0.loss_heatmap: 1.1622, aux_task0.loss_bbox: 0.3661, aux_task1.loss_heatmap: 1.4124, aux_task1.loss_bbox: 0.4089, aux_task2.loss_heatmap: 1.6579, aux_task2.loss_bbox: 0.4523, aux_task3.loss_heatmap: 1.2413, aux_task3.loss_bbox: 0.3466, aux_task4.loss_heatmap: 0.9591, aux_task4.loss_bbox: 0.3566, aux_task5.loss_heatmap: 1.1880, aux_task5.loss_bbox: 0.3732, loss: 24.0536, grad_norm: 26.8780
2025-04-15 20:26:36,218 - mmdet - INFO - Epoch [1][900/1104]	lr: 3.070e-05, eta: 5:43:11, time: 0.952, data_time: 0.010, memory: 12485, loss_cls: 0.8980, loss_bbox: 1.3431, d0.loss_cls: 0.9314, d0.loss_bbox: 1.6219, d1.loss_cls: 0.9017, d1.loss_bbox: 1.4479, d2.loss_cls: 0.8907, d2.loss_bbox: 1.3931, d3.loss_cls: 0.8911, d3.loss_bbox: 1.3651, d4.loss_cls: 0.8925, d4.loss_bbox: 1.3505, aux_task0.loss_heatmap: 1.1387, aux_task0.loss_bbox: 0.3614, aux_task1.loss_heatmap: 1.3933, aux_task1.loss_bbox: 0.4028, aux_task2.loss_heatmap: 1.6356, aux_task2.loss_bbox: 0.4459, aux_task3.loss_heatmap: 1.2060, aux_task3.loss_bbox: 0.3444, aux_task4.loss_heatmap: 0.9377, aux_task4.loss_bbox: 0.3543, aux_task5.loss_heatmap: 1.1390, aux_task5.loss_bbox: 0.3709, loss: 23.6569, grad_norm: 28.3780
2025-04-15 20:27:23,632 - mmdet - INFO - Epoch [1][950/1104]	lr: 3.135e-05, eta: 5:41:55, time: 0.948, data_time: 0.009, memory: 12485, loss_cls: 0.8873, loss_bbox: 1.3212, d0.loss_cls: 0.9222, d0.loss_bbox: 1.6134, d1.loss_cls: 0.8905, d1.loss_bbox: 1.4322, d2.loss_cls: 0.8799, d2.loss_bbox: 1.3680, d3.loss_cls: 0.8776, d3.loss_bbox: 1.3418, d4.loss_cls: 0.8801, d4.loss_bbox: 1.3255, aux_task0.loss_heatmap: 1.1349, aux_task0.loss_bbox: 0.3720, aux_task1.loss_heatmap: 1.3848, aux_task1.loss_bbox: 0.4007, aux_task2.loss_heatmap: 1.6386, aux_task2.loss_bbox: 0.4383, aux_task3.loss_heatmap: 1.1585, aux_task3.loss_bbox: 0.3421, aux_task4.loss_heatmap: 0.9108, aux_task4.loss_bbox: 0.3571, aux_task5.loss_heatmap: 1.0989, aux_task5.loss_bbox: 0.3603, loss: 23.3367, grad_norm: 29.2777
2025-04-15 20:28:11,092 - mmdet - INFO - Exp name: DSSMambaGigantic_layer3_rope_drop01.py
2025-04-15 20:28:11,092 - mmdet - INFO - Epoch [1][1000/1104]	lr: 3.203e-05, eta: 5:40:44, time: 0.949, data_time: 0.011, memory: 12485, loss_cls: 0.8867, loss_bbox: 1.2967, d0.loss_cls: 0.9234, d0.loss_bbox: 1.5941, d1.loss_cls: 0.8906, d1.loss_bbox: 1.4086, d2.loss_cls: 0.8778, d2.loss_bbox: 1.3411, d3.loss_cls: 0.8801, d3.loss_bbox: 1.3161, d4.loss_cls: 0.8803, d4.loss_bbox: 1.3003, aux_task0.loss_heatmap: 1.1299, aux_task0.loss_bbox: 0.3705, aux_task1.loss_heatmap: 1.3696, aux_task1.loss_bbox: 0.4038, aux_task2.loss_heatmap: 1.6353, aux_task2.loss_bbox: 0.4405, aux_task3.loss_heatmap: 1.1650, aux_task3.loss_bbox: 0.3431, aux_task4.loss_heatmap: 0.8905, aux_task4.loss_bbox: 0.3541, aux_task5.loss_heatmap: 1.0915, aux_task5.loss_bbox: 0.3621, loss: 23.1515, grad_norm: 29.0339
2025-04-15 20:28:58,119 - mmdet - INFO - Epoch [1][1050/1104]	lr: 3.274e-05, eta: 5:39:26, time: 0.941, data_time: 0.008, memory: 12485, loss_cls: 0.8829, loss_bbox: 1.2600, d0.loss_cls: 0.9145, d0.loss_bbox: 1.5712, d1.loss_cls: 0.8859, d1.loss_bbox: 1.3847, d2.loss_cls: 0.8769, d2.loss_bbox: 1.3067, d3.loss_cls: 0.8732, d3.loss_bbox: 1.2837, d4.loss_cls: 0.8748, d4.loss_bbox: 1.2668, aux_task0.loss_heatmap: 1.1114, aux_task0.loss_bbox: 0.3663, aux_task1.loss_heatmap: 1.3546, aux_task1.loss_bbox: 0.4053, aux_task2.loss_heatmap: 1.6226, aux_task2.loss_bbox: 0.4390, aux_task3.loss_heatmap: 1.1638, aux_task3.loss_bbox: 0.3413, aux_task4.loss_heatmap: 0.9056, aux_task4.loss_bbox: 0.3563, aux_task5.loss_heatmap: 1.0704, aux_task5.loss_bbox: 0.3622, loss: 22.8800, grad_norm: 27.5644
2025-04-15 20:29:45,857 - mmdet - INFO - Epoch [1][1100/1104]	lr: 3.349e-05, eta: 5:38:25, time: 0.955, data_time: 0.010, memory: 12485, loss_cls: 0.8573, loss_bbox: 1.2566, d0.loss_cls: 0.8986, d0.loss_bbox: 1.5674, d1.loss_cls: 0.8620, d1.loss_bbox: 1.3850, d2.loss_cls: 0.8518, d2.loss_bbox: 1.2992, d3.loss_cls: 0.8521, d3.loss_bbox: 1.2772, d4.loss_cls: 0.8518, d4.loss_bbox: 1.2609, aux_task0.loss_heatmap: 1.0759, aux_task0.loss_bbox: 0.3591, aux_task1.loss_heatmap: 1.3402, aux_task1.loss_bbox: 0.4024, aux_task2.loss_heatmap: 1.6100, aux_task2.loss_bbox: 0.4409, aux_task3.loss_heatmap: 1.1200, aux_task3.loss_bbox: 0.3368, aux_task4.loss_heatmap: 0.8908, aux_task4.loss_bbox: 0.3618, aux_task5.loss_heatmap: 1.0523, aux_task5.loss_bbox: 0.3552, loss: 22.5651, grad_norm: 30.2902
2025-04-15 20:29:49,974 - mmdet - INFO - Saving checkpoint at 1 epochs
2025-04-15 20:40:59,663 - mmdet - INFO - Exp name: DSSMambaGigantic_layer3_rope_drop01.py
2025-04-15 20:40:59,663 - mmdet - INFO - Epoch(val) [1][3010]	pts_bbox_NuScenes/car_AP_dist_0.5: 0.0001, pts_bbox_NuScenes/car_AP_dist_1.0: 0.0274, pts_bbox_NuScenes/car_AP_dist_2.0: 0.0848, pts_bbox_NuScenes/car_AP_dist_4.0: 0.1335, pts_bbox_NuScenes/car_trans_err: 0.9174, pts_bbox_NuScenes/car_scale_err: 0.2549, pts_bbox_NuScenes/car_orient_err: 1.6550, pts_bbox_NuScenes/car_vel_err: 1.6214, pts_bbox_NuScenes/car_attr_err: 0.4679, pts_bbox_NuScenes/mATE: 0.8664, pts_bbox_NuScenes/mASE: 0.5673, pts_bbox_NuScenes/mAOE: 1.3771, pts_bbox_NuScenes/mAVE: 1.3039, pts_bbox_NuScenes/mAAE: 0.5862, pts_bbox_NuScenes/truck_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/truck_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/truck_AP_dist_2.0: 0.0000, pts_bbox_NuScenes/truck_AP_dist_4.0: 0.0000, pts_bbox_NuScenes/truck_trans_err: 1.1292, pts_bbox_NuScenes/truck_scale_err: 0.3788, pts_bbox_NuScenes/truck_orient_err: 1.5214, pts_bbox_NuScenes/truck_vel_err: 1.3603, pts_bbox_NuScenes/truck_attr_err: 0.4166, pts_bbox_NuScenes/construction_vehicle_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/construction_vehicle_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/construction_vehicle_AP_dist_2.0: 0.0000, pts_bbox_NuScenes/construction_vehicle_AP_dist_4.0: 0.0000, pts_bbox_NuScenes/construction_vehicle_trans_err: 1.0146, pts_bbox_NuScenes/construction_vehicle_scale_err: 0.6062, pts_bbox_NuScenes/construction_vehicle_orient_err: 1.6633, pts_bbox_NuScenes/construction_vehicle_vel_err: 0.1377, pts_bbox_NuScenes/construction_vehicle_attr_err: 0.3392, pts_bbox_NuScenes/bus_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/bus_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/bus_AP_dist_2.0: 0.0000, pts_bbox_NuScenes/bus_AP_dist_4.0: 0.0000, pts_bbox_NuScenes/bus_trans_err: 1.1625, pts_bbox_NuScenes/bus_scale_err: 0.3063, pts_bbox_NuScenes/bus_orient_err: 1.3623, pts_bbox_NuScenes/bus_vel_err: 3.3367, pts_bbox_NuScenes/bus_attr_err: 0.7446, pts_bbox_NuScenes/trailer_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/trailer_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/trailer_AP_dist_2.0: 0.0000, pts_bbox_NuScenes/trailer_AP_dist_4.0: 0.0000, pts_bbox_NuScenes/trailer_trans_err: 1.0000, pts_bbox_NuScenes/trailer_scale_err: 1.0000, pts_bbox_NuScenes/trailer_orient_err: 1.0000, pts_bbox_NuScenes/trailer_vel_err: 1.0000, pts_bbox_NuScenes/trailer_attr_err: 1.0000, pts_bbox_NuScenes/barrier_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/barrier_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/barrier_AP_dist_2.0: 0.0087, pts_bbox_NuScenes/barrier_AP_dist_4.0: 0.0229, pts_bbox_NuScenes/barrier_trans_err: 0.9834, pts_bbox_NuScenes/barrier_scale_err: 0.7996, pts_bbox_NuScenes/barrier_orient_err: 0.8825, pts_bbox_NuScenes/barrier_vel_err: nan, pts_bbox_NuScenes/barrier_attr_err: nan, pts_bbox_NuScenes/motorcycle_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/motorcycle_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/motorcycle_AP_dist_2.0: 0.0000, pts_bbox_NuScenes/motorcycle_AP_dist_4.0: 0.0000, pts_bbox_NuScenes/motorcycle_trans_err: 0.4920, pts_bbox_NuScenes/motorcycle_scale_err: 0.5603, pts_bbox_NuScenes/motorcycle_orient_err: 1.4171, pts_bbox_NuScenes/motorcycle_vel_err: 1.3175, pts_bbox_NuScenes/motorcycle_attr_err: 0.6247, pts_bbox_NuScenes/bicycle_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/bicycle_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/bicycle_AP_dist_2.0: 0.0000, pts_bbox_NuScenes/bicycle_AP_dist_4.0: 0.0000, pts_bbox_NuScenes/bicycle_trans_err: 0.8001, pts_bbox_NuScenes/bicycle_scale_err: 0.6141, pts_bbox_NuScenes/bicycle_orient_err: 1.4003, pts_bbox_NuScenes/bicycle_vel_err: 0.5533, pts_bbox_NuScenes/bicycle_attr_err: 0.2002, pts_bbox_NuScenes/pedestrian_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/pedestrian_AP_dist_1.0: 0.0015, pts_bbox_NuScenes/pedestrian_AP_dist_2.0: 0.0027, pts_bbox_NuScenes/pedestrian_AP_dist_4.0: 0.0062, pts_bbox_NuScenes/pedestrian_trans_err: 0.4864, pts_bbox_NuScenes/pedestrian_scale_err: 0.5178, pts_bbox_NuScenes/pedestrian_orient_err: 1.4922, pts_bbox_NuScenes/pedestrian_vel_err: 1.1044, pts_bbox_NuScenes/pedestrian_attr_err: 0.8960, pts_bbox_NuScenes/traffic_cone_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/traffic_cone_AP_dist_1.0: 0.0001, pts_bbox_NuScenes/traffic_cone_AP_dist_2.0: 0.0015, pts_bbox_NuScenes/traffic_cone_AP_dist_4.0: 0.0108, pts_bbox_NuScenes/traffic_cone_trans_err: 0.6781, pts_bbox_NuScenes/traffic_cone_scale_err: 0.6347, pts_bbox_NuScenes/traffic_cone_orient_err: nan, pts_bbox_NuScenes/traffic_cone_vel_err: nan, pts_bbox_NuScenes/traffic_cone_attr_err: nan, pts_bbox_NuScenes/NDS: 0.1018, pts_bbox_NuScenes/mAP: 0.0075
2025-04-15 20:41:52,514 - mmdet - INFO - Epoch [2][50/1104]	lr: 3.433e-05, eta: 5:37:23, time: 1.035, data_time: 0.095, memory: 12485, loss_cls: 0.8498, loss_bbox: 1.2173, d0.loss_cls: 0.8878, d0.loss_bbox: 1.5332, d1.loss_cls: 0.8516, d1.loss_bbox: 1.3446, d2.loss_cls: 0.8454, d2.loss_bbox: 1.2616, d3.loss_cls: 0.8447, d3.loss_bbox: 1.2399, d4.loss_cls: 0.8458, d4.loss_bbox: 1.2251, aux_task0.loss_heatmap: 1.0462, aux_task0.loss_bbox: 0.3552, aux_task1.loss_heatmap: 1.3241, aux_task1.loss_bbox: 0.3969, aux_task2.loss_heatmap: 1.6059, aux_task2.loss_bbox: 0.4398, aux_task3.loss_heatmap: 1.1026, aux_task3.loss_bbox: 0.3357, aux_task4.loss_heatmap: 0.8784, aux_task4.loss_bbox: 0.3550, aux_task5.loss_heatmap: 1.0223, aux_task5.loss_bbox: 0.3552, loss: 22.1639, grad_norm: 31.5654
2025-04-15 20:42:39,780 - mmdet - INFO - Epoch [2][100/1104]	lr: 3.514e-05, eta: 5:36:16, time: 0.945, data_time: 0.009, memory: 12485, loss_cls: 0.8454, loss_bbox: 1.2003, d0.loss_cls: 0.8820, d0.loss_bbox: 1.5155, d1.loss_cls: 0.8488, d1.loss_bbox: 1.3358, d2.loss_cls: 0.8418, d2.loss_bbox: 1.2419, d3.loss_cls: 0.8390, d3.loss_bbox: 1.2213, d4.loss_cls: 0.8404, d4.loss_bbox: 1.2063, aux_task0.loss_heatmap: 1.0508, aux_task0.loss_bbox: 0.3495, aux_task1.loss_heatmap: 1.3365, aux_task1.loss_bbox: 0.3941, aux_task2.loss_heatmap: 1.6058, aux_task2.loss_bbox: 0.4310, aux_task3.loss_heatmap: 1.1248, aux_task3.loss_bbox: 0.3325, aux_task4.loss_heatmap: 0.8551, aux_task4.loss_bbox: 0.3530, aux_task5.loss_heatmap: 1.0012, aux_task5.loss_bbox: 0.3508, loss: 22.0032, grad_norm: 27.9532
2025-04-15 20:43:27,448 - mmdet - INFO - Epoch [2][150/1104]	lr: 3.599e-05, eta: 5:35:16, time: 0.953, data_time: 0.010, memory: 12552, loss_cls: 0.8389, loss_bbox: 1.1987, d0.loss_cls: 0.8766, d0.loss_bbox: 1.5158, d1.loss_cls: 0.8466, d1.loss_bbox: 1.3271, d2.loss_cls: 0.8383, d2.loss_bbox: 1.2381, d3.loss_cls: 0.8361, d3.loss_bbox: 1.2175, d4.loss_cls: 0.8332, d4.loss_bbox: 1.2043, aux_task0.loss_heatmap: 1.0780, aux_task0.loss_bbox: 0.3642, aux_task1.loss_heatmap: 1.2979, aux_task1.loss_bbox: 0.3937, aux_task2.loss_heatmap: 1.5686, aux_task2.loss_bbox: 0.4282, aux_task3.loss_heatmap: 1.0883, aux_task3.loss_bbox: 0.3394, aux_task4.loss_heatmap: 0.8425, aux_task4.loss_bbox: 0.3487, aux_task5.loss_heatmap: 0.9861, aux_task5.loss_bbox: 0.3564, loss: 21.8631, grad_norm: 29.6284
2025-04-15 20:44:14,598 - mmdet - INFO - Epoch [2][200/1104]	lr: 3.687e-05, eta: 5:34:10, time: 0.943, data_time: 0.008, memory: 12552, loss_cls: 0.8349, loss_bbox: 1.1926, d0.loss_cls: 0.8698, d0.loss_bbox: 1.4953, d1.loss_cls: 0.8370, d1.loss_bbox: 1.3187, d2.loss_cls: 0.8320, d2.loss_bbox: 1.2289, d3.loss_cls: 0.8312, d3.loss_bbox: 1.2084, d4.loss_cls: 0.8291, d4.loss_bbox: 1.1946, aux_task0.loss_heatmap: 1.0558, aux_task0.loss_bbox: 0.3548, aux_task1.loss_heatmap: 1.2892, aux_task1.loss_bbox: 0.3940, aux_task2.loss_heatmap: 1.5710, aux_task2.loss_bbox: 0.4287, aux_task3.loss_heatmap: 1.0638, aux_task3.loss_bbox: 0.3346, aux_task4.loss_heatmap: 0.8264, aux_task4.loss_bbox: 0.3495, aux_task5.loss_heatmap: 1.0088, aux_task5.loss_bbox: 0.3558, loss: 21.7051, grad_norm: 30.4482
2025-04-15 20:45:01,760 - mmdet - INFO - Epoch [2][250/1104]	lr: 3.778e-05, eta: 5:33:05, time: 0.943, data_time: 0.009, memory: 12552, loss_cls: 0.8198, loss_bbox: 1.1671, d0.loss_cls: 0.8564, d0.loss_bbox: 1.4586, d1.loss_cls: 0.8251, d1.loss_bbox: 1.2871, d2.loss_cls: 0.8191, d2.loss_bbox: 1.2017, d3.loss_cls: 0.8160, d3.loss_bbox: 1.1825, d4.loss_cls: 0.8165, d4.loss_bbox: 1.1717, aux_task0.loss_heatmap: 1.0198, aux_task0.loss_bbox: 0.3454, aux_task1.loss_heatmap: 1.2645, aux_task1.loss_bbox: 0.3978, aux_task2.loss_heatmap: 1.5424, aux_task2.loss_bbox: 0.4250, aux_task3.loss_heatmap: 1.0551, aux_task3.loss_bbox: 0.3279, aux_task4.loss_heatmap: 0.8418, aux_task4.loss_bbox: 0.3508, aux_task5.loss_heatmap: 0.9626, aux_task5.loss_bbox: 0.3492, loss: 21.3037, grad_norm: 30.9628
2025-04-15 20:45:49,191 - mmdet - INFO - Epoch [2][300/1104]	lr: 3.872e-05, eta: 5:32:05, time: 0.949, data_time: 0.009, memory: 12552, loss_cls: 0.8178, loss_bbox: 1.1715, d0.loss_cls: 0.8550, d0.loss_bbox: 1.4592, d1.loss_cls: 0.8249, d1.loss_bbox: 1.2915, d2.loss_cls: 0.8189, d2.loss_bbox: 1.2097, d3.loss_cls: 0.8138, d3.loss_bbox: 1.1906, d4.loss_cls: 0.8135, d4.loss_bbox: 1.1774, aux_task0.loss_heatmap: 1.0133, aux_task0.loss_bbox: 0.3589, aux_task1.loss_heatmap: 1.2935, aux_task1.loss_bbox: 0.3934, aux_task2.loss_heatmap: 1.5430, aux_task2.loss_bbox: 0.4414, aux_task3.loss_heatmap: 1.0850, aux_task3.loss_bbox: 0.3314, aux_task4.loss_heatmap: 0.8374, aux_task4.loss_bbox: 0.3390, aux_task5.loss_heatmap: 0.9276, aux_task5.loss_bbox: 0.3473, loss: 21.3549, grad_norm: 30.8418
2025-04-15 20:46:36,392 - mmdet - INFO - Epoch [2][350/1104]	lr: 3.969e-05, eta: 5:31:03, time: 0.944, data_time: 0.009, memory: 12552, loss_cls: 0.8120, loss_bbox: 1.1492, d0.loss_cls: 0.8458, d0.loss_bbox: 1.4167, d1.loss_cls: 0.8167, d1.loss_bbox: 1.2592, d2.loss_cls: 0.8112, d2.loss_bbox: 1.1859, d3.loss_cls: 0.8094, d3.loss_bbox: 1.1656, d4.loss_cls: 0.8073, d4.loss_bbox: 1.1529, aux_task0.loss_heatmap: 1.0138, aux_task0.loss_bbox: 0.3495, aux_task1.loss_heatmap: 1.2837, aux_task1.loss_bbox: 0.3966, aux_task2.loss_heatmap: 1.5332, aux_task2.loss_bbox: 0.4266, aux_task3.loss_heatmap: 1.0741, aux_task3.loss_bbox: 0.3337, aux_task4.loss_heatmap: 0.8317, aux_task4.loss_bbox: 0.3491, aux_task5.loss_heatmap: 0.9265, aux_task5.loss_bbox: 0.3482, loss: 21.0987, grad_norm: 33.3422
2025-04-15 20:47:23,819 - mmdet - INFO - Epoch [2][400/1104]	lr: 4.070e-05, eta: 5:30:05, time: 0.949, data_time: 0.011, memory: 12552, loss_cls: 0.8005, loss_bbox: 1.1417, d0.loss_cls: 0.8307, d0.loss_bbox: 1.3989, d1.loss_cls: 0.8075, d1.loss_bbox: 1.2486, d2.loss_cls: 0.7989, d2.loss_bbox: 1.1778, d3.loss_cls: 0.7966, d3.loss_bbox: 1.1593, d4.loss_cls: 0.7974, d4.loss_bbox: 1.1460, aux_task0.loss_heatmap: 0.9976, aux_task0.loss_bbox: 0.3491, aux_task1.loss_heatmap: 1.2533, aux_task1.loss_bbox: 0.3911, aux_task2.loss_heatmap: 1.5365, aux_task2.loss_bbox: 0.4210, aux_task3.loss_heatmap: 1.0570, aux_task3.loss_bbox: 0.3371, aux_task4.loss_heatmap: 0.8108, aux_task4.loss_bbox: 0.3504, aux_task5.loss_heatmap: 0.8924, aux_task5.loss_bbox: 0.3494, loss: 20.8496, grad_norm: 30.6822
2025-04-15 20:48:11,097 - mmdet - INFO - Epoch [2][450/1104]	lr: 4.173e-05, eta: 5:29:06, time: 0.946, data_time: 0.010, memory: 12552, loss_cls: 0.7888, loss_bbox: 1.1361, d0.loss_cls: 0.8230, d0.loss_bbox: 1.3857, d1.loss_cls: 0.7954, d1.loss_bbox: 1.2342, d2.loss_cls: 0.7867, d2.loss_bbox: 1.1670, d3.loss_cls: 0.7864, d3.loss_bbox: 1.1509, d4.loss_cls: 0.7863, d4.loss_bbox: 1.1390, aux_task0.loss_heatmap: 0.9994, aux_task0.loss_bbox: 0.3455, aux_task1.loss_heatmap: 1.2451, aux_task1.loss_bbox: 0.3898, aux_task2.loss_heatmap: 1.5007, aux_task2.loss_bbox: 0.4268, aux_task3.loss_heatmap: 1.0281, aux_task3.loss_bbox: 0.3353, aux_task4.loss_heatmap: 0.8272, aux_task4.loss_bbox: 0.3479, aux_task5.loss_heatmap: 0.8739, aux_task5.loss_bbox: 0.3456, loss: 20.6448, grad_norm: 32.8313
2025-04-15 20:48:58,206 - mmdet - INFO - Epoch [2][500/1104]	lr: 4.280e-05, eta: 5:28:05, time: 0.942, data_time: 0.009, memory: 12552, loss_cls: 0.7777, loss_bbox: 1.1204, d0.loss_cls: 0.8144, d0.loss_bbox: 1.3653, d1.loss_cls: 0.7831, d1.loss_bbox: 1.2198, d2.loss_cls: 0.7763, d2.loss_bbox: 1.1545, d3.loss_cls: 0.7752, d3.loss_bbox: 1.1361, d4.loss_cls: 0.7748, d4.loss_bbox: 1.1245, aux_task0.loss_heatmap: 0.9767, aux_task0.loss_bbox: 0.3472, aux_task1.loss_heatmap: 1.2637, aux_task1.loss_bbox: 0.3876, aux_task2.loss_heatmap: 1.4701, aux_task2.loss_bbox: 0.4197, aux_task3.loss_heatmap: 1.0986, aux_task3.loss_bbox: 0.3354, aux_task4.loss_heatmap: 0.7998, aux_task4.loss_bbox: 0.3433, aux_task5.loss_heatmap: 0.8605, aux_task5.loss_bbox: 0.3452, loss: 20.4699, grad_norm: 33.6043
2025-04-15 20:49:45,311 - mmdet - INFO - Epoch [2][550/1104]	lr: 4.389e-05, eta: 5:27:05, time: 0.942, data_time: 0.009, memory: 12552, loss_cls: 0.7848, loss_bbox: 1.1174, d0.loss_cls: 0.8202, d0.loss_bbox: 1.3652, d1.loss_cls: 0.7923, d1.loss_bbox: 1.2170, d2.loss_cls: 0.7847, d2.loss_bbox: 1.1531, d3.loss_cls: 0.7828, d3.loss_bbox: 1.1375, d4.loss_cls: 0.7828, d4.loss_bbox: 1.1238, aux_task0.loss_heatmap: 0.9854, aux_task0.loss_bbox: 0.3514, aux_task1.loss_heatmap: 1.2183, aux_task1.loss_bbox: 0.3874, aux_task2.loss_heatmap: 1.4926, aux_task2.loss_bbox: 0.4289, aux_task3.loss_heatmap: 1.0184, aux_task3.loss_bbox: 0.3285, aux_task4.loss_heatmap: 0.7896, aux_task4.loss_bbox: 0.3461, aux_task5.loss_heatmap: 0.8815, aux_task5.loss_bbox: 0.3438, loss: 20.4335, grad_norm: 30.9408
2025-04-15 20:50:32,725 - mmdet - INFO - Epoch [2][600/1104]	lr: 4.502e-05, eta: 5:26:09, time: 0.948, data_time: 0.008, memory: 12552, loss_cls: 0.7706, loss_bbox: 1.1112, d0.loss_cls: 0.8045, d0.loss_bbox: 1.3525, d1.loss_cls: 0.7746, d1.loss_bbox: 1.2027, d2.loss_cls: 0.7707, d2.loss_bbox: 1.1433, d3.loss_cls: 0.7682, d3.loss_bbox: 1.1271, d4.loss_cls: 0.7674, d4.loss_bbox: 1.1161, aux_task0.loss_heatmap: 0.9642, aux_task0.loss_bbox: 0.3439, aux_task1.loss_heatmap: 1.2289, aux_task1.loss_bbox: 0.3863, aux_task2.loss_heatmap: 1.4658, aux_task2.loss_bbox: 0.4314, aux_task3.loss_heatmap: 1.0403, aux_task3.loss_bbox: 0.3273, aux_task4.loss_heatmap: 0.7683, aux_task4.loss_bbox: 0.3432, aux_task5.loss_heatmap: 0.8442, aux_task5.loss_bbox: 0.3425, loss: 20.1953, grad_norm: 33.3654
2025-04-15 20:51:20,231 - mmdet - INFO - Epoch [2][650/1104]	lr: 4.617e-05, eta: 5:25:15, time: 0.950, data_time: 0.008, memory: 12552, loss_cls: 0.7748, loss_bbox: 1.1064, d0.loss_cls: 0.8036, d0.loss_bbox: 1.3378, d1.loss_cls: 0.7742, d1.loss_bbox: 1.1934, d2.loss_cls: 0.7685, d2.loss_bbox: 1.1365, d3.loss_cls: 0.7688, d3.loss_bbox: 1.1243, d4.loss_cls: 0.7703, d4.loss_bbox: 1.1135, aux_task0.loss_heatmap: 0.9470, aux_task0.loss_bbox: 0.3368, aux_task1.loss_heatmap: 1.1827, aux_task1.loss_bbox: 0.3850, aux_task2.loss_heatmap: 1.4880, aux_task2.loss_bbox: 0.4249, aux_task3.loss_heatmap: 1.0740, aux_task3.loss_bbox: 0.3350, aux_task4.loss_heatmap: 0.8166, aux_task4.loss_bbox: 0.3437, aux_task5.loss_heatmap: 0.8226, aux_task5.loss_bbox: 0.3385, loss: 20.1667, grad_norm: 34.3105
2025-04-15 20:52:07,738 - mmdet - INFO - Epoch [2][700/1104]	lr: 4.735e-05, eta: 5:24:22, time: 0.950, data_time: 0.009, memory: 12552, loss_cls: 0.7625, loss_bbox: 1.0918, d0.loss_cls: 0.7919, d0.loss_bbox: 1.3341, d1.loss_cls: 0.7650, d1.loss_bbox: 1.1842, d2.loss_cls: 0.7604, d2.loss_bbox: 1.1270, d3.loss_cls: 0.7603, d3.loss_bbox: 1.1080, d4.loss_cls: 0.7599, d4.loss_bbox: 1.0967, aux_task0.loss_heatmap: 0.9759, aux_task0.loss_bbox: 0.3411, aux_task1.loss_heatmap: 1.1914, aux_task1.loss_bbox: 0.3889, aux_task2.loss_heatmap: 1.4738, aux_task2.loss_bbox: 0.4259, aux_task3.loss_heatmap: 1.0047, aux_task3.loss_bbox: 0.3287, aux_task4.loss_heatmap: 0.7757, aux_task4.loss_bbox: 0.3434, aux_task5.loss_heatmap: 0.7913, aux_task5.loss_bbox: 0.3344, loss: 19.9170, grad_norm: 34.6815
2025-04-15 20:52:54,889 - mmdet - INFO - Epoch [2][750/1104]	lr: 4.857e-05, eta: 5:23:24, time: 0.943, data_time: 0.008, memory: 12552, loss_cls: 0.7517, loss_bbox: 1.0869, d0.loss_cls: 0.7856, d0.loss_bbox: 1.3213, d1.loss_cls: 0.7560, d1.loss_bbox: 1.1713, d2.loss_cls: 0.7497, d2.loss_bbox: 1.1197, d3.loss_cls: 0.7482, d3.loss_bbox: 1.1041, d4.loss_cls: 0.7480, d4.loss_bbox: 1.0926, aux_task0.loss_heatmap: 0.9434, aux_task0.loss_bbox: 0.3442, aux_task1.loss_heatmap: 1.1993, aux_task1.loss_bbox: 0.3838, aux_task2.loss_heatmap: 1.4277, aux_task2.loss_bbox: 0.4208, aux_task3.loss_heatmap: 1.0316, aux_task3.loss_bbox: 0.3241, aux_task4.loss_heatmap: 0.7682, aux_task4.loss_bbox: 0.3428, aux_task5.loss_heatmap: 0.7955, aux_task5.loss_bbox: 0.3355, loss: 19.7520, grad_norm: 32.7361
2025-04-15 20:53:42,052 - mmdet - INFO - Epoch [2][800/1104]	lr: 4.980e-05, eta: 5:22:28, time: 0.943, data_time: 0.009, memory: 12552, loss_cls: 0.7506, loss_bbox: 1.0830, d0.loss_cls: 0.7846, d0.loss_bbox: 1.3164, d1.loss_cls: 0.7530, d1.loss_bbox: 1.1670, d2.loss_cls: 0.7465, d2.loss_bbox: 1.1153, d3.loss_cls: 0.7459, d3.loss_bbox: 1.0994, d4.loss_cls: 0.7453, d4.loss_bbox: 1.0893, aux_task0.loss_heatmap: 0.9362, aux_task0.loss_bbox: 0.3391, aux_task1.loss_heatmap: 1.1925, aux_task1.loss_bbox: 0.3838, aux_task2.loss_heatmap: 1.4369, aux_task2.loss_bbox: 0.4189, aux_task3.loss_heatmap: 1.0217, aux_task3.loss_bbox: 0.3285, aux_task4.loss_heatmap: 0.7818, aux_task4.loss_bbox: 0.3379, aux_task5.loss_heatmap: 0.7845, aux_task5.loss_bbox: 0.3345, loss: 19.6927, grad_norm: 32.1048
2025-04-15 20:54:29,288 - mmdet - INFO - Epoch [2][850/1104]	lr: 5.107e-05, eta: 5:21:33, time: 0.945, data_time: 0.010, memory: 12552, loss_cls: 0.7329, loss_bbox: 1.0609, d0.loss_cls: 0.7666, d0.loss_bbox: 1.2964, d1.loss_cls: 0.7352, d1.loss_bbox: 1.1397, d2.loss_cls: 0.7272, d2.loss_bbox: 1.0915, d3.loss_cls: 0.7272, d3.loss_bbox: 1.0762, d4.loss_cls: 0.7284, d4.loss_bbox: 1.0651, aux_task0.loss_heatmap: 0.9011, aux_task0.loss_bbox: 0.3391, aux_task1.loss_heatmap: 1.1927, aux_task1.loss_bbox: 0.3822, aux_task2.loss_heatmap: 1.4258, aux_task2.loss_bbox: 0.4182, aux_task3.loss_heatmap: 0.9791, aux_task3.loss_bbox: 0.3255, aux_task4.loss_heatmap: 0.7681, aux_task4.loss_bbox: 0.3346, aux_task5.loss_heatmap: 0.7370, aux_task5.loss_bbox: 0.3321, loss: 19.2831, grad_norm: 36.3391
2025-04-15 20:55:16,978 - mmdet - INFO - Epoch [2][900/1104]	lr: 5.237e-05, eta: 5:20:42, time: 0.954, data_time: 0.009, memory: 12552, loss_cls: 0.7512, loss_bbox: 1.0743, d0.loss_cls: 0.7794, d0.loss_bbox: 1.3099, d1.loss_cls: 0.7531, d1.loss_bbox: 1.1578, d2.loss_cls: 0.7454, d2.loss_bbox: 1.1082, d3.loss_cls: 0.7458, d3.loss_bbox: 1.0927, d4.loss_cls: 0.7477, d4.loss_bbox: 1.0813, aux_task0.loss_heatmap: 0.9242, aux_task0.loss_bbox: 0.3339, aux_task1.loss_heatmap: 1.2142, aux_task1.loss_bbox: 0.3825, aux_task2.loss_heatmap: 1.4155, aux_task2.loss_bbox: 0.4219, aux_task3.loss_heatmap: 0.9839, aux_task3.loss_bbox: 0.3279, aux_task4.loss_heatmap: 0.7802, aux_task4.loss_bbox: 0.3348, aux_task5.loss_heatmap: 0.7729, aux_task5.loss_bbox: 0.3319, loss: 19.5705, grad_norm: 34.8139
2025-04-15 20:56:04,723 - mmdet - INFO - Epoch [2][950/1104]	lr: 5.369e-05, eta: 5:19:53, time: 0.955, data_time: 0.009, memory: 12552, loss_cls: 0.7334, loss_bbox: 1.0695, d0.loss_cls: 0.7642, d0.loss_bbox: 1.3064, d1.loss_cls: 0.7381, d1.loss_bbox: 1.1538, d2.loss_cls: 0.7318, d2.loss_bbox: 1.1048, d3.loss_cls: 0.7308, d3.loss_bbox: 1.0896, d4.loss_cls: 0.7312, d4.loss_bbox: 1.0776, aux_task0.loss_heatmap: 0.9374, aux_task0.loss_bbox: 0.3423, aux_task1.loss_heatmap: 1.1990, aux_task1.loss_bbox: 0.3835, aux_task2.loss_heatmap: 1.4127, aux_task2.loss_bbox: 0.4167, aux_task3.loss_heatmap: 0.9423, aux_task3.loss_bbox: 0.3238, aux_task4.loss_heatmap: 0.7454, aux_task4.loss_bbox: 0.3382, aux_task5.loss_heatmap: 0.7817, aux_task5.loss_bbox: 0.3336, loss: 19.3875, grad_norm: 30.6884
2025-04-15 20:56:51,902 - mmdet - INFO - Epoch [2][1000/1104]	lr: 5.504e-05, eta: 5:18:58, time: 0.944, data_time: 0.009, memory: 12552, loss_cls: 0.7260, loss_bbox: 1.0680, d0.loss_cls: 0.7580, d0.loss_bbox: 1.3030, d1.loss_cls: 0.7323, d1.loss_bbox: 1.1501, d2.loss_cls: 0.7265, d2.loss_bbox: 1.1034, d3.loss_cls: 0.7236, d3.loss_bbox: 1.0898, d4.loss_cls: 0.7234, d4.loss_bbox: 1.0770, aux_task0.loss_heatmap: 0.9029, aux_task0.loss_bbox: 0.3361, aux_task1.loss_heatmap: 1.2005, aux_task1.loss_bbox: 0.3818, aux_task2.loss_heatmap: 1.3895, aux_task2.loss_bbox: 0.4134, aux_task3.loss_heatmap: 0.9665, aux_task3.loss_bbox: 0.3284, aux_task4.loss_heatmap: 0.7326, aux_task4.loss_bbox: 0.3374, aux_task5.loss_heatmap: 0.7568, aux_task5.loss_bbox: 0.3355, loss: 19.2625, grad_norm: 34.6743
2025-04-15 20:57:39,451 - mmdet - INFO - Epoch [2][1050/1104]	lr: 5.641e-05, eta: 5:18:06, time: 0.951, data_time: 0.010, memory: 12552, loss_cls: 0.7212, loss_bbox: 1.0450, d0.loss_cls: 0.7503, d0.loss_bbox: 1.2857, d1.loss_cls: 0.7241, d1.loss_bbox: 1.1342, d2.loss_cls: 0.7178, d2.loss_bbox: 1.0856, d3.loss_cls: 0.7156, d3.loss_bbox: 1.0694, d4.loss_cls: 0.7161, d4.loss_bbox: 1.0543, aux_task0.loss_heatmap: 0.9087, aux_task0.loss_bbox: 0.3359, aux_task1.loss_heatmap: 1.1612, aux_task1.loss_bbox: 0.3857, aux_task2.loss_heatmap: 1.3801, aux_task2.loss_bbox: 0.4113, aux_task3.loss_heatmap: 0.9351, aux_task3.loss_bbox: 0.3221, aux_task4.loss_heatmap: 0.7545, aux_task4.loss_bbox: 0.3348, aux_task5.loss_heatmap: 0.7273, aux_task5.loss_bbox: 0.3275, loss: 19.0036, grad_norm: 33.3225
2025-04-15 20:58:26,988 - mmdet - INFO - Epoch [2][1100/1104]	lr: 5.781e-05, eta: 5:17:15, time: 0.951, data_time: 0.010, memory: 12552, loss_cls: 0.7059, loss_bbox: 1.0408, d0.loss_cls: 0.7413, d0.loss_bbox: 1.2806, d1.loss_cls: 0.7142, d1.loss_bbox: 1.1294, d2.loss_cls: 0.7068, d2.loss_bbox: 1.0815, d3.loss_cls: 0.7056, d3.loss_bbox: 1.0627, d4.loss_cls: 0.7046, d4.loss_bbox: 1.0478, aux_task0.loss_heatmap: 0.8810, aux_task0.loss_bbox: 0.3316, aux_task1.loss_heatmap: 1.1656, aux_task1.loss_bbox: 0.3829, aux_task2.loss_heatmap: 1.3885, aux_task2.loss_bbox: 0.4250, aux_task3.loss_heatmap: 0.9112, aux_task3.loss_bbox: 0.3242, aux_task4.loss_heatmap: 0.7499, aux_task4.loss_bbox: 0.3415, aux_task5.loss_heatmap: 0.7051, aux_task5.loss_bbox: 0.3273, loss: 18.8550, grad_norm: 33.1168
2025-04-15 20:58:31,221 - mmdet - INFO - Saving checkpoint at 2 epochs
2025-04-15 21:09:50,947 - mmdet - INFO - Exp name: DSSMambaGigantic_layer3_rope_drop01.py
2025-04-15 21:09:50,947 - mmdet - INFO - Epoch(val) [2][3010]	pts_bbox_NuScenes/car_AP_dist_0.5: 0.0004, pts_bbox_NuScenes/car_AP_dist_1.0: 0.1190, pts_bbox_NuScenes/car_AP_dist_2.0: 0.3041, pts_bbox_NuScenes/car_AP_dist_4.0: 0.4121, pts_bbox_NuScenes/car_trans_err: 0.8717, pts_bbox_NuScenes/car_scale_err: 0.2112, pts_bbox_NuScenes/car_orient_err: 1.4802, pts_bbox_NuScenes/car_vel_err: 1.3677, pts_bbox_NuScenes/car_attr_err: 0.4291, pts_bbox_NuScenes/mATE: 0.8524, pts_bbox_NuScenes/mASE: 0.3753, pts_bbox_NuScenes/mAOE: 1.4526, pts_bbox_NuScenes/mAVE: 1.1359, pts_bbox_NuScenes/mAAE: 0.4542, pts_bbox_NuScenes/truck_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/truck_AP_dist_1.0: 0.0003, pts_bbox_NuScenes/truck_AP_dist_2.0: 0.0128, pts_bbox_NuScenes/truck_AP_dist_4.0: 0.0365, pts_bbox_NuScenes/truck_trans_err: 0.9321, pts_bbox_NuScenes/truck_scale_err: 0.3287, pts_bbox_NuScenes/truck_orient_err: 1.5106, pts_bbox_NuScenes/truck_vel_err: 1.0296, pts_bbox_NuScenes/truck_attr_err: 0.4165, pts_bbox_NuScenes/construction_vehicle_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/construction_vehicle_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/construction_vehicle_AP_dist_2.0: 0.0000, pts_bbox_NuScenes/construction_vehicle_AP_dist_4.0: 0.0000, pts_bbox_NuScenes/construction_vehicle_trans_err: 1.1106, pts_bbox_NuScenes/construction_vehicle_scale_err: 0.5638, pts_bbox_NuScenes/construction_vehicle_orient_err: 1.6324, pts_bbox_NuScenes/construction_vehicle_vel_err: 0.1239, pts_bbox_NuScenes/construction_vehicle_attr_err: 0.3612, pts_bbox_NuScenes/bus_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/bus_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/bus_AP_dist_2.0: 0.0219, pts_bbox_NuScenes/bus_AP_dist_4.0: 0.0539, pts_bbox_NuScenes/bus_trans_err: 1.1649, pts_bbox_NuScenes/bus_scale_err: 0.2847, pts_bbox_NuScenes/bus_orient_err: 1.6403, pts_bbox_NuScenes/bus_vel_err: 2.6169, pts_bbox_NuScenes/bus_attr_err: 0.5941, pts_bbox_NuScenes/trailer_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/trailer_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/trailer_AP_dist_2.0: 0.0000, pts_bbox_NuScenes/trailer_AP_dist_4.0: 0.0006, pts_bbox_NuScenes/trailer_trans_err: 1.2819, pts_bbox_NuScenes/trailer_scale_err: 0.3105, pts_bbox_NuScenes/trailer_orient_err: 1.7543, pts_bbox_NuScenes/trailer_vel_err: 0.7379, pts_bbox_NuScenes/trailer_attr_err: 0.3122, pts_bbox_NuScenes/barrier_AP_dist_0.5: 0.0047, pts_bbox_NuScenes/barrier_AP_dist_1.0: 0.0663, pts_bbox_NuScenes/barrier_AP_dist_2.0: 0.1472, pts_bbox_NuScenes/barrier_AP_dist_4.0: 0.2293, pts_bbox_NuScenes/barrier_trans_err: 0.9112, pts_bbox_NuScenes/barrier_scale_err: 0.4234, pts_bbox_NuScenes/barrier_orient_err: 0.4841, pts_bbox_NuScenes/barrier_vel_err: nan, pts_bbox_NuScenes/barrier_attr_err: nan, pts_bbox_NuScenes/motorcycle_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/motorcycle_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/motorcycle_AP_dist_2.0: 0.0000, pts_bbox_NuScenes/motorcycle_AP_dist_4.0: 0.0000, pts_bbox_NuScenes/motorcycle_trans_err: 0.4764, pts_bbox_NuScenes/motorcycle_scale_err: 0.3220, pts_bbox_NuScenes/motorcycle_orient_err: 1.5846, pts_bbox_NuScenes/motorcycle_vel_err: 1.7333, pts_bbox_NuScenes/motorcycle_attr_err: 0.5717, pts_bbox_NuScenes/bicycle_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/bicycle_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/bicycle_AP_dist_2.0: 0.0000, pts_bbox_NuScenes/bicycle_AP_dist_4.0: 0.0000, pts_bbox_NuScenes/bicycle_trans_err: 0.6153, pts_bbox_NuScenes/bicycle_scale_err: 0.3882, pts_bbox_NuScenes/bicycle_orient_err: 1.5941, pts_bbox_NuScenes/bicycle_vel_err: 0.5492, pts_bbox_NuScenes/bicycle_attr_err: 0.1514, pts_bbox_NuScenes/pedestrian_AP_dist_0.5: 0.0889, pts_bbox_NuScenes/pedestrian_AP_dist_1.0: 0.2668, pts_bbox_NuScenes/pedestrian_AP_dist_2.0: 0.3333, pts_bbox_NuScenes/pedestrian_AP_dist_4.0: 0.3793, pts_bbox_NuScenes/pedestrian_trans_err: 0.5537, pts_bbox_NuScenes/pedestrian_scale_err: 0.3296, pts_bbox_NuScenes/pedestrian_orient_err: 1.3929, pts_bbox_NuScenes/pedestrian_vel_err: 0.9284, pts_bbox_NuScenes/pedestrian_attr_err: 0.7970, pts_bbox_NuScenes/traffic_cone_AP_dist_0.5: 0.0135, pts_bbox_NuScenes/traffic_cone_AP_dist_1.0: 0.0419, pts_bbox_NuScenes/traffic_cone_AP_dist_2.0: 0.0673, pts_bbox_NuScenes/traffic_cone_AP_dist_4.0: 0.1235, pts_bbox_NuScenes/traffic_cone_trans_err: 0.6067, pts_bbox_NuScenes/traffic_cone_scale_err: 0.5911, pts_bbox_NuScenes/traffic_cone_orient_err: nan, pts_bbox_NuScenes/traffic_cone_vel_err: nan, pts_bbox_NuScenes/traffic_cone_attr_err: nan, pts_bbox_NuScenes/NDS: 0.1659, pts_bbox_NuScenes/mAP: 0.0681
2025-04-15 21:10:44,257 - mmdet - INFO - Epoch [3][50/1104]	lr: 5.935e-05, eta: 5:16:29, time: 1.047, data_time: 0.101, memory: 12552, loss_cls: 0.7155, loss_bbox: 1.0469, d0.loss_cls: 0.7497, d0.loss_bbox: 1.2756, d1.loss_cls: 0.7230, d1.loss_bbox: 1.1200, d2.loss_cls: 0.7146, d2.loss_bbox: 1.0756, d3.loss_cls: 0.7116, d3.loss_bbox: 1.0599, d4.loss_cls: 0.7117, d4.loss_bbox: 1.0483, aux_task0.loss_heatmap: 0.9165, aux_task0.loss_bbox: 0.3332, aux_task1.loss_heatmap: 1.1519, aux_task1.loss_bbox: 0.3727, aux_task2.loss_heatmap: 1.3758, aux_task2.loss_bbox: 0.4160, aux_task3.loss_heatmap: 0.9360, aux_task3.loss_bbox: 0.3247, aux_task4.loss_heatmap: 0.7382, aux_task4.loss_bbox: 0.3346, aux_task5.loss_heatmap: 0.7184, aux_task5.loss_bbox: 0.3302, loss: 18.9011, grad_norm: 36.1950
2025-04-15 21:11:31,566 - mmdet - INFO - Epoch [3][100/1104]	lr: 6.080e-05, eta: 5:15:36, time: 0.946, data_time: 0.009, memory: 12552, loss_cls: 0.7062, loss_bbox: 1.0302, d0.loss_cls: 0.7381, d0.loss_bbox: 1.2713, d1.loss_cls: 0.7153, d1.loss_bbox: 1.1133, d2.loss_cls: 0.7061, d2.loss_bbox: 1.0688, d3.loss_cls: 0.7039, d3.loss_bbox: 1.0490, d4.loss_cls: 0.7036, d4.loss_bbox: 1.0355, aux_task0.loss_heatmap: 0.8911, aux_task0.loss_bbox: 0.3358, aux_task1.loss_heatmap: 1.1690, aux_task1.loss_bbox: 0.3770, aux_task2.loss_heatmap: 1.3537, aux_task2.loss_bbox: 0.4078, aux_task3.loss_heatmap: 0.9034, aux_task3.loss_bbox: 0.3270, aux_task4.loss_heatmap: 0.7172, aux_task4.loss_bbox: 0.3370, aux_task5.loss_heatmap: 0.6980, aux_task5.loss_bbox: 0.3261, loss: 18.6843, grad_norm: 34.4625
2025-04-15 21:12:18,686 - mmdet - INFO - Epoch [3][150/1104]	lr: 6.228e-05, eta: 5:14:42, time: 0.942, data_time: 0.009, memory: 12552, loss_cls: 0.6976, loss_bbox: 1.0160, d0.loss_cls: 0.7281, d0.loss_bbox: 1.2432, d1.loss_cls: 0.7005, d1.loss_bbox: 1.0976, d2.loss_cls: 0.6942, d2.loss_bbox: 1.0520, d3.loss_cls: 0.6928, d3.loss_bbox: 1.0314, d4.loss_cls: 0.6935, d4.loss_bbox: 1.0213, aux_task0.loss_heatmap: 0.8658, aux_task0.loss_bbox: 0.3339, aux_task1.loss_heatmap: 1.1348, aux_task1.loss_bbox: 0.3755, aux_task2.loss_heatmap: 1.3477, aux_task2.loss_bbox: 0.4106, aux_task3.loss_heatmap: 0.8958, aux_task3.loss_bbox: 0.3292, aux_task4.loss_heatmap: 0.7028, aux_task4.loss_bbox: 0.3324, aux_task5.loss_heatmap: 0.6777, aux_task5.loss_bbox: 0.3280, loss: 18.4024, grad_norm: 35.8142
2025-04-15 21:13:06,243 - mmdet - INFO - Epoch [3][200/1104]	lr: 6.378e-05, eta: 5:13:51, time: 0.951, data_time: 0.012, memory: 12552, loss_cls: 0.7046, loss_bbox: 1.0313, d0.loss_cls: 0.7380, d0.loss_bbox: 1.2750, d1.loss_cls: 0.7127, d1.loss_bbox: 1.1172, d2.loss_cls: 0.7057, d2.loss_bbox: 1.0699, d3.loss_cls: 0.7021, d3.loss_bbox: 1.0498, d4.loss_cls: 0.7019, d4.loss_bbox: 1.0367, aux_task0.loss_heatmap: 0.8898, aux_task0.loss_bbox: 0.3435, aux_task1.loss_heatmap: 1.1349, aux_task1.loss_bbox: 0.3852, aux_task2.loss_heatmap: 1.3152, aux_task2.loss_bbox: 0.4161, aux_task3.loss_heatmap: 0.9292, aux_task3.loss_bbox: 0.3230, aux_task4.loss_heatmap: 0.7087, aux_task4.loss_bbox: 0.3330, aux_task5.loss_heatmap: 0.7028, aux_task5.loss_bbox: 0.3329, loss: 18.6594, grad_norm: 34.7038
2025-04-15 21:13:53,740 - mmdet - INFO - Epoch [3][250/1104]	lr: 6.530e-05, eta: 5:13:01, time: 0.950, data_time: 0.010, memory: 12552, loss_cls: 0.6931, loss_bbox: 1.0192, d0.loss_cls: 0.7287, d0.loss_bbox: 1.2509, d1.loss_cls: 0.7006, d1.loss_bbox: 1.0969, d2.loss_cls: 0.6942, d2.loss_bbox: 1.0512, d3.loss_cls: 0.6902, d3.loss_bbox: 1.0310, d4.loss_cls: 0.6913, d4.loss_bbox: 1.0213, aux_task0.loss_heatmap: 0.8930, aux_task0.loss_bbox: 0.3318, aux_task1.loss_heatmap: 1.1244, aux_task1.loss_bbox: 0.3795, aux_task2.loss_heatmap: 1.3270, aux_task2.loss_bbox: 0.4106, aux_task3.loss_heatmap: 0.8874, aux_task3.loss_bbox: 0.3217, aux_task4.loss_heatmap: 0.7294, aux_task4.loss_bbox: 0.3363, aux_task5.loss_heatmap: 0.6969, aux_task5.loss_bbox: 0.3268, loss: 18.4336, grad_norm: 36.3349
2025-04-15 21:14:41,283 - mmdet - INFO - Epoch [3][300/1104]	lr: 6.684e-05, eta: 5:12:10, time: 0.951, data_time: 0.008, memory: 12552, loss_cls: 0.6906, loss_bbox: 1.0017, d0.loss_cls: 0.7237, d0.loss_bbox: 1.2356, d1.loss_cls: 0.6979, d1.loss_bbox: 1.0843, d2.loss_cls: 0.6910, d2.loss_bbox: 1.0374, d3.loss_cls: 0.6878, d3.loss_bbox: 1.0179, d4.loss_cls: 0.6885, d4.loss_bbox: 1.0069, aux_task0.loss_heatmap: 0.8383, aux_task0.loss_bbox: 0.3264, aux_task1.loss_heatmap: 1.1420, aux_task1.loss_bbox: 0.3775, aux_task2.loss_heatmap: 1.2936, aux_task2.loss_bbox: 0.4113, aux_task3.loss_heatmap: 0.9355, aux_task3.loss_bbox: 0.3160, aux_task4.loss_heatmap: 0.7113, aux_task4.loss_bbox: 0.3249, aux_task5.loss_heatmap: 0.6971, aux_task5.loss_bbox: 0.3241, loss: 18.2614, grad_norm: 33.3910
2025-04-15 21:15:28,411 - mmdet - INFO - Epoch [3][350/1104]	lr: 6.841e-05, eta: 5:11:17, time: 0.943, data_time: 0.009, memory: 12552, loss_cls: 0.7051, loss_bbox: 1.0107, d0.loss_cls: 0.7323, d0.loss_bbox: 1.2407, d1.loss_cls: 0.7021, d1.loss_bbox: 1.0923, d2.loss_cls: 0.6980, d2.loss_bbox: 1.0426, d3.loss_cls: 0.6978, d3.loss_bbox: 1.0283, d4.loss_cls: 0.6993, d4.loss_bbox: 1.0169, aux_task0.loss_heatmap: 0.8594, aux_task0.loss_bbox: 0.3280, aux_task1.loss_heatmap: 1.1339, aux_task1.loss_bbox: 0.3766, aux_task2.loss_heatmap: 1.3373, aux_task2.loss_bbox: 0.4174, aux_task3.loss_heatmap: 0.9188, aux_task3.loss_bbox: 0.3191, aux_task4.loss_heatmap: 0.7179, aux_task4.loss_bbox: 0.3344, aux_task5.loss_heatmap: 0.6708, aux_task5.loss_bbox: 0.3185, loss: 18.3983, grad_norm: 35.6631
2025-04-15 21:16:15,738 - mmdet - INFO - Epoch [3][400/1104]	lr: 7.000e-05, eta: 5:10:25, time: 0.947, data_time: 0.009, memory: 12552, loss_cls: 0.6895, loss_bbox: 1.0073, d0.loss_cls: 0.7200, d0.loss_bbox: 1.2364, d1.loss_cls: 0.6932, d1.loss_bbox: 1.0873, d2.loss_cls: 0.6876, d2.loss_bbox: 1.0386, d3.loss_cls: 0.6860, d3.loss_bbox: 1.0228, d4.loss_cls: 0.6862, d4.loss_bbox: 1.0114, aux_task0.loss_heatmap: 0.8449, aux_task0.loss_bbox: 0.3252, aux_task1.loss_heatmap: 1.1138, aux_task1.loss_bbox: 0.3714, aux_task2.loss_heatmap: 1.3129, aux_task2.loss_bbox: 0.3974, aux_task3.loss_heatmap: 0.8733, aux_task3.loss_bbox: 0.3212, aux_task4.loss_heatmap: 0.6844, aux_task4.loss_bbox: 0.3339, aux_task5.loss_heatmap: 0.6942, aux_task5.loss_bbox: 0.3210, loss: 18.1597, grad_norm: 34.7609
2025-04-15 21:17:03,074 - mmdet - INFO - Epoch [3][450/1104]	lr: 7.161e-05, eta: 5:09:34, time: 0.947, data_time: 0.009, memory: 12552, loss_cls: 0.6838, loss_bbox: 0.9955, d0.loss_cls: 0.7152, d0.loss_bbox: 1.2253, d1.loss_cls: 0.6897, d1.loss_bbox: 1.0687, d2.loss_cls: 0.6815, d2.loss_bbox: 1.0213, d3.loss_cls: 0.6795, d3.loss_bbox: 1.0074, d4.loss_cls: 0.6806, d4.loss_bbox: 1.0002, aux_task0.loss_heatmap: 0.8562, aux_task0.loss_bbox: 0.3260, aux_task1.loss_heatmap: 1.1141, aux_task1.loss_bbox: 0.3747, aux_task2.loss_heatmap: 1.3119, aux_task2.loss_bbox: 0.4083, aux_task3.loss_heatmap: 0.8939, aux_task3.loss_bbox: 0.3102, aux_task4.loss_heatmap: 0.7236, aux_task4.loss_bbox: 0.3318, aux_task5.loss_heatmap: 0.6810, aux_task5.loss_bbox: 0.3220, loss: 18.1025, grad_norm: 37.1126
2025-04-15 21:17:50,676 - mmdet - INFO - Epoch [3][500/1104]	lr: 7.325e-05, eta: 5:08:45, time: 0.952, data_time: 0.008, memory: 12552, loss_cls: 0.6795, loss_bbox: 0.9885, d0.loss_cls: 0.7111, d0.loss_bbox: 1.2194, d1.loss_cls: 0.6857, d1.loss_bbox: 1.0595, d2.loss_cls: 0.6774, d2.loss_bbox: 1.0153, d3.loss_cls: 0.6769, d3.loss_bbox: 1.0007, d4.loss_cls: 0.6763, d4.loss_bbox: 0.9927, aux_task0.loss_heatmap: 0.8740, aux_task0.loss_bbox: 0.3235, aux_task1.loss_heatmap: 1.1190, aux_task1.loss_bbox: 0.3739, aux_task2.loss_heatmap: 1.2560, aux_task2.loss_bbox: 0.4002, aux_task3.loss_heatmap: 0.8783, aux_task3.loss_bbox: 0.3160, aux_task4.loss_heatmap: 0.6881, aux_task4.loss_bbox: 0.3289, aux_task5.loss_heatmap: 0.6661, aux_task5.loss_bbox: 0.3262, loss: 17.9331, grad_norm: 35.0886
2025-04-15 21:18:38,233 - mmdet - INFO - Epoch [3][550/1104]	lr: 7.490e-05, eta: 5:07:55, time: 0.951, data_time: 0.009, memory: 12552, loss_cls: 0.6653, loss_bbox: 0.9963, d0.loss_cls: 0.7009, d0.loss_bbox: 1.2244, d1.loss_cls: 0.6741, d1.loss_bbox: 1.0664, d2.loss_cls: 0.6651, d2.loss_bbox: 1.0212, d3.loss_cls: 0.6631, d3.loss_bbox: 1.0091, d4.loss_cls: 0.6627, d4.loss_bbox: 1.0004, aux_task0.loss_heatmap: 0.8659, aux_task0.loss_bbox: 0.3288, aux_task1.loss_heatmap: 1.0894, aux_task1.loss_bbox: 0.3724, aux_task2.loss_heatmap: 1.3001, aux_task2.loss_bbox: 0.4073, aux_task3.loss_heatmap: 0.8214, aux_task3.loss_bbox: 0.3185, aux_task4.loss_heatmap: 0.6842, aux_task4.loss_bbox: 0.3325, aux_task5.loss_heatmap: 0.6368, aux_task5.loss_bbox: 0.3231, loss: 17.8293, grad_norm: 35.0032
2025-04-15 21:19:25,528 - mmdet - INFO - Epoch [3][600/1104]	lr: 7.657e-05, eta: 5:07:04, time: 0.946, data_time: 0.010, memory: 12552, loss_cls: 0.6688, loss_bbox: 0.9923, d0.loss_cls: 0.7010, d0.loss_bbox: 1.2070, d1.loss_cls: 0.6757, d1.loss_bbox: 1.0590, d2.loss_cls: 0.6697, d2.loss_bbox: 1.0157, d3.loss_cls: 0.6683, d3.loss_bbox: 1.0037, d4.loss_cls: 0.6669, d4.loss_bbox: 0.9968, aux_task0.loss_heatmap: 0.8395, aux_task0.loss_bbox: 0.3202, aux_task1.loss_heatmap: 1.0993, aux_task1.loss_bbox: 0.3722, aux_task2.loss_heatmap: 1.2594, aux_task2.loss_bbox: 0.4107, aux_task3.loss_heatmap: 0.9067, aux_task3.loss_bbox: 0.3152, aux_task4.loss_heatmap: 0.6623, aux_task4.loss_bbox: 0.3268, aux_task5.loss_heatmap: 0.6637, aux_task5.loss_bbox: 0.3210, loss: 17.8220, grad_norm: 37.8416
2025-04-15 21:20:12,776 - mmdet - INFO - Epoch [3][650/1104]	lr: 7.826e-05, eta: 5:06:12, time: 0.945, data_time: 0.009, memory: 12552, loss_cls: 0.6835, loss_bbox: 1.0018, d0.loss_cls: 0.7166, d0.loss_bbox: 1.2171, d1.loss_cls: 0.6898, d1.loss_bbox: 1.0659, d2.loss_cls: 0.6827, d2.loss_bbox: 1.0222, d3.loss_cls: 0.6801, d3.loss_bbox: 1.0127, d4.loss_cls: 0.6803, d4.loss_bbox: 1.0042, aux_task0.loss_heatmap: 0.8359, aux_task0.loss_bbox: 0.3279, aux_task1.loss_heatmap: 1.0607, aux_task1.loss_bbox: 0.3670, aux_task2.loss_heatmap: 1.3054, aux_task2.loss_bbox: 0.4079, aux_task3.loss_heatmap: 0.9504, aux_task3.loss_bbox: 0.3127, aux_task4.loss_heatmap: 0.7278, aux_task4.loss_bbox: 0.3313, aux_task5.loss_heatmap: 0.6688, aux_task5.loss_bbox: 0.3208, loss: 18.0734, grad_norm: 35.5105
2025-04-15 21:21:00,376 - mmdet - INFO - Epoch [3][700/1104]	lr: 7.997e-05, eta: 5:05:23, time: 0.952, data_time: 0.008, memory: 12552, loss_cls: 0.6690, loss_bbox: 0.9781, d0.loss_cls: 0.7029, d0.loss_bbox: 1.1967, d1.loss_cls: 0.6718, d1.loss_bbox: 1.0424, d2.loss_cls: 0.6653, d2.loss_bbox: 1.0028, d3.loss_cls: 0.6617, d3.loss_bbox: 0.9925, d4.loss_cls: 0.6637, d4.loss_bbox: 0.9828, aux_task0.loss_heatmap: 0.8376, aux_task0.loss_bbox: 0.3259, aux_task1.loss_heatmap: 1.0768, aux_task1.loss_bbox: 0.3705, aux_task2.loss_heatmap: 1.2595, aux_task2.loss_bbox: 0.4028, aux_task3.loss_heatmap: 0.8630, aux_task3.loss_bbox: 0.3169, aux_task4.loss_heatmap: 0.6674, aux_task4.loss_bbox: 0.3283, aux_task5.loss_heatmap: 0.6667, aux_task5.loss_bbox: 0.3193, loss: 17.6644, grad_norm: 34.4678
2025-04-15 21:21:47,850 - mmdet - INFO - Epoch [3][750/1104]	lr: 8.170e-05, eta: 5:04:33, time: 0.949, data_time: 0.009, memory: 12552, loss_cls: 0.6622, loss_bbox: 0.9804, d0.loss_cls: 0.6963, d0.loss_bbox: 1.1979, d1.loss_cls: 0.6654, d1.loss_bbox: 1.0450, d2.loss_cls: 0.6615, d2.loss_bbox: 1.0017, d3.loss_cls: 0.6589, d3.loss_bbox: 0.9907, d4.loss_cls: 0.6593, d4.loss_bbox: 0.9834, aux_task0.loss_heatmap: 0.8301, aux_task0.loss_bbox: 0.3218, aux_task1.loss_heatmap: 1.0696, aux_task1.loss_bbox: 0.3683, aux_task2.loss_heatmap: 1.2515, aux_task2.loss_bbox: 0.4057, aux_task3.loss_heatmap: 0.8618, aux_task3.loss_bbox: 0.3087, aux_task4.loss_heatmap: 0.6748, aux_task4.loss_bbox: 0.3309, aux_task5.loss_heatmap: 0.6686, aux_task5.loss_bbox: 0.3200, loss: 17.6145, grad_norm: 37.4591
2025-04-15 21:22:35,232 - mmdet - INFO - Epoch [3][800/1104]	lr: 8.345e-05, eta: 5:03:43, time: 0.948, data_time: 0.010, memory: 12552, loss_cls: 0.6588, loss_bbox: 0.9734, d0.loss_cls: 0.6926, d0.loss_bbox: 1.1870, d1.loss_cls: 0.6635, d1.loss_bbox: 1.0372, d2.loss_cls: 0.6574, d2.loss_bbox: 0.9978, d3.loss_cls: 0.6556, d3.loss_bbox: 0.9873, d4.loss_cls: 0.6553, d4.loss_bbox: 0.9780, aux_task0.loss_heatmap: 0.8057, aux_task0.loss_bbox: 0.3201, aux_task1.loss_heatmap: 1.0893, aux_task1.loss_bbox: 0.3688, aux_task2.loss_heatmap: 1.2672, aux_task2.loss_bbox: 0.3983, aux_task3.loss_heatmap: 0.8371, aux_task3.loss_bbox: 0.3166, aux_task4.loss_heatmap: 0.6857, aux_task4.loss_bbox: 0.3233, aux_task5.loss_heatmap: 0.6548, aux_task5.loss_bbox: 0.3159, loss: 17.5268, grad_norm: 31.9968
2025-04-15 21:23:22,285 - mmdet - INFO - Epoch [3][850/1104]	lr: 8.521e-05, eta: 5:02:51, time: 0.941, data_time: 0.008, memory: 12552, loss_cls: 0.6616, loss_bbox: 0.9730, d0.loss_cls: 0.6921, d0.loss_bbox: 1.1893, d1.loss_cls: 0.6665, d1.loss_bbox: 1.0336, d2.loss_cls: 0.6596, d2.loss_bbox: 0.9926, d3.loss_cls: 0.6575, d3.loss_bbox: 0.9807, d4.loss_cls: 0.6577, d4.loss_bbox: 0.9743, aux_task0.loss_heatmap: 0.8126, aux_task0.loss_bbox: 0.3196, aux_task1.loss_heatmap: 1.0752, aux_task1.loss_bbox: 0.3713, aux_task2.loss_heatmap: 1.2282, aux_task2.loss_bbox: 0.4029, aux_task3.loss_heatmap: 0.8540, aux_task3.loss_bbox: 0.3169, aux_task4.loss_heatmap: 0.6677, aux_task4.loss_bbox: 0.3241, aux_task5.loss_heatmap: 0.6371, aux_task5.loss_bbox: 0.3155, loss: 17.4634, grad_norm: 34.5663
2025-04-15 21:24:09,757 - mmdet - INFO - Epoch [3][900/1104]	lr: 8.699e-05, eta: 5:02:01, time: 0.949, data_time: 0.010, memory: 12552, loss_cls: 0.6694, loss_bbox: 0.9813, d0.loss_cls: 0.7028, d0.loss_bbox: 1.1888, d1.loss_cls: 0.6732, d1.loss_bbox: 1.0418, d2.loss_cls: 0.6680, d2.loss_bbox: 1.0033, d3.loss_cls: 0.6635, d3.loss_bbox: 0.9936, d4.loss_cls: 0.6660, d4.loss_bbox: 0.9862, aux_task0.loss_heatmap: 0.8333, aux_task0.loss_bbox: 0.3201, aux_task1.loss_heatmap: 1.1000, aux_task1.loss_bbox: 0.3652, aux_task2.loss_heatmap: 1.2391, aux_task2.loss_bbox: 0.4053, aux_task3.loss_heatmap: 0.8821, aux_task3.loss_bbox: 0.3150, aux_task4.loss_heatmap: 0.6953, aux_task4.loss_bbox: 0.3206, aux_task5.loss_heatmap: 0.6382, aux_task5.loss_bbox: 0.3171, loss: 17.6690, grad_norm: 32.4673
2025-04-15 21:24:56,899 - mmdet - INFO - Epoch [3][950/1104]	lr: 8.879e-05, eta: 5:01:10, time: 0.943, data_time: 0.009, memory: 12552, loss_cls: 0.6538, loss_bbox: 0.9781, d0.loss_cls: 0.6858, d0.loss_bbox: 1.1879, d1.loss_cls: 0.6564, d1.loss_bbox: 1.0389, d2.loss_cls: 0.6493, d2.loss_bbox: 1.0024, d3.loss_cls: 0.6504, d3.loss_bbox: 0.9900, d4.loss_cls: 0.6495, d4.loss_bbox: 0.9830, aux_task0.loss_heatmap: 0.8332, aux_task0.loss_bbox: 0.3170, aux_task1.loss_heatmap: 1.0911, aux_task1.loss_bbox: 0.3685, aux_task2.loss_heatmap: 1.2112, aux_task2.loss_bbox: 0.3954, aux_task3.loss_heatmap: 0.8047, aux_task3.loss_bbox: 0.3120, aux_task4.loss_heatmap: 0.6611, aux_task4.loss_bbox: 0.3234, aux_task5.loss_heatmap: 0.6213, aux_task5.loss_bbox: 0.3209, loss: 17.3851, grad_norm: 34.8297
2025-04-15 21:25:44,372 - mmdet - INFO - Epoch [3][1000/1104]	lr: 9.060e-05, eta: 5:00:20, time: 0.949, data_time: 0.009, memory: 12552, loss_cls: 0.6468, loss_bbox: 0.9716, d0.loss_cls: 0.6781, d0.loss_bbox: 1.1736, d1.loss_cls: 0.6502, d1.loss_bbox: 1.0321, d2.loss_cls: 0.6444, d2.loss_bbox: 0.9962, d3.loss_cls: 0.6430, d3.loss_bbox: 0.9844, d4.loss_cls: 0.6440, d4.loss_bbox: 0.9758, aux_task0.loss_heatmap: 0.8106, aux_task0.loss_bbox: 0.3199, aux_task1.loss_heatmap: 1.0885, aux_task1.loss_bbox: 0.3685, aux_task2.loss_heatmap: 1.1992, aux_task2.loss_bbox: 0.3989, aux_task3.loss_heatmap: 0.7941, aux_task3.loss_bbox: 0.3098, aux_task4.loss_heatmap: 0.6514, aux_task4.loss_bbox: 0.3257, aux_task5.loss_heatmap: 0.6223, aux_task5.loss_bbox: 0.3199, loss: 17.2489, grad_norm: 35.1926
2025-04-15 21:26:31,881 - mmdet - INFO - Epoch [3][1050/1104]	lr: 9.242e-05, eta: 4:59:31, time: 0.950, data_time: 0.009, memory: 12552, loss_cls: 0.6552, loss_bbox: 0.9744, d0.loss_cls: 0.6858, d0.loss_bbox: 1.1803, d1.loss_cls: 0.6571, d1.loss_bbox: 1.0327, d2.loss_cls: 0.6516, d2.loss_bbox: 0.9960, d3.loss_cls: 0.6517, d3.loss_bbox: 0.9858, d4.loss_cls: 0.6511, d4.loss_bbox: 0.9784, aux_task0.loss_heatmap: 0.8300, aux_task0.loss_bbox: 0.3204, aux_task1.loss_heatmap: 1.0732, aux_task1.loss_bbox: 0.3735, aux_task2.loss_heatmap: 1.1995, aux_task2.loss_bbox: 0.3903, aux_task3.loss_heatmap: 0.8658, aux_task3.loss_bbox: 0.3082, aux_task4.loss_heatmap: 0.6676, aux_task4.loss_bbox: 0.3236, aux_task5.loss_heatmap: 0.6378, aux_task5.loss_bbox: 0.3185, loss: 17.4085, grad_norm: 36.8710
2025-04-15 21:27:19,628 - mmdet - INFO - Epoch [3][1100/1104]	lr: 9.426e-05, eta: 4:58:43, time: 0.955, data_time: 0.010, memory: 12552, loss_cls: 0.6344, loss_bbox: 0.9694, d0.loss_cls: 0.6698, d0.loss_bbox: 1.1763, d1.loss_cls: 0.6392, d1.loss_bbox: 1.0240, d2.loss_cls: 0.6335, d2.loss_bbox: 0.9895, d3.loss_cls: 0.6305, d3.loss_bbox: 0.9789, d4.loss_cls: 0.6327, d4.loss_bbox: 0.9718, aux_task0.loss_heatmap: 0.7886, aux_task0.loss_bbox: 0.3145, aux_task1.loss_heatmap: 1.0530, aux_task1.loss_bbox: 0.3662, aux_task2.loss_heatmap: 1.1872, aux_task2.loss_bbox: 0.3992, aux_task3.loss_heatmap: 0.8442, aux_task3.loss_bbox: 0.3149, aux_task4.loss_heatmap: 0.6564, aux_task4.loss_bbox: 0.3274, aux_task5.loss_heatmap: 0.6148, aux_task5.loss_bbox: 0.3115, loss: 17.1278, grad_norm: 36.2975
2025-04-15 21:27:23,875 - mmdet - INFO - Saving checkpoint at 3 epochs
2025-04-15 21:38:56,032 - mmdet - INFO - Exp name: DSSMambaGigantic_layer3_rope_drop01.py
2025-04-15 21:38:56,032 - mmdet - INFO - Epoch(val) [3][3010]	pts_bbox_NuScenes/car_AP_dist_0.5: 0.0480, pts_bbox_NuScenes/car_AP_dist_1.0: 0.2555, pts_bbox_NuScenes/car_AP_dist_2.0: 0.3974, pts_bbox_NuScenes/car_AP_dist_4.0: 0.4946, pts_bbox_NuScenes/car_trans_err: 0.6572, pts_bbox_NuScenes/car_scale_err: 0.1874, pts_bbox_NuScenes/car_orient_err: 1.4864, pts_bbox_NuScenes/car_vel_err: 1.2819, pts_bbox_NuScenes/car_attr_err: 0.4284, pts_bbox_NuScenes/mATE: 0.7531, pts_bbox_NuScenes/mASE: 0.3435, pts_bbox_NuScenes/mAOE: 1.4917, pts_bbox_NuScenes/mAVE: 1.1652, pts_bbox_NuScenes/mAAE: 0.4560, pts_bbox_NuScenes/truck_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/truck_AP_dist_1.0: 0.0133, pts_bbox_NuScenes/truck_AP_dist_2.0: 0.0609, pts_bbox_NuScenes/truck_AP_dist_4.0: 0.0930, pts_bbox_NuScenes/truck_trans_err: 0.8896, pts_bbox_NuScenes/truck_scale_err: 0.3112, pts_bbox_NuScenes/truck_orient_err: 1.4602, pts_bbox_NuScenes/truck_vel_err: 0.8824, pts_bbox_NuScenes/truck_attr_err: 0.3871, pts_bbox_NuScenes/construction_vehicle_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/construction_vehicle_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/construction_vehicle_AP_dist_2.0: 0.0001, pts_bbox_NuScenes/construction_vehicle_AP_dist_4.0: 0.0006, pts_bbox_NuScenes/construction_vehicle_trans_err: 0.9155, pts_bbox_NuScenes/construction_vehicle_scale_err: 0.4999, pts_bbox_NuScenes/construction_vehicle_orient_err: 1.6809, pts_bbox_NuScenes/construction_vehicle_vel_err: 0.1274, pts_bbox_NuScenes/construction_vehicle_attr_err: 0.3587, pts_bbox_NuScenes/bus_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/bus_AP_dist_1.0: 0.0031, pts_bbox_NuScenes/bus_AP_dist_2.0: 0.0681, pts_bbox_NuScenes/bus_AP_dist_4.0: 0.1267, pts_bbox_NuScenes/bus_trans_err: 1.0734, pts_bbox_NuScenes/bus_scale_err: 0.2893, pts_bbox_NuScenes/bus_orient_err: 1.7598, pts_bbox_NuScenes/bus_vel_err: 2.6464, pts_bbox_NuScenes/bus_attr_err: 0.6501, pts_bbox_NuScenes/trailer_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/trailer_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/trailer_AP_dist_2.0: 0.0025, pts_bbox_NuScenes/trailer_AP_dist_4.0: 0.0192, pts_bbox_NuScenes/trailer_trans_err: 1.1433, pts_bbox_NuScenes/trailer_scale_err: 0.3285, pts_bbox_NuScenes/trailer_orient_err: 1.7135, pts_bbox_NuScenes/trailer_vel_err: 0.6680, pts_bbox_NuScenes/trailer_attr_err: 0.2693, pts_bbox_NuScenes/barrier_AP_dist_0.5: 0.0224, pts_bbox_NuScenes/barrier_AP_dist_1.0: 0.1143, pts_bbox_NuScenes/barrier_AP_dist_2.0: 0.1995, pts_bbox_NuScenes/barrier_AP_dist_4.0: 0.2845, pts_bbox_NuScenes/barrier_trans_err: 0.8719, pts_bbox_NuScenes/barrier_scale_err: 0.3944, pts_bbox_NuScenes/barrier_orient_err: 0.6893, pts_bbox_NuScenes/barrier_vel_err: nan, pts_bbox_NuScenes/barrier_attr_err: nan, pts_bbox_NuScenes/motorcycle_AP_dist_0.5: 0.0021, pts_bbox_NuScenes/motorcycle_AP_dist_1.0: 0.0092, pts_bbox_NuScenes/motorcycle_AP_dist_2.0: 0.0170, pts_bbox_NuScenes/motorcycle_AP_dist_4.0: 0.0201, pts_bbox_NuScenes/motorcycle_trans_err: 0.4804, pts_bbox_NuScenes/motorcycle_scale_err: 0.3285, pts_bbox_NuScenes/motorcycle_orient_err: 1.6879, pts_bbox_NuScenes/motorcycle_vel_err: 1.9354, pts_bbox_NuScenes/motorcycle_attr_err: 0.5339, pts_bbox_NuScenes/bicycle_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/bicycle_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/bicycle_AP_dist_2.0: 0.0000, pts_bbox_NuScenes/bicycle_AP_dist_4.0: 0.0000, pts_bbox_NuScenes/bicycle_trans_err: 0.5258, pts_bbox_NuScenes/bicycle_scale_err: 0.3472, pts_bbox_NuScenes/bicycle_orient_err: 1.5189, pts_bbox_NuScenes/bicycle_vel_err: 0.8201, pts_bbox_NuScenes/bicycle_attr_err: 0.2099, pts_bbox_NuScenes/pedestrian_AP_dist_0.5: 0.1597, pts_bbox_NuScenes/pedestrian_AP_dist_1.0: 0.3596, pts_bbox_NuScenes/pedestrian_AP_dist_2.0: 0.4442, pts_bbox_NuScenes/pedestrian_AP_dist_4.0: 0.4984, pts_bbox_NuScenes/pedestrian_trans_err: 0.5442, pts_bbox_NuScenes/pedestrian_scale_err: 0.2947, pts_bbox_NuScenes/pedestrian_orient_err: 1.4281, pts_bbox_NuScenes/pedestrian_vel_err: 0.9598, pts_bbox_NuScenes/pedestrian_attr_err: 0.8109, pts_bbox_NuScenes/traffic_cone_AP_dist_0.5: 0.0727, pts_bbox_NuScenes/traffic_cone_AP_dist_1.0: 0.1002, pts_bbox_NuScenes/traffic_cone_AP_dist_2.0: 0.1251, pts_bbox_NuScenes/traffic_cone_AP_dist_4.0: 0.2069, pts_bbox_NuScenes/traffic_cone_trans_err: 0.4295, pts_bbox_NuScenes/traffic_cone_scale_err: 0.4536, pts_bbox_NuScenes/traffic_cone_orient_err: nan, pts_bbox_NuScenes/traffic_cone_vel_err: nan, pts_bbox_NuScenes/traffic_cone_attr_err: nan, pts_bbox_NuScenes/NDS: 0.1975, pts_bbox_NuScenes/mAP: 0.1055
2025-04-15 21:39:51,695 - mmdet - INFO - Epoch [4][50/1104]	lr: 9.627e-05, eta: 4:58:08, time: 1.088, data_time: 0.103, memory: 12552, loss_cls: 0.6403, loss_bbox: 0.9628, d0.loss_cls: 0.6772, d0.loss_bbox: 1.1727, d1.loss_cls: 0.6479, d1.loss_bbox: 1.0203, d2.loss_cls: 0.6399, d2.loss_bbox: 0.9834, d3.loss_cls: 0.6373, d3.loss_bbox: 0.9729, d4.loss_cls: 0.6378, d4.loss_bbox: 0.9658, aux_task0.loss_heatmap: 0.8027, aux_task0.loss_bbox: 0.3185, aux_task1.loss_heatmap: 1.0576, aux_task1.loss_bbox: 0.3628, aux_task2.loss_heatmap: 1.2235, aux_task2.loss_bbox: 0.4012, aux_task3.loss_heatmap: 0.8219, aux_task3.loss_bbox: 0.3026, aux_task4.loss_heatmap: 0.6612, aux_task4.loss_bbox: 0.3254, aux_task5.loss_heatmap: 0.5921, aux_task5.loss_bbox: 0.3128, loss: 17.1405, grad_norm: 38.5742
2025-04-15 21:40:39,423 - mmdet - INFO - Epoch [4][100/1104]	lr: 9.813e-05, eta: 4:57:20, time: 0.955, data_time: 0.009, memory: 12552, loss_cls: 0.6383, loss_bbox: 0.9539, d0.loss_cls: 0.6704, d0.loss_bbox: 1.1656, d1.loss_cls: 0.6437, d1.loss_bbox: 1.0132, d2.loss_cls: 0.6370, d2.loss_bbox: 0.9752, d3.loss_cls: 0.6357, d3.loss_bbox: 0.9637, d4.loss_cls: 0.6350, d4.loss_bbox: 0.9580, aux_task0.loss_heatmap: 0.8009, aux_task0.loss_bbox: 0.3179, aux_task1.loss_heatmap: 1.0665, aux_task1.loss_bbox: 0.3628, aux_task2.loss_heatmap: 1.1700, aux_task2.loss_bbox: 0.3864, aux_task3.loss_heatmap: 0.8576, aux_task3.loss_bbox: 0.3164, aux_task4.loss_heatmap: 0.6541, aux_task4.loss_bbox: 0.3265, aux_task5.loss_heatmap: 0.6070, aux_task5.loss_bbox: 0.3136, loss: 17.0694, grad_norm: 36.3870
2025-04-15 21:41:26,614 - mmdet - INFO - Epoch [4][150/1104]	lr: 1.000e-04, eta: 4:56:29, time: 0.944, data_time: 0.011, memory: 12552, loss_cls: 0.6296, loss_bbox: 0.9495, d0.loss_cls: 0.6650, d0.loss_bbox: 1.1535, d1.loss_cls: 0.6349, d1.loss_bbox: 1.0081, d2.loss_cls: 0.6276, d2.loss_bbox: 0.9709, d3.loss_cls: 0.6260, d3.loss_bbox: 0.9603, d4.loss_cls: 0.6270, d4.loss_bbox: 0.9533, aux_task0.loss_heatmap: 0.7675, aux_task0.loss_bbox: 0.3108, aux_task1.loss_heatmap: 1.0422, aux_task1.loss_bbox: 0.3644, aux_task2.loss_heatmap: 1.1577, aux_task2.loss_bbox: 0.3907, aux_task3.loss_heatmap: 0.8190, aux_task3.loss_bbox: 0.3142, aux_task4.loss_heatmap: 0.6360, aux_task4.loss_bbox: 0.3221, aux_task5.loss_heatmap: 0.5922, aux_task5.loss_bbox: 0.3142, loss: 16.8369, grad_norm: 31.5139
2025-04-15 21:42:13,619 - mmdet - INFO - Epoch [4][200/1104]	lr: 1.019e-04, eta: 4:55:37, time: 0.940, data_time: 0.009, memory: 12552, loss_cls: 0.6312, loss_bbox: 0.9534, d0.loss_cls: 0.6700, d0.loss_bbox: 1.1615, d1.loss_cls: 0.6417, d1.loss_bbox: 1.0080, d2.loss_cls: 0.6336, d2.loss_bbox: 0.9722, d3.loss_cls: 0.6301, d3.loss_bbox: 0.9619, d4.loss_cls: 0.6307, d4.loss_bbox: 0.9560, aux_task0.loss_heatmap: 0.8058, aux_task0.loss_bbox: 0.3182, aux_task1.loss_heatmap: 1.0376, aux_task1.loss_bbox: 0.3635, aux_task2.loss_heatmap: 1.1568, aux_task2.loss_bbox: 0.3893, aux_task3.loss_heatmap: 0.8293, aux_task3.loss_bbox: 0.3111, aux_task4.loss_heatmap: 0.6230, aux_task4.loss_bbox: 0.3204, aux_task5.loss_heatmap: 0.6220, aux_task5.loss_bbox: 0.3171, loss: 16.9442, grad_norm: 31.1996
2025-04-15 21:43:01,052 - mmdet - INFO - Epoch [4][250/1104]	lr: 1.038e-04, eta: 4:54:47, time: 0.949, data_time: 0.009, memory: 12552, loss_cls: 0.6350, loss_bbox: 0.9530, d0.loss_cls: 0.6694, d0.loss_bbox: 1.1550, d1.loss_cls: 0.6413, d1.loss_bbox: 1.0080, d2.loss_cls: 0.6376, d2.loss_bbox: 0.9714, d3.loss_cls: 0.6344, d3.loss_bbox: 0.9616, d4.loss_cls: 0.6332, d4.loss_bbox: 0.9554, aux_task0.loss_heatmap: 0.7723, aux_task0.loss_bbox: 0.3123, aux_task1.loss_heatmap: 1.0401, aux_task1.loss_bbox: 0.3669, aux_task2.loss_heatmap: 1.1496, aux_task2.loss_bbox: 0.3905, aux_task3.loss_heatmap: 0.8209, aux_task3.loss_bbox: 0.3101, aux_task4.loss_heatmap: 0.6402, aux_task4.loss_bbox: 0.3255, aux_task5.loss_heatmap: 0.6267, aux_task5.loss_bbox: 0.3120, loss: 16.9223, grad_norm: 34.3389
2025-04-15 21:43:48,595 - mmdet - INFO - Epoch [4][300/1104]	lr: 1.057e-04, eta: 4:53:58, time: 0.951, data_time: 0.010, memory: 12552, loss_cls: 0.6241, loss_bbox: 0.9449, d0.loss_cls: 0.6603, d0.loss_bbox: 1.1527, d1.loss_cls: 0.6302, d1.loss_bbox: 1.0020, d2.loss_cls: 0.6255, d2.loss_bbox: 0.9655, d3.loss_cls: 0.6233, d3.loss_bbox: 0.9554, d4.loss_cls: 0.6219, d4.loss_bbox: 0.9487, aux_task0.loss_heatmap: 0.7834, aux_task0.loss_bbox: 0.3115, aux_task1.loss_heatmap: 1.0354, aux_task1.loss_bbox: 0.3615, aux_task2.loss_heatmap: 1.1533, aux_task2.loss_bbox: 0.4028, aux_task3.loss_heatmap: 0.7844, aux_task3.loss_bbox: 0.3093, aux_task4.loss_heatmap: 0.6403, aux_task4.loss_bbox: 0.3127, aux_task5.loss_heatmap: 0.5805, aux_task5.loss_bbox: 0.3142, loss: 16.7438, grad_norm: 32.0428
2025-04-15 21:44:36,110 - mmdet - INFO - Epoch [4][350/1104]	lr: 1.076e-04, eta: 4:53:09, time: 0.950, data_time: 0.008, memory: 12552, loss_cls: 0.6307, loss_bbox: 0.9559, d0.loss_cls: 0.6680, d0.loss_bbox: 1.1493, d1.loss_cls: 0.6380, d1.loss_bbox: 1.0075, d2.loss_cls: 0.6307, d2.loss_bbox: 0.9737, d3.loss_cls: 0.6277, d3.loss_bbox: 0.9670, d4.loss_cls: 0.6280, d4.loss_bbox: 0.9593, aux_task0.loss_heatmap: 0.7806, aux_task0.loss_bbox: 0.3158, aux_task1.loss_heatmap: 1.0635, aux_task1.loss_bbox: 0.3629, aux_task2.loss_heatmap: 1.1642, aux_task2.loss_bbox: 0.3974, aux_task3.loss_heatmap: 0.8187, aux_task3.loss_bbox: 0.3098, aux_task4.loss_heatmap: 0.6638, aux_task4.loss_bbox: 0.3239, aux_task5.loss_heatmap: 0.5873, aux_task5.loss_bbox: 0.3126, loss: 16.9362, grad_norm: 32.3178
2025-04-15 21:45:23,672 - mmdet - INFO - Epoch [4][400/1104]	lr: 1.096e-04, eta: 4:52:21, time: 0.951, data_time: 0.009, memory: 12552, loss_cls: 0.6311, loss_bbox: 0.9420, d0.loss_cls: 0.6676, d0.loss_bbox: 1.1436, d1.loss_cls: 0.6365, d1.loss_bbox: 0.9984, d2.loss_cls: 0.6281, d2.loss_bbox: 0.9645, d3.loss_cls: 0.6279, d3.loss_bbox: 0.9540, d4.loss_cls: 0.6282, d4.loss_bbox: 0.9469, aux_task0.loss_heatmap: 0.7922, aux_task0.loss_bbox: 0.3106, aux_task1.loss_heatmap: 1.0225, aux_task1.loss_bbox: 0.3595, aux_task2.loss_heatmap: 1.1711, aux_task2.loss_bbox: 0.3812, aux_task3.loss_heatmap: 0.7975, aux_task3.loss_bbox: 0.3107, aux_task4.loss_heatmap: 0.6156, aux_task4.loss_bbox: 0.3230, aux_task5.loss_heatmap: 0.6038, aux_task5.loss_bbox: 0.3142, loss: 16.7706, grad_norm: 33.1740
2025-04-15 21:46:11,261 - mmdet - INFO - Epoch [4][450/1104]	lr: 1.115e-04, eta: 4:51:32, time: 0.952, data_time: 0.009, memory: 12552, loss_cls: 0.6211, loss_bbox: 0.9432, d0.loss_cls: 0.6559, d0.loss_bbox: 1.1420, d1.loss_cls: 0.6287, d1.loss_bbox: 0.9934, d2.loss_cls: 0.6228, d2.loss_bbox: 0.9588, d3.loss_cls: 0.6207, d3.loss_bbox: 0.9487, d4.loss_cls: 0.6191, d4.loss_bbox: 0.9436, aux_task0.loss_heatmap: 0.7878, aux_task0.loss_bbox: 0.3113, aux_task1.loss_heatmap: 1.0149, aux_task1.loss_bbox: 0.3614, aux_task2.loss_heatmap: 1.1669, aux_task2.loss_bbox: 0.3829, aux_task3.loss_heatmap: 0.7596, aux_task3.loss_bbox: 0.3025, aux_task4.loss_heatmap: 0.6650, aux_task4.loss_bbox: 0.3218, aux_task5.loss_heatmap: 0.5862, aux_task5.loss_bbox: 0.3124, loss: 16.6707, grad_norm: 34.3548
2025-04-15 21:46:58,326 - mmdet - INFO - Epoch [4][500/1104]	lr: 1.135e-04, eta: 4:50:41, time: 0.941, data_time: 0.010, memory: 12552, loss_cls: 0.6149, loss_bbox: 0.9387, d0.loss_cls: 0.6521, d0.loss_bbox: 1.1369, d1.loss_cls: 0.6236, d1.loss_bbox: 0.9889, d2.loss_cls: 0.6151, d2.loss_bbox: 0.9585, d3.loss_cls: 0.6139, d3.loss_bbox: 0.9492, d4.loss_cls: 0.6124, d4.loss_bbox: 0.9433, aux_task0.loss_heatmap: 0.7631, aux_task0.loss_bbox: 0.3106, aux_task1.loss_heatmap: 1.0219, aux_task1.loss_bbox: 0.3572, aux_task2.loss_heatmap: 1.1005, aux_task2.loss_bbox: 0.3794, aux_task3.loss_heatmap: 0.8024, aux_task3.loss_bbox: 0.3091, aux_task4.loss_heatmap: 0.6215, aux_task4.loss_bbox: 0.3208, aux_task5.loss_heatmap: 0.5864, aux_task5.loss_bbox: 0.3150, loss: 16.5355, grad_norm: 32.1783
2025-04-15 21:47:45,934 - mmdet - INFO - Epoch [4][550/1104]	lr: 1.154e-04, eta: 4:49:53, time: 0.952, data_time: 0.010, memory: 12552, loss_cls: 0.6098, loss_bbox: 0.9369, d0.loss_cls: 0.6481, d0.loss_bbox: 1.1331, d1.loss_cls: 0.6212, d1.loss_bbox: 0.9871, d2.loss_cls: 0.6109, d2.loss_bbox: 0.9569, d3.loss_cls: 0.6079, d3.loss_bbox: 0.9467, d4.loss_cls: 0.6067, d4.loss_bbox: 0.9400, aux_task0.loss_heatmap: 0.7682, aux_task0.loss_bbox: 0.3127, aux_task1.loss_heatmap: 0.9888, aux_task1.loss_bbox: 0.3536, aux_task2.loss_heatmap: 1.1447, aux_task2.loss_bbox: 0.3898, aux_task3.loss_heatmap: 0.7783, aux_task3.loss_bbox: 0.3076, aux_task4.loss_heatmap: 0.6156, aux_task4.loss_bbox: 0.3195, aux_task5.loss_heatmap: 0.5975, aux_task5.loss_bbox: 0.3108, loss: 16.4922, grad_norm: 30.0983
2025-04-15 21:48:33,606 - mmdet - INFO - Epoch [4][600/1104]	lr: 1.174e-04, eta: 4:49:05, time: 0.953, data_time: 0.010, memory: 12552, loss_cls: 0.6015, loss_bbox: 0.9261, d0.loss_cls: 0.6425, d0.loss_bbox: 1.1136, d1.loss_cls: 0.6138, d1.loss_bbox: 0.9762, d2.loss_cls: 0.6050, d2.loss_bbox: 0.9437, d3.loss_cls: 0.6016, d3.loss_bbox: 0.9342, d4.loss_cls: 0.5988, d4.loss_bbox: 0.9297, aux_task0.loss_heatmap: 0.7497, aux_task0.loss_bbox: 0.3030, aux_task1.loss_heatmap: 1.0210, aux_task1.loss_bbox: 0.3609, aux_task2.loss_heatmap: 1.1175, aux_task2.loss_bbox: 0.3948, aux_task3.loss_heatmap: 0.8261, aux_task3.loss_bbox: 0.3116, aux_task4.loss_heatmap: 0.5996, aux_task4.loss_bbox: 0.3121, aux_task5.loss_heatmap: 0.6025, aux_task5.loss_bbox: 0.3103, loss: 16.3958, grad_norm: 36.4167
2025-04-15 21:49:21,207 - mmdet - INFO - Epoch [4][650/1104]	lr: 1.194e-04, eta: 4:48:16, time: 0.952, data_time: 0.011, memory: 12552, loss_cls: 0.6119, loss_bbox: 0.9375, d0.loss_cls: 0.6430, d0.loss_bbox: 1.1291, d1.loss_cls: 0.6175, d1.loss_bbox: 0.9891, d2.loss_cls: 0.6103, d2.loss_bbox: 0.9558, d3.loss_cls: 0.6085, d3.loss_bbox: 0.9474, d4.loss_cls: 0.6079, d4.loss_bbox: 0.9419, aux_task0.loss_heatmap: 0.7574, aux_task0.loss_bbox: 0.3134, aux_task1.loss_heatmap: 0.9765, aux_task1.loss_bbox: 0.3575, aux_task2.loss_heatmap: 1.1696, aux_task2.loss_bbox: 0.3892, aux_task3.loss_heatmap: 0.7982, aux_task3.loss_bbox: 0.3086, aux_task4.loss_heatmap: 0.6456, aux_task4.loss_bbox: 0.3184, aux_task5.loss_heatmap: 0.5915, aux_task5.loss_bbox: 0.3110, loss: 16.5369, grad_norm: 35.2982
2025-04-15 21:50:08,623 - mmdet - INFO - Epoch [4][700/1104]	lr: 1.213e-04, eta: 4:47:27, time: 0.948, data_time: 0.010, memory: 12552, loss_cls: 0.6112, loss_bbox: 0.9301, d0.loss_cls: 0.6459, d0.loss_bbox: 1.1255, d1.loss_cls: 0.6162, d1.loss_bbox: 0.9842, d2.loss_cls: 0.6100, d2.loss_bbox: 0.9514, d3.loss_cls: 0.6086, d3.loss_bbox: 0.9403, d4.loss_cls: 0.6068, d4.loss_bbox: 0.9350, aux_task0.loss_heatmap: 0.7557, aux_task0.loss_bbox: 0.3077, aux_task1.loss_heatmap: 0.9856, aux_task1.loss_bbox: 0.3599, aux_task2.loss_heatmap: 1.0928, aux_task2.loss_bbox: 0.3841, aux_task3.loss_heatmap: 0.7763, aux_task3.loss_bbox: 0.3043, aux_task4.loss_heatmap: 0.6016, aux_task4.loss_bbox: 0.3180, aux_task5.loss_heatmap: 0.5932, aux_task5.loss_bbox: 0.3128, loss: 16.3573, grad_norm: 32.5646
2025-04-15 21:50:55,690 - mmdet - INFO - Epoch [4][750/1104]	lr: 1.233e-04, eta: 4:46:37, time: 0.941, data_time: 0.010, memory: 12552, loss_cls: 0.6072, loss_bbox: 0.9176, d0.loss_cls: 0.6427, d0.loss_bbox: 1.1075, d1.loss_cls: 0.6161, d1.loss_bbox: 0.9697, d2.loss_cls: 0.6084, d2.loss_bbox: 0.9372, d3.loss_cls: 0.6064, d3.loss_bbox: 0.9275, d4.loss_cls: 0.6049, d4.loss_bbox: 0.9223, aux_task0.loss_heatmap: 0.7526, aux_task0.loss_bbox: 0.3037, aux_task1.loss_heatmap: 1.0021, aux_task1.loss_bbox: 0.3552, aux_task2.loss_heatmap: 1.0899, aux_task2.loss_bbox: 0.3813, aux_task3.loss_heatmap: 0.8094, aux_task3.loss_bbox: 0.3064, aux_task4.loss_heatmap: 0.6199, aux_task4.loss_bbox: 0.3192, aux_task5.loss_heatmap: 0.5829, aux_task5.loss_bbox: 0.3071, loss: 16.2973, grad_norm: 34.0248
2025-04-15 21:51:42,784 - mmdet - INFO - Epoch [4][800/1104]	lr: 1.253e-04, eta: 4:45:46, time: 0.942, data_time: 0.008, memory: 12552, loss_cls: 0.6022, loss_bbox: 0.9178, d0.loss_cls: 0.6392, d0.loss_bbox: 1.1088, d1.loss_cls: 0.6134, d1.loss_bbox: 0.9692, d2.loss_cls: 0.6040, d2.loss_bbox: 0.9391, d3.loss_cls: 0.6002, d3.loss_bbox: 0.9289, d4.loss_cls: 0.5992, d4.loss_bbox: 0.9226, aux_task0.loss_heatmap: 0.7348, aux_task0.loss_bbox: 0.3053, aux_task1.loss_heatmap: 1.0006, aux_task1.loss_bbox: 0.3551, aux_task2.loss_heatmap: 1.1008, aux_task2.loss_bbox: 0.3818, aux_task3.loss_heatmap: 0.7722, aux_task3.loss_bbox: 0.3010, aux_task4.loss_heatmap: 0.6275, aux_task4.loss_bbox: 0.3141, aux_task5.loss_heatmap: 0.5790, aux_task5.loss_bbox: 0.3111, loss: 16.2278, grad_norm: 31.4423
2025-04-15 21:52:30,018 - mmdet - INFO - Epoch [4][850/1104]	lr: 1.273e-04, eta: 4:44:56, time: 0.945, data_time: 0.009, memory: 12552, loss_cls: 0.5906, loss_bbox: 0.9181, d0.loss_cls: 0.6313, d0.loss_bbox: 1.1074, d1.loss_cls: 0.6015, d1.loss_bbox: 0.9656, d2.loss_cls: 0.5931, d2.loss_bbox: 0.9349, d3.loss_cls: 0.5890, d3.loss_bbox: 0.9261, d4.loss_cls: 0.5885, d4.loss_bbox: 0.9209, aux_task0.loss_heatmap: 0.7057, aux_task0.loss_bbox: 0.3003, aux_task1.loss_heatmap: 0.9957, aux_task1.loss_bbox: 0.3609, aux_task2.loss_heatmap: 1.0952, aux_task2.loss_bbox: 0.3829, aux_task3.loss_heatmap: 0.7388, aux_task3.loss_bbox: 0.3020, aux_task4.loss_heatmap: 0.5956, aux_task4.loss_bbox: 0.3116, aux_task5.loss_heatmap: 0.5802, aux_task5.loss_bbox: 0.3084, loss: 16.0443, grad_norm: 31.6639
2025-04-15 21:53:17,716 - mmdet - INFO - Epoch [4][900/1104]	lr: 1.293e-04, eta: 4:44:09, time: 0.954, data_time: 0.009, memory: 12552, loss_cls: 0.6062, loss_bbox: 0.9181, d0.loss_cls: 0.6462, d0.loss_bbox: 1.1051, d1.loss_cls: 0.6158, d1.loss_bbox: 0.9650, d2.loss_cls: 0.6077, d2.loss_bbox: 0.9368, d3.loss_cls: 0.6044, d3.loss_bbox: 0.9263, d4.loss_cls: 0.6040, d4.loss_bbox: 0.9214, aux_task0.loss_heatmap: 0.7331, aux_task0.loss_bbox: 0.3063, aux_task1.loss_heatmap: 0.9970, aux_task1.loss_bbox: 0.3519, aux_task2.loss_heatmap: 1.0798, aux_task2.loss_bbox: 0.3869, aux_task3.loss_heatmap: 0.7873, aux_task3.loss_bbox: 0.3156, aux_task4.loss_heatmap: 0.6346, aux_task4.loss_bbox: 0.3077, aux_task5.loss_heatmap: 0.5683, aux_task5.loss_bbox: 0.3098, loss: 16.2351, grad_norm: 30.2786
2025-04-15 21:54:04,909 - mmdet - INFO - Epoch [4][950/1104]	lr: 1.313e-04, eta: 4:43:19, time: 0.944, data_time: 0.009, memory: 12552, loss_cls: 0.6018, loss_bbox: 0.9135, d0.loss_cls: 0.6336, d0.loss_bbox: 1.0984, d1.loss_cls: 0.6079, d1.loss_bbox: 0.9631, d2.loss_cls: 0.6012, d2.loss_bbox: 0.9325, d3.loss_cls: 0.6008, d3.loss_bbox: 0.9245, d4.loss_cls: 0.5997, d4.loss_bbox: 0.9157, aux_task0.loss_heatmap: 0.7401, aux_task0.loss_bbox: 0.3052, aux_task1.loss_heatmap: 1.0129, aux_task1.loss_bbox: 0.3547, aux_task2.loss_heatmap: 1.0904, aux_task2.loss_bbox: 0.3789, aux_task3.loss_heatmap: 0.7731, aux_task3.loss_bbox: 0.3053, aux_task4.loss_heatmap: 0.5857, aux_task4.loss_bbox: 0.3120, aux_task5.loss_heatmap: 0.5812, aux_task5.loss_bbox: 0.3118, loss: 16.1441, grad_norm: 30.5584
2025-04-15 21:54:52,248 - mmdet - INFO - Epoch [4][1000/1104]	lr: 1.333e-04, eta: 4:42:30, time: 0.947, data_time: 0.008, memory: 12552, loss_cls: 0.5921, loss_bbox: 0.9208, d0.loss_cls: 0.6283, d0.loss_bbox: 1.1081, d1.loss_cls: 0.6018, d1.loss_bbox: 0.9708, d2.loss_cls: 0.5936, d2.loss_bbox: 0.9370, d3.loss_cls: 0.5905, d3.loss_bbox: 0.9282, d4.loss_cls: 0.5892, d4.loss_bbox: 0.9231, aux_task0.loss_heatmap: 0.7433, aux_task0.loss_bbox: 0.3070, aux_task1.loss_heatmap: 1.0138, aux_task1.loss_bbox: 0.3534, aux_task2.loss_heatmap: 1.0903, aux_task2.loss_bbox: 0.3842, aux_task3.loss_heatmap: 0.7505, aux_task3.loss_bbox: 0.3070, aux_task4.loss_heatmap: 0.5823, aux_task4.loss_bbox: 0.3101, aux_task5.loss_heatmap: 0.5445, aux_task5.loss_bbox: 0.3067, loss: 16.0770, grad_norm: 30.4393
2025-04-15 21:55:39,617 - mmdet - INFO - Epoch [4][1050/1104]	lr: 1.353e-04, eta: 4:41:40, time: 0.947, data_time: 0.012, memory: 12552, loss_cls: 0.5963, loss_bbox: 0.9090, d0.loss_cls: 0.6312, d0.loss_bbox: 1.1018, d1.loss_cls: 0.6068, d1.loss_bbox: 0.9611, d2.loss_cls: 0.5997, d2.loss_bbox: 0.9274, d3.loss_cls: 0.5963, d3.loss_bbox: 0.9187, d4.loss_cls: 0.5955, d4.loss_bbox: 0.9129, aux_task0.loss_heatmap: 0.7281, aux_task0.loss_bbox: 0.2990, aux_task1.loss_heatmap: 0.9860, aux_task1.loss_bbox: 0.3532, aux_task2.loss_heatmap: 1.0570, aux_task2.loss_bbox: 0.3719, aux_task3.loss_heatmap: 0.7837, aux_task3.loss_bbox: 0.3036, aux_task4.loss_heatmap: 0.6072, aux_task4.loss_bbox: 0.3123, aux_task5.loss_heatmap: 0.5690, aux_task5.loss_bbox: 0.3081, loss: 16.0359, grad_norm: 36.8959
2025-04-15 21:56:27,326 - mmdet - INFO - Epoch [4][1100/1104]	lr: 1.373e-04, eta: 4:40:53, time: 0.954, data_time: 0.010, memory: 12571, loss_cls: 0.5958, loss_bbox: 0.9278, d0.loss_cls: 0.6277, d0.loss_bbox: 1.1101, d1.loss_cls: 0.6029, d1.loss_bbox: 0.9754, d2.loss_cls: 0.5938, d2.loss_bbox: 0.9448, d3.loss_cls: 0.5915, d3.loss_bbox: 0.9358, d4.loss_cls: 0.5922, d4.loss_bbox: 0.9303, aux_task0.loss_heatmap: 0.7614, aux_task0.loss_bbox: 0.3038, aux_task1.loss_heatmap: 0.9751, aux_task1.loss_bbox: 0.3546, aux_task2.loss_heatmap: 1.0581, aux_task2.loss_bbox: 0.3838, aux_task3.loss_heatmap: 0.7520, aux_task3.loss_bbox: 0.3009, aux_task4.loss_heatmap: 0.6049, aux_task4.loss_bbox: 0.3214, aux_task5.loss_heatmap: 0.5623, aux_task5.loss_bbox: 0.3111, loss: 16.1173, grad_norm: 30.0570
2025-04-15 21:56:31,611 - mmdet - INFO - Saving checkpoint at 4 epochs
2025-04-15 22:07:49,834 - mmdet - INFO - Exp name: DSSMambaGigantic_layer3_rope_drop01.py
2025-04-15 22:07:49,834 - mmdet - INFO - Epoch(val) [4][3010]	pts_bbox_NuScenes/car_AP_dist_0.5: 0.1324, pts_bbox_NuScenes/car_AP_dist_1.0: 0.3213, pts_bbox_NuScenes/car_AP_dist_2.0: 0.4459, pts_bbox_NuScenes/car_AP_dist_4.0: 0.5497, pts_bbox_NuScenes/car_trans_err: 0.5149, pts_bbox_NuScenes/car_scale_err: 0.2223, pts_bbox_NuScenes/car_orient_err: 1.3092, pts_bbox_NuScenes/car_vel_err: 1.3152, pts_bbox_NuScenes/car_attr_err: 0.4183, pts_bbox_NuScenes/mATE: 0.6405, pts_bbox_NuScenes/mASE: 0.3359, pts_bbox_NuScenes/mAOE: 1.3525, pts_bbox_NuScenes/mAVE: 1.1990, pts_bbox_NuScenes/mAAE: 0.4606, pts_bbox_NuScenes/truck_AP_dist_0.5: 0.0062, pts_bbox_NuScenes/truck_AP_dist_1.0: 0.0511, pts_bbox_NuScenes/truck_AP_dist_2.0: 0.1106, pts_bbox_NuScenes/truck_AP_dist_4.0: 0.1501, pts_bbox_NuScenes/truck_trans_err: 0.7050, pts_bbox_NuScenes/truck_scale_err: 0.2900, pts_bbox_NuScenes/truck_orient_err: 1.6474, pts_bbox_NuScenes/truck_vel_err: 1.0459, pts_bbox_NuScenes/truck_attr_err: 0.3845, pts_bbox_NuScenes/construction_vehicle_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/construction_vehicle_AP_dist_1.0: 0.0006, pts_bbox_NuScenes/construction_vehicle_AP_dist_2.0: 0.0111, pts_bbox_NuScenes/construction_vehicle_AP_dist_4.0: 0.0196, pts_bbox_NuScenes/construction_vehicle_trans_err: 0.8646, pts_bbox_NuScenes/construction_vehicle_scale_err: 0.4933, pts_bbox_NuScenes/construction_vehicle_orient_err: 1.4274, pts_bbox_NuScenes/construction_vehicle_vel_err: 0.1383, pts_bbox_NuScenes/construction_vehicle_attr_err: 0.3428, pts_bbox_NuScenes/bus_AP_dist_0.5: 0.0007, pts_bbox_NuScenes/bus_AP_dist_1.0: 0.0432, pts_bbox_NuScenes/bus_AP_dist_2.0: 0.1594, pts_bbox_NuScenes/bus_AP_dist_4.0: 0.2353, pts_bbox_NuScenes/bus_trans_err: 0.8498, pts_bbox_NuScenes/bus_scale_err: 0.2904, pts_bbox_NuScenes/bus_orient_err: 1.3196, pts_bbox_NuScenes/bus_vel_err: 2.6815, pts_bbox_NuScenes/bus_attr_err: 0.7155, pts_bbox_NuScenes/trailer_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/trailer_AP_dist_1.0: 0.0030, pts_bbox_NuScenes/trailer_AP_dist_2.0: 0.0391, pts_bbox_NuScenes/trailer_AP_dist_4.0: 0.0942, pts_bbox_NuScenes/trailer_trans_err: 0.9692, pts_bbox_NuScenes/trailer_scale_err: 0.2986, pts_bbox_NuScenes/trailer_orient_err: 1.3740, pts_bbox_NuScenes/trailer_vel_err: 0.6521, pts_bbox_NuScenes/trailer_attr_err: 0.3214, pts_bbox_NuScenes/barrier_AP_dist_0.5: 0.0485, pts_bbox_NuScenes/barrier_AP_dist_1.0: 0.1716, pts_bbox_NuScenes/barrier_AP_dist_2.0: 0.2910, pts_bbox_NuScenes/barrier_AP_dist_4.0: 0.3710, pts_bbox_NuScenes/barrier_trans_err: 0.7236, pts_bbox_NuScenes/barrier_scale_err: 0.3715, pts_bbox_NuScenes/barrier_orient_err: 0.4582, pts_bbox_NuScenes/barrier_vel_err: nan, pts_bbox_NuScenes/barrier_attr_err: nan, pts_bbox_NuScenes/motorcycle_AP_dist_0.5: 0.0255, pts_bbox_NuScenes/motorcycle_AP_dist_1.0: 0.0554, pts_bbox_NuScenes/motorcycle_AP_dist_2.0: 0.0845, pts_bbox_NuScenes/motorcycle_AP_dist_4.0: 0.0949, pts_bbox_NuScenes/motorcycle_trans_err: 0.4623, pts_bbox_NuScenes/motorcycle_scale_err: 0.2896, pts_bbox_NuScenes/motorcycle_orient_err: 1.4802, pts_bbox_NuScenes/motorcycle_vel_err: 2.1279, pts_bbox_NuScenes/motorcycle_attr_err: 0.5337, pts_bbox_NuScenes/bicycle_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/bicycle_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/bicycle_AP_dist_2.0: 0.0000, pts_bbox_NuScenes/bicycle_AP_dist_4.0: 0.0000, pts_bbox_NuScenes/bicycle_trans_err: 0.4733, pts_bbox_NuScenes/bicycle_scale_err: 0.3413, pts_bbox_NuScenes/bicycle_orient_err: 1.5552, pts_bbox_NuScenes/bicycle_vel_err: 0.6833, pts_bbox_NuScenes/bicycle_attr_err: 0.1711, pts_bbox_NuScenes/pedestrian_AP_dist_0.5: 0.2454, pts_bbox_NuScenes/pedestrian_AP_dist_1.0: 0.4847, pts_bbox_NuScenes/pedestrian_AP_dist_2.0: 0.5531, pts_bbox_NuScenes/pedestrian_AP_dist_4.0: 0.5925, pts_bbox_NuScenes/pedestrian_trans_err: 0.4806, pts_bbox_NuScenes/pedestrian_scale_err: 0.3098, pts_bbox_NuScenes/pedestrian_orient_err: 1.6016, pts_bbox_NuScenes/pedestrian_vel_err: 0.9482, pts_bbox_NuScenes/pedestrian_attr_err: 0.7971, pts_bbox_NuScenes/traffic_cone_AP_dist_0.5: 0.1503, pts_bbox_NuScenes/traffic_cone_AP_dist_1.0: 0.1836, pts_bbox_NuScenes/traffic_cone_AP_dist_2.0: 0.2185, pts_bbox_NuScenes/traffic_cone_AP_dist_4.0: 0.2774, pts_bbox_NuScenes/traffic_cone_trans_err: 0.3613, pts_bbox_NuScenes/traffic_cone_scale_err: 0.4527, pts_bbox_NuScenes/traffic_cone_orient_err: nan, pts_bbox_NuScenes/traffic_cone_vel_err: nan, pts_bbox_NuScenes/traffic_cone_attr_err: nan, pts_bbox_NuScenes/NDS: 0.2341, pts_bbox_NuScenes/mAP: 0.1555
2025-04-15 22:08:43,176 - mmdet - INFO - Epoch [5][50/1104]	lr: 1.395e-04, eta: 4:40:03, time: 1.039, data_time: 0.093, memory: 12571, loss_cls: 0.5812, loss_bbox: 0.9001, d0.loss_cls: 0.6176, d0.loss_bbox: 1.0798, d1.loss_cls: 0.5899, d1.loss_bbox: 0.9484, d2.loss_cls: 0.5817, d2.loss_bbox: 0.9173, d3.loss_cls: 0.5813, d3.loss_bbox: 0.9078, d4.loss_cls: 0.5793, d4.loss_bbox: 0.9040, aux_task0.loss_heatmap: 0.7057, aux_task0.loss_bbox: 0.2960, aux_task1.loss_heatmap: 0.9780, aux_task1.loss_bbox: 0.3471, aux_task2.loss_heatmap: 1.0488, aux_task2.loss_bbox: 0.3794, aux_task3.loss_heatmap: 0.7493, aux_task3.loss_bbox: 0.3066, aux_task4.loss_heatmap: 0.6002, aux_task4.loss_bbox: 0.3121, aux_task5.loss_heatmap: 0.5455, aux_task5.loss_bbox: 0.3050, loss: 15.7620, grad_norm: 28.5308
2025-04-15 22:09:30,836 - mmdet - INFO - Epoch [5][100/1104]	lr: 1.415e-04, eta: 4:39:15, time: 0.953, data_time: 0.009, memory: 12571, loss_cls: 0.5880, loss_bbox: 0.9081, d0.loss_cls: 0.6219, d0.loss_bbox: 1.0850, d1.loss_cls: 0.5953, d1.loss_bbox: 0.9543, d2.loss_cls: 0.5879, d2.loss_bbox: 0.9257, d3.loss_cls: 0.5843, d3.loss_bbox: 0.9179, d4.loss_cls: 0.5850, d4.loss_bbox: 0.9120, aux_task0.loss_heatmap: 0.7100, aux_task0.loss_bbox: 0.2977, aux_task1.loss_heatmap: 1.0011, aux_task1.loss_bbox: 0.3539, aux_task2.loss_heatmap: 1.0171, aux_task2.loss_bbox: 0.3674, aux_task3.loss_heatmap: 0.7752, aux_task3.loss_bbox: 0.3035, aux_task4.loss_heatmap: 0.5958, aux_task4.loss_bbox: 0.3179, aux_task5.loss_heatmap: 0.5728, aux_task5.loss_bbox: 0.3077, loss: 15.8856, grad_norm: 31.9459
2025-04-15 22:10:17,885 - mmdet - INFO - Epoch [5][150/1104]	lr: 1.435e-04, eta: 4:38:25, time: 0.941, data_time: 0.008, memory: 12571, loss_cls: 0.5834, loss_bbox: 0.9116, d0.loss_cls: 0.6189, d0.loss_bbox: 1.0854, d1.loss_cls: 0.5917, d1.loss_bbox: 0.9567, d2.loss_cls: 0.5829, d2.loss_bbox: 0.9259, d3.loss_cls: 0.5803, d3.loss_bbox: 0.9185, d4.loss_cls: 0.5806, d4.loss_bbox: 0.9133, aux_task0.loss_heatmap: 0.7072, aux_task0.loss_bbox: 0.2950, aux_task1.loss_heatmap: 0.9626, aux_task1.loss_bbox: 0.3512, aux_task2.loss_heatmap: 1.0471, aux_task2.loss_bbox: 0.3740, aux_task3.loss_heatmap: 0.7977, aux_task3.loss_bbox: 0.3064, aux_task4.loss_heatmap: 0.5872, aux_task4.loss_bbox: 0.3123, aux_task5.loss_heatmap: 0.5524, aux_task5.loss_bbox: 0.3058, loss: 15.8481, grad_norm: 33.1339
2025-04-15 22:11:05,154 - mmdet - INFO - Epoch [5][200/1104]	lr: 1.455e-04, eta: 4:37:36, time: 0.945, data_time: 0.009, memory: 12571, loss_cls: 0.5809, loss_bbox: 0.9123, d0.loss_cls: 0.6207, d0.loss_bbox: 1.0916, d1.loss_cls: 0.5892, d1.loss_bbox: 0.9608, d2.loss_cls: 0.5819, d2.loss_bbox: 0.9311, d3.loss_cls: 0.5799, d3.loss_bbox: 0.9219, d4.loss_cls: 0.5789, d4.loss_bbox: 0.9156, aux_task0.loss_heatmap: 0.7076, aux_task0.loss_bbox: 0.2981, aux_task1.loss_heatmap: 0.9525, aux_task1.loss_bbox: 0.3552, aux_task2.loss_heatmap: 1.0273, aux_task2.loss_bbox: 0.3713, aux_task3.loss_heatmap: 0.7644, aux_task3.loss_bbox: 0.3075, aux_task4.loss_heatmap: 0.5687, aux_task4.loss_bbox: 0.3099, aux_task5.loss_heatmap: 0.5752, aux_task5.loss_bbox: 0.3142, loss: 15.8167, grad_norm: 32.0125
2025-04-15 22:11:52,574 - mmdet - INFO - Epoch [5][250/1104]	lr: 1.475e-04, eta: 4:36:47, time: 0.948, data_time: 0.011, memory: 12571, loss_cls: 0.5830, loss_bbox: 0.9027, d0.loss_cls: 0.6183, d0.loss_bbox: 1.0762, d1.loss_cls: 0.5930, d1.loss_bbox: 0.9474, d2.loss_cls: 0.5863, d2.loss_bbox: 0.9181, d3.loss_cls: 0.5848, d3.loss_bbox: 0.9080, d4.loss_cls: 0.5820, d4.loss_bbox: 0.9048, aux_task0.loss_heatmap: 0.7136, aux_task0.loss_bbox: 0.2967, aux_task1.loss_heatmap: 0.9655, aux_task1.loss_bbox: 0.3532, aux_task2.loss_heatmap: 1.0261, aux_task2.loss_bbox: 0.3697, aux_task3.loss_heatmap: 0.7640, aux_task3.loss_bbox: 0.3025, aux_task4.loss_heatmap: 0.5950, aux_task4.loss_bbox: 0.3116, aux_task5.loss_heatmap: 0.5583, aux_task5.loss_bbox: 0.3082, loss: 15.7688, grad_norm: 30.5198
2025-04-15 22:12:40,260 - mmdet - INFO - Epoch [5][300/1104]	lr: 1.494e-04, eta: 4:35:59, time: 0.954, data_time: 0.010, memory: 12571, loss_cls: 0.5773, loss_bbox: 0.9003, d0.loss_cls: 0.6108, d0.loss_bbox: 1.0683, d1.loss_cls: 0.5843, d1.loss_bbox: 0.9444, d2.loss_cls: 0.5792, d2.loss_bbox: 0.9162, d3.loss_cls: 0.5771, d3.loss_bbox: 0.9080, d4.loss_cls: 0.5749, d4.loss_bbox: 0.9033, aux_task0.loss_heatmap: 0.7067, aux_task0.loss_bbox: 0.2928, aux_task1.loss_heatmap: 0.9726, aux_task1.loss_bbox: 0.3482, aux_task2.loss_heatmap: 0.9916, aux_task2.loss_bbox: 0.3793, aux_task3.loss_heatmap: 0.7695, aux_task3.loss_bbox: 0.3039, aux_task4.loss_heatmap: 0.5819, aux_task4.loss_bbox: 0.3019, aux_task5.loss_heatmap: 0.5523, aux_task5.loss_bbox: 0.3080, loss: 15.6527, grad_norm: 32.3560
2025-04-15 22:13:27,566 - mmdet - INFO - Epoch [5][350/1104]	lr: 1.514e-04, eta: 4:35:10, time: 0.946, data_time: 0.010, memory: 12571, loss_cls: 0.5853, loss_bbox: 0.9000, d0.loss_cls: 0.6171, d0.loss_bbox: 1.0714, d1.loss_cls: 0.5911, d1.loss_bbox: 0.9430, d2.loss_cls: 0.5836, d2.loss_bbox: 0.9152, d3.loss_cls: 0.5814, d3.loss_bbox: 0.9074, d4.loss_cls: 0.5821, d4.loss_bbox: 0.9025, aux_task0.loss_heatmap: 0.6940, aux_task0.loss_bbox: 0.2943, aux_task1.loss_heatmap: 0.9933, aux_task1.loss_bbox: 0.3562, aux_task2.loss_heatmap: 1.0368, aux_task2.loss_bbox: 0.3742, aux_task3.loss_heatmap: 0.7483, aux_task3.loss_bbox: 0.3081, aux_task4.loss_heatmap: 0.5947, aux_task4.loss_bbox: 0.3111, aux_task5.loss_heatmap: 0.5686, aux_task5.loss_bbox: 0.3048, loss: 15.7644, grad_norm: 30.8818
2025-04-15 22:14:14,837 - mmdet - INFO - Epoch [5][400/1104]	lr: 1.534e-04, eta: 4:34:21, time: 0.945, data_time: 0.008, memory: 12571, loss_cls: 0.5752, loss_bbox: 0.8860, d0.loss_cls: 0.6088, d0.loss_bbox: 1.0584, d1.loss_cls: 0.5830, d1.loss_bbox: 0.9331, d2.loss_cls: 0.5758, d2.loss_bbox: 0.9043, d3.loss_cls: 0.5739, d3.loss_bbox: 0.8959, d4.loss_cls: 0.5726, d4.loss_bbox: 0.8903, aux_task0.loss_heatmap: 0.7192, aux_task0.loss_bbox: 0.2974, aux_task1.loss_heatmap: 0.9359, aux_task1.loss_bbox: 0.3488, aux_task2.loss_heatmap: 1.0497, aux_task2.loss_bbox: 0.3658, aux_task3.loss_heatmap: 0.7387, aux_task3.loss_bbox: 0.2983, aux_task4.loss_heatmap: 0.5645, aux_task4.loss_bbox: 0.3106, aux_task5.loss_heatmap: 0.5542, aux_task5.loss_bbox: 0.3018, loss: 15.5420, grad_norm: 29.4029
2025-04-15 22:15:03,347 - mmdet - INFO - Epoch [5][450/1104]	lr: 1.554e-04, eta: 4:33:36, time: 0.970, data_time: 0.025, memory: 12571, loss_cls: 0.5765, loss_bbox: 0.8911, d0.loss_cls: 0.6116, d0.loss_bbox: 1.0674, d1.loss_cls: 0.5878, d1.loss_bbox: 0.9382, d2.loss_cls: 0.5802, d2.loss_bbox: 0.9082, d3.loss_cls: 0.5764, d3.loss_bbox: 0.8981, d4.loss_cls: 0.5750, d4.loss_bbox: 0.8928, aux_task0.loss_heatmap: 0.7004, aux_task0.loss_bbox: 0.2987, aux_task1.loss_heatmap: 0.9530, aux_task1.loss_bbox: 0.3492, aux_task2.loss_heatmap: 1.0237, aux_task2.loss_bbox: 0.3677, aux_task3.loss_heatmap: 0.7392, aux_task3.loss_bbox: 0.2920, aux_task4.loss_heatmap: 0.5943, aux_task4.loss_bbox: 0.3104, aux_task5.loss_heatmap: 0.5682, aux_task5.loss_bbox: 0.3040, loss: 15.6041, grad_norm: 37.6873
2025-04-15 22:15:50,679 - mmdet - INFO - Epoch [5][500/1104]	lr: 1.574e-04, eta: 4:32:47, time: 0.947, data_time: 0.010, memory: 12571, loss_cls: 0.5741, loss_bbox: 0.8925, d0.loss_cls: 0.6082, d0.loss_bbox: 1.0600, d1.loss_cls: 0.5835, d1.loss_bbox: 0.9370, d2.loss_cls: 0.5772, d2.loss_bbox: 0.9077, d3.loss_cls: 0.5728, d3.loss_bbox: 0.8997, d4.loss_cls: 0.5715, d4.loss_bbox: 0.8959, aux_task0.loss_heatmap: 0.7068, aux_task0.loss_bbox: 0.2931, aux_task1.loss_heatmap: 0.9685, aux_task1.loss_bbox: 0.3430, aux_task2.loss_heatmap: 0.9678, aux_task2.loss_bbox: 0.3639, aux_task3.loss_heatmap: 0.7687, aux_task3.loss_bbox: 0.2887, aux_task4.loss_heatmap: 0.5744, aux_task4.loss_bbox: 0.3115, aux_task5.loss_heatmap: 0.5647, aux_task5.loss_bbox: 0.3072, loss: 15.5384, grad_norm: 30.7405
2025-04-15 22:16:38,061 - mmdet - INFO - Epoch [5][550/1104]	lr: 1.593e-04, eta: 4:31:59, time: 0.948, data_time: 0.010, memory: 12571, loss_cls: 0.5675, loss_bbox: 0.8922, d0.loss_cls: 0.6046, d0.loss_bbox: 1.0599, d1.loss_cls: 0.5761, d1.loss_bbox: 0.9373, d2.loss_cls: 0.5678, d2.loss_bbox: 0.9095, d3.loss_cls: 0.5652, d3.loss_bbox: 0.9004, d4.loss_cls: 0.5660, d4.loss_bbox: 0.8943, aux_task0.loss_heatmap: 0.6909, aux_task0.loss_bbox: 0.2936, aux_task1.loss_heatmap: 0.9176, aux_task1.loss_bbox: 0.3404, aux_task2.loss_heatmap: 1.0367, aux_task2.loss_bbox: 0.3737, aux_task3.loss_heatmap: 0.7461, aux_task3.loss_bbox: 0.3099, aux_task4.loss_heatmap: 0.5567, aux_task4.loss_bbox: 0.3068, aux_task5.loss_heatmap: 0.5570, aux_task5.loss_bbox: 0.3106, loss: 15.4807, grad_norm: 28.8871
2025-04-15 22:17:25,582 - mmdet - INFO - Epoch [5][600/1104]	lr: 1.613e-04, eta: 4:31:11, time: 0.950, data_time: 0.012, memory: 12571, loss_cls: 0.5582, loss_bbox: 0.8960, d0.loss_cls: 0.5932, d0.loss_bbox: 1.0583, d1.loss_cls: 0.5673, d1.loss_bbox: 0.9373, d2.loss_cls: 0.5590, d2.loss_bbox: 0.9106, d3.loss_cls: 0.5560, d3.loss_bbox: 0.9047, d4.loss_cls: 0.5555, d4.loss_bbox: 0.8991, aux_task0.loss_heatmap: 0.6923, aux_task0.loss_bbox: 0.2995, aux_task1.loss_heatmap: 0.9470, aux_task1.loss_bbox: 0.3488, aux_task2.loss_heatmap: 1.0067, aux_task2.loss_bbox: 0.3761, aux_task3.loss_heatmap: 0.7242, aux_task3.loss_bbox: 0.3018, aux_task4.loss_heatmap: 0.5487, aux_task4.loss_bbox: 0.3034, aux_task5.loss_heatmap: 0.5446, aux_task5.loss_bbox: 0.3092, loss: 15.3974, grad_norm: 28.5955
2025-04-15 22:18:12,796 - mmdet - INFO - Epoch [5][650/1104]	lr: 1.632e-04, eta: 4:30:21, time: 0.944, data_time: 0.008, memory: 12571, loss_cls: 0.5606, loss_bbox: 0.8920, d0.loss_cls: 0.5921, d0.loss_bbox: 1.0537, d1.loss_cls: 0.5686, d1.loss_bbox: 0.9325, d2.loss_cls: 0.5608, d2.loss_bbox: 0.9062, d3.loss_cls: 0.5599, d3.loss_bbox: 0.8981, d4.loss_cls: 0.5587, d4.loss_bbox: 0.8939, aux_task0.loss_heatmap: 0.6988, aux_task0.loss_bbox: 0.2936, aux_task1.loss_heatmap: 0.9044, aux_task1.loss_bbox: 0.3437, aux_task2.loss_heatmap: 1.0232, aux_task2.loss_bbox: 0.3779, aux_task3.loss_heatmap: 0.7666, aux_task3.loss_bbox: 0.3051, aux_task4.loss_heatmap: 0.5914, aux_task4.loss_bbox: 0.3097, aux_task5.loss_heatmap: 0.5450, aux_task5.loss_bbox: 0.3056, loss: 15.4423, grad_norm: 34.0465
2025-04-15 22:19:00,024 - mmdet - INFO - Epoch [5][700/1104]	lr: 1.652e-04, eta: 4:29:32, time: 0.945, data_time: 0.011, memory: 12571, loss_cls: 0.5586, loss_bbox: 0.8841, d0.loss_cls: 0.5930, d0.loss_bbox: 1.0529, d1.loss_cls: 0.5684, d1.loss_bbox: 0.9288, d2.loss_cls: 0.5621, d2.loss_bbox: 0.9006, d3.loss_cls: 0.5584, d3.loss_bbox: 0.8928, d4.loss_cls: 0.5566, d4.loss_bbox: 0.8871, aux_task0.loss_heatmap: 0.6841, aux_task0.loss_bbox: 0.2896, aux_task1.loss_heatmap: 0.9238, aux_task1.loss_bbox: 0.3469, aux_task2.loss_heatmap: 0.9941, aux_task2.loss_bbox: 0.3664, aux_task3.loss_heatmap: 0.7275, aux_task3.loss_bbox: 0.2983, aux_task4.loss_heatmap: 0.5467, aux_task4.loss_bbox: 0.3092, aux_task5.loss_heatmap: 0.5367, aux_task5.loss_bbox: 0.2995, loss: 15.2660, grad_norm: 31.3530
2025-04-15 22:19:47,292 - mmdet - INFO - Epoch [5][750/1104]	lr: 1.671e-04, eta: 4:28:43, time: 0.945, data_time: 0.008, memory: 12571, loss_cls: 0.5560, loss_bbox: 0.8808, d0.loss_cls: 0.5914, d0.loss_bbox: 1.0378, d1.loss_cls: 0.5653, d1.loss_bbox: 0.9194, d2.loss_cls: 0.5581, d2.loss_bbox: 0.8929, d3.loss_cls: 0.5558, d3.loss_bbox: 0.8873, d4.loss_cls: 0.5543, d4.loss_bbox: 0.8824, aux_task0.loss_heatmap: 0.6797, aux_task0.loss_bbox: 0.2861, aux_task1.loss_heatmap: 0.9351, aux_task1.loss_bbox: 0.3422, aux_task2.loss_heatmap: 0.9711, aux_task2.loss_bbox: 0.3668, aux_task3.loss_heatmap: 0.7688, aux_task3.loss_bbox: 0.2998, aux_task4.loss_heatmap: 0.5772, aux_task4.loss_bbox: 0.3103, aux_task5.loss_heatmap: 0.5205, aux_task5.loss_bbox: 0.3020, loss: 15.2409, grad_norm: 28.8425
2025-04-15 22:20:34,443 - mmdet - INFO - Epoch [5][800/1104]	lr: 1.690e-04, eta: 4:27:54, time: 0.943, data_time: 0.009, memory: 12571, loss_cls: 0.5664, loss_bbox: 0.8818, d0.loss_cls: 0.6003, d0.loss_bbox: 1.0413, d1.loss_cls: 0.5748, d1.loss_bbox: 0.9244, d2.loss_cls: 0.5673, d2.loss_bbox: 0.8987, d3.loss_cls: 0.5654, d3.loss_bbox: 0.8924, d4.loss_cls: 0.5655, d4.loss_bbox: 0.8854, aux_task0.loss_heatmap: 0.6911, aux_task0.loss_bbox: 0.2920, aux_task1.loss_heatmap: 0.9306, aux_task1.loss_bbox: 0.3461, aux_task2.loss_heatmap: 1.0010, aux_task2.loss_bbox: 0.3697, aux_task3.loss_heatmap: 0.7591, aux_task3.loss_bbox: 0.2925, aux_task4.loss_heatmap: 0.5679, aux_task4.loss_bbox: 0.3028, aux_task5.loss_heatmap: 0.5310, aux_task5.loss_bbox: 0.3076, loss: 15.3550, grad_norm: 28.9223
2025-04-15 22:21:21,347 - mmdet - INFO - Epoch [5][850/1104]	lr: 1.710e-04, eta: 4:27:04, time: 0.938, data_time: 0.010, memory: 12571, loss_cls: 0.5519, loss_bbox: 0.8776, d0.loss_cls: 0.5895, d0.loss_bbox: 1.0312, d1.loss_cls: 0.5603, d1.loss_bbox: 0.9164, d2.loss_cls: 0.5537, d2.loss_bbox: 0.8930, d3.loss_cls: 0.5524, d3.loss_bbox: 0.8865, d4.loss_cls: 0.5496, d4.loss_bbox: 0.8811, aux_task0.loss_heatmap: 0.6770, aux_task0.loss_bbox: 0.2887, aux_task1.loss_heatmap: 0.9270, aux_task1.loss_bbox: 0.3475, aux_task2.loss_heatmap: 0.9970, aux_task2.loss_bbox: 0.3734, aux_task3.loss_heatmap: 0.6963, aux_task3.loss_bbox: 0.2979, aux_task4.loss_heatmap: 0.5538, aux_task4.loss_bbox: 0.3007, aux_task5.loss_heatmap: 0.5322, aux_task5.loss_bbox: 0.3017, loss: 15.1365, grad_norm: 31.3911
2025-04-15 22:22:08,921 - mmdet - INFO - Epoch [5][900/1104]	lr: 1.729e-04, eta: 4:26:16, time: 0.951, data_time: 0.008, memory: 12571, loss_cls: 0.5579, loss_bbox: 0.8885, d0.loss_cls: 0.5949, d0.loss_bbox: 1.0408, d1.loss_cls: 0.5699, d1.loss_bbox: 0.9269, d2.loss_cls: 0.5626, d2.loss_bbox: 0.9013, d3.loss_cls: 0.5594, d3.loss_bbox: 0.8947, d4.loss_cls: 0.5565, d4.loss_bbox: 0.8899, aux_task0.loss_heatmap: 0.6732, aux_task0.loss_bbox: 0.2955, aux_task1.loss_heatmap: 0.9447, aux_task1.loss_bbox: 0.3415, aux_task2.loss_heatmap: 1.0094, aux_task2.loss_bbox: 0.3747, aux_task3.loss_heatmap: 0.7157, aux_task3.loss_bbox: 0.3021, aux_task4.loss_heatmap: 0.5823, aux_task4.loss_bbox: 0.3010, aux_task5.loss_heatmap: 0.5466, aux_task5.loss_bbox: 0.3025, loss: 15.3325, grad_norm: 27.6365
2025-04-15 22:22:56,057 - mmdet - INFO - Epoch [5][950/1104]	lr: 1.748e-04, eta: 4:25:27, time: 0.943, data_time: 0.008, memory: 12571, loss_cls: 0.5506, loss_bbox: 0.8809, d0.loss_cls: 0.5878, d0.loss_bbox: 1.0400, d1.loss_cls: 0.5609, d1.loss_bbox: 0.9212, d2.loss_cls: 0.5549, d2.loss_bbox: 0.8933, d3.loss_cls: 0.5522, d3.loss_bbox: 0.8873, d4.loss_cls: 0.5490, d4.loss_bbox: 0.8830, aux_task0.loss_heatmap: 0.6676, aux_task0.loss_bbox: 0.2891, aux_task1.loss_heatmap: 0.9413, aux_task1.loss_bbox: 0.3426, aux_task2.loss_heatmap: 0.9645, aux_task2.loss_bbox: 0.3630, aux_task3.loss_heatmap: 0.7229, aux_task3.loss_bbox: 0.2995, aux_task4.loss_heatmap: 0.5491, aux_task4.loss_bbox: 0.3035, aux_task5.loss_heatmap: 0.5232, aux_task5.loss_bbox: 0.3036, loss: 15.1311, grad_norm: 31.1307
2025-04-15 22:23:43,193 - mmdet - INFO - Epoch [5][1000/1104]	lr: 1.766e-04, eta: 4:24:37, time: 0.943, data_time: 0.009, memory: 12571, loss_cls: 0.5637, loss_bbox: 0.8758, d0.loss_cls: 0.5924, d0.loss_bbox: 1.0364, d1.loss_cls: 0.5697, d1.loss_bbox: 0.9190, d2.loss_cls: 0.5633, d2.loss_bbox: 0.8927, d3.loss_cls: 0.5609, d3.loss_bbox: 0.8845, d4.loss_cls: 0.5607, d4.loss_bbox: 0.8793, aux_task0.loss_heatmap: 0.6878, aux_task0.loss_bbox: 0.2947, aux_task1.loss_heatmap: 0.9627, aux_task1.loss_bbox: 0.3405, aux_task2.loss_heatmap: 0.9902, aux_task2.loss_bbox: 0.3666, aux_task3.loss_heatmap: 0.7680, aux_task3.loss_bbox: 0.2995, aux_task4.loss_heatmap: 0.5370, aux_task4.loss_bbox: 0.2996, aux_task5.loss_heatmap: 0.5352, aux_task5.loss_bbox: 0.3032, loss: 15.2833, grad_norm: 30.1591
2025-04-15 22:24:30,653 - mmdet - INFO - Epoch [5][1050/1104]	lr: 1.785e-04, eta: 4:23:49, time: 0.949, data_time: 0.009, memory: 12571, loss_cls: 0.5533, loss_bbox: 0.8746, d0.loss_cls: 0.5864, d0.loss_bbox: 1.0331, d1.loss_cls: 0.5631, d1.loss_bbox: 0.9162, d2.loss_cls: 0.5555, d2.loss_bbox: 0.8901, d3.loss_cls: 0.5525, d3.loss_bbox: 0.8835, d4.loss_cls: 0.5505, d4.loss_bbox: 0.8795, aux_task0.loss_heatmap: 0.6881, aux_task0.loss_bbox: 0.2873, aux_task1.loss_heatmap: 0.9298, aux_task1.loss_bbox: 0.3454, aux_task2.loss_heatmap: 0.9419, aux_task2.loss_bbox: 0.3575, aux_task3.loss_heatmap: 0.7774, aux_task3.loss_bbox: 0.2967, aux_task4.loss_heatmap: 0.5675, aux_task4.loss_bbox: 0.3043, aux_task5.loss_heatmap: 0.5190, aux_task5.loss_bbox: 0.3035, loss: 15.1565, grad_norm: 30.6366
2025-04-15 22:25:18,088 - mmdet - INFO - Epoch [5][1100/1104]	lr: 1.804e-04, eta: 4:23:01, time: 0.949, data_time: 0.008, memory: 12571, loss_cls: 0.5437, loss_bbox: 0.8805, d0.loss_cls: 0.5749, d0.loss_bbox: 1.0353, d1.loss_cls: 0.5515, d1.loss_bbox: 0.9187, d2.loss_cls: 0.5436, d2.loss_bbox: 0.8944, d3.loss_cls: 0.5416, d3.loss_bbox: 0.8875, d4.loss_cls: 0.5411, d4.loss_bbox: 0.8829, aux_task0.loss_heatmap: 0.6543, aux_task0.loss_bbox: 0.2882, aux_task1.loss_heatmap: 0.9157, aux_task1.loss_bbox: 0.3394, aux_task2.loss_heatmap: 0.9697, aux_task2.loss_bbox: 0.3681, aux_task3.loss_heatmap: 0.7023, aux_task3.loss_bbox: 0.2895, aux_task4.loss_heatmap: 0.5460, aux_task4.loss_bbox: 0.3029, aux_task5.loss_heatmap: 0.5146, aux_task5.loss_bbox: 0.3047, loss: 14.9911, grad_norm: 28.6099
2025-04-15 22:25:22,324 - mmdet - INFO - Saving checkpoint at 5 epochs
2025-04-15 22:36:18,631 - mmdet - INFO - Exp name: DSSMambaGigantic_layer3_rope_drop01.py
2025-04-15 22:36:18,631 - mmdet - INFO - Epoch(val) [5][3010]	pts_bbox_NuScenes/car_AP_dist_0.5: 0.2464, pts_bbox_NuScenes/car_AP_dist_1.0: 0.4107, pts_bbox_NuScenes/car_AP_dist_2.0: 0.5154, pts_bbox_NuScenes/car_AP_dist_4.0: 0.5932, pts_bbox_NuScenes/car_trans_err: 0.4027, pts_bbox_NuScenes/car_scale_err: 0.1855, pts_bbox_NuScenes/car_orient_err: 1.2380, pts_bbox_NuScenes/car_vel_err: 1.1054, pts_bbox_NuScenes/car_attr_err: 0.3969, pts_bbox_NuScenes/mATE: 0.5598, pts_bbox_NuScenes/mASE: 0.3106, pts_bbox_NuScenes/mAOE: 1.3175, pts_bbox_NuScenes/mAVE: 1.1049, pts_bbox_NuScenes/mAAE: 0.4470, pts_bbox_NuScenes/truck_AP_dist_0.5: 0.0236, pts_bbox_NuScenes/truck_AP_dist_1.0: 0.0841, pts_bbox_NuScenes/truck_AP_dist_2.0: 0.1440, pts_bbox_NuScenes/truck_AP_dist_4.0: 0.1787, pts_bbox_NuScenes/truck_trans_err: 0.5883, pts_bbox_NuScenes/truck_scale_err: 0.2726, pts_bbox_NuScenes/truck_orient_err: 1.3052, pts_bbox_NuScenes/truck_vel_err: 0.8916, pts_bbox_NuScenes/truck_attr_err: 0.3720, pts_bbox_NuScenes/construction_vehicle_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/construction_vehicle_AP_dist_1.0: 0.0036, pts_bbox_NuScenes/construction_vehicle_AP_dist_2.0: 0.0190, pts_bbox_NuScenes/construction_vehicle_AP_dist_4.0: 0.0370, pts_bbox_NuScenes/construction_vehicle_trans_err: 0.8072, pts_bbox_NuScenes/construction_vehicle_scale_err: 0.4781, pts_bbox_NuScenes/construction_vehicle_orient_err: 1.5509, pts_bbox_NuScenes/construction_vehicle_vel_err: 0.1453, pts_bbox_NuScenes/construction_vehicle_attr_err: 0.3510, pts_bbox_NuScenes/bus_AP_dist_0.5: 0.0162, pts_bbox_NuScenes/bus_AP_dist_1.0: 0.0913, pts_bbox_NuScenes/bus_AP_dist_2.0: 0.2141, pts_bbox_NuScenes/bus_AP_dist_4.0: 0.2718, pts_bbox_NuScenes/bus_trans_err: 0.7000, pts_bbox_NuScenes/bus_scale_err: 0.2339, pts_bbox_NuScenes/bus_orient_err: 1.2878, pts_bbox_NuScenes/bus_vel_err: 2.6447, pts_bbox_NuScenes/bus_attr_err: 0.6975, pts_bbox_NuScenes/trailer_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/trailer_AP_dist_1.0: 0.0116, pts_bbox_NuScenes/trailer_AP_dist_2.0: 0.0421, pts_bbox_NuScenes/trailer_AP_dist_4.0: 0.0867, pts_bbox_NuScenes/trailer_trans_err: 0.8407, pts_bbox_NuScenes/trailer_scale_err: 0.2623, pts_bbox_NuScenes/trailer_orient_err: 1.5410, pts_bbox_NuScenes/trailer_vel_err: 0.4714, pts_bbox_NuScenes/trailer_attr_err: 0.2116, pts_bbox_NuScenes/barrier_AP_dist_0.5: 0.0611, pts_bbox_NuScenes/barrier_AP_dist_1.0: 0.2432, pts_bbox_NuScenes/barrier_AP_dist_2.0: 0.3999, pts_bbox_NuScenes/barrier_AP_dist_4.0: 0.4672, pts_bbox_NuScenes/barrier_trans_err: 0.6887, pts_bbox_NuScenes/barrier_scale_err: 0.3445, pts_bbox_NuScenes/barrier_orient_err: 0.2835, pts_bbox_NuScenes/barrier_vel_err: nan, pts_bbox_NuScenes/barrier_attr_err: nan, pts_bbox_NuScenes/motorcycle_AP_dist_0.5: 0.0349, pts_bbox_NuScenes/motorcycle_AP_dist_1.0: 0.0638, pts_bbox_NuScenes/motorcycle_AP_dist_2.0: 0.0832, pts_bbox_NuScenes/motorcycle_AP_dist_4.0: 0.0933, pts_bbox_NuScenes/motorcycle_trans_err: 0.4062, pts_bbox_NuScenes/motorcycle_scale_err: 0.3014, pts_bbox_NuScenes/motorcycle_orient_err: 1.7878, pts_bbox_NuScenes/motorcycle_vel_err: 1.7304, pts_bbox_NuScenes/motorcycle_attr_err: 0.4969, pts_bbox_NuScenes/bicycle_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/bicycle_AP_dist_1.0: 0.0000, pts_bbox_NuScenes/bicycle_AP_dist_2.0: 0.0000, pts_bbox_NuScenes/bicycle_AP_dist_4.0: 0.0000, pts_bbox_NuScenes/bicycle_trans_err: 0.4013, pts_bbox_NuScenes/bicycle_scale_err: 0.2992, pts_bbox_NuScenes/bicycle_orient_err: 1.4667, pts_bbox_NuScenes/bicycle_vel_err: 0.8247, pts_bbox_NuScenes/bicycle_attr_err: 0.2070, pts_bbox_NuScenes/pedestrian_AP_dist_0.5: 0.2973, pts_bbox_NuScenes/pedestrian_AP_dist_1.0: 0.5051, pts_bbox_NuScenes/pedestrian_AP_dist_2.0: 0.5587, pts_bbox_NuScenes/pedestrian_AP_dist_4.0: 0.5959, pts_bbox_NuScenes/pedestrian_trans_err: 0.4443, pts_bbox_NuScenes/pedestrian_scale_err: 0.2880, pts_bbox_NuScenes/pedestrian_orient_err: 1.3964, pts_bbox_NuScenes/pedestrian_vel_err: 1.0257, pts_bbox_NuScenes/pedestrian_attr_err: 0.8428, pts_bbox_NuScenes/traffic_cone_AP_dist_0.5: 0.2199, pts_bbox_NuScenes/traffic_cone_AP_dist_1.0: 0.2600, pts_bbox_NuScenes/traffic_cone_AP_dist_2.0: 0.3008, pts_bbox_NuScenes/traffic_cone_AP_dist_4.0: 0.3729, pts_bbox_NuScenes/traffic_cone_trans_err: 0.3185, pts_bbox_NuScenes/traffic_cone_scale_err: 0.4407, pts_bbox_NuScenes/traffic_cone_orient_err: nan, pts_bbox_NuScenes/traffic_cone_vel_err: nan, pts_bbox_NuScenes/traffic_cone_attr_err: nan, pts_bbox_NuScenes/NDS: 0.2626, pts_bbox_NuScenes/mAP: 0.1887
2025-04-15 22:37:11,742 - mmdet - INFO - Epoch [6][50/1104]	lr: 1.824e-04, eta: 4:22:11, time: 1.039, data_time: 0.094, memory: 12571, loss_cls: 0.5481, loss_bbox: 0.8708, d0.loss_cls: 0.5784, d0.loss_bbox: 1.0201, d1.loss_cls: 0.5577, d1.loss_bbox: 0.9092, d2.loss_cls: 0.5494, d2.loss_bbox: 0.8869, d3.loss_cls: 0.5471, d3.loss_bbox: 0.8791, d4.loss_cls: 0.5464, d4.loss_bbox: 0.8741, aux_task0.loss_heatmap: 0.6485, aux_task0.loss_bbox: 0.2831, aux_task1.loss_heatmap: 0.9213, aux_task1.loss_bbox: 0.3380, aux_task2.loss_heatmap: 0.9915, aux_task2.loss_bbox: 0.3632, aux_task3.loss_heatmap: 0.6959, aux_task3.loss_bbox: 0.2987, aux_task4.loss_heatmap: 0.5658, aux_task4.loss_bbox: 0.3016, aux_task5.loss_heatmap: 0.5410, aux_task5.loss_bbox: 0.3034, loss: 15.0191, grad_norm: 29.2478
2025-04-15 22:37:59,040 - mmdet - INFO - Epoch [6][100/1104]	lr: 1.842e-04, eta: 4:21:22, time: 0.946, data_time: 0.008, memory: 12571, loss_cls: 0.5400, loss_bbox: 0.8648, d0.loss_cls: 0.5692, d0.loss_bbox: 1.0125, d1.loss_cls: 0.5471, d1.loss_bbox: 0.9008, d2.loss_cls: 0.5411, d2.loss_bbox: 0.8774, d3.loss_cls: 0.5396, d3.loss_bbox: 0.8702, d4.loss_cls: 0.5378, d4.loss_bbox: 0.8664, aux_task0.loss_heatmap: 0.6585, aux_task0.loss_bbox: 0.2773, aux_task1.loss_heatmap: 0.9460, aux_task1.loss_bbox: 0.3421, aux_task2.loss_heatmap: 0.9546, aux_task2.loss_bbox: 0.3542, aux_task3.loss_heatmap: 0.7073, aux_task3.loss_bbox: 0.2981, aux_task4.loss_heatmap: 0.5730, aux_task4.loss_bbox: 0.3053, aux_task5.loss_heatmap: 0.5092, aux_task5.loss_bbox: 0.2989, loss: 14.8915, grad_norm: 28.5560
2025-04-15 22:38:46,355 - mmdet - INFO - Epoch [6][150/1104]	lr: 1.860e-04, eta: 4:20:34, time: 0.946, data_time: 0.011, memory: 12571, loss_cls: 0.5377, loss_bbox: 0.8673, d0.loss_cls: 0.5719, d0.loss_bbox: 1.0176, d1.loss_cls: 0.5449, d1.loss_bbox: 0.9077, d2.loss_cls: 0.5381, d2.loss_bbox: 0.8830, d3.loss_cls: 0.5353, d3.loss_bbox: 0.8770, d4.loss_cls: 0.5348, d4.loss_bbox: 0.8721, aux_task0.loss_heatmap: 0.6650, aux_task0.loss_bbox: 0.2835, aux_task1.loss_heatmap: 0.9144, aux_task1.loss_bbox: 0.3391, aux_task2.loss_heatmap: 0.9621, aux_task2.loss_bbox: 0.3643, aux_task3.loss_heatmap: 0.7267, aux_task3.loss_bbox: 0.3001, aux_task4.loss_heatmap: 0.5327, aux_task4.loss_bbox: 0.2996, aux_task5.loss_heatmap: 0.5062, aux_task5.loss_bbox: 0.3021, loss: 14.8832, grad_norm: 29.5556
2025-04-15 22:39:33,273 - mmdet - INFO - Epoch [6][200/1104]	lr: 1.878e-04, eta: 4:19:44, time: 0.938, data_time: 0.009, memory: 12571, loss_cls: 0.5375, loss_bbox: 0.8531, d0.loss_cls: 0.5677, d0.loss_bbox: 1.0080, d1.loss_cls: 0.5456, d1.loss_bbox: 0.8943, d2.loss_cls: 0.5382, d2.loss_bbox: 0.8715, d3.loss_cls: 0.5345, d3.loss_bbox: 0.8635, d4.loss_cls: 0.5347, d4.loss_bbox: 0.8587, aux_task0.loss_heatmap: 0.6523, aux_task0.loss_bbox: 0.2792, aux_task1.loss_heatmap: 0.8999, aux_task1.loss_bbox: 0.3373, aux_task2.loss_heatmap: 0.9539, aux_task2.loss_bbox: 0.3565, aux_task3.loss_heatmap: 0.6991, aux_task3.loss_bbox: 0.2999, aux_task4.loss_heatmap: 0.5360, aux_task4.loss_bbox: 0.2994, aux_task5.loss_heatmap: 0.5065, aux_task5.loss_bbox: 0.3051, loss: 14.7325, grad_norm: 30.4211
2025-04-15 22:40:20,809 - mmdet - INFO - Epoch [6][250/1104]	lr: 1.896e-04, eta: 4:18:56, time: 0.951, data_time: 0.009, memory: 12571, loss_cls: 0.5480, loss_bbox: 0.8626, d0.loss_cls: 0.5769, d0.loss_bbox: 1.0209, d1.loss_cls: 0.5535, d1.loss_bbox: 0.9074, d2.loss_cls: 0.5485, d2.loss_bbox: 0.8832, d3.loss_cls: 0.5463, d3.loss_bbox: 0.8762, d4.loss_cls: 0.5458, d4.loss_bbox: 0.8701, aux_task0.loss_heatmap: 0.6586, aux_task0.loss_bbox: 0.2790, aux_task1.loss_heatmap: 0.9148, aux_task1.loss_bbox: 0.3441, aux_task2.loss_heatmap: 0.9270, aux_task2.loss_bbox: 0.3541, aux_task3.loss_heatmap: 0.7031, aux_task3.loss_bbox: 0.2936, aux_task4.loss_heatmap: 0.5582, aux_task4.loss_bbox: 0.3032, aux_task5.loss_heatmap: 0.5323, aux_task5.loss_bbox: 0.3019, loss: 14.9094, grad_norm: 33.7543
2025-04-15 22:41:08,289 - mmdet - INFO - Epoch [6][300/1104]	lr: 1.913e-04, eta: 4:18:08, time: 0.950, data_time: 0.010, memory: 12571, loss_cls: 0.5405, loss_bbox: 0.8594, d0.loss_cls: 0.5685, d0.loss_bbox: 1.0098, d1.loss_cls: 0.5446, d1.loss_bbox: 0.9047, d2.loss_cls: 0.5408, d2.loss_bbox: 0.8792, d3.loss_cls: 0.5378, d3.loss_bbox: 0.8730, d4.loss_cls: 0.5375, d4.loss_bbox: 0.8676, aux_task0.loss_heatmap: 0.6416, aux_task0.loss_bbox: 0.2759, aux_task1.loss_heatmap: 0.9226, aux_task1.loss_bbox: 0.3358, aux_task2.loss_heatmap: 0.9227, aux_task2.loss_bbox: 0.3647, aux_task3.loss_heatmap: 0.7505, aux_task3.loss_bbox: 0.2953, aux_task4.loss_heatmap: 0.5447, aux_task4.loss_bbox: 0.2919, aux_task5.loss_heatmap: 0.5438, aux_task5.loss_bbox: 0.3043, loss: 14.8574, grad_norm: 30.0093
2025-04-15 22:41:55,451 - mmdet - INFO - Epoch [6][350/1104]	lr: 1.931e-04, eta: 4:17:19, time: 0.943, data_time: 0.009, memory: 12571, loss_cls: 0.5445, loss_bbox: 0.8665, d0.loss_cls: 0.5730, d0.loss_bbox: 1.0108, d1.loss_cls: 0.5484, d1.loss_bbox: 0.9079, d2.loss_cls: 0.5433, d2.loss_bbox: 0.8835, d3.loss_cls: 0.5415, d3.loss_bbox: 0.8778, d4.loss_cls: 0.5424, d4.loss_bbox: 0.8745, aux_task0.loss_heatmap: 0.6566, aux_task0.loss_bbox: 0.2816, aux_task1.loss_heatmap: 0.9425, aux_task1.loss_bbox: 0.3451, aux_task2.loss_heatmap: 0.9740, aux_task2.loss_bbox: 0.3663, aux_task3.loss_heatmap: 0.6695, aux_task3.loss_bbox: 0.2923, aux_task4.loss_heatmap: 0.5534, aux_task4.loss_bbox: 0.3015, aux_task5.loss_heatmap: 0.5026, aux_task5.loss_bbox: 0.2993, loss: 14.8990, grad_norm: 28.1501
2025-04-15 22:42:42,953 - mmdet - INFO - Epoch [6][400/1104]	lr: 1.948e-04, eta: 4:16:31, time: 0.950, data_time: 0.009, memory: 12571, loss_cls: 0.5290, loss_bbox: 0.8458, d0.loss_cls: 0.5615, d0.loss_bbox: 0.9977, d1.loss_cls: 0.5356, d1.loss_bbox: 0.8929, d2.loss_cls: 0.5296, d2.loss_bbox: 0.8699, d3.loss_cls: 0.5292, d3.loss_bbox: 0.8616, d4.loss_cls: 0.5270, d4.loss_bbox: 0.8551, aux_task0.loss_heatmap: 0.6383, aux_task0.loss_bbox: 0.2736, aux_task1.loss_heatmap: 0.8896, aux_task1.loss_bbox: 0.3361, aux_task2.loss_heatmap: 0.9723, aux_task2.loss_bbox: 0.3481, aux_task3.loss_heatmap: 0.6581, aux_task3.loss_bbox: 0.2913, aux_task4.loss_heatmap: 0.5337, aux_task4.loss_bbox: 0.2965, aux_task5.loss_heatmap: 0.5083, aux_task5.loss_bbox: 0.2999, loss: 14.5806, grad_norm: 27.5597
2025-04-15 22:43:30,275 - mmdet - INFO - Epoch [6][450/1104]	lr: 1.965e-04, eta: 4:15:43, time: 0.946, data_time: 0.010, memory: 12571, loss_cls: 0.5375, loss_bbox: 0.8623, d0.loss_cls: 0.5695, d0.loss_bbox: 1.0134, d1.loss_cls: 0.5476, d1.loss_bbox: 0.9089, d2.loss_cls: 0.5407, d2.loss_bbox: 0.8857, d3.loss_cls: 0.5389, d3.loss_bbox: 0.8769, d4.loss_cls: 0.5376, d4.loss_bbox: 0.8700, aux_task0.loss_heatmap: 0.6464, aux_task0.loss_bbox: 0.2753, aux_task1.loss_heatmap: 0.8938, aux_task1.loss_bbox: 0.3435, aux_task2.loss_heatmap: 0.9624, aux_task2.loss_bbox: 0.3620, aux_task3.loss_heatmap: 0.6746, aux_task3.loss_bbox: 0.2870, aux_task4.loss_heatmap: 0.5611, aux_task4.loss_bbox: 0.3044, aux_task5.loss_heatmap: 0.5263, aux_task5.loss_bbox: 0.3025, loss: 14.8283, grad_norm: 29.8764
2025-04-15 22:44:17,655 - mmdet - INFO - Epoch [6][500/1104]	lr: 1.982e-04, eta: 4:14:55, time: 0.948, data_time: 0.009, memory: 12571, loss_cls: 0.5345, loss_bbox: 0.8565, d0.loss_cls: 0.5648, d0.loss_bbox: 1.0097, d1.loss_cls: 0.5425, d1.loss_bbox: 0.9011, d2.loss_cls: 0.5373, d2.loss_bbox: 0.8778, d3.loss_cls: 0.5346, d3.loss_bbox: 0.8707, d4.loss_cls: 0.5335, d4.loss_bbox: 0.8633, aux_task0.loss_heatmap: 0.6464, aux_task0.loss_bbox: 0.2760, aux_task1.loss_heatmap: 0.9224, aux_task1.loss_bbox: 0.3343, aux_task2.loss_heatmap: 0.9266, aux_task2.loss_bbox: 0.3577, aux_task3.loss_heatmap: 0.7046, aux_task3.loss_bbox: 0.2934, aux_task4.loss_heatmap: 0.5402, aux_task4.loss_bbox: 0.2970, aux_task5.loss_heatmap: 0.5062, aux_task5.loss_bbox: 0.3019, loss: 14.7330, grad_norm: 33.6323
2025-04-15 22:45:04,694 - mmdet - INFO - Epoch [6][550/1104]	lr: 1.999e-04, eta: 4:14:05, time: 0.941, data_time: 0.008, memory: 12571, loss_cls: 0.5284, loss_bbox: 0.8516, d0.loss_cls: 0.5608, d0.loss_bbox: 1.0090, d1.loss_cls: 0.5381, d1.loss_bbox: 0.8976, d2.loss_cls: 0.5321, d2.loss_bbox: 0.8752, d3.loss_cls: 0.5276, d3.loss_bbox: 0.8687, d4.loss_cls: 0.5269, d4.loss_bbox: 0.8568, aux_task0.loss_heatmap: 0.6380, aux_task0.loss_bbox: 0.2763, aux_task1.loss_heatmap: 0.8822, aux_task1.loss_bbox: 0.3323, aux_task2.loss_heatmap: 0.9511, aux_task2.loss_bbox: 0.3566, aux_task3.loss_heatmap: 0.7046, aux_task3.loss_bbox: 0.2972, aux_task4.loss_heatmap: 0.5279, aux_task4.loss_bbox: 0.3009, aux_task5.loss_heatmap: 0.5075, aux_task5.loss_bbox: 0.2999, loss: 14.6471, grad_norm: 31.3192
2025-04-15 22:45:52,003 - mmdet - INFO - Epoch [6][600/1104]	lr: 2.016e-04, eta: 4:13:17, time: 0.946, data_time: 0.008, memory: 12571, loss_cls: 0.5299, loss_bbox: 0.8510, d0.loss_cls: 0.5580, d0.loss_bbox: 0.9979, d1.loss_cls: 0.5334, d1.loss_bbox: 0.8934, d2.loss_cls: 0.5295, d2.loss_bbox: 0.8695, d3.loss_cls: 0.5270, d3.loss_bbox: 0.8645, d4.loss_cls: 0.5258, d4.loss_bbox: 0.8556, aux_task0.loss_heatmap: 0.6601, aux_task0.loss_bbox: 0.2762, aux_task1.loss_heatmap: 0.9005, aux_task1.loss_bbox: 0.3339, aux_task2.loss_heatmap: 0.9285, aux_task2.loss_bbox: 0.3582, aux_task3.loss_heatmap: 0.7085, aux_task3.loss_bbox: 0.2936, aux_task4.loss_heatmap: 0.4981, aux_task4.loss_bbox: 0.2906, aux_task5.loss_heatmap: 0.4943, aux_task5.loss_bbox: 0.3039, loss: 14.5817, grad_norm: 28.5637
2025-04-15 22:46:39,411 - mmdet - INFO - Epoch [6][650/1104]	lr: 2.032e-04, eta: 4:12:29, time: 0.948, data_time: 0.010, memory: 12571, loss_cls: 0.5371, loss_bbox: 0.8591, d0.loss_cls: 0.5664, d0.loss_bbox: 1.0135, d1.loss_cls: 0.5467, d1.loss_bbox: 0.9022, d2.loss_cls: 0.5400, d2.loss_bbox: 0.8807, d3.loss_cls: 0.5370, d3.loss_bbox: 0.8726, d4.loss_cls: 0.5352, d4.loss_bbox: 0.8645, aux_task0.loss_heatmap: 0.6544, aux_task0.loss_bbox: 0.2750, aux_task1.loss_heatmap: 0.8756, aux_task1.loss_bbox: 0.3389, aux_task2.loss_heatmap: 0.9723, aux_task2.loss_bbox: 0.3675, aux_task3.loss_heatmap: 0.7477, aux_task3.loss_bbox: 0.2966, aux_task4.loss_heatmap: 0.5516, aux_task4.loss_bbox: 0.2961, aux_task5.loss_heatmap: 0.5236, aux_task5.loss_bbox: 0.2989, loss: 14.8534, grad_norm: 34.8057
2025-04-15 22:47:28,690 - mmdet - INFO - Epoch [6][700/1104]	lr: 2.048e-04, eta: 4:11:46, time: 0.986, data_time: 0.012, memory: 12571, loss_cls: 0.5341, loss_bbox: 0.8382, d0.loss_cls: 0.5661, d0.loss_bbox: 0.9988, d1.loss_cls: 0.5421, d1.loss_bbox: 0.8899, d2.loss_cls: 0.5359, d2.loss_bbox: 0.8659, d3.loss_cls: 0.5344, d3.loss_bbox: 0.8565, d4.loss_cls: 0.5321, d4.loss_bbox: 0.8461, aux_task0.loss_heatmap: 0.6513, aux_task0.loss_bbox: 0.2730, aux_task1.loss_heatmap: 0.8805, aux_task1.loss_bbox: 0.3368, aux_task2.loss_heatmap: 0.9228, aux_task2.loss_bbox: 0.3561, aux_task3.loss_heatmap: 0.7385, aux_task3.loss_bbox: 0.2911, aux_task4.loss_heatmap: 0.5198, aux_task4.loss_bbox: 0.2983, aux_task5.loss_heatmap: 0.5287, aux_task5.loss_bbox: 0.2976, loss: 14.6346, grad_norm: 32.1456
2025-04-15 22:48:15,960 - mmdet - INFO - Epoch [6][750/1104]	lr: 2.064e-04, eta: 4:10:57, time: 0.945, data_time: 0.010, memory: 12571, loss_cls: 0.5314, loss_bbox: 0.8441, d0.loss_cls: 0.5611, d0.loss_bbox: 0.9938, d1.loss_cls: 0.5356, d1.loss_bbox: 0.8913, d2.loss_cls: 0.5296, d2.loss_bbox: 0.8698, d3.loss_cls: 0.5280, d3.loss_bbox: 0.8611, d4.loss_cls: 0.5283, d4.loss_bbox: 0.8505, aux_task0.loss_heatmap: 0.6368, aux_task0.loss_bbox: 0.2701, aux_task1.loss_heatmap: 0.8888, aux_task1.loss_bbox: 0.3343, aux_task2.loss_heatmap: 0.9125, aux_task2.loss_bbox: 0.3516, aux_task3.loss_heatmap: 0.7086, aux_task3.loss_bbox: 0.2895, aux_task4.loss_heatmap: 0.5350, aux_task4.loss_bbox: 0.3016, aux_task5.loss_heatmap: 0.5190, aux_task5.loss_bbox: 0.3003, loss: 14.5730, grad_norm: 27.9318
2025-04-15 22:49:02,978 - mmdet - INFO - Epoch [6][800/1104]	lr: 2.080e-04, eta: 4:10:08, time: 0.940, data_time: 0.008, memory: 12571, loss_cls: 0.5215, loss_bbox: 0.8430, d0.loss_cls: 0.5551, d0.loss_bbox: 0.9986, d1.loss_cls: 0.5294, d1.loss_bbox: 0.8895, d2.loss_cls: 0.5249, d2.loss_bbox: 0.8679, d3.loss_cls: 0.5219, d3.loss_bbox: 0.8576, d4.loss_cls: 0.5214, d4.loss_bbox: 0.8490, aux_task0.loss_heatmap: 0.6420, aux_task0.loss_bbox: 0.2764, aux_task1.loss_heatmap: 0.8727, aux_task1.loss_bbox: 0.3353, aux_task2.loss_heatmap: 0.9124, aux_task2.loss_bbox: 0.3546, aux_task3.loss_heatmap: 0.6787, aux_task3.loss_bbox: 0.2853, aux_task4.loss_heatmap: 0.5324, aux_task4.loss_bbox: 0.2962, aux_task5.loss_heatmap: 0.5029, aux_task5.loss_bbox: 0.3019, loss: 14.4707, grad_norm: 30.3399
2025-04-15 22:49:49,985 - mmdet - INFO - Epoch [6][850/1104]	lr: 2.095e-04, eta: 4:09:19, time: 0.940, data_time: 0.008, memory: 12571, loss_cls: 0.5239, loss_bbox: 0.8400, d0.loss_cls: 0.5532, d0.loss_bbox: 0.9921, d1.loss_cls: 0.5298, d1.loss_bbox: 0.8881, d2.loss_cls: 0.5252, d2.loss_bbox: 0.8652, d3.loss_cls: 0.5240, d3.loss_bbox: 0.8532, d4.loss_cls: 0.5229, d4.loss_bbox: 0.8436, aux_task0.loss_heatmap: 0.6314, aux_task0.loss_bbox: 0.2646, aux_task1.loss_heatmap: 0.8908, aux_task1.loss_bbox: 0.3350, aux_task2.loss_heatmap: 0.9163, aux_task2.loss_bbox: 0.3582, aux_task3.loss_heatmap: 0.7389, aux_task3.loss_bbox: 0.3009, aux_task4.loss_heatmap: 0.5221, aux_task4.loss_bbox: 0.2935, aux_task5.loss_heatmap: 0.5105, aux_task5.loss_bbox: 0.2971, loss: 14.5203, grad_norm: 28.0503
2025-04-15 22:50:37,566 - mmdet - INFO - Epoch [6][900/1104]	lr: 2.110e-04, eta: 4:08:31, time: 0.952, data_time: 0.008, memory: 12571, loss_cls: 0.5270, loss_bbox: 0.8390, d0.loss_cls: 0.5557, d0.loss_bbox: 0.9907, d1.loss_cls: 0.5310, d1.loss_bbox: 0.8890, d2.loss_cls: 0.5267, d2.loss_bbox: 0.8666, d3.loss_cls: 0.5259, d3.loss_bbox: 0.8537, d4.loss_cls: 0.5255, d4.loss_bbox: 0.8443, aux_task0.loss_heatmap: 0.6295, aux_task0.loss_bbox: 0.2694, aux_task1.loss_heatmap: 0.9114, aux_task1.loss_bbox: 0.3316, aux_task2.loss_heatmap: 0.9193, aux_task2.loss_bbox: 0.3578, aux_task3.loss_heatmap: 0.6895, aux_task3.loss_bbox: 0.2957, aux_task4.loss_heatmap: 0.5498, aux_task4.loss_bbox: 0.2870, aux_task5.loss_heatmap: 0.4876, aux_task5.loss_bbox: 0.3007, loss: 14.5045, grad_norm: 25.2190
2025-04-15 22:51:24,806 - mmdet - INFO - Epoch [6][950/1104]	lr: 2.125e-04, eta: 4:07:43, time: 0.945, data_time: 0.008, memory: 12571, loss_cls: 0.5264, loss_bbox: 0.8358, d0.loss_cls: 0.5531, d0.loss_bbox: 0.9938, d1.loss_cls: 0.5335, d1.loss_bbox: 0.8859, d2.loss_cls: 0.5260, d2.loss_bbox: 0.8668, d3.loss_cls: 0.5251, d3.loss_bbox: 0.8540, d4.loss_cls: 0.5230, d4.loss_bbox: 0.8438, aux_task0.loss_heatmap: 0.6335, aux_task0.loss_bbox: 0.2671, aux_task1.loss_heatmap: 0.9044, aux_task1.loss_bbox: 0.3295, aux_task2.loss_heatmap: 0.8931, aux_task2.loss_bbox: 0.3458, aux_task3.loss_heatmap: 0.6995, aux_task3.loss_bbox: 0.2980, aux_task4.loss_heatmap: 0.5120, aux_task4.loss_bbox: 0.2897, aux_task5.loss_heatmap: 0.5171, aux_task5.loss_bbox: 0.3018, loss: 14.4585, grad_norm: 30.2937
2025-04-15 22:52:11,790 - mmdet - INFO - Epoch [6][1000/1104]	lr: 2.140e-04, eta: 4:06:53, time: 0.940, data_time: 0.009, memory: 12571, loss_cls: 0.5261, loss_bbox: 0.8345, d0.loss_cls: 0.5510, d0.loss_bbox: 0.9835, d1.loss_cls: 0.5283, d1.loss_bbox: 0.8827, d2.loss_cls: 0.5239, d2.loss_bbox: 0.8641, d3.loss_cls: 0.5220, d3.loss_bbox: 0.8494, d4.loss_cls: 0.5224, d4.loss_bbox: 0.8412, aux_task0.loss_heatmap: 0.6213, aux_task0.loss_bbox: 0.2647, aux_task1.loss_heatmap: 0.9096, aux_task1.loss_bbox: 0.3354, aux_task2.loss_heatmap: 0.9004, aux_task2.loss_bbox: 0.3509, aux_task3.loss_heatmap: 0.6993, aux_task3.loss_bbox: 0.2890, aux_task4.loss_heatmap: 0.5145, aux_task4.loss_bbox: 0.2919, aux_task5.loss_heatmap: 0.4961, aux_task5.loss_bbox: 0.2962, loss: 14.3983, grad_norm: 28.2358
2025-04-15 22:52:59,039 - mmdet - INFO - Epoch [6][1050/1104]	lr: 2.155e-04, eta: 4:06:05, time: 0.945, data_time: 0.008, memory: 12571, loss_cls: 0.5195, loss_bbox: 0.8323, d0.loss_cls: 0.5496, d0.loss_bbox: 0.9867, d1.loss_cls: 0.5249, d1.loss_bbox: 0.8860, d2.loss_cls: 0.5197, d2.loss_bbox: 0.8652, d3.loss_cls: 0.5172, d3.loss_bbox: 0.8505, d4.loss_cls: 0.5178, d4.loss_bbox: 0.8400, aux_task0.loss_heatmap: 0.6359, aux_task0.loss_bbox: 0.2714, aux_task1.loss_heatmap: 0.8890, aux_task1.loss_bbox: 0.3390, aux_task2.loss_heatmap: 0.8895, aux_task2.loss_bbox: 0.3460, aux_task3.loss_heatmap: 0.7009, aux_task3.loss_bbox: 0.2912, aux_task4.loss_heatmap: 0.5240, aux_task4.loss_bbox: 0.2938, aux_task5.loss_heatmap: 0.4993, aux_task5.loss_bbox: 0.2970, loss: 14.3866, grad_norm: 28.3911
2025-04-15 22:53:46,507 - mmdet - INFO - Epoch [6][1100/1104]	lr: 2.169e-04, eta: 4:05:17, time: 0.949, data_time: 0.009, memory: 12571, loss_cls: 0.5103, loss_bbox: 0.8289, d0.loss_cls: 0.5421, d0.loss_bbox: 0.9808, d1.loss_cls: 0.5171, d1.loss_bbox: 0.8815, d2.loss_cls: 0.5125, d2.loss_bbox: 0.8590, d3.loss_cls: 0.5090, d3.loss_bbox: 0.8449, d4.loss_cls: 0.5085, d4.loss_bbox: 0.8361, aux_task0.loss_heatmap: 0.6238, aux_task0.loss_bbox: 0.2605, aux_task1.loss_heatmap: 0.8837, aux_task1.loss_bbox: 0.3327, aux_task2.loss_heatmap: 0.9018, aux_task2.loss_bbox: 0.3515, aux_task3.loss_heatmap: 0.6646, aux_task3.loss_bbox: 0.2896, aux_task4.loss_heatmap: 0.5158, aux_task4.loss_bbox: 0.2906, aux_task5.loss_heatmap: 0.4784, aux_task5.loss_bbox: 0.2983, loss: 14.2219, grad_norm: 28.0411
2025-04-15 22:53:50,775 - mmdet - INFO - Saving checkpoint at 6 epochs
2025-04-15 23:05:16,764 - mmdet - INFO - Exp name: DSSMambaGigantic_layer3_rope_drop01.py
2025-04-15 23:05:16,764 - mmdet - INFO - Epoch(val) [6][3010]	pts_bbox_NuScenes/car_AP_dist_0.5: 0.2376, pts_bbox_NuScenes/car_AP_dist_1.0: 0.4279, pts_bbox_NuScenes/car_AP_dist_2.0: 0.5104, pts_bbox_NuScenes/car_AP_dist_4.0: 0.5746, pts_bbox_NuScenes/car_trans_err: 0.4185, pts_bbox_NuScenes/car_scale_err: 0.1929, pts_bbox_NuScenes/car_orient_err: 0.7227, pts_bbox_NuScenes/car_vel_err: 1.2849, pts_bbox_NuScenes/car_attr_err: 0.4160, pts_bbox_NuScenes/mATE: 0.6019, pts_bbox_NuScenes/mASE: 0.3164, pts_bbox_NuScenes/mAOE: 1.1080, pts_bbox_NuScenes/mAVE: 1.1289, pts_bbox_NuScenes/mAAE: 0.4436, pts_bbox_NuScenes/truck_AP_dist_0.5: 0.0167, pts_bbox_NuScenes/truck_AP_dist_1.0: 0.0985, pts_bbox_NuScenes/truck_AP_dist_2.0: 0.1866, pts_bbox_NuScenes/truck_AP_dist_4.0: 0.2378, pts_bbox_NuScenes/truck_trans_err: 0.6841, pts_bbox_NuScenes/truck_scale_err: 0.2662, pts_bbox_NuScenes/truck_orient_err: 0.7754, pts_bbox_NuScenes/truck_vel_err: 0.8062, pts_bbox_NuScenes/truck_attr_err: 0.3559, pts_bbox_NuScenes/construction_vehicle_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/construction_vehicle_AP_dist_1.0: 0.0003, pts_bbox_NuScenes/construction_vehicle_AP_dist_2.0: 0.0107, pts_bbox_NuScenes/construction_vehicle_AP_dist_4.0: 0.0226, pts_bbox_NuScenes/construction_vehicle_trans_err: 0.8515, pts_bbox_NuScenes/construction_vehicle_scale_err: 0.4837, pts_bbox_NuScenes/construction_vehicle_orient_err: 1.4711, pts_bbox_NuScenes/construction_vehicle_vel_err: 0.1410, pts_bbox_NuScenes/construction_vehicle_attr_err: 0.3392, pts_bbox_NuScenes/bus_AP_dist_0.5: 0.0049, pts_bbox_NuScenes/bus_AP_dist_1.0: 0.1318, pts_bbox_NuScenes/bus_AP_dist_2.0: 0.2789, pts_bbox_NuScenes/bus_AP_dist_4.0: 0.3601, pts_bbox_NuScenes/bus_trans_err: 0.7821, pts_bbox_NuScenes/bus_scale_err: 0.2530, pts_bbox_NuScenes/bus_orient_err: 0.9322, pts_bbox_NuScenes/bus_vel_err: 2.5470, pts_bbox_NuScenes/bus_attr_err: 0.6824, pts_bbox_NuScenes/trailer_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/trailer_AP_dist_1.0: 0.0026, pts_bbox_NuScenes/trailer_AP_dist_2.0: 0.0477, pts_bbox_NuScenes/trailer_AP_dist_4.0: 0.1075, pts_bbox_NuScenes/trailer_trans_err: 0.9828, pts_bbox_NuScenes/trailer_scale_err: 0.2902, pts_bbox_NuScenes/trailer_orient_err: 1.2046, pts_bbox_NuScenes/trailer_vel_err: 0.4528, pts_bbox_NuScenes/trailer_attr_err: 0.2593, pts_bbox_NuScenes/barrier_AP_dist_0.5: 0.1136, pts_bbox_NuScenes/barrier_AP_dist_1.0: 0.3189, pts_bbox_NuScenes/barrier_AP_dist_2.0: 0.4952, pts_bbox_NuScenes/barrier_AP_dist_4.0: 0.5733, pts_bbox_NuScenes/barrier_trans_err: 0.6493, pts_bbox_NuScenes/barrier_scale_err: 0.3492, pts_bbox_NuScenes/barrier_orient_err: 0.5133, pts_bbox_NuScenes/barrier_vel_err: nan, pts_bbox_NuScenes/barrier_attr_err: nan, pts_bbox_NuScenes/motorcycle_AP_dist_0.5: 0.0468, pts_bbox_NuScenes/motorcycle_AP_dist_1.0: 0.0896, pts_bbox_NuScenes/motorcycle_AP_dist_2.0: 0.1134, pts_bbox_NuScenes/motorcycle_AP_dist_4.0: 0.1271, pts_bbox_NuScenes/motorcycle_trans_err: 0.4295, pts_bbox_NuScenes/motorcycle_scale_err: 0.2895, pts_bbox_NuScenes/motorcycle_orient_err: 1.3490, pts_bbox_NuScenes/motorcycle_vel_err: 1.8852, pts_bbox_NuScenes/motorcycle_attr_err: 0.4644, pts_bbox_NuScenes/bicycle_AP_dist_0.5: 0.0000, pts_bbox_NuScenes/bicycle_AP_dist_1.0: 0.0005, pts_bbox_NuScenes/bicycle_AP_dist_2.0: 0.0014, pts_bbox_NuScenes/bicycle_AP_dist_4.0: 0.0021, pts_bbox_NuScenes/bicycle_trans_err: 0.4018, pts_bbox_NuScenes/bicycle_scale_err: 0.3130, pts_bbox_NuScenes/bicycle_orient_err: 1.4097, pts_bbox_NuScenes/bicycle_vel_err: 0.9383, pts_bbox_NuScenes/bicycle_attr_err: 0.2223, pts_bbox_NuScenes/pedestrian_AP_dist_0.5: 0.2700, pts_bbox_NuScenes/pedestrian_AP_dist_1.0: 0.5177, pts_bbox_NuScenes/pedestrian_AP_dist_2.0: 0.5914, pts_bbox_NuScenes/pedestrian_AP_dist_4.0: 0.6301, pts_bbox_NuScenes/pedestrian_trans_err: 0.4713, pts_bbox_NuScenes/pedestrian_scale_err: 0.2913, pts_bbox_NuScenes/pedestrian_orient_err: 1.5937, pts_bbox_NuScenes/pedestrian_vel_err: 0.9759, pts_bbox_NuScenes/pedestrian_attr_err: 0.8095, pts_bbox_NuScenes/traffic_cone_AP_dist_0.5: 0.2038, pts_bbox_NuScenes/traffic_cone_AP_dist_1.0: 0.2490, pts_bbox_NuScenes/traffic_cone_AP_dist_2.0: 0.2909, pts_bbox_NuScenes/traffic_cone_AP_dist_4.0: 0.3662, pts_bbox_NuScenes/traffic_cone_trans_err: 0.3482, pts_bbox_NuScenes/traffic_cone_scale_err: 0.4346, pts_bbox_NuScenes/traffic_cone_orient_err: nan, pts_bbox_NuScenes/traffic_cone_vel_err: nan, pts_bbox_NuScenes/traffic_cone_attr_err: nan, pts_bbox_NuScenes/NDS: 0.2670, pts_bbox_NuScenes/mAP: 0.2065
2025-04-15 23:06:09,852 - mmdet - INFO - Epoch [7][50/1104]	lr: 2.184e-04, eta: 4:04:27, time: 1.037, data_time: 0.094, memory: 12571, loss_cls: 0.5248, loss_bbox: 0.8237, d0.loss_cls: 0.5530, d0.loss_bbox: 0.9772, d1.loss_cls: 0.5301, d1.loss_bbox: 0.8758, d2.loss_cls: 0.5247, d2.loss_bbox: 0.8556, d3.loss_cls: 0.5233, d3.loss_bbox: 0.8418, d4.loss_cls: 0.5220, d4.loss_bbox: 0.8316, aux_task0.loss_heatmap: 0.6261, aux_task0.loss_bbox: 0.2612, aux_task1.loss_heatmap: 0.8781, aux_task1.loss_bbox: 0.3229, aux_task2.loss_heatmap: 0.9395, aux_task2.loss_bbox: 0.3537, aux_task3.loss_heatmap: 0.6975, aux_task3.loss_bbox: 0.2984, aux_task4.loss_heatmap: 0.5475, aux_task4.loss_bbox: 0.2908, aux_task5.loss_heatmap: 0.4993, aux_task5.loss_bbox: 0.2941, loss: 14.3927, grad_norm: 29.7626
2025-04-15 23:06:57,056 - mmdet - INFO - Epoch [7][100/1104]	lr: 2.198e-04, eta: 4:03:38, time: 0.944, data_time: 0.010, memory: 12571, loss_cls: 0.5119, loss_bbox: 0.8245, d0.loss_cls: 0.5382, d0.loss_bbox: 0.9719, d1.loss_cls: 0.5168, d1.loss_bbox: 0.8733, d2.loss_cls: 0.5101, d2.loss_bbox: 0.8573, d3.loss_cls: 0.5096, d3.loss_bbox: 0.8417, d4.loss_cls: 0.5086, d4.loss_bbox: 0.8329, aux_task0.loss_heatmap: 0.6280, aux_task0.loss_bbox: 0.2659, aux_task1.loss_heatmap: 0.9039, aux_task1.loss_bbox: 0.3355, aux_task2.loss_heatmap: 0.8997, aux_task2.loss_bbox: 0.3380, aux_task3.loss_heatmap: 0.6317, aux_task3.loss_bbox: 0.2859, aux_task4.loss_heatmap: 0.5257, aux_task4.loss_bbox: 0.2982, aux_task5.loss_heatmap: 0.4943, aux_task5.loss_bbox: 0.2952, loss: 14.1989, grad_norm: 25.1348
2025-04-15 23:07:44,336 - mmdet - INFO - Epoch [7][150/1104]	lr: 2.212e-04, eta: 4:02:50, time: 0.946, data_time: 0.009, memory: 12571, loss_cls: 0.5141, loss_bbox: 0.8214, d0.loss_cls: 0.5415, d0.loss_bbox: 0.9834, d1.loss_cls: 0.5185, d1.loss_bbox: 0.8797, d2.loss_cls: 0.5136, d2.loss_bbox: 0.8577, d3.loss_cls: 0.5115, d3.loss_bbox: 0.8425, d4.loss_cls: 0.5112, d4.loss_bbox: 0.8310, aux_task0.loss_heatmap: 0.6469, aux_task0.loss_bbox: 0.2672, aux_task1.loss_heatmap: 0.8611, aux_task1.loss_bbox: 0.3263, aux_task2.loss_heatmap: 0.9032, aux_task2.loss_bbox: 0.3518, aux_task3.loss_heatmap: 0.7097, aux_task3.loss_bbox: 0.3034, aux_task4.loss_heatmap: 0.5036, aux_task4.loss_bbox: 0.2874, aux_task5.loss_heatmap: 0.4866, aux_task5.loss_bbox: 0.2959, loss: 14.2691, grad_norm: 30.8384
2025-04-15 23:08:31,752 - mmdet - INFO - Epoch [7][200/1104]	lr: 2.225e-04, eta: 4:02:02, time: 0.948, data_time: 0.009, memory: 12571, loss_cls: 0.5033, loss_bbox: 0.8154, d0.loss_cls: 0.5315, d0.loss_bbox: 0.9725, d1.loss_cls: 0.5112, d1.loss_bbox: 0.8695, d2.loss_cls: 0.5055, d2.loss_bbox: 0.8465, d3.loss_cls: 0.5027, d3.loss_bbox: 0.8357, d4.loss_cls: 0.5022, d4.loss_bbox: 0.8231, aux_task0.loss_heatmap: 0.6237, aux_task0.loss_bbox: 0.2592, aux_task1.loss_heatmap: 0.8478, aux_task1.loss_bbox: 0.3271, aux_task2.loss_heatmap: 0.8905, aux_task2.loss_bbox: 0.3488, aux_task3.loss_heatmap: 0.6602, aux_task3.loss_bbox: 0.2859, aux_task4.loss_heatmap: 0.5094, aux_task4.loss_bbox: 0.2868, aux_task5.loss_heatmap: 0.4907, aux_task5.loss_bbox: 0.3013, loss: 14.0505, grad_norm: 30.2367
2025-04-15 23:09:19,140 - mmdet - INFO - Epoch [7][250/1104]	lr: 2.238e-04, eta: 4:01:14, time: 0.948, data_time: 0.010, memory: 12571, loss_cls: 0.5102, loss_bbox: 0.8042, d0.loss_cls: 0.5376, d0.loss_bbox: 0.9656, d1.loss_cls: 0.5170, d1.loss_bbox: 0.8617, d2.loss_cls: 0.5106, d2.loss_bbox: 0.8372, d3.loss_cls: 0.5100, d3.loss_bbox: 0.8235, d4.loss_cls: 0.5077, d4.loss_bbox: 0.8127, aux_task0.loss_heatmap: 0.5898, aux_task0.loss_bbox: 0.2531, aux_task1.loss_heatmap: 0.8795, aux_task1.loss_bbox: 0.3300, aux_task2.loss_heatmap: 0.8823, aux_task2.loss_bbox: 0.3469, aux_task3.loss_heatmap: 0.6538, aux_task3.loss_bbox: 0.2885, aux_task4.loss_heatmap: 0.5357, aux_task4.loss_bbox: 0.2912, aux_task5.loss_heatmap: 0.5012, aux_task5.loss_bbox: 0.3002, loss: 14.0500, grad_norm: 26.8707
2025-04-15 23:10:06,489 - mmdet - INFO - Epoch [7][300/1104]	lr: 2.250e-04, eta: 4:00:26, time: 0.947, data_time: 0.011, memory: 12571, loss_cls: 0.5079, loss_bbox: 0.8223, d0.loss_cls: 0.5359, d0.loss_bbox: 0.9743, d1.loss_cls: 0.5151, d1.loss_bbox: 0.8739, d2.loss_cls: 0.5099, d2.loss_bbox: 0.8504, d3.loss_cls: 0.5074, d3.loss_bbox: 0.8413, d4.loss_cls: 0.5060, d4.loss_bbox: 0.8314, aux_task0.loss_heatmap: 0.6248, aux_task0.loss_bbox: 0.2599, aux_task1.loss_heatmap: 0.8948, aux_task1.loss_bbox: 0.3315, aux_task2.loss_heatmap: 0.8723, aux_task2.loss_bbox: 0.3548, aux_task3.loss_heatmap: 0.6677, aux_task3.loss_bbox: 0.2873, aux_task4.loss_heatmap: 0.5143, aux_task4.loss_bbox: 0.2883, aux_task5.loss_heatmap: 0.4708, aux_task5.loss_bbox: 0.2999, loss: 14.1423, grad_norm: 25.7529
2025-04-15 23:10:53,568 - mmdet - INFO - Epoch [7][350/1104]	lr: 2.263e-04, eta: 3:59:37, time: 0.942, data_time: 0.011, memory: 12571, loss_cls: 0.5191, loss_bbox: 0.8189, d0.loss_cls: 0.5457, d0.loss_bbox: 0.9782, d1.loss_cls: 0.5250, d1.loss_bbox: 0.8729, d2.loss_cls: 0.5197, d2.loss_bbox: 0.8500, d3.loss_cls: 0.5185, d3.loss_bbox: 0.8397, d4.loss_cls: 0.5180, d4.loss_bbox: 0.8252, aux_task0.loss_heatmap: 0.6469, aux_task0.loss_bbox: 0.2598, aux_task1.loss_heatmap: 0.9085, aux_task1.loss_bbox: 0.3375, aux_task2.loss_heatmap: 0.9277, aux_task2.loss_bbox: 0.3546, aux_task3.loss_heatmap: 0.6498, aux_task3.loss_bbox: 0.2884, aux_task4.loss_heatmap: 0.5352, aux_task4.loss_bbox: 0.2909, aux_task5.loss_heatmap: 0.4963, aux_task5.loss_bbox: 0.2962, loss: 14.3226, grad_norm: 27.6977
2025-04-15 23:11:40,942 - mmdet - INFO - Epoch [7][400/1104]	lr: 2.275e-04, eta: 3:58:49, time: 0.947, data_time: 0.009, memory: 12571, loss_cls: 0.5135, loss_bbox: 0.8098, d0.loss_cls: 0.5414, d0.loss_bbox: 0.9674, d1.loss_cls: 0.5194, d1.loss_bbox: 0.8589, d2.loss_cls: 0.5149, d2.loss_bbox: 0.8386, d3.loss_cls: 0.5121, d3.loss_bbox: 0.8313, d4.loss_cls: 0.5122, d4.loss_bbox: 0.8177, aux_task0.loss_heatmap: 0.6070, aux_task0.loss_bbox: 0.2537, aux_task1.loss_heatmap: 0.8544, aux_task1.loss_bbox: 0.3307, aux_task2.loss_heatmap: 0.9297, aux_task2.loss_bbox: 0.3431, aux_task3.loss_heatmap: 0.7129, aux_task3.loss_bbox: 0.2958, aux_task4.loss_heatmap: 0.4885, aux_task4.loss_bbox: 0.2888, aux_task5.loss_heatmap: 0.5102, aux_task5.loss_bbox: 0.2987, loss: 14.1506, grad_norm: 26.4803
2025-04-15 23:12:28,276 - mmdet - INFO - Epoch [7][450/1104]	lr: 2.287e-04, eta: 3:58:01, time: 0.947, data_time: 0.009, memory: 12571, loss_cls: 0.5086, loss_bbox: 0.8031, d0.loss_cls: 0.5347, d0.loss_bbox: 0.9573, d1.loss_cls: 0.5139, d1.loss_bbox: 0.8531, d2.loss_cls: 0.5097, d2.loss_bbox: 0.8344, d3.loss_cls: 0.5069, d3.loss_bbox: 0.8238, d4.loss_cls: 0.5067, d4.loss_bbox: 0.8111, aux_task0.loss_heatmap: 0.6207, aux_task0.loss_bbox: 0.2570, aux_task1.loss_heatmap: 0.8379, aux_task1.loss_bbox: 0.3256, aux_task2.loss_heatmap: 0.9321, aux_task2.loss_bbox: 0.3432, aux_task3.loss_heatmap: 0.6519, aux_task3.loss_bbox: 0.2831, aux_task4.loss_heatmap: 0.5350, aux_task4.loss_bbox: 0.2910, aux_task5.loss_heatmap: 0.4885, aux_task5.loss_bbox: 0.2966, loss: 14.0259, grad_norm: 25.4693
2025-04-15 23:13:15,307 - mmdet - INFO - Epoch [7][500/1104]	lr: 2.298e-04, eta: 3:57:12, time: 0.941, data_time: 0.010, memory: 12571, loss_cls: 0.5039, loss_bbox: 0.8017, d0.loss_cls: 0.5311, d0.loss_bbox: 0.9538, d1.loss_cls: 0.5073, d1.loss_bbox: 0.8515, d2.loss_cls: 0.5033, d2.loss_bbox: 0.8311, d3.loss_cls: 0.5020, d3.loss_bbox: 0.8214, d4.loss_cls: 0.5012, d4.loss_bbox: 0.8091, aux_task0.loss_heatmap: 0.6134, aux_task0.loss_bbox: 0.2546, aux_task1.loss_heatmap: 0.8712, aux_task1.loss_bbox: 0.3218, aux_task2.loss_heatmap: 0.8573, aux_task2.loss_bbox: 0.3423, aux_task3.loss_heatmap: 0.6890, aux_task3.loss_bbox: 0.2822, aux_task4.loss_heatmap: 0.4895, aux_task4.loss_bbox: 0.2844, aux_task5.loss_heatmap: 0.4683, aux_task5.loss_bbox: 0.2942, loss: 13.8855, grad_norm: 26.8305
2025-04-15 23:14:02,671 - mmdet - INFO - Epoch [7][550/1104]	lr: 2.310e-04, eta: 3:56:24, time: 0.947, data_time: 0.008, memory: 12571, loss_cls: 0.5023, loss_bbox: 0.8065, d0.loss_cls: 0.5330, d0.loss_bbox: 0.9702, d1.loss_cls: 0.5082, d1.loss_bbox: 0.8599, d2.loss_cls: 0.5017, d2.loss_bbox: 0.8406, d3.loss_cls: 0.5006, d3.loss_bbox: 0.8300, d4.loss_cls: 0.5001, d4.loss_bbox: 0.8147, aux_task0.loss_heatmap: 0.6205, aux_task0.loss_bbox: 0.2617, aux_task1.loss_heatmap: 0.8581, aux_task1.loss_bbox: 0.3235, aux_task2.loss_heatmap: 0.9120, aux_task2.loss_bbox: 0.3475, aux_task3.loss_heatmap: 0.6624, aux_task3.loss_bbox: 0.2847, aux_task4.loss_heatmap: 0.5023, aux_task4.loss_bbox: 0.2890, aux_task5.loss_heatmap: 0.4847, aux_task5.loss_bbox: 0.2946, loss: 14.0087, grad_norm: 25.9933
2025-04-15 23:14:49,853 - mmdet - INFO - Epoch [7][600/1104]	lr: 2.321e-04, eta: 3:55:36, time: 0.944, data_time: 0.009, memory: 12571, loss_cls: 0.4944, loss_bbox: 0.8041, d0.loss_cls: 0.5257, d0.loss_bbox: 0.9671, d1.loss_cls: 0.5039, d1.loss_bbox: 0.8554, d2.loss_cls: 0.4973, d2.loss_bbox: 0.8356, d3.loss_cls: 0.4954, d3.loss_bbox: 0.8249, d4.loss_cls: 0.4936, d4.loss_bbox: 0.8114, aux_task0.loss_heatmap: 0.5978, aux_task0.loss_bbox: 0.2524, aux_task1.loss_heatmap: 0.8631, aux_task1.loss_bbox: 0.3256, aux_task2.loss_heatmap: 0.8916, aux_task2.loss_bbox: 0.3492, aux_task3.loss_heatmap: 0.6833, aux_task3.loss_bbox: 0.2926, aux_task4.loss_heatmap: 0.4848, aux_task4.loss_bbox: 0.2852, aux_task5.loss_heatmap: 0.5028, aux_task5.loss_bbox: 0.2965, loss: 13.9337, grad_norm: 28.5245
2025-04-15 23:15:36,724 - mmdet - INFO - Epoch [7][650/1104]	lr: 2.331e-04, eta: 3:54:47, time: 0.937, data_time: 0.008, memory: 12571, loss_cls: 0.5128, loss_bbox: 0.8068, d0.loss_cls: 0.5356, d0.loss_bbox: 0.9598, d1.loss_cls: 0.5178, d1.loss_bbox: 0.8570, d2.loss_cls: 0.5123, d2.loss_bbox: 0.8390, d3.loss_cls: 0.5107, d3.loss_bbox: 0.8260, d4.loss_cls: 0.5109, d4.loss_bbox: 0.8130, aux_task0.loss_heatmap: 0.6301, aux_task0.loss_bbox: 0.2549, aux_task1.loss_heatmap: 0.8372, aux_task1.loss_bbox: 0.3249, aux_task2.loss_heatmap: 0.9175, aux_task2.loss_bbox: 0.3556, aux_task3.loss_heatmap: 0.6757, aux_task3.loss_bbox: 0.2982, aux_task4.loss_heatmap: 0.5245, aux_task4.loss_bbox: 0.2875, aux_task5.loss_heatmap: 0.4887, aux_task5.loss_bbox: 0.3032, loss: 14.0997, grad_norm: 26.2458
2025-04-15 23:16:24,212 - mmdet - INFO - Epoch [7][700/1104]	lr: 2.342e-04, eta: 3:53:59, time: 0.950, data_time: 0.009, memory: 12571, loss_cls: 0.4970, loss_bbox: 0.7963, d0.loss_cls: 0.5250, d0.loss_bbox: 0.9574, d1.loss_cls: 0.5044, d1.loss_bbox: 0.8487, d2.loss_cls: 0.4995, d2.loss_bbox: 0.8288, d3.loss_cls: 0.4959, d3.loss_bbox: 0.8155, d4.loss_cls: 0.4964, d4.loss_bbox: 0.8043, aux_task0.loss_heatmap: 0.6044, aux_task0.loss_bbox: 0.2514, aux_task1.loss_heatmap: 0.8507, aux_task1.loss_bbox: 0.3267, aux_task2.loss_heatmap: 0.8528, aux_task2.loss_bbox: 0.3406, aux_task3.loss_heatmap: 0.6581, aux_task3.loss_bbox: 0.3015, aux_task4.loss_heatmap: 0.4772, aux_task4.loss_bbox: 0.2878, aux_task5.loss_heatmap: 0.5160, aux_task5.loss_bbox: 0.3001, loss: 13.8363, grad_norm: 27.4695
2025-04-15 23:17:11,626 - mmdet - INFO - Epoch [7][750/1104]	lr: 2.352e-04, eta: 3:53:11, time: 0.948, data_time: 0.009, memory: 12571, loss_cls: 0.5071, loss_bbox: 0.7981, d0.loss_cls: 0.5351, d0.loss_bbox: 0.9565, d1.loss_cls: 0.5119, d1.loss_bbox: 0.8509, d2.loss_cls: 0.5066, d2.loss_bbox: 0.8332, d3.loss_cls: 0.5043, d3.loss_bbox: 0.8174, d4.loss_cls: 0.5047, d4.loss_bbox: 0.8050, aux_task0.loss_heatmap: 0.6045, aux_task0.loss_bbox: 0.2531, aux_task1.loss_heatmap: 0.8594, aux_task1.loss_bbox: 0.3239, aux_task2.loss_heatmap: 0.8666, aux_task2.loss_bbox: 0.3461, aux_task3.loss_heatmap: 0.7061, aux_task3.loss_bbox: 0.2772, aux_task4.loss_heatmap: 0.5253, aux_task4.loss_bbox: 0.2929, aux_task5.loss_heatmap: 0.4984, aux_task5.loss_bbox: 0.2963, loss: 13.9808, grad_norm: 27.3756
2025-04-15 23:17:58,752 - mmdet - INFO - Epoch [7][800/1104]	lr: 2.362e-04, eta: 3:52:23, time: 0.943, data_time: 0.009, memory: 12571, loss_cls: 0.5003, loss_bbox: 0.7920, d0.loss_cls: 0.5311, d0.loss_bbox: 0.9545, d1.loss_cls: 0.5085, d1.loss_bbox: 0.8468, d2.loss_cls: 0.5000, d2.loss_bbox: 0.8270, d3.loss_cls: 0.4980, d3.loss_bbox: 0.8112, d4.loss_cls: 0.4981, d4.loss_bbox: 0.7990, aux_task0.loss_heatmap: 0.6035, aux_task0.loss_bbox: 0.2510, aux_task1.loss_heatmap: 0.8578, aux_task1.loss_bbox: 0.3242, aux_task2.loss_heatmap: 0.8781, aux_task2.loss_bbox: 0.3453, aux_task3.loss_heatmap: 0.6574, aux_task3.loss_bbox: 0.2814, aux_task4.loss_heatmap: 0.5102, aux_task4.loss_bbox: 0.2855, aux_task5.loss_heatmap: 0.4976, aux_task5.loss_bbox: 0.2974, loss: 13.8560, grad_norm: 28.3190
2025-04-15 23:18:46,163 - mmdet - INFO - Epoch [7][850/1104]	lr: 2.371e-04, eta: 3:51:35, time: 0.948, data_time: 0.009, memory: 12571, loss_cls: 0.4934, loss_bbox: 0.7779, d0.loss_cls: 0.5240, d0.loss_bbox: 0.9349, d1.loss_cls: 0.5009, d1.loss_bbox: 0.8312, d2.loss_cls: 0.4944, d2.loss_bbox: 0.8121, d3.loss_cls: 0.4925, d3.loss_bbox: 0.7942, d4.loss_cls: 0.4913, d4.loss_bbox: 0.7863, aux_task0.loss_heatmap: 0.6143, aux_task0.loss_bbox: 0.2497, aux_task1.loss_heatmap: 0.8513, aux_task1.loss_bbox: 0.3188, aux_task2.loss_heatmap: 0.8617, aux_task2.loss_bbox: 0.3441, aux_task3.loss_heatmap: 0.6391, aux_task3.loss_bbox: 0.2813, aux_task4.loss_heatmap: 0.4943, aux_task4.loss_bbox: 0.2806, aux_task5.loss_heatmap: 0.4814, aux_task5.loss_bbox: 0.2931, loss: 13.6426, grad_norm: 21.8899
2025-04-15 23:19:33,399 - mmdet - INFO - Epoch [7][900/1104]	lr: 2.380e-04, eta: 3:50:46, time: 0.945, data_time: 0.008, memory: 12571, loss_cls: 0.5056, loss_bbox: 0.7925, d0.loss_cls: 0.5361, d0.loss_bbox: 0.9441, d1.loss_cls: 0.5142, d1.loss_bbox: 0.8442, d2.loss_cls: 0.5069, d2.loss_bbox: 0.8267, d3.loss_cls: 0.5045, d3.loss_bbox: 0.8095, d4.loss_cls: 0.5042, d4.loss_bbox: 0.7984, aux_task0.loss_heatmap: 0.6020, aux_task0.loss_bbox: 0.2486, aux_task1.loss_heatmap: 0.8768, aux_task1.loss_bbox: 0.3216, aux_task2.loss_heatmap: 0.8846, aux_task2.loss_bbox: 0.3495, aux_task3.loss_heatmap: 0.6698, aux_task3.loss_bbox: 0.2974, aux_task4.loss_heatmap: 0.5291, aux_task4.loss_bbox: 0.2797, aux_task5.loss_heatmap: 0.4918, aux_task5.loss_bbox: 0.2955, loss: 13.9331, grad_norm: 20.7558
2025-04-15 23:20:20,912 - mmdet - INFO - Epoch [7][950/1104]	lr: 2.389e-04, eta: 3:49:59, time: 0.950, data_time: 0.012, memory: 12571, loss_cls: 0.4895, loss_bbox: 0.7819, d0.loss_cls: 0.5179, d0.loss_bbox: 0.9351, d1.loss_cls: 0.4971, d1.loss_bbox: 0.8345, d2.loss_cls: 0.4921, d2.loss_bbox: 0.8129, d3.loss_cls: 0.4895, d3.loss_bbox: 0.7949, d4.loss_cls: 0.4880, d4.loss_bbox: 0.7864, aux_task0.loss_heatmap: 0.5968, aux_task0.loss_bbox: 0.2475, aux_task1.loss_heatmap: 0.8698, aux_task1.loss_bbox: 0.3254, aux_task2.loss_heatmap: 0.8697, aux_task2.loss_bbox: 0.3311, aux_task3.loss_heatmap: 0.6317, aux_task3.loss_bbox: 0.2826, aux_task4.loss_heatmap: 0.4932, aux_task4.loss_bbox: 0.2805, aux_task5.loss_heatmap: 0.4829, aux_task5.loss_bbox: 0.2943, loss: 13.6253, grad_norm: 25.0430
2025-04-15 23:21:08,434 - mmdet - INFO - Epoch [7][1000/1104]	lr: 2.398e-04, eta: 3:49:11, time: 0.950, data_time: 0.011, memory: 12571, loss_cls: 0.4893, loss_bbox: 0.7845, d0.loss_cls: 0.5186, d0.loss_bbox: 0.9401, d1.loss_cls: 0.4964, d1.loss_bbox: 0.8401, d2.loss_cls: 0.4920, d2.loss_bbox: 0.8173, d3.loss_cls: 0.4897, d3.loss_bbox: 0.7970, d4.loss_cls: 0.4885, d4.loss_bbox: 0.7896, aux_task0.loss_heatmap: 0.5741, aux_task0.loss_bbox: 0.2433, aux_task1.loss_heatmap: 0.8785, aux_task1.loss_bbox: 0.3229, aux_task2.loss_heatmap: 0.8850, aux_task2.loss_bbox: 0.3365, aux_task3.loss_heatmap: 0.6518, aux_task3.loss_bbox: 0.2953, aux_task4.loss_heatmap: 0.4873, aux_task4.loss_bbox: 0.2811, aux_task5.loss_heatmap: 0.4620, aux_task5.loss_bbox: 0.2933, loss: 13.6541, grad_norm: 27.0435
2025-04-15 23:21:55,598 - mmdet - INFO - Epoch [7][1050/1104]	lr: 2.406e-04, eta: 3:48:23, time: 0.943, data_time: 0.009, memory: 12571, loss_cls: 0.4970, loss_bbox: 0.7874, d0.loss_cls: 0.5268, d0.loss_bbox: 0.9402, d1.loss_cls: 0.5044, d1.loss_bbox: 0.8421, d2.loss_cls: 0.4989, d2.loss_bbox: 0.8238, d3.loss_cls: 0.4965, d3.loss_bbox: 0.8033, d4.loss_cls: 0.4950, d4.loss_bbox: 0.7948, aux_task0.loss_heatmap: 0.6039, aux_task0.loss_bbox: 0.2419, aux_task1.loss_heatmap: 0.8678, aux_task1.loss_bbox: 0.3252, aux_task2.loss_heatmap: 0.8556, aux_task2.loss_bbox: 0.3349, aux_task3.loss_heatmap: 0.7239, aux_task3.loss_bbox: 0.2884, aux_task4.loss_heatmap: 0.4997, aux_task4.loss_bbox: 0.2844, aux_task5.loss_heatmap: 0.4858, aux_task5.loss_bbox: 0.2947, loss: 13.8164, grad_norm: 23.6695
2025-04-15 23:22:43,273 - mmdet - INFO - Epoch [7][1100/1104]	lr: 2.414e-04, eta: 3:47:35, time: 0.953, data_time: 0.009, memory: 12571, loss_cls: 0.4840, loss_bbox: 0.7911, d0.loss_cls: 0.5164, d0.loss_bbox: 0.9478, d1.loss_cls: 0.4938, d1.loss_bbox: 0.8464, d2.loss_cls: 0.4894, d2.loss_bbox: 0.8236, d3.loss_cls: 0.4848, d3.loss_bbox: 0.8074, d4.loss_cls: 0.4839, d4.loss_bbox: 0.7978, aux_task0.loss_heatmap: 0.5890, aux_task0.loss_bbox: 0.2442, aux_task1.loss_heatmap: 0.8597, aux_task1.loss_bbox: 0.3170, aux_task2.loss_heatmap: 0.8524, aux_task2.loss_bbox: 0.3384, aux_task3.loss_heatmap: 0.6560, aux_task3.loss_bbox: 0.2949, aux_task4.loss_heatmap: 0.4923, aux_task4.loss_bbox: 0.2783, aux_task5.loss_heatmap: 0.4847, aux_task5.loss_bbox: 0.2950, loss: 13.6683, grad_norm: 27.0327
2025-04-15 23:22:47,439 - mmdet - INFO - Saving checkpoint at 7 epochs
