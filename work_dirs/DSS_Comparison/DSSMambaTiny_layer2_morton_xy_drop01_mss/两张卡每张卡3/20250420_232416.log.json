{"env_info": "sys.platform: linux\nPython: 3.8.20 | packaged by conda-forge | (default, Sep 30 2024, 17:52:49) [GCC 13.3.0]\nCUDA available: True\nGPU 0,1: NVIDIA GeForce RTX 4090 D\nCUDA_HOME: /usr/local/cuda\nNVCC: Cuda compilation tools, release 11.6, V11.6.55\nGCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.2) 9.4.0\nPyTorch: 1.13.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2022.1-Product Build 20220311 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.6\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.14.0\nOpenCV: 4.11.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.4\nMMCV CUDA Compiler: 11.6\nMMDetection: 2.27.0\nMMSegmentation: 0.30.0\nMMDetection3D: 1.0.0rc6+637e2ea\nspconv2.0: True", "config": "point_cloud_range = [-54, -54, -5.0, 54, 54, 3.0]\nclass_names = [\n    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n]\ndataset_type = 'NuScenesDataset'\ndata_root = 'data/nuscenes/'\ninput_modality = dict(\n    use_lidar=True,\n    use_camera=False,\n    use_radar=False,\n    use_map=False,\n    use_external=False)\nfile_client_args = dict(backend='disk')\ntrain_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(type='LoadAnnotations3D', with_bbox_3d=True, with_label_3d=True),\n    dict(\n        type='ObjectSample',\n        db_sampler=dict(\n            data_root='data/nuscenes/',\n            info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',\n            rate=1.0,\n            prepare=dict(\n                filter_by_difficulty=[-1],\n                filter_by_min_points=dict(\n                    car=5,\n                    truck=5,\n                    bus=5,\n                    trailer=5,\n                    construction_vehicle=5,\n                    traffic_cone=5,\n                    barrier=5,\n                    motorcycle=5,\n                    bicycle=5,\n                    pedestrian=5)),\n            classes=[\n                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                'traffic_cone'\n            ],\n            sample_groups=dict(\n                car=2,\n                truck=3,\n                construction_vehicle=7,\n                bus=4,\n                trailer=6,\n                barrier=2,\n                motorcycle=6,\n                bicycle=6,\n                pedestrian=2,\n                traffic_cone=2),\n            points_loader=dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk')))),\n    dict(\n        type='GlobalRotScaleTrans',\n        rot_range=[-0.785, 0.785],\n        scale_ratio_range=[0.9, 1.1],\n        translation_std=[0.5, 0.5, 0.5]),\n    dict(\n        type='RandomFlip3D',\n        sync_2d=False,\n        flip_ratio_bev_horizontal=0.5,\n        flip_ratio_bev_vertical=0.5),\n    dict(\n        type='PointsRangeFilter',\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    dict(\n        type='ObjectRangeFilter',\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    dict(\n        type='ObjectNameFilter',\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(type='PointShuffle'),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ]),\n    dict(type='Collect3D', keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n]\ntest_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(\n        type='MultiScaleFlipAug3D',\n        img_scale=(1333, 800),\n        pts_scale_ratio=1,\n        flip=False,\n        transforms=[\n            dict(\n                type='GlobalRotScaleTrans',\n                rot_range=[0, 0],\n                scale_ratio_range=[1.0, 1.0],\n                translation_std=[0, 0, 0]),\n            dict(type='RandomFlip3D'),\n            dict(\n                type='PointsRangeFilter',\n                point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                    'traffic_cone'\n                ],\n                with_label=False),\n            dict(type='Collect3D', keys=['points'])\n        ])\n]\neval_pipeline = [\n    dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=5,\n        file_client_args=dict(backend='disk')),\n    dict(\n        type='LoadPointsFromMultiSweeps',\n        sweeps_num=9,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk'),\n        pad_empty_sweeps=True,\n        remove_close=True),\n    dict(\n        type='DefaultFormatBundle3D',\n        class_names=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        with_label=False),\n    dict(type='Collect3D', keys=['points'])\n]\ndata = dict(\n    samples_per_gpu=3,\n    workers_per_gpu=4,\n    train=dict(\n        type='CBGSDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_train.pkl',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=10,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadAnnotations3D',\n                with_bbox_3d=True,\n                with_label_3d=True),\n            dict(\n                type='GlobalRotScaleTrans',\n                rot_range=[-0.3925, 0.3925],\n                scale_ratio_range=[0.95, 1.05],\n                translation_std=[0, 0, 0]),\n            dict(type='RandomFlip3D', flip_ratio_bev_horizontal=0.5),\n            dict(\n                type='PointsRangeFilter',\n                point_cloud_range=[-50, -50, -5, 50, 50, 3]),\n            dict(\n                type='ObjectRangeFilter',\n                point_cloud_range=[-50, -50, -5, 50, 50, 3]),\n            dict(\n                type='ObjectNameFilter',\n                classes=[\n                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                    'barrier'\n                ]),\n            dict(type='PointShuffle'),\n            dict(\n                type='DefaultFormatBundle3D',\n                class_names=[\n                    'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                    'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                    'barrier'\n                ]),\n            dict(\n                type='Collect3D',\n                keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n        ],\n        classes=[\n            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=False,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=False,\n        box_type_3d='LiDAR',\n        split=14,\n        dataset=dict(\n            type='NuScenesDataset',\n            data_root='data/nuscenes/',\n            ann_file='data/nuscenes/nuscenes_infos_train.pkl',\n            pipeline=[\n                dict(\n                    type='LoadPointsFromFile',\n                    coord_type='LIDAR',\n                    load_dim=5,\n                    use_dim=5,\n                    file_client_args=dict(backend='disk')),\n                dict(\n                    type='LoadPointsFromMultiSweeps',\n                    sweeps_num=9,\n                    use_dim=[0, 1, 2, 3, 4],\n                    file_client_args=dict(backend='disk'),\n                    pad_empty_sweeps=True,\n                    remove_close=True),\n                dict(\n                    type='LoadAnnotations3D',\n                    with_bbox_3d=True,\n                    with_label_3d=True),\n                dict(\n                    type='ObjectSample',\n                    db_sampler=dict(\n                        data_root='data/nuscenes/',\n                        info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',\n                        rate=1.0,\n                        prepare=dict(\n                            filter_by_difficulty=[-1],\n                            filter_by_min_points=dict(\n                                car=5,\n                                truck=5,\n                                bus=5,\n                                trailer=5,\n                                construction_vehicle=5,\n                                traffic_cone=5,\n                                barrier=5,\n                                motorcycle=5,\n                                bicycle=5,\n                                pedestrian=5)),\n                        classes=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        sample_groups=dict(\n                            car=2,\n                            truck=3,\n                            construction_vehicle=7,\n                            bus=4,\n                            trailer=6,\n                            barrier=2,\n                            motorcycle=6,\n                            bicycle=6,\n                            pedestrian=2,\n                            traffic_cone=2),\n                        points_loader=dict(\n                            type='LoadPointsFromFile',\n                            coord_type='LIDAR',\n                            load_dim=5,\n                            use_dim=[0, 1, 2, 3, 4],\n                            file_client_args=dict(backend='disk')))),\n                dict(\n                    type='GlobalRotScaleTrans',\n                    rot_range=[-0.785, 0.785],\n                    scale_ratio_range=[0.9, 1.1],\n                    translation_std=[0.5, 0.5, 0.5]),\n                dict(\n                    type='RandomFlip3D',\n                    sync_2d=False,\n                    flip_ratio_bev_horizontal=0.5,\n                    flip_ratio_bev_vertical=0.5),\n                dict(\n                    type='PointsRangeFilter',\n                    point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                dict(\n                    type='ObjectRangeFilter',\n                    point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                dict(\n                    type='ObjectNameFilter',\n                    classes=[\n                        'car', 'truck', 'construction_vehicle', 'bus',\n                        'trailer', 'barrier', 'motorcycle', 'bicycle',\n                        'pedestrian', 'traffic_cone'\n                    ]),\n                dict(type='PointShuffle'),\n                dict(\n                    type='DefaultFormatBundle3D',\n                    class_names=[\n                        'car', 'truck', 'construction_vehicle', 'bus',\n                        'trailer', 'barrier', 'motorcycle', 'bicycle',\n                        'pedestrian', 'traffic_cone'\n                    ]),\n                dict(\n                    type='Collect3D',\n                    keys=['points', 'gt_bboxes_3d', 'gt_labels_3d'])\n            ],\n            classes=[\n                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n                'barrier', 'motorcycle', 'bicycle', 'pedestrian',\n                'traffic_cone'\n            ],\n            test_mode=False,\n            use_valid_flag=True,\n            box_type_3d='LiDAR')),\n    val=dict(\n        type='NuScenesDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_val.pkl',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=9,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk'),\n                pad_empty_sweeps=True,\n                remove_close=True),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1333, 800),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='GlobalRotScaleTrans',\n                        rot_range=[0, 0],\n                        scale_ratio_range=[1.0, 1.0],\n                        translation_std=[0, 0, 0]),\n                    dict(type='RandomFlip3D'),\n                    dict(\n                        type='PointsRangeFilter',\n                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(type='Collect3D', keys=['points'])\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=False,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=True,\n        box_type_3d='LiDAR'),\n    test=dict(\n        type='NuScenesDataset',\n        data_root='data/nuscenes/',\n        ann_file='data/nuscenes/nuscenes_infos_val.pkl',\n        pipeline=[\n            dict(\n                type='LoadPointsFromFile',\n                coord_type='LIDAR',\n                load_dim=5,\n                use_dim=5,\n                file_client_args=dict(backend='disk')),\n            dict(\n                type='LoadPointsFromMultiSweeps',\n                sweeps_num=9,\n                use_dim=[0, 1, 2, 3, 4],\n                file_client_args=dict(backend='disk'),\n                pad_empty_sweeps=True,\n                remove_close=True),\n            dict(\n                type='MultiScaleFlipAug3D',\n                img_scale=(1333, 800),\n                pts_scale_ratio=1,\n                flip=False,\n                transforms=[\n                    dict(\n                        type='GlobalRotScaleTrans',\n                        rot_range=[0, 0],\n                        scale_ratio_range=[1.0, 1.0],\n                        translation_std=[0, 0, 0]),\n                    dict(type='RandomFlip3D'),\n                    dict(\n                        type='PointsRangeFilter',\n                        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n                    dict(\n                        type='DefaultFormatBundle3D',\n                        class_names=[\n                            'car', 'truck', 'construction_vehicle', 'bus',\n                            'trailer', 'barrier', 'motorcycle', 'bicycle',\n                            'pedestrian', 'traffic_cone'\n                        ],\n                        with_label=False),\n                    dict(type='Collect3D', keys=['points'])\n                ])\n        ],\n        classes=[\n            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',\n            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n        ],\n        modality=dict(\n            use_lidar=True,\n            use_camera=False,\n            use_radar=False,\n            use_map=False,\n            use_external=False),\n        test_mode=True,\n        box_type_3d='LiDAR'))\nevaluation = dict(\n    interval=1,\n    pipeline=[\n        dict(\n            type='LoadPointsFromFile',\n            coord_type='LIDAR',\n            load_dim=5,\n            use_dim=5,\n            file_client_args=dict(backend='disk')),\n        dict(\n            type='LoadPointsFromMultiSweeps',\n            sweeps_num=10,\n            file_client_args=dict(backend='disk')),\n        dict(\n            type='DefaultFormatBundle3D',\n            class_names=[\n                'car', 'truck', 'trailer', 'bus', 'construction_vehicle',\n                'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone',\n                'barrier'\n            ],\n            with_label=False),\n        dict(type='Collect3D', keys=['points'])\n    ])\noptimizer = dict(type='AdamW', lr=1.8750000000000002e-05, weight_decay=0.01)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='cyclic',\n    target_ratio=(10, 0.0001),\n    cyclic_times=1,\n    step_ratio_up=0.4)\nmomentum_config = dict(\n    policy='cyclic',\n    target_ratio=(0.8947368421052632, 1),\n    cyclic_times=1,\n    step_ratio_up=0.4)\nrunner = dict(type='EpochBasedRunner', max_epochs=20)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(\n    interval=50,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nwork_dir = './work_dirs/DSSMambaTiny_layer2_morton_xy_drop01_mss/\u4e24\u5f20\u5361\u6bcf\u5f20\u53613'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nplugin = 'plugin/futr3d'\nvoxel_size = [0.075, 0.075, 0.2]\ncenter_head = dict(\n    type='CenterHead',\n    in_channels=512,\n    tasks=[\n        dict(num_class=1, class_names=['car']),\n        dict(num_class=2, class_names=['truck', 'construction_vehicle']),\n        dict(num_class=2, class_names=['bus', 'trailer']),\n        dict(num_class=1, class_names=['barrier']),\n        dict(num_class=2, class_names=['motorcycle', 'bicycle']),\n        dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])\n    ],\n    common_heads=dict(\n        reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),\n    share_conv_channel=64,\n    bbox_coder=dict(\n        type='CenterPointBBoxCoder',\n        pc_range=[-54, -54],\n        post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n        max_num=500,\n        score_threshold=0.1,\n        out_size_factor=8,\n        voxel_size=[0.075, 0.075],\n        code_size=9),\n    separate_head=dict(type='SeparateHead', init_bias=-2.19, final_kernel=3),\n    loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),\n    loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),\n    norm_bbox=True)\nmodel = dict(\n    type='FUTR3D',\n    aux_weight=0.5,\n    pts_voxel_layer=dict(\n        max_num_points=10,\n        voxel_size=[0.075, 0.075, 0.2],\n        max_voxels=(120000, 160000),\n        point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0]),\n    pts_voxel_encoder=dict(type='HardSimpleVFE', num_features=5),\n    pts_middle_encoder=dict(\n        type='SparseEncoder',\n        in_channels=5,\n        sparse_shape=[41, 1440, 1440],\n        output_channels=128,\n        order=('conv', 'norm', 'act'),\n        encoder_channels=((16, 16, 32), (32, 32, 64), (64, 64, 128), (128,\n                                                                      128)),\n        encoder_paddings=((0, 0, 1), (0, 0, 1), (0, 0, [0, 1, 1]), (0, 0)),\n        block_type='basicblock'),\n    pts_backbone=dict(\n        type='SECOND',\n        in_channels=256,\n        out_channels=[128, 256],\n        layer_nums=[5, 5],\n        layer_strides=[1, 2],\n        norm_cfg=dict(type='BN', eps=0.001, momentum=0.01),\n        conv_cfg=dict(type='Conv2d', bias=False)),\n    pts_neck=dict(\n        type='FPN',\n        norm_cfg=dict(type='BN2d', eps=0.001, momentum=0.01),\n        act_cfg=dict(type='ReLU', inplace=False),\n        in_channels=[128, 256],\n        out_channels=256,\n        start_level=0,\n        add_extra_convs=True,\n        num_outs=4,\n        relu_before_extra_convs=True),\n    pts_bbox_head=dict(\n        type='FUTR3DHead',\n        use_dab=True,\n        use_dss=True,\n        dss_batch_first=False,\n        dss_drop_prob=0.1,\n        dss_mamba_prenorm=False,\n        dss_mamba_cfg=dict(),\n        dss_mamba_version='DSSMamba_Tiny',\n        dss_num_layers=2,\n        dss_rope=False,\n        dss_morton_rearrange=True,\n        dss_conv_path=False,\n        dss_xy=True,\n        use_mss=True,\n        anchor_size=3,\n        use_aux=True,\n        aux_head=dict(\n            type='CenterHead',\n            in_channels=512,\n            tasks=[\n                dict(num_class=1, class_names=['car']),\n                dict(\n                    num_class=2, class_names=['truck',\n                                              'construction_vehicle']),\n                dict(num_class=2, class_names=['bus', 'trailer']),\n                dict(num_class=1, class_names=['barrier']),\n                dict(num_class=2, class_names=['motorcycle', 'bicycle']),\n                dict(num_class=2, class_names=['pedestrian', 'traffic_cone'])\n            ],\n            common_heads=dict(\n                reg=(2, 2), height=(1, 2), dim=(3, 2), rot=(2, 2), vel=(2, 2)),\n            share_conv_channel=64,\n            bbox_coder=dict(\n                type='CenterPointBBoxCoder',\n                pc_range=[-54, -54],\n                post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n                max_num=500,\n                score_threshold=0.1,\n                out_size_factor=8,\n                voxel_size=[0.075, 0.075],\n                code_size=9),\n            separate_head=dict(\n                type='SeparateHead', init_bias=-2.19, final_kernel=3),\n            loss_cls=dict(type='GaussianFocalLoss', reduction='mean'),\n            loss_bbox=dict(type='L1Loss', reduction='mean', loss_weight=0.25),\n            norm_bbox=True),\n        mix_selection=False,\n        num_query=900,\n        num_classes=10,\n        in_channels=256,\n        pc_range=[-54, -54, -5.0, 54, 54, 3.0],\n        sync_cls_avg_factor=True,\n        with_box_refine=True,\n        as_two_stage=False,\n        code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],\n        transformer=dict(\n            type='FUTR3DTransformer',\n            use_dab=True,\n            decoder=dict(\n                type='FUTR3DTransformerDecoder',\n                num_layers=6,\n                use_dab=True,\n                anchor_size=3,\n                return_intermediate=True,\n                transformerlayers=dict(\n                    type='DetrTransformerDecoderLayer',\n                    attn_cfgs=[\n                        dict(\n                            type='MultiheadAttention',\n                            embed_dims=256,\n                            num_heads=8,\n                            dropout=0.1),\n                        dict(type='FUTR3DAttention', embed_dims=256)\n                    ],\n                    feedforward_channels=1024,\n                    ffn_dropout=0.1,\n                    operation_order=('self_attn', 'norm', 'cross_attn', 'norm',\n                                     'ffn', 'norm')))),\n        positional_encoding=dict(\n            type='SinePositionalEncoding',\n            num_feats=128,\n            normalize=True,\n            offset=-0.5),\n        loss_cls=dict(\n            type='FocalLoss',\n            use_sigmoid=True,\n            gamma=2.0,\n            alpha=0.25,\n            loss_weight=2.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=0.25),\n        loss_iou=dict(type='GIoULoss', loss_weight=0)),\n    train_cfg=dict(\n        pts=dict(\n            point_cloud_range=[-54, -54, -5.0, 54, 54, 3.0],\n            pc_range=[-54, -54, -5.0, 54, 54, 3.0],\n            grid_size=[1440, 1440, 40],\n            voxel_size=[0.075, 0.075, 0.2],\n            out_size_factor=8,\n            dense_reg=1,\n            gaussian_overlap=0.1,\n            max_objs=500,\n            min_radius=2,\n            code_weights=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.2, 0.2],\n            assigner=dict(\n                type='HungarianAssigner3D',\n                cls_cost=dict(type='FocalLossCost', weight=2.0),\n                reg_cost=dict(type='BBox3DL1Cost', weight=0.25),\n                iou_cost=dict(type='IoUCost', weight=0)))),\n    test_cfg=dict(\n        pts=dict(\n            pc_range=[-54, -54],\n            post_center_limit_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],\n            max_per_img=500,\n            max_pool_nms=False,\n            min_radius=[4, 12, 10, 1, 0.85, 0.175],\n            out_size_factor=8,\n            voxel_size=[0.075, 0.075],\n            nms_type='circle',\n            pre_max_size=1000,\n            post_max_size=83,\n            nms_thr=0.2,\n            max_num=300,\n            score_threshold=0,\n            post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0])))\ndb_sampler = dict(\n    data_root='data/nuscenes/',\n    info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',\n    rate=1.0,\n    prepare=dict(\n        filter_by_difficulty=[-1],\n        filter_by_min_points=dict(\n            car=5,\n            truck=5,\n            bus=5,\n            trailer=5,\n            construction_vehicle=5,\n            traffic_cone=5,\n            barrier=5,\n            motorcycle=5,\n            bicycle=5,\n            pedestrian=5)),\n    classes=[\n        'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',\n        'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'\n    ],\n    sample_groups=dict(\n        car=2,\n        truck=3,\n        construction_vehicle=7,\n        bus=4,\n        trailer=6,\n        barrier=2,\n        motorcycle=6,\n        bicycle=6,\n        pedestrian=2,\n        traffic_cone=2),\n    points_loader=dict(\n        type='LoadPointsFromFile',\n        coord_type='LIDAR',\n        load_dim=5,\n        use_dim=[0, 1, 2, 3, 4],\n        file_client_args=dict(backend='disk')))\nfind_unused_parameters = True\ncustom_hooks = [dict(type='FadeOjectSampleHook', num_last_epochs=5)]\ngpu_ids = range(0, 2)\n", "seed": 0, "exp_name": "DSSMambaTiny_layer2_morton_xy_drop01_mss.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 2e-05, "memory": 15684, "data_time": 0.11561, "loss_cls": 1.61614, "loss_bbox": 2.26274, "d0.loss_cls": 2.02123, "d0.loss_bbox": 4.43281, "d1.loss_cls": 2.02792, "d1.loss_bbox": 2.29724, "d2.loss_cls": 1.94926, "d2.loss_bbox": 2.28665, "d3.loss_cls": 1.88378, "d3.loss_bbox": 2.27691, "d4.loss_cls": 1.73802, "d4.loss_bbox": 2.27118, "fore_pred_0": 0.68821, "fore_pred_1": 0.88793, "fore_pred_2": 0.41266, "fore_pred_3": 1.58797, "aux_task0.loss_heatmap": 237.19037, "aux_task0.loss_bbox": 0.89815, "aux_task1.loss_heatmap": 743.25008, "aux_task1.loss_bbox": 0.93214, "aux_task2.loss_heatmap": 685.75623, "aux_task2.loss_bbox": 1.16473, "aux_task3.loss_heatmap": 519.17008, "aux_task3.loss_bbox": 0.85777, "aux_task4.loss_heatmap": 498.97699, "aux_task4.loss_bbox": 0.77552, "aux_task5.loss_heatmap": 720.14414, "aux_task5.loss_bbox": 0.80283, "loss": 3436.98295, "grad_norm": 15035.2968, "time": 2.43526}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 2e-05, "memory": 15684, "data_time": 0.0071, "loss_cls": 1.24729, "loss_bbox": 2.09792, "d0.loss_cls": 1.90328, "d0.loss_bbox": 4.28425, "d1.loss_cls": 1.79118, "d1.loss_bbox": 2.23371, "d2.loss_cls": 1.51501, "d2.loss_bbox": 2.19948, "d3.loss_cls": 1.37665, "d3.loss_bbox": 2.16608, "d4.loss_cls": 1.29298, "d4.loss_bbox": 2.13245, "fore_pred_0": 0.56019, "fore_pred_1": 0.60166, "fore_pred_2": 0.35905, "fore_pred_3": 1.74824, "aux_task0.loss_heatmap": 110.07355, "aux_task0.loss_bbox": 0.72028, "aux_task1.loss_heatmap": 366.14941, "aux_task1.loss_bbox": 0.69186, "aux_task2.loss_heatmap": 297.52572, "aux_task2.loss_bbox": 0.97107, "aux_task3.loss_heatmap": 145.97653, "aux_task3.loss_bbox": 0.61483, "aux_task4.loss_heatmap": 248.04005, "aux_task4.loss_bbox": 0.56455, "aux_task5.loss_heatmap": 389.15786, "aux_task5.loss_bbox": 0.57449, "loss": 1585.30047, "grad_norm": 8057.15445, "time": 1.67187}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 2e-05, "memory": 15684, "data_time": 0.00727, "loss_cls": 1.18832, "loss_bbox": 1.87608, "d0.loss_cls": 1.7598, "d0.loss_bbox": 3.74199, "d1.loss_cls": 1.53859, "d1.loss_bbox": 2.02988, "d2.loss_cls": 1.30112, "d2.loss_bbox": 1.95186, "d3.loss_cls": 1.2558, "d3.loss_bbox": 1.90465, "d4.loss_cls": 1.22235, "d4.loss_bbox": 1.87546, "fore_pred_0": 0.53287, "fore_pred_1": 0.51547, "fore_pred_2": 0.33871, "fore_pred_3": 1.72959, "aux_task0.loss_heatmap": 57.52487, "aux_task0.loss_bbox": 0.60297, "aux_task1.loss_heatmap": 167.79997, "aux_task1.loss_bbox": 0.59331, "aux_task2.loss_heatmap": 133.42803, "aux_task2.loss_bbox": 0.80908, "aux_task3.loss_heatmap": 55.97007, "aux_task3.loss_bbox": 0.49968, "aux_task4.loss_heatmap": 120.08105, "aux_task4.loss_bbox": 0.48257, "aux_task5.loss_heatmap": 210.0741, "aux_task5.loss_bbox": 0.5263, "loss": 770.0379, "grad_norm": 4549.38245, "time": 1.69399}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 2e-05, "memory": 15684, "data_time": 0.00737, "loss_cls": 1.16116, "loss_bbox": 1.93942, "d0.loss_cls": 1.5612, "d0.loss_bbox": 2.4811, "d1.loss_cls": 1.32086, "d1.loss_bbox": 1.83817, "d2.loss_cls": 1.24708, "d2.loss_bbox": 1.83914, "d3.loss_cls": 1.21517, "d3.loss_bbox": 1.87377, "d4.loss_cls": 1.18686, "d4.loss_bbox": 1.90731, "fore_pred_0": 0.52064, "fore_pred_1": 0.69278, "fore_pred_2": 0.30022, "fore_pred_3": 1.53787, "aux_task0.loss_heatmap": 28.71818, "aux_task0.loss_bbox": 0.49609, "aux_task1.loss_heatmap": 92.51388, "aux_task1.loss_bbox": 0.54961, "aux_task2.loss_heatmap": 73.94797, "aux_task2.loss_bbox": 0.68373, "aux_task3.loss_heatmap": 34.57272, "aux_task3.loss_bbox": 0.44862, "aux_task4.loss_heatmap": 66.24363, "aux_task4.loss_bbox": 0.44882, "aux_task5.loss_heatmap": 113.85606, "aux_task5.loss_bbox": 0.4842, "loss": 432.53478, "grad_norm": 2834.4993, "time": 1.55608}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 2e-05, "memory": 15684, "data_time": 0.00783, "loss_cls": 1.15953, "loss_bbox": 1.8437, "d0.loss_cls": 1.38298, "d0.loss_bbox": 1.8825, "d1.loss_cls": 1.25311, "d1.loss_bbox": 1.83964, "d2.loss_cls": 1.22639, "d2.loss_bbox": 1.8456, "d3.loss_cls": 1.19344, "d3.loss_bbox": 1.85311, "d4.loss_cls": 1.17528, "d4.loss_bbox": 1.85456, "fore_pred_0": 0.52054, "fore_pred_1": 0.86412, "fore_pred_2": 0.27476, "fore_pred_3": 1.53189, "aux_task0.loss_heatmap": 16.96174, "aux_task0.loss_bbox": 0.48577, "aux_task1.loss_heatmap": 52.49277, "aux_task1.loss_bbox": 0.52186, "aux_task2.loss_heatmap": 41.256, "aux_task2.loss_bbox": 0.58425, "aux_task3.loss_heatmap": 17.59994, "aux_task3.loss_bbox": 0.4414, "aux_task4.loss_heatmap": 36.29015, "aux_task4.loss_bbox": 0.43796, "aux_task5.loss_heatmap": 68.65696, "aux_task5.loss_bbox": 0.47668, "loss": 254.71533, "grad_norm": 1771.48367, "time": 1.76884}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 2e-05, "memory": 15684, "data_time": 0.00802, "loss_cls": 1.1509, "loss_bbox": 1.76051, "d0.loss_cls": 1.24424, "d0.loss_bbox": 1.85952, "d1.loss_cls": 1.21095, "d1.loss_bbox": 1.8175, "d2.loss_cls": 1.18796, "d2.loss_bbox": 1.79372, "d3.loss_cls": 1.16545, "d3.loss_bbox": 1.77898, "d4.loss_cls": 1.15464, "d4.loss_bbox": 1.76701, "fore_pred_0": 0.53242, "fore_pred_1": 0.96811, "fore_pred_2": 0.26066, "fore_pred_3": 1.56511, "aux_task0.loss_heatmap": 8.38363, "aux_task0.loss_bbox": 0.45553, "aux_task1.loss_heatmap": 30.89733, "aux_task1.loss_bbox": 0.52578, "aux_task2.loss_heatmap": 23.42072, "aux_task2.loss_bbox": 0.5462, "aux_task3.loss_heatmap": 13.14135, "aux_task3.loss_bbox": 0.44014, "aux_task4.loss_heatmap": 20.79554, "aux_task4.loss_bbox": 0.43317, "aux_task5.loss_heatmap": 34.93228, "aux_task5.loss_bbox": 0.46771, "loss": 152.33075, "grad_norm": 1043.10099, "time": 1.87136}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 2e-05, "memory": 15684, "data_time": 0.00819, "loss_cls": 1.14109, "loss_bbox": 1.76865, "d0.loss_cls": 1.18704, "d0.loss_bbox": 1.83145, "d1.loss_cls": 1.19043, "d1.loss_bbox": 1.79153, "d2.loss_cls": 1.16794, "d2.loss_bbox": 1.77357, "d3.loss_cls": 1.15116, "d3.loss_bbox": 1.77345, "d4.loss_cls": 1.14347, "d4.loss_bbox": 1.77102, "fore_pred_0": 0.52467, "fore_pred_1": 1.03275, "fore_pred_2": 0.26346, "fore_pred_3": 1.67182, "aux_task0.loss_heatmap": 5.47851, "aux_task0.loss_bbox": 0.45095, "aux_task1.loss_heatmap": 17.48167, "aux_task1.loss_bbox": 0.50483, "aux_task2.loss_heatmap": 13.93079, "aux_task2.loss_bbox": 0.5327, "aux_task3.loss_heatmap": 6.21974, "aux_task3.loss_bbox": 0.42078, "aux_task4.loss_heatmap": 11.38615, "aux_task4.loss_bbox": 0.43093, "aux_task5.loss_heatmap": 19.50283, "aux_task5.loss_bbox": 0.46511, "loss": 94.4958, "grad_norm": 595.27698, "time": 1.96918}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 2e-05, "memory": 15684, "data_time": 0.00846, "loss_cls": 1.14755, "loss_bbox": 1.75942, "d0.loss_cls": 1.1649, "d0.loss_bbox": 1.82694, "d1.loss_cls": 1.16777, "d1.loss_bbox": 1.78859, "d2.loss_cls": 1.15512, "d2.loss_bbox": 1.77358, "d3.loss_cls": 1.15223, "d3.loss_bbox": 1.76953, "d4.loss_cls": 1.14775, "d4.loss_bbox": 1.76504, "fore_pred_0": 0.52596, "fore_pred_1": 1.076, "fore_pred_2": 0.30451, "fore_pred_3": 1.59262, "aux_task0.loss_heatmap": 3.64018, "aux_task0.loss_bbox": 0.44588, "aux_task1.loss_heatmap": 10.12307, "aux_task1.loss_bbox": 0.49087, "aux_task2.loss_heatmap": 7.30866, "aux_task2.loss_bbox": 0.51871, "aux_task3.loss_heatmap": 4.35138, "aux_task3.loss_bbox": 0.44107, "aux_task4.loss_heatmap": 6.47699, "aux_task4.loss_bbox": 0.42373, "aux_task5.loss_heatmap": 10.99988, "aux_task5.loss_bbox": 0.46851, "loss": 63.30736, "grad_norm": 337.7027, "time": 1.91203}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 2e-05, "memory": 15684, "data_time": 0.008, "loss_cls": 1.1447, "loss_bbox": 1.72317, "d0.loss_cls": 1.15607, "d0.loss_bbox": 1.79015, "d1.loss_cls": 1.15459, "d1.loss_bbox": 1.75088, "d2.loss_cls": 1.14752, "d2.loss_bbox": 1.7393, "d3.loss_cls": 1.14673, "d3.loss_bbox": 1.73091, "d4.loss_cls": 1.14746, "d4.loss_bbox": 1.7273, "fore_pred_0": 0.5101, "fore_pred_1": 1.08332, "fore_pred_2": 0.39674, "fore_pred_3": 1.67501, "aux_task0.loss_heatmap": 2.4326, "aux_task0.loss_bbox": 0.44028, "aux_task1.loss_heatmap": 5.91921, "aux_task1.loss_bbox": 0.50568, "aux_task2.loss_heatmap": 4.4455, "aux_task2.loss_bbox": 0.50602, "aux_task3.loss_heatmap": 2.95415, "aux_task3.loss_bbox": 0.42472, "aux_task4.loss_heatmap": 3.86064, "aux_task4.loss_bbox": 0.43029, "aux_task5.loss_heatmap": 6.23444, "aux_task5.loss_bbox": 0.47344, "loss": 45.98577, "grad_norm": 182.39823, "time": 1.87827}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 2e-05, "memory": 15684, "data_time": 0.0081, "loss_cls": 1.13349, "loss_bbox": 1.71662, "d0.loss_cls": 1.13969, "d0.loss_bbox": 1.77476, "d1.loss_cls": 1.14193, "d1.loss_bbox": 1.74057, "d2.loss_cls": 1.14096, "d2.loss_bbox": 1.72667, "d3.loss_cls": 1.13797, "d3.loss_bbox": 1.7226, "d4.loss_cls": 1.14128, "d4.loss_bbox": 1.71565, "fore_pred_0": 0.49536, "fore_pred_1": 1.10776, "fore_pred_2": 0.45766, "fore_pred_3": 1.70757, "aux_task0.loss_heatmap": 1.83376, "aux_task0.loss_bbox": 0.43863, "aux_task1.loss_heatmap": 3.78769, "aux_task1.loss_bbox": 0.48765, "aux_task2.loss_heatmap": 3.01306, "aux_task2.loss_bbox": 0.48362, "aux_task3.loss_heatmap": 2.31966, "aux_task3.loss_bbox": 0.4217, "aux_task4.loss_heatmap": 2.56445, "aux_task4.loss_bbox": 0.43766, "aux_task5.loss_heatmap": 3.60789, "aux_task5.loss_bbox": 0.46632, "loss": 37.09428, "grad_norm": 100.06292, "time": 1.84213}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 2e-05, "memory": 15684, "data_time": 0.01469, "loss_cls": 1.13158, "loss_bbox": 1.70433, "d0.loss_cls": 1.13791, "d0.loss_bbox": 1.7637, "d1.loss_cls": 1.14169, "d1.loss_bbox": 1.72075, "d2.loss_cls": 1.14315, "d2.loss_bbox": 1.71523, "d3.loss_cls": 1.13728, "d3.loss_bbox": 1.70867, "d4.loss_cls": 1.1343, "d4.loss_bbox": 1.70964, "fore_pred_0": 0.47838, "fore_pred_1": 1.10453, "fore_pred_2": 0.47664, "fore_pred_3": 1.72326, "aux_task0.loss_heatmap": 1.64921, "aux_task0.loss_bbox": 0.43509, "aux_task1.loss_heatmap": 2.57077, "aux_task1.loss_bbox": 0.48015, "aux_task2.loss_heatmap": 2.28083, "aux_task2.loss_bbox": 0.48888, "aux_task3.loss_heatmap": 1.78759, "aux_task3.loss_bbox": 0.41692, "aux_task4.loss_heatmap": 1.96864, "aux_task4.loss_bbox": 0.42825, "aux_task5.loss_heatmap": 2.63019, "aux_task5.loss_bbox": 0.45811, "loss": 32.74285, "grad_norm": 59.8126, "time": 1.75998}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 2e-05, "memory": 15684, "data_time": 0.008, "loss_cls": 1.11322, "loss_bbox": 1.69688, "d0.loss_cls": 1.1283, "d0.loss_bbox": 1.75017, "d1.loss_cls": 1.13803, "d1.loss_bbox": 1.71293, "d2.loss_cls": 1.13958, "d2.loss_bbox": 1.70251, "d3.loss_cls": 1.13353, "d3.loss_bbox": 1.69911, "d4.loss_cls": 1.11996, "d4.loss_bbox": 1.69892, "fore_pred_0": 0.45307, "fore_pred_1": 1.09571, "fore_pred_2": 0.60153, "fore_pred_3": 1.77425, "aux_task0.loss_heatmap": 1.50714, "aux_task0.loss_bbox": 0.44359, "aux_task1.loss_heatmap": 2.06324, "aux_task1.loss_bbox": 0.4826, "aux_task2.loss_heatmap": 1.96219, "aux_task2.loss_bbox": 0.48223, "aux_task3.loss_heatmap": 1.71478, "aux_task3.loss_bbox": 0.41714, "aux_task4.loss_heatmap": 1.66625, "aux_task4.loss_bbox": 0.42646, "aux_task5.loss_heatmap": 1.94702, "aux_task5.loss_bbox": 0.45837, "loss": 30.60415, "grad_norm": 35.94122, "time": 1.69567}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 2e-05, "memory": 15684, "data_time": 0.01171, "loss_cls": 1.05413, "loss_bbox": 1.67062, "d0.loss_cls": 1.11887, "d0.loss_bbox": 1.73757, "d1.loss_cls": 1.12577, "d1.loss_bbox": 1.69602, "d2.loss_cls": 1.12338, "d2.loss_bbox": 1.68758, "d3.loss_cls": 1.11536, "d3.loss_bbox": 1.68561, "d4.loss_cls": 1.06987, "d4.loss_bbox": 1.67892, "fore_pred_0": 0.44877, "fore_pred_1": 1.08967, "fore_pred_2": 0.57773, "fore_pred_3": 1.7401, "aux_task0.loss_heatmap": 1.44792, "aux_task0.loss_bbox": 0.43127, "aux_task1.loss_heatmap": 1.79253, "aux_task1.loss_bbox": 0.47666, "aux_task2.loss_heatmap": 1.80339, "aux_task2.loss_bbox": 0.47408, "aux_task3.loss_heatmap": 1.56842, "aux_task3.loss_bbox": 0.40439, "aux_task4.loss_heatmap": 1.4912, "aux_task4.loss_bbox": 0.42107, "aux_task5.loss_heatmap": 1.73811, "aux_task5.loss_bbox": 0.45977, "loss": 29.27251, "grad_norm": 26.57597, "time": 1.65477}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 2e-05, "memory": 15684, "data_time": 0.01032, "loss_cls": 1.01826, "loss_bbox": 1.65102, "d0.loss_cls": 1.10793, "d0.loss_bbox": 1.74328, "d1.loss_cls": 1.1131, "d1.loss_bbox": 1.70022, "d2.loss_cls": 1.10031, "d2.loss_bbox": 1.68865, "d3.loss_cls": 1.08362, "d3.loss_bbox": 1.68782, "d4.loss_cls": 1.02777, "d4.loss_bbox": 1.66332, "fore_pred_0": 0.48189, "fore_pred_1": 1.1276, "fore_pred_2": 0.55195, "fore_pred_3": 1.78897, "aux_task0.loss_heatmap": 1.40277, "aux_task0.loss_bbox": 0.43928, "aux_task1.loss_heatmap": 1.65642, "aux_task1.loss_bbox": 0.45703, "aux_task2.loss_heatmap": 1.77898, "aux_task2.loss_bbox": 0.47894, "aux_task3.loss_heatmap": 1.49841, "aux_task3.loss_bbox": 0.40694, "aux_task4.loss_heatmap": 1.36157, "aux_task4.loss_bbox": 0.42411, "aux_task5.loss_heatmap": 1.62923, "aux_task5.loss_bbox": 0.4558, "loss": 28.5748, "grad_norm": 25.51145, "time": 1.73182}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 2e-05, "memory": 15684, "data_time": 0.00946, "loss_cls": 0.98816, "loss_bbox": 1.59468, "d0.loss_cls": 1.09052, "d0.loss_bbox": 1.72118, "d1.loss_cls": 1.08249, "d1.loss_bbox": 1.67157, "d2.loss_cls": 1.0517, "d2.loss_bbox": 1.65848, "d3.loss_cls": 1.03308, "d3.loss_bbox": 1.65475, "d4.loss_cls": 0.98863, "d4.loss_bbox": 1.61608, "fore_pred_0": 0.50455, "fore_pred_1": 1.23421, "fore_pred_2": 0.55312, "fore_pred_3": 1.87583, "aux_task0.loss_heatmap": 1.3643, "aux_task0.loss_bbox": 0.415, "aux_task1.loss_heatmap": 1.62827, "aux_task1.loss_bbox": 0.45304, "aux_task2.loss_heatmap": 1.75241, "aux_task2.loss_bbox": 0.4821, "aux_task3.loss_heatmap": 1.44869, "aux_task3.loss_bbox": 0.40063, "aux_task4.loss_heatmap": 1.24924, "aux_task4.loss_bbox": 0.41073, "aux_task5.loss_heatmap": 1.48541, "aux_task5.loss_bbox": 0.42645, "loss": 27.66758, "grad_norm": 25.36141, "time": 1.79195}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 2e-05, "memory": 15684, "data_time": 0.0083, "loss_cls": 0.96771, "loss_bbox": 1.55429, "d0.loss_cls": 1.06426, "d0.loss_bbox": 1.71118, "d1.loss_cls": 1.04557, "d1.loss_bbox": 1.64797, "d2.loss_cls": 1.00366, "d2.loss_bbox": 1.62751, "d3.loss_cls": 0.99139, "d3.loss_bbox": 1.61489, "d4.loss_cls": 0.9637, "d4.loss_bbox": 1.57632, "fore_pred_0": 0.4839, "fore_pred_1": 1.2364, "fore_pred_2": 0.55404, "fore_pred_3": 1.89307, "aux_task0.loss_heatmap": 1.32016, "aux_task0.loss_bbox": 0.39857, "aux_task1.loss_heatmap": 1.58813, "aux_task1.loss_bbox": 0.4412, "aux_task2.loss_heatmap": 1.7388, "aux_task2.loss_bbox": 0.47818, "aux_task3.loss_heatmap": 1.37771, "aux_task3.loss_bbox": 0.37004, "aux_task4.loss_heatmap": 1.16025, "aux_task4.loss_bbox": 0.39691, "aux_task5.loss_heatmap": 1.43324, "aux_task5.loss_bbox": 0.41354, "loss": 26.88519, "grad_norm": 27.65219, "time": 1.68493}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 2e-05, "memory": 15684, "data_time": 0.00806, "loss_cls": 0.96124, "loss_bbox": 1.52355, "d0.loss_cls": 1.04181, "d0.loss_bbox": 1.69833, "d1.loss_cls": 1.01055, "d1.loss_bbox": 1.61798, "d2.loss_cls": 0.97099, "d2.loss_bbox": 1.58161, "d3.loss_cls": 0.96896, "d3.loss_bbox": 1.56837, "d4.loss_cls": 0.95494, "d4.loss_bbox": 1.53939, "fore_pred_0": 0.48984, "fore_pred_1": 1.24701, "fore_pred_2": 0.5657, "fore_pred_3": 1.94376, "aux_task0.loss_heatmap": 1.29648, "aux_task0.loss_bbox": 0.39049, "aux_task1.loss_heatmap": 1.53858, "aux_task1.loss_bbox": 0.42901, "aux_task2.loss_heatmap": 1.72908, "aux_task2.loss_bbox": 0.46969, "aux_task3.loss_heatmap": 1.36032, "aux_task3.loss_bbox": 0.37046, "aux_task4.loss_heatmap": 1.15271, "aux_task4.loss_bbox": 0.39109, "aux_task5.loss_heatmap": 1.3517, "aux_task5.loss_bbox": 0.40073, "loss": 26.31807, "grad_norm": 26.81208, "time": 1.75148}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 2e-05, "memory": 15684, "data_time": 0.00768, "loss_cls": 0.95794, "loss_bbox": 1.47157, "d0.loss_cls": 1.02704, "d0.loss_bbox": 1.68465, "d1.loss_cls": 0.98661, "d1.loss_bbox": 1.57205, "d2.loss_cls": 0.95813, "d2.loss_bbox": 1.53084, "d3.loss_cls": 0.95611, "d3.loss_bbox": 1.51042, "d4.loss_cls": 0.95074, "d4.loss_bbox": 1.47864, "fore_pred_0": 0.48792, "fore_pred_1": 1.25188, "fore_pred_2": 0.588, "fore_pred_3": 1.83297, "aux_task0.loss_heatmap": 1.28706, "aux_task0.loss_bbox": 0.39433, "aux_task1.loss_heatmap": 1.51043, "aux_task1.loss_bbox": 0.42256, "aux_task2.loss_heatmap": 1.70277, "aux_task2.loss_bbox": 0.46096, "aux_task3.loss_heatmap": 1.37329, "aux_task3.loss_bbox": 0.35877, "aux_task4.loss_heatmap": 1.06946, "aux_task4.loss_bbox": 0.37878, "aux_task5.loss_heatmap": 1.28161, "aux_task5.loss_bbox": 0.38905, "loss": 25.71378, "grad_norm": 26.88047, "time": 1.75276}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 2e-05, "memory": 15684, "data_time": 0.01378, "loss_cls": 0.95565, "loss_bbox": 1.43197, "d0.loss_cls": 1.01108, "d0.loss_bbox": 1.64991, "d1.loss_cls": 0.96966, "d1.loss_bbox": 1.51915, "d2.loss_cls": 0.95179, "d2.loss_bbox": 1.47581, "d3.loss_cls": 0.94764, "d3.loss_bbox": 1.45651, "d4.loss_cls": 0.94823, "d4.loss_bbox": 1.43473, "fore_pred_0": 0.49877, "fore_pred_1": 1.28359, "fore_pred_2": 0.53132, "fore_pred_3": 1.85467, "aux_task0.loss_heatmap": 1.24492, "aux_task0.loss_bbox": 0.37387, "aux_task1.loss_heatmap": 1.47667, "aux_task1.loss_bbox": 0.40936, "aux_task2.loss_heatmap": 1.70193, "aux_task2.loss_bbox": 0.4623, "aux_task3.loss_heatmap": 1.28028, "aux_task3.loss_bbox": 0.34825, "aux_task4.loss_heatmap": 1.06344, "aux_task4.loss_bbox": 0.37665, "aux_task5.loss_heatmap": 1.26845, "aux_task5.loss_bbox": 0.38337, "loss": 25.14161, "grad_norm": 30.3525, "time": 1.8685}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 2e-05, "memory": 15684, "data_time": 0.00866, "loss_cls": 0.94388, "loss_bbox": 1.40902, "d0.loss_cls": 1.00066, "d0.loss_bbox": 1.6393, "d1.loss_cls": 0.96038, "d1.loss_bbox": 1.49555, "d2.loss_cls": 0.94414, "d2.loss_bbox": 1.45, "d3.loss_cls": 0.94116, "d3.loss_bbox": 1.43032, "d4.loss_cls": 0.94098, "d4.loss_bbox": 1.41364, "fore_pred_0": 0.51421, "fore_pred_1": 1.30092, "fore_pred_2": 0.50309, "fore_pred_3": 1.85295, "aux_task0.loss_heatmap": 1.24309, "aux_task0.loss_bbox": 0.38259, "aux_task1.loss_heatmap": 1.48311, "aux_task1.loss_bbox": 0.41891, "aux_task2.loss_heatmap": 1.71014, "aux_task2.loss_bbox": 0.45018, "aux_task3.loss_heatmap": 1.28513, "aux_task3.loss_bbox": 0.3508, "aux_task4.loss_heatmap": 1.03161, "aux_task4.loss_bbox": 0.37731, "aux_task5.loss_heatmap": 1.23222, "aux_task5.loss_bbox": 0.38351, "loss": 24.91761, "grad_norm": 27.79096, "time": 1.89578}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 2e-05, "memory": 15684, "data_time": 0.01007, "loss_cls": 0.93825, "loss_bbox": 1.38631, "d0.loss_cls": 1.00015, "d0.loss_bbox": 1.64131, "d1.loss_cls": 0.95339, "d1.loss_bbox": 1.48306, "d2.loss_cls": 0.94116, "d2.loss_bbox": 1.42949, "d3.loss_cls": 0.93743, "d3.loss_bbox": 1.41127, "d4.loss_cls": 0.93726, "d4.loss_bbox": 1.39658, "fore_pred_0": 0.52039, "fore_pred_1": 1.28043, "fore_pred_2": 0.49013, "fore_pred_3": 1.90019, "aux_task0.loss_heatmap": 1.20804, "aux_task0.loss_bbox": 0.38742, "aux_task1.loss_heatmap": 1.47001, "aux_task1.loss_bbox": 0.41484, "aux_task2.loss_heatmap": 1.69558, "aux_task2.loss_bbox": 0.44741, "aux_task3.loss_heatmap": 1.29221, "aux_task3.loss_bbox": 0.35711, "aux_task4.loss_heatmap": 0.99237, "aux_task4.loss_bbox": 0.36374, "aux_task5.loss_heatmap": 1.22288, "aux_task5.loss_bbox": 0.38201, "loss": 24.68927, "grad_norm": 30.52107, "time": 1.88916}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 2e-05, "memory": 15684, "data_time": 0.00871, "loss_cls": 0.93439, "loss_bbox": 1.36488, "d0.loss_cls": 0.99197, "d0.loss_bbox": 1.61308, "d1.loss_cls": 0.9503, "d1.loss_bbox": 1.45409, "d2.loss_cls": 0.93526, "d2.loss_bbox": 1.4055, "d3.loss_cls": 0.93087, "d3.loss_bbox": 1.38781, "d4.loss_cls": 0.93046, "d4.loss_bbox": 1.37602, "fore_pred_0": 0.51558, "fore_pred_1": 1.28782, "fore_pred_2": 0.49233, "fore_pred_3": 1.91168, "aux_task0.loss_heatmap": 1.20222, "aux_task0.loss_bbox": 0.38047, "aux_task1.loss_heatmap": 1.44411, "aux_task1.loss_bbox": 0.41199, "aux_task2.loss_heatmap": 1.66569, "aux_task2.loss_bbox": 0.44274, "aux_task3.loss_heatmap": 1.24373, "aux_task3.loss_bbox": 0.34933, "aux_task4.loss_heatmap": 0.98655, "aux_task4.loss_bbox": 0.37085, "aux_task5.loss_heatmap": 1.18202, "aux_task5.loss_bbox": 0.37096, "loss": 24.3253, "grad_norm": 29.87687, "time": 1.88967}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 2e-05, "memory": 15684, "data_time": 0.01036, "loss_cls": 0.92417, "loss_bbox": 1.33067, "d0.loss_cls": 0.98033, "d0.loss_bbox": 1.58986, "d1.loss_cls": 0.93494, "d1.loss_bbox": 1.4223, "d2.loss_cls": 0.92149, "d2.loss_bbox": 1.37316, "d3.loss_cls": 0.91784, "d3.loss_bbox": 1.35508, "d4.loss_cls": 0.9216, "d4.loss_bbox": 1.34052, "fore_pred_0": 0.53417, "fore_pred_1": 1.29089, "fore_pred_2": 0.49651, "fore_pred_3": 1.97226, "aux_task0.loss_heatmap": 1.17726, "aux_task0.loss_bbox": 0.37631, "aux_task1.loss_heatmap": 1.42048, "aux_task1.loss_bbox": 0.40785, "aux_task2.loss_heatmap": 1.66422, "aux_task2.loss_bbox": 0.45487, "aux_task3.loss_heatmap": 1.25948, "aux_task3.loss_bbox": 0.35201, "aux_task4.loss_heatmap": 0.94444, "aux_task4.loss_bbox": 0.36031, "aux_task5.loss_heatmap": 1.14591, "aux_task5.loss_bbox": 0.37074, "loss": 23.94584, "grad_norm": 29.40251, "time": 1.91909}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 2e-05, "memory": 15684, "data_time": 0.0095, "loss_cls": 0.91422, "loss_bbox": 1.3135, "d0.loss_cls": 0.97227, "d0.loss_bbox": 1.56934, "d1.loss_cls": 0.92476, "d1.loss_bbox": 1.40403, "d2.loss_cls": 0.91449, "d2.loss_bbox": 1.36054, "d3.loss_cls": 0.90823, "d3.loss_bbox": 1.34137, "d4.loss_cls": 0.9095, "d4.loss_bbox": 1.32488, "fore_pred_0": 0.54175, "fore_pred_1": 1.26924, "fore_pred_2": 0.45712, "fore_pred_3": 2.00316, "aux_task0.loss_heatmap": 1.14468, "aux_task0.loss_bbox": 0.37157, "aux_task1.loss_heatmap": 1.40279, "aux_task1.loss_bbox": 0.40807, "aux_task2.loss_heatmap": 1.65298, "aux_task2.loss_bbox": 0.45227, "aux_task3.loss_heatmap": 1.21798, "aux_task3.loss_bbox": 0.34708, "aux_task4.loss_heatmap": 0.94943, "aux_task4.loss_bbox": 0.35615, "aux_task5.loss_heatmap": 1.15057, "aux_task5.loss_bbox": 0.37241, "loss": 23.6831, "grad_norm": 31.43278, "time": 1.89461}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 2e-05, "memory": 15684, "data_time": 0.00938, "loss_cls": 0.90044, "loss_bbox": 1.29791, "d0.loss_cls": 0.96728, "d0.loss_bbox": 1.55884, "d1.loss_cls": 0.91529, "d1.loss_bbox": 1.39335, "d2.loss_cls": 0.89873, "d2.loss_bbox": 1.34291, "d3.loss_cls": 0.89595, "d3.loss_bbox": 1.32068, "d4.loss_cls": 0.89782, "d4.loss_bbox": 1.30563, "fore_pred_0": 0.5334, "fore_pred_1": 1.29212, "fore_pred_2": 0.41315, "fore_pred_3": 1.93361, "aux_task0.loss_heatmap": 1.13151, "aux_task0.loss_bbox": 0.3736, "aux_task1.loss_heatmap": 1.39903, "aux_task1.loss_bbox": 0.4085, "aux_task2.loss_heatmap": 1.6451, "aux_task2.loss_bbox": 0.4388, "aux_task3.loss_heatmap": 1.23543, "aux_task3.loss_bbox": 0.35335, "aux_task4.loss_heatmap": 0.90248, "aux_task4.loss_bbox": 0.36139, "aux_task5.loss_heatmap": 1.14682, "aux_task5.loss_bbox": 0.3715, "loss": 23.46234, "grad_norm": 30.12047, "time": 1.90094}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 2e-05, "memory": 15684, "data_time": 0.01055, "loss_cls": 0.88268, "loss_bbox": 1.2795, "d0.loss_cls": 0.94705, "d0.loss_bbox": 1.52786, "d1.loss_cls": 0.89612, "d1.loss_bbox": 1.36307, "d2.loss_cls": 0.87938, "d2.loss_bbox": 1.31891, "d3.loss_cls": 0.8765, "d3.loss_bbox": 1.29946, "d4.loss_cls": 0.87757, "d4.loss_bbox": 1.28675, "fore_pred_0": 0.52943, "fore_pred_1": 1.25479, "fore_pred_2": 0.40349, "fore_pred_3": 1.91278, "aux_task0.loss_heatmap": 1.09431, "aux_task0.loss_bbox": 0.35812, "aux_task1.loss_heatmap": 1.3761, "aux_task1.loss_bbox": 0.40267, "aux_task2.loss_heatmap": 1.66381, "aux_task2.loss_bbox": 0.44264, "aux_task3.loss_heatmap": 1.23083, "aux_task3.loss_bbox": 0.34596, "aux_task4.loss_heatmap": 0.90702, "aux_task4.loss_bbox": 0.3591, "aux_task5.loss_heatmap": 1.09745, "aux_task5.loss_bbox": 0.36738, "loss": 23.08024, "grad_norm": 32.94106, "time": 1.8795}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 2e-05, "memory": 15684, "data_time": 0.00752, "loss_cls": 0.87914, "loss_bbox": 1.28707, "d0.loss_cls": 0.95064, "d0.loss_bbox": 1.53091, "d1.loss_cls": 0.89488, "d1.loss_bbox": 1.37417, "d2.loss_cls": 0.87879, "d2.loss_bbox": 1.32903, "d3.loss_cls": 0.87396, "d3.loss_bbox": 1.30736, "d4.loss_cls": 0.87462, "d4.loss_bbox": 1.29187, "fore_pred_0": 0.52677, "fore_pred_1": 1.25464, "fore_pred_2": 0.39737, "fore_pred_3": 1.88156, "aux_task0.loss_heatmap": 1.10366, "aux_task0.loss_bbox": 0.36932, "aux_task1.loss_heatmap": 1.3552, "aux_task1.loss_bbox": 0.40511, "aux_task2.loss_heatmap": 1.61121, "aux_task2.loss_bbox": 0.44356, "aux_task3.loss_heatmap": 1.22557, "aux_task3.loss_bbox": 0.34519, "aux_task4.loss_heatmap": 0.88252, "aux_task4.loss_bbox": 0.35977, "aux_task5.loss_heatmap": 1.11469, "aux_task5.loss_bbox": 0.36904, "loss": 23.05728, "grad_norm": 33.86086, "time": 1.9724}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 2e-05, "memory": 15684, "data_time": 0.00924, "loss_cls": 0.86913, "loss_bbox": 1.26212, "d0.loss_cls": 0.94031, "d0.loss_bbox": 1.49962, "d1.loss_cls": 0.88801, "d1.loss_bbox": 1.34524, "d2.loss_cls": 0.87157, "d2.loss_bbox": 1.30222, "d3.loss_cls": 0.86768, "d3.loss_bbox": 1.28121, "d4.loss_cls": 0.86467, "d4.loss_bbox": 1.26713, "fore_pred_0": 0.52019, "fore_pred_1": 1.22843, "fore_pred_2": 0.39883, "fore_pred_3": 1.81645, "aux_task0.loss_heatmap": 1.11331, "aux_task0.loss_bbox": 0.36316, "aux_task1.loss_heatmap": 1.37683, "aux_task1.loss_bbox": 0.41089, "aux_task2.loss_heatmap": 1.61541, "aux_task2.loss_bbox": 0.43043, "aux_task3.loss_heatmap": 1.2036, "aux_task3.loss_bbox": 0.34216, "aux_task4.loss_heatmap": 0.89624, "aux_task4.loss_bbox": 0.35835, "aux_task5.loss_heatmap": 1.07133, "aux_task5.loss_bbox": 0.3642, "loss": 22.80483, "grad_norm": 31.95478, "time": 1.83106}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 2e-05, "memory": 15684, "data_time": 0.01247, "loss_cls": 0.86876, "loss_bbox": 1.26468, "d0.loss_cls": 0.93268, "d0.loss_bbox": 1.49896, "d1.loss_cls": 0.88172, "d1.loss_bbox": 1.35345, "d2.loss_cls": 0.86719, "d2.loss_bbox": 1.30993, "d3.loss_cls": 0.86534, "d3.loss_bbox": 1.28734, "d4.loss_cls": 0.86664, "d4.loss_bbox": 1.27014, "fore_pred_0": 0.53658, "fore_pred_1": 1.22144, "fore_pred_2": 0.37572, "fore_pred_3": 1.80862, "aux_task0.loss_heatmap": 1.07882, "aux_task0.loss_bbox": 0.36856, "aux_task1.loss_heatmap": 1.35261, "aux_task1.loss_bbox": 0.39935, "aux_task2.loss_heatmap": 1.6213, "aux_task2.loss_bbox": 0.44374, "aux_task3.loss_heatmap": 1.17847, "aux_task3.loss_bbox": 0.34419, "aux_task4.loss_heatmap": 0.9009, "aux_task4.loss_bbox": 0.36373, "aux_task5.loss_heatmap": 1.0516, "aux_task5.loss_bbox": 0.36302, "loss": 22.73314, "grad_norm": 31.02473, "time": 1.89132}
